#
# PySNMP MIB module HC-RMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HC-RMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ZeroBasedCounter64, CounterBasedGauge64 = mibBuilder.importSymbols("HCNUM-TC", "ZeroBasedCounter64", "CounterBasedGauge64")
hostIndex, hosts, hostTopN, matrix, matrixDSSourceAddress, captureBufferIndex, rmon, matrixDSDestAddress, matrixSDSourceAddress, hostAddress, matrixSDIndex, hostTopNIndex, capture, matrixSDDestAddress, statistics, OwnerString, hostTimeCreationOrder, history, etherHistorySampleIndex, captureBufferControlIndex, matrixDSIndex, etherHistoryIndex, etherStatsIndex, hostTimeIndex, hostTopNReport = mibBuilder.importSymbols("RMON-MIB", "hostIndex", "hosts", "hostTopN", "matrix", "matrixDSSourceAddress", "captureBufferIndex", "rmon", "matrixDSDestAddress", "matrixSDSourceAddress", "hostAddress", "matrixSDIndex", "hostTopNIndex", "capture", "matrixSDDestAddress", "statistics", "OwnerString", "hostTimeCreationOrder", "history", "etherHistorySampleIndex", "captureBufferControlIndex", "matrixDSIndex", "etherHistoryIndex", "etherStatsIndex", "hostTimeIndex", "hostTopNReport")
rmonConformance, = mibBuilder.importSymbols("RMON2-MIB", "rmonConformance")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, NotificationType, TimeTicks, Integer32, Gauge32, ModuleIdentity, Unsigned32, IpAddress, Counter32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "NotificationType", "TimeTicks", "Integer32", "Gauge32", "ModuleIdentity", "Unsigned32", "IpAddress", "Counter32", "ObjectIdentity", "Counter64")
DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
hcRMON = ModuleIdentity((1, 3, 6, 1, 2, 1, 16, 20, 5))
hcRMON.setRevisions(('2002-05-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hcRMON.setRevisionsDescriptions(('The original version of this MIB, published as RFC3273.',))
if mibBuilder.loadTexts: hcRMON.setLastUpdated('200205080000Z')
if mibBuilder.loadTexts: hcRMON.setOrganization('IETF RMON MIB Working Group')
if mibBuilder.loadTexts: hcRMON.setContactInfo('Steve Waldbusser Phone: +1-650-948-6500 Fax: +1-650-745-0671 Email: waldbusser@nextbeacon.com Andy Bierman WG Chair abierman@cisco.com RMONMIB WG Mailing List rmonmib@ietf.org http://www.ietf.org/mailman/listinfo/rmonmib')
if mibBuilder.loadTexts: hcRMON.setDescription('The MIB module for managing remote monitoring device implementations. This MIB module augments the original RMON MIB as specified in RFC 2819 and RFC 1513 and RMON-2 MIB as specified in RFC 2021.')
mediaIndependentStats = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 21))
mediaIndependentTable = MibTable((1, 3, 6, 1, 2, 1, 16, 21, 1), )
if mibBuilder.loadTexts: mediaIndependentTable.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentTable.setDescription('Media independent statistics for promiscuous monitoring of any media. The following table defines media independent statistics that provide information for full and/or half-duplex links as well as high capacity links. For half-duplex links, or full-duplex-capable links operating in half-duplex mode, the mediaIndependentIn* objects shall be used and the mediaIndependentOut* objects shall not increment. For full-duplex links, the mediaIndependentOut* objects shall be present and shall increment. Whenever possible, the probe should count packets moving away from the closest terminating equipment as output packets. Failing that, the probe should count packets moving away from the DTE as output packets.')
mediaIndependentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 21, 1, 1), ).setIndexNames((0, "HC-RMON-MIB", "mediaIndependentIndex"))
if mibBuilder.loadTexts: mediaIndependentEntry.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentEntry.setDescription('Media independent statistics for promiscuous monitoring of any media.')
mediaIndependentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mediaIndependentIndex.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentIndex.setDescription('The value of this object uniquely identifies this mediaIndependent entry.')
mediaIndependentDataSource = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentDataSource.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDataSource.setDescription('This object identifies the source of the data that this mediaIndependent entry is configured to analyze. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 1213 and RFC 2233 [16,17], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. The statistics in this group reflect all packets on the local network segment attached to the identified interface. An agent may or may not be able to tell if fundamental changes to the media of the interface have occurred and necessitate a deletion of this entry. For example, a hot-pluggable ethernet card could be pulled out and replaced by a token-ring card. In such a case, if the agent has such knowledge of the change, it is recommended that it delete this entry. This object may not be modified if the associated mediaIndependentStatus object is equal to active(1).')
mediaIndependentDropEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 3), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDropEvents.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDropEvents.setDescription('The total number of events in which packets were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of packets dropped; it is just the number of times this condition has been detected.')
mediaIndependentDroppedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDroppedFrames.setDescription('The total number of frames which were received by the probe and therefore not accounted for in the mediaIndependentDropEvents, but for which the probe chose not to count for this entry for whatever reason. Most often, this event occurs when the probe is out of some resources and decides to shed load from this collection. This count does not include packets that were not counted because they had MAC-layer errors. Note that, unlike the dropEvents counter, this number is the exact number of frames dropped.')
mediaIndependentInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInOverflowPkts.setDescription('The number of times the associated mediaIndependentInPkts counter has overflowed.')
mediaIndependentInHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInHighCapacityPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received on a full-duplex link in the direction of the network.')
mediaIndependentOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutOverflowPkts.setDescription('The number of times the associated mediaIndependentOutPkts counter has overflowed.')
mediaIndependentOutHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received on a full-duplex link in the direction of the network.')
mediaIndependentInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInOctets.setDescription('The total number of octets of data (including those in bad packets) received (excluding framing bits but including FCS octets) on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 12), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInOverflowOctets.setDescription('The number of times the associated mediaIndependentInOctets counter has overflowed.')
mediaIndependentInHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInHighCapacityOctets.setDescription('The total number of octets of data (including those in bad packets) received (excluding framing bits but including FCS octets) on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 14), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutOctets.setDescription('The total number of octets of data (including those in bad packets) received on a full-duplex link in the direction of the network (excluding framing bits but including FCS octets).')
mediaIndependentOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 15), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutOverflowOctets.setDescription('The number of times the associated mediaIndependentOutOctets counter has overflowed.')
mediaIndependentOutHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 16), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutHighCapacityOctets.setDescription('The total number of octets of data (including those in bad packets) received on a full-duplex link in the direction of the network (excluding framing bits but including FCS octets).')
mediaIndependentInNUCastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInNUCastPkts.setDescription('The total number of non-unicast packets (including bad packets) received on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentInNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInNUCastOverflowPkts.setDescription('The number of times the associated mediaIndependentInNUCastPkts counter has overflowed.')
mediaIndependentInNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInNUCastHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInNUCastHighCapacityPkts.setDescription('The total number of non-unicast packets (including bad packets) received on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentOutNUCastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutNUCastPkts.setDescription('The total number of non-unicast packets (including bad packets) received on a full-duplex link in the direction of the network.')
mediaIndependentOutNUCastOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 21), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutNUCastOverflowPkts.setDescription('The number of times the associated mediaIndependentOutNUCastPkts counter has overflowed.')
mediaIndependentOutNUCastHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutNUCastHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutNUCastHighCapacityPkts.setDescription('The total number of packets (including bad packets) received on a full-duplex link in the direction of the network.')
mediaIndependentInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInErrors.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInErrors.setDescription('The total number of bad packets received on a half-duplex link or on the inbound connection of a full-duplex link.')
mediaIndependentOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 24), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutErrors.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutErrors.setDescription('The total number of bad packets received on a full-duplex link in the direction of the network.')
mediaIndependentInputSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 25), Gauge32()).setUnits('Kilobits per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentInputSpeed.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentInputSpeed.setDescription('The nominal maximum speed in kilobits per second of this half-duplex link or on the inbound connection of this full-duplex link. If the speed is unknown or there is no fixed maximum (e.g. a compressed link), this value shall be zero.')
mediaIndependentOutputSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 26), Gauge32()).setUnits('Kilobits per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentOutputSpeed.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOutputSpeed.setDescription('The nominal maximum speed in kilobits per second of this full-duplex link in the direction of the network. If the speed is unknown, the link is half-duplex, or there is no fixed maximum (e.g. a compressed link), this value shall be zero.')
mediaIndependentDuplexMode = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfduplex", 1), ("fullduplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexMode.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDuplexMode.setDescription('The current mode of this link. Note that if the link has full-duplex capabilities but is operating in half-duplex mode, this value will be halfduplex(1).')
mediaIndependentDuplexChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 28), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexChanges.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDuplexChanges.setDescription('The number of times this link has changed from full-duplex mode to half-duplex mode or from half-duplex mode to full-duplex mode.')
mediaIndependentDuplexLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaIndependentDuplexLastChange.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentDuplexLastChange.setDescription('The value of sysUpTime at the time the duplex status of this link last changed.')
mediaIndependentOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 30), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentOwner.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
mediaIndependentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 21, 1, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mediaIndependentStatus.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentStatus.setDescription('The status of this media independent statistics entry.')
etherStatsHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 1, 7), )
if mibBuilder.loadTexts: etherStatsHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 etherStatsTable.')
etherStatsHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 1, 7, 1), ).setIndexNames((0, "RMON-MIB", "etherStatsIndex"))
if mibBuilder.loadTexts: etherStatsHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 etherStatsEntry. These objects will be created by the agent for all etherStatsEntries it deems appropriate.')
etherStatsHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts.setDescription('The number of times the associated etherStatsPkts counter has overflowed.')
etherStatsHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received.')
etherStatsHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowOctets.setDescription('The number of times the associated etherStatsOctets counter has overflowed.')
etherStatsHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOctets.setDescription('The total number of octets of data (including those in bad packets) received on the network (excluding framing bits but including FCS octets). If the network is half-duplex Fast Ethernet, this object can be used as a reasonable estimate of utilization. If greater precision is desired, the etherStatsHighCapacityPkts and etherStatsHighCapacityOctets objects should be sampled before and after a common interval. The differences in the sampled values are Pkts and Octets, respectively, and the number of seconds in the interval is Interval. These values are used to calculate the Utilization as follows: Pkts * (.96 + .64) + (Octets * .08) Utilization = ------------------------------------- Interval * 10,000 The result of this equation is the value Utilization which is the percent utilization of the ethernet segment on a scale of 0 to 100 percent. This table is not appropriate for monitoring full-duplex ethernets. If the network is a full-duplex ethernet and the mediaIndependentTable is monitoring that network, the utilization can be calculated as follows: 1) Determine the utilization of the inbound path by using the appropriate equation (for ethernet or fast ethernet) to determine the utilization, substituting mediaIndependentInPkts for etherStatsHighCapacityPkts, and mediaIndependentInOctets for etherStatsHighCapacityOctets. Call the resulting utilization inUtilization. 2) Determine the utilization of the outbound path by using the same equation to determine the utilization, substituting mediaIndependentOutPkts for etherStatsHighCapacityPkts, and mediaIndependentOutOctets for etherStatsHighCapacityOctets. Call the resulting utilization outUtilization. 3) The utilization is the maximum of inUtilization and outUtilization. This metric shows the amount of percentage of bandwidth that is left before congestion will be experienced on the link.')
etherStatsHighCapacityOverflowPkts64Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts64Octets.setDescription('The number of times the associated etherStatsPkts64Octets counter has overflowed.')
etherStatsHighCapacityPkts64Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts64Octets.setDescription('The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts65to127Octets.setDescription('The number of times the associated etherStatsPkts65to127Octets counter has overflowed.')
etherStatsHighCapacityPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts65to127Octets.setDescription('The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts128to255Octets.setDescription('The number of times the associated etherStatsPkts128to255Octets counter has overflowed.')
etherStatsHighCapacityPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts128to255Octets.setDescription('The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts256to511Octets.setDescription('The number of times the associated etherStatsPkts256to511Octets counter has overflowed.')
etherStatsHighCapacityPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts256to511Octets.setDescription('The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts512to1023Octets.setDescription('The number of times the associated etherStatsPkts512to1023Octets counter has overflowed.')
etherStatsHighCapacityPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts512to1023Octets.setDescription('The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
etherStatsHighCapacityOverflowPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityOverflowPkts1024to1518Octets.setDescription('The number of times the associated etherStatsPkts1024to1518Octets counter has overflowed.')
etherStatsHighCapacityPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 1, 7, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherStatsHighCapacityPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityPkts1024to1518Octets.setDescription('The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
etherHistoryHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 2, 6), )
if mibBuilder.loadTexts: etherHistoryHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 etherHistoryTable.')
etherHistoryHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 2, 6, 1), ).setIndexNames((0, "RMON-MIB", "etherHistoryIndex"), (0, "RMON-MIB", "etherHistorySampleIndex"))
if mibBuilder.loadTexts: etherHistoryHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 etherHistoryEntry. These objects will be created by the agent for all etherHistoryEntries associated with whichever historyControlEntries it deems appropriate. (i.e., either all etherHistoryHighCapacityEntries associated with a particular historyControlEntry will be created, or none of them will be.)')
etherHistoryHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 1), Gauge32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowPkts.setDescription('The number of times the associated etherHistoryPkts Gauge overflowed during this sampling interval.')
etherHistoryHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 2), CounterBasedGauge64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityPkts.setDescription('The total number of packets (including bad packets, broadcast packets, and multicast packets) received during this sampling interval.')
etherHistoryHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 3), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityOverflowOctets.setDescription('The number of times the associated etherHistoryOctets counter has overflowed during this sampling interval.')
etherHistoryHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 2, 6, 1, 4), CounterBasedGauge64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: etherHistoryHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityOctets.setDescription('The total number of octets of data (including those in bad packets) received on the network (excluding framing bits but including FCS octets) during this sampling interval.')
hostHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 4, 5), )
if mibBuilder.loadTexts: hostHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 hostTable.')
hostHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 4, 5, 1), ).setIndexNames((0, "RMON-MIB", "hostIndex"), (0, "RMON-MIB", "hostAddress"))
if mibBuilder.loadTexts: hostHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 hostEntry. These objects will be created by the agent for all hostEntries associated with whichever hostControlEntries it deems appropriate. (i.e., either all hostHighCapacityEntries associated with a particular hostControlEntry will be created, or none of them will be.)')
hostHighCapacityInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityInOverflowPkts.setDescription('The number of times the associated hostInPkts counter has overflowed.')
hostHighCapacityInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInPkts.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityInPkts.setDescription('The number of good packets transmitted to this address since it was added to the hostHighCapacityTable.')
hostHighCapacityOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityOutOverflowPkts.setDescription('The number of times the associated hostOutPkts counter has overflowed.')
hostHighCapacityOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutPkts.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityOutPkts.setDescription('The number of packets, including bad packets, transmitted by this address since it was added to the hostHighCapacityTable.')
hostHighCapacityInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityInOverflowOctets.setDescription('The number of times the associated hostInOctets counter has overflowed.')
hostHighCapacityInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityInOctets.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityInOctets.setDescription('The number of octets transmitted to this address since it was added to the hostHighCapacityTable (excluding framing bits but including FCS octets), except for those octets in bad packets.')
hostHighCapacityOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityOutOverflowOctets.setDescription('The number of times the associated hostOutOctets counter has overflowed.')
hostHighCapacityOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 5, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostHighCapacityOutOctets.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityOutOctets.setDescription('The number of octets transmitted by this address since it was added to the hostHighCapacityTable (excluding framing bits but including FCS octets), including those octets in bad packets.')
hostTimeHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 4, 6), )
if mibBuilder.loadTexts: hostTimeHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 hostTimeTable.')
hostTimeHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 4, 6, 1), ).setIndexNames((0, "RMON-MIB", "hostTimeIndex"), (0, "RMON-MIB", "hostTimeCreationOrder"))
if mibBuilder.loadTexts: hostTimeHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 hostTimeEntry. These objects will be created by the agent for all hostTimeEntries associated with whichever hostControlEntries it deems appropriate. (i.e., either all hostTimeHighCapacityEntries associated with a particular hostControlEntry will be created, or none of them will be.)')
hostTimeHighCapacityInOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityInOverflowPkts.setDescription('The number of times the associated hostTimeInPkts counter has overflowed.')
hostTimeHighCapacityInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInPkts.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityInPkts.setDescription('The number of good packets transmitted to this address since it was added to the hostTimeHighCapacityTable.')
hostTimeHighCapacityOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityOutOverflowPkts.setDescription('The number of times the associated hostTimeOutPkts counter has overflowed.')
hostTimeHighCapacityOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutPkts.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityOutPkts.setDescription('The number of packets, including bad packets, transmitted by this address since it was added to the hostTimeHighCapacityTable.')
hostTimeHighCapacityInOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityInOverflowOctets.setDescription('The number of times the associated hostTimeInOctets counter has overflowed.')
hostTimeHighCapacityInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityInOctets.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityInOctets.setDescription('The number of octets transmitted to this address since it was added to the hostTimeHighCapacityTable (excluding framing bits but including FCS octets), except for those octets in bad packets.')
hostTimeHighCapacityOutOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityOutOverflowOctets.setDescription('The number of times the associated hostTimeOutOctets counter has overflowed.')
hostTimeHighCapacityOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 4, 6, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTimeHighCapacityOutOctets.setStatus('current')
if mibBuilder.loadTexts: hostTimeHighCapacityOutOctets.setDescription('The number of octets transmitted by this address since it was added to the hostTimeTable (excluding framing bits but including FCS octets), including those octets in bad packets.')
hostTopNHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 5, 3), )
if mibBuilder.loadTexts: hostTopNHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 hostTopNTable when hostTopNRateBase specifies a High Capacity TopN Report.')
hostTopNHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 5, 3, 1), ).setIndexNames((0, "RMON-MIB", "hostTopNReport"), (0, "RMON-MIB", "hostTopNIndex"))
if mibBuilder.loadTexts: hostTopNHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 hostTopNEntry when hostTopNRateBase specifies a High Capacity TopN Report. These objects will be created by the agent for all hostTopNEntries associated with whichever hostTopNControlEntries have a hostTopNRateBase that specify a high capacity report.')
hostTopNHighCapacityAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityAddress.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityAddress.setDescription('The physical address of this host.')
hostTopNHighCapacityBaseRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityBaseRate.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityBaseRate.setDescription("The amount of change in the selected variable during this sampling interval, modulo 2^32. The selected variable is this host's instance of the object selected by hostTopNRateBase.")
hostTopNHighCapacityOverflowRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityOverflowRate.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityOverflowRate.setDescription("The amount of change in the selected variable during this sampling interval, divided by 2^32, truncating fractions (i.e., X DIV 2^32). The selected variable is this host's instance of the object selected by hostTopNRateBase.")
hostTopNHighCapacityRate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 5, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTopNHighCapacityRate.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityRate.setDescription("The amount of change in the selected variable during this sampling interval. The selected variable is this host's instance of the object selected by hostTopNRateBase.")
matrixSDHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 6, 5), )
if mibBuilder.loadTexts: matrixSDHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: matrixSDHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 matrixSDTable.')
matrixSDHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 6, 5, 1), ).setIndexNames((0, "RMON-MIB", "matrixSDIndex"), (0, "RMON-MIB", "matrixSDSourceAddress"), (0, "RMON-MIB", "matrixSDDestAddress"))
if mibBuilder.loadTexts: matrixSDHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: matrixSDHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 matrixSDEntry. These objects will be created by the agent for all matrixSDEntries associated with whichever matrixControlEntries it deems appropriate. (i.e., either all matrixSDHighCapacityEntries associated with a particular matrixControlEntry will be created, or none of them will be.)')
matrixSDHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: matrixSDHighCapacityOverflowPkts.setDescription('The number of times the associated matrixSDPkts counter has overflowed.')
matrixSDHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: matrixSDHighCapacityPkts.setDescription('The number of packets transmitted from the source address to the destination address (this number includes bad packets).')
matrixSDHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: matrixSDHighCapacityOverflowOctets.setDescription('The number of times the associated matrixSDOctets counter has overflowed.')
matrixSDHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 5, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixSDHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: matrixSDHighCapacityOctets.setDescription('The number of octets (excluding framing bits but including FCS octets) contained in all packets transmitted from the source address to the destination address.')
matrixDSHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 6, 6), )
if mibBuilder.loadTexts: matrixDSHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: matrixDSHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 matrixDSTable.')
matrixDSHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 6, 6, 1), ).setIndexNames((0, "RMON-MIB", "matrixDSIndex"), (0, "RMON-MIB", "matrixDSDestAddress"), (0, "RMON-MIB", "matrixDSSourceAddress"))
if mibBuilder.loadTexts: matrixDSHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: matrixDSHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 matrixDSEntry. These objects will be created by the agent for all matrixDSEntries associated with whichever matrixControlEntries it deems appropriate. (i.e., either all matrixDSHighCapacityEntries associated with a particular matrixControlEntry will be created, or none of them will be.)')
matrixDSHighCapacityOverflowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: matrixDSHighCapacityOverflowPkts.setDescription('The number of times the associated matrixDSPkts counter has overflowed.')
matrixDSHighCapacityPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityPkts.setStatus('current')
if mibBuilder.loadTexts: matrixDSHighCapacityPkts.setDescription('The number of packets transmitted from the source address to the destination address (this number includes bad packets).')
matrixDSHighCapacityOverflowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityOverflowOctets.setStatus('current')
if mibBuilder.loadTexts: matrixDSHighCapacityOverflowOctets.setDescription('The number of times the associated matrixDSOctets counter has overflowed.')
matrixDSHighCapacityOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 6, 6, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: matrixDSHighCapacityOctets.setStatus('current')
if mibBuilder.loadTexts: matrixDSHighCapacityOctets.setDescription('The number of octets (excluding framing bits but including FCS octets) contained in all packets transmitted from the source address to the destination address.')
captureBufferHighCapacityTable = MibTable((1, 3, 6, 1, 2, 1, 16, 8, 3), )
if mibBuilder.loadTexts: captureBufferHighCapacityTable.setStatus('current')
if mibBuilder.loadTexts: captureBufferHighCapacityTable.setDescription('Contains the High Capacity RMON extensions to the RMON-1 captureBufferTable.')
captureBufferHighCapacityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 8, 3, 1), ).setIndexNames((0, "RMON-MIB", "captureBufferControlIndex"), (0, "RMON-MIB", "captureBufferIndex"))
if mibBuilder.loadTexts: captureBufferHighCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: captureBufferHighCapacityEntry.setDescription('Contains the High Capacity RMON extensions to the RMON-1 captureBufferEntry. These objects will be created by the agent for all captureBufferEntries associated with whichever bufferControlEntries it deems appropriate. (i.e., either all captureBufferHighCapacityEntries associated with a particular bufferControlEntry will be created, or none of them will be.)')
captureBufferPacketHighCapacityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: captureBufferPacketHighCapacityTime.setStatus('current')
if mibBuilder.loadTexts: captureBufferPacketHighCapacityTime.setDescription('The number of nanoseconds that had passed since this capture buffer was first turned on when this packet was captured, modulo 10^6. This object is used in conjunction with the captureBufferPacketTime object. This object returns the number of nano-seconds to be added to to number of milli-seconds obtained from the captureBufferPacketTime object, to obtain more accurate inter packet arrival time.')
hcRmonMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20, 6))
hcRmonMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 20, 7))
hcMediaIndependentCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 20, 6, 1)).setObjects(("HC-RMON-MIB", "mediaIndependentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hcMediaIndependentCompliance = hcMediaIndependentCompliance.setStatus('current')
if mibBuilder.loadTexts: hcMediaIndependentCompliance.setDescription('Describes the requirements for conformance to the High Capacity Media Independent Group.')
hcRmon1MIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 20, 6, 2)).setObjects(("HC-RMON-MIB", "etherStatsHighCapacityGroup"), ("HC-RMON-MIB", "etherHistoryHighCapacityGroup"), ("HC-RMON-MIB", "hostHighCapacityGroup"), ("HC-RMON-MIB", "hostTopNHighCapacityGroup"), ("HC-RMON-MIB", "matrixHighCapacityGroup"), ("HC-RMON-MIB", "captureBufferHighCapacityGroup"), ("RMON-MIB", "rmonEtherStatsGroup"), ("RMON-MIB", "rmonHistoryControlGroup"), ("RMON-MIB", "rmonEthernetHistoryGroup"), ("RMON-MIB", "rmonHostGroup"), ("RMON-MIB", "rmonHostTopNGroup"), ("RMON-MIB", "rmonMatrixGroup"), ("RMON-MIB", "rmonFilterGroup"), ("RMON-MIB", "rmonPacketCaptureGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hcRmon1MIBCompliance = hcRmon1MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hcRmon1MIBCompliance.setDescription('Describes the requirements for conformance to the High Capacity RMON-1 MIB')
mediaIndependentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 1)).setObjects(("HC-RMON-MIB", "mediaIndependentDataSource"), ("HC-RMON-MIB", "mediaIndependentDropEvents"), ("HC-RMON-MIB", "mediaIndependentDroppedFrames"), ("HC-RMON-MIB", "mediaIndependentInPkts"), ("HC-RMON-MIB", "mediaIndependentInOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentInHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentOutPkts"), ("HC-RMON-MIB", "mediaIndependentOutOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentOutHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentInOctets"), ("HC-RMON-MIB", "mediaIndependentInOverflowOctets"), ("HC-RMON-MIB", "mediaIndependentInHighCapacityOctets"), ("HC-RMON-MIB", "mediaIndependentOutOctets"), ("HC-RMON-MIB", "mediaIndependentOutOverflowOctets"), ("HC-RMON-MIB", "mediaIndependentOutHighCapacityOctets"), ("HC-RMON-MIB", "mediaIndependentInNUCastPkts"), ("HC-RMON-MIB", "mediaIndependentInNUCastOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentInNUCastHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentOutNUCastPkts"), ("HC-RMON-MIB", "mediaIndependentOutNUCastOverflowPkts"), ("HC-RMON-MIB", "mediaIndependentOutNUCastHighCapacityPkts"), ("HC-RMON-MIB", "mediaIndependentInErrors"), ("HC-RMON-MIB", "mediaIndependentOutErrors"), ("HC-RMON-MIB", "mediaIndependentInputSpeed"), ("HC-RMON-MIB", "mediaIndependentOutputSpeed"), ("HC-RMON-MIB", "mediaIndependentDuplexMode"), ("HC-RMON-MIB", "mediaIndependentDuplexChanges"), ("HC-RMON-MIB", "mediaIndependentDuplexLastChange"), ("HC-RMON-MIB", "mediaIndependentOwner"), ("HC-RMON-MIB", "mediaIndependentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mediaIndependentGroup = mediaIndependentGroup.setStatus('current')
if mibBuilder.loadTexts: mediaIndependentGroup.setDescription('Collects utilization statistics for any type of network.')
etherStatsHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 2)).setObjects(("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowOctets"), ("HC-RMON-MIB", "etherStatsHighCapacityOctets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts64Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts64Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts65to127Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts65to127Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts128to255Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts128to255Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts256to511Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts256to511Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts512to1023Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts512to1023Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityOverflowPkts1024to1518Octets"), ("HC-RMON-MIB", "etherStatsHighCapacityPkts1024to1518Octets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherStatsHighCapacityGroup = etherStatsHighCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: etherStatsHighCapacityGroup.setDescription('Collects utilization statistics for ethernet networks.')
etherHistoryHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 3)).setObjects(("HC-RMON-MIB", "etherHistoryHighCapacityOverflowPkts"), ("HC-RMON-MIB", "etherHistoryHighCapacityPkts"), ("HC-RMON-MIB", "etherHistoryHighCapacityOverflowOctets"), ("HC-RMON-MIB", "etherHistoryHighCapacityOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherHistoryHighCapacityGroup = etherHistoryHighCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: etherHistoryHighCapacityGroup.setDescription('Collects utilization statistics for ethernet networks.')
hostHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 4)).setObjects(("HC-RMON-MIB", "hostHighCapacityInOverflowPkts"), ("HC-RMON-MIB", "hostHighCapacityInPkts"), ("HC-RMON-MIB", "hostHighCapacityOutOverflowPkts"), ("HC-RMON-MIB", "hostHighCapacityOutPkts"), ("HC-RMON-MIB", "hostHighCapacityInOverflowOctets"), ("HC-RMON-MIB", "hostHighCapacityInOctets"), ("HC-RMON-MIB", "hostHighCapacityOutOverflowOctets"), ("HC-RMON-MIB", "hostHighCapacityOutOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityInOverflowPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityInPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityOutOverflowPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityOutPkts"), ("HC-RMON-MIB", "hostTimeHighCapacityInOverflowOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityInOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityOutOverflowOctets"), ("HC-RMON-MIB", "hostTimeHighCapacityOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hostHighCapacityGroup = hostHighCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: hostHighCapacityGroup.setDescription('Collects utilization and error statistics per host.')
hostTopNHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 5)).setObjects(("HC-RMON-MIB", "hostTopNHighCapacityAddress"), ("HC-RMON-MIB", "hostTopNHighCapacityBaseRate"), ("HC-RMON-MIB", "hostTopNHighCapacityOverflowRate"), ("HC-RMON-MIB", "hostTopNHighCapacityRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hostTopNHighCapacityGroup = hostTopNHighCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: hostTopNHighCapacityGroup.setDescription('Prepares sorted reports of utilization and error statistics per host.')
matrixHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 6)).setObjects(("HC-RMON-MIB", "matrixSDHighCapacityOverflowPkts"), ("HC-RMON-MIB", "matrixSDHighCapacityPkts"), ("HC-RMON-MIB", "matrixSDHighCapacityOverflowOctets"), ("HC-RMON-MIB", "matrixSDHighCapacityOctets"), ("HC-RMON-MIB", "matrixDSHighCapacityOverflowPkts"), ("HC-RMON-MIB", "matrixDSHighCapacityPkts"), ("HC-RMON-MIB", "matrixDSHighCapacityOverflowOctets"), ("HC-RMON-MIB", "matrixDSHighCapacityOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    matrixHighCapacityGroup = matrixHighCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: matrixHighCapacityGroup.setDescription('Collects utilization statistics per conversation.')
captureBufferHighCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 20, 7, 7)).setObjects(("HC-RMON-MIB", "captureBufferPacketHighCapacityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    captureBufferHighCapacityGroup = captureBufferHighCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: captureBufferHighCapacityGroup.setDescription('Provides finer granularity time stamps.')
mibBuilder.exportSymbols("HC-RMON-MIB", hostTopNHighCapacityEntry=hostTopNHighCapacityEntry, mediaIndependentDroppedFrames=mediaIndependentDroppedFrames, hostTimeHighCapacityTable=hostTimeHighCapacityTable, matrixDSHighCapacityEntry=matrixDSHighCapacityEntry, mediaIndependentTable=mediaIndependentTable, mediaIndependentInNUCastPkts=mediaIndependentInNUCastPkts, hcRmonMIBGroups=hcRmonMIBGroups, hostHighCapacityInPkts=hostHighCapacityInPkts, etherStatsHighCapacityPkts64Octets=etherStatsHighCapacityPkts64Octets, mediaIndependentIndex=mediaIndependentIndex, etherStatsHighCapacityPkts128to255Octets=etherStatsHighCapacityPkts128to255Octets, mediaIndependentStats=mediaIndependentStats, mediaIndependentOutHighCapacityOctets=mediaIndependentOutHighCapacityOctets, mediaIndependentEntry=mediaIndependentEntry, mediaIndependentInErrors=mediaIndependentInErrors, etherStatsHighCapacityEntry=etherStatsHighCapacityEntry, etherStatsHighCapacityPkts=etherStatsHighCapacityPkts, hostTimeHighCapacityInOverflowOctets=hostTimeHighCapacityInOverflowOctets, matrixSDHighCapacityTable=matrixSDHighCapacityTable, matrixSDHighCapacityOverflowOctets=matrixSDHighCapacityOverflowOctets, hostTimeHighCapacityEntry=hostTimeHighCapacityEntry, etherStatsHighCapacityPkts512to1023Octets=etherStatsHighCapacityPkts512to1023Octets, matrixSDHighCapacityOverflowPkts=matrixSDHighCapacityOverflowPkts, etherHistoryHighCapacityTable=etherHistoryHighCapacityTable, mediaIndependentOutOverflowPkts=mediaIndependentOutOverflowPkts, hostTimeHighCapacityOutOverflowPkts=hostTimeHighCapacityOutOverflowPkts, etherStatsHighCapacityGroup=etherStatsHighCapacityGroup, hostTimeHighCapacityInOverflowPkts=hostTimeHighCapacityInOverflowPkts, hcMediaIndependentCompliance=hcMediaIndependentCompliance, hostHighCapacityTable=hostHighCapacityTable, mediaIndependentOutputSpeed=mediaIndependentOutputSpeed, etherHistoryHighCapacityOverflowPkts=etherHistoryHighCapacityOverflowPkts, hostTopNHighCapacityAddress=hostTopNHighCapacityAddress, mediaIndependentDuplexLastChange=mediaIndependentDuplexLastChange, etherStatsHighCapacityOverflowOctets=etherStatsHighCapacityOverflowOctets, hostTopNHighCapacityTable=hostTopNHighCapacityTable, etherStatsHighCapacityOverflowPkts=etherStatsHighCapacityOverflowPkts, matrixHighCapacityGroup=matrixHighCapacityGroup, etherStatsHighCapacityOverflowPkts256to511Octets=etherStatsHighCapacityOverflowPkts256to511Octets, captureBufferHighCapacityGroup=captureBufferHighCapacityGroup, etherStatsHighCapacityOverflowPkts512to1023Octets=etherStatsHighCapacityOverflowPkts512to1023Octets, mediaIndependentInOctets=mediaIndependentInOctets, etherStatsHighCapacityOctets=etherStatsHighCapacityOctets, mediaIndependentInPkts=mediaIndependentInPkts, matrixDSHighCapacityTable=matrixDSHighCapacityTable, mediaIndependentOutPkts=mediaIndependentOutPkts, mediaIndependentOutOctets=mediaIndependentOutOctets, hostHighCapacityInOverflowOctets=hostHighCapacityInOverflowOctets, mediaIndependentInHighCapacityPkts=mediaIndependentInHighCapacityPkts, mediaIndependentInOverflowOctets=mediaIndependentInOverflowOctets, PYSNMP_MODULE_ID=hcRMON, mediaIndependentInHighCapacityOctets=mediaIndependentInHighCapacityOctets, hostTopNHighCapacityOverflowRate=hostTopNHighCapacityOverflowRate, etherStatsHighCapacityPkts1024to1518Octets=etherStatsHighCapacityPkts1024to1518Octets, mediaIndependentOutNUCastPkts=mediaIndependentOutNUCastPkts, etherStatsHighCapacityPkts65to127Octets=etherStatsHighCapacityPkts65to127Octets, hostTopNHighCapacityRate=hostTopNHighCapacityRate, mediaIndependentGroup=mediaIndependentGroup, matrixSDHighCapacityOctets=matrixSDHighCapacityOctets, hostHighCapacityOutOverflowOctets=hostHighCapacityOutOverflowOctets, hostHighCapacityGroup=hostHighCapacityGroup, matrixSDHighCapacityEntry=matrixSDHighCapacityEntry, mediaIndependentInOverflowPkts=mediaIndependentInOverflowPkts, etherHistoryHighCapacityPkts=etherHistoryHighCapacityPkts, mediaIndependentDuplexMode=mediaIndependentDuplexMode, hostHighCapacityOutOverflowPkts=hostHighCapacityOutOverflowPkts, etherStatsHighCapacityOverflowPkts1024to1518Octets=etherStatsHighCapacityOverflowPkts1024to1518Octets, etherHistoryHighCapacityEntry=etherHistoryHighCapacityEntry, mediaIndependentInNUCastHighCapacityPkts=mediaIndependentInNUCastHighCapacityPkts, hostTimeHighCapacityOutOverflowOctets=hostTimeHighCapacityOutOverflowOctets, hostTimeHighCapacityOutPkts=hostTimeHighCapacityOutPkts, hostTopNHighCapacityGroup=hostTopNHighCapacityGroup, hostTimeHighCapacityOutOctets=hostTimeHighCapacityOutOctets, etherHistoryHighCapacityOverflowOctets=etherHistoryHighCapacityOverflowOctets, mediaIndependentOutErrors=mediaIndependentOutErrors, mediaIndependentDuplexChanges=mediaIndependentDuplexChanges, hcRMON=hcRMON, hostTimeHighCapacityInOctets=hostTimeHighCapacityInOctets, mediaIndependentOwner=mediaIndependentOwner, captureBufferPacketHighCapacityTime=captureBufferPacketHighCapacityTime, matrixDSHighCapacityOctets=matrixDSHighCapacityOctets, hostHighCapacityEntry=hostHighCapacityEntry, mediaIndependentDataSource=mediaIndependentDataSource, etherStatsHighCapacityTable=etherStatsHighCapacityTable, hostHighCapacityOutOctets=hostHighCapacityOutOctets, hostTimeHighCapacityInPkts=hostTimeHighCapacityInPkts, hostHighCapacityInOverflowPkts=hostHighCapacityInOverflowPkts, matrixDSHighCapacityPkts=matrixDSHighCapacityPkts, etherStatsHighCapacityOverflowPkts64Octets=etherStatsHighCapacityOverflowPkts64Octets, hcRmonMIBCompliances=hcRmonMIBCompliances, mediaIndependentDropEvents=mediaIndependentDropEvents, matrixDSHighCapacityOverflowOctets=matrixDSHighCapacityOverflowOctets, mediaIndependentStatus=mediaIndependentStatus, hostTopNHighCapacityBaseRate=hostTopNHighCapacityBaseRate, matrixSDHighCapacityPkts=matrixSDHighCapacityPkts, captureBufferHighCapacityEntry=captureBufferHighCapacityEntry, etherHistoryHighCapacityGroup=etherHistoryHighCapacityGroup, etherHistoryHighCapacityOctets=etherHistoryHighCapacityOctets, matrixDSHighCapacityOverflowPkts=matrixDSHighCapacityOverflowPkts, hostHighCapacityInOctets=hostHighCapacityInOctets, mediaIndependentOutNUCastHighCapacityPkts=mediaIndependentOutNUCastHighCapacityPkts, etherStatsHighCapacityOverflowPkts65to127Octets=etherStatsHighCapacityOverflowPkts65to127Octets, mediaIndependentOutHighCapacityPkts=mediaIndependentOutHighCapacityPkts, mediaIndependentInNUCastOverflowPkts=mediaIndependentInNUCastOverflowPkts, mediaIndependentInputSpeed=mediaIndependentInputSpeed, mediaIndependentOutNUCastOverflowPkts=mediaIndependentOutNUCastOverflowPkts, hostHighCapacityOutPkts=hostHighCapacityOutPkts, etherStatsHighCapacityOverflowPkts128to255Octets=etherStatsHighCapacityOverflowPkts128to255Octets, hcRmon1MIBCompliance=hcRmon1MIBCompliance, etherStatsHighCapacityPkts256to511Octets=etherStatsHighCapacityPkts256to511Octets, captureBufferHighCapacityTable=captureBufferHighCapacityTable, mediaIndependentOutOverflowOctets=mediaIndependentOutOverflowOctets)
