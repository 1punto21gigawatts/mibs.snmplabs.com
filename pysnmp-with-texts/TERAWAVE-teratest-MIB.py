#
# PySNMP MIB module TERAWAVE-teratest-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teratest-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, NotificationType, Unsigned32, Integer32, Counter32, Bits, IpAddress, ModuleIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "NotificationType", "Unsigned32", "Integer32", "Counter32", "Bits", "IpAddress", "ModuleIdentity", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 14))
teraTestTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 14, 1), )
if mibBuilder.loadTexts: teraTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTable.setDescription(' table teraTestTable')
teraTestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1), ).setIndexNames((0, "TERAWAVE-teratest-MIB", "teraTestSourceSlot"), (0, "TERAWAVE-teratest-MIB", "teraTestIndex"))
if mibBuilder.loadTexts: teraTestTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTableEntry.setDescription(' table entry teraTestTableEntry ')
teraTestSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestSourceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestSourceSlot.setDescription('')
teraTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 2), Counter32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestIndex.setDescription('')
teraTestTargetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTargetIfIndex.setDescription('')
teraTestTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTargetVpi.setDescription('')
teraTestTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetVci.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTargetVci.setDescription('')
teraTestTargetDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestTargetDirection.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTargetDirection.setDescription('')
teraTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestType.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestType.setDescription('')
teraTestMoreInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestMoreInfo.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestMoreInfo.setDescription('')
teraTestResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestResultTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestResultTimeStamp.setDescription('')
teraTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestResult.setDescription('')
teraTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("unkown", 2), ("timeout", 3), ("manualStop", 4), ("portFail", 5), ("invalidTarget", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestCode.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestCode.setDescription('')
teraTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInService", 1), ("active", 2), ("inProgress", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestRowStatus.setDescription('')
teraTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("send", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTestAction.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestAction.setDescription('')
teraTestCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 14, 2), )
if mibBuilder.loadTexts: teraTestCapabilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestCapabilityTable.setDescription(' table teraTestCapabilityTable')
teraTestCapabilityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1), ).setIndexNames((0, "TERAWAVE-teratest-MIB", "teraTestSourceSlot"))
if mibBuilder.loadTexts: teraTestCapabilityTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestCapabilityTableEntry.setDescription(' table entry teraTestCapabilityTableEntry ')
teraTestIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestIndexNext.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestIndexNext.setDescription('')
teraTestTableMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1, 2), Counter32().subtype(subtypeSpec=ValueRangeConstraint(10, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestTableMaxSize.setDescription('')
teraTestCapabilityTypeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTestCapabilityTypeBits.setStatus('mandatory')
if mibBuilder.loadTexts: teraTestCapabilityTypeBits.setDescription('')
mibBuilder.exportSymbols("TERAWAVE-teratest-MIB", teraTestType=teraTestType, teraTestTableEntry=teraTestTableEntry, teraTestGroup=teraTestGroup, teraTestTableMaxSize=teraTestTableMaxSize, teraTestRowStatus=teraTestRowStatus, teraTestTargetIfIndex=teraTestTargetIfIndex, teraTestTargetDirection=teraTestTargetDirection, teraTestTable=teraTestTable, teraTestCode=teraTestCode, teraTestTargetVci=teraTestTargetVci, teraTestResult=teraTestResult, teraTestCapabilityTable=teraTestCapabilityTable, teraTestResultTimeStamp=teraTestResultTimeStamp, teraTestIndex=teraTestIndex, teraTestSourceSlot=teraTestSourceSlot, teraTestCapabilityTableEntry=teraTestCapabilityTableEntry, teraTestAction=teraTestAction, teraTestIndexNext=teraTestIndexNext, teraTestMoreInfo=teraTestMoreInfo, teraTestCapabilityTypeBits=teraTestCapabilityTypeBits, teraTestTargetVpi=teraTestTargetVpi, terawave=terawave)
