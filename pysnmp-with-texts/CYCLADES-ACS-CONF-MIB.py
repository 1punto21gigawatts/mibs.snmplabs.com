#
# PySNMP MIB module CYCLADES-ACS-CONF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYCLADES-ACS-CONF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
cyACSMgmt, = mibBuilder.importSymbols("CYCLADES-ACS-MIB", "cyACSMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, ObjectIdentity, Unsigned32, IpAddress, Bits, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "ObjectIdentity", "Unsigned32", "IpAddress", "Bits", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Gauge32", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cyACSConf = ModuleIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2))
cyACSConf.setRevisions(('2005-08-29 00:00', '2003-06-30 00:00', '2003-01-17 00:00', '2002-10-20 00:00', '2002-09-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyACSConf.setRevisionsDescriptions(('Changed the Contact-Info', 'Changed cySPortSniffMsess SYNTAX', 'Included new parameters in cySerialPortConf', 'Included new parameters in cySerialPortConf', 'First Draft',))
if mibBuilder.loadTexts: cyACSConf.setLastUpdated('200508290000Z')
if mibBuilder.loadTexts: cyACSConf.setOrganization('Cyclades Corporation')
if mibBuilder.loadTexts: cyACSConf.setContactInfo('postal : Cyclades Corporation 3541 Gateway Boulevard Fremont, CA 94538, USA e-mail : Technical Support support@cyclades.com')
if mibBuilder.loadTexts: cyACSConf.setDescription('This module defines objects for the ACS/TS configuration')
cyHostName = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyHostName.setStatus('current')
if mibBuilder.loadTexts: cyHostName.setDescription('The Host Name ')
cyConsoleBanner = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyConsoleBanner.setStatus('current')
if mibBuilder.loadTexts: cyConsoleBanner.setDescription('The console banner ')
cyMotd = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyMotd.setStatus('current')
if mibBuilder.loadTexts: cyMotd.setDescription('The motd message ')
cyEthItf = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4))
if mibBuilder.loadTexts: cyEthItf.setStatus('current')
if mibBuilder.loadTexts: cyEthItf.setDescription('The configuration of the Ethernet Interface')
cyEthDhcpc = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyEthDhcpc.setStatus('current')
if mibBuilder.loadTexts: cyEthDhcpc.setDescription('The ACS can request all of its ethernet parameters to a DHCP server')
cyEthIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyEthIPaddr.setStatus('current')
if mibBuilder.loadTexts: cyEthIPaddr.setDescription('This is the IP address of the Ethernet Interface')
cyEthIPmask = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyEthIPmask.setStatus('current')
if mibBuilder.loadTexts: cyEthIPmask.setDescription('The mask fot the Ethernet network')
cyEthMTU = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyEthMTU.setStatus('current')
if mibBuilder.loadTexts: cyEthMTU.setDescription('The Maximum Transmission Unit size, wich determines whether or not packets should be broken up')
cyEthIPaddr2 = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyEthIPaddr2.setStatus('current')
if mibBuilder.loadTexts: cyEthIPaddr2.setDescription('The Ethernet secondary IP address')
cyEthIPmask2 = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyEthIPmask2.setStatus('current')
if mibBuilder.loadTexts: cyEthIPmask2.setDescription('The Ethernet secondary IP mask')
cyNameService = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5))
if mibBuilder.loadTexts: cyNameService.setStatus('current')
if mibBuilder.loadTexts: cyNameService.setDescription('The Name Service configuration')
cyResolverOrder = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyResolverOrder.setStatus('current')
if mibBuilder.loadTexts: cyResolverOrder.setDescription("It specifies how host lookups are to be performed. Valid values : empty, 'hosts', 'bind', 'hosts, bind', 'bind, hosts' ")
cyMultipleIP = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyMultipleIP.setStatus('current')
if mibBuilder.loadTexts: cyMultipleIP.setDescription('Valid values are ON or OFF. If set to ON, the resolve library will return all valid addresses for a host that appears in the /etc/hosts file, instead of only the first. ')
cyDNSserv = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5, 3))
if mibBuilder.loadTexts: cyDNSserv.setStatus('current')
if mibBuilder.loadTexts: cyDNSserv.setDescription('The DNS server configuration')
cyDNSpriserv = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyDNSpriserv.setStatus('current')
if mibBuilder.loadTexts: cyDNSpriserv.setDescription('Internet Address (in dot notation) of primary name server that the resolver should query.')
cyDNSsecserv = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyDNSsecserv.setStatus('current')
if mibBuilder.loadTexts: cyDNSsecserv.setDescription('Internet Address (in dot notation) of secondary name server that the resolver should query.')
cyDNSdomain = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyDNSdomain.setStatus('current')
if mibBuilder.loadTexts: cyDNSdomain.setDescription('Local domain name .')
cySerialPortConf = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6))
if mibBuilder.loadTexts: cySerialPortConf.setStatus('current')
if mibBuilder.loadTexts: cySerialPortConf.setDescription('The PortSlave configuration - pslave.conf file. It configures the all serial ports.')
cySerialGlobal = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1))
if mibBuilder.loadTexts: cySerialGlobal.setStatus('current')
if mibBuilder.loadTexts: cySerialGlobal.setDescription('These parameters have the prefix conf. in the pslave.conf file')
cySerialInclude = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialInclude.setStatus('current')
if mibBuilder.loadTexts: cySerialInclude.setDescription('File used in centralized management.')
cySerialNFS = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialNFS.setStatus('current')
if mibBuilder.loadTexts: cySerialNFS.setDescription("Remote Network File System where data buffering will be written instead of the default directory '/var/run/DB'.")
cySerialLockDir = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialLockDir.setStatus('current')
if mibBuilder.loadTexts: cySerialLockDir.setDescription('The lock directory for the ACS.')
cySerialRlogin = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialRlogin.setStatus('current')
if mibBuilder.loadTexts: cySerialRlogin.setDescription('Location of the rlogin binary that accepts the -i flag.')
cySerialPppd = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialPppd.setStatus('current')
if mibBuilder.loadTexts: cySerialPppd.setDescription('Location of the pppd binary.')
cySerialTelnet = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialTelnet.setStatus('current')
if mibBuilder.loadTexts: cySerialTelnet.setDescription('Location of the telnet application')
cySerialSsh = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialSsh.setStatus('current')
if mibBuilder.loadTexts: cySerialSsh.setDescription('Location of the ssh application')
cySerialLocalLogins = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialLocalLogins.setStatus('current')
if mibBuilder.loadTexts: cySerialLocalLogins.setDescription('This parameter is only necessary when authentication is being performed for a port. This is useful if the Radius authentication server is down.')
cySerialFacility = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialFacility.setStatus('current')
if mibBuilder.loadTexts: cySerialFacility.setDescription('This value (0-7) is the Local facility sent to the syslog daemon.')
cySerialDBFacility = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySerialDBFacility.setStatus('current')
if mibBuilder.loadTexts: cySerialDBFacility.setDescription('This value (0-7) is the Local facility sent to the syslog daemon with the data when .')
cySerialGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 11), )
if mibBuilder.loadTexts: cySerialGroupTable.setStatus('current')
if mibBuilder.loadTexts: cySerialGroupTable.setDescription('This associates group name and its users')
cygroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 11, 1), ).setIndexNames((0, "CYCLADES-ACS-CONF-MIB", "cyGroupIndex"))
if mibBuilder.loadTexts: cygroupEntry.setStatus('current')
if mibBuilder.loadTexts: cygroupEntry.setDescription('One particular association between group name and its users')
cyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 11, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cyGroupIndex.setDescription('number to identifier the group')
cyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyGroupName.setStatus('current')
if mibBuilder.loadTexts: cyGroupName.setDescription('The Group Name ')
cyGroupUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cyGroupUsers.setStatus('current')
if mibBuilder.loadTexts: cyGroupUsers.setDescription('The users names ')
cySerialSpec = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2))
if mibBuilder.loadTexts: cySerialSpec.setStatus('current')
if mibBuilder.loadTexts: cySerialSpec.setDescription('These parameters have the prefix all. or sxx. in the pslave.conf file')
cySerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1), )
if mibBuilder.loadTexts: cySerialPortTable.setStatus('current')
if mibBuilder.loadTexts: cySerialPortTable.setDescription('This is the specific configuration to serial port')
cysportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1), ).setIndexNames((0, "CYCLADES-ACS-CONF-MIB", "cySPortNumber"))
if mibBuilder.loadTexts: cysportEntry.setStatus('current')
if mibBuilder.loadTexts: cysportEntry.setDescription('One particular serial port configuration')
cySPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cySPortNumber.setStatus('current')
if mibBuilder.loadTexts: cySPortNumber.setDescription('number to identifier the serial port. Value 0 is ALL.')
cySPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortTty.setStatus('current')
if mibBuilder.loadTexts: cySPortTty.setDescription('The device name for the serial port.')
cySPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortName.setStatus('current')
if mibBuilder.loadTexts: cySPortName.setDescription('Alias name given to the server connected to the serial port.')
cySPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400, 460800))).clone(namedValues=NamedValues(("s50bps", 50), ("s75bps", 75), ("s110bps", 110), ("s134bps", 134), ("s150bps", 150), ("s200bps", 200), ("s300bps", 300), ("s600bps", 600), ("s1200bps", 1200), ("s1800bps", 1800), ("s2400bps", 2400), ("s4800bps", 4800), ("s9600bps", 9600), ("s14400bps", 14400), ("s19200bps", 19200), ("s28800bps", 28800), ("s38400bps", 38400), ("s57600bps", 57600), ("s115200bps", 115200), ("s230400bps", 230400), ("s460800bps", 460800)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSpeed.setStatus('current')
if mibBuilder.loadTexts: cySPortSpeed.setDescription('The speed for serial port.')
cySPortDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDataSize.setStatus('current')
if mibBuilder.loadTexts: cySPortDataSize.setDescription('The data size for serial port.')
cySPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortStopBits.setStatus('current')
if mibBuilder.loadTexts: cySPortStopBits.setDescription('The number of stop bits for serial port.')
cySPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortParity.setStatus('current')
if mibBuilder.loadTexts: cySPortParity.setDescription('The parity for serial port.')
cySPortFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: cySPortFlowCtrl.setDescription('The flow control for serial port.')
cySPortDTRdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDTRdelay.setStatus('current')
if mibBuilder.loadTexts: cySPortDTRdelay.setDescription('This specifies how long (in miliseconds) a DTR signal will be turned off before it is turned on again.')
cySPortDCDCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notctrl", 0), ("control", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDCDCtrl.setStatus('current')
if mibBuilder.loadTexts: cySPortDCDCtrl.setDescription('DCD signal controls the connection request.')
cySPortLogUtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortLogUtmp.setStatus('current')
if mibBuilder.loadTexts: cySPortLogUtmp.setDescription('ACS update the login records in /var/run/utmp file.')
cySPortLogWtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortLogWtmp.setStatus('current')
if mibBuilder.loadTexts: cySPortLogWtmp.setDescription('ACS update the login records in /var/run/wtmp file.')
cySPortLogform = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortLogform.setStatus('current')
if mibBuilder.loadTexts: cySPortLogform.setDescription('This is the format to write login record.')
cySPortAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthtype.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthtype.setDescription('Authentication type : .')
cySPortAuthSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthSrv1.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthSrv1.setDescription('IP address of the primary authentication server.')
cySPortAccSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAccSrv1.setStatus('current')
if mibBuilder.loadTexts: cySPortAccSrv1.setDescription('IP address of the primary accounting server.')
cySPortAuthTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthTmo.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthTmo.setDescription('This is the timeout (in seconds) for authentication query to be answered.')
cySPortAuthRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthRetr.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthRetr.setDescription('This defines the number of times each server is tried before another is contacted.')
cySPortAuthSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthSrv2.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthSrv2.setDescription('IP address of the secondary authentication server.')
cySPortAccSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAccSrv2.setStatus('current')
if mibBuilder.loadTexts: cySPortAccSrv2.setDescription('IP address of the secondary accounting server.')
cySPortAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthSecret.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthSecret.setDescription('This is the shared secret with authentciation servers.')
cySPortAuthRadP = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthRadP.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthRadP.setDescription("To accept Radius' user without password.")
cySPortAuthAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAuthAcc.setStatus('current')
if mibBuilder.loadTexts: cySPortAuthAcc.setDescription('access restrition on Users.')
cySPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortProtocol.setStatus('current')
if mibBuilder.loadTexts: cySPortProtocol.setDescription("Defines the port serial's protocol.")
cySPortRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortRemoteIP.setStatus('current')
if mibBuilder.loadTexts: cySPortRemoteIP.setDescription('This is the default IP address of the serial port.')
cySPortSocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSocketPort.setStatus('current')
if mibBuilder.loadTexts: cySPortSocketPort.setDescription('This defines an alternative labeling system for the serial port.')
cySPortRemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortRemHost.setStatus('current')
if mibBuilder.loadTexts: cySPortRemHost.setDescription('The IP address of the host to which the serial port will connect.')
cySPortBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortBanner.setStatus('current')
if mibBuilder.loadTexts: cySPortBanner.setDescription('This defines the banner.')
cySPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPrompt.setStatus('current')
if mibBuilder.loadTexts: cySPortPrompt.setDescription('This defines the login prompt to the serial port.')
cySPortTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortTermType.setStatus('current')
if mibBuilder.loadTexts: cySPortTermType.setDescription('This defines the terminal type.')
cySPortAutomUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAutomUsr.setStatus('current')
if mibBuilder.loadTexts: cySPortAutomUsr.setDescription('This defines the automatic user.')
cySPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortNetMask.setStatus('current')
if mibBuilder.loadTexts: cySPortNetMask.setDescription('The network mask used in dial in connection.')
cySPortPppMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPppMtu.setStatus('current')
if mibBuilder.loadTexts: cySPortPppMtu.setDescription('The PPP MTU - dial in connection.')
cySPortPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPppMru.setStatus('current')
if mibBuilder.loadTexts: cySPortPppMru.setDescription('The PPP MRU - dial in connection.')
cySPortPppOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPppOptions.setStatus('current')
if mibBuilder.loadTexts: cySPortPppOptions.setDescription('The PPP options when ACS autodetects the PPP session .')
cySPortPppFoption = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPppFoption.setStatus('current')
if mibBuilder.loadTexts: cySPortPppFoption.setDescription('The PPP forced options when the user has already been authenticated.')
cySPortModemChat = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortModemChat.setStatus('current')
if mibBuilder.loadTexts: cySPortModemChat.setDescription('The initchat send to modem connected.')
cySPortSttyCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSttyCmd.setStatus('current')
if mibBuilder.loadTexts: cySPortSttyCmd.setDescription('the tty settings after socket connection is established.')
cySPortSockTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSockTx.setStatus('current')
if mibBuilder.loadTexts: cySPortSockTx.setDescription('Defines the delay (in miliseconds) before transmission to the Ethernet of data received through a serial port .')
cySPortSockPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSockPoll.setStatus('current')
if mibBuilder.loadTexts: cySPortSockPoll.setDescription('Keep-alive timer (miliseconds) to the TCP connection .')
cySPortSockIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSockIdle.setStatus('current')
if mibBuilder.loadTexts: cySPortSockIdle.setDescription('The idle timeout in seconds .')
cySPortDBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDBsize.setStatus('current')
if mibBuilder.loadTexts: cySPortDBsize.setDescription('Maximum size of the data buffering file.')
cySPortDBtime = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDBtime.setStatus('current')
if mibBuilder.loadTexts: cySPortDBtime.setDescription('Timestamp in data buffering.')
cySPortDBmode = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDBmode.setStatus('current')
if mibBuilder.loadTexts: cySPortDBmode.setDescription('Data buffering mode : circ or line')
cySPortDBsyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDBsyslog.setStatus('current')
if mibBuilder.loadTexts: cySPortDBsyslog.setDescription('size of the data buffering send to syslog.')
cySPortDBmenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("displayMenu", 0), ("inactive", 1), ("displayDB", 2), ("displayParc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDBmenu.setStatus('current')
if mibBuilder.loadTexts: cySPortDBmenu.setDescription('Menu of the data buffering.')
cySPortDBalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortDBalarm.setStatus('current')
if mibBuilder.loadTexts: cySPortDBalarm.setDescription('Generating Alarms.')
cySPortSSHbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSSHbreak.setStatus('current')
if mibBuilder.loadTexts: cySPortSSHbreak.setDescription('Break sequence - ssh session')
cySPortSniffSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSniffSess.setStatus('current')
if mibBuilder.loadTexts: cySPortSniffSess.setDescription('Sniff session type')
cySPortSniffAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSniffAdm.setStatus('current')
if mibBuilder.loadTexts: cySPortSniffAdm.setDescription('List of admin users to sniff session')
cySPortSniffEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSniffEsc.setStatus('current')
if mibBuilder.loadTexts: cySPortSniffEsc.setDescription('Escape sequence used in sniff session')
cySPortSniffMsess = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSniffMsess.setStatus('current')
if mibBuilder.loadTexts: cySPortSniffMsess.setDescription('Multiple sniff sessions')
cySPortTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("text", 0), ("binary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortTelnetMode.setStatus('current')
if mibBuilder.loadTexts: cySPortTelnetMode.setDescription('Mode negotiated by client telnet with the server')
cySPortSysBufSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortSysBufSess.setStatus('current')
if mibBuilder.loadTexts: cySPortSysBufSess.setDescription('Syslog Buffering at all times')
cySPortLFSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortLFSuppress.setStatus('current')
if mibBuilder.loadTexts: cySPortLFSuppress.setDescription('LF suppression in socket_server session')
cySPortAutoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAutoInput.setStatus('current')
if mibBuilder.loadTexts: cySPortAutoInput.setDescription("This string is used to auto answer. It's the input string")
cySPortAutoOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortAutoOutput.setStatus('current')
if mibBuilder.loadTexts: cySPortAutoOutput.setDescription("This string is used to auto answer. It's the output string")
cySPortPmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPmType.setStatus('current')
if mibBuilder.loadTexts: cySPortPmType.setDescription('IPDU type, when the port protocol is configured as IPDU')
cySPortPmUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPmUsers.setStatus('current')
if mibBuilder.loadTexts: cySPortPmUsers.setDescription('List of users which can access the IPDU and their respective outlets')
cySPortPmOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPmOutlet.setStatus('current')
if mibBuilder.loadTexts: cySPortPmOutlet.setDescription('List of <IPDU port>.<outlet> pairs, where the server is connected')
cySPortPmKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPmKey.setStatus('current')
if mibBuilder.loadTexts: cySPortPmKey.setDescription('Hotkey to grant access to the Power Management from a Telnet/SSH session')
cySPortPmNOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortPmNOutlets.setStatus('current')
if mibBuilder.loadTexts: cySPortPmNOutlets.setDescription('Number of outlets of the IPDU')
cySPortBreakInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 2, 6, 2, 1, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cySPortBreakInterval.setStatus('current')
if mibBuilder.loadTexts: cySPortBreakInterval.setDescription('The break interval in miliseconds.')
mibBuilder.exportSymbols("CYCLADES-ACS-CONF-MIB", cySPortProtocol=cySPortProtocol, cySerialSsh=cySerialSsh, cySPortSSHbreak=cySPortSSHbreak, cySPortParity=cySPortParity, cySerialInclude=cySerialInclude, cySerialPppd=cySerialPppd, cygroupEntry=cygroupEntry, cySPortDBsyslog=cySPortDBsyslog, cySPortAuthSrv2=cySPortAuthSrv2, cyMultipleIP=cyMultipleIP, cySPortSockTx=cySPortSockTx, cySPortSysBufSess=cySPortSysBufSess, cyEthIPaddr=cyEthIPaddr, cySerialDBFacility=cySerialDBFacility, cyMotd=cyMotd, cySPortAccSrv2=cySPortAccSrv2, cySPortPmNOutlets=cySPortPmNOutlets, cySPortStopBits=cySPortStopBits, cySPortPppOptions=cySPortPppOptions, cySPortLFSuppress=cySPortLFSuppress, cySPortDBmode=cySPortDBmode, cySerialPortTable=cySerialPortTable, cySPortDBmenu=cySPortDBmenu, PYSNMP_MODULE_ID=cyACSConf, cySPortAuthtype=cySPortAuthtype, cySerialTelnet=cySerialTelnet, cySPortSniffSess=cySPortSniffSess, cyEthMTU=cyEthMTU, cySPortBanner=cySPortBanner, cySPortPppFoption=cySPortPppFoption, cySPortSockIdle=cySPortSockIdle, cySPortAuthRetr=cySPortAuthRetr, cySPortAuthAcc=cySPortAuthAcc, cyConsoleBanner=cyConsoleBanner, cySPortSniffMsess=cySPortSniffMsess, cySPortAuthTmo=cySPortAuthTmo, cyEthIPmask=cyEthIPmask, cySPortNumber=cySPortNumber, cySerialLockDir=cySerialLockDir, cySPortTelnetMode=cySPortTelnetMode, cySPortFlowCtrl=cySPortFlowCtrl, cySPortTermType=cySPortTermType, cyEthIPaddr2=cyEthIPaddr2, cyEthIPmask2=cyEthIPmask2, cySPortSniffEsc=cySPortSniffEsc, cySerialSpec=cySerialSpec, cySPortAccSrv1=cySPortAccSrv1, cySPortPmUsers=cySPortPmUsers, cySPortLogform=cySPortLogform, cySPortLogUtmp=cySPortLogUtmp, cySPortSpeed=cySPortSpeed, cyGroupName=cyGroupName, cySPortAutomUsr=cySPortAutomUsr, cyGroupUsers=cyGroupUsers, cySPortSttyCmd=cySPortSttyCmd, cySPortNetMask=cySPortNetMask, cySPortAuthSecret=cySPortAuthSecret, cyEthDhcpc=cyEthDhcpc, cyNameService=cyNameService, cySPortAuthSrv1=cySPortAuthSrv1, cySPortSniffAdm=cySPortSniffAdm, cySPortDTRdelay=cySPortDTRdelay, cySPortDataSize=cySPortDataSize, cySerialNFS=cySerialNFS, cyResolverOrder=cyResolverOrder, cyDNSdomain=cyDNSdomain, cySPortName=cySPortName, cySPortTty=cySPortTty, cySPortLogWtmp=cySPortLogWtmp, cySerialGlobal=cySerialGlobal, cySerialGroupTable=cySerialGroupTable, cyGroupIndex=cyGroupIndex, cySPortPmType=cySPortPmType, cySPortPmKey=cySPortPmKey, cysportEntry=cysportEntry, cyDNSserv=cyDNSserv, cyEthItf=cyEthItf, cySPortPmOutlet=cySPortPmOutlet, cyDNSpriserv=cyDNSpriserv, cySerialRlogin=cySerialRlogin, cySPortPppMru=cySPortPppMru, cySPortSockPoll=cySPortSockPoll, cyACSConf=cyACSConf, cySPortAutoInput=cySPortAutoInput, cySPortDBsize=cySPortDBsize, cySPortBreakInterval=cySPortBreakInterval, cySerialFacility=cySerialFacility, cySPortRemoteIP=cySPortRemoteIP, cySPortPrompt=cySPortPrompt, cyDNSsecserv=cyDNSsecserv, cySPortDBtime=cySPortDBtime, cySPortDBalarm=cySPortDBalarm, cySerialPortConf=cySerialPortConf, cySPortAuthRadP=cySPortAuthRadP, cySPortModemChat=cySPortModemChat, cySPortSocketPort=cySPortSocketPort, cySPortDCDCtrl=cySPortDCDCtrl, cySPortAutoOutput=cySPortAutoOutput, cySPortRemHost=cySPortRemHost, cySPortPppMtu=cySPortPppMtu, cyHostName=cyHostName, cySerialLocalLogins=cySerialLocalLogins)
