#
# PySNMP MIB module MLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MLB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
rsMLB, = mibBuilder.importSymbols("RADWARE-MIB", "rsMLB")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, Bits, IpAddress, MibIdentifier, ObjectIdentity, TimeTicks, Integer32, iso, ModuleIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "Bits", "IpAddress", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Integer32", "iso", "ModuleIdentity", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rsMLBApplicationServersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1), )
if mibBuilder.loadTexts: rsMLBApplicationServersTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplicationServersTable.setDescription('Table containing the list of application servers to which the clients requested are dispatched.')
rsMLBApplicationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBServerAddr"))
if mibBuilder.loadTexts: rsMLBApplicationServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplicationServerEntry.setDescription(' The row definition for this table.')
rsMLBServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerAddr.setDescription('Application IP address')
rsMLBServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerName.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerName.setDescription('The name assigned by the user to the server.')
rsMLBServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("noNewSessions", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerOperStatus.setDescription('Operational status of application on server. active - server is active notInService - server is or will become inactive. Existing sessions will be redirected to other servers. noNewSessions - server will receive no new sessions. Existing sessions are allowed to complete.')
rsMLBServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerWeight.setDescription('A numerical weight assigned by the user in order to impose some priority mechanism on the server dispatchers considerations of which server to choose for attaching a client .')
rsMLBServerAttachedUsersNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerAttachedUsersNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerAttachedUsersNumber.setDescription('Number of currently active users attached to this server.')
rsMLBServerPeakLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerPeakLoad.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerPeakLoad.setDescription('Maximal number of frames per second dispatched to server since last reset.')
rsMLBServerFramesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerFramesRate.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerFramesRate.setDescription('Number of frames per second dispatched to server.')
rsMLBServerFramesLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerFramesLoad.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerFramesLoad.setDescription('Number of frames per second dispatched to server.')
rsMLBServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerStatus.setDescription('Administative status of appliaction on server.')
rsMLBServerOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerOperMode.setDescription('This variable indicate the status of the server, the MLB will not send any messages to a backup server unless all other server are down status. In case of more then one backup server, the MLB will decide to which backup server to send the massages acordinf to rsMLBWeight.')
rsMLBServerConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerConnectionLimit.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerConnectionLimit.setDescription('The maximal number of client sessions which can be opened on this sever.')
rsMLBServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("shutdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerAdminStatus.setDescription('Administrative status of application on server. enable - activates the server. The rsMLBServerOperStatus will change to active. disable - stops the server. The rsMLBServerOperStatus will change to notInService. shutdown - gracefully shuts down the server. The rsMLBServerOperStatus will change to noNewSessions.')
rsMLBServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("nextHopRouter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerType.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerType.setDescription('The type of Firewall. regular - indicates that the firewall is a regular server. nextHopRouter - the Firewall is a next hop in the router table.')
rsMLBServerMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("found", 1), ("notFound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerMacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerMacStatus.setDescription('Indicates if the Mac address of the server was obtained. THe mac address is retrieve either from the Arp table or by sending Arp request. found - mac address was found notFound - mac address was not found ')
rsMLBServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerPortNumber.setDescription('The FireProof port this server is connected to')
rsMLBServerPeakBytesLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerPeakBytesLoad.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerPeakBytesLoad.setDescription('Maximal number of bytes per second dispatched to server since last reset.')
rsMLBServerBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerBytesRate.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerBytesRate.setDescription('Number of bytes per second dispatched to server.')
rsMLBServerBytesLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerBytesLoad.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerBytesLoad.setDescription('Number of bytes per second dispatched to server.')
rsMLBServerRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerRecoveryTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerRecoveryTime.setDescription("Number of seconds after server initialization during which ISD won't send any requests.")
rsMLBServerWarmUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerWarmUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerWarmUpTime.setDescription('Number of seconds after server recovery during which the server will get less requests than permitted by his weight and load.')
rsMLBServerTotalFramesLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBServerTotalFramesLoad.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerTotalFramesLoad.setDescription('Total number of frames dispatched to server.')
rsMLBServerProximityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBServerProximityCheck.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBServerProximityCheck.setDescription('Enable\\Disable proximity check through this router.')
rsMLBdummy1 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy1.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy1.setDescription(' Dummy variable for stopping getnext.')
rsMLBAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAdminStatus.setDescription('Enable/Disable server dispatcher.')
rsMLBClientsLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBClientsLifeTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientsLifeTime.setDescription('Maximal period of time in seconds a non-active client is kept in the clients table.')
rsMLBDispatchMethod = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cyclic", 1), ("leastTraffic", 2), ("leastUsersNumber", 3), ("nt-1", 4), ("nt-2", 5), ("private-1", 6), ("private-2", 7), ("leastBytesNumber", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBDispatchMethod.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDispatchMethod.setDescription('Type of dispatching required.')
rsMLBCheckConnectivityStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBCheckConnectivityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBCheckConnectivityStatus.setDescription('Enable or Disable servers polling.')
rsMLBCheckConnectivityMethod = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBCheckConnectivityMethod.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBCheckConnectivityMethod.setDescription('This variable indicate the method the MLB check the connectivity. where the value 1 means check connectiotivity by ping, other value serve as a tcp port number.')
rsMLBCheckConnectivityInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBCheckConnectivityInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBCheckConnectivityInterval.setDescription('Polling interval in seconds for servers polling.')
rsMLBCheckConnectivityRetries = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBCheckConnectivityRetries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBCheckConnectivityRetries.setDescription('This variable indicate the Minimal number of unsuccessful polling attempts before considering a server disconnected.')
rsMLBClientsConnectDenials = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBClientsConnectDenials.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientsConnectDenials.setDescription('This variable indicate the Number of connection requests from clients that were denied by the the server dispatcher.')
rsMLBClientsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10), )
if mibBuilder.loadTexts: rsMLBClientsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientsTable.setDescription('Table containing the list of clients currently attached to a server.')
rsMLBClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBClientAddr"), (0, "MLB-MIB", "rsMLBDestinationAddr"))
if mibBuilder.loadTexts: rsMLBClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientEntry.setDescription(' The row definition for this table.')
rsMLBClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBClientAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientAddr.setDescription('Client IP Address.')
rsMLBDestinationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBDestinationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDestinationAddr.setDescription('IP Address of server currently serving this client.')
rsMLBAttachedServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBAttachedServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAttachedServerAddr.setDescription('IP Address of server currently serving this client.')
rsMLBClientLastActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBClientLastActivityTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientLastActivityTime.setDescription('Indicates when the last frame from the client was dispatched. Measured in seconds since device re-initialization.')
rsMLBClientAttachmentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBClientAttachmentTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientAttachmentTime.setDescription('Indicates when the client was attached. Measured in seconds since device re-initialization.')
rsMLBClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBClientStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientStatus.setDescription('This variable indicates the administrative status of this entry. Used to delete an entry of this table.')
rsMLBdummy2 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy2.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy2.setDescription(' Dummy variable for stopping getnext.')
rsMLBSessionTracking = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBSessionTracking.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSessionTracking.setDescription('Enable or Disable session tracking. Usually, when working with Firewall we need to send the whole traffic of a specific session through the same Firewall. For this purpose we should keep track of the session and use the enable option. When working with routers, sending the whole traffic through the same Firewall is not necessary. Therefor there is no need to keep track of the sessions and we can use the disable option.')
rsMLBRemoteConnectivityTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12), )
if mibBuilder.loadTexts: rsMLBRemoteConnectivityTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRemoteConnectivityTable.setDescription('Table containing the list of IPs which the connectivity check is performed on them.')
rsMLBRemoteConnectivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBRmtConSrvrAddr"), (0, "MLB-MIB", "rsMLBRmtConIpAddr"))
if mibBuilder.loadTexts: rsMLBRemoteConnectivityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRemoteConnectivityEntry.setDescription(' The row definition for this table.')
rsMLBRmtConSrvrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBRmtConSrvrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRmtConSrvrAddr.setDescription('Server IP address')
rsMLBRmtConIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBRmtConIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRmtConIpAddr.setDescription('The IP address that the connectivity check will be performed on.')
rsMLBRmtConStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBRmtConStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRmtConStatus.setDescription('Administative status of appliaction on the concection check IP address.')
rsMLBRmtConOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBRmtConOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRmtConOperStatus.setDescription('Hold the operational status of the checked IP address.')
rsMLBdummy3 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy3.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy3.setDescription(' Dummy variable for stopping getnext.')
rsMLBClientTableMode = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3", 1), ("layer4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBClientTableMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBClientTableMode.setDescription('Determine the mode of keep entries in the client table. layer 3 means that entries are kept according to source Ip and destination IP layer 4 means that entries are kept according to source Ip, destination IP and ports')
rsMLBRulesTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 14), )
if mibBuilder.loadTexts: rsMLBRulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRulesTable.setDescription('Table containing the list of ')
rsMLBRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 14, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBRulesPortNumber"))
if mibBuilder.loadTexts: rsMLBRulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRulesEntry.setDescription(' The row definition for this table.')
rsMLBRulesPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBRulesPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRulesPortNumber.setDescription('')
rsMLBRulesLeavingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBRulesLeavingPort.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRulesLeavingPort.setDescription('')
rsMLBRulesNumOfServers = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBRulesNumOfServers.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRulesNumOfServers.setDescription('')
rsMLBdummy4 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy4.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy4.setDescription(' Dummy variable for stopping getnext.')
rsMLBTranslateOutBoundMode = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBTranslateOutBoundMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBTranslateOutBoundMode.setDescription('Translate FW NAT IP address to a virtual IP address for traffic that originated inside')
rsMLBVirtualIPTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 16), )
if mibBuilder.loadTexts: rsMLBVirtualIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualIPTable.setDescription("The table for storing the VIP's")
rsMLBVirtualIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 16, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBVirtualIPAddress"))
if mibBuilder.loadTexts: rsMLBVirtualIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualIPEntry.setDescription('The row definition for the VIP table')
rsMLBVirtualIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBVirtualIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualIPAddress.setDescription('The Virtual IP entry')
rsMLBVirtualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBVirtualMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualMode.setDescription('The virtual IP mode - either backup/regular')
rsMLBVirtualStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBVirtualStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualStatus.setDescription('This variable indicates the administrative status of this entry.')
rsMLBdummy5 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy5.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy5.setDescription('Dummy variable for stopping getnext.')
rsMLBMappedIPTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17), )
if mibBuilder.loadTexts: rsMLBMappedIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMappedIPTable.setDescription('The table for storing the mapped VIP entries')
rsMLBMappedIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBMappedVirtualAddress"), (0, "MLB-MIB", "rsMLBMappedFirewallIP"))
if mibBuilder.loadTexts: rsMLBMappedIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMappedIPEntry.setDescription('The row definition for the mapped table')
rsMLBMappedVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBMappedVirtualAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMappedVirtualAddress.setDescription('The Virtual IP entry')
rsMLBMappedFirewallIP = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBMappedFirewallIP.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMappedFirewallIP.setDescription('The firewall IP address')
rsMLBMappedFirewallNAT = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBMappedFirewallNAT.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMappedFirewallNAT.setDescription('The firewall NAT IP address')
rsMLBMappedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBMappedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMappedStatus.setDescription('This variable indicates the administrative status of this entry.')
rsMLBdummy6 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy6.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy6.setDescription('Dummy variable for stopping getnext.')
rsMLBVirtualConnectivityIP = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBVirtualConnectivityIP.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualConnectivityIP.setDescription('The virtual connectivity IP address')
rsMLBVirtualConnectivityMode = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBVirtualConnectivityMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBVirtualConnectivityMode.setDescription('The virtual IP mode - either backup/regular')
rsMLBRemoveEntryAtSessionEnd = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBRemoveEntryAtSessionEnd.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRemoveEntryAtSessionEnd.setDescription('Remove client entry at session end.')
rsMLBFirewallPortID = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBFirewallPortID.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBFirewallPortID.setDescription('Identify Firewall not only by Mac but also by port')
rsMLBSubnetGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23), )
if mibBuilder.loadTexts: rsMLBSubnetGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSubnetGroupTable.setDescription('Table containing the list of FW which belong to a particular destination subnet group.')
rsMLBSubnetGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBDestSubnetAddr"), (0, "MLB-MIB", "rsMLBDestSubnetMask"), (0, "MLB-MIB", "rsMLBSubnetSrvrAddr"))
if mibBuilder.loadTexts: rsMLBSubnetGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSubnetGroupEntry.setDescription(' The row definition for this table.')
rsMLBDestSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBDestSubnetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDestSubnetAddr.setDescription('Destination subnet address')
rsMLBDestSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBDestSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDestSubnetMask.setDescription('Destination subnet mask.')
rsMLBSubnetSrvrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBSubnetSrvrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSubnetSrvrAddr.setDescription('The IP address of the server that belong to the destination subnet group.')
rsMLBSubnetSrvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBSubnetSrvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSubnetSrvrStatus.setDescription('Administrative status of the server.')
rsMLBSubnetSrvrOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBSubnetSrvrOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSubnetSrvrOperMode.setDescription('define the operational mode (regular or backup) of the server in the subnet group')
rsMLBdummy8 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy8.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy8.setDescription(' Dummy variable for stopping getnext.')
rsMLBApplicationPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24), )
if mibBuilder.loadTexts: rsMLBApplicationPortGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplicationPortGroupTable.setDescription('Table containing the list of FW which belong to a particular application port group.')
rsMLBApplPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBApplPort"), (0, "MLB-MIB", "rsMLBApplPortSrvrAddr"))
if mibBuilder.loadTexts: rsMLBApplPortGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplPortGroupEntry.setDescription(' The row definition for this table.')
rsMLBApplPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBApplPort.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplPort.setDescription('The application port of the group')
rsMLBApplPortSrvrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBApplPortSrvrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplPortSrvrAddr.setDescription('The IP address of the server that belong to the application port group.')
rsMLBApplPortSrvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBApplPortSrvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplPortSrvrStatus.setDescription('Administrative status of the server.')
rsMLBApplPortSrvrOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBApplPortSrvrOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBApplPortSrvrOperMode.setDescription('define the operational mode (regular or backup) of the server in the subnet group.')
rsMLBdummy9 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 24, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy9.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy9.setDescription(' Dummy variable for stopping getnext.')
rsMLBSrcSbntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25), )
if mibBuilder.loadTexts: rsMLBSrcSbntGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntGroupTable.setDescription('Table containing the list of FW which belong to a particular source subnet group.')
rsMLBSrcSbntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBSrcSbntAddr"), (0, "MLB-MIB", "rsMLBSrcSbntMask"), (0, "MLB-MIB", "rsMLBSrcSbntSrvrAddr"))
if mibBuilder.loadTexts: rsMLBSrcSbntGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntGroupEntry.setDescription(' The row definition for this table.')
rsMLBSrcSbntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBSrcSbntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntAddr.setDescription('Source subnet address')
rsMLBSrcSbntMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBSrcSbntMask.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntMask.setDescription('source subnet mask.')
rsMLBSrcSbntSrvrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBSrcSbntSrvrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntSrvrAddr.setDescription('The IP address of the server that belong to the source subnet group.')
rsMLBSrcSbntSrvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBSrcSbntSrvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntSrvrStatus.setDescription('Administrative status of the server.')
rsMLBSrcSbntSrvrOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBSrcSbntSrvrOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcSbntSrvrOperMode.setDescription('define the operational mode (regular or backup) of the server in the source subnet group')
rsMLBdummy10 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 25, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy10.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy10.setDescription(' Dummy variable for stopping getnext.')
rsMLBNatTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26), )
if mibBuilder.loadTexts: rsMLBNatTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBNatTable.setDescription('In this table the FP saves the NAT addresses.')
rsMLBNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBNatRouterAddress"), (0, "MLB-MIB", "rsMLBNatAddress"))
if mibBuilder.loadTexts: rsMLBNatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBNatEntry.setDescription(' The row definition for this table.')
rsMLBNatRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBNatRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBNatRouterAddress.setDescription('The Router IP Address.')
rsMLBNatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBNatAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBNatAddress.setDescription('The NAT IP Address.')
rsMLBNatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBNatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBNatStatus.setDescription('This variable indicates the administrative status of this entry.')
rsMLBNatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBNatMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBNatMode.setDescription('The NAT mode - either backup/regular')
rsMLBdummy11 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 26, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy11.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy11.setDescription(' Dummy variable for stopping getnext.')
rsMLBFpNatStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBFpNatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBFpNatStatus.setDescription('Nat Status.')
rsMLBStaticNatTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28), )
if mibBuilder.loadTexts: rsMLBStaticNatTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatTable.setDescription('In this table the FP saves the static NAT addresses.')
rsMLBStaticNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBStaticNatLclServerAddress"), (0, "MLB-MIB", "rsMLBStaticNatRouterAddress"))
if mibBuilder.loadTexts: rsMLBStaticNatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatEntry.setDescription(' The row definition for this table.')
rsMLBStaticNatLclServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBStaticNatLclServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatLclServerAddress.setDescription('IP Address of the local machine whost IP address should be translated.')
rsMLBStaticNatRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBStaticNatRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatRouterAddress.setDescription('The Router IP Address.')
rsMLBStaticNatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticNatAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatAddress.setDescription('The Static NAT IP Address who is related to the local machine and router.')
rsMLBStaticNatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticNatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatStatus.setDescription('This variable indicates the administrative status of this entry.')
rsMLBStaticNatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticNatMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticNatMode.setDescription('The Static NAT mode - either backup/regular')
rsMLBdummy12 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 28, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy12.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy12.setDescription(' Dummy variable for stopping getnext.')
rsMLBProximity = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29))
rsMLBStaticProximityTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1), )
if mibBuilder.loadTexts: rsMLBStaticProximityTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityTable.setDescription('In this table the MLB saves the static proximity ranges per server farm IP Address')
rsMLBStaticProximityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBStaticProximityRangeFrom"))
if mibBuilder.loadTexts: rsMLBStaticProximityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityEntry.setDescription(' The row definition for this table.')
rsMLBStaticProximityRangeFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBStaticProximityRangeFrom.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityRangeFrom.setDescription('The IP Address of the low boundary of the interval.')
rsMLBStaticProximityRangeTo = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticProximityRangeTo.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityRangeTo.setDescription('The IP Address of the high boundary of the interval.')
rsMLBStaticProximityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticProximityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityStatus.setDescription('This variable indicate the Administative status of this entry. Use for delete an entry in this table.')
rsMLBStaticProximityServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticProximityServer1.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityServer1.setDescription('The first priority server that this range of clients will be redirected to')
rsMLBStaticProximityServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticProximityServer2.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityServer2.setDescription('The second priority server that this range of clients will be redirected to')
rsMLBStaticProximityServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBStaticProximityServer3.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBStaticProximityServer3.setDescription(' The third priority server that this range of clients will be redirected to ')
rsMLBProximityOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noProximity", 1), ("staticProximity", 2), ("fullProximityInbound", 3), ("fullProximityOutbound", 4), ("fullProximityBoth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityOperationMode.setDescription('Allow proximity operation, and choose between operating only static proximity or dynamic proximity as well ')
rsMLBProximityMainDNS = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityMainDNS.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityMainDNS.setDescription('The IP Address of the main DNS to be ignored in the proximity operation')
rsMLBProximityBackupDNS = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityBackupDNS.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityBackupDNS.setDescription('The IP Address of the backup DNS to be ignored in the proximity operation')
rsMLBProximityAgingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityAgingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityAgingPeriod.setDescription('The time in hours after which an old dynamic entry is invalid.')
rsMLBProximityRetries = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityRetries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityRetries.setDescription('The number of tries for checking the client distance')
rsMLBProximityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityTimeout.setDescription('The timeout between proximity checks')
rsMLBProximityTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 8))
rsMLBMaxDynEntries = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBMaxDynEntries.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMaxDynEntries.setDescription('Maximal number of entries in the dynamic proximity table.')
rsMLBMaxDynEntriesAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBMaxDynEntriesAfterReset.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBMaxDynEntriesAfterReset.setDescription('Future maximal number of entries in the dynamic proximity table.')
rsMLBProximityHopsWeight = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityHopsWeight.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityHopsWeight.setDescription('The weight given to the clients hops distance in the dispatching decision')
rsMLBProximityLatencyWeight = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityLatencyWeight.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityLatencyWeight.setDescription('The weight given to the clients latency in the dispatching decision')
rsMLBProximityLoadWeight = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBProximityLoadWeight.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBProximityLoadWeight.setDescription('The weight given to the site load in the dispatching decision')
rsMLBPrxyCheckFPIPTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 12), )
if mibBuilder.loadTexts: rsMLBPrxyCheckFPIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBPrxyCheckFPIPTable.setDescription('Table containing FP IP address for each server. This FP IP serves as the source IP for the proximity check packet which is send through this server.')
rsMLBPrxyCheckFPIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 12, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBRouterAddr"))
if mibBuilder.loadTexts: rsMLBPrxyCheckFPIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBPrxyCheckFPIPEntry.setDescription(' The row definition for this table.')
rsMLBRouterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBRouterAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBRouterAddr.setDescription('Server address')
rsMLBFPIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBFPIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBFPIPAddr.setDescription('FP IP address.')
rsMLBPrxyCheckFPIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBPrxyCheckFPIPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBPrxyCheckFPIPStatus.setDescription('Administrative status of the row.')
rsMLBdummy15 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 29, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy15.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy15.setDescription(' Dummy variable for stopping getnext.')
rsMLBDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30))
rsMLBDNSURLtoIPTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 1), )
if mibBuilder.loadTexts: rsMLBDNSURLtoIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSURLtoIPTable.setDescription('The table for storing the IPs for URLs')
rsMLBURLtoIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 1, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBURL"))
if mibBuilder.loadTexts: rsMLBURLtoIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBURLtoIPEntry.setDescription('The row definition for IPs for URLs table')
rsMLBURL = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBURL.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBURL.setDescription('The URL address')
rsMLBURLLocDeviceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBURLLocDeviceIP.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBURLLocDeviceIP.setDescription("The local device's IP ")
rsMLBURLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBURLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBURLStatus.setDescription('This variable indicates the administrative status of this entry. Used to delete an entry of this table.')
rsMLBdummy13 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy13.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy13.setDescription('Dummy variable for stopping getnext.')
rsMLBDNSttl = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBDNSttl.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSttl.setDescription('DNS time to live')
rsMLBDNSTwoAnswers = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBDNSTwoAnswers.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSTwoAnswers.setDescription('Sending two DNS answers')
rsMLBDNSVirtualTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 4), )
if mibBuilder.loadTexts: rsMLBDNSVirtualTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSVirtualTable.setDescription('The table for DNS virtual IPs ')
rsMLBDNSVirtualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 4, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBDNSVirtualIP"))
if mibBuilder.loadTexts: rsMLBDNSVirtualEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSVirtualEntry.setDescription('The row definition for DNS virtual IPs table')
rsMLBDNSVirtualIP = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBDNSVirtualIP.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSVirtualIP.setDescription('The DNS Virtual IP status')
rsMLBDNSVirIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBDNSVirIPMode.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSVirIPMode.setDescription('The DNS Virtual IP mode (regular/backup)')
rsMLBDNSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBDNSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBDNSStatus.setDescription('This variable indicates the administrative status of this entry. Used to delete an entry of this table.')
rsMLBdummy14 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 30, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy14.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy14.setDescription('Dummy variable for stopping getnext.')
rsMLBSrcPortInClientHash = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBSrcPortInClientHash.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBSrcPortInClientHash.setDescription("enable - client's source port is used in client table hashing, disable - only client IP and destination IP are used.")
rsMLBAgingTimeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 32), )
if mibBuilder.loadTexts: rsMLBAgingTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAgingTimeTable.setDescription('This table determine the aging time for specific applications.')
rsMLBAgingTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 32, 1), ).setIndexNames((0, "MLB-MIB", "rsMLBAgingTimeApplPort"))
if mibBuilder.loadTexts: rsMLBAgingTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAgingTimeEntry.setDescription(' The row definition for this table.')
rsMLBAgingTimeApplPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBAgingTimeApplPort.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAgingTimeApplPort.setDescription('Application port')
rsMLBAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 32, 1, 2), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAgingTime.setDescription('define the aging time for the aplication port in seconds')
rsMLBAgingTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsMLBAgingTimeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBAgingTimeStatus.setDescription('Administrative status of the entry.')
rsMLBdummy16 = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 1, 38, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMLBdummy16.setStatus('mandatory')
if mibBuilder.loadTexts: rsMLBdummy16.setDescription(' Dummy variable for stopping getnext.')
mibBuilder.exportSymbols("MLB-MIB", rsMLBServerType=rsMLBServerType, rsMLBServerAttachedUsersNumber=rsMLBServerAttachedUsersNumber, rsMLBServerPeakLoad=rsMLBServerPeakLoad, rsMLBdummy1=rsMLBdummy1, rsMLBdummy16=rsMLBdummy16, rsMLBSrcSbntMask=rsMLBSrcSbntMask, rsMLBClientsTable=rsMLBClientsTable, rsMLBPrxyCheckFPIPStatus=rsMLBPrxyCheckFPIPStatus, rsMLBSubnetSrvrStatus=rsMLBSubnetSrvrStatus, rsMLBDNSTwoAnswers=rsMLBDNSTwoAnswers, rsMLBServerOperMode=rsMLBServerOperMode, rsMLBRmtConIpAddr=rsMLBRmtConIpAddr, rsMLBServerRecoveryTime=rsMLBServerRecoveryTime, rsMLBServerOperStatus=rsMLBServerOperStatus, rsMLBMaxDynEntries=rsMLBMaxDynEntries, rsMLBServerProximityCheck=rsMLBServerProximityCheck, rsMLBProximityOperationMode=rsMLBProximityOperationMode, rsMLBSrcSbntAddr=rsMLBSrcSbntAddr, rsMLBClientsLifeTime=rsMLBClientsLifeTime, rsMLBServerWeight=rsMLBServerWeight, rsMLBStaticNatAddress=rsMLBStaticNatAddress, rsMLBProximityLatencyWeight=rsMLBProximityLatencyWeight, rsMLBApplPortGroupEntry=rsMLBApplPortGroupEntry, rsMLBDNSVirtualEntry=rsMLBDNSVirtualEntry, rsMLBdummy5=rsMLBdummy5, rsMLBDNSttl=rsMLBDNSttl, rsMLBProximityTuning=rsMLBProximityTuning, rsMLBMappedVirtualAddress=rsMLBMappedVirtualAddress, rsMLBServerStatus=rsMLBServerStatus, rsMLBRouterAddr=rsMLBRouterAddr, rsMLBRemoveEntryAtSessionEnd=rsMLBRemoveEntryAtSessionEnd, rsMLBRulesNumOfServers=rsMLBRulesNumOfServers, rsMLBProximityHopsWeight=rsMLBProximityHopsWeight, rsMLBFPIPAddr=rsMLBFPIPAddr, rsMLBServerBytesLoad=rsMLBServerBytesLoad, rsMLBSrcSbntGroupEntry=rsMLBSrcSbntGroupEntry, rsMLBAttachedServerAddr=rsMLBAttachedServerAddr, rsMLBCheckConnectivityRetries=rsMLBCheckConnectivityRetries, rsMLBDNSVirtualTable=rsMLBDNSVirtualTable, rsMLBApplPortSrvrOperMode=rsMLBApplPortSrvrOperMode, rsMLBPrxyCheckFPIPTable=rsMLBPrxyCheckFPIPTable, rsMLBdummy13=rsMLBdummy13, rsMLBSrcSbntGroupTable=rsMLBSrcSbntGroupTable, rsMLBSessionTracking=rsMLBSessionTracking, rsMLBClientTableMode=rsMLBClientTableMode, rsMLBdummy4=rsMLBdummy4, rsMLBSubnetSrvrOperMode=rsMLBSubnetSrvrOperMode, rsMLBProximityLoadWeight=rsMLBProximityLoadWeight, rsMLBStaticProximityServer2=rsMLBStaticProximityServer2, rsMLBCheckConnectivityStatus=rsMLBCheckConnectivityStatus, rsMLBRulesPortNumber=rsMLBRulesPortNumber, rsMLBCheckConnectivityMethod=rsMLBCheckConnectivityMethod, rsMLBdummy8=rsMLBdummy8, rsMLBAgingTimeTable=rsMLBAgingTimeTable, rsMLBRulesTable=rsMLBRulesTable, rsMLBMappedIPEntry=rsMLBMappedIPEntry, rsMLBSubnetSrvrAddr=rsMLBSubnetSrvrAddr, rsMLBStaticProximityRangeFrom=rsMLBStaticProximityRangeFrom, rsMLBServerName=rsMLBServerName, rsMLBURLStatus=rsMLBURLStatus, rsMLBStaticProximityServer1=rsMLBStaticProximityServer1, rsMLBAdminStatus=rsMLBAdminStatus, rsMLBDNSVirtualIP=rsMLBDNSVirtualIP, rsMLBSubnetGroupTable=rsMLBSubnetGroupTable, rsMLBClientEntry=rsMLBClientEntry, rsMLBServerFramesLoad=rsMLBServerFramesLoad, rsMLBStaticProximityServer3=rsMLBStaticProximityServer3, rsMLBSrcPortInClientHash=rsMLBSrcPortInClientHash, rsMLBTranslateOutBoundMode=rsMLBTranslateOutBoundMode, rsMLBClientStatus=rsMLBClientStatus, rsMLBServerMacStatus=rsMLBServerMacStatus, rsMLBdummy11=rsMLBdummy11, rsMLBStaticProximityStatus=rsMLBStaticProximityStatus, rsMLBProximityAgingPeriod=rsMLBProximityAgingPeriod, rsMLBDestSubnetMask=rsMLBDestSubnetMask, rsMLBNatEntry=rsMLBNatEntry, rsMLBMappedFirewallIP=rsMLBMappedFirewallIP, rsMLBNatStatus=rsMLBNatStatus, rsMLBURL=rsMLBURL, rsMLBRemoteConnectivityTable=rsMLBRemoteConnectivityTable, rsMLBAgingTimeEntry=rsMLBAgingTimeEntry, rsMLBVirtualMode=rsMLBVirtualMode, rsMLBRulesLeavingPort=rsMLBRulesLeavingPort, rsMLBAgingTimeApplPort=rsMLBAgingTimeApplPort, rsMLBVirtualConnectivityMode=rsMLBVirtualConnectivityMode, rsMLBDNSURLtoIPTable=rsMLBDNSURLtoIPTable, rsMLBVirtualConnectivityIP=rsMLBVirtualConnectivityIP, rsMLBCheckConnectivityInterval=rsMLBCheckConnectivityInterval, rsMLBApplPort=rsMLBApplPort, rsMLBServerWarmUpTime=rsMLBServerWarmUpTime, rsMLBdummy12=rsMLBdummy12, rsMLBdummy14=rsMLBdummy14, rsMLBNatAddress=rsMLBNatAddress, rsMLBRmtConSrvrAddr=rsMLBRmtConSrvrAddr, rsMLBAgingTimeStatus=rsMLBAgingTimeStatus, rsMLBServerBytesRate=rsMLBServerBytesRate, rsMLBNatRouterAddress=rsMLBNatRouterAddress, rsMLBStaticNatMode=rsMLBStaticNatMode, rsMLBdummy15=rsMLBdummy15, rsMLBApplicationPortGroupTable=rsMLBApplicationPortGroupTable, rsMLBServerFramesRate=rsMLBServerFramesRate, rsMLBStaticNatLclServerAddress=rsMLBStaticNatLclServerAddress, rsMLBServerAddr=rsMLBServerAddr, rsMLBDNSVirIPMode=rsMLBDNSVirIPMode, rsMLBServerTotalFramesLoad=rsMLBServerTotalFramesLoad, rsMLBVirtualIPTable=rsMLBVirtualIPTable, rsMLBStaticNatEntry=rsMLBStaticNatEntry, rsMLBDispatchMethod=rsMLBDispatchMethod, rsMLBServerAdminStatus=rsMLBServerAdminStatus, rsMLBVirtualIPAddress=rsMLBVirtualIPAddress, rsMLBApplPortSrvrAddr=rsMLBApplPortSrvrAddr, rsMLBStaticNatRouterAddress=rsMLBStaticNatRouterAddress, rsMLBStaticNatStatus=rsMLBStaticNatStatus, rsMLBPrxyCheckFPIPEntry=rsMLBPrxyCheckFPIPEntry, rsMLBSrcSbntSrvrStatus=rsMLBSrcSbntSrvrStatus, rsMLBProximityTimeout=rsMLBProximityTimeout, rsMLBServerPeakBytesLoad=rsMLBServerPeakBytesLoad, rsMLBSrcSbntSrvrAddr=rsMLBSrcSbntSrvrAddr, rsMLBVirtualIPEntry=rsMLBVirtualIPEntry, rsMLBFirewallPortID=rsMLBFirewallPortID, rsMLBStaticProximityEntry=rsMLBStaticProximityEntry, rsMLBDNS=rsMLBDNS, rsMLBClientLastActivityTime=rsMLBClientLastActivityTime, rsMLBServerPortNumber=rsMLBServerPortNumber, rsMLBRmtConStatus=rsMLBRmtConStatus, rsMLBSubnetGroupEntry=rsMLBSubnetGroupEntry, rsMLBMappedFirewallNAT=rsMLBMappedFirewallNAT, rsMLBClientAttachmentTime=rsMLBClientAttachmentTime, rsMLBClientAddr=rsMLBClientAddr, rsMLBSrcSbntSrvrOperMode=rsMLBSrcSbntSrvrOperMode, rsMLBNatTable=rsMLBNatTable, rsMLBProximityMainDNS=rsMLBProximityMainDNS, rsMLBDestinationAddr=rsMLBDestinationAddr, rsMLBURLLocDeviceIP=rsMLBURLLocDeviceIP, rsMLBProximityRetries=rsMLBProximityRetries, rsMLBdummy2=rsMLBdummy2, rsMLBRulesEntry=rsMLBRulesEntry, rsMLBdummy9=rsMLBdummy9, rsMLBDNSStatus=rsMLBDNSStatus, rsMLBServerConnectionLimit=rsMLBServerConnectionLimit, rsMLBStaticProximityTable=rsMLBStaticProximityTable, rsMLBRmtConOperStatus=rsMLBRmtConOperStatus, rsMLBClientsConnectDenials=rsMLBClientsConnectDenials, rsMLBMappedIPTable=rsMLBMappedIPTable, rsMLBdummy3=rsMLBdummy3, rsMLBAgingTime=rsMLBAgingTime, rsMLBStaticNatTable=rsMLBStaticNatTable, rsMLBApplicationServerEntry=rsMLBApplicationServerEntry, rsMLBNatMode=rsMLBNatMode, rsMLBApplPortSrvrStatus=rsMLBApplPortSrvrStatus, rsMLBMappedStatus=rsMLBMappedStatus, rsMLBdummy6=rsMLBdummy6, rsMLBdummy10=rsMLBdummy10, rsMLBRemoteConnectivityEntry=rsMLBRemoteConnectivityEntry, rsMLBFpNatStatus=rsMLBFpNatStatus, rsMLBMaxDynEntriesAfterReset=rsMLBMaxDynEntriesAfterReset, rsMLBVirtualStatus=rsMLBVirtualStatus, rsMLBDestSubnetAddr=rsMLBDestSubnetAddr, rsMLBURLtoIPEntry=rsMLBURLtoIPEntry, rsMLBStaticProximityRangeTo=rsMLBStaticProximityRangeTo, rsMLBApplicationServersTable=rsMLBApplicationServersTable, rsMLBProximity=rsMLBProximity, rsMLBProximityBackupDNS=rsMLBProximityBackupDNS)
