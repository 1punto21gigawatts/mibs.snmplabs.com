#
# PySNMP MIB module HP-SN-SW-L4-SWITCH-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-MIBS
# Produced by pysmi-0.3.4 at Wed May  1 13:36:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
snL4, = mibBuilder.importSymbols("HP-SN-ROOT-MIB", "snL4")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, TimeTicks, Integer32, NotificationType, Unsigned32, iso, Counter64, Gauge32, ObjectIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "TimeTicks", "Integer32", "NotificationType", "Unsigned32", "iso", "Counter64", "Gauge32", "ObjectIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class L4RowSts(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5))

class L4Status(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class L4ServerName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class L4Flag(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class L4DeleteState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("done", 0), ("waitunbind", 1), ("waitdelete", 2))

class WebCacheState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1), ("failed", 2), ("testing", 3), ("suspect", 4), ("shutdown", 5), ("active", 6))

class PhysAddress(OctetString):
    pass

class DisplayString(OctetString):
    pass

snL4Gen = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1))
snL4VirtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2))
snL4RealServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3))
snL4VirtualServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4))
snL4RealServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5))
snL4Bind = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6))
snL4VirtualServerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7))
snL4RealServerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8))
snL4VirtualServerPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9))
snL4RealServerPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10))
snL4Policy = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11))
snL4PolicyPortAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 12))
snL4Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 13))
snL4WebCache = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14))
snL4WebCacheGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15))
snL4WebCacheTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16))
snL4WebUncachedTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17))
snL4WebCachePort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18))
snL4RealServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19))
snL4RealServerPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20))
snL4VirtualServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21))
snL4VirtualServerPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22))
snL4RealServerStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23))
snL4RealServerPortStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24))
snL4VirtualServerStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25))
snL4VirtualServerPortStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26))
snL4GslbSiteRemoteServerIrons = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 27))
snL4History = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28))
snL4MaxSessionLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4MaxSessionLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snL4MaxSessionLimit.setDescription('numbers of maximum session (L4 cache) entries')
snL4TcpSynLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4TcpSynLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snL4TcpSynLimit.setDescription('Numbers of connection per second')
snL4slbGlobalSDAType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leastconnection", 1), ("roundrobin", 2), ("weighted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4slbGlobalSDAType.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbGlobalSDAType.setDescription('Global Session Distribution Algorithm(SDA)')
snL4slbTotalConnections = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbTotalConnections.setDescription('Total connections in this device')
snL4slbLimitExceeds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbLimitExceeds.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbLimitExceeds.setDescription('exceeds snL4TCPSynLimit (numbers of connection per second)')
snL4slbForwardTraffic = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbForwardTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbForwardTraffic.setDescription('Client->Server')
snL4slbReverseTraffic = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbReverseTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbReverseTraffic.setDescription('Server->Client')
snL4slbDrops = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbDrops.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbDrops.setDescription('')
snL4slbDangling = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbDangling.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbDangling.setDescription('')
snL4slbDisableCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbDisableCount.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbDisableCount.setDescription('')
snL4slbAged = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbAged.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbAged.setDescription('')
snL4slbFinished = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4slbFinished.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbFinished.setDescription('FIN_or_RST')
snL4FreeSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4FreeSessionCount.setStatus('mandatory')
if mibBuilder.loadTexts: snL4FreeSessionCount.setDescription('Maximum sessions - used sessions')
snL4BackupInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BackupInterface.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BackupInterface.setDescription('backup monitoring port')
snL4BackupMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 15), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BackupMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BackupMacAddr.setDescription('Associated MAC address for backup monitoring port')
snL4Active = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 16), L4Flag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4Active.setStatus('mandatory')
if mibBuilder.loadTexts: snL4Active.setDescription('')
snL4Redundancy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4Redundancy.setStatus('mandatory')
if mibBuilder.loadTexts: snL4Redundancy.setDescription('')
snL4Backup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 18), L4Flag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4Backup.setStatus('mandatory')
if mibBuilder.loadTexts: snL4Backup.setDescription('true->StandBy,false->active')
snL4BecomeActive = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4BecomeActive.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BecomeActive.setDescription('How many times this device become active')
snL4BecomeStandBy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4BecomeStandBy.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BecomeStandBy.setDescription('How many times this device become standby')
snL4BackupState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("slbSyncComplete", 0), ("slbSyncReqMap", 1), ("slbSyncreqMac", 2), ("slbSyncreqServers", 3), ("slbSyncReqL4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4BackupState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BackupState.setDescription('Backup state')
snL4NoPDUSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4NoPDUSent.setStatus('mandatory')
if mibBuilder.loadTexts: snL4NoPDUSent.setDescription('')
snL4NoPDUCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4NoPDUCount.setStatus('mandatory')
if mibBuilder.loadTexts: snL4NoPDUCount.setDescription('')
snL4NoPortMap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4NoPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4NoPortMap.setDescription('')
snL4unsuccessfulConn = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4unsuccessfulConn.setStatus('mandatory')
if mibBuilder.loadTexts: snL4unsuccessfulConn.setDescription('Unsuccessfull connection')
snL4PingInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PingInterval.setDescription('Ping retries interval')
snL4PingRetry = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PingRetry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PingRetry.setDescription('Ping retries attempts')
snL4TcpAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4TcpAge.setStatus('mandatory')
if mibBuilder.loadTexts: snL4TcpAge.setDescription('TCP reset age')
snL4UdpAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4UdpAge.setStatus('mandatory')
if mibBuilder.loadTexts: snL4UdpAge.setDescription('UDP reset age')
snL4EnableMaxSessionLimitReachedTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableMaxSessionLimitReachedTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableMaxSessionLimitReachedTrap.setDescription('Enable/disable maximum number of connections reached trap.')
snL4EnableTcpSynLimitReachedTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableTcpSynLimitReachedTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableTcpSynLimitReachedTrap.setDescription('Enable/disable the number of TCP SYN limits reached trap.')
snL4EnableRealServerUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableRealServerUpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableRealServerUpTrap.setDescription('Enable/disable the real server up trap.')
snL4EnableRealServerDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableRealServerDownTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableRealServerDownTrap.setDescription('Enable/disable the real server down trap.')
snL4EnableRealServerPortUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableRealServerPortUpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableRealServerPortUpTrap.setDescription('Enable/disable the real server TCP port up trap.')
snL4EnableRealServerPortDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableRealServerPortDownTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableRealServerPortDownTrap.setDescription('Enable/disable the real server TCP port down trap.')
snL4EnableRealServerMaxConnLimitReachedTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableRealServerMaxConnLimitReachedTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableRealServerMaxConnLimitReachedTrap.setDescription('Enable/disable the real server maximum number of connections reached trap.')
snL4EnableBecomeStandbyTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableBecomeStandbyTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableBecomeStandbyTrap.setDescription('Enable/disable trap of the server load balancing switch changes state from active to standby.')
snL4EnableBecomeActiveTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableBecomeActiveTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableBecomeActiveTrap.setDescription('Enable/disable trap of the server load balancing switch changes state from standby to active.')
snL4slbRouterInterfacePortMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4slbRouterInterfacePortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snL4slbRouterInterfacePortMask.setDescription('Router interface port mask. (It was obsoleted after release 07100, replaced by snL4slbRouterInterfacePortList)')
snL4MaxNumWebCacheGroup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4MaxNumWebCacheGroup.setStatus('mandatory')
if mibBuilder.loadTexts: snL4MaxNumWebCacheGroup.setDescription('The maximum number of server cache groups')
snL4MaxNumWebCachePerGroup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4MaxNumWebCachePerGroup.setStatus('mandatory')
if mibBuilder.loadTexts: snL4MaxNumWebCachePerGroup.setDescription('The maximum number of WEB Cache servers in each of web cache group')
snL4WebCacheStateful = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 42), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheStateful.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheStateful.setDescription('The WEB Cache servers cache-stateful')
snL4EnableGslbHealthCheckIpUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpUpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpUpTrap.setDescription('Health check IP up.')
snL4EnableGslbHealthCheckIpDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpDownTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpDownTrap.setDescription('Health check IP down.')
snL4EnableGslbHealthCheckIpPortUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpPortUpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpPortUpTrap.setDescription('Health check IP port up.')
snL4EnableGslbHealthCheckIpPortDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpPortDownTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbHealthCheckIpPortDownTrap.setDescription('Health check IP port down.')
snL4EnableGslbRemoteGslbSiDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbRemoteGslbSiDownTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbRemoteGslbSiDownTrap.setDescription('Connection to GSLB ServerIron is down.')
snL4EnableGslbRemoteGslbSiUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbRemoteGslbSiUpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbRemoteGslbSiUpTrap.setDescription('Connection to GSLB ServerIron is up.')
snL4EnableGslbRemoteSiDownTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbRemoteSiDownTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbRemoteSiDownTrap.setDescription('GSLB connection to remote ServerIron is down.')
snL4EnableGslbRemoteSiUpTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4EnableGslbRemoteSiUpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snL4EnableGslbRemoteSiUpTrap.setDescription('GSLB connection to remote ServerIron is up.')
snL4slbRouterInterfacePortList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 1, 51), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4slbRouterInterfacePortList.setStatus('mandatory')
if mibBuilder.loadTexts: snL4slbRouterInterfacePortList.setDescription('Router interface port list. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number.')
snL4VirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1), )
if mibBuilder.loadTexts: snL4VirtualServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerTable.setDescription('Virtual Server table.')
snL4VirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerIndex"))
if mibBuilder.loadTexts: snL4VirtualServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerEntry.setDescription('An entry in L4 Virtual Server table.')
snL4VirtualServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerIndex.setDescription('The table index for a Virtual Server entry.')
snL4VirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerName.setDescription('Virtual server name.')
snL4VirtualServerVirtualIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerVirtualIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerVirtualIP.setDescription('Virtual Server IP Address.')
snL4VirtualServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 4), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerAdminStatus.setDescription('Virtual Server status is ether disabled(0) or enabled(1).')
snL4VirtualServerSDAType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("leastconnection", 1), ("roundrobin", 2), ("weighted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerSDAType.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerSDAType.setDescription('TCP/UDP Sessions Distribution Algorithms Type.')
snL4VirtualServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 6), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerRowStatus.setDescription('To create or delete a virtual server entry.')
snL4VirtualServerDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 2, 1, 1, 7), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerDeleteState.setDescription('Delete operation state.')
snL4RealServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1), )
if mibBuilder.loadTexts: snL4RealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerTable.setDescription('Real Server table.')
snL4RealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerIndex"))
if mibBuilder.loadTexts: snL4RealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerEntry.setDescription('An entry in the Real Server table.')
snL4RealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerIndex.setDescription('The table index for a Real Server entry.')
snL4RealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerName.setDescription('Real server name.')
snL4RealServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerIP.setDescription('Real Server IP Address.')
snL4RealServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 4), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerAdminStatus.setDescription('Real Server status is ether disabled(0) or enabled(1).')
snL4RealServerMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerMaxConnections.setDescription('Real Server Maximum Connection allowed.')
snL4RealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerWeight.setDescription('Real Server weight')
snL4RealServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 7), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerRowStatus.setDescription('To create or delete a real server entry.')
snL4RealServerDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 3, 1, 1, 8), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerDeleteState.setDescription('Delete operation state.')
snL4VirtualServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1), )
if mibBuilder.loadTexts: snL4VirtualServerPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortTable.setDescription('Virtual Server Port table.')
snL4VirtualServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortIndex"))
if mibBuilder.loadTexts: snL4VirtualServerPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortEntry.setDescription('An entry in the Virtual Server Port table.')
snL4VirtualServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortIndex.setDescription('The index for Virtual Server Port entry.')
snL4VirtualServerPortServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortServerName.setDescription('')
snL4VirtualServerPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortPort.setDescription('')
snL4VirtualServerPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 4), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortAdminStatus.setDescription('')
snL4VirtualServerPortSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortSticky.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortSticky.setDescription('')
snL4VirtualServerPortConcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortConcurrent.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortConcurrent.setDescription('')
snL4VirtualServerPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 7), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortRowStatus.setDescription('To create or delete a virtual server port entry.')
snL4VirtualServerPortDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 4, 1, 1, 8), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortDeleteState.setDescription('Delete operation state.')
snL4RealServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1), )
if mibBuilder.loadTexts: snL4RealServerPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortTable.setDescription('Real Server Port table.')
snL4RealServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortIndex"))
if mibBuilder.loadTexts: snL4RealServerPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortEntry.setDescription('An entry in the Real Server Port table.')
snL4RealServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortIndex.setDescription('The index for Real Server Port entry.')
snL4RealServerPortServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortServerName.setDescription('')
snL4RealServerPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortPort.setDescription('')
snL4RealServerPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1, 4), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortAdminStatus.setDescription('')
snL4RealServerPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1, 5), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortRowStatus.setDescription('To create or delete a Real server port entry.')
snL4RealServerPortDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 5, 1, 1, 6), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortDeleteState.setDescription('Delete operation state.')
snL4BindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1), )
if mibBuilder.loadTexts: snL4BindTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindTable.setDescription('Bind table.')
snL4BindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4BindIndex"))
if mibBuilder.loadTexts: snL4BindEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindEntry.setDescription('An entry in the Bind table.')
snL4BindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4BindIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindIndex.setDescription('The index for Bind entry.')
snL4BindVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BindVirtualServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindVirtualServerName.setDescription('')
snL4BindVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BindVirtualPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindVirtualPortNumber.setDescription('')
snL4BindRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1, 4), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BindRealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindRealServerName.setDescription('')
snL4BindRealPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BindRealPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindRealPortNumber.setDescription('')
snL4BindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4BindRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4BindRowStatus.setDescription('To create or delete bind entry.')
snL4VirtualServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1), )
if mibBuilder.loadTexts: snL4VirtualServerStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusTable.setDescription('Virtual Server Status table.')
snL4VirtualServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerStatusIndex"))
if mibBuilder.loadTexts: snL4VirtualServerStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusEntry.setDescription('An entry in L4 Virtual Server Status table.')
snL4VirtualServerStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusIndex.setDescription('The table index for a Virtual Server Status entry.')
snL4VirtualServerStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1, 1, 2), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusName.setDescription('Virtual server name.')
snL4VirtualServerStatusReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatusReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusReceivePkts.setDescription('')
snL4VirtualServerStatusTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatusTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusTransmitPkts.setDescription('')
snL4VirtualServerStatusTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatusTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatusTotalConnections.setDescription('')
snL4RealServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1), )
if mibBuilder.loadTexts: snL4RealServerStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusTable.setDescription('Real Server Status table.')
snL4RealServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerStatusIndex"))
if mibBuilder.loadTexts: snL4RealServerStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusEntry.setDescription('An entry in the Real Server Status table.')
snL4RealServerStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusIndex.setDescription('The table index for a Real Server Status entry.')
snL4RealServerStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 2), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusName.setDescription('')
snL4RealServerStatusRealIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusRealIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusRealIP.setDescription('')
snL4RealServerStatusReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusReceivePkts.setDescription('')
snL4RealServerStatusTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusTransmitPkts.setDescription('')
snL4RealServerStatusCurConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusCurConnections.setDescription('')
snL4RealServerStatusTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusTotalConnections.setDescription('')
snL4RealServerStatusAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusAge.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusAge.setDescription('')
snL4RealServerStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("serverdisabled", 0), ("serverenabled", 1), ("serverfailed", 2), ("servertesting", 3), ("serversuspect", 4), ("servershutdown", 5), ("serveractive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusState.setDescription('')
snL4RealServerStatusReassignments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusReassignments.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusReassignments.setDescription('')
snL4RealServerStatusReassignmentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusReassignmentLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusReassignmentLimit.setDescription('')
snL4RealServerStatusFailedPortExists = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusFailedPortExists.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusFailedPortExists.setDescription('')
snL4RealServerStatusFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusFailTime.setDescription('')
snL4RealServerStatusPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatusPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatusPeakConnections.setDescription('')
snL4VirtualServerPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1), )
if mibBuilder.loadTexts: snL4VirtualServerPortStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusTable.setDescription('Virtual Server Port Status table.')
snL4VirtualServerPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortStatusIndex"))
if mibBuilder.loadTexts: snL4VirtualServerPortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusEntry.setDescription('An entry in the Virtual Server Port Status table.')
snL4VirtualServerPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusIndex.setDescription('The index for Virtual Server Port Status entry.')
snL4VirtualServerPortStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatusPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusPort.setDescription('')
snL4VirtualServerPortStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1, 3), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatusServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusServerName.setDescription('')
snL4VirtualServerPortStatusCurrentConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatusCurrentConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusCurrentConnection.setDescription('')
snL4VirtualServerPortStatusTotalConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatusTotalConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusTotalConnection.setDescription('')
snL4VirtualServerPortStatusPeakConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatusPeakConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatusPeakConnection.setDescription('')
snL4RealServerPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1), )
if mibBuilder.loadTexts: snL4RealServerPortStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusTable.setDescription('Real Server Port Status table.')
snL4RealServerPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortStatusIndex"))
if mibBuilder.loadTexts: snL4RealServerPortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusEntry.setDescription('An entry in the Real Server Port Status table.')
snL4RealServerPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusIndex.setDescription('The index for Real Server Port Status entry.')
snL4RealServerPortStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusPort.setDescription('')
snL4RealServerPortStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 3), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusServerName.setDescription('')
snL4RealServerPortStatusReassignCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusReassignCount.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusReassignCount.setDescription('')
snL4RealServerPortStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("failed", 2), ("testing", 3), ("suspect", 4), ("shutdown", 5), ("active", 6), ("unbound", 7), ("awaitUnbind", 8), ("awaitDelete", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusState.setDescription('Real server port state')
snL4RealServerPortStatusFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusFailTime.setDescription('Only useful, if real server port state is failed. Indicating how seconds has been elapsed from the last retry.')
snL4RealServerPortStatusCurrentConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusCurrentConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusCurrentConnection.setDescription('Real server port current connection')
snL4RealServerPortStatusTotalConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusTotalConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusTotalConnection.setDescription('Real server port total connection')
snL4RealServerPortStatusRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusRxPkts.setDescription('Real server port receive packets.')
snL4RealServerPortStatusTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusTxPkts.setDescription('Real server port transmit packets.')
snL4RealServerPortStatusRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusRxBytes.setDescription('Real server port receive bytes.')
snL4RealServerPortStatusTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusTxBytes.setDescription('Real server port transmit bytes.')
snL4RealServerPortStatusPeakConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatusPeakConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatusPeakConnection.setDescription('peak connection for real server port.')
snL4PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1), )
if mibBuilder.loadTexts: snL4PolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyTable.setDescription('L4 policy table.')
snL4PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4PolicyId"))
if mibBuilder.loadTexts: snL4PolicyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyEntry.setDescription('An entry of the L4 policy table.')
snL4PolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4PolicyId.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyId.setDescription('The ID to identify a entry.')
snL4PolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPriority.setDescription('The Stand alone stackable switch L4 Policy Priority values are: normal(0) -- normal prority high(1) -- high prority cache(2) -- prority for cache transparent(3) -- prority for transparent The BigIron switch L4 Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7) ')
snL4PolicyScope = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("global", 0), ("local", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyScope.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyScope.setDescription(' Scope of the local or global. Global automatic apply to all port. Local apply to a port.')
snL4PolicyProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("udp", 0), ("tcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyProtocol.setDescription('')
snL4PolicyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPort.setDescription('')
snL4PolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2).....the row exists and is valid")
snL4PolicyPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 12, 1), )
if mibBuilder.loadTexts: snL4PolicyPortAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPortAccessTable.setDescription('ip interface L4 policy access table.')
snL4PolicyPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 12, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4PolicyPortAccessPort"))
if mibBuilder.loadTexts: snL4PolicyPortAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPortAccessEntry.setDescription('An entry of the ip interface L4 policy access table.')
snL4PolicyPortAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4PolicyPortAccessPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPortAccessPort.setDescription('The ip interface to which the L4 policy applies.')
snL4PolicyPortAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 12, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyPortAccessList.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPortAccessList.setDescription('An ip L4 policy list, of which each octet contains a ID number that forms a group of s. A valid entry in the snL4PolicyTable with the corresponding ID number (i.e. snL4PolicyId) must have been created before a list is initialized.')
snL4PolicyPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4PolicyPortAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4PolicyPortAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2).....the row exists and is valid")
snL4TrapRealServerIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 13, 1), IpAddress())
if mibBuilder.loadTexts: snL4TrapRealServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4TrapRealServerIP.setDescription('Real server IP address.')
snL4TrapRealServerName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 13, 2), L4ServerName())
if mibBuilder.loadTexts: snL4TrapRealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4TrapRealServerName.setDescription('Real server name.')
snL4TrapRealServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 13, 3), Integer32())
if mibBuilder.loadTexts: snL4TrapRealServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4TrapRealServerPort.setDescription('Transport protocol port number of the real server.')
snL4TrapRealServerCurConnections = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 13, 4), Integer32())
if mibBuilder.loadTexts: snL4TrapRealServerCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4TrapRealServerCurConnections.setDescription('Real Server current connections.')
snL4WebCacheTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1), )
if mibBuilder.loadTexts: snL4WebCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTable.setDescription('Real Server table.')
snL4WebCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebCacheIP"))
if mibBuilder.loadTexts: snL4WebCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheEntry.setDescription('An entry in the Real Server table.')
snL4WebCacheIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheIP.setDescription('Real Server IP Address.')
snL4WebCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheName.setDescription('Real server name.')
snL4WebCacheAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 3), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheAdminStatus.setDescription('Real Server status is ether disabled(0) or enabled(1).')
snL4WebCacheMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheMaxConnections.setDescription('Real Server Maximum Connection allowed.')
snL4WebCacheWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheWeight.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheWeight.setDescription('Real Server weight')
snL4WebCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 6), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheRowStatus.setDescription('To create or delete a real server entry.')
snL4WebCacheDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 14, 1, 1, 7), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheDeleteState.setDescription('Delete operation state.')
snL4WebCacheGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1), )
if mibBuilder.loadTexts: snL4WebCacheGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupTable.setDescription('Web Cache Group table.')
snL4WebCacheGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebCacheGroupId"))
if mibBuilder.loadTexts: snL4WebCacheGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupEntry.setDescription('An entry in the Web Cache Group table.')
snL4WebCacheGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupId.setDescription('The identification for a Web Cache Group entry. The limit is from 1 to snL4MaxNumWebCacheGroup.')
snL4WebCacheGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupName.setDescription('Web Cache Group name.')
snL4WebCacheGroupWebCacheIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheGroupWebCacheIpList.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupWebCacheIpList.setDescription('A list of the Server Cache Group Real Server IP Address. The number of IP Address is from 1 (4 OCTETs) to the snL4MaxNumServersPerWebCacheGroup, maximum number of server IP Address allowed in the list.')
snL4WebCacheGroupDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheGroupDestMask.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupDestMask.setDescription('Cache Server Group Destination Mask.')
snL4WebCacheGroupSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheGroupSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupSrcMask.setDescription('Cache Server Group Source Mask.')
snL4WebCacheGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheGroupAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupAdminStatus.setDescription('The WEB Cache Group is set either enabled(1)...........activated. disabled(0)..........disabled.')
snL4WebCacheGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 15, 1, 1, 7), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCacheGroupRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheGroupRowStatus.setDescription('To create or delete a Web Cache Group entry.')
snL4WebCacheTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1), )
if mibBuilder.loadTexts: snL4WebCacheTrafficStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTrafficStatsTable.setDescription('Web Cache Traffic Statistics table.')
snL4WebCacheTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebCacheTrafficIp"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebCacheTrafficPort"))
if mibBuilder.loadTexts: snL4WebCacheTrafficStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTrafficStatsEntry.setDescription('An entry in the Web Cache Traffic Statistics table.')
snL4WebCacheTrafficIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheTrafficIp.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTrafficIp.setDescription('Cache Server IP Address.')
snL4WebCacheTrafficPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheTrafficPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTrafficPort.setDescription('The WEB Cache port is one of the protocol port such as UDP, TCP etc.')
snL4WebCacheCurrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheCurrConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheCurrConnections.setDescription('Number of the current connections in WEB Cache group.')
snL4WebCacheTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTotalConnections.setDescription('The total connections in WEB Cache group.')
snL4WebCacheTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTxPkts.setDescription('Number of the Packets sending from Client/Web-Server to Cache Server')
snL4WebCacheRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheRxPkts.setDescription('Number of the Packets sending from Cache Server to Client/Web-Server')
snL4WebCacheTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheTxOctets.setDescription('Number of the Octets sending from Client/Web-Server to Cache Server')
snL4WebCacheRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCacheRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCacheRxOctets.setDescription('Number of the Octets sending from Cache Server to Client/Web-Server')
snL4WebCachePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 16, 1, 1, 9), WebCacheState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCachePortState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortState.setDescription('Web Cache Port state.')
snL4WebUncachedTrafficStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1), )
if mibBuilder.loadTexts: snL4WebUncachedTrafficStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebUncachedTrafficStatsTable.setDescription('Web Uncached Traffic Statistics table.')
snL4WebUncachedTrafficStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebServerPort"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebClientPort"))
if mibBuilder.loadTexts: snL4WebUncachedTrafficStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebUncachedTrafficStatsEntry.setDescription('An entry in the Web Uncached Traffic Statistics table.')
snL4WebServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebServerPort.setDescription('Web Server Port.')
snL4WebClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebClientPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebClientPort.setDescription('Web Client Port.')
snL4WebUncachedTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebUncachedTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebUncachedTxPkts.setDescription('Number of the Packets sending from Client port to Web Server port')
snL4WebUncachedRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebUncachedRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebUncachedRxPkts.setDescription('Number of the Packets sending from Web Server port to Client port')
snL4WebUncachedTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebUncachedTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebUncachedTxOctets.setDescription('Number of the Octets sending from Client port to Web Server port')
snL4WebUncachedRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebUncachedRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebUncachedRxOctets.setDescription('Number of the Octets sending from Web Server port to Client port')
snL4WebServerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebServerPortName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebServerPortName.setDescription('Web Server Port Name string.')
snL4WebClientPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 17, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebClientPortName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebClientPortName.setDescription('Web Client Port Name string.')
snL4WebCachePortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1), )
if mibBuilder.loadTexts: snL4WebCachePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortTable.setDescription('Real Server Port table.')
snL4WebCachePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebCachePortServerIp"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4WebCachePortPort"))
if mibBuilder.loadTexts: snL4WebCachePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortEntry.setDescription('An entry in the Real Server Port table.')
snL4WebCachePortServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCachePortServerIp.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortServerIp.setDescription('Cache Server IP Address.')
snL4WebCachePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCachePortPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortPort.setDescription('The WEB Cache port is one of the protocol port such as UDP, TCP etc.')
snL4WebCachePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1, 1, 3), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCachePortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortAdminStatus.setDescription('')
snL4WebCachePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1, 1, 4), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4WebCachePortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortRowStatus.setDescription('To create or delete a Real server port entry.')
snL4WebCachePortDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 18, 1, 1, 5), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4WebCachePortDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4WebCachePortDeleteState.setDescription('Delete operation state.')
snL4RealServerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1), )
if mibBuilder.loadTexts: snL4RealServerCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgTable.setDescription('Real Server table.')
snL4RealServerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerCfgIP"))
if mibBuilder.loadTexts: snL4RealServerCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgEntry.setDescription('An entry in the Real Server table.')
snL4RealServerCfgIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerCfgIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgIP.setDescription('Real Server IP Address.')
snL4RealServerCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerCfgName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgName.setDescription('Real server name.')
snL4RealServerCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 3), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerCfgAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgAdminStatus.setDescription('Real Server status is ether disabled(0) or enabled(1).')
snL4RealServerCfgMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerCfgMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgMaxConnections.setDescription('Real Server Maximum Connection allowed.')
snL4RealServerCfgWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerCfgWeight.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgWeight.setDescription('Real Server weight')
snL4RealServerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 6), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgRowStatus.setDescription('To create or delete a real server entry.')
snL4RealServerCfgDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 19, 1, 1, 7), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerCfgDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerCfgDeleteState.setDescription('Delete operation state.')
snL4RealServerPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1), )
if mibBuilder.loadTexts: snL4RealServerPortCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgTable.setDescription('Real Server Port table.')
snL4RealServerPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortCfgIP"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortCfgPort"))
if mibBuilder.loadTexts: snL4RealServerPortCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgEntry.setDescription('An entry in the Real Server Port table.')
snL4RealServerPortCfgIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortCfgIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgIP.setDescription('The IP address for the Real Server .')
snL4RealServerPortCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgPort.setDescription('')
snL4RealServerPortCfgServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1, 2), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortCfgServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgServerName.setDescription('')
snL4RealServerPortCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1, 4), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortCfgAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgAdminStatus.setDescription('')
snL4RealServerPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1, 5), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgRowStatus.setDescription('To create or delete a Real server port entry.')
snL4RealServerPortCfgDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 20, 1, 1, 6), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortCfgDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortCfgDeleteState.setDescription('Delete operation state.')
snL4VirtualServerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1), )
if mibBuilder.loadTexts: snL4VirtualServerCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgTable.setDescription('Virtual Server table.')
snL4VirtualServerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerCfgVirtualIP"))
if mibBuilder.loadTexts: snL4VirtualServerCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgEntry.setDescription('An entry in L4 Virtual Server table.')
snL4VirtualServerCfgVirtualIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerCfgVirtualIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgVirtualIP.setDescription('Virtual Server IP Address.')
snL4VirtualServerCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1, 2), L4ServerName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerCfgName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgName.setDescription('Virtual server name.')
snL4VirtualServerCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1, 3), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerCfgAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgAdminStatus.setDescription('Virtual Server status is ether disabled(0) or enabled(1).')
snL4VirtualServerCfgSDAType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("leastconnection", 1), ("roundrobin", 2), ("weighted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerCfgSDAType.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgSDAType.setDescription('TCP/UDP Sessions Distribution Algorithms Type.')
snL4VirtualServerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1, 5), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgRowStatus.setDescription('To create or delete a virtual server entry.')
snL4VirtualServerCfgDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 21, 1, 1, 6), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerCfgDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerCfgDeleteState.setDescription('Delete operation state.')
snL4VirtualServerPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1), )
if mibBuilder.loadTexts: snL4VirtualServerPortCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgTable.setDescription('Virtual Server Port table.')
snL4VirtualServerPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortCfgIP"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortCfgPort"))
if mibBuilder.loadTexts: snL4VirtualServerPortCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgEntry.setDescription('An entry in the Virtual Server Port table.')
snL4VirtualServerPortCfgIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgIP.setDescription('Virtual Server IP Address.')
snL4VirtualServerPortCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgPort.setDescription('')
snL4VirtualServerPortCfgServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 3), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgServerName.setDescription('')
snL4VirtualServerPortCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 4), L4Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgAdminStatus.setDescription('')
snL4VirtualServerPortCfgSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgSticky.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgSticky.setDescription('')
snL4VirtualServerPortCfgConcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgConcurrent.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgConcurrent.setDescription('')
snL4VirtualServerPortCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 7), L4RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgRowStatus.setDescription('To create or delete a virtual server port entry.')
snL4VirtualServerPortCfgDeleteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 22, 1, 1, 8), L4DeleteState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortCfgDeleteState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortCfgDeleteState.setDescription('Delete operation state.')
snL4VirtualServerStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1), )
if mibBuilder.loadTexts: snL4VirtualServerStatisticTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticTable.setDescription('Virtual Server Statistic table.')
snL4VirtualServerStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerStatisticIP"))
if mibBuilder.loadTexts: snL4VirtualServerStatisticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticEntry.setDescription('An entry in L4 Virtual Server Statistic table.')
snL4VirtualServerStatisticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticIP.setDescription('The table index for a Virtual Server Statistic entry.')
snL4VirtualServerStatisticName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 2), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticName.setDescription('Virtual server name.')
snL4VirtualServerStatisticReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticReceivePkts.setDescription('')
snL4VirtualServerStatisticTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticTransmitPkts.setDescription('')
snL4VirtualServerStatisticTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticTotalConnections.setDescription('')
snL4VirtualServerStatisticReceiveBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticReceiveBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticReceiveBytes.setDescription('')
snL4VirtualServerStatisticTransmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticTransmitBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticTransmitBytes.setDescription('')
snL4VirtualServerStatisticSymmetricState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricState.setDescription('')
snL4VirtualServerStatisticSymmetricPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricPriority.setDescription('')
snL4VirtualServerStatisticSymmetricKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricKeep.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricKeep.setDescription('')
snL4VirtualServerStatisticSymmetricActivates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricActivates.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricActivates.setDescription('')
snL4VirtualServerStatisticSymmetricInactives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricInactives.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricInactives.setDescription('')
snL4VirtualServerStatisticSymmetricBestStandbyMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 13), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricBestStandbyMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricBestStandbyMacAddr.setDescription('')
snL4VirtualServerStatisticSymmetricActiveMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 25, 1, 1, 14), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricActiveMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerStatisticSymmetricActiveMacAddr.setDescription('')
snL4RealServerStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1), )
if mibBuilder.loadTexts: snL4RealServerStatisticTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticTable.setDescription('Real Server Statistic table.')
snL4RealServerStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerStatisticRealIP"))
if mibBuilder.loadTexts: snL4RealServerStatisticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticEntry.setDescription('An entry in the Real Server Statistic table.')
snL4RealServerStatisticRealIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticRealIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticRealIP.setDescription('')
snL4RealServerStatisticName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 2), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticName.setDescription('')
snL4RealServerStatisticReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticReceivePkts.setDescription('')
snL4RealServerStatisticTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticTransmitPkts.setDescription('')
snL4RealServerStatisticCurConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticCurConnections.setDescription('')
snL4RealServerStatisticTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticTotalConnections.setDescription('')
snL4RealServerStatisticAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticAge.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticAge.setDescription('')
snL4RealServerStatisticState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("serverdisabled", 0), ("serverenabled", 1), ("serverfailed", 2), ("servertesting", 3), ("serversuspect", 4), ("servershutdown", 5), ("serveractive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticState.setDescription('')
snL4RealServerStatisticReassignments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticReassignments.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticReassignments.setDescription('')
snL4RealServerStatisticReassignmentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticReassignmentLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticReassignmentLimit.setDescription('')
snL4RealServerStatisticFailedPortExists = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticFailedPortExists.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticFailedPortExists.setDescription('')
snL4RealServerStatisticFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticFailTime.setDescription('')
snL4RealServerStatisticPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 23, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerStatisticPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerStatisticPeakConnections.setDescription('')
snL4VirtualServerPortStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1), )
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticTable.setDescription('Virtual Server Port Statistic table.')
snL4VirtualServerPortStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortStatisticIP"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortStatisticPort"))
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticEntry.setDescription('An entry in the Virtual Server Port Statistic table.')
snL4VirtualServerPortStatisticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticIP.setDescription('The index for Virtual Server Port Statistic entry.')
snL4VirtualServerPortStatisticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticPort.setDescription('')
snL4VirtualServerPortStatisticServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1, 3), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticServerName.setDescription('')
snL4VirtualServerPortStatisticCurrentConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticCurrentConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticCurrentConnection.setDescription('')
snL4VirtualServerPortStatisticTotalConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticTotalConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticTotalConnection.setDescription('')
snL4VirtualServerPortStatisticPeakConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 26, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticPeakConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortStatisticPeakConnection.setDescription('')
snL4RealServerPortStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1), )
if mibBuilder.loadTexts: snL4RealServerPortStatisticTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticTable.setDescription('Real Server Port Statistic table.')
snL4RealServerPortStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortStatisticIP"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortStatisticPort"))
if mibBuilder.loadTexts: snL4RealServerPortStatisticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticEntry.setDescription('An entry in the Real Server Port Statistic table.')
snL4RealServerPortStatisticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticIP.setDescription('The index for Real Server Port Statistic entry.')
snL4RealServerPortStatisticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticPort.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticPort.setDescription('')
snL4RealServerPortStatisticServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 3), L4ServerName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticServerName.setDescription('')
snL4RealServerPortStatisticReassignCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticReassignCount.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticReassignCount.setDescription('')
snL4RealServerPortStatisticState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("failed", 2), ("testing", 3), ("suspect", 4), ("shutdown", 5), ("active", 6), ("unbound", 7), ("awaitUnbind", 8), ("awaitDelete", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticState.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticState.setDescription('Real server port state')
snL4RealServerPortStatisticFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticFailTime.setDescription('Only useful, if real server port state is failed. Indicating how seconds has been elapsed from the last retry.')
snL4RealServerPortStatisticCurrentConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticCurrentConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticCurrentConnection.setDescription('Real server port current connection')
snL4RealServerPortStatisticTotalConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticTotalConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticTotalConnection.setDescription('Real server port total connection')
snL4RealServerPortStatisticRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticRxPkts.setDescription('Real server port receive packets.')
snL4RealServerPortStatisticTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticTxPkts.setDescription('Real server port transmit packets.')
snL4RealServerPortStatisticRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticRxBytes.setDescription('Real server port receive bytes.')
snL4RealServerPortStatisticTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticTxBytes.setDescription('Real server port transmit bytes.')
snL4RealServerPortStatisticPeakConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 24, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortStatisticPeakConnection.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortStatisticPeakConnection.setDescription('peak connection for real server port.')
snL4GslbSiteRemoteServerIronTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 27, 1), )
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronTable.setDescription('GSLB remote ServerIron configuration table.')
snL4GslbSiteRemoteServerIronEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 27, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4GslbSiteRemoteServerIronIP"))
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronEntry.setDescription('An entry of a GSLB remote ServerIron configuration.')
snL4GslbSiteRemoteServerIronIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 27, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronIP.setStatus('mandatory')
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronIP.setDescription('The index for each remote ServerIron in a site.')
snL4GslbSiteRemoteServerIronPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronPreference.setStatus('mandatory')
if mibBuilder.loadTexts: snL4GslbSiteRemoteServerIronPreference.setDescription('The preference of a remote ServerIron. The default value is 128.')
snL4RealServerHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1), )
if mibBuilder.loadTexts: snL4RealServerHistoryControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlTable.setDescription('A list of history control entries.')
snL4RealServerHistoryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerHistoryControlIndex"))
if mibBuilder.loadTexts: snL4RealServerHistoryControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlEntry.setDescription('A list of parameters that set up a periodic sampling of statistics.As an example, an instance of the snL4RealServerHistoryControlInterval object might be named snL4RealServerHistoryControlInterval.2')
snL4RealServerHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlIndex.setDescription('An index that uniquely identifies an entry in the snL4RealServerHistoryControl table.Each such entry defines a set of samples at a particular interval for an interface on the device.')
snL4RealServerHistoryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerHistoryControlDataSource.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this snL4RealServerHistoryControlEntry.This source can be any real/virtual server and real/virtual server port on this ServerIron. In order to identify a particular instance, this object shall identify the instance of the object, defined in the above statistics tables. This object may not be modified if the associated snL4RealServerHistoryControlStatus object is equal to valid(1).')
snL4RealServerHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerHistoryControlBucketsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this snL4RealServerHistoryControlEntry. When this object is created or modified, the probe should set snL4RealServerHistoryControlBucketsGranted as closely to this object as is possible for the particular probe implementation and available resources.')
snL4RealServerHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryControlBucketsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this snL4RealServerHistoryControlEntry. When the associated snL4RealServerHistoryControlBucketsRequested object is created or modified, the probe should set this object as closely to the requested value as is possible for the particular probe implementation and available resources.The probe must not lower this value except as a result of a modification to the associated snL4RealServerHistoryControlBucketsRequested object. There will be times when the actual number of buckets associated with this entry is less than the value of this object.In this case, at the end of each sampling interval, a new bucket will be added to the media-specific table. When the number of buckets reaches the value of this object and a new bucket is to be added to the media-specific table, the oldest bucket associated with this snL4RealServerHistoryControlEntry shall be deleted by the agent so that the new bucket can be added. When the value of this object changes to a value less than the current value, entries are deleted from the media-specific table associated with this snL4RealServerHistoryControlEntry.Enough of the oldest of these entries shall be deleted by the agent so that their number remains less than or equal to the new value of this object. When the value of this object changes to a value greater than the current value, the number of associated media- specific entries may be allowed to grow.')
snL4RealServerHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerHistoryControlInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlInterval.setDescription("The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this snL4RealServerHistoryControlEntry.This interval can be set to any number of seconds between 1 and 3600 (1 hour). Because the counters in a bucket may overflow at their maximum value with no indication, a prudent manager will take into account the possibility of overflow in any of the associated counters.It is important to consider the minimum time in which any counter could overflow on a particular media type and set the snL4RealServerHistoryControlInterval object to a value less than this interval.This is typically most important for the 'octets' counter in any media-specific table. This object may not be modified if the associated snL4RealServerHistoryControlStatus object is equal to valid(1).")
snL4RealServerHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerHistoryControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
snL4RealServerHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerHistoryControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryControlStatus.setDescription('The status of this snL4RealServerHistoryControl entry. Each instance of the media-specific table associated with this snL4RealServerHistoryControlEntry will be deleted by the agent if this snL4RealServerHistoryControlEntry is not equal to valid(1).')
snL4RealServerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2), )
if mibBuilder.loadTexts: snL4RealServerHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryTable.setDescription('A list of Ethernet snL4History entries.')
snL4RealServerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerHistoryIndex"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerHistorySampleIndex"))
if mibBuilder.loadTexts: snL4RealServerHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryEntry.setDescription('An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the snL4RealServerHistoryControlEntry which set up the parameters for a regular collection of these samples. As an example, an instance of the snL4RealServerHistoryReceivePkts object might be named snL4RealServerHistoryReceivePkts.2.89')
snL4RealServerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryIndex.setDescription('The snL4RealServerHistory of which this entry is a part.The snL4RealServerHistory identified by a particular value of this index is the same snL4RealServerHistory as identified by the same value of snL4RealServerHistoryControlIndex.')
snL4RealServerHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistorySampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same snL4RealServerHistoryControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
snL4RealServerHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryIntervalStart.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured.If the probe keeps track of the time of day, it should start the first sample of the snL4RealServerHistory at a time such that when the next hour of the day begins, a sample is started at that instant.Note that following this rule may require the probe to delay collecting the first sample of the snL4RealServerHistory, as each sample must be of the same interval.Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
snL4RealServerHistoryReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryReceivePkts.setDescription('')
snL4RealServerHistoryTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryTransmitPkts.setDescription('')
snL4RealServerHistoryTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryTotalConnections.setDescription('')
snL4RealServerHistoryCurConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryCurConnections.setDescription('')
snL4RealServerHistoryPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryPeakConnections.setDescription('')
snL4RealServerHistoryReassignments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerHistoryReassignments.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerHistoryReassignments.setDescription('')
snL4RealServerPortHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3), )
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlTable.setDescription('A list of history control entries.')
snL4RealServerPortHistoryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortHistoryControlIndex"))
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlEntry.setDescription('A list of parameters that set up a periodic sampling of statistics.As an example, an instance of the snL4RealServerPortHistoryControlInterval object might be named snL4RealServerPortHistoryControlInterval.2')
snL4RealServerPortHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlIndex.setDescription('An index that uniquely identifies an entry in the snL4RealServerPortHistoryControl table.Each such entry defines a set of samples at a particular interval for an interface on the device.')
snL4RealServerPortHistoryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlDataSource.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this snL4RealServerPortHistoryControlEntry.This source can be any real/virtual server and real/virtual server port on this ServerIron. In order to identify a particular instance, this object shall identify the instance of the object, defined in the above statistics tables. This object may not be modified if the associated snL4RealServerPortHistoryControlStatus object is equal to valid(1).')
snL4RealServerPortHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlBucketsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this snL4RealServerPortHistoryControlEntry. When this object is created or modified, the probe should set snL4RealServerPortHistoryControlBucketsGranted as closely to this object as is possible for the particular probe implementation and available resources.')
snL4RealServerPortHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlBucketsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this snL4RealServerPortHistoryControlEntry. When the associated snL4RealServerPortHistoryControlBucketsRequested object is created or modified, the probe should set this object as closely to the requested value as is possible for the particular probe implementation and available resources.The probe must not lower this value except as a result of a modification to the associated snL4RealServerPortHistoryControlBucketsRequested object. There will be times when the actual number of buckets associated with this entry is less than the value of this object.In this case, at the end of each sampling interval, a new bucket will be added to the media-specific table. When the number of buckets reaches the value of this object and a new bucket is to be added to the media-specific table, the oldest bucket associated with this snL4RealServerPortHistoryControlEntry shall be deleted by the agent so that the new bucket can be added. When the value of this object changes to a value less than the current value, entries are deleted from the media-specific table associated with this snL4RealServerPortHistoryControlEntry.Enough of the oldest of these entries shall be deleted by the agent so that their number remains less than or equal to the new value of this object. When the value of this object changes to a value greater than the current value, the number of associated media- specific entries may be allowed to grow.')
snL4RealServerPortHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlInterval.setDescription("The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this snL4RealServerPortHistoryControlEntry.This interval can be set to any number of seconds between 1 and 3600 (1 hour). Because the counters in a bucket may overflow at their maximum value with no indication, a prudent manager will take into account the possibility of overflow in any of the associated counters.It is important to consider the minimum time in which any counter could overflow on a particular media type and set the snL4RealServerPortHistoryControlInterval object to a value less than this interval.This is typically most important for the 'octets' counter in any media-specific table. This object may not be modified if the associated snL4RealServerPortHistoryControlStatus object is equal to valid(1).")
snL4RealServerPortHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
snL4RealServerPortHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryControlStatus.setDescription('The status of this snL4RealServerPortHistoryControl entry. Each instance of the media-specific table associated with this snL4RealServerPortHistoryControlEntry will be deleted by the agent if this snL4RealServerPortHistoryControlEntry is not equal to valid(1).')
snL4RealServerPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4), )
if mibBuilder.loadTexts: snL4RealServerPortHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryTable.setDescription('A list of Ethernet snL4History entries.')
snL4RealServerPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortHistoryIndex"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4RealServerPortHistorySampleIndex"))
if mibBuilder.loadTexts: snL4RealServerPortHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryEntry.setDescription('An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the snL4RealServerPortHistoryControlEntry which set up the parameters for a regular collection of these samples. As an example, an instance of the snL4RealServerPortHistoryReceivePkts object might be named snL4RealServerPortHistoryReceivePkts.2.89')
snL4RealServerPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryIndex.setDescription('The snL4RealServerPortHistory of which this entry is a part.The snL4RealServerPortHistory identified by a particular value of this index is the same snL4RealServerPortHistory as identified by the same value of snL4RealServerPortHistoryControlIndex.')
snL4RealServerPortHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistorySampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same snL4RealServerPortHistoryControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
snL4RealServerPortHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryIntervalStart.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured.If the probe keeps track of the time of day, it should start the first sample of the snL4RealServerPortHistory at a time such that when the next hour of the day begins, a sample is started at that instant.Note that following this rule may require the probe to delay collecting the first sample of the snL4RealServerPortHistory, as each sample must be of the same interval.Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
snL4RealServerPortHistoryReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryReceivePkts.setDescription('')
snL4RealServerPortHistoryTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryTransmitPkts.setDescription('')
snL4RealServerPortHistoryTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryTotalConnections.setDescription('')
snL4RealServerPortHistoryCurConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryCurConnections.setDescription('')
snL4RealServerPortHistoryPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryPeakConnections.setDescription('')
snL4RealServerPortHistoryResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4RealServerPortHistoryResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: snL4RealServerPortHistoryResponseTime.setDescription('')
snL4VirtualServerHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5), )
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlTable.setDescription('A list of history control entries.')
snL4VirtualServerHistoryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerHistoryControlIndex"))
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlEntry.setDescription('A list of parameters that set up a periodic sampling of statistics.As an example, an instance of the snL4VirtualServerHistoryControlInterval object might be named snL4VirtualServerHistoryControlInterval.2')
snL4VirtualServerHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlIndex.setDescription('An index that uniquely identifies an entry in the snL4VirtualServerHistoryControl table.Each such entry defines a set of samples at a particular interval for an interface on the device.')
snL4VirtualServerHistoryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlDataSource.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this snL4VirtualServerHistoryControlEntry.This source can be any real/virtual server and real/virtual server port on this ServerIron. In order to identify a particular instance, this object shall identify the instance of the object, defined in the above statistics tables. This object may not be modified if the associated snL4VirtualServerHistoryControlStatus object is equal to valid(1).')
snL4VirtualServerHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlBucketsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this snL4VirtualServerHistoryControlEntry. When this object is created or modified, the probe should set snL4VirtualServerHistoryControlBucketsGranted as closely to this object as is possible for the particular probe implementation and available resources.')
snL4VirtualServerHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlBucketsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this snL4VirtualServerHistoryControlEntry. When the associated snL4VirtualServerHistoryControlBucketsRequested object is created or modified, the probe should set this object as closely to the requested value as is possible for the particular probe implementation and available resources.The probe must not lower this value except as a result of a modification to the associated snL4VirtualServerHistoryControlBucketsRequested object. There will be times when the actual number of buckets associated with this entry is less than the value of this object.In this case, at the end of each sampling interval, a new bucket will be added to the media-specific table. When the number of buckets reaches the value of this object and a new bucket is to be added to the media-specific table, the oldest bucket associated with this snL4VirtualServerHistoryControlEntry shall be deleted by the agent so that the new bucket can be added. When the value of this object changes to a value less than the current value, entries are deleted from the media-specific table associated with this snL4VirtualServerHistoryControlEntry.Enough of the oldest of these entries shall be deleted by the agent so that their number remains less than or equal to the new value of this object. When the value of this object changes to a value greater than the current value, the number of associated media- specific entries may be allowed to grow.')
snL4VirtualServerHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlInterval.setDescription("The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this snL4VirtualServerHistoryControlEntry.This interval can be set to any number of seconds between 1 and 3600 (1 hour). Because the counters in a bucket may overflow at their maximum value with no indication, a prudent manager will take into account the possibility of overflow in any of the associated counters.It is important to consider the minimum time in which any counter could overflow on a particular media type and set the snL4VirtualServerHistoryControlInterval object to a value less than this interval.This is typically most important for the 'octets' counter in any media-specific table. This object may not be modified if the associated snL4VirtualServerHistoryControlStatus object is equal to valid(1).")
snL4VirtualServerHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
snL4VirtualServerHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryControlStatus.setDescription('The status of this snL4VirtualServerHistoryControl entry. Each instance of the media-specific table associated with this snL4VirtualServerHistoryControlEntry will be deleted by the agent if this snL4VirtualServerHistoryControlEntry is not equal to valid(1).')
snL4VirtualServerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6), )
if mibBuilder.loadTexts: snL4VirtualServerHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryTable.setDescription('A list of Ethernet snL4History entries.')
snL4VirtualServerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerHistoryIndex"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerHistorySampleIndex"))
if mibBuilder.loadTexts: snL4VirtualServerHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryEntry.setDescription('An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the snL4VirtualServerHistoryControlEntry which set up the parameters for a regular collection of these samples. As an example, an instance of the snL4VirtualServerHistoryReceivePkts object might be named snL4VirtualServerHistoryReceivePkts.2.89')
snL4VirtualServerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryIndex.setDescription('The snL4VirtualServerHistory of which this entry is a part.The snL4VirtualServerHistory identified by a particular value of this index is the same snL4VirtualServerHistory as identified by the same value of snL4VirtualServerHistoryControlIndex.')
snL4VirtualServerHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistorySampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same snL4VirtualServerHistoryControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
snL4VirtualServerHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryIntervalStart.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured.If the probe keeps track of the time of day, it should start the first sample of the snL4VirtualServerHistory at a time such that when the next hour of the day begins, a sample is started at that instant.Note that following this rule may require the probe to delay collecting the first sample of the snL4VirtualServerHistory, as each sample must be of the same interval.Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
snL4VirtualServerHistoryReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryReceivePkts.setDescription('')
snL4VirtualServerHistoryTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryTransmitPkts.setDescription('')
snL4VirtualServerHistoryTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryTotalConnections.setDescription('')
snL4VirtualServerHistoryCurConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryCurConnections.setDescription('')
snL4VirtualServerHistoryPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerHistoryPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerHistoryPeakConnections.setDescription('')
snL4VirtualServerPortHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7), )
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlTable.setDescription('A list of history control entries.')
snL4VirtualServerPortHistoryControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortHistoryControlIndex"))
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlEntry.setDescription('A list of parameters that set up a periodic sampling of statistics.As an example, an instance of the snL4VirtualServerPortHistoryControlInterval object might be named snL4VirtualServerPortHistoryControlInterval.2')
snL4VirtualServerPortHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlIndex.setDescription('An index that uniquely identifies an entry in the snL4VirtualServerPortHistoryControl table.Each such entry defines a set of samples at a particular interval for an interface on the device.')
snL4VirtualServerPortHistoryControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlDataSource.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this snL4VirtualServerPortHistoryControlEntry.This source can be any real/virtual server and real/virtual server port on this ServerIron. In order to identify a particular instance, this object shall identify the instance of the object, defined in the above statistics tables. This object may not be modified if the associated snL4VirtualServerPortHistoryControlStatus object is equal to valid(1).')
snL4VirtualServerPortHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlBucketsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this snL4VirtualServerPortHistoryControlEntry. When this object is created or modified, the probe should set snL4VirtualServerPortHistoryControlBucketsGranted as closely to this object as is possible for the particular probe implementation and available resources.')
snL4VirtualServerPortHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlBucketsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this snL4VirtualServerPortHistoryControlEntry. When the associated snL4VirtualServerPortHistoryControlBucketsRequested object is created or modified, the probe should set this object as closely to the requested value as is possible for the particular probe implementation and available resources.The probe must not lower this value except as a result of a modification to the associated snL4VirtualServerPortHistoryControlBucketsRequested object. There will be times when the actual number of buckets associated with this entry is less than the value of this object.In this case, at the end of each sampling interval, a new bucket will be added to the media-specific table. When the number of buckets reaches the value of this object and a new bucket is to be added to the media-specific table, the oldest bucket associated with this snL4VirtualServerPortHistoryControlEntry shall be deleted by the agent so that the new bucket can be added. When the value of this object changes to a value less than the current value, entries are deleted from the media-specific table associated with this snL4VirtualServerPortHistoryControlEntry.Enough of the oldest of these entries shall be deleted by the agent so that their number remains less than or equal to the new value of this object. When the value of this object changes to a value greater than the current value, the number of associated media- specific entries may be allowed to grow.')
snL4VirtualServerPortHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlInterval.setDescription("The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this snL4VirtualServerPortHistoryControlEntry.This interval can be set to any number of seconds between 1 and 3600 (1 hour). Because the counters in a bucket may overflow at their maximum value with no indication, a prudent manager will take into account the possibility of overflow in any of the associated counters.It is important to consider the minimum time in which any counter could overflow on a particular media type and set the snL4VirtualServerPortHistoryControlInterval object to a value less than this interval.This is typically most important for the 'octets' counter in any media-specific table. This object may not be modified if the associated snL4VirtualServerPortHistoryControlStatus object is equal to valid(1).")
snL4VirtualServerPortHistoryControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
snL4VirtualServerPortHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryControlStatus.setDescription('The status of this snL4VirtualServerPortHistoryControl entry. Each instance of the media-specific table associated with this snL4VirtualServerPortHistoryControlEntry will be deleted by the agent if this snL4VirtualServerPortHistoryControlEntry is not equal to valid(1).')
snL4VirtualServerPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8), )
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryTable.setDescription('A list of Ethernet snL4History entries.')
snL4VirtualServerPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1), ).setIndexNames((0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortHistoryIndex"), (0, "HP-SN-SW-L4-SWITCH-GROUP-MIB", "snL4VirtualServerPortHistorySampleIndex"))
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryEntry.setDescription('An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the snL4VirtualServerPortHistoryControlEntry which set up the parameters for a regular collection of these samples. As an example, an instance of the snL4VirtualServerPortHistoryReceivePkts object might be named snL4VirtualServerPortHistoryReceivePkts.2.89')
snL4VirtualServerPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryIndex.setDescription('The snL4VirtualServerPortHistory of which this entry is a part.The snL4VirtualServerPortHistory identified by a particular value of this index is the same snL4VirtualServerPortHistory as identified by the same value of snL4VirtualServerPortHistoryControlIndex.')
snL4VirtualServerPortHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistorySampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same snL4VirtualServerPortHistoryControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
snL4VirtualServerPortHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryIntervalStart.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured.If the probe keeps track of the time of day, it should start the first sample of the snL4VirtualServerPortHistory at a time such that when the next hour of the day begins, a sample is started at that instant.Note that following this rule may require the probe to delay collecting the first sample of the snL4VirtualServerPortHistory, as each sample must be of the same interval.Also note that the sample which is currently being collected is not accessible in this table until the end of its interval.')
snL4VirtualServerPortHistoryReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryReceivePkts.setDescription('')
snL4VirtualServerPortHistoryTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryTransmitPkts.setDescription('')
snL4VirtualServerPortHistoryTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryTotalConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryTotalConnections.setDescription('')
snL4VirtualServerPortHistoryCurConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryCurConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryCurConnections.setDescription('')
snL4VirtualServerPortHistoryPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 4, 28, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: snL4VirtualServerPortHistoryPeakConnections.setDescription('')
mibBuilder.exportSymbols("HP-SN-SW-L4-SWITCH-GROUP-MIB", snL4BindEntry=snL4BindEntry, snL4TrapRealServerCurConnections=snL4TrapRealServerCurConnections, snL4PingInterval=snL4PingInterval, snL4RealServerPortCfgPort=snL4RealServerPortCfgPort, snL4RealServerCfgIP=snL4RealServerCfgIP, snL4RealServerStatisticPeakConnections=snL4RealServerStatisticPeakConnections, snL4RealServerStatisticState=snL4RealServerStatisticState, snL4MaxSessionLimit=snL4MaxSessionLimit, snL4MaxNumWebCacheGroup=snL4MaxNumWebCacheGroup, snL4RealServerPortStatusFailTime=snL4RealServerPortStatusFailTime, snL4WebCacheTrafficPort=snL4WebCacheTrafficPort, snL4EnableGslbRemoteGslbSiUpTrap=snL4EnableGslbRemoteGslbSiUpTrap, snL4WebCacheMaxConnections=snL4WebCacheMaxConnections, snL4VirtualServerPortServerName=snL4VirtualServerPortServerName, snL4PolicyTable=snL4PolicyTable, snL4WebUncachedRxOctets=snL4WebUncachedRxOctets, snL4VirtualServerStatusEntry=snL4VirtualServerStatusEntry, snL4VirtualServerCfgTable=snL4VirtualServerCfgTable, snL4BindRealPortNumber=snL4BindRealPortNumber, snL4VirtualServerPortStatusIndex=snL4VirtualServerPortStatusIndex, snL4WebCacheTotalConnections=snL4WebCacheTotalConnections, snL4VirtualServerStatus=snL4VirtualServerStatus, snL4VirtualServerPortCfg=snL4VirtualServerPortCfg, snL4PingRetry=snL4PingRetry, snL4RealServerPortEntry=snL4RealServerPortEntry, snL4RealServerHistoryControlBucketsGranted=snL4RealServerHistoryControlBucketsGranted, snL4RealServerPortHistoryReceivePkts=snL4RealServerPortHistoryReceivePkts, snL4EnableRealServerPortDownTrap=snL4EnableRealServerPortDownTrap, snL4VirtualServerHistoryReceivePkts=snL4VirtualServerHistoryReceivePkts, snL4VirtualServerPortCfgDeleteState=snL4VirtualServerPortCfgDeleteState, snL4RealServerHistoryControlIndex=snL4RealServerHistoryControlIndex, snL4RealServerPortStatusPeakConnection=snL4RealServerPortStatusPeakConnection, snL4RealServerPortHistoryCurConnections=snL4RealServerPortHistoryCurConnections, snL4RealServerPortCfgEntry=snL4RealServerPortCfgEntry, snL4VirtualServerPortHistoryControlEntry=snL4VirtualServerPortHistoryControlEntry, snL4RealServerPortStatusTxBytes=snL4RealServerPortStatusTxBytes, snL4RealServerPortCfgServerName=snL4RealServerPortCfgServerName, snL4RealServerPortHistoryIntervalStart=snL4RealServerPortHistoryIntervalStart, snL4WebCacheGroupSrcMask=snL4WebCacheGroupSrcMask, snL4RealServerPortStatistic=snL4RealServerPortStatistic, snL4RealServerPortCfgTable=snL4RealServerPortCfgTable, snL4GslbSiteRemoteServerIronTable=snL4GslbSiteRemoteServerIronTable, snL4VirtualServerPortHistoryControlBucketsRequested=snL4VirtualServerPortHistoryControlBucketsRequested, snL4VirtualServerCfgName=snL4VirtualServerCfgName, snL4TrapRealServerPort=snL4TrapRealServerPort, snL4RealServerStatisticTable=snL4RealServerStatisticTable, snL4RealServerStatisticRealIP=snL4RealServerStatisticRealIP, WebCacheState=WebCacheState, snL4VirtualServerHistoryControlOwner=snL4VirtualServerHistoryControlOwner, snL4RealServerRowStatus=snL4RealServerRowStatus, snL4WebCacheRxPkts=snL4WebCacheRxPkts, snL4VirtualServerPortHistoryTable=snL4VirtualServerPortHistoryTable, snL4RealServerHistoryControlOwner=snL4RealServerHistoryControlOwner, snL4VirtualServerPortTable=snL4VirtualServerPortTable, snL4RealServerStatusAge=snL4RealServerStatusAge, snL4RealServerWeight=snL4RealServerWeight, snL4VirtualServerPortHistoryControlTable=snL4VirtualServerPortHistoryControlTable, snL4WebUncachedTrafficStats=snL4WebUncachedTrafficStats, snL4VirtualServerPortStatisticPort=snL4VirtualServerPortStatisticPort, snL4VirtualServerPortHistoryTransmitPkts=snL4VirtualServerPortHistoryTransmitPkts, snL4RealServerStatisticReassignments=snL4RealServerStatisticReassignments, snL4EnableGslbRemoteSiDownTrap=snL4EnableGslbRemoteSiDownTrap, snL4VirtualServerStatusTransmitPkts=snL4VirtualServerStatusTransmitPkts, snL4BindRealServerName=snL4BindRealServerName, snL4History=snL4History, snL4WebClientPortName=snL4WebClientPortName, snL4RealServerPortHistoryEntry=snL4RealServerPortHistoryEntry, snL4NoPortMap=snL4NoPortMap, snL4VirtualServerHistoryCurConnections=snL4VirtualServerHistoryCurConnections, snL4VirtualServerPortHistoryControlIndex=snL4VirtualServerPortHistoryControlIndex, snL4RealServerCfg=snL4RealServerCfg, snL4VirtualServerPortHistoryReceivePkts=snL4VirtualServerPortHistoryReceivePkts, snL4WebCache=snL4WebCache, snL4RealServerHistoryTable=snL4RealServerHistoryTable, snL4VirtualServerPortHistoryControlInterval=snL4VirtualServerPortHistoryControlInterval, snL4VirtualServerTable=snL4VirtualServerTable, snL4Active=snL4Active, snL4VirtualServerPortCfgSticky=snL4VirtualServerPortCfgSticky, snL4RealServerStatisticCurConnections=snL4RealServerStatisticCurConnections, snL4RealServerStatisticFailTime=snL4RealServerStatisticFailTime, snL4RealServerPortStatisticFailTime=snL4RealServerPortStatisticFailTime, snL4VirtualServerPortConcurrent=snL4VirtualServerPortConcurrent, snL4VirtualServerStatisticSymmetricKeep=snL4VirtualServerStatisticSymmetricKeep, snL4RealServerStatusReassignmentLimit=snL4RealServerStatusReassignmentLimit, snL4VirtualServerStatusTotalConnections=snL4VirtualServerStatusTotalConnections, snL4WebCacheStateful=snL4WebCacheStateful, snL4Gen=snL4Gen, snL4VirtualServerHistoryControlBucketsRequested=snL4VirtualServerHistoryControlBucketsRequested, snL4slbReverseTraffic=snL4slbReverseTraffic, snL4WebCacheTrafficStats=snL4WebCacheTrafficStats, snL4RealServerCfgMaxConnections=snL4RealServerCfgMaxConnections, snL4RealServerStatisticTransmitPkts=snL4RealServerStatisticTransmitPkts, snL4VirtualServerPortStatusCurrentConnection=snL4VirtualServerPortStatusCurrentConnection, snL4WebCacheGroupName=snL4WebCacheGroupName, snL4GslbSiteRemoteServerIrons=snL4GslbSiteRemoteServerIrons, snL4RealServerPortStatusReassignCount=snL4RealServerPortStatusReassignCount, snL4RealServerPortStatus=snL4RealServerPortStatus, snL4RealServerHistoryCurConnections=snL4RealServerHistoryCurConnections, snL4VirtualServerHistoryControlTable=snL4VirtualServerHistoryControlTable, snL4WebCacheTrafficStatsTable=snL4WebCacheTrafficStatsTable, snL4WebCacheGroupTable=snL4WebCacheGroupTable, snL4VirtualServerHistoryControlInterval=snL4VirtualServerHistoryControlInterval, snL4PolicyEntry=snL4PolicyEntry, snL4VirtualServerStatisticSymmetricInactives=snL4VirtualServerStatisticSymmetricInactives, snL4VirtualServerHistoryControlStatus=snL4VirtualServerHistoryControlStatus, snL4RealServerPortRowStatus=snL4RealServerPortRowStatus, snL4RealServerPortStatusTxPkts=snL4RealServerPortStatusTxPkts, snL4PolicyId=snL4PolicyId, snL4WebClientPort=snL4WebClientPort, snL4EnableBecomeActiveTrap=snL4EnableBecomeActiveTrap, snL4RealServerPortTable=snL4RealServerPortTable, snL4WebUncachedRxPkts=snL4WebUncachedRxPkts, snL4RealServerPortHistoryControlOwner=snL4RealServerPortHistoryControlOwner, snL4RealServerCfgDeleteState=snL4RealServerCfgDeleteState, snL4WebCacheName=snL4WebCacheName, snL4BindTable=snL4BindTable, L4RowSts=L4RowSts, snL4VirtualServerPortStatusTotalConnection=snL4VirtualServerPortStatusTotalConnection, snL4VirtualServerPortIndex=snL4VirtualServerPortIndex, snL4VirtualServerPortCfgRowStatus=snL4VirtualServerPortCfgRowStatus, snL4VirtualServerPortHistoryControlDataSource=snL4VirtualServerPortHistoryControlDataSource, snL4WebCacheGroup=snL4WebCacheGroup, snL4RealServerPortStatisticIP=snL4RealServerPortStatisticIP, snL4VirtualServerPortCfgAdminStatus=snL4VirtualServerPortCfgAdminStatus, L4DeleteState=L4DeleteState, snL4WebCachePortAdminStatus=snL4WebCachePortAdminStatus, snL4RealServerHistoryReassignments=snL4RealServerHistoryReassignments, snL4MaxNumWebCachePerGroup=snL4MaxNumWebCachePerGroup, snL4RealServerPortStatisticTable=snL4RealServerPortStatisticTable, snL4VirtualServerHistoryControlBucketsGranted=snL4VirtualServerHistoryControlBucketsGranted, snL4VirtualServerPortStatusPort=snL4VirtualServerPortStatusPort, snL4VirtualServerPortHistoryControlOwner=snL4VirtualServerPortHistoryControlOwner, snL4RealServerHistoryEntry=snL4RealServerHistoryEntry, snL4VirtualServerStatusTable=snL4VirtualServerStatusTable, snL4RealServerPortCfgRowStatus=snL4RealServerPortCfgRowStatus, snL4BindRowStatus=snL4BindRowStatus, snL4WebCacheEntry=snL4WebCacheEntry, snL4VirtualServerPortCfgTable=snL4VirtualServerPortCfgTable, snL4WebCachePortPort=snL4WebCachePortPort, snL4WebCacheTable=snL4WebCacheTable, snL4slbDangling=snL4slbDangling, snL4VirtualServerPortCfgServerName=snL4VirtualServerPortCfgServerName, snL4VirtualServerPortHistoryCurConnections=snL4VirtualServerPortHistoryCurConnections, snL4RealServerIndex=snL4RealServerIndex, snL4EnableRealServerUpTrap=snL4EnableRealServerUpTrap, snL4RealServerPortHistorySampleIndex=snL4RealServerPortHistorySampleIndex, snL4VirtualServerPortHistoryEntry=snL4VirtualServerPortHistoryEntry, L4Status=L4Status, snL4RealServerHistoryIndex=snL4RealServerHistoryIndex, snL4GslbSiteRemoteServerIronIP=snL4GslbSiteRemoteServerIronIP, snL4RealServerPortStatusServerName=snL4RealServerPortStatusServerName, snL4slbDrops=snL4slbDrops, snL4RealServerStatisticTotalConnections=snL4RealServerStatisticTotalConnections, snL4RealServerStatisticReceivePkts=snL4RealServerStatisticReceivePkts, snL4slbLimitExceeds=snL4slbLimitExceeds, snL4RealServerStatusPeakConnections=snL4RealServerStatusPeakConnections, snL4VirtualServerPortStatusTable=snL4VirtualServerPortStatusTable, snL4EnableBecomeStandbyTrap=snL4EnableBecomeStandbyTrap, snL4VirtualServerPortStatusEntry=snL4VirtualServerPortStatusEntry, snL4WebCacheCurrConnections=snL4WebCacheCurrConnections, snL4GslbSiteRemoteServerIronEntry=snL4GslbSiteRemoteServerIronEntry, snL4RealServerPortCfg=snL4RealServerPortCfg, snL4RealServerPortIndex=snL4RealServerPortIndex, snL4slbForwardTraffic=snL4slbForwardTraffic, snL4PolicyScope=snL4PolicyScope, snL4RealServerPortHistoryTotalConnections=snL4RealServerPortHistoryTotalConnections, snL4EnableRealServerDownTrap=snL4EnableRealServerDownTrap, snL4RealServerStatusIndex=snL4RealServerStatusIndex, snL4WebUncachedTrafficStatsEntry=snL4WebUncachedTrafficStatsEntry, snL4RealServerCfgWeight=snL4RealServerCfgWeight, snL4WebServerPort=snL4WebServerPort, snL4RealServerPortHistoryControlTable=snL4RealServerPortHistoryControlTable, snL4VirtualServerCfgRowStatus=snL4VirtualServerCfgRowStatus, snL4RealServerStatusFailedPortExists=snL4RealServerStatusFailedPortExists, snL4RealServerHistorySampleIndex=snL4RealServerHistorySampleIndex, snL4VirtualServerPortAdminStatus=snL4VirtualServerPortAdminStatus, snL4RealServerHistoryControlBucketsRequested=snL4RealServerHistoryControlBucketsRequested, snL4WebCacheGroupId=snL4WebCacheGroupId, snL4VirtualServerStatisticTransmitPkts=snL4VirtualServerStatisticTransmitPkts, snL4RealServerPortStatisticPeakConnection=snL4RealServerPortStatisticPeakConnection, snL4VirtualServerPortHistoryPeakConnections=snL4VirtualServerPortHistoryPeakConnections, snL4RealServerStatistic=snL4RealServerStatistic, snL4RealServerHistoryReceivePkts=snL4RealServerHistoryReceivePkts, snL4RealServerPortHistoryIndex=snL4RealServerPortHistoryIndex, snL4RealServerPortDeleteState=snL4RealServerPortDeleteState, snL4RealServerCfgAdminStatus=snL4RealServerCfgAdminStatus, snL4RealServer=snL4RealServer, snL4VirtualServerPortSticky=snL4VirtualServerPortSticky, snL4Bind=snL4Bind, snL4RealServerPortStatisticCurrentConnection=snL4RealServerPortStatisticCurrentConnection, snL4TrapRealServerIP=snL4TrapRealServerIP, snL4NoPDUCount=snL4NoPDUCount, snL4EnableGslbHealthCheckIpPortUpTrap=snL4EnableGslbHealthCheckIpPortUpTrap, snL4VirtualServerHistoryControlIndex=snL4VirtualServerHistoryControlIndex, snL4BackupMacAddr=snL4BackupMacAddr, snL4RealServerPortCfgIP=snL4RealServerPortCfgIP, snL4RealServerPortStatusTable=snL4RealServerPortStatusTable, snL4FreeSessionCount=snL4FreeSessionCount, snL4RealServerPortStatusIndex=snL4RealServerPortStatusIndex, snL4VirtualServerCfgAdminStatus=snL4VirtualServerCfgAdminStatus, snL4RealServerName=snL4RealServerName, snL4VirtualServerHistoryTotalConnections=snL4VirtualServerHistoryTotalConnections, snL4RealServerStatus=snL4RealServerStatus, snL4RealServerPortCfgAdminStatus=snL4RealServerPortCfgAdminStatus, snL4VirtualServerPortCfgPort=snL4VirtualServerPortCfgPort, snL4PolicyRowStatus=snL4PolicyRowStatus, snL4VirtualServerPortPort=snL4VirtualServerPortPort, snL4VirtualServerHistoryTransmitPkts=snL4VirtualServerHistoryTransmitPkts, snL4BindIndex=snL4BindIndex, snL4EnableGslbRemoteSiUpTrap=snL4EnableGslbRemoteSiUpTrap, snL4VirtualServerPortRowStatus=snL4VirtualServerPortRowStatus, snL4VirtualServerPortStatisticTotalConnection=snL4VirtualServerPortStatisticTotalConnection, snL4PolicyPriority=snL4PolicyPriority, snL4WebCacheIP=snL4WebCacheIP, snL4VirtualServerHistoryIndex=snL4VirtualServerHistoryIndex, snL4RealServerTable=snL4RealServerTable, snL4PolicyProtocol=snL4PolicyProtocol, snL4VirtualServerStatisticSymmetricBestStandbyMacAddr=snL4VirtualServerStatisticSymmetricBestStandbyMacAddr, snL4slbGlobalSDAType=snL4slbGlobalSDAType, snL4RealServerStatusFailTime=snL4RealServerStatusFailTime, snL4VirtualServerStatisticTransmitBytes=snL4VirtualServerStatisticTransmitBytes, snL4VirtualServerPortHistoryControlBucketsGranted=snL4VirtualServerPortHistoryControlBucketsGranted, snL4RealServerHistoryControlStatus=snL4RealServerHistoryControlStatus, snL4VirtualServerPortHistoryIntervalStart=snL4VirtualServerPortHistoryIntervalStart, snL4slbRouterInterfacePortList=snL4slbRouterInterfacePortList, snL4RealServerCfgName=snL4RealServerCfgName, snL4RealServerPortStatisticTotalConnection=snL4RealServerPortStatisticTotalConnection, snL4BackupState=snL4BackupState, snL4RealServerPortStatusTotalConnection=snL4RealServerPortStatusTotalConnection, snL4WebCacheTrafficStatsEntry=snL4WebCacheTrafficStatsEntry, snL4VirtualServerCfgVirtualIP=snL4VirtualServerCfgVirtualIP, snL4UdpAge=snL4UdpAge, snL4VirtualServerStatisticReceiveBytes=snL4VirtualServerStatisticReceiveBytes, snL4WebCacheWeight=snL4WebCacheWeight, snL4WebCacheTxPkts=snL4WebCacheTxPkts, snL4RealServerPortStatisticRxBytes=snL4RealServerPortStatisticRxBytes, snL4RealServerMaxConnections=snL4RealServerMaxConnections, snL4EnableGslbHealthCheckIpDownTrap=snL4EnableGslbHealthCheckIpDownTrap, snL4VirtualServerPortStatisticCurrentConnection=snL4VirtualServerPortStatisticCurrentConnection, snL4VirtualServerPortStatusPeakConnection=snL4VirtualServerPortStatusPeakConnection, snL4WebCachePort=snL4WebCachePort, snL4BindVirtualServerName=snL4BindVirtualServerName, snL4RealServerStatusState=snL4RealServerStatusState, snL4RealServerPortStatisticPort=snL4RealServerPortStatisticPort, snL4WebUncachedTrafficStatsTable=snL4WebUncachedTrafficStatsTable, snL4BecomeStandBy=snL4BecomeStandBy, snL4VirtualServerStatistic=snL4VirtualServerStatistic, snL4VirtualServerStatisticSymmetricActiveMacAddr=snL4VirtualServerStatisticSymmetricActiveMacAddr, snL4RealServerPortStatisticReassignCount=snL4RealServerPortStatisticReassignCount, snL4RealServerPortStatusRxBytes=snL4RealServerPortStatusRxBytes, snL4TcpSynLimit=snL4TcpSynLimit, snL4WebCacheGroupDestMask=snL4WebCacheGroupDestMask, snL4VirtualServerCfg=snL4VirtualServerCfg, snL4RealServerPortStatisticTxBytes=snL4RealServerPortStatisticTxBytes)
mibBuilder.exportSymbols("HP-SN-SW-L4-SWITCH-GROUP-MIB", snL4VirtualServerPortCfgIP=snL4VirtualServerPortCfgIP, snL4WebCacheRxOctets=snL4WebCacheRxOctets, snL4WebCacheGroupRowStatus=snL4WebCacheGroupRowStatus, snL4VirtualServerStatusName=snL4VirtualServerStatusName, snL4RealServerPortStatisticRxPkts=snL4RealServerPortStatisticRxPkts, snL4Redundancy=snL4Redundancy, snL4RealServerPortStatusPort=snL4RealServerPortStatusPort, snL4RealServerStatusCurConnections=snL4RealServerStatusCurConnections, snL4RealServerPortCfgDeleteState=snL4RealServerPortCfgDeleteState, snL4RealServerPortHistoryTransmitPkts=snL4RealServerPortHistoryTransmitPkts, DisplayString=DisplayString, snL4VirtualServerPortHistoryTotalConnections=snL4VirtualServerPortHistoryTotalConnections, snL4RealServerPortPort=snL4RealServerPortPort, snL4RealServerIP=snL4RealServerIP, snL4RealServerStatusRealIP=snL4RealServerStatusRealIP, snL4VirtualServerPortCfgConcurrent=snL4VirtualServerPortCfgConcurrent, snL4RealServerPortStatisticState=snL4RealServerPortStatisticState, snL4WebCachePortDeleteState=snL4WebCachePortDeleteState, snL4RealServerHistoryControlTable=snL4RealServerHistoryControlTable, snL4VirtualServerStatisticTable=snL4VirtualServerStatisticTable, snL4VirtualServerSDAType=snL4VirtualServerSDAType, snL4WebServerPortName=snL4WebServerPortName, snL4VirtualServerPortDeleteState=snL4VirtualServerPortDeleteState, snL4RealServerPortStatisticEntry=snL4RealServerPortStatisticEntry, snL4VirtualServerPortStatisticEntry=snL4VirtualServerPortStatisticEntry, snL4VirtualServerPortEntry=snL4VirtualServerPortEntry, snL4VirtualServerPortHistoryControlStatus=snL4VirtualServerPortHistoryControlStatus, snL4VirtualServerStatisticTotalConnections=snL4VirtualServerStatisticTotalConnections, snL4RealServerHistoryControlEntry=snL4RealServerHistoryControlEntry, snL4PolicyPortAccess=snL4PolicyPortAccess, snL4EnableRealServerMaxConnLimitReachedTrap=snL4EnableRealServerMaxConnLimitReachedTrap, snL4Trap=snL4Trap, snL4RealServerStatusName=snL4RealServerStatusName, snL4RealServerHistoryControlDataSource=snL4RealServerHistoryControlDataSource, snL4RealServerStatusTransmitPkts=snL4RealServerStatusTransmitPkts, snL4RealServerPortAdminStatus=snL4RealServerPortAdminStatus, snL4EnableGslbHealthCheckIpPortDownTrap=snL4EnableGslbHealthCheckIpPortDownTrap, snL4RealServerPortHistoryControlDataSource=snL4RealServerPortHistoryControlDataSource, snL4VirtualServerCfgDeleteState=snL4VirtualServerCfgDeleteState, snL4PolicyPortAccessTable=snL4PolicyPortAccessTable, snL4RealServerStatisticReassignmentLimit=snL4RealServerStatisticReassignmentLimit, snL4VirtualServerStatisticSymmetricState=snL4VirtualServerStatisticSymmetricState, snL4VirtualServerPortStatus=snL4VirtualServerPortStatus, snL4RealServerHistoryControlInterval=snL4RealServerHistoryControlInterval, snL4EnableMaxSessionLimitReachedTrap=snL4EnableMaxSessionLimitReachedTrap, snL4VirtualServerHistoryEntry=snL4VirtualServerHistoryEntry, snL4BindVirtualPortNumber=snL4BindVirtualPortNumber, snL4VirtualServerHistorySampleIndex=snL4VirtualServerHistorySampleIndex, snL4WebCacheTxOctets=snL4WebCacheTxOctets, snL4RealServerPortStatisticTxPkts=snL4RealServerPortStatisticTxPkts, snL4WebUncachedTxPkts=snL4WebUncachedTxPkts, snL4EnableGslbHealthCheckIpUpTrap=snL4EnableGslbHealthCheckIpUpTrap, snL4WebCachePortState=snL4WebCachePortState, snL4VirtualServerStatisticSymmetricPriority=snL4VirtualServerStatisticSymmetricPriority, snL4WebUncachedTxOctets=snL4WebUncachedTxOctets, snL4slbFinished=snL4slbFinished, snL4VirtualServerStatusIndex=snL4VirtualServerStatusIndex, L4Flag=L4Flag, snL4WebCacheGroupWebCacheIpList=snL4WebCacheGroupWebCacheIpList, snL4RealServerPortStatusState=snL4RealServerPortStatusState, snL4WebCacheTrafficIp=snL4WebCacheTrafficIp, snL4VirtualServerPortHistoryIndex=snL4VirtualServerPortHistoryIndex, snL4RealServerPortHistoryPeakConnections=snL4RealServerPortHistoryPeakConnections, snL4WebCachePortServerIp=snL4WebCachePortServerIp, snL4BecomeActive=snL4BecomeActive, snL4VirtualServerHistoryPeakConnections=snL4VirtualServerHistoryPeakConnections, snL4RealServerPortHistoryControlIndex=snL4RealServerPortHistoryControlIndex, snL4VirtualServerStatisticSymmetricActivates=snL4VirtualServerStatisticSymmetricActivates, snL4RealServerHistoryPeakConnections=snL4RealServerHistoryPeakConnections, snL4VirtualServerStatisticIP=snL4VirtualServerStatisticIP, snL4RealServerPortHistoryControlStatus=snL4RealServerPortHistoryControlStatus, snL4Policy=snL4Policy, snL4RealServerDeleteState=snL4RealServerDeleteState, snL4VirtualServerPortStatisticTable=snL4VirtualServerPortStatisticTable, snL4VirtualServerRowStatus=snL4VirtualServerRowStatus, snL4unsuccessfulConn=snL4unsuccessfulConn, snL4WebCachePortEntry=snL4WebCachePortEntry, snL4RealServerPortStatisticServerName=snL4RealServerPortStatisticServerName, snL4VirtualServerHistoryIntervalStart=snL4VirtualServerHistoryIntervalStart, snL4NoPDUSent=snL4NoPDUSent, snL4VirtualServerStatisticEntry=snL4VirtualServerStatisticEntry, snL4RealServerHistoryIntervalStart=snL4RealServerHistoryIntervalStart, snL4RealServerPortHistoryTable=snL4RealServerPortHistoryTable, snL4EnableTcpSynLimitReachedTrap=snL4EnableTcpSynLimitReachedTrap, snL4VirtualServerPortStatisticIP=snL4VirtualServerPortStatisticIP, snL4VirtualServerHistoryControlEntry=snL4VirtualServerHistoryControlEntry, snL4RealServerPortStatusCurrentConnection=snL4RealServerPortStatusCurrentConnection, snL4VirtualServerHistoryControlDataSource=snL4VirtualServerHistoryControlDataSource, snL4RealServerPortHistoryControlBucketsGranted=snL4RealServerPortHistoryControlBucketsGranted, snL4VirtualServerAdminStatus=snL4VirtualServerAdminStatus, snL4WebCacheDeleteState=snL4WebCacheDeleteState, snL4RealServerCfgEntry=snL4RealServerCfgEntry, snL4RealServerPortHistoryControlEntry=snL4RealServerPortHistoryControlEntry, snL4PolicyPort=snL4PolicyPort, snL4RealServerPortHistoryControlInterval=snL4RealServerPortHistoryControlInterval, snL4RealServerStatusReceivePkts=snL4RealServerStatusReceivePkts, snL4WebCacheRowStatus=snL4WebCacheRowStatus, snL4RealServerHistoryTransmitPkts=snL4RealServerHistoryTransmitPkts, snL4RealServerStatusEntry=snL4RealServerStatusEntry, snL4PolicyPortAccessList=snL4PolicyPortAccessList, snL4RealServerStatisticFailedPortExists=snL4RealServerStatisticFailedPortExists, snL4VirtualServerHistoryTable=snL4VirtualServerHistoryTable, snL4RealServerCfgRowStatus=snL4RealServerCfgRowStatus, snL4RealServerStatisticName=snL4RealServerStatisticName, snL4RealServerPortHistoryResponseTime=snL4RealServerPortHistoryResponseTime, snL4WebCachePortRowStatus=snL4WebCachePortRowStatus, snL4EnableRealServerPortUpTrap=snL4EnableRealServerPortUpTrap, snL4VirtualServerIndex=snL4VirtualServerIndex, snL4RealServerStatusTotalConnections=snL4RealServerStatusTotalConnections, snL4VirtualServerPortStatistic=snL4VirtualServerPortStatistic, snL4TrapRealServerName=snL4TrapRealServerName, snL4TcpAge=snL4TcpAge, snL4VirtualServer=snL4VirtualServer, snL4PolicyPortAccessEntry=snL4PolicyPortAccessEntry, snL4WebCacheGroupAdminStatus=snL4WebCacheGroupAdminStatus, snL4VirtualServerStatisticName=snL4VirtualServerStatisticName, snL4RealServerStatusTable=snL4RealServerStatusTable, snL4RealServerPortHistoryControlBucketsRequested=snL4RealServerPortHistoryControlBucketsRequested, snL4VirtualServerPortCfgEntry=snL4VirtualServerPortCfgEntry, snL4VirtualServerStatusReceivePkts=snL4VirtualServerStatusReceivePkts, snL4slbTotalConnections=snL4slbTotalConnections, snL4RealServerEntry=snL4RealServerEntry, snL4VirtualServerPortStatisticServerName=snL4VirtualServerPortStatisticServerName, snL4PolicyPortAccessPort=snL4PolicyPortAccessPort, snL4RealServerPort=snL4RealServerPort, snL4BackupInterface=snL4BackupInterface, snL4slbRouterInterfacePortMask=snL4slbRouterInterfacePortMask, snL4VirtualServerPortStatisticPeakConnection=snL4VirtualServerPortStatisticPeakConnection, snL4PolicyPortAccessRowStatus=snL4PolicyPortAccessRowStatus, snL4WebCacheAdminStatus=snL4WebCacheAdminStatus, snL4VirtualServerCfgSDAType=snL4VirtualServerCfgSDAType, snL4VirtualServerName=snL4VirtualServerName, snL4VirtualServerStatisticReceivePkts=snL4VirtualServerStatisticReceivePkts, snL4GslbSiteRemoteServerIronPreference=snL4GslbSiteRemoteServerIronPreference, snL4VirtualServerPortStatusServerName=snL4VirtualServerPortStatusServerName, snL4EnableGslbRemoteGslbSiDownTrap=snL4EnableGslbRemoteGslbSiDownTrap, snL4RealServerCfgTable=snL4RealServerCfgTable, snL4RealServerAdminStatus=snL4RealServerAdminStatus, snL4slbAged=snL4slbAged, snL4VirtualServerPortHistorySampleIndex=snL4VirtualServerPortHistorySampleIndex, snL4VirtualServerEntry=snL4VirtualServerEntry, snL4slbDisableCount=snL4slbDisableCount, snL4Backup=snL4Backup, snL4VirtualServerDeleteState=snL4VirtualServerDeleteState, snL4RealServerPortStatusEntry=snL4RealServerPortStatusEntry, snL4VirtualServerPort=snL4VirtualServerPort, snL4VirtualServerCfgEntry=snL4VirtualServerCfgEntry, snL4RealServerStatisticAge=snL4RealServerStatisticAge, snL4WebCacheGroupEntry=snL4WebCacheGroupEntry, PhysAddress=PhysAddress, L4ServerName=L4ServerName, snL4VirtualServerVirtualIP=snL4VirtualServerVirtualIP, snL4RealServerStatisticEntry=snL4RealServerStatisticEntry, snL4WebCachePortTable=snL4WebCachePortTable, snL4RealServerPortServerName=snL4RealServerPortServerName, snL4RealServerPortStatusRxPkts=snL4RealServerPortStatusRxPkts, snL4RealServerStatusReassignments=snL4RealServerStatusReassignments, snL4RealServerHistoryTotalConnections=snL4RealServerHistoryTotalConnections)
