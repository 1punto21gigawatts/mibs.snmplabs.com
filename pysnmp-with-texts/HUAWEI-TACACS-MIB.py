#
# PySNMP MIB module HUAWEI-TACACS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-TACACS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
huaweiDatacomm, huawei, huaweiMgmt = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huaweiDatacomm", "huawei", "huaweiMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, NotificationType, ModuleIdentity, ObjectIdentity, MibIdentifier, Unsigned32, Gauge32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "NotificationType", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Gauge32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "NotificationType", "Counter32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hwTACACS = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20))
hwTACACSServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1))
hwTACACSServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1), )
if mibBuilder.loadTexts: hwTACACSServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupTable.setDescription('Group table')
hwTACACSServerGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1), ).setIndexNames((0, "HUAWEI-TACACS-MIB", "hwTACACSServerGroupName"))
if mibBuilder.loadTexts: hwTACACSServerGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupTableEntry.setDescription('Group table entry')
hwTACACSServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupName.setDescription('Hwtacac server template name')
hwTACACSServerGroupSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerGroupSourceIP.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupSourceIP.setDescription('Specify hwtacacs source-ip')
hwTACACSServerGroupKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerGroupKey.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupKey.setDescription('Specify group encryption shared-key')
hwTACACSServerGroupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerGroupTimer.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupTimer.setDescription('Set time interval before retry the down-server')
hwTACACSServerGroupDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerGroupDomain.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupDomain.setDescription('Domain switch:1,open;2,close')
hwTACACSServerGroupPriAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupPriAuthen.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupPriAuthen.setDescription('Primary authen server')
hwTACACSServerGroupPriAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupPriAuthor.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupPriAuthor.setDescription('Primary author server')
hwTACACSServerGroupPriAccout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupPriAccout.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupPriAccout.setDescription('Primary accounting server')
hwTACACSServerGroupCurAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupCurAuthen.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupCurAuthen.setDescription('Current authen server')
hwTACACSServerGroupCurAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupCurAuthor.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupCurAuthor.setDescription('Current author server')
hwTACACSServerGroupCurAccout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerGroupCurAccout.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupCurAccout.setDescription('Current account server')
hwTACACSServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerGroupRowStatus.setDescription('RowStatus')
hwTACACSServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2), )
if mibBuilder.loadTexts: hwTACACSServerTable.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerTable.setDescription('Server table')
hwTACACSServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1), ).setIndexNames((0, "HUAWEI-TACACS-MIB", "hwTACACSGroupName"), (0, "HUAWEI-TACACS-MIB", "hwTACACSServerAddr"))
if mibBuilder.loadTexts: hwTACACSServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerTableEntry.setDescription('Server table entry')
hwTACACSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTACACSGroupName.setDescription('Hwtacac server template name')
hwTACACSServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSServerAddr.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerAddr.setDescription('Specify server ip address')
hwTACACSServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(49)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerPort.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerPort.setDescription('Specify server port')
hwTACACSTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSTimeout.setStatus('current')
if mibBuilder.loadTexts: hwTACACSTimeout.setDescription('Specify server response timeout')
hwTACACSServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerKey.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerKey.setDescription('Specify server encryption shared-key')
hwTACACSServerPriAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerPriAuthen.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerPriAuthen.setDescription('Primary authen server:1:no,2:yes')
hwTACACSServerPriAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerPriAuthor.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerPriAuthor.setDescription('Primary author server:1:no,2:yes')
hwTACACSServerPriAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerPriAcct.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerPriAcct.setDescription('Primary account server:1:no,2:yes')
hwTACACSAuthenClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientRoundTripTime.setDescription('Round trip time about authen server')
hwTACACSAuthenClientAccessReqPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqPacket.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqPacket.setDescription('Request packets about authen server')
hwTACACSAuthenClientAccessReqLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqLogin.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqLogin.setDescription('Request login packets about authen server')
hwTACACSAuthenClientAccessReqChaPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqChaPass.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqChaPass.setDescription('Request change password packets about authen server')
hwTACACSAuthenClientAccessReqSendPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqSendPass.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqSendPass.setDescription('Request send password packets about authen server')
hwTACACSAuthenClientAccessReqSendAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqSendAuth.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessReqSendAuth.setDescription('Request send authen packets about authen server')
hwTACACSAuthenClientAccessResPack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResPack.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResPack.setDescription('Response packets about authen server')
hwTACACSAuthenClientAccessResPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResPass.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResPass.setDescription('Response pass packets about authen server')
hwTACACSAuthenClientAccessResFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResFail.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResFail.setDescription('Response fail packets about authen server')
hwTACACSAuthenClientAccessResGetData = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResGetData.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResGetData.setDescription('Get data packets about authen server')
hwTACACSAuthenClientAccessResGetUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResGetUser.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResGetUser.setDescription('Get user packets about authen server')
hwTACACSAuthenClientAccessResGetPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResGetPass.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResGetPass.setDescription('Get password packets about authen server')
hwTACACSAuthenClientAccessResRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResRestart.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResRestart.setDescription('Restart packets about authen server')
hwTACACSAuthenClientAccessResError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResError.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResError.setDescription('Response error packets about authen server')
hwTACACSAuthenClientAccessResFollow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResFollow.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessResFollow.setDescription('Follow packets about authen server')
hwTACACSAuthenClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientMalformedAccessResponses.setDescription('Response packets about authen server')
hwTACACSAuthenClientAccessConPack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessConPack.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessConPack.setDescription('Connection packets about authen server')
hwTACACSAuthenClientAccessConAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessConAbort.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientAccessConAbort.setDescription('Connection abort packets about authen server')
hwTACACSAuthenClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientPendingRequests.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientPendingRequests.setDescription('Request pending packets about authen server')
hwTACACSAuthenClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientTimeouts.setDescription('Time out packets about authen server')
hwTACACSAuthenClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientUnknownTypes.setDescription('Unknown type packets about authen server')
hwTACACSAuthenClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthenClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthenClientPacketsDropped.setDescription('Drop packets about authen server')
hwTACACSAuthorClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientRoundTripTime.setDescription('Round trip time about author server')
hwTACACSAuthorClientReqPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqPacket.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqPacket.setDescription('Request packets about author server')
hwTACACSAuthorClientReqEXEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqEXEC.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqEXEC.setDescription('Request exec packets about author server')
hwTACACSAuthorClientReqLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqLCP.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqLCP.setDescription('Request lcp packets about author server')
hwTACACSAuthorClientReqIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqIPCP.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqIPCP.setDescription('Request ipcp packets about author server')
hwTACACSAuthorClientReqVPDN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqVPDN.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqVPDN.setDescription('Request vpdn packets about author server')
hwTACACSAuthorClientReqCommandLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqCommandLevel.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqCommandLevel.setDescription('Request command level packets about author server')
hwTACACSAuthorClientResPack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResPack.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResPack.setDescription('Response packets about author server')
hwTACACSAuthorClientResEXEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResEXEC.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResEXEC.setDescription('Response exec packet about author server')
hwTACACSAuthorClientResLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResLCP.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResLCP.setDescription('Response lcp packets about author server')
hwTACACSAuthorClientResIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResIPCP.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResIPCP.setDescription('Response ipcp packets about author server')
hwTACACSAuthorClientResVPDN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResVPDN.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResVPDN.setDescription('Response vpdn packets about author server')
hwTACACSAuthorClientResCommandLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResCommandLevel.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResCommandLevel.setDescription('Response command level packets about author server')
hwTACACSAuthorClientResError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientResError.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientResError.setDescription('Response error packets about author server')
hwTACACSAuthorClientReqPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientReqPending.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientReqPending.setDescription('Request pending packets about author server')
hwTACACSAuthorClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientTimeouts.setDescription('Time out packets about author server')
hwTACACSAuthorClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientUnknownTypes.setDescription('Unknown type packets about author server')
hwTACACSAuthorClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAuthorClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAuthorClientPacketsDropped.setDescription('Drop packets about author server')
hwTACACSAccClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientRoundTripTime.setDescription('Round trip time about accounting server')
hwTACACSAccClientReqPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqPacket.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqPacket.setDescription('Request packets about accounting server')
hwTACACSAccClientReqNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqNetwork.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqNetwork.setDescription('Request network packets about accounting server')
hwTACACSAccClientReqConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqConnection.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqConnection.setDescription('Request connection packets about accounting server')
hwTACACSAccClientReqEXEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqEXEC.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqEXEC.setDescription('Request exec packets about accounting server')
hwTACACSAccClientReqSysEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqSysEvent.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqSysEvent.setDescription('Request system event packets about accounting server')
hwTACACSAccClientReqCommandLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqCommandLevel.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqCommandLevel.setDescription('Request command level packets about accounting server')
hwTACACSAccClientReqUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqUpdate.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqUpdate.setDescription('Request update packets about accounting server')
hwTACACSAccClientResPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientResPacket.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientResPacket.setDescription('Response packets about accounting server')
hwTACACSAccClientResError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientResError.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientResError.setDescription('Response error packets about accounting server')
hwTACACSAccClientReqPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientReqPending.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientReqPending.setDescription('Request pending packets about accounting server')
hwTACACSAccClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientTimeouts.setDescription('Time out packets about accounting server')
hwTACACSAccClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientUnknownTypes.setDescription('Unknown types packets about accounting server')
hwTACACSAccClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTACACSAccClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: hwTACACSAccClientPacketsDropped.setDescription('Drop packets about accounting server')
hwTACACSServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 20, 1, 2, 1, 63), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTACACSServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTACACSServerRowStatus.setDescription('RowStatus')
mibBuilder.exportSymbols("HUAWEI-TACACS-MIB", hwTACACSServerPriAuthen=hwTACACSServerPriAuthen, hwTACACSAuthenClientAccessResGetPass=hwTACACSAuthenClientAccessResGetPass, hwTACACSAuthenClientAccessResPack=hwTACACSAuthenClientAccessResPack, hwTACACSServerPriAcct=hwTACACSServerPriAcct, hwTACACSAccClientReqSysEvent=hwTACACSAccClientReqSysEvent, hwTACACSAuthenClientAccessReqLogin=hwTACACSAuthenClientAccessReqLogin, hwTACACSAuthorClientResLCP=hwTACACSAuthorClientResLCP, hwTACACSServerGroupRowStatus=hwTACACSServerGroupRowStatus, hwTACACSServerGroupKey=hwTACACSServerGroupKey, hwTACACSAuthorClientResCommandLevel=hwTACACSAuthorClientResCommandLevel, hwTACACSServerGroupTableEntry=hwTACACSServerGroupTableEntry, hwTACACSServerPriAuthor=hwTACACSServerPriAuthor, hwTACACS=hwTACACS, hwTACACSServerKey=hwTACACSServerKey, hwTACACSAuthorClientRoundTripTime=hwTACACSAuthorClientRoundTripTime, hwTACACSServerGroupCurAccout=hwTACACSServerGroupCurAccout, hwTACACSAuthenClientAccessReqSendAuth=hwTACACSAuthenClientAccessReqSendAuth, hwTACACSAuthenClientAccessReqPacket=hwTACACSAuthenClientAccessReqPacket, hwTACACSServerGroupSourceIP=hwTACACSServerGroupSourceIP, hwTACACSAuthorClientReqPending=hwTACACSAuthorClientReqPending, hwTACACSAccClientReqPending=hwTACACSAccClientReqPending, hwTACACSAuthenClientAccessConAbort=hwTACACSAuthenClientAccessConAbort, hwTACACSAuthenClientPendingRequests=hwTACACSAuthenClientPendingRequests, hwTACACSAuthenClientAccessReqChaPass=hwTACACSAuthenClientAccessReqChaPass, hwTACACSAccClientPacketsDropped=hwTACACSAccClientPacketsDropped, hwTACACSServerGroupCurAuthen=hwTACACSServerGroupCurAuthen, hwTACACSAuthenClientMalformedAccessResponses=hwTACACSAuthenClientMalformedAccessResponses, hwTACACSAccClientReqCommandLevel=hwTACACSAccClientReqCommandLevel, hwTACACSAuthorClientReqCommandLevel=hwTACACSAuthorClientReqCommandLevel, hwTACACSServerTable=hwTACACSServerTable, hwTACACSAuthorClientReqEXEC=hwTACACSAuthorClientReqEXEC, hwTACACSAuthorClientResPack=hwTACACSAuthorClientResPack, hwTACACSAuthenClientPacketsDropped=hwTACACSAuthenClientPacketsDropped, hwTACACSAuthenClientAccessResGetUser=hwTACACSAuthenClientAccessResGetUser, hwTACACSAuthorClientReqPacket=hwTACACSAuthorClientReqPacket, hwTACACSAccClientReqPacket=hwTACACSAccClientReqPacket, hwTACACSAuthenClientRoundTripTime=hwTACACSAuthenClientRoundTripTime, hwTACACSAuthenClientAccessConPack=hwTACACSAuthenClientAccessConPack, hwTACACSAuthenClientAccessResError=hwTACACSAuthenClientAccessResError, hwTACACSServerAddr=hwTACACSServerAddr, hwTACACSAccClientReqUpdate=hwTACACSAccClientReqUpdate, hwTACACSAuthenClientAccessResFail=hwTACACSAuthenClientAccessResFail, hwTACACSAuthorClientReqVPDN=hwTACACSAuthorClientReqVPDN, hwTACACSGroupName=hwTACACSGroupName, hwTACACSServerGroupDomain=hwTACACSServerGroupDomain, hwTACACSServerGroupTimer=hwTACACSServerGroupTimer, hwTACACSServerRowStatus=hwTACACSServerRowStatus, hwTACACSAuthorClientReqLCP=hwTACACSAuthorClientReqLCP, hwTACACSAuthorClientReqIPCP=hwTACACSAuthorClientReqIPCP, hwTACACSAuthenClientAccessReqSendPass=hwTACACSAuthenClientAccessReqSendPass, hwTACACSAuthorClientResVPDN=hwTACACSAuthorClientResVPDN, hwTACACSServerConfig=hwTACACSServerConfig, hwTACACSAccClientResPacket=hwTACACSAccClientResPacket, hwTACACSServerGroupTable=hwTACACSServerGroupTable, hwTACACSServerTableEntry=hwTACACSServerTableEntry, hwTACACSAccClientReqConnection=hwTACACSAccClientReqConnection, hwTACACSAccClientRoundTripTime=hwTACACSAccClientRoundTripTime, hwTACACSAuthenClientAccessResFollow=hwTACACSAuthenClientAccessResFollow, hwTACACSAuthorClientUnknownTypes=hwTACACSAuthorClientUnknownTypes, hwTACACSAccClientTimeouts=hwTACACSAccClientTimeouts, hwTACACSAuthenClientAccessResRestart=hwTACACSAuthenClientAccessResRestart, hwTACACSServerGroupPriAuthen=hwTACACSServerGroupPriAuthen, hwTACACSAccClientReqEXEC=hwTACACSAccClientReqEXEC, hwTACACSAccClientReqNetwork=hwTACACSAccClientReqNetwork, hwTACACSAuthenClientAccessResGetData=hwTACACSAuthenClientAccessResGetData, hwTACACSAuthorClientPacketsDropped=hwTACACSAuthorClientPacketsDropped, hwTACACSAuthenClientUnknownTypes=hwTACACSAuthenClientUnknownTypes, hwTACACSAuthorClientTimeouts=hwTACACSAuthorClientTimeouts, hwTACACSAccClientUnknownTypes=hwTACACSAccClientUnknownTypes, hwTACACSAuthorClientResIPCP=hwTACACSAuthorClientResIPCP, hwTACACSServerGroupPriAccout=hwTACACSServerGroupPriAccout, hwTACACSAuthenClientTimeouts=hwTACACSAuthenClientTimeouts, hwTACACSTimeout=hwTACACSTimeout, hwTACACSAccClientResError=hwTACACSAccClientResError, hwTACACSAuthorClientResEXEC=hwTACACSAuthorClientResEXEC, hwTACACSAuthorClientResError=hwTACACSAuthorClientResError, hwTACACSServerGroupCurAuthor=hwTACACSServerGroupCurAuthor, hwTACACSServerGroupPriAuthor=hwTACACSServerGroupPriAuthor, hwTACACSAuthenClientAccessResPass=hwTACACSAuthenClientAccessResPass, hwTACACSServerPort=hwTACACSServerPort, hwTACACSServerGroupName=hwTACACSServerGroupName)
