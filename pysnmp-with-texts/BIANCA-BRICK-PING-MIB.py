#
# PySNMP MIB module BIANCA-BRICK-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Gauge32, Counter64, iso, MibIdentifier, ModuleIdentity, ObjectIdentity, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Gauge32", "Counter64", "iso", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "enterprises", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
biboping = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 27))
biboPingTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1), )
if mibBuilder.loadTexts: biboPingTable.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingTable.setDescription('The biboPingTable contains entries which are used to request the router to ping a target host for test purposes.')
biboPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-PING-MIB", "biboPingIndex"))
if mibBuilder.loadTexts: biboPingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingEntry.setDescription('Contains parameters for the ping and results of the operation. To create a new entry, do an SNMP SET request including a biboPingIndex value which is not in use. To delete an existing entry, do an SNMP SET request including a biboPingStatus value equal to delete (6).')
biboPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingIndex.setDescription('The unique index of the entry.')
biboPingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notinservice", 2), ("notready", 3), ("createandgo", 4), ("createandwait", 5), ("delete", 6))).clone('createandwait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingStatus.setDescription('The current status of the entry or a request to discard it (delete).')
biboPingCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPingCompleted.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingCompleted.setDescription('The completion status of the ping session.')
biboPingSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingSourceAddress.setDescription('The source ip-address for the ping session.')
biboPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingAddress.setDescription('The target ip-address for the ping session.')
biboPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingPacketCount.setDescription('The number of ping packets to send. 0 means continuous send.')
biboPingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 4096)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingPacketSize.setDescription('The size of each ping packet in bytes.')
biboPingPacketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingPacketTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingPacketTimeout.setDescription('The amount of time in milliseconds to wait for a reply before deciding the packet is lost.')
biboPingReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPingReceivedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingReceivedPackets.setDescription('The number of replies received so far.')
biboPingMinRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPingMinRoundTrip.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingMinRoundTrip.setDescription('The minimum round trip time in milliseconds for all the packets which have been replied to.')
biboPingMaxRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPingMaxRoundTrip.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingMaxRoundTrip.setDescription('The maximum round trip time in milliseconds for all the packets which have been replied to.')
biboPingAvgRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: biboPingAvgRoundTrip.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingAvgRoundTrip.setDescription('The average round trip time in milliseconds for all the packets which have been replied to.')
biboPingTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingTTL.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingTTL.setDescription('The TTL byte value for each packet (0 = IP default).')
biboPingTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 27, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: biboPingTOS.setStatus('mandatory')
if mibBuilder.loadTexts: biboPingTOS.setDescription('The TOS byte value for each packet.')
mibBuilder.exportSymbols("BIANCA-BRICK-PING-MIB", biboPingEntry=biboPingEntry, biboPingTable=biboPingTable, biboPingPacketTimeout=biboPingPacketTimeout, biboPingTOS=biboPingTOS, bintec=bintec, biboPingPacketCount=biboPingPacketCount, biboPingMinRoundTrip=biboPingMinRoundTrip, biboPingAddress=biboPingAddress, bibo=bibo, biboPingReceivedPackets=biboPingReceivedPackets, biboPingSourceAddress=biboPingSourceAddress, biboPingTTL=biboPingTTL, biboPingAvgRoundTrip=biboPingAvgRoundTrip, biboping=biboping, biboip=biboip, biboPingPacketSize=biboPingPacketSize, biboPingCompleted=biboPingCompleted, biboPingIndex=biboPingIndex, biboPingStatus=biboPingStatus, biboPingMaxRoundTrip=biboPingMaxRoundTrip)
