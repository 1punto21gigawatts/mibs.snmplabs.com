#
# PySNMP MIB module SALIX-MGMCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-MGMCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
platform1, = mibBuilder.importSymbols("SALIX-MIB", "platform1")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Unsigned32, MibIdentifier, iso, Integer32, IpAddress, ObjectIdentity, Bits, Gauge32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "MibIdentifier", "iso", "Integer32", "IpAddress", "ObjectIdentity", "Bits", "Gauge32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
salixMgmcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2))
if mibBuilder.loadTexts: salixMgmcpMIB.setLastUpdated('9906170000Z')
if mibBuilder.loadTexts: salixMgmcpMIB.setOrganization('SALIX Technologies')
if mibBuilder.loadTexts: salixMgmcpMIB.setContactInfo('904 Wind River Lane Suite 101 Gaithersburg, MD 20878 (301)-417-0017')
if mibBuilder.loadTexts: salixMgmcpMIB.setDescription('The MIB describing MGMCP sessions.')
salixMgmcpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1))
salixMgmcpMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 2))
salixMgmcpMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3))
salixMgmcpMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 2, 0))
salixMgmcpIpdcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1))
ipdcSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1), )
if mibBuilder.loadTexts: ipdcSessionTable.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionTable.setDescription('The ipdcSessionTable maps IPDC session indices to IP addresses and ports. There should be an entry in the table for each IPDC session.')
ipdcSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1, 1), ).setIndexNames((0, "SALIX-MGMCP-MIB", "ipdcSessionIndex"))
if mibBuilder.loadTexts: ipdcSessionEntry.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionEntry.setDescription('An entry in the ipdcSessionTable. The attributes describe the IPDC session')
ipdcSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ipdcSessionIndex.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionIndex.setDescription('A unique index for IPDC sessions. This number is assigned by the agent when the session is created and has no relationship to the IPDC session except for identification purposes')
ipdcSessionLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcSessionLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionLocalIpAddress.setDescription('The local (agent side) IP Address being used by the IPDC session')
ipdcSessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcSessionLocalPort.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionLocalPort.setDescription('The local (agent side) UDP port being used by the IDPC session')
ipdcSessionMediaControllerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcSessionMediaControllerIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionMediaControllerIpAddress.setDescription('The IP Address for the Media Controller using the IPDC session')
ipdcSessionMediaControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcSessionMediaControllerPort.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionMediaControllerPort.setDescription('The UDP port for the Media Controller using the IPDC session')
ipdcSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: ipdcSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsTable.setDescription('The IPDC Session Stats table maintains statistics on IPDC sessions.')
ipdcSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1), ).setIndexNames((0, "SALIX-MGMCP-MIB", "ipdcSessionIndex"))
if mibBuilder.loadTexts: ipdcSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsEntry.setDescription('An entry in the ipdcSessionStatsTable')
ipdcSessionStatsPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSessionStatsPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsPacketsRcvd.setDescription('The number of IPDC packets received for this session')
ipdcSessionStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSessionStatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsPacketsSent.setDescription('The number of IPDC packets sent for this session')
ipdcSessionStatsBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSessionStatsBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsBytesRcvd.setDescription('The number of IPDC bytes received for this session')
ipdcSessionStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSessionStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsBytesSent.setDescription('The number of IPDC bytes send for this session')
ipdcSessionStatsMessagesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSessionStatsMessagesRejected.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsMessagesRejected.setDescription('The number of IPDC messages that were rejected on this session')
ipdcSessionStatsUnacknowledgedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSessionStatsUnacknowledgedRequests.setStatus('current')
if mibBuilder.loadTexts: ipdcSessionStatsUnacknowledgedRequests.setDescription('The number of IPDC requests that were unacknowledged by the media controller')
ipdcSystemType = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSystemType.setStatus('current')
if mibBuilder.loadTexts: ipdcSystemType.setDescription('A character string used to identify the manufacturer and model of the ITX')
ipdcSystemID = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipdcSystemID.setStatus('current')
if mibBuilder.loadTexts: ipdcSystemID.setDescription('A character string used to identify the ITX being controlled by IPDC.')
ipdcBayNumber = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcBayNumber.setStatus('current')
if mibBuilder.loadTexts: ipdcBayNumber.setDescription('A character string used to identify the bay number where this ITX resides')
ipdcHeartbeatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 6))
ipdcHeartbeatFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcHeartbeatFrequency.setStatus('current')
if mibBuilder.loadTexts: ipdcHeartbeatFrequency.setDescription('The Frequency (in seconds) in which the Media Gateway should initiate an RTE-ARTE transaction by sending an RTE to the Media Controller. This object controls the Frequency for both the Primary and Secondary Media Controller connections')
ipdcHeartbeatPrimaryEnable = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcHeartbeatPrimaryEnable.setStatus('current')
if mibBuilder.loadTexts: ipdcHeartbeatPrimaryEnable.setDescription("This value contols whether an Heartbeat (RTE-ARTE transaction) is sent to the primary media controller. enable - send the heartbeat disable - don't send the heartbeat")
ipdcHeartbeatSecondaryEnable = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcHeartbeatSecondaryEnable.setStatus('current')
if mibBuilder.loadTexts: ipdcHeartbeatSecondaryEnable.setDescription("This value contols whether an Heartbeat (RTE-ARTE transaction) is sent to the secondary media controller. enable - send the heartbeat disable - don't send the heartbeat")
ipdcLoggerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 7))
ipdcLoggerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipdcLoggerEnable.setStatus('current')
if mibBuilder.loadTexts: ipdcLoggerEnable.setDescription("This value controls whether the ipdc logger is enabled. enable - log IPDC requests and responses to ipdclog.txt disable - don't log")
salixMgmcpSgcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 2))
sgcpUdpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sgcpUdpPortNumber.setStatus('current')
if mibBuilder.loadTexts: sgcpUdpPortNumber.setDescription('The local UDP port for SGCP to use. This port cannot be changed dynamically. Any new value written to this objects will take affect after the system is restarted. When the system starts up again, the last value written to this object is used as the local UDP port for SGCP')
ipdcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 1))
sgcpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 2))
ipdcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 3))
sgcpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 4))
ipdcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 1, 1)).setObjects(("SALIX-MGMCP-MIB", "ipdcSessionStatsPacketsRcvd"), ("SALIX-MGMCP-MIB", "ipdcSessionStatsPacketsSent"), ("SALIX-MGMCP-MIB", "ipdcSessionStatsBytesRcvd"), ("SALIX-MGMCP-MIB", "ipdcSessionStatsBytesSent"), ("SALIX-MGMCP-MIB", "ipdcSessionStatsMessagesRejected"), ("SALIX-MGMCP-MIB", "ipdcSessionLocalIpAddress"), ("SALIX-MGMCP-MIB", "ipdcSessionLocalPort"), ("SALIX-MGMCP-MIB", "ipdcSessionMediaControllerIpAddress"), ("SALIX-MGMCP-MIB", "ipdcSessionMediaControllerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipdcGroup = ipdcGroup.setStatus('current')
if mibBuilder.loadTexts: ipdcGroup.setDescription('IPDC Group')
sgcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 2, 2)).setObjects(("SALIX-MGMCP-MIB", "sgcpUdpPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sgcpGroup = sgcpGroup.setStatus('current')
if mibBuilder.loadTexts: sgcpGroup.setDescription('IPDC Group')
ipdcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 5, 1, 2, 3, 3, 1)).setObjects(("SALIX-MGMCP-MIB", "ipdcGroup"), ("SALIX-MGMCP-MIB", "sgcpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipdcCompliance = ipdcCompliance.setStatus('current')
if mibBuilder.loadTexts: ipdcCompliance.setDescription('The basic implementation requirements for the SALIX-IPDC-MIB.')
mibBuilder.exportSymbols("SALIX-MGMCP-MIB", ipdcSystemID=ipdcSystemID, salixMgmcpSgcpObjects=salixMgmcpSgcpObjects, salixMgmcpIpdcObjects=salixMgmcpIpdcObjects, sgcpGroups=sgcpGroups, ipdcHeartbeatFrequency=ipdcHeartbeatFrequency, ipdcCompliance=ipdcCompliance, salixMgmcpMIBCompliance=salixMgmcpMIBCompliance, ipdcLoggerEnable=ipdcLoggerEnable, ipdcSessionEntry=ipdcSessionEntry, ipdcHeartbeatSecondaryEnable=ipdcHeartbeatSecondaryEnable, sgcpUdpPortNumber=sgcpUdpPortNumber, ipdcSessionStatsMessagesRejected=ipdcSessionStatsMessagesRejected, ipdcSystemType=ipdcSystemType, ipdcCompliances=ipdcCompliances, ipdcSessionStatsPacketsSent=ipdcSessionStatsPacketsSent, ipdcSessionStatsBytesRcvd=ipdcSessionStatsBytesRcvd, ipdcSessionMediaControllerIpAddress=ipdcSessionMediaControllerIpAddress, ipdcGroup=ipdcGroup, ipdcSessionStatsPacketsRcvd=ipdcSessionStatsPacketsRcvd, ipdcSessionStatsEntry=ipdcSessionStatsEntry, ipdcHeartbeatPrimaryEnable=ipdcHeartbeatPrimaryEnable, ipdcSessionTable=ipdcSessionTable, ipdcSessionStatsTable=ipdcSessionStatsTable, ipdcBayNumber=ipdcBayNumber, ipdcSessionStatsBytesSent=ipdcSessionStatsBytesSent, ipdcGroups=ipdcGroups, salixMgmcpMIBTraps=salixMgmcpMIBTraps, PYSNMP_MODULE_ID=salixMgmcpMIB, salixMgmcpMIBTrapPrefix=salixMgmcpMIBTrapPrefix, ipdcSessionLocalPort=ipdcSessionLocalPort, ipdcHeartbeatObjects=ipdcHeartbeatObjects, ipdcLoggerObjects=ipdcLoggerObjects, sgcpCompliances=sgcpCompliances, salixMgmcpMIB=salixMgmcpMIB, ipdcSessionIndex=ipdcSessionIndex, salixMgmcpMIBObjects=salixMgmcpMIBObjects, ipdcSessionStatsUnacknowledgedRequests=ipdcSessionStatsUnacknowledgedRequests, ipdcSessionLocalIpAddress=ipdcSessionLocalIpAddress, sgcpGroup=sgcpGroup, ipdcSessionMediaControllerPort=ipdcSessionMediaControllerPort)
