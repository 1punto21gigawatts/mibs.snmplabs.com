#
# PySNMP MIB module QB-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QB-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:43:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
qbMibs, = mibBuilder.importSymbols("QUANTUMBRIDGE-REG", "qbMibs")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, NotificationType, IpAddress, ModuleIdentity, Integer32, Unsigned32, Counter32, Gauge32, Bits, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "IpAddress", "ModuleIdentity", "Integer32", "Unsigned32", "Counter32", "Gauge32", "Bits", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonetMediumEntry, = mibBuilder.importSymbols("SONET-MIB", "sonetMediumEntry")
qbSonetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4323, 2, 6))
if mibBuilder.loadTexts: qbSonetMIB.setLastUpdated('0011141434Z')
if mibBuilder.loadTexts: qbSonetMIB.setOrganization('Quantum Bridge Inc.')
if mibBuilder.loadTexts: qbSonetMIB.setContactInfo('mvaysman@quantumbridge.com')
if mibBuilder.loadTexts: qbSonetMIB.setDescription('This module defines additional objects for management of SONET links in Quantum Bridge devices, above and beyond what is defined in the standard SONET mib.')
class QbSonetType(TextualConvention, Integer32):
    description = 'Defines whether SONET, SDH/VC12, SDHDS1/VC11, SONET/M13 signal is used across the chassis/slot.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("sonetVT15", 1), ("sdhVC12", 2), ("sdhVC11", 3), ("sonetM13", 4), ("unknown", 5))

qbSonetObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4323, 2, 6, 1))
qbSonetTables = MibIdentifier((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2))
qbSonetConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4323, 2, 6, 3))
qbSonetAlarmMode = MibScalar((1, 3, 6, 1, 4, 1, 4323, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetAlarmMode.setStatus('current')
if mibBuilder.loadTexts: qbSonetAlarmMode.setDescription("Setting this object causes enabling or disabling optical ports alarms(LOS, LF, SD or SF). At initial start up time all optical ports are enabled. The user can change the port state to 'disabled' if there are not connections configured on the port. Upon configuring the first active connection to the optical port, the system automatically enables the port alarms. This object is used in conjunction with qbSonetSlot object which defines a scope of the configuration parameter: chassis wide or slot wide. enabled(1) - enables alarms on the selected slot or chassis. disabled(2) - disables alarms on the dormant optical ports of the selected slot or chassis. When read, the value of the object is always 'unknown(3)' This parameter is applied to WAN622, S622, and Q155 cards.")
qbSonetScramblingMode = MibScalar((1, 3, 6, 1, 4, 1, 4323, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetScramblingMode.setStatus('current')
if mibBuilder.loadTexts: qbSonetScramblingMode.setDescription("Setting this object defines whether ATM cell payload is enabled or disabled. At initial start up time scrambling is set to 'enabled(1)' This object is used in conjunction with qbSonetSlot object which defines a scope of the configuration parameter: chassis wide or slot wide. enabled(1) - enables alarms on the selected slot or chassis. disabled(2) - disables alarms on the dormant optical ports of the selected slot or chassis. When read, the value of the object is alwayd 'unknown(3)' This parameter is applied to WAN622, S622, and Q155 cards.")
qbSonetMediumType = MibScalar((1, 3, 6, 1, 4, 1, 4323, 2, 6, 1, 3), QbSonetType().clone('sonetVT15')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetMediumType.setStatus('current')
if mibBuilder.loadTexts: qbSonetMediumType.setDescription("Setting this object defines whether SONET, SDH, SDHDS1, or SONETM13 signal is used across the chassis/slot. At initial start up the object is set to 'sonet(1)' This object is used in conjunction with qbSonetSlot object which defines a scope of the configuration parameter: chassis wide or slot wide. sonet(1) - sets signal format to 'sonet'. sdh(2) - sets signal format to 'sdh/VC12' sdhDs1(2) - sets signal format to 'sdh/VC11' sonetM13(2) - sets signal format to 'sonet/M13 payload' When read, the value of the object is always 'unknown(3)' This parameter is applied to D155VT/VC-T.")
qbSonetSlot = MibScalar((1, 3, 6, 1, 4, 1, 4323, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetSlot.setStatus('current')
if mibBuilder.loadTexts: qbSonetSlot.setDescription('This object defines a scope of the applied configuration parameter. If the object is set to non-zero value all ports of the defined slot are configured. When object is set to 0, this setting is applied to all applicable optical cards.')
qbSonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 1), )
if mibBuilder.loadTexts: qbSonetMediumTable.setStatus('current')
if mibBuilder.loadTexts: qbSonetMediumTable.setDescription('The Quantum Bridge SONET Medium table contains extensions to the SONET Medium table.')
qbSonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 1, 1), )
sonetMediumEntry.registerAugmentions(("QB-SONET-MIB", "qbSonetMediumEntry"))
qbSonetMediumEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: qbSonetMediumEntry.setStatus('current')
if mibBuilder.loadTexts: qbSonetMediumEntry.setDescription('An entry in the Quantum Bridge SONET Medium table.')
qbSonetPortTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("recovered", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetPortTxClockSource.setStatus('deprecated')
if mibBuilder.loadTexts: qbSonetPortTxClockSource.setDescription('The source of Transmit Clock. recovered indicates that the recovered receive clock is used as the transmit clock. local indicates that a local clock source is used.')
qbSonetPortScramblingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetPortScramblingMode.setStatus('current')
if mibBuilder.loadTexts: qbSonetPortScramblingMode.setDescription('The scrambling mode of the sonet interface.')
qbSonetPortAlarmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetPortAlarmMode.setStatus('current')
if mibBuilder.loadTexts: qbSonetPortAlarmMode.setDescription('The alarm mode of the sonet interface.')
qbSonetPortMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 1, 1, 4), QbSonetType().clone('sonetVT15')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qbSonetPortMediumType.setStatus('current')
if mibBuilder.loadTexts: qbSonetPortMediumType.setDescription("Setting this object defines whether SONET, SDH, SDHDS1, or SONETM13 signal is used across the chassis/slot. At initial start up the object is set to 'sonet(1)' This object is used in conjunction with qbSonetSlot object which defines a scope of the configuration parameter: chassis wide or slot wide. sonet(1) - sets signal format to 'sonet'. sdh(2) - sets signal format to 'sdh/VC12' sdhDs1(2) - sets signal format to 'sdh/VC11' sonetM13(2) - sets signal format to 'sonet/M13 payload' When read, the value of the object is always 'unknown(3)' This parameter is applied to D155VT/VC-T.")
qbSonetStatTable = MibTable((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 2), )
if mibBuilder.loadTexts: qbSonetStatTable.setStatus('current')
if mibBuilder.loadTexts: qbSonetStatTable.setDescription('The Quantum Bridge SONET Stat table contains SONET statistics.')
qbSonetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qbSonetStatEntry.setStatus('current')
if mibBuilder.loadTexts: qbSonetStatEntry.setDescription('An entry in the Quantum Bridge SONET Stat table.')
qbSonetSectionBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qbSonetSectionBIP.setStatus('current')
if mibBuilder.loadTexts: qbSonetSectionBIP.setDescription('This object gives the number of section bit interleaved parity erorrs.')
qbSonetLineBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qbSonetLineBIP.setStatus('current')
if mibBuilder.loadTexts: qbSonetLineBIP.setDescription('This object gives the number of line bit interleaved parity erorrs.')
qbSonetPathBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4323, 2, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qbSonetPathBIP.setStatus('current')
if mibBuilder.loadTexts: qbSonetPathBIP.setDescription('This object gives the number of path bit interleaved parity erorrs.')
qbSonetCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4323, 2, 6, 3, 1))
qbSonetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4323, 2, 6, 3, 2))
qbSonetCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4323, 2, 6, 3, 1, 1)).setObjects(("QB-SONET-MIB", "qbSonetAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qbSonetCompliance = qbSonetCompliance.setStatus('current')
if mibBuilder.loadTexts: qbSonetCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
qbSonetAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4323, 2, 6, 3, 2, 1)).setObjects(("QB-SONET-MIB", "qbSonetAlarmMode"), ("QB-SONET-MIB", "qbSonetScramblingMode"), ("QB-SONET-MIB", "qbSonetMediumType"), ("QB-SONET-MIB", "qbSonetSlot"), ("QB-SONET-MIB", "qbSonetPortTxClockSource"), ("QB-SONET-MIB", "qbSonetPortScramblingMode"), ("QB-SONET-MIB", "qbSonetPortAlarmMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qbSonetAllGroup = qbSonetAllGroup.setStatus('current')
if mibBuilder.loadTexts: qbSonetAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("QB-SONET-MIB", qbSonetMediumType=qbSonetMediumType, qbSonetScramblingMode=qbSonetScramblingMode, qbSonetAllGroup=qbSonetAllGroup, qbSonetCompliance=qbSonetCompliance, qbSonetCompliances=qbSonetCompliances, qbSonetMIB=qbSonetMIB, qbSonetPathBIP=qbSonetPathBIP, QbSonetType=QbSonetType, PYSNMP_MODULE_ID=qbSonetMIB, qbSonetPortAlarmMode=qbSonetPortAlarmMode, qbSonetStatTable=qbSonetStatTable, qbSonetTables=qbSonetTables, qbSonetStatEntry=qbSonetStatEntry, qbSonetAlarmMode=qbSonetAlarmMode, qbSonetPortMediumType=qbSonetPortMediumType, qbSonetLineBIP=qbSonetLineBIP, qbSonetObjects=qbSonetObjects, qbSonetMediumEntry=qbSonetMediumEntry, qbSonetPortScramblingMode=qbSonetPortScramblingMode, qbSonetSlot=qbSonetSlot, qbSonetGroups=qbSonetGroups, qbSonetMediumTable=qbSonetMediumTable, qbSonetPortTxClockSource=qbSonetPortTxClockSource, qbSonetConformance=qbSonetConformance, qbSonetSectionBIP=qbSonetSectionBIP)
