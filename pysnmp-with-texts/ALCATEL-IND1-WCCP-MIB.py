#
# PySNMP MIB module ALCATEL-IND1-WCCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-WCCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wccpTraps, softentIND1Wccp = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "wccpTraps", "softentIND1Wccp")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Counter32, IpAddress, ObjectIdentity, Counter64, ModuleIdentity, MibIdentifier, iso, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "IpAddress", "ObjectIdentity", "Counter64", "ModuleIdentity", "MibIdentifier", "iso", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "TimeTicks")
TruthValue, DateAndTime, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention", "RowStatus")
alcatelIND1WCCPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1))
if mibBuilder.loadTexts: alcatelIND1WCCPMIB.setLastUpdated('201008310000Z')
if mibBuilder.loadTexts: alcatelIND1WCCPMIB.setOrganization('Alcatel')
if mibBuilder.loadTexts: alcatelIND1WCCPMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1WCCPMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): The AlcatelIND1WCCPMIB is used to monitor the services for the WCCP (Web Cache Coordination Protocol). The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1WCCPMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 0))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WCCPMIBNotifications.setDescription('Branch For WCCP Subsystem Notifications.')
alcatelIND1WCCPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WCCPMIBObjects.setDescription('Branch for WCCP application objects')
alcatelIND1WCCPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WCCPMIBConformance.setDescription('Branch for WCCP application conformance information')
alcatelIND1WCCPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WCCPMIBGroups.setDescription('Branch for WCCP application units of conformance')
alcatelIND1WCCPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1WCCPMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WCCPMIBCompliances.setDescription('Branch for WCCP application compliance statements')
class WccpServiceType(TextualConvention, Integer32):
    description = 'Indicates the type of WCCP service being used. standard - well known service is being used. dynamic - dynamic service is being used. unknown - cannot determine the type of service being used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standard", 1), ("dynamic", 2), ("unknown", 3))

class WccpVersion(TextualConvention, Integer32):
    description = 'Indicates the version of WCCP being used for a service. version1 - WCCP version 1 being used for the service. version2 - WCCP version 2 being used for the service. unknown - unknown version.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("version1", 1), ("version2", 2), ("unknown", 3))

class WccpServiceProtocolType(TextualConvention, Integer32):
    description = 'Indicates the type of protocol that a service group is defined for. tcp - WCCP service is identified by TCP protocol. udp - WCCP service is identified by UDP protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tcp", 1), ("udp", 2), ("unknown", 3))

class WccpServiceMessageType(TextualConvention, Integer32):
    description = 'Indicates the type of message Exchanged used between The router and the cache-engines unicast - Unicast method is used for WCCP message exchange, i.e; the server and router exchange WCCP messages using the IP address of the server and router. multicast - Multicast method is used for WCCP message exchange, i.e; the server and router exchange WCCP messages using an IP multicast group address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unicast", 1), ("multicast", 2), ("unknown", 3))

class WccpServicePortType(TextualConvention, Integer32):
    description = 'Indicates the type of Ports being referred to in the Service Info Component in a WCCP message. source - The Ports in the Service Info Component refers to TCP/UDP source ports. destination - The Ports in the Service Info Component refers to TCP/UDP destination ports.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("source", 1), ("destination", 2), ("unknown", 3))

class WccpOperState(TextualConvention, Integer32):
    description = "The operational state of various WCCP entities 'outOfService' : The entity is out of service. 'inService' : The entity operates properly."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("outOfService", 1), ("inService", 2))

wccpFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1))
wccpAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wccpAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: wccpAdminEnabled.setDescription('This variable enables/disables WCCP feature.')
wccpServiceCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceCount.setStatus('current')
if mibBuilder.loadTexts: wccpServiceCount.setDescription('The number of configured WCCP services.')
wccpGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wccpGlobalStatsReset.setStatus('current')
if mibBuilder.loadTexts: wccpGlobalStatsReset.setDescription('The variable will clear WCCP statistics for all the service groups.')
wccpGlobalStatsMessageInvalid = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpGlobalStatsMessageInvalid.setStatus('current')
if mibBuilder.loadTexts: wccpGlobalStatsMessageInvalid.setDescription('This variable indicates the total no. of invalid WCCP Messages received.')
wccpServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2))
wccpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wccpServiceTable.setStatus('current')
if mibBuilder.loadTexts: wccpServiceTable.setDescription('Table of WCCP services.')
wccpServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpServiceId"))
if mibBuilder.loadTexts: wccpServiceTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpServiceTableEntry.setDescription('A wccpServiceTable entry describes the WCCP service.')
wccpServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpServiceId.setDescription("This variable indicates the WCCP's service id.")
wccpServiceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 2), WccpServiceProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceProtocol.setStatus('current')
if mibBuilder.loadTexts: wccpServiceProtocol.setDescription(' This variable indicates the protocol type the WCCP Service is defined for ')
wccpServiceMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 3), WccpServiceMessageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceMessageType.setStatus('current')
if mibBuilder.loadTexts: wccpServiceMessageType.setDescription(' This variable indicates the mode of WCCP message exchanges used between router and cache-engines (unicast/multicast). ')
wccpServicePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 4), WccpServicePortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServicePortType.setStatus('current')
if mibBuilder.loadTexts: wccpServicePortType.setDescription(' This variable indicates the type of TCP/UDP ports (source/destination) being referred to in Service Info Component in the WCCP Message.')
wccpServiceAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpServiceAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: wccpServiceAdminEnabled.setDescription("This variable indicates WCCP's service status.")
wccpServicePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpServicePassword.setStatus('current')
if mibBuilder.loadTexts: wccpServicePassword.setDescription('This variable indicates the password for the WCCP service.')
wccpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 7), WccpServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceType.setStatus('current')
if mibBuilder.loadTexts: wccpServiceType.setDescription('This variable indicates the WCCP service type.')
wccpServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 8), WccpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceVersion.setStatus('current')
if mibBuilder.loadTexts: wccpServiceVersion.setDescription('This variable indicates the WCCP service version.')
wccpServiceWebCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceWebCacheCount.setStatus('current')
if mibBuilder.loadTexts: wccpServiceWebCacheCount.setDescription('This variable show the number web caches currently active on the service.')
wccpServiceReceiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceReceiveId.setStatus('current')
if mibBuilder.loadTexts: wccpServiceReceiveId.setDescription('This variable contains the current Receive ID from the router. This is incremented each time a WCCP message is sent.')
wccpServiceChangeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServiceChangeNumber.setStatus('current')
if mibBuilder.loadTexts: wccpServiceChangeNumber.setDescription('This variable contains the current Change Number. This is incremented each time there is a WCCP topology change.')
wccpServicePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServicePrecedence.setStatus('current')
if mibBuilder.loadTexts: wccpServicePrecedence.setDescription('This variable indicates the priority of the Service. The lowest priority is 0, the highest is 255. Well known services have a priority of 240.')
wccpServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: wccpServiceRowStatus.setDescription('The object is used by a management station to create or delete the row entry in wccpServiceTable following the RowStatus textual convention.')
wccpServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wccpServicePortTable.setStatus('current')
if mibBuilder.loadTexts: wccpServicePortTable.setDescription('Table of WCCP service Ports.')
wccpServicePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpServicePortServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpServicePortPortId"))
if mibBuilder.loadTexts: wccpServicePortTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpServicePortTableEntry.setDescription('A wccpServicePortTable entry describes the WCCP service Ports.')
wccpServicePortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpServicePortServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpServicePortServiceId.setDescription("This variable indicates the WCCP's service id.")
wccpServicePortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wccpServicePortPortId.setStatus('current')
if mibBuilder.loadTexts: wccpServicePortPortId.setDescription("This variable indicates the WCCP's service Ports' id")
wccpServicePortPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpServicePortPortNum.setStatus('current')
if mibBuilder.loadTexts: wccpServicePortPortNum.setDescription("This variable indicates the WCCP's service Ports' id Value.")
wccpWebCaches = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3))
wccpWebCacheTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wccpWebCacheTable.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheTable.setDescription('Table of WCCP web caches.')
wccpWebCacheTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpWebCacheServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpWebCacheIpAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpWebCacheIpAddress"))
if mibBuilder.loadTexts: wccpWebCacheTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheTableEntry.setDescription('A wccpWebCacheTable entry describes the status of a Web Cache.')
wccpWebCacheServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpWebCacheServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheServiceId.setDescription('This variable indicates service id for this Web Cache.')
wccpWebCacheIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpWebCacheIpAddressType.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheIpAddressType.setDescription('This variable IP address of the Web Cache. InetAddressType ipv4(1) is the only one supported at this time')
wccpWebCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpWebCacheIpAddress.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheIpAddress.setDescription('This variable IP address of the Web Cache.')
wccpWebCacheProtoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 4), WccpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheProtoVersion.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheProtoVersion.setDescription('This variable indicates the WCCP version supported by the Web Cache.')
wccpWebCacheReceiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheReceiveId.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheReceiveId.setDescription('This variable contains the current Receive ID from the Web Cache.')
wccpWebCacheChangeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheChangeNum.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheChangeNum.setDescription('This variable contains the current Change Number. This is incremented each time there is a WCCP topology change.')
wccpWebCacheNumberOfRouters = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheNumberOfRouters.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheNumberOfRouters.setDescription('This variable indicates how many WCCP routers the Web Cache is in contact with.')
wccpWebCacheNumberOfWebCaches = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheNumberOfWebCaches.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheNumberOfWebCaches.setDescription('This variable indicates how many Web Caches the Web Cache is in contact with.')
wccpWebCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 9), WccpOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheState.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheState.setDescription('This variable indicates the operational state of the Cache-Engine for a WCCP service.')
wccpWebCacheConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 3, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpWebCacheConnectTime.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheConnectTime.setDescription(' This indicates the time at which the cache server was changed to usable state for the service.')
wccpRouters = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4))
wccpRouterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wccpRouterTable.setStatus('current')
if mibBuilder.loadTexts: wccpRouterTable.setDescription('Table of WCCP Routers.')
wccpRouterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRouterServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRouterIpAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRouterIpAddress"))
if mibBuilder.loadTexts: wccpRouterTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpRouterTableEntry.setDescription('A wccpRouterTable entry describes the various routers participating in a service group.')
wccpRouterServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRouterServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpRouterServiceId.setDescription('This variable indicates service id for this Router.')
wccpRouterIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpRouterIpAddressType.setStatus('current')
if mibBuilder.loadTexts: wccpRouterIpAddressType.setDescription('This variable indicates IP address type of the Router. InetAddressType ipv4(1) is the only one supported at this time')
wccpRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: wccpRouterIpAddress.setDescription('This variable indicates IP address of the Router.')
wccpRouterProtoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 4, 1, 1, 4), WccpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpRouterProtoVersion.setStatus('current')
if mibBuilder.loadTexts: wccpRouterProtoVersion.setDescription('This variable indicates the WCCP version supported by the Router.')
wccpRestrictVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5))
wccpRestrictVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wccpRestrictVlanTable.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictVlanTable.setDescription('Table of WCCP VLAN filter. Indicates on which VLANs redirection should take place')
wccpRestrictVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanVlanId"))
if mibBuilder.loadTexts: wccpRestrictVlanTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictVlanTableEntry.setDescription('A wccpRestrictVlanTable entry describes the status of a VLAN restriction.')
wccpRestrictVlanServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRestrictVlanServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictVlanServiceId.setDescription("This variable indicates WCCP's service id.")
wccpRestrictVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: wccpRestrictVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictVlanVlanId.setDescription('This variable indicates a VLAN for redirection restrictions.')
wccpRestrictVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpRestrictVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictVlanRowStatus.setDescription('The object is used by a management station to create or delete the row entry in wccpServiceTable following the RowStatus textual convention.')
wccpRestrictWebCache = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6))
wccpRestrictWebCacheTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1), )
if mibBuilder.loadTexts: wccpRestrictWebCacheTable.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheTable.setDescription('Table of WCCP VLAN filter.')
wccpRestrictWebCacheTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpAddress"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpMaskAddressType"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheIpMask"))
if mibBuilder.loadTexts: wccpRestrictWebCacheTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheTableEntry.setDescription('A wccpRestrictWebCacheTable entry describes the status of a WCCP service.')
wccpRestrictWebCacheServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRestrictWebCacheServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheServiceId.setDescription("This variable indicates WCCP's service id.")
wccpRestrictWebCacheIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpAddressType.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheIpAddressType.setDescription('This variable is the IP address type of the Web Cache. Used with wccpRestrictWebCacheIpMask. InetAddressType ipv4(1) is the only one supported at this time')
wccpRestrictWebCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpAddress.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheIpAddress.setDescription('This variable is the IP address of the Web Cache. Used with wccpRestrictWebCacheIpMask.')
wccpRestrictWebCacheIpMaskAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpMaskAddressType.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheIpMaskAddressType.setDescription('This variable is the IP mask type of the IP Address.')
wccpRestrictWebCacheIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: wccpRestrictWebCacheIpMask.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheIpMask.setDescription('This variable is the IP mask of the IP Address.')
wccpRestrictWebCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 6, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpRestrictWebCacheRowStatus.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheRowStatus.setDescription('The object is used by a management station to create or delete the row entry in wccpServiceTable following the RowStatus textual convention.')
wccpRestrictPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7))
wccpRestrictPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1), )
if mibBuilder.loadTexts: wccpRestrictPortTable.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictPortTable.setDescription('Table of WCCP Port filter. Indicates on which Ports redirection should not take place')
wccpRestrictPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortServiceId"), (0, "ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortIndex"))
if mibBuilder.loadTexts: wccpRestrictPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictPortTableEntry.setDescription('A wccpRestrictPortTable entry describes the status of a Port restriction.')
wccpRestrictPortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpRestrictPortServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictPortServiceId.setDescription("This variable indicates WCCP's service id.")
wccpRestrictPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: wccpRestrictPortIndex.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictPortIndex.setDescription('This variable indicates a Port for redirection restrictions.')
wccpRestrictPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 7, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wccpRestrictPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictPortRowStatus.setDescription('The object is used by a management station to create or delete the row entry in wccpRestrictPortTable following the RowStatus textual convention.')
wccpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8))
wccpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1), )
if mibBuilder.loadTexts: wccpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wccpStatisticsTable.setDescription('Table of WCCP traffic related Statistics.')
wccpStatisticsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-WCCP-MIB", "wccpStatsServiceId"))
if mibBuilder.loadTexts: wccpStatisticsTableEntry.setStatus('current')
if mibBuilder.loadTexts: wccpStatisticsTableEntry.setDescription('A wccpStatisticsTableEntry entry describes the WCCP traffic related statistics for a service Group')
wccpStatsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wccpStatsServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpStatsServiceId.setDescription("This variable indicates WCCP's service id.")
wccpStatsMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: wccpStatsMessagesReceived.setDescription('This variable indicates the total no. of valid WCCP Messages Received by the Router for the service group.')
wccpStatsMessagesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsMessagesTransmitted.setStatus('current')
if mibBuilder.loadTexts: wccpStatsMessagesTransmitted.setDescription('This variable indicates the total no. of valid WCCP Messages transmitted by the Router for the service group.')
wccpStatsMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: wccpStatsMessagesDropped.setDescription('This variable indicates the total no. of WCCP Messages dropped for the service group, as a result of the WCCP restrictions on Port/Vlan/Ip')
wccpStatsPacketsRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsPacketsRedir.setStatus('current')
if mibBuilder.loadTexts: wccpStatsPacketsRedir.setDescription('This variable indicates the how many packet WCCP has redirected.')
wccpStatsPacketsLowRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsPacketsLowRedir.setStatus('current')
if mibBuilder.loadTexts: wccpStatsPacketsLowRedir.setDescription('This variable indicates the how many packet WCCP has redirected - lower 32 bits.')
wccpStatsPacketsDeniedRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsPacketsDeniedRedir.setStatus('current')
if mibBuilder.loadTexts: wccpStatsPacketsDeniedRedir.setDescription('This variable indicates the how many packets WCCP has denied to redirect.')
wccpStatsAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpStatsAuthFailures.setStatus('current')
if mibBuilder.loadTexts: wccpStatsAuthFailures.setDescription(' This variable indicates the count of how many WCCP packets resulted in authentication failure because of mismatch in the password used for the Service on the Router and a Cache-Engine.')
wccpStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wccpStatsReset.setStatus('current')
if mibBuilder.loadTexts: wccpStatsReset.setDescription('The object is used by a management station to reset the wccpStatistics info from this table ')
wccpTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9))
wccpTrapOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 0, 1)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoEntityGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoOperStatus"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoServiceId"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoWebCacheIpAddr"))
if mibBuilder.loadTexts: wccpTrapOperStatus.setStatus('current')
if mibBuilder.loadTexts: wccpTrapOperStatus.setDescription('A change occured in the operational status of a wccp entity.')
wccpTrapInfoServiceId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoServiceId.setStatus('current')
if mibBuilder.loadTexts: wccpTrapInfoServiceId.setDescription('The WCCP Service Id.')
wccpTrapInfoOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 2), WccpOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoOperStatus.setStatus('current')
if mibBuilder.loadTexts: wccpTrapInfoOperStatus.setDescription('The operational status of wccp, service or webcache.')
wccpTrapInfoWebCacheIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoWebCacheIpAddr.setStatus('current')
if mibBuilder.loadTexts: wccpTrapInfoWebCacheIpAddr.setDescription('The IP address of a Web Cache.')
wccpTrapInfoEntityGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wccp", 1), ("service", 2), ("webcache", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wccpTrapInfoEntityGroup.setStatus('current')
if mibBuilder.loadTexts: wccpTrapInfoEntityGroup.setDescription('The entity group inside wccp management.')
alcatelIND1WCCPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpFeatureGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRouterGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatisticsGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1WCCPMIBCompliance = alcatelIND1WCCPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WCCPMIBCompliance.setDescription('Compliance statement for WCCP.')
wccpFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpAdminEnabled"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceCount"), ("ALCATEL-IND1-WCCP-MIB", "wccpGlobalStatsMessageInvalid"), ("ALCATEL-IND1-WCCP-MIB", "wccpGlobalStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpFeatureGroup = wccpFeatureGroup.setStatus('current')
if mibBuilder.loadTexts: wccpFeatureGroup.setDescription('Collection of objects for management of Web Cache Coordination')
wccpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpServiceProtocol"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceMessageType"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePortType"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceAdminEnabled"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePassword"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceType"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceVersion"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceWebCacheCount"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceReceiveId"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceChangeNumber"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePrecedence"), ("ALCATEL-IND1-WCCP-MIB", "wccpServiceRowStatus"), ("ALCATEL-IND1-WCCP-MIB", "wccpServicePortPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpServiceGroup = wccpServiceGroup.setStatus('current')
if mibBuilder.loadTexts: wccpServiceGroup.setDescription('Collection of objects for management of WCCP services')
wccpWebCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheProtoVersion"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheReceiveId"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheChangeNum"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheNumberOfRouters"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheNumberOfWebCaches"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheConnectTime"), ("ALCATEL-IND1-WCCP-MIB", "wccpWebCacheState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpWebCacheGroup = wccpWebCacheGroup.setStatus('current')
if mibBuilder.loadTexts: wccpWebCacheGroup.setDescription('Collection of objects for management of WCCP Web Caches')
wccpRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRouterProtoVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRouterGroup = wccpRouterGroup.setStatus('current')
if mibBuilder.loadTexts: wccpRouterGroup.setDescription('Collection of objects for management of WCCP Router')
wccpRestrictVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRestrictVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRestrictVlanGroup = wccpRestrictVlanGroup.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictVlanGroup.setDescription('Collection of objects for management of WCCP Web Caches')
wccpRestrictWebCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRestrictWebCacheRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRestrictWebCacheGroup = wccpRestrictWebCacheGroup.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictWebCacheGroup.setDescription('Collection of objects for management of WCCP Web Caches')
wccpRestrictPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpRestrictPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpRestrictPortGroup = wccpRestrictPortGroup.setStatus('current')
if mibBuilder.loadTexts: wccpRestrictPortGroup.setDescription('Collection of objects for management of WCCP Web Caches')
wccpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpStatsMessagesReceived"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsMessagesTransmitted"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsMessagesDropped"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsPacketsRedir"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsPacketsLowRedir"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsPacketsDeniedRedir"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsAuthFailures"), ("ALCATEL-IND1-WCCP-MIB", "wccpStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpStatisticsGroup = wccpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: wccpStatisticsGroup.setDescription("Collection of objects for management of WCCP SG's traffic statistics")
wccpTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpTrapOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpTrapsGroup = wccpTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: wccpTrapsGroup.setDescription('Collection of traps for management of WCCP')
wccpOperStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 38, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoEntityGroup"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoOperStatus"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoServiceId"), ("ALCATEL-IND1-WCCP-MIB", "wccpTrapInfoWebCacheIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wccpOperStatusGroup = wccpOperStatusGroup.setStatus('current')
if mibBuilder.loadTexts: wccpOperStatusGroup.setDescription('Collection of objects for WCCP OperStatus Notification.')
mibBuilder.exportSymbols("ALCATEL-IND1-WCCP-MIB", wccpRestrictVlanRowStatus=wccpRestrictVlanRowStatus, wccpServiceGroup=wccpServiceGroup, wccpRestrictWebCacheGroup=wccpRestrictWebCacheGroup, wccpWebCacheNumberOfWebCaches=wccpWebCacheNumberOfWebCaches, wccpRestrictWebCacheTableEntry=wccpRestrictWebCacheTableEntry, WccpServiceType=WccpServiceType, wccpStatsPacketsDeniedRedir=wccpStatsPacketsDeniedRedir, wccpWebCaches=wccpWebCaches, wccpServicePortPortId=wccpServicePortPortId, wccpRestrictVlanVlanId=wccpRestrictVlanVlanId, wccpRouterIpAddressType=wccpRouterIpAddressType, WccpServicePortType=WccpServicePortType, wccpGlobalStatsMessageInvalid=wccpGlobalStatsMessageInvalid, wccpRouterTable=wccpRouterTable, alcatelIND1WCCPMIBNotifications=alcatelIND1WCCPMIBNotifications, wccpStatisticsGroup=wccpStatisticsGroup, wccpServicePortPortNum=wccpServicePortPortNum, wccpRouterProtoVersion=wccpRouterProtoVersion, alcatelIND1WCCPMIBCompliance=alcatelIND1WCCPMIBCompliance, wccpStatsPacketsLowRedir=wccpStatsPacketsLowRedir, wccpStatisticsTable=wccpStatisticsTable, wccpStatsPacketsRedir=wccpStatsPacketsRedir, alcatelIND1WCCPMIBGroups=alcatelIND1WCCPMIBGroups, wccpStatisticsTableEntry=wccpStatisticsTableEntry, wccpTrapInfoEntityGroup=wccpTrapInfoEntityGroup, wccpStatistics=wccpStatistics, wccpServicePortType=wccpServicePortType, wccpTrapsObj=wccpTrapsObj, wccpServicePortServiceId=wccpServicePortServiceId, wccpRestrictPortServiceId=wccpRestrictPortServiceId, wccpServiceChangeNumber=wccpServiceChangeNumber, PYSNMP_MODULE_ID=alcatelIND1WCCPMIB, wccpFeatureGroup=wccpFeatureGroup, alcatelIND1WCCPMIBConformance=alcatelIND1WCCPMIBConformance, wccpGlobalStatsReset=wccpGlobalStatsReset, wccpRestrictVlan=wccpRestrictVlan, WccpVersion=WccpVersion, wccpRestrictPortTable=wccpRestrictPortTable, wccpRestrictWebCache=wccpRestrictWebCache, wccpRestrictWebCacheServiceId=wccpRestrictWebCacheServiceId, wccpRouterIpAddress=wccpRouterIpAddress, wccpRouters=wccpRouters, wccpOperStatusGroup=wccpOperStatusGroup, wccpRestrictWebCacheRowStatus=wccpRestrictWebCacheRowStatus, wccpRestrictPortTableEntry=wccpRestrictPortTableEntry, wccpServiceTable=wccpServiceTable, wccpServices=wccpServices, wccpServiceAdminEnabled=wccpServiceAdminEnabled, wccpWebCacheNumberOfRouters=wccpWebCacheNumberOfRouters, wccpStatsAuthFailures=wccpStatsAuthFailures, wccpServiceVersion=wccpServiceVersion, wccpRestrictWebCacheIpAddress=wccpRestrictWebCacheIpAddress, wccpRestrictWebCacheTable=wccpRestrictWebCacheTable, wccpServicePortTableEntry=wccpServicePortTableEntry, wccpServiceId=wccpServiceId, wccpServiceRowStatus=wccpServiceRowStatus, wccpServiceProtocol=wccpServiceProtocol, WccpOperState=WccpOperState, wccpRestrictWebCacheIpAddressType=wccpRestrictWebCacheIpAddressType, wccpRestrictPortIndex=wccpRestrictPortIndex, wccpWebCacheGroup=wccpWebCacheGroup, WccpServiceProtocolType=WccpServiceProtocolType, wccpWebCacheTable=wccpWebCacheTable, wccpRestrictPortGroup=wccpRestrictPortGroup, wccpTrapInfoServiceId=wccpTrapInfoServiceId, wccpServiceWebCacheCount=wccpServiceWebCacheCount, wccpStatsReset=wccpStatsReset, wccpAdminEnabled=wccpAdminEnabled, wccpRouterGroup=wccpRouterGroup, wccpServiceCount=wccpServiceCount, wccpServiceReceiveId=wccpServiceReceiveId, wccpServiceType=wccpServiceType, wccpWebCacheState=wccpWebCacheState, wccpTrapInfoOperStatus=wccpTrapInfoOperStatus, wccpStatsServiceId=wccpStatsServiceId, wccpRestrictVlanGroup=wccpRestrictVlanGroup, wccpFeature=wccpFeature, wccpWebCacheIpAddressType=wccpWebCacheIpAddressType, WccpServiceMessageType=WccpServiceMessageType, wccpRouterTableEntry=wccpRouterTableEntry, wccpTrapOperStatus=wccpTrapOperStatus, wccpRestrictWebCacheIpMask=wccpRestrictWebCacheIpMask, wccpRestrictPort=wccpRestrictPort, wccpStatsMessagesDropped=wccpStatsMessagesDropped, wccpTrapInfoWebCacheIpAddr=wccpTrapInfoWebCacheIpAddr, wccpWebCacheChangeNum=wccpWebCacheChangeNum, wccpStatsMessagesReceived=wccpStatsMessagesReceived, wccpWebCacheProtoVersion=wccpWebCacheProtoVersion, wccpWebCacheIpAddress=wccpWebCacheIpAddress, wccpWebCacheServiceId=wccpWebCacheServiceId, alcatelIND1WCCPMIBObjects=alcatelIND1WCCPMIBObjects, wccpRestrictWebCacheIpMaskAddressType=wccpRestrictWebCacheIpMaskAddressType, alcatelIND1WCCPMIBCompliances=alcatelIND1WCCPMIBCompliances, wccpRestrictVlanServiceId=wccpRestrictVlanServiceId, wccpServicePassword=wccpServicePassword, alcatelIND1WCCPMIB=alcatelIND1WCCPMIB, wccpServicePrecedence=wccpServicePrecedence, wccpWebCacheConnectTime=wccpWebCacheConnectTime, wccpRestrictPortRowStatus=wccpRestrictPortRowStatus, wccpWebCacheTableEntry=wccpWebCacheTableEntry, wccpTrapsGroup=wccpTrapsGroup, wccpRouterServiceId=wccpRouterServiceId, wccpStatsMessagesTransmitted=wccpStatsMessagesTransmitted, wccpRestrictVlanTable=wccpRestrictVlanTable, wccpServicePortTable=wccpServicePortTable, wccpServiceMessageType=wccpServiceMessageType, wccpWebCacheReceiveId=wccpWebCacheReceiveId, wccpRestrictVlanTableEntry=wccpRestrictVlanTableEntry, wccpServiceTableEntry=wccpServiceTableEntry)
