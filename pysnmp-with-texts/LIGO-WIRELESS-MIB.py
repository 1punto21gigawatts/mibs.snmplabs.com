#
# PySNMP MIB module LIGO-WIRELESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIGO-WIRELESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, ifPhysAddress = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifPhysAddress")
ligoMgmt, = mibBuilder.importSymbols("LIGOWAVE-MIB", "ligoMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysLocation, = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter32, IpAddress, MibIdentifier, Gauge32, Unsigned32, NotificationType, Integer32, Bits, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "NotificationType", "Integer32", "Bits", "ModuleIdentity", "ObjectIdentity")
MacAddress, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString")
ligoWirelessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 32750, 3, 10))
ligoWirelessMIB.setRevisions(('2011-11-11 11:11',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ligoWirelessMIB.setRevisionsDescriptions(('First revision.',))
if mibBuilder.loadTexts: ligoWirelessMIB.setLastUpdated('201111111111Z')
if mibBuilder.loadTexts: ligoWirelessMIB.setOrganization('LigoWave')
if mibBuilder.loadTexts: ligoWirelessMIB.setContactInfo(' LigoWave Customer Support E-mail: support@ligowave.com')
if mibBuilder.loadTexts: ligoWirelessMIB.setDescription('The LigoWave Wireless MIB.')
ligoWirelessMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1))
ligoWiNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0))
ligoWiInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 1))
ligoWiConf = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2))
ligoWiStats = MibIdentifier((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3))
ligoWiIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1), )
if mibBuilder.loadTexts: ligoWiIfConfTable.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfConfTable.setDescription('Wireless interface configuration table.')
ligoWiIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ligoWiIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfConfEntry.setDescription('Wireless interface configuration table entry.')
ligoWiIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfMacAddress.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfMacAddress.setDescription('Interface MAC address.')
ligoWiIfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfProtocol.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfProtocol.setDescription("Protocol string, for example 'IEEE 802.11g'.")
ligoWiIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("auto", 0), ("adhoc", 1), ("managed", 2), ("master", 3), ("repeater", 4), ("secondary", 5), ("monitor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfMode.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfMode.setDescription('Wireless interface operation mode.')
ligoWiIfESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfESSID.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfESSID.setDescription('ESSID.')
ligoWiIfCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfCountryCode.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfCountryCode.setDescription('Country code.')
ligoWiIfFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 6), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfFrequency.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfFrequency.setDescription('Current operating frequency.')
ligoWiIfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfChannel.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfChannel.setDescription('Channel number.')
ligoWiIfChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 8), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfChannelBandwidth.setDescription('Channel bandwidth.')
ligoWiIfEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 0), ("open", 1), ("wep64bit", 2), ("wep128bit", 3), ("wep", 4), ("enterpriseWpa", 5), ("personalWpa", 6), ("enterpriseWpa2", 7), ("personalWpa2", 8), ("enterpriseWpaOrWpa2", 9), ("personalWpaOrWpa2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfEncryption.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfEncryption.setDescription('Encryption type.')
ligoWiIfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 10), Gauge32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfTxPower.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfTxPower.setDescription('Transmit power in dBm.')
ligoWiIfBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 11), Gauge32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfBitRate.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfBitRate.setDescription('Transmission bitrate.')
ligoWiIfLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfLinkQuality.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfLinkQuality.setDescription('Link quality value.')
ligoWiIfMaxLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfMaxLinkQuality.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfMaxLinkQuality.setDescription('Maximum possible link quality value for current wireless card.')
ligoWiIfSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 14), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfSignalLevel.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfSignalLevel.setDescription('Signal level.')
ligoWiIfNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 15), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfNoiseLevel.setDescription('Noise level.')
ligoWiIfAssocNodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfAssocNodeCount.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfAssocNodeCount.setDescription('Number of associated nodes when working in access point mode. 1 - if associated to remote access point in client mode.')
ligoWiIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 1), )
if mibBuilder.loadTexts: ligoWiIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfStatsTable.setDescription('Wireless interface statistics table.')
ligoWiIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ligoWiIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfStatsEntry.setDescription('Wireless interface statistics table entry.')
ligoWiIfRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfRxTotal.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfRxTotal.setDescription('Number of total received packets.')
ligoWiIfRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfRxErrors.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfRxErrors.setDescription('Number of reception errors.')
ligoWiIfTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfTxTotal.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfTxTotal.setDescription('Number of total transmitted packets.')
ligoWiIfTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiIfTxRetries.setStatus('current')
if mibBuilder.loadTexts: ligoWiIfTxRetries.setDescription('Number of transmission retries.')
ligoWiRemoteNodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2), )
if mibBuilder.loadTexts: ligoWiRemoteNodeStatsTable.setStatus('current')
if mibBuilder.loadTexts: ligoWiRemoteNodeStatsTable.setDescription('Remote node statistics table. This table shows statistics for associated or already disconnected clients on wireless interfaces which are operating in access point mode. For interfaces operating in client mode and associated to remote access point information about access point is shown.')
ligoWiRemoteNodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "LIGO-WIRELESS-MIB", "ligoWiRmtNodeMacAddress"))
if mibBuilder.loadTexts: ligoWiRemoteNodeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ligoWiRemoteNodeStatsEntry.setDescription('Wireless remote node statistics table entry.')
ligoWiRmtNodeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiRmtNodeMacAddress.setStatus('current')
if mibBuilder.loadTexts: ligoWiRmtNodeMacAddress.setDescription('Remote node MAC address.')
ligoWiRmtNodeAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiRmtNodeAssociated.setStatus('current')
if mibBuilder.loadTexts: ligoWiRmtNodeAssociated.setDescription('Remote node is currently associated.')
ligoWiRmtNodeTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiRmtNodeTxBytes.setStatus('current')
if mibBuilder.loadTexts: ligoWiRmtNodeTxBytes.setDescription('Bytes transmitted to remote node.')
ligoWiRmtNodeRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiRmtNodeRxBytes.setStatus('current')
if mibBuilder.loadTexts: ligoWiRmtNodeRxBytes.setDescription('Bytes received from remote node.')
ligoWiRmtNodeSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1, 5), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiRmtNodeSignalLevel.setStatus('current')
if mibBuilder.loadTexts: ligoWiRmtNodeSignalLevel.setDescription('Signal level reported by remote node.')
ligoWiRmtNodeNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 3, 2, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ligoWiRmtNodeNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: ligoWiRmtNodeNoiseLevel.setDescription('Noise level reported by remote node.')
ligoWiFrequencyChange = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 1)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiIfFrequency"))
if mibBuilder.loadTexts: ligoWiFrequencyChange.setStatus('current')
if mibBuilder.loadTexts: ligoWiFrequencyChange.setDescription('This notification is sent on frequency change.')
ligoWiNoiseThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 2)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiIfNoiseLevel"))
if mibBuilder.loadTexts: ligoWiNoiseThresholdReached.setStatus('current')
if mibBuilder.loadTexts: ligoWiNoiseThresholdReached.setDescription('This notification is sent when noise becomes bigger than threshold.')
ligoWiRemoteNodeConnected = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 3)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifPhysAddress"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiRmtNodeMacAddress"))
if mibBuilder.loadTexts: ligoWiRemoteNodeConnected.setStatus('current')
if mibBuilder.loadTexts: ligoWiRemoteNodeConnected.setDescription('This notification is sent when remote node associates.')
ligoWiRemoteNodeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 4)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifPhysAddress"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiRmtNodeMacAddress"))
if mibBuilder.loadTexts: ligoWiRemoteNodeDisconnected.setStatus('current')
if mibBuilder.loadTexts: ligoWiRemoteNodeDisconnected.setDescription('This notification is sent when remote node dissasociates.')
ligoWiLinkQualThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 5)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiIfLinkQuality"))
if mibBuilder.loadTexts: ligoWiLinkQualThresholdReached.setStatus('current')
if mibBuilder.loadTexts: ligoWiLinkQualThresholdReached.setDescription('This notification is sent when link quality crosses the specified threshold.')
ligoWiRxErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 6)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiIfMacAddress"), ("LIGO-WIRELESS-MIB", "ligoWiIfRxErrors"))
if mibBuilder.loadTexts: ligoWiRxErrorsThreshold.setStatus('current')
if mibBuilder.loadTexts: ligoWiRxErrorsThreshold.setDescription('This notification is sent when percentage of erroneous frames in relation to number of frames received over the same time period reaches the threshold.')
ligoWiTxRetriesThreshold = NotificationType((1, 3, 6, 1, 4, 1, 32750, 3, 10, 1, 0, 7)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("LIGO-WIRELESS-MIB", "ligoWiIfMacAddress"), ("LIGO-WIRELESS-MIB", "ligoWiIfTxRetries"))
if mibBuilder.loadTexts: ligoWiTxRetriesThreshold.setStatus('current')
if mibBuilder.loadTexts: ligoWiTxRetriesThreshold.setDescription('This notification is sent when percentage of transmission retries in relation to number of frames transmitted over the same time period reaches the threshold.')
mibBuilder.exportSymbols("LIGO-WIRELESS-MIB", ligoWiIfConfTable=ligoWiIfConfTable, ligoWiIfLinkQuality=ligoWiIfLinkQuality, ligoWiIfAssocNodeCount=ligoWiIfAssocNodeCount, ligoWiIfStatsEntry=ligoWiIfStatsEntry, ligoWiIfChannel=ligoWiIfChannel, ligoWiIfMaxLinkQuality=ligoWiIfMaxLinkQuality, ligoWiIfCountryCode=ligoWiIfCountryCode, ligoWiLinkQualThresholdReached=ligoWiLinkQualThresholdReached, ligoWiIfESSID=ligoWiIfESSID, ligoWiIfFrequency=ligoWiIfFrequency, ligoWiRmtNodeTxBytes=ligoWiRmtNodeTxBytes, ligoWirelessMIB=ligoWirelessMIB, ligoWiIfMode=ligoWiIfMode, ligoWiInfo=ligoWiInfo, ligoWiIfNoiseLevel=ligoWiIfNoiseLevel, ligoWiIfBitRate=ligoWiIfBitRate, ligoWiRxErrorsThreshold=ligoWiRxErrorsThreshold, ligoWiRemoteNodeConnected=ligoWiRemoteNodeConnected, ligoWiIfRxTotal=ligoWiIfRxTotal, ligoWiRemoteNodeStatsTable=ligoWiRemoteNodeStatsTable, ligoWiRmtNodeNoiseLevel=ligoWiRmtNodeNoiseLevel, ligoWiRemoteNodeDisconnected=ligoWiRemoteNodeDisconnected, ligoWiIfChannelBandwidth=ligoWiIfChannelBandwidth, ligoWiNotifs=ligoWiNotifs, ligoWiIfEncryption=ligoWiIfEncryption, ligoWiFrequencyChange=ligoWiFrequencyChange, PYSNMP_MODULE_ID=ligoWirelessMIB, ligoWiNoiseThresholdReached=ligoWiNoiseThresholdReached, ligoWiIfMacAddress=ligoWiIfMacAddress, ligoWiIfStatsTable=ligoWiIfStatsTable, ligoWiIfSignalLevel=ligoWiIfSignalLevel, ligoWiStats=ligoWiStats, ligoWiIfProtocol=ligoWiIfProtocol, ligoWiIfConfEntry=ligoWiIfConfEntry, ligoWiTxRetriesThreshold=ligoWiTxRetriesThreshold, ligoWiRmtNodeSignalLevel=ligoWiRmtNodeSignalLevel, ligoWiRmtNodeAssociated=ligoWiRmtNodeAssociated, ligoWiConf=ligoWiConf, ligoWiRemoteNodeStatsEntry=ligoWiRemoteNodeStatsEntry, ligoWirelessMIBObjects=ligoWirelessMIBObjects, ligoWiIfTxTotal=ligoWiIfTxTotal, ligoWiIfTxRetries=ligoWiIfTxRetries, ligoWiRmtNodeMacAddress=ligoWiRmtNodeMacAddress, ligoWiRmtNodeRxBytes=ligoWiRmtNodeRxBytes, ligoWiIfRxErrors=ligoWiIfRxErrors, ligoWiIfTxPower=ligoWiIfTxPower)
