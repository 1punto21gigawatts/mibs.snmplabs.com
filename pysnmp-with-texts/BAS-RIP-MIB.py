#
# PySNMP MIB module BAS-RIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-RIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
basRip, = mibBuilder.importSymbols("BAS-MIB", "basRip")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Unsigned32, Gauge32, iso, Bits, Integer32, TimeTicks, NotificationType, Counter64, MibIdentifier, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Unsigned32", "Gauge32", "iso", "Bits", "Integer32", "TimeTicks", "NotificationType", "Counter64", "MibIdentifier", "ModuleIdentity", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
basRIP = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1))
if mibBuilder.loadTexts: basRIP.setLastUpdated('9704170315Z')
if mibBuilder.loadTexts: basRIP.setOrganization('BAS Systems')
if mibBuilder.loadTexts: basRIP.setContactInfo('Dheerendra Talur Postal: BAS Systems 1595 Spring Hill Road 5th Floor Vienna, VA 22182 Phone: 703-245-4561 E-Mail: dtalur@bas.com')
if mibBuilder.loadTexts: basRIP.setDescription('This module defines a portion of the proprietary management information base (MIB) for managing routing information protocol (RIP).')
ripIfStatsCurGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1))
ripIfResetTime = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfResetTime.setStatus('current')
if mibBuilder.loadTexts: ripIfResetTime.setDescription('Time of last stats clear')
ripIfStatsIntfCnt = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsIntfCnt.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsIntfCnt.setDescription('Number of enabled interfaces running RIP')
ripIfStatsNbrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsNbrCnt.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsNbrCnt.setDescription('Total number of neighbors of all RIP interfaces')
ripIfStatsPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsPktsRcvd.setDescription('Total number of RIP packets received on all interfaces')
ripIfStatsPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsPktsSent.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsPktsSent.setDescription('Total number of RIP packets sent out on all interfaces')
ripIfStatsReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsReqsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsReqsRcvd.setDescription('Total number of RIP requests received on all interfaces')
ripIfStatsReqsSent = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsReqsSent.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsReqsSent.setDescription('Total number of RIP requests sent out on all interfaces')
ripIfStatsRspsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsRspsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsRspsRcvd.setDescription('Total number of RIP responses received on all interfaces')
ripIfStatsRspsSent = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsRspsSent.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsRspsSent.setDescription('Total number of RIP responses sent out on all interfaces')
ripIfStatsRteTimouts = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsRteTimouts.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsRteTimouts.setDescription('Total number of RIP routes timed out')
ripIfStatsShrtPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsShrtPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsShrtPktsRcvd.setDescription('Total number of RIP packets with size less than RIP header size received on all interfaces')
ripIfStatsBadVerRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsBadVerRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsBadVerRcvd.setDescription('Total number of RIP packets with version other than RIP version 1 or RIP version 2, received on all interfaces')
ripIfStatsBadZeroRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsBadZeroRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsBadZeroRcvd.setDescription('Total number of RIP packets with must be zero fields not set to zero, received on all interfaces')
ripIfStatsBadSrcPortRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsBadSrcPortRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsBadSrcPortRcvd.setDescription('Total number of RIP packets which did not originate from port 520, received on all interfaces')
ripIfStatsBadSrcIpRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsBadSrcIpRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsBadSrcIpRcvd.setDescription('Total number of RIP packets with invalid ip address, received on all interfaces')
ripIfStatsPktsFrmSelfRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfStatsPktsFrmSelfRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsPktsFrmSelfRcvd.setDescription('Total number of RIP packets with receiver being the sender on all interfaces')
ripIfStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfStatsReset.setStatus('current')
if mibBuilder.loadTexts: ripIfStatsReset.setDescription('Writing a 1 in ripIfStatsReset has the effect of clearing current RIP statistics')
ripIfStatsAllGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2))
ripIfAllResetTime = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllResetTime.setStatus('current')
if mibBuilder.loadTexts: ripIfAllResetTime.setDescription('Time since system reboot')
ripIfAllStatsIntfCnt = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsIntfCnt.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsIntfCnt.setDescription('Number of interfaces (enabled and disabled) running RIP')
ripIfAllStatsNbrCnt = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsNbrCnt.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsNbrCnt.setDescription('Total number of neighbors of all RIP interfaces')
ripIfAllStatsPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsPktsRcvd.setDescription('Total number of RIP packets received on all interfaces')
ripIfAllStatsPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsPktsSent.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsPktsSent.setDescription('Total number of RIP packets sent out on all interfaces')
ripIfAllStatsReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsReqsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsReqsRcvd.setDescription('Total number of RIP requests received on all interfaces')
ripIfAllStatsReqsSent = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsReqsSent.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsReqsSent.setDescription('Total number of RIP requests sent out on all interfaces')
ripIfAllStatsRspsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsRspsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsRspsRcvd.setDescription('Total number of RIP responses received on all interfaces')
ripIfAllStatsRspsSent = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsRspsSent.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsRspsSent.setDescription('Total number of RIP responses sent out on all interfaces')
ripIfAllStatsRteTimouts = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsRteTimouts.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsRteTimouts.setDescription('Total number of RIP routes timed out')
ripIfAllStatsShrtPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsShrtPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsShrtPktsRcvd.setDescription('Total number of RIP packets with size less than RIP header size received on all interfaces')
ripIfAllStatsBadVerRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsBadVerRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsBadVerRcvd.setDescription('Total number of RIP packets with version other than RIP version 1 or RIP version 2, received on all interfaces')
ripIfAllStatsBadZeroRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsBadZeroRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsBadZeroRcvd.setDescription('Total number of RIP packets with must be zero fields not set to zero, received on all interfaces')
ripIfAllStatsBadSrcPortRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsBadSrcPortRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsBadSrcPortRcvd.setDescription('Total number of RIP packets which did not originate from port 520, received on all interfaces')
ripIfAllStatsBadSrcIpRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsBadSrcIpRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsBadSrcIpRcvd.setDescription('Total number of RIP packets with invalid ip address, received on all interfaces')
ripIfAllStatsPktsFrmSelfRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfAllStatsPktsFrmSelfRcvd.setStatus('current')
if mibBuilder.loadTexts: ripIfAllStatsPktsFrmSelfRcvd.setDescription('Total number of RIP packets with receiver being the sender on all interfaces')
basRipIfTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4), )
if mibBuilder.loadTexts: basRipIfTable.setReference('Scalable Routing IDD. Section on RIP.')
if mibBuilder.loadTexts: basRipIfTable.setStatus('current')
if mibBuilder.loadTexts: basRipIfTable.setDescription('This is used for proprietry interface info.')
basRipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1), ).setIndexNames((0, "BAS-RIP-MIB", "ripIfIpAddress"), (0, "BAS-RIP-MIB", "ripIfAddressLessIf"))
if mibBuilder.loadTexts: basRipIfEntry.setStatus('current')
if mibBuilder.loadTexts: basRipIfEntry.setDescription('Interface configuration entry.')
ripIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: ripIfIpAddress.setDescription('Ip address of the interface running RIP')
ripIfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: ripIfAddressLessIf.setDescription('IfIndex of the interface running RIP')
ripIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripIfTypeBroadcast", 1), ("ripIfTypeNBMA", 2), ("ripIfTypePointToPoint", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfType.setStatus('current')
if mibBuilder.loadTexts: ripIfType.setDescription('Type of the interface running RIP')
ripIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ripSendNone", 1), ("ripSendVer1", 2), ("ripSendCompat", 3), ("ripSendVer2", 4), ("ripSendVer1Demand", 5), ("ripSendVer2Demand", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfVersion.setStatus('current')
if mibBuilder.loadTexts: ripIfVersion.setDescription('What the router sends on this interface. ripVersion1 implies sending RIP updates compliant with RFC 1058. ripSendCompat implies broadcasting RIP-2 updates using RFC 1058 route subsumption rules. ripSendVer2 implies multicasting RIP-2 updates. ripSendVer1Demand indicates the use of Demand RIP on a WAN interface under RIP Version 1 rules. ripSendVer2Demand indicates the use of Demand RIP on a WAN interface under Version 2 rules.')
ripIfRecvVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ripRcvVer1", 1), ("ripRcvVer2", 2), ("ripRcvVer1and2", 3), ("ripRcvNone", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfRecvVer.setStatus('current')
if mibBuilder.loadTexts: ripIfRecvVer.setDescription('This indicates which version of RIP updates are to be accepted. Note that ripRcvVer2 and ripRcvVer1and2 implies reception of multicast packets.')
ripIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfMetric.setStatus('current')
if mibBuilder.loadTexts: ripIfMetric.setDescription('Value of metric corresponding to this interface. Metric value will be added to all routes leared from this interface')
ripIfAcceptDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAcceptDefault.setStatus('current')
if mibBuilder.loadTexts: ripIfAcceptDefault.setDescription('If ripIfAcceptDefault is TRUE then default routes will be accepted on this interface')
ripIfSilent = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfSilent.setStatus('current')
if mibBuilder.loadTexts: ripIfSilent.setDescription('If ripIfSilent is TRUE then no RIP updates would be sent of by this interface')
ripIfRecvRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfRecvRoutes.setStatus('current')
if mibBuilder.loadTexts: ripIfRecvRoutes.setDescription('If ripIfRecvRoutes is TRUE then RIP updates received on this interface are disregarded')
ripIfSubnetsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfSubnetsOnly.setStatus('current')
if mibBuilder.loadTexts: ripIfSubnetsOnly.setDescription('If ripIfSubnetsOnly is TRUE, then ')
ripIfSendDefaultOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfSendDefaultOnly.setStatus('current')
if mibBuilder.loadTexts: ripIfSendDefaultOnly.setDescription('If ripIfSendDefaultOnly is TRUE, RIP update from this interface would consist of only the default route')
ripIfSendDefaultAlso = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfSendDefaultAlso.setStatus('current')
if mibBuilder.loadTexts: ripIfSendDefaultAlso.setDescription('If ripIfSendDefaultAlso is TRUE, RIP update from this interface would consist of default route along with other routes')
ripIfDfltRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfDfltRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ripIfDfltRouteMetric.setDescription('This variable indicates the metric that is to be used for the default route entry in RIP updates originated on this interface.')
ripIfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripIfSplitHorizon.setDescription('If ripIfSplitHorizon is TRUE, enables split horizon processing as defined in RFC 1058')
ripIfPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfPoison.setStatus('current')
if mibBuilder.loadTexts: ripIfPoison.setDescription('In ripIfPoison is TRUE, enables Poison reverse updates on this interface. (Poison reverse is defined in RCF 1058)')
ripIfFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfFlash.setStatus('current')
if mibBuilder.loadTexts: ripIfFlash.setDescription('if ripIfFlash is TRUE flash updates will be sent out from this interface following a route change')
ripAuthOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAuthOn.setStatus('current')
if mibBuilder.loadTexts: ripAuthOn.setDescription('If ripAuthOn TRUE enables authentication on this interface. All updates generated from this interface would be authenticated using specified authentication type set by ripIfAuthType')
ripIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAuthType.setStatus('current')
if mibBuilder.loadTexts: ripIfAuthType.setDescription('The type of Authentication used on this interface.')
ripIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: ripIfAuthKeyId.setDescription('md5 authentication keyid used for this interface. RFC2082 describes md5 authentication and keyids')
ripIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ripIfAuthKey.setDescription('The value to be used as the Authentication Key whenever the corresponding instance of ripIfAuthType has a value other than noAuthentication. A modification of the corresponding instance of ripIfAuthType does not modify the rip2IfConfAuthKey value. If a string shorter than 16 octets is supplied, it will be left- justified and padded to 16 octets, on the right, with nulls (0x00). Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
ripIfUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: ripIfUpdateInterval.setDescription('Time between 2 RIP updates for this interface')
ripIfUpdateInterPktGap = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfUpdateInterPktGap.setStatus('current')
if mibBuilder.loadTexts: ripIfUpdateInterPktGap.setDescription('Time between sending 2 packets of the same RIP update when update is more than 1 packet')
ripIfPktsPerUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfPktsPerUpdate.setStatus('current')
if mibBuilder.loadTexts: ripIfPktsPerUpdate.setDescription('Maximum number of packets allowed per update on this interface')
ripIfPortDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfPortDown.setStatus('current')
if mibBuilder.loadTexts: ripIfPortDown.setDescription('Indicates if port on which this interface exists is down.')
ripIfRowStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 4, 1, 25), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfRowStat.setStatus('current')
if mibBuilder.loadTexts: ripIfRowStat.setDescription('Administrative control over, creation and enabling RIP interface ')
basRipNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3), )
if mibBuilder.loadTexts: basRipNbrTable.setReference('Scalable Routing IDD. Section on RIP.')
if mibBuilder.loadTexts: basRipNbrTable.setStatus('current')
if mibBuilder.loadTexts: basRipNbrTable.setDescription('Neighbor table')
basRipNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1), ).setIndexNames((0, "BAS-RIP-MIB", "ripNbrIfIpAddr"), (0, "BAS-RIP-MIB", "ripNbrIpAddr"))
if mibBuilder.loadTexts: basRipNbrEntry.setStatus('current')
if mibBuilder.loadTexts: basRipNbrEntry.setDescription('A particular neighbour entry.')
ripNbrIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ripNbrIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: ripNbrIfIpAddr.setDescription('Ip address on the RIP interface of which this is a neighbor')
ripNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: ripNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: ripNbrIpAddr.setDescription('Ip address of the neighbor')
ripNbrAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNbrAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: ripNbrAddressLessIf.setDescription('If index of the RIP interface on this this is a neighbor')
ripNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripNbrTypeConfigured", 1), ("ripNbrTypeDiscovered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNbrType.setStatus('current')
if mibBuilder.loadTexts: ripNbrType.setDescription('Neighbor type is ripNbrTypeConfigured if it is configured on the interface. A neighbor is of type discovered it is not configured and updates from this neighbor are received on this interface')
ripNbrLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNbrLastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripNbrLastUpdate.setDescription('Time simce last update was received from this neighbor')
ripNbrTriggerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNbrTriggerMode.setStatus('current')
if mibBuilder.loadTexts: ripNbrTriggerMode.setDescription('Indicates if the neighbor is triggered or not')
ripNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 19, 1, 3, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNbrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ripNbrRowStatus.setDescription('Administrative control to creat and delete a neighbor')
mibBuilder.exportSymbols("BAS-RIP-MIB", ripIfPoison=ripIfPoison, ripIfAllStatsRspsRcvd=ripIfAllStatsRspsRcvd, ripIfUpdateInterPktGap=ripIfUpdateInterPktGap, ripNbrAddressLessIf=ripNbrAddressLessIf, ripNbrTriggerMode=ripNbrTriggerMode, ripIfAllStatsBadVerRcvd=ripIfAllStatsBadVerRcvd, ripIfPktsPerUpdate=ripIfPktsPerUpdate, ripNbrLastUpdate=ripNbrLastUpdate, ripIfSendDefaultOnly=ripIfSendDefaultOnly, ripIfStatsPktsSent=ripIfStatsPktsSent, ripIfAllResetTime=ripIfAllResetTime, ripIfAllStatsBadSrcPortRcvd=ripIfAllStatsBadSrcPortRcvd, ripIfFlash=ripIfFlash, ripIfAuthKeyId=ripIfAuthKeyId, ripNbrType=ripNbrType, ripIfAllStatsPktsSent=ripIfAllStatsPktsSent, ripIfStatsBadVerRcvd=ripIfStatsBadVerRcvd, basRipIfTable=basRipIfTable, ripIfAcceptDefault=ripIfAcceptDefault, ripIfAddressLessIf=ripIfAddressLessIf, ripNbrIfIpAddr=ripNbrIfIpAddr, ripIfAllStatsIntfCnt=ripIfAllStatsIntfCnt, ripIfPortDown=ripIfPortDown, ripIfAllStatsBadZeroRcvd=ripIfAllStatsBadZeroRcvd, ripIfAllStatsRspsSent=ripIfAllStatsRspsSent, ripIfAllStatsShrtPktsRcvd=ripIfAllStatsShrtPktsRcvd, ripIfRowStat=ripIfRowStat, ripIfSendDefaultAlso=ripIfSendDefaultAlso, ripIfStatsPktsRcvd=ripIfStatsPktsRcvd, basRipIfEntry=basRipIfEntry, ripIfStatsReqsRcvd=ripIfStatsReqsRcvd, ripIfStatsBadZeroRcvd=ripIfStatsBadZeroRcvd, ripIfRecvVer=ripIfRecvVer, ripIfStatsShrtPktsRcvd=ripIfStatsShrtPktsRcvd, ripIfAllStatsNbrCnt=ripIfAllStatsNbrCnt, ripIfStatsPktsFrmSelfRcvd=ripIfStatsPktsFrmSelfRcvd, ripNbrRowStatus=ripNbrRowStatus, ripIfStatsNbrCnt=ripIfStatsNbrCnt, ripIfUpdateInterval=ripIfUpdateInterval, ripIfMetric=ripIfMetric, basRIP=basRIP, ripIfSubnetsOnly=ripIfSubnetsOnly, ripIfAllStatsPktsRcvd=ripIfAllStatsPktsRcvd, ripIfSilent=ripIfSilent, ripIfAllStatsReqsRcvd=ripIfAllStatsReqsRcvd, ripIfSplitHorizon=ripIfSplitHorizon, PYSNMP_MODULE_ID=basRIP, ripIfStatsAllGroup=ripIfStatsAllGroup, basRipNbrTable=basRipNbrTable, ripIfAllStatsPktsFrmSelfRcvd=ripIfAllStatsPktsFrmSelfRcvd, ripNbrIpAddr=ripNbrIpAddr, ripIfStatsCurGroup=ripIfStatsCurGroup, ripIfStatsReqsSent=ripIfStatsReqsSent, ripIfAllStatsBadSrcIpRcvd=ripIfAllStatsBadSrcIpRcvd, ripIfAllStatsRteTimouts=ripIfAllStatsRteTimouts, basRipNbrEntry=basRipNbrEntry, ripIfStatsReset=ripIfStatsReset, ripIfIpAddress=ripIfIpAddress, ripIfRecvRoutes=ripIfRecvRoutes, ripIfAuthType=ripIfAuthType, ripIfVersion=ripIfVersion, ripIfAllStatsReqsSent=ripIfAllStatsReqsSent, ripIfStatsBadSrcIpRcvd=ripIfStatsBadSrcIpRcvd, ripIfDfltRouteMetric=ripIfDfltRouteMetric, ripIfResetTime=ripIfResetTime, ripIfStatsBadSrcPortRcvd=ripIfStatsBadSrcPortRcvd, ripIfAuthKey=ripIfAuthKey, ripAuthOn=ripAuthOn, ripIfStatsRspsSent=ripIfStatsRspsSent, ripIfStatsIntfCnt=ripIfStatsIntfCnt, ripIfType=ripIfType, ripIfStatsRspsRcvd=ripIfStatsRspsRcvd, ripIfStatsRteTimouts=ripIfStatsRteTimouts)
