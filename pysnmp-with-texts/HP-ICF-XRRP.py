#
# PySNMP MIB module HP-ICF-XRRP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-XRRP
# Produced by pysmi-0.3.4 at Wed May  1 13:36:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
LastCreateTime, = mibBuilder.importSymbols("RMON2-MIB", "LastCreateTime")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Integer32, MibIdentifier, Bits, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Counter64, Unsigned32, ModuleIdentity, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "MibIdentifier", "Bits", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "ObjectIdentity")
MacAddress, TimeStamp, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TimeStamp", "RowStatus", "DisplayString", "TextualConvention")
hpicfXrrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18))
hpicfXrrpMIB.setRevisions(('2005-08-05 00:00', '2004-10-20 00:00', '2002-08-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfXrrpMIB.setRevisionsDescriptions(('Added import objects.', 'Revision to add objects to support controlled failback feature for XRRP.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfXrrpMIB.setLastUpdated('200508050000Z')
if mibBuilder.loadTexts: hpicfXrrpMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfXrrpMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfXrrpMIB.setDescription('This MIB module contains the definitions of Managed Objects for the XRRP router - the device running HP proprietory version of the Virtual Router Redundancy Protocol (VRRP).')
class XrrpRouterId(TextualConvention, Integer32):
    description = 'A number which serves to uniquely identify a XRRP router within a domain.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

hpicfXrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2))
hpicfXrrpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3))
hpicfXrrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4))
hpicfXrrpVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpVersion.setDescription('This value identifies the particular version of the XRRP supported by this device.')
hpicfXrrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpAdminState.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpAdminState.setDescription('The administrative state of the XRRP protocol on the box.')
hpicfXrrpDomain = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpDomain.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpDomain.setDescription('Domain that this router is in. The router can only be in one domain. Routers in the same domain can fail-over for each other. Up to 2 routers that have common VLANs can use the same XRRP Domain.')
hpicfXrrpRouterId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 4), XrrpRouterId().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpRouterId.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpRouterId.setDescription("Unique number for this router within a given domain. The router number (in combination with a VLAN ID) is used as an identifier for an XRRP instance within a domain. Along with 'hpicfXrrpDomain' it is used to create the XRRP MAC address for the XRRP instance this router owns. No two routers in the same domain can have the same router number in the same level 2 switching fabric.")
hpicfXrrpFailback = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpFailback.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpFailback.setDescription('Delay a router must wait before it can reclaim control for the virtual router it owns after its VLANs have come back up. This prevents any crashing for intermittent failures.')
hpicfXrrpTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 6), Bits().clone(namedValues=NamedValues(("stateChange", 0), ("masterState", 1), ("authFailure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpTrapCntl.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpTrapCntl.setDescription("Indicates whether the XRRP-enabled router will generate SNMP traps for events defined in this MIB. The set bit means 'enabled'. - stateChange(0) This bit controls whether the notification trap is allowed to be send when virtual router changes the state. - masterState(1) This bit controls whether the notification trap is allowed to be send when virtual router transitions to the Master state. - authFailure(2) This bit controls whether the notification trap is allowed to be send when virtual router detects an authentication error.")
hpicfXrrpInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7), )
if mibBuilder.loadTexts: hpicfXrrpInstancesTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstancesTable.setDescription('A table that contains operational characteristics of the virtual routers (XRRP instances) configured on this routing device. Currently on a given router for a given VLAN up to 2 instances can be supported (i.e. router can be the owner of one XRRP instance and backup up to one other). The theoretical maximum of XRRP instances on the router can be MAX_VLAN*2, currently it is limited to 512.')
hpicfXrrpInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1), ).setIndexNames((0, "HP-ICF-XRRP", "hpicfXrrpInstanceRouterId"), (0, "HP-ICF-XRRP", "hpicfXrrpInstanceVlanId"))
if mibBuilder.loadTexts: hpicfXrrpInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceEntry.setDescription("An entry (row) in the 'hpicfXrrpInstancesTable' containing the operational characteristics of the specific virtual router (XRRP instance) configured on this device.")
hpicfXrrpInstanceRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 1), XrrpRouterId())
if mibBuilder.loadTexts: hpicfXrrpInstanceRouterId.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceRouterId.setDescription("The router number which owns the virtual router interface (XRRP instance). In combination with 'hpicfXrrpInstanceVlanId' used as an index value to uniquely identify a row in the 'hpicfXrrpInstancesTable' table.")
hpicfXrrpInstanceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: hpicfXrrpInstanceVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceVlanId.setDescription("The VLAN ID where the virtual router (XRRP instance) is running on. In combination with 'hpicfXrrpInstanceRouterId' is used as an index value to uniquely identify a row in the 'hpicfXrrpInstancesTable' table.")
hpicfXrrpInstanceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("vlandown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpInstanceOperState.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceOperState.setDescription("The current state of the virtual router (XRRP instance) configured on this device. This object has the following defined values: - `initialize', which indicates that the virtual router (XRRP instance) is waiting for a startup event. - `backup', which indicates that virtual router (XRRP instance) is monitoring the availability of the Master. - `master', which indicates that the given virtual router (XRRP instance) is forwarding packets for the IP addresses associated with it, i.e. is in the Master state. - 'vlandown', which indicates that the VLAN associated with this virtual router (XRRP instance) is in down state.")
hpicfXrrpInstanceAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simpleTextPassword", 2))).clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfXrrpInstanceAuthType.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceAuthType.setDescription("Authentication type used for VRRP protocol exchanges between virtual routers. - 'noAuthentication' means that VRRP protocol exchanges are notauthenticated. - 'simpleTextPassword' means that exchanges are authenticated by a clear text password.")
hpicfXrrpInstanceAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfXrrpInstanceAuthKey.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceAuthKey.setDescription('This is an authentication string that is used to authenticate encapsulated VRRP packets received from other routers the XRRP instance is composed. This value must be consistently defined across the routers that form this XRRP instance. When read, it always returns an Octet String of length zero.')
hpicfXrrpInstanceAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfXrrpInstanceAdvertiseInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceAdvertiseInterval.setDescription('This parameter defines the advertisement interval in seconds for XRRP packets sent out by the Master of the XRRP instance.')
hpicfXrrpInstanceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpInstanceUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceUpTime.setDescription("This is the value of the `sysUpTime' object when the XRRP instance transitioned out of `initialized' state.")
hpicfXrrpInstanceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfXrrpInstanceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceRowStatus.setDescription("Status of the row in the 'hpicfXrrpInstancesTable'.")
hpicfXrrpInstanceAssoIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 8), )
if mibBuilder.loadTexts: hpicfXrrpInstanceAssoIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceAssoIpAddrTable.setDescription('This table contains IP addresses associated with virtual routers (XRRP instances) configured on this device.')
hpicfXrrpInstanceAssoIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 8, 1), ).setIndexNames((0, "HP-ICF-XRRP", "hpicfXrrpInstanceRouterId"), (0, "HP-ICF-XRRP", "hpicfXrrpInstanceVlanId"), (0, "HP-ICF-XRRP", "hpicfXrrpAssoIpAddr"))
if mibBuilder.loadTexts: hpicfXrrpInstanceAssoIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInstanceAssoIpAddrEntry.setDescription("An entry in the 'hpicfXrrpInstanceAssoIpAddrTable'. The number of rows will be equal the number of IP addresses backed up by the all XRRP instances on this device.")
hpicfXrrpAssoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpicfXrrpAssoIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpAssoIpAddr.setDescription("The backed up IP address configured on the VLAN 'hpicfXrrpInstanceVlanId' of the router 'hpicfXrrpInstanceRouterId'.")
hpicfXrrpAssoIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 8, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfXrrpAssoIpMask.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpAssoIpMask.setDescription('The subnet mask for the IP address.')
hpicfXrrpAssoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfXrrpAssoRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpAssoRowStatus.setDescription("The status of the row in 'hpicfXrrpInstanceAssoIpAddrTable'.")
hpicfXrrpTransferControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transferCtrl", 1), ("notransferCtrl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpTransferControl.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpTransferControl.setDescription('When this object is set to transferCtrl (1), it acts as a trigger to intimate XRRP of the transfer of control from one router to another. When read, this object always returns notransferCtrl (2).')
hpicfXrrpInfiniteFailback = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXrrpInfiniteFailback.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpInfiniteFailback.setDescription('When this object is set to enable (1), it sets the XRRP router on infinite failback. On initialization, the default value is disable (2).')
hpicfXrrpStatsXrrpMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsXrrpMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsXrrpMacAddress.setDescription('MAC Address used for XRRP instances for which this router is the owner. Value is determined by XRRP domain and unique router number.')
hpicfXrrpStatsMacAndMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsMacAndMask.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsMacAndMask.setDescription('This value contains the current AND mask used by XRRP to determine which MAC addresses can be received for routing.')
hpicfXrrpStatsPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsPktsRcvd.setDescription('This value contains the number of XRRP packets received by the router.')
hpicfXrrpStatsNotDomainPktsReject = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsNotDomainPktsReject.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsNotDomainPktsReject.setDescription('This value contains the number of XRRP packets received from the other domains.')
hpicfXrrpStatsCheckSumPktsReject = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsCheckSumPktsReject.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsCheckSumPktsReject.setDescription('This value contains the number of XRRP packets rejected due to checksum errors.')
hpicfXrrpStatsBadValuePktsReject = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsBadValuePktsReject.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsBadValuePktsReject.setDescription('This value contains the number of received XRRP packets with bad values.')
hpicfXrrpStatsCorruptedPktsReject = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsCorruptedPktsReject.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsCorruptedPktsReject.setDescription('This value contains the number of received XRRP packets that are too short.')
hpicfXrrpStatsVersionErrorPktsReject = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsVersionErrorPktsReject.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsVersionErrorPktsReject.setDescription('This value contains the number of received XRRP packets with wrong version number.')
hpicfXrrpStatsBcastArpsXmtd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsBcastArpsXmtd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsBcastArpsXmtd.setDescription('This value contains the number of broacast arps sent.')
hpicfXrrpStatsUpTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsUpTime.setDescription("This is the value of the `sysUpTime' object when the XRRP protocol has been last enabled. Used to count elapsed time since last XRRP enable action.")
hpicfXrrpStatsProtocolCreateTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 11), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsProtocolCreateTime.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsProtocolCreateTime.setDescription('The value of sysUpTime when XRRP protocol was last activated (initialized). This can be used for polling applications to detect discontinuity in the above statistics counters if protocol has been reinitialized between polls.')
hpicfXrrpStatsInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12), )
if mibBuilder.loadTexts: hpicfXrrpStatsInstancesTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstancesTable.setDescription('A table that contains statistics information for the XRRP instances on the router.')
hpicfXrrpStatsInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1), ).setIndexNames((0, "HP-ICF-XRRP", "hpicfXrrpInstanceRouterId"), (0, "HP-ICF-XRRP", "hpicfXrrpInstanceVlanId"))
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceEntry.setDescription('Information about a specific XRRP instance.')
hpicfXrrpStatsInstancePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePktsRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePktsRcvd.setDescription('This value contains the number of XRRP packets received by the virtual router (XRRP instance).')
hpicfXrrpStatsInstancePktsXmtd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePktsXmtd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePktsXmtd.setDescription('This value contains the number of XRRP packets transmitted by the virtual router (XRRP instance).')
hpicfXrrpStatsInstanceVersionErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceVersionErrPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceVersionErrPkts.setDescription('This value contains the number of XRRP packets received by the virtual router (XRRP instance) with incompatible version value in either the XRRP or VRRP portion of the header.')
hpicfXrrpStatsInstancePriorityZeroPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePriorityZeroPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePriorityZeroPktsRcvd.setDescription('This value contains the number of XRRP packets received with the priority set to 0 on the virtual router (i.e. the current master is giving up control).')
hpicfXrrpStatsInstancePriorityZeroPktsXmtd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePriorityZeroPktsXmtd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstancePriorityZeroPktsXmtd.setDescription('This value contains the number of XRRP packets transmitted by the virtual router with the priority set to 0 (i.e. the virtual router is giving up control).')
hpicfXrrpStatsInstanceMismatchedIpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceMismatchedIpPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceMismatchedIpPkts.setDescription('This value contains the number of XRRP packets received by the virtual router with an unknown mismatched IP addresses. The Backup router will automatically accept the addresses from a router with a priority of 255 (i.e. the virtual router owner).')
hpicfXrrpStatsInstanceAuthFailPktsReject = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceAuthFailPktsReject.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceAuthFailPktsReject.setDescription('This value contains the number of rejected by this virtual router XRRP packets due to authentication failure (i.e. mismatched passwords).')
hpicfXrrpStatsInstanceIntervalMismatchPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceIntervalMismatchPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceIntervalMismatchPkts.setDescription('This value contains the number of XRRP packets with the advertisement interval is a mismatch. The receiving router will change to that of the transmitter but logs a warning.')
hpicfXrrpStatsInstanceCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 12, 1, 9), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceCreateTime.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsInstanceCreateTime.setDescription('The value of sysUpTime when this virtual router entry was last activated. This object allows to a management station to detect deletion and recreation cycles between polls and thus detect discontinuity in the above statistics counters.')
hpicfXrrpStatsRcTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13), )
if mibBuilder.loadTexts: hpicfXrrpStatsRcTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcTable.setDescription('A table that contains statistics information for virtual router coordinators in the domain.')
hpicfXrrpStatsRcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1), ).setIndexNames((0, "HP-ICF-XRRP", "hpicfXrrpStatsRcRouterId"))
if mibBuilder.loadTexts: hpicfXrrpStatsRcEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcEntry.setDescription('Information about a specific router coordinator.')
hpicfXrrpStatsRcRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 1), XrrpRouterId())
if mibBuilder.loadTexts: hpicfXrrpStatsRcRouterId.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcRouterId.setDescription('The router coordinator number.')
hpicfXrrpStatsRcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("failback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcOperState.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcOperState.setDescription('The current operational state of the router coordinator.')
hpicfXrrpStatsRcType1PktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcType1PktsRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcType1PktsRcvd.setDescription('This value contains the number of type 1 XRRP packets received by the router.')
hpicfXrrpStatsRcType1PktsXmtd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcType1PktsXmtd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcType1PktsXmtd.setDescription('This value contains the number of type 1 XRRP packets transmitted by the router.')
hpicfXrrpStatsRcType2PktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcType2PktsRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcType2PktsRcvd.setDescription('This value contains the number of type 2 XRRP packets received by the router.')
hpicfXrrpStatsRcType2PktsXmtd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcType2PktsXmtd.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcType2PktsXmtd.setDescription('This value contains the number of type 2 XRRP packets transmitted by the router.')
hpicfXrrpStatsRcBecomeMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcBecomeMaster.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcBecomeMaster.setDescription('The total number of times that this router has become a master.')
hpicfXrrpStatsRcMasterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcMasterTime.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcMasterTime.setDescription('Duration as master (in seconds).')
hpicfXrrpStatsRcUnknownVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcUnknownVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcUnknownVlanId.setDescription('The number of packets received by this virtual router that do not map to a known VLAN ID where an XRRP instance is supported.')
hpicfXrrpStatsRcCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 3, 13, 1, 10), LastCreateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXrrpStatsRcCreateTime.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsRcCreateTime.setDescription('The value of sysUpTime when this router coordinator entry was last activated. This object allows to a management station to detect deletion and recreation cycles between polls and thus detect discontinuity in the above statistics counters.')
hpicfXrrpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 1))
hpicfXrrpNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 1, 0))
hpicfXrrpNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 1, 1))
hpicfXrrpTrapAuthErrorType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalidAuthType", 1), ("authTypeMismatch", 2), ("authFailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfXrrpTrapAuthErrorType.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpTrapAuthErrorType.setDescription('Potential types of configuration conflicts. Used by hpicfXrrpTrapAuthFailure trap.')
hpicfXrrpTrapStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 1, 0, 1)).setObjects(("HP-ICF-XRRP", "hpicfXrrpDomain"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcRouterId"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcOperState"))
if mibBuilder.loadTexts: hpicfXrrpTrapStateChange.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpTrapStateChange.setDescription("This trap indicates that a XRRP router has changed state. The trap contains the domain number, the router coordinator number and state value for the change. This trap is being controlled by the state of 'hpicfXrrpTrapCntl' object.")
hpicfXrrpTrapAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 1, 0, 2)).setObjects(("HP-ICF-XRRP", "hpicfXrrpDomain"), ("HP-ICF-XRRP", "hpicfXrrpRouterId"), ("HP-ICF-XRRP", "hpicfXrrpInstanceRouterId"), ("HP-ICF-XRRP", "hpicfXrrpInstanceVlanId"), ("HP-ICF-XRRP", "hpicfXrrpTrapAuthErrorType"))
if mibBuilder.loadTexts: hpicfXrrpTrapAuthFailure.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpTrapAuthFailure.setDescription("This trap indicates that the authentication error occurred on a XRRP VLAN. The trap contains the domain number, this router number, instance id (owner router number and VLAN ID) that detected the error and type of the authentication error. This trap is being controlled by the state of 'hpicfXrrpTrapCntl' object.")
hpicfXrrpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 1))
hpicfXrrpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2))
hpicfXrrpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 1, 1)).setObjects(("HP-ICF-XRRP", "hpicfXrrpOperGroup"), ("HP-ICF-XRRP", "hpicfXrrpStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpMIBCompliance = hpicfXrrpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXrrpMIBCompliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED *********')
hpicfXrrpMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 1, 2)).setObjects(("HP-ICF-XRRP", "hpicfXrrpOperGroup1"), ("HP-ICF-XRRP", "hpicfXrrpStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpMIBCompliance1 = hpicfXrrpMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpMIBCompliance1.setDescription('The core compliance statement for XRRP implementation.')
hpicfXrrpMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 1, 3)).setObjects(("HP-ICF-XRRP", "hpicfXrrpOperGroup1"), ("HP-ICF-XRRP", "hpicfXrrpOperGroup2"), ("HP-ICF-XRRP", "hpicfXrrpStatsGroup"), ("HP-ICF-XRRP", "hpicfXrrpNotificationGroup"), ("HP-ICF-XRRP", "hpicfXrrpTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpMIBCompliance2 = hpicfXrrpMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpMIBCompliance2.setDescription('The core compliance statement for XRRP implementation.')
hpicfXrrpOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2, 1)).setObjects(("HP-ICF-XRRP", "hpicfXrrpVersion"), ("HP-ICF-XRRP", "hpicfXrrpAdminState"), ("HP-ICF-XRRP", "hpicfXrrpDomain"), ("HP-ICF-XRRP", "hpicfXrrpRouterId"), ("HP-ICF-XRRP", "hpicfXrrpTrapCntl"), ("HP-ICF-XRRP", "hpicfXrrpInstanceOperState"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAuthType"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAuthKey"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAdvertiseInterval"), ("HP-ICF-XRRP", "hpicfXrrpInstanceUpTime"), ("HP-ICF-XRRP", "hpicfXrrpInstanceRowStatus"), ("HP-ICF-XRRP", "hpicfXrrpAssoIpMask"), ("HP-ICF-XRRP", "hpicfXrrpAssoRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpOperGroup = hpicfXrrpOperGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfXrrpOperGroup.setDescription('********* THIS GROUP IS DEPRECATED *********')
hpicfXrrpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2, 2)).setObjects(("HP-ICF-XRRP", "hpicfXrrpStatsXrrpMacAddress"), ("HP-ICF-XRRP", "hpicfXrrpStatsMacAndMask"), ("HP-ICF-XRRP", "hpicfXrrpStatsPktsRcvd"), ("HP-ICF-XRRP", "hpicfXrrpStatsNotDomainPktsReject"), ("HP-ICF-XRRP", "hpicfXrrpStatsCheckSumPktsReject"), ("HP-ICF-XRRP", "hpicfXrrpStatsBadValuePktsReject"), ("HP-ICF-XRRP", "hpicfXrrpStatsCorruptedPktsReject"), ("HP-ICF-XRRP", "hpicfXrrpStatsVersionErrorPktsReject"), ("HP-ICF-XRRP", "hpicfXrrpStatsBcastArpsXmtd"), ("HP-ICF-XRRP", "hpicfXrrpStatsUpTime"), ("HP-ICF-XRRP", "hpicfXrrpStatsProtocolCreateTime"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstancePktsRcvd"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstancePktsXmtd"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstanceVersionErrPkts"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstancePriorityZeroPktsRcvd"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstancePriorityZeroPktsXmtd"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstanceMismatchedIpPkts"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstanceAuthFailPktsReject"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstanceIntervalMismatchPkts"), ("HP-ICF-XRRP", "hpicfXrrpStatsInstanceCreateTime"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcOperState"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcType1PktsRcvd"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcType1PktsXmtd"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcType2PktsRcvd"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcType2PktsXmtd"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcBecomeMaster"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcMasterTime"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcUnknownVlanId"), ("HP-ICF-XRRP", "hpicfXrrpStatsRcCreateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpStatsGroup = hpicfXrrpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpStatsGroup.setDescription('Conformance group for XRRP statistics.')
hpicfXrrpTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2, 3)).setObjects(("HP-ICF-XRRP", "hpicfXrrpTrapAuthErrorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpTrapGroup = hpicfXrrpTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpTrapGroup.setDescription('Conformance group for objects contained in XRRP notifications.')
hpicfXrrpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2, 4)).setObjects(("HP-ICF-XRRP", "hpicfXrrpTrapStateChange"), ("HP-ICF-XRRP", "hpicfXrrpTrapAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpNotificationGroup = hpicfXrrpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpNotificationGroup.setDescription('The XRRP MIB Notification Group.')
hpicfXrrpOperGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2, 5)).setObjects(("HP-ICF-XRRP", "hpicfXrrpVersion"), ("HP-ICF-XRRP", "hpicfXrrpAdminState"), ("HP-ICF-XRRP", "hpicfXrrpDomain"), ("HP-ICF-XRRP", "hpicfXrrpRouterId"), ("HP-ICF-XRRP", "hpicfXrrpTrapCntl"), ("HP-ICF-XRRP", "hpicfXrrpInstanceOperState"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAuthType"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAuthKey"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAdvertiseInterval"), ("HP-ICF-XRRP", "hpicfXrrpInstanceUpTime"), ("HP-ICF-XRRP", "hpicfXrrpInstanceRowStatus"), ("HP-ICF-XRRP", "hpicfXrrpAssoIpMask"), ("HP-ICF-XRRP", "hpicfXrrpAssoRowStatus"), ("HP-ICF-XRRP", "hpicfXrrpTransferControl"), ("HP-ICF-XRRP", "hpicfXrrpInfiniteFailback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpOperGroup1 = hpicfXrrpOperGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpOperGroup1.setDescription('Conformance group for XRRP operations.')
hpicfXrrpOperGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 18, 4, 2, 6)).setObjects(("HP-ICF-XRRP", "hpicfXrrpVersion"), ("HP-ICF-XRRP", "hpicfXrrpAdminState"), ("HP-ICF-XRRP", "hpicfXrrpDomain"), ("HP-ICF-XRRP", "hpicfXrrpRouterId"), ("HP-ICF-XRRP", "hpicfXrrpFailback"), ("HP-ICF-XRRP", "hpicfXrrpTrapCntl"), ("HP-ICF-XRRP", "hpicfXrrpInstanceOperState"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAuthType"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAuthKey"), ("HP-ICF-XRRP", "hpicfXrrpInstanceAdvertiseInterval"), ("HP-ICF-XRRP", "hpicfXrrpInstanceUpTime"), ("HP-ICF-XRRP", "hpicfXrrpInstanceRowStatus"), ("HP-ICF-XRRP", "hpicfXrrpAssoIpMask"), ("HP-ICF-XRRP", "hpicfXrrpAssoRowStatus"), ("HP-ICF-XRRP", "hpicfXrrpTransferControl"), ("HP-ICF-XRRP", "hpicfXrrpInfiniteFailback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXrrpOperGroup2 = hpicfXrrpOperGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfXrrpOperGroup2.setDescription('Conformance group for XRRP operations.')
mibBuilder.exportSymbols("HP-ICF-XRRP", hpicfXrrpStatsBadValuePktsReject=hpicfXrrpStatsBadValuePktsReject, hpicfXrrpStatsCheckSumPktsReject=hpicfXrrpStatsCheckSumPktsReject, hpicfXrrpInstanceEntry=hpicfXrrpInstanceEntry, hpicfXrrpStatsRcMasterTime=hpicfXrrpStatsRcMasterTime, hpicfXrrpStatsInstancePktsRcvd=hpicfXrrpStatsInstancePktsRcvd, hpicfXrrpInstanceAdvertiseInterval=hpicfXrrpInstanceAdvertiseInterval, hpicfXrrpStatsProtocolCreateTime=hpicfXrrpStatsProtocolCreateTime, hpicfXrrpInfiniteFailback=hpicfXrrpInfiniteFailback, hpicfXrrpStatsInstancePriorityZeroPktsRcvd=hpicfXrrpStatsInstancePriorityZeroPktsRcvd, hpicfXrrpNotificationsObjects=hpicfXrrpNotificationsObjects, hpicfXrrpStatsInstanceIntervalMismatchPkts=hpicfXrrpStatsInstanceIntervalMismatchPkts, hpicfXrrpStatsRcType1PktsXmtd=hpicfXrrpStatsRcType1PktsXmtd, hpicfXrrpInstanceAssoIpAddrEntry=hpicfXrrpInstanceAssoIpAddrEntry, hpicfXrrpStatsNotDomainPktsReject=hpicfXrrpStatsNotDomainPktsReject, hpicfXrrpOperGroup1=hpicfXrrpOperGroup1, hpicfXrrpConformance=hpicfXrrpConformance, hpicfXrrpTransferControl=hpicfXrrpTransferControl, hpicfXrrpStatsRcType2PktsRcvd=hpicfXrrpStatsRcType2PktsRcvd, hpicfXrrpStatsMacAndMask=hpicfXrrpStatsMacAndMask, hpicfXrrpOperations=hpicfXrrpOperations, hpicfXrrpTrapAuthErrorType=hpicfXrrpTrapAuthErrorType, hpicfXrrpInstanceVlanId=hpicfXrrpInstanceVlanId, hpicfXrrpFailback=hpicfXrrpFailback, hpicfXrrpStatsInstancePktsXmtd=hpicfXrrpStatsInstancePktsXmtd, hpicfXrrpNotifications=hpicfXrrpNotifications, hpicfXrrpAssoIpMask=hpicfXrrpAssoIpMask, hpicfXrrpAssoIpAddr=hpicfXrrpAssoIpAddr, hpicfXrrpInstanceAuthType=hpicfXrrpInstanceAuthType, hpicfXrrpMIBGroups=hpicfXrrpMIBGroups, hpicfXrrpInstanceAuthKey=hpicfXrrpInstanceAuthKey, PYSNMP_MODULE_ID=hpicfXrrpMIB, hpicfXrrpRouterId=hpicfXrrpRouterId, hpicfXrrpInstanceOperState=hpicfXrrpInstanceOperState, hpicfXrrpOperGroup=hpicfXrrpOperGroup, hpicfXrrpStatsBcastArpsXmtd=hpicfXrrpStatsBcastArpsXmtd, XrrpRouterId=XrrpRouterId, hpicfXrrpStatsCorruptedPktsReject=hpicfXrrpStatsCorruptedPktsReject, hpicfXrrpStatsInstanceAuthFailPktsReject=hpicfXrrpStatsInstanceAuthFailPktsReject, hpicfXrrpInstanceRowStatus=hpicfXrrpInstanceRowStatus, hpicfXrrpStatistics=hpicfXrrpStatistics, hpicfXrrpAssoRowStatus=hpicfXrrpAssoRowStatus, hpicfXrrpMIBCompliances=hpicfXrrpMIBCompliances, hpicfXrrpStatsInstancePriorityZeroPktsXmtd=hpicfXrrpStatsInstancePriorityZeroPktsXmtd, hpicfXrrpStatsRcUnknownVlanId=hpicfXrrpStatsRcUnknownVlanId, hpicfXrrpInstancesTable=hpicfXrrpInstancesTable, hpicfXrrpNotificationsPrefix=hpicfXrrpNotificationsPrefix, hpicfXrrpMIBCompliance=hpicfXrrpMIBCompliance, hpicfXrrpVersion=hpicfXrrpVersion, hpicfXrrpStatsInstancesTable=hpicfXrrpStatsInstancesTable, hpicfXrrpStatsVersionErrorPktsReject=hpicfXrrpStatsVersionErrorPktsReject, hpicfXrrpStatsPktsRcvd=hpicfXrrpStatsPktsRcvd, hpicfXrrpOperGroup2=hpicfXrrpOperGroup2, hpicfXrrpStatsRcType1PktsRcvd=hpicfXrrpStatsRcType1PktsRcvd, hpicfXrrpDomain=hpicfXrrpDomain, hpicfXrrpTrapGroup=hpicfXrrpTrapGroup, hpicfXrrpStatsXrrpMacAddress=hpicfXrrpStatsXrrpMacAddress, hpicfXrrpStatsInstanceMismatchedIpPkts=hpicfXrrpStatsInstanceMismatchedIpPkts, hpicfXrrpStatsRcType2PktsXmtd=hpicfXrrpStatsRcType2PktsXmtd, hpicfXrrpStatsRcCreateTime=hpicfXrrpStatsRcCreateTime, hpicfXrrpTrapStateChange=hpicfXrrpTrapStateChange, hpicfXrrpAdminState=hpicfXrrpAdminState, hpicfXrrpStatsRcOperState=hpicfXrrpStatsRcOperState, hpicfXrrpStatsRcBecomeMaster=hpicfXrrpStatsRcBecomeMaster, hpicfXrrpStatsInstanceVersionErrPkts=hpicfXrrpStatsInstanceVersionErrPkts, hpicfXrrpMIBCompliance2=hpicfXrrpMIBCompliance2, hpicfXrrpStatsInstanceCreateTime=hpicfXrrpStatsInstanceCreateTime, hpicfXrrpInstanceRouterId=hpicfXrrpInstanceRouterId, hpicfXrrpTrapAuthFailure=hpicfXrrpTrapAuthFailure, hpicfXrrpStatsGroup=hpicfXrrpStatsGroup, hpicfXrrpNotificationGroup=hpicfXrrpNotificationGroup, hpicfXrrpStatsRcRouterId=hpicfXrrpStatsRcRouterId, hpicfXrrpTrapCntl=hpicfXrrpTrapCntl, hpicfXrrpStatsRcTable=hpicfXrrpStatsRcTable, hpicfXrrpStatsInstanceEntry=hpicfXrrpStatsInstanceEntry, hpicfXrrpInstanceAssoIpAddrTable=hpicfXrrpInstanceAssoIpAddrTable, hpicfXrrpStatsRcEntry=hpicfXrrpStatsRcEntry, hpicfXrrpInstanceUpTime=hpicfXrrpInstanceUpTime, hpicfXrrpMIB=hpicfXrrpMIB, hpicfXrrpStatsUpTime=hpicfXrrpStatsUpTime, hpicfXrrpMIBCompliance1=hpicfXrrpMIBCompliance1)
