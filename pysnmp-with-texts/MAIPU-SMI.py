#
# PySNMP MIB module MAIPU-SMI (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MAIPU-SMI
# Produced by pysmi-0.3.4 at Wed May  1 14:09:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Integer32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, iso, enterprises, Counter32, Gauge32, IpAddress, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Integer32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "iso", "enterprises", "Counter32", "Gauge32", "IpAddress", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
maipu = ModuleIdentity((1, 3, 6, 1, 4, 1, 5651))
maipu.setRevisions(('1901-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: maipu.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: maipu.setLastUpdated('0101010000Z')
if mibBuilder.loadTexts: maipu.setOrganization('Maipu Data Communication, Inc.')
if mibBuilder.loadTexts: maipu.setContactInfo('E-mail: maipu2@mail.sc.cninfo.net')
if mibBuilder.loadTexts: maipu.setDescription('The Structure of Management Information for Maipu.')
mpProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 1))
if mibBuilder.loadTexts: mpProducts.setStatus('current')
if mibBuilder.loadTexts: mpProducts.setDescription('products is the root OBJECT IDENTIFIER from which sysObjectID values are assigned. Actual values are defined in MAIPU-PRODUCTS-MIB.')
mpTrapObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 2))
if mibBuilder.loadTexts: mpTrapObject.setStatus('current')
if mibBuilder.loadTexts: mpTrapObject.setDescription('main subtree for maipu Traps.')
mpMgmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 3))
if mibBuilder.loadTexts: mpMgmt.setStatus('current')
if mibBuilder.loadTexts: mpMgmt.setDescription('mpMgmt is the main subtree for implemented MIB branch. Note that different type of maipu products may have the same protocol implementation, so we put such content into here so that every types could utilize corresponding module.')
mpExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 4))
if mibBuilder.loadTexts: mpExperiment.setStatus('current')
if mibBuilder.loadTexts: mpExperiment.setDescription('maipuExperiment provides a root object identifier from which experimental mibs may be temporarily based. MIBs are typicially based here if they fall in one of two categories: 1) IETF work-in-process mibs which have not been assigned a permanent object identifier by the IANA. 2) Maipu work-in-process which has not been assigned a permanent object identifier by the maipu assigned number authority, typicially because the mib is not ready for deployment. NOTE: support for mibs in the maipuExperiment subtree will be erased when a permanent object identifier assignment is made.')
mpSecurity = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 5))
if mibBuilder.loadTexts: mpSecurity.setStatus('current')
if mibBuilder.loadTexts: mpSecurity.setDescription('mpSecurity is the main subtree for security product MIB branch.')
mpMgmt2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6))
if mibBuilder.loadTexts: mpMgmt2.setStatus('current')
if mibBuilder.loadTexts: mpMgmt2.setDescription('mpMgmt2 is the new subtree for implemented MIB branch.')
mpSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 1))
if mibBuilder.loadTexts: mpSystem.setStatus('current')
if mibBuilder.loadTexts: mpSystem.setDescription('mpSystem is the subtree for system mib.')
mpRouterTech = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 2))
if mibBuilder.loadTexts: mpRouterTech.setStatus('current')
if mibBuilder.loadTexts: mpRouterTech.setDescription('mpLayer2 is the subtree for Layer3 MIB.')
mpSwitchTech = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 3))
if mibBuilder.loadTexts: mpSwitchTech.setStatus('current')
if mibBuilder.loadTexts: mpSwitchTech.setDescription('mpLayer3 is the subtree for Layer2 MIB.')
mpVoipTech = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 4))
if mibBuilder.loadTexts: mpVoipTech.setStatus('current')
if mibBuilder.loadTexts: mpVoipTech.setDescription('mpVoip is the subtree for maipu voip MIB.')
mpSecurityTech = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 5))
if mibBuilder.loadTexts: mpSecurityTech.setStatus('current')
if mibBuilder.loadTexts: mpSecurityTech.setDescription('mpSec is the subtree for maipu security MIB')
mpApp = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 6))
if mibBuilder.loadTexts: mpApp.setStatus('current')
if mibBuilder.loadTexts: mpApp.setDescription('mpApp is the subtree for maipu application MIB.')
mpOtherSys = ObjectIdentity((1, 3, 6, 1, 4, 1, 5651, 6, 7))
if mibBuilder.loadTexts: mpOtherSys.setStatus('current')
if mibBuilder.loadTexts: mpOtherSys.setDescription('mpOtherSys is the subtree for third part MIB.')
mibBuilder.exportSymbols("MAIPU-SMI", mpTrapObject=mpTrapObject, mpVoipTech=mpVoipTech, mpMgmt2=mpMgmt2, mpSystem=mpSystem, maipu=maipu, mpMgmt=mpMgmt, mpSecurityTech=mpSecurityTech, PYSNMP_MODULE_ID=maipu, mpSwitchTech=mpSwitchTech, mpExperiment=mpExperiment, mpApp=mpApp, mpRouterTech=mpRouterTech, mpSecurity=mpSecurity, mpOtherSys=mpOtherSys, mpProducts=mpProducts)
