#
# PySNMP MIB module MY-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
IfIndex, ConfigStatus = mibBuilder.importSymbols("MY-TC", "IfIndex", "ConfigStatus")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, Integer32, NotificationType, ObjectIdentity, ModuleIdentity, Bits, Unsigned32, iso, Gauge32, IpAddress, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "Integer32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Bits", "Unsigned32", "iso", "Gauge32", "IpAddress", "Counter64", "MibIdentifier")
DisplayString, MacAddress, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TruthValue", "RowStatus")
mySecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6))
mySecurityMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mySecurityMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: mySecurityMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: mySecurityMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: mySecurityMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: mySecurityMIB.setDescription('This module defines my security mibs.')
mySecurityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1))
myUserManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1))
mySecurityAddressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2))
myPortSecrrityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3))
myEnableSnmpAgent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myEnableSnmpAgent.setStatus('current')
if mibBuilder.loadTexts: myEnableSnmpAgent.setDescription("Enabled indicate that user can manage switch by snmp agent, disabled indicate that user can't manage switch by snmp agent.")
myEnableWeb = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myEnableWeb.setStatus('current')
if mibBuilder.loadTexts: myEnableWeb.setDescription("Enabled indicate that user can manage switch by web, disabled indicate that user can't manage switch by web.")
myEnableTelnet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myEnableTelnet.setStatus('current')
if mibBuilder.loadTexts: myEnableTelnet.setDescription("Enabled indicate that user can manage switch by telnet, disabled indicate that user can't manage switch by telnet.")
myTelnetHostIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 4), )
if mibBuilder.loadTexts: myTelnetHostIpTable.setStatus('current')
if mibBuilder.loadTexts: myTelnetHostIpTable.setDescription("The table of telnet client's IP address, only these hostes can access the telnet server.")
myTelnetHostIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 4, 1), ).setIndexNames((0, "MY-SECURITY-MIB", "myTelnetHostIpAddress"))
if mibBuilder.loadTexts: myTelnetHostIpEntry.setStatus('current')
if mibBuilder.loadTexts: myTelnetHostIpEntry.setDescription('The entry of telnet host IP address table.')
myTelnetHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myTelnetHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: myTelnetHostIpAddress.setDescription("The telnet client's IP address, Only these hostes can access the telnet server")
myTelnetHostIpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myTelnetHostIpEnable.setStatus('current')
if mibBuilder.loadTexts: myTelnetHostIpEnable.setDescription("The telnet client's IP address enable state")
myWebHostIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 5), )
if mibBuilder.loadTexts: myWebHostIpTable.setStatus('current')
if mibBuilder.loadTexts: myWebHostIpTable.setDescription("The table of web client's IP address, only these hostes can access the web server.")
myWebHostIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 5, 1), ).setIndexNames((0, "MY-SECURITY-MIB", "myWebHostIpAddress"))
if mibBuilder.loadTexts: myWebHostIpEntry.setStatus('current')
if mibBuilder.loadTexts: myWebHostIpEntry.setDescription('The entry of web host IP address table.')
myWebHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myWebHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: myWebHostIpAddress.setDescription("The web client's IP address, Only these hostes can access the web server")
myWebHostIpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myWebHostIpEnable.setStatus('current')
if mibBuilder.loadTexts: myWebHostIpEnable.setDescription("The web client's IP address enable state")
mySecurityAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1), )
if mibBuilder.loadTexts: mySecurityAddressTable.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressTable.setDescription('The table of security address.')
mySecurityAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1), ).setIndexNames((0, "MY-SECURITY-MIB", "mySecurityAddressFdbId"), (0, "MY-SECURITY-MIB", "mySecurityAddressAddress"), (0, "MY-SECURITY-MIB", "mySecurityAddressPort"), (0, "MY-SECURITY-MIB", "mySecurityAddressIpAddr"))
if mibBuilder.loadTexts: mySecurityAddressEntry.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressEntry.setDescription('The entry of Security address table.')
mySecurityAddressFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mySecurityAddressFdbId.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressFdbId.setDescription('The VID of vlan which the security address blongs to.')
mySecurityAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: mySecurityAddressAddress.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressAddress.setDescription('The MAC address of the security address.')
mySecurityAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 3), IfIndex())
if mibBuilder.loadTexts: mySecurityAddressPort.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressPort.setDescription('The interface which the security address blongs to.')
mySecurityAddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 4), IpAddress())
if mibBuilder.loadTexts: mySecurityAddressIpAddr.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressIpAddr.setDescription("The IP address which the security address bind.It's meaning only when mySecurityAddressIfBindIp is true.")
mySecurityAddressIfBindIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySecurityAddressIfBindIp.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressIfBindIp.setDescription('this object offer the means whether security address will bind IP.')
mySecurityAddressRemainAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySecurityAddressRemainAge.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressRemainAge.setDescription('The remain age of the security address, in units of minute.')
mySecurityAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secureConfigured", 1), ("dynamicLearn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySecurityAddressType.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressType.setDescription('The type of the security address')
mySecurityAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mySecurityAddressStatus.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressStatus.setDescription('entry status of this entry. and the means in this enviraments can reffer to the text-convention definition of the RowStatus.')
myBindAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 2), )
if mibBuilder.loadTexts: myBindAddressTable.setStatus('current')
if mibBuilder.loadTexts: myBindAddressTable.setDescription('IP-MAC bind table. The source MAC address must be bound when the switch receives the frame with source IP address defined in this table. Otherwise, the frame will be discarded.')
myBindAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 2, 1), ).setIndexNames((0, "MY-SECURITY-MIB", "myBindAddressIpAddr"))
if mibBuilder.loadTexts: myBindAddressEntry.setStatus('current')
if mibBuilder.loadTexts: myBindAddressEntry.setDescription('The entry of Bind address table.')
myBindAddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: myBindAddressIpAddr.setStatus('current')
if mibBuilder.loadTexts: myBindAddressIpAddr.setDescription("The IP address which the security address bind.It's meaning only when myBindAddressIfBindIp is true.")
myBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myBindMacAddress.setStatus('current')
if mibBuilder.loadTexts: myBindMacAddress.setDescription('The MAC address of the security address.')
myBindAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 2, 2, 1, 3), ConfigStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myBindAddressStatus.setStatus('current')
if mibBuilder.loadTexts: myBindAddressStatus.setDescription("entry status. Setting this value to 'invalid' will remove this entry")
myPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1), )
if mibBuilder.loadTexts: myPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityTable.setDescription('list of port security configuration objects.')
myPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1), ).setIndexNames((0, "MY-SECURITY-MIB", "myPortSecurityPortIndex"))
if mibBuilder.loadTexts: myPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityEntry.setDescription('Entry contains port security configurations.')
myPortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPortSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityPortIndex.setDescription('')
myPortSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPortSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityStatus.setDescription('')
myPortSecurViolationType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("violation-protect", 1), ("violation-restrict", 2), ("violation-shutdown", 3))).clone('violation-protect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPortSecurViolationType.setStatus('current')
if mibBuilder.loadTexts: myPortSecurViolationType.setDescription("this object define 3 grades of port security: violation-protect(1): normal security grade, indicate that when the a datagram received on a port with illegal MAC address will be discarded but not send trap, legal and illegal MAC to a port security is defined by per port's security below. violation-restrict(2): normal security grade, indicate that when the a datagram received on a port with illegal MAC address will be discarded and send trap, legal and illegal MAC to a port security is defined by per port's security below. violation-shutdown(3): strict security grade, indicate that when the a datagram received on a port with illegal MAC address, the port will be disabled for the violation of the port's security and send trap.")
myPortSecurityAddrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPortSecurityAddrNum.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityAddrNum.setDescription("This value means the address number threshold of this port. A new address want to add to the port address will be refused when address num exceed this value. This value is valid when myPortSecurityStatus is 'disabled'")
myPortSecurityAddrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPortSecurityAddrAge.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityAddrAge.setDescription('Aging time in units of minute of security address of interface')
myPortStaticSecurAddrIfAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myPortStaticSecurAddrIfAge.setStatus('current')
if mibBuilder.loadTexts: myPortStaticSecurAddrIfAge.setDescription('This object offer the means whether enable static configured security address aging.')
myPortSecurityAddressCurrentNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPortSecurityAddressCurrentNum.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityAddressCurrentNum.setDescription('Current number of the security address of interface.')
myPortStaticSecurAddrCurrentNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPortStaticSecurAddrCurrentNum.setStatus('current')
if mibBuilder.loadTexts: myPortStaticSecurAddrCurrentNum.setDescription('Current number of the static configured security address of interface.')
myPortSecurityIpDistrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3), ("unSpecified", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPortSecurityIpDistrMode.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityIpDistrMode.setDescription('IP Distrute Mode (0:Static-only mode, 1:Dynamic-only mode, 2:Dynamic and Static mode, 3:Unspecified mode)')
mySecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 2))
portSecurityViolate = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 2, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portSecurityViolate.setStatus('current')
if mibBuilder.loadTexts: portSecurityViolate.setDescription('the mac lock violate trap indicates that if you have set the threshold number of learned addresses from a port, and their comes a new address from the port, but the addresses for the port is already full.')
mySecurityMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3))
mySecurityMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3, 1))
mySecurityMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3, 2))
mySecurityMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3, 1, 1)).setObjects(("MY-SECURITY-MIB", "myUserManageMIBGroup"), ("MY-SECURITY-MIB", "mySecurityAddressMIBGroup"), ("MY-SECURITY-MIB", "myPortSecurityMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySecurityMIBCompliance = mySecurityMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mySecurityMIBCompliance.setDescription('The compliance statement for entities which implement the My Security MIB')
myUserManageMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3, 2, 1)).setObjects(("MY-SECURITY-MIB", "myEnableSnmpAgent"), ("MY-SECURITY-MIB", "myEnableWeb"), ("MY-SECURITY-MIB", "myEnableTelnet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myUserManageMIBGroup = myUserManageMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myUserManageMIBGroup.setDescription('A collection of objects providing status snmp and web and telnet management agent to a My agent.')
mySecurityAddressMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3, 2, 2)).setObjects(("MY-SECURITY-MIB", "mySecurityAddressIfBindIp"), ("MY-SECURITY-MIB", "mySecurityAddressRemainAge"), ("MY-SECURITY-MIB", "mySecurityAddressType"), ("MY-SECURITY-MIB", "mySecurityAddressStatus"), ("MY-SECURITY-MIB", "myBindMacAddress"), ("MY-SECURITY-MIB", "myBindAddressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySecurityAddressMIBGroup = mySecurityAddressMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mySecurityAddressMIBGroup.setDescription('A collection of objects providing security address to a My agent.')
myPortSecurityMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 6, 3, 2, 3)).setObjects(("MY-SECURITY-MIB", "myPortSecurityPortIndex"), ("MY-SECURITY-MIB", "myPortSecurityStatus"), ("MY-SECURITY-MIB", "myPortSecurViolationType"), ("MY-SECURITY-MIB", "myPortSecurityAddrNum"), ("MY-SECURITY-MIB", "myPortSecurityAddrAge"), ("MY-SECURITY-MIB", "myPortStaticSecurAddrIfAge"), ("MY-SECURITY-MIB", "myPortSecurityAddressCurrentNum"), ("MY-SECURITY-MIB", "myPortStaticSecurAddrCurrentNum"), ("MY-SECURITY-MIB", "myPortSecurityIpDistrMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myPortSecurityMIBGroup = myPortSecurityMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myPortSecurityMIBGroup.setDescription('A collection of objects providing port security to a My agent.')
mibBuilder.exportSymbols("MY-SECURITY-MIB", mySecurityAddressAddress=mySecurityAddressAddress, mySecurityMIBCompliances=mySecurityMIBCompliances, mySecurityAddressIpAddr=mySecurityAddressIpAddr, myTelnetHostIpTable=myTelnetHostIpTable, myBindAddressEntry=myBindAddressEntry, myPortSecurityStatus=myPortSecurityStatus, myEnableWeb=myEnableWeb, mySecurityTraps=mySecurityTraps, mySecurityMIBObjects=mySecurityMIBObjects, myBindAddressIpAddr=myBindAddressIpAddr, myPortStaticSecurAddrCurrentNum=myPortStaticSecurAddrCurrentNum, mySecurityMIBGroups=mySecurityMIBGroups, mySecurityMIBCompliance=mySecurityMIBCompliance, myBindMacAddress=myBindMacAddress, mySecurityAddressTable=mySecurityAddressTable, myEnableTelnet=myEnableTelnet, myWebHostIpEntry=myWebHostIpEntry, myWebHostIpEnable=myWebHostIpEnable, mySecurityAddressPort=mySecurityAddressPort, myBindAddressStatus=myBindAddressStatus, myPortSecurityAddrNum=myPortSecurityAddrNum, myPortStaticSecurAddrIfAge=myPortStaticSecurAddrIfAge, mySecurityAddressRemainAge=mySecurityAddressRemainAge, myWebHostIpTable=myWebHostIpTable, myPortSecurityAddressCurrentNum=myPortSecurityAddressCurrentNum, mySecurityMIB=mySecurityMIB, myUserManageMIBGroup=myUserManageMIBGroup, myTelnetHostIpEntry=myTelnetHostIpEntry, myBindAddressTable=myBindAddressTable, mySecurityAddressObjects=mySecurityAddressObjects, myPortSecurityPortIndex=myPortSecurityPortIndex, myTelnetHostIpAddress=myTelnetHostIpAddress, myPortSecrrityObjects=myPortSecrrityObjects, PYSNMP_MODULE_ID=mySecurityMIB, myEnableSnmpAgent=myEnableSnmpAgent, mySecurityAddressType=mySecurityAddressType, myPortSecurViolationType=myPortSecurViolationType, mySecurityAddressEntry=mySecurityAddressEntry, portSecurityViolate=portSecurityViolate, mySecurityMIBConformance=mySecurityMIBConformance, myTelnetHostIpEnable=myTelnetHostIpEnable, myPortSecurityMIBGroup=myPortSecurityMIBGroup, mySecurityAddressIfBindIp=mySecurityAddressIfBindIp, myUserManagementObjects=myUserManagementObjects, mySecurityAddressMIBGroup=mySecurityAddressMIBGroup, mySecurityAddressFdbId=mySecurityAddressFdbId, myWebHostIpAddress=myWebHostIpAddress, myPortSecurityTable=myPortSecurityTable, mySecurityAddressStatus=mySecurityAddressStatus, myPortSecurityIpDistrMode=myPortSecurityIpDistrMode, myPortSecurityAddrAge=myPortSecurityAddrAge, myPortSecurityEntry=myPortSecurityEntry)
