#
# PySNMP MIB module BIANCA-BRICK-GRE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-GRE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, TimeTicks, Integer32, iso, Counter64, ObjectIdentity, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter32, ModuleIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "TimeTicks", "Integer32", "iso", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter32", "ModuleIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 23))
greIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 23, 5), )
if mibBuilder.loadTexts: greIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: greIfTable.setDescription('This Table contains configuration information for GRE interfaces. Each time a new entry is created here, a corresponding entry is created in the ifTable and biboAdmDeviceTable.')
greIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1), ).setIndexNames((0, "BIANCA-BRICK-GRE-MIB", "greDstIpAddr"))
if mibBuilder.loadTexts: greIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: greIfEntry.setDescription("Entries in this table are created by defining a new value for the field greDstIpAddr. Entries may be deleted by setting the field greUseKey to 'delete'.")
greIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: greIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: greIfIndex.setDescription('The index of the virtual interface. This object identifies a row in the ifTable.')
greIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: greIfDescr.setDescription('The name of the virtual interface. The same name will be assigned to the corresponding ifDescr in the ifTable.')
greIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: greIfMtu.setDescription('Determines size of the largest datagram which can be sent on the interface, specified in octets (see ifMtu).')
greDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greDstIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: greDstIpAddr.setDescription('The IP address of the GRE remote partner.')
greKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greKey.setStatus('mandatory')
if mibBuilder.loadTexts: greKey.setDescription('The optional 32-bit key for this GRE tunnel. Multiple tunnels can be used simultaneously between the two same GRE partners provided each tunnel uses a different key.')
greUseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delete", 1), ("yes", 2), ("no", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greUseKey.setStatus('mandatory')
if mibBuilder.loadTexts: greUseKey.setDescription('This object indicates, whether the key value specified in greKey should be processed in GRE headers.')
greSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 23, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: greSrcIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: greSrcIpAddr.setDescription('The source IP address used when sending GRE packets. If this value is set to 0.0.0.0, the IP address of the interface used to route packets towards the remote partner will be automatically selected for this purpose.')
mibBuilder.exportSymbols("BIANCA-BRICK-GRE-MIB", bibo=bibo, vpn=vpn, greIfEntry=greIfEntry, greIfIndex=greIfIndex, greDstIpAddr=greDstIpAddr, greSrcIpAddr=greSrcIpAddr, greUseKey=greUseKey, greKey=greKey, greIfTable=greIfTable, greIfDescr=greIfDescr, bintec=bintec, greIfMtu=greIfMtu)
