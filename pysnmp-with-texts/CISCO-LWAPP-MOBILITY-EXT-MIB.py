#
# PySNMP MIB module CISCO-LWAPP-MOBILITY-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MOBILITY-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cLWlanIndex, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, MibIdentifier, NotificationType, ObjectIdentity, Unsigned32, TimeTicks, Integer32, Bits, Counter32, Gauge32, Counter64, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks", "Integer32", "Bits", "Counter32", "Gauge32", "Counter64", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, TruthValue, TextualConvention, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TruthValue", "TextualConvention", "RowStatus", "DateAndTime")
ciscoLwappMobilityExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 999999))
ciscoLwappMobilityExtMIB.setRevisions(('2014-04-14 00:00', '2013-01-09 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMobilityExtMIB.setRevisionsDescriptions(('Deprecated the mib objects cLMobilityExtMCClientAssociationTime, cLMobilityExtMOClientAssociationTime and Added the mib object cLMobilityExtMCClientUpTime, cLMobilityExtMOClientUpTime', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMobilityExtMIB.setLastUpdated('201404210000Z')
if mibBuilder.loadTexts: ciscoLwappMobilityExtMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMobilityExtMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMobilityExtMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB provides configuration and status information about the 802.11 WLAN mobility. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected. Basic Service Set Identifier (BSSID) The identifier for the service set comprising of all the 802.11 stations under the control of one coordinating Access Point. This identifier happens to be the MAC address of the dot11 radio interface of the Access Point. The wireless clients that associate with the Access Point get the wired uplink through this particular dot11 interface. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobility Oracle (MO) When a Central Controller in the Mobility Group is designated as Mobility Oracle, then all the Mobility Controller's (MC) traffic is tunnelled to it by other Mobility Controllers. Currently, MO resides along with MC but MC can reside in a box without MO. Mobility Controller (MC) When a Central Controller in the Mobility Group is designated as Mobility Controller, then all the Mobile Anchor's traffic is tunnelled to it by other Anchors. Each MC has its own/self mobility agent (MA), but MA can reside in a box without MC. Mobility Agent (MA) The Mobility Agent is an entity residing on the access switch that manages mobility events on the switch, and communicates with the Mobility Controller. Access Points can associate directly with MA. Wireless LAN Controller (WLC) Wireless LAN Controller are legacy mobility device which can participate in the new mobility architecture. Mobility Manager The Mobility Manager is the management entity in a mobility controller or mobility agent. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Anchor MC, Anchor MA Anchor MC or Anchor MA is the mobility entity where a mobile client was first anchored or associated. This is equivalent to home agent (HA). Associated MC, Associated MA Associated MC or Associated MA is the mobility entity where a mobile client roamed and get associated. This is equivalent to foreign agent (FA). It can be local or remote. Mobility Concept by which a Mobile Node can roam from one Access Point to another Access Point, across multiple Central Controllers, without need for repeated authentication. Mobility Group A set of Central Controllers which exchange Mobile Node's authentication information, so that the Mobile Node upon roaming need not re-authenticate. Switch Peer Group (SPG) A set of mobility agents (MAs) form a Switch Peer Group. One or more SPGs are associated with one mobility controller (MC). Traffic between mobility agents within a SPG group goes directly between them - not through their associated MC Mobility Anchor When a Central Controller in the Mobility Group is designated as Mobility Anchor, then all the Mobile Node's traffic is tunnelled to it by other Controllers in the Mobility Group. Guest Tunneling (GT) The concept of designating a Central Controller in the Mobility Group as Mobility Anchor, so that all the Mobile Node's traffic is tunnelled to it by other Controllers in the Mobility Group. Station Management (SMT) This term refers to the internal management of the 802.11 protocol operations by the AP to work cooperatively with the other APs and 802.11 devices in the network. Ethernet over Internet Protocol (EoIP) Ethernet over IP (EoIP) is a protocol that creates an Ethernet tunnel between two routers on top of an IP connection. The EoIP interface appears as an Ethernet interface. Reverse path filtering (RPF) Reverse path filtering (RPF) is a feature provided by most modern Internet Protocol routers, which may be used to reduce the risk of customers attacking other internet hosts. One of the problems network service providers face today is hackers generating packets with fake source IP addresses, a technique known as spoofing. This is often done in order to initiate a denial-of-service attack against another internet host or network. Since the source IP addresses of the incoming packets change, often randomly, and for every packet, the target of such an attack can't easily filter out the attacking packets. However, the source of the attack, i.e. the network service provider of the attacking host, has a simple way to stop such packets from ever leaving its network. A router always knows which networks are reachable via any of its interfaces. By checking the source IP address of all packets coming in via an interface against the networks known to be behind that interface, the router can simply drop packets that aren't supposed to come from there. Hence, reverse path filtering filters packets according to the 'reverse path' to their source IP address. If the path back to the source IP address does not match the path the packet is coming from, it is dropped. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol.")
ciscoLwappMobilityExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 0))
ciscoLwappMobilityExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1))
ciscoLwappMobilityExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2))
ciscoLwappMobilityExtGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1))
ciscoLwappMobilityExtTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2))
ciscoLwappMobilityExtNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 3))
ciscoLwappMobilityExtMCGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1))
ciscoLwappMobilityExtMCMAGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2))
ciscoLwappMobilityExtMAGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3))
ciscoLwappMobilityExtMCStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4))
class CiscoAbsZeroBasedCounter64(TextualConvention, Counter64):
    description = 'This TC describes an object which counts events with the following semantics: objects of this type will be set to zero(0) on creation and will thereafter count appropriate events, it locks at the maximum value of 18,446,744,073,709,551,615 If the counter overflows. This TC may be used only in situations where wrapping is not possible or extremely unlikely situation.'
    status = 'current'

cLMobilityExtMCMOEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCMOEnableStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMOEnableStatus.setDescription("This object represents the current status of the Mobility Oracle (MO). A value of 'true' indicates Mobility Oracle is enabled. A value of 'false' indicates Mobility Oracle (MO) is disabled.")
cLMobilityExtMCMOAdminEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCMOAdminEnableStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMOAdminEnableStatus.setDescription("This object allows the user to enable or disable MO mode. A value of 'true' indicates both Mobility Oracle (MO) is enabled. A value of 'false' indicates Mobility Oracle (MO) is disabled. Please note that cLMobilityExtMOEnableStatus (operational value) can be false even if cLMobilityExtMOAdminEnableStatus is true.")
cLMobilityExtMCEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCEnableStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCEnableStatus.setDescription("This object represents the current status of Mobility Controller (MC). The controller can operate either in MC/MA or MA only mode. A value of 'true' indicates both Mobility Controller (MC) is enabled. A value of 'false' indicates Mobility Controller (MC) is disabled.")
cLMobilityExtMCAdminEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCAdminEnableStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCAdminEnableStatus.setDescription("This object allows the user to enable or disable MC mode. The controller can operate either in MC/MA or MA only mode. A value of 'true' indicates both Mobility Controller (MC) is enabled. A value of 'false' indicates Mobility Controller (MC) is disabled. Please note that cLMobilityExtMCEnableStatus (operational value) can be false even if cLMobilityExtMCAdminEnableStatus is true.")
cLMobilityExtMCMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCMulticastMode.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMulticastMode.setDescription("This object allows the user to enable or disable multicast mode. A value of 'true' indicates Multicast mode is enabled. A value of 'false' indicates Multicast mode is disabled.")
cLMobilityExtMCKeepAliveCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCKeepAliveCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCKeepAliveCount.setDescription('This object represents the keep alive count. If keep alive response is not received consecutively for N (keep alive count) times, the mobility link is declared as down')
cLMobilityExtMCKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCKeepAliveInterval.setDescription('Each MC sends periodically keep alive packet to other mobility devices (MA or MC). This object represents the keep alive interval. This object is valid for MC, not MA.')
cLMobilityExtMCDscpValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCDscpValue.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCDscpValue.setDescription('This object represents the Differentiated Services Code Point (DSCP) value. Here it is used for classifying and managing mobility control packets and providing quality of service (QoS) on IP networks. Valid value ranges from 0 to 63.')
cLMobilityExtMCMOPublicAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCMOPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMOPublicAddressType.setDescription("This object represents the MO's public IP address type.")
cLMobilityExtMCMOPublicAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCMOPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMOPublicAddress.setDescription("This object represents the MO's public IP address.")
cLMobilityExtMCApCountLicensesInUse = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCApCountLicensesInUse.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCApCountLicensesInUse.setDescription('This object represents the total APs directly associated with this MC and its MAs.')
cLMobilityExtMCOwnGroupMulticastAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 12), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCOwnGroupMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCOwnGroupMulticastAddressType.setDescription('This object represents the multicast IP address type of its own mobility group.')
cLMobilityExtMCOwnGroupMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCOwnGroupMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCOwnGroupMulticastAddress.setDescription('This object represents the multicast IP address of its own mobility group.')
cLMobilityExtMCMobilityGroupName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 1, 14), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMCMobilityGroupName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMobilityGroupName.setDescription('This object represents the name for this mobility group.')
cLMobilityExtMgrAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrAddressType.setDescription("The mobility manager is the management entity of MC or MA. This object represents the mobility manager's IP address type.")
cLMobilityExtMgrAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrAddress.setDescription("This object represents the mobility manager's IP address.")
cLMobilityExtMgrNetmaskType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrNetmaskType.setDescription("This object represents the mobility manager's netmask type.")
cLMobilityExtMgrNetmask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrNetmask.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrNetmask.setDescription("This object represents the mobility manager's netmask.")
cLMobilityExtMgrMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrMacAddress.setDescription('This object represents the mac address for this mobility manager.')
cLMobilityExtMgrVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrVlanId.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrVlanId.setDescription('This object represents the VLAN ID for this mobility manager.')
cLMobilityExtMgrName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMgrName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrName.setDescription('This object represents the name for this mobility manager.')
cLMobilityExtMgrInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("management", 1), ("ap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMgrInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMgrInterfaceType.setDescription('This object represents the mobility manager interface type. It can be of two types: management: for in-band management of the controller ap: for L3 communications between the controller and LWAPP APs.')
cLMobilityExtNewArchitectureEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtNewArchitectureEnableStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtNewArchitectureEnableStatus.setDescription("This object represents the current status of the new mobility feature. A value of 'true' indicates new Mobility is enabled. A value of 'false' indicates new Mobility is disabled.")
cLMobilityExtNewArchitectureAdminEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 2, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtNewArchitectureAdminEnableStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtNewArchitectureAdminEnableStatus.setDescription("This object allows users to enable or disable new mobility feature. A value of 'true' indicates new Mobility is enabled. A value of 'false' indicates new Mobility is disabled.")
cLMobilityExtSpgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1), )
if mibBuilder.loadTexts: cLMobilityExtSpgTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility Switch Peer Group (SPG).')
cLMobilityExtSpgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgGroupName"))
if mibBuilder.loadTexts: cLMobilityExtSpgEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility SPG configured on this controller.')
cLMobilityExtSpgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cLMobilityExtSpgGroupName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgGroupName.setDescription('This object represents the group name for this SPG. This object is for human consumption.')
cLMobilityExtSpgGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgGroupId.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgGroupId.setDescription('This object represents the group ID for this SPG. This object is used in the control data packet for SPG.')
cLMobilityExtSpgBridgeDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgBridgeDomainId.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgBridgeDomainId.setDescription('This object represents the bridge domain ID for this SPG.')
cLMobilityExtSpgMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtSpgMemberCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberCount.setDescription('This object represents the number of members on this SPG.')
cLMobilityExtSpgMulticastAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMulticastAddressType.setDescription("This object represents the member's multicast IP address type.")
cLMobilityExtSpgMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMulticastAddress.setDescription("This object represents the member's multicast IP address.")
cLMobilityExtSpgMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgMulticastMode.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMulticastMode.setDescription("This object allows the user to enable or disable multicast mode. A value of 'true' indicates Multicast mode is enabled. A value of 'false' indicates Multicast mode is disabled.")
cLMobilityExtSpgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgRowStatus.setDescription('This object creates or deletes an entry in this table.')
cLMobilityExtSpgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2), )
if mibBuilder.loadTexts: cLMobilityExtSpgMemberTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility Switch Peer Group (SPG) Members.')
cLMobilityExtSpgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgGroupName"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberPrivateAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberPrivateAddress"))
if mibBuilder.loadTexts: cLMobilityExtSpgMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility SPG Member configured on this controller.')
cLMobilityExtSpgMemberPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPrivateAddressType.setDescription("This object represents the member's private IP address type.")
cLMobilityExtSpgMemberPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPrivateAddress.setDescription("This object represents the member's private IP address.")
cLMobilityExtSpgMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 0), ("datapathdown", 1), ("controlpathdown", 2), ("bothdown", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtSpgMemberStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberStatus.setDescription('This object specifies the operational and connectivity status of the member. notconfigured: This means group is not configured for ICMP or EoIP pings. datapathdown: This means group is not responding to EoIP pings. controlpathdown: This means successive ICMP pings to the group have failed. bothdown: This means group is not responding to ICMP or EOIP pings. up: This means group is responding to both EOIP and ICMP pings.')
cLMobilityExtSpgMemberPublicAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPublicAddressType.setDescription("This object represents the member's public IP address type.")
cLMobilityExtSpgMemberPublicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberPublicAddress.setDescription("This object represents the member's public IP address.")
cLMobilityExtSpgMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtSpgMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtSpgMemberRowStatus.setDescription('This object creates or deletes an entry in this table.')
cLMobilityExtGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3), )
if mibBuilder.loadTexts: cLMobilityExtGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility Group Members.')
cLMobilityExtGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberPrivateAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberPrivateAddress"))
if mibBuilder.loadTexts: cLMobilityExtGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility Member configured on this controller.')
cLMobilityExtGroupMemberPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPrivateAddressType.setDescription("This object represents the member's private IP address type.")
cLMobilityExtGroupMemberPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPrivateAddress.setDescription("This object represents the member's private IP address.")
cLMobilityExtGroupMemberGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberGroupName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberGroupName.setDescription("This object represents the member's mobility group name.")
cLMobilityExtGroupMemberPublicAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPublicAddressType.setDescription("This object represents the member's public IP address type.")
cLMobilityExtGroupMemberPublicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberPublicAddress.setDescription("This object represents the member's public IP address.")
cLMobilityExtGroupMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 0), ("datapathdown", 1), ("controlpathdown", 2), ("bothdown", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberStatus.setDescription('This object specifies the operational and connectivity status of the member. notconfigured: This means group is not configured for ICMP or EoIP pings. datapathdown: This means group is not responding to EoIP pings. controlpathdown: This means successive ICMP pings to the group have failed. bothdown: This means group is not responding to ICMP or EOIP pings. up: This means group is responding to both EOIP and ICMP pings.')
cLMobilityExtGroupMemberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberMacAddress.setDescription("This object represents the member's mac address.")
cLMobilityExtGroupMemberMulticastAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberMulticastAddressType.setDescription("This used represents the member's multicast IP address type.")
cLMobilityExtGroupMemberMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberMulticastAddress.setDescription("This object represents the member's multicast IP address.")
cLMobilityExtGroupMemberHashKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberHashKey.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberHashKey.setDescription("This object indicates the Hash key of the peer mobility member. It is a 40 hex digit value or 'none' to clear the previously configured hash key.")
cLMobilityExtGroupMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtGroupMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMemberRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table.')
cLMobilityExtAnchorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 4), )
if mibBuilder.loadTexts: cLMobilityExtAnchorTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtAnchorTable.setDescription("This table represents the information about the 802.11 LWAPP Mobility Anchors on individual WLANs. +...............+ + + + ROUTER + + 10.16.1.1 + +...............+ .. . . . . . . . . . . 10.16.109.112 10.16.105.39 +......+ <<-------->> +......+ + + [3]CC2 tunnels + + + CC1 + MN1's traffic + CC2 + + + to Anchor CC1 + + +......+ using EoIP +......+ . . . Anchor Foreign . . . +......+ +......+ + + + + + AP1 + + AP2 + + + + + +......+ +......+ WLAN '1' . ^ WLAN '1' . | . [2] associates | . with AP2/CC2 | . | +......+ [1] +......+ + + moves to region + + + MN1 + ---------->>> + MN1 + + + serviced by AP2 + + +......+ +......+ 10.16.109.199 10.16.109.199 In the above diagram, Central Controllers CC1 and CC2 have been configure in a Mobility Group. Currently the Mobile Node 'MN1' obtains its IP from the Central Controller 'CC1' with which it first associates via WLAN '1' through Access Point 'AP1'. 'CC1' obtains DHCP address, say 10.16.109.199 for client 'MN1'. Now the client 'MN1' is identified by 10.16.109.199 for furthure communication with the network and the communication happens via 'CC1'. Since, 'CC1' and 'CC2' are in same mobility group, 'CC1' sends the authentication block of 'MN1' to 'CC2'. Central Controller 'CC2' has an associated Access Point 'AP2' which beams WLAN '1' and uses 10.16.105.0 / 255.255.255.0 subnet instead. Next, the Mobile Node 'MN1' moves out of range of 'AP1' and gets in to proximity with 'AP2' and continues to use WLAN '1'. 'CC2' locally authenticates 'MN1' against authentication block shared from 'CC1'. 'CC2' forwards all traffic from 'MN1' to router. This is called WLAN mobility. But hold on, 'CC2' uses 10.16.105.0 / 255.255.255.0 subnet for WLAN '1'. So we have two problems here : a> Traffic of 10.16.109.0 / 255.255.255.0 subnet has to be accessible from 10.16.105.0 / 255.255.255.0 subnet. b> Unneccessary overloading of 10.16.105.0 / 255.255.255.0 subnet by traffic from 10.16.109.0 / 255.255.255.0 subnet. How do we address these issues ?? If an EoIP tunnel can be established between 'CC1' and 'CC2' and 'CC1' sends all traffic bound to 'MN1', 10.16.109.199, on this tunnel to 'CC2', which in turn forwards it to 'MN1', then, above two subnet-problems are resolved. This is called Mobility Anchoring. 'CC1' is the Mobility Anchor and 'CC2' is the 'Foreign' for WLAN '1'. As per the configuration, user creates a MobilityAnchor entry in 'CC2' for WLAN '1' with IP address as 'CC1', i.e. 10.16.109.112. So, when 'MN1' connects to WLAN '1' via 'AP2', then 'CC2' establishes EoIP tunnel with 10.16.109.112 and forwards the packets to 'MN1'. Given the above example, the cLMobilityAnchorEntry on 'CC2' looks like : ------------------------------------------------------------------ | MIB - ATTRIBUTES | ROW#1 | ROW#2 | ------------------------------------------------------------------ | cLWlanIndex | 1 | | ------------------------------------------------------------------ | cLMobilityExtAnchorAssociatedMCAddressType | ipv4 | | ------------------------------------------------------------------ | cLMobilityExtAnchorAssociatedMCAddress | 10.16.109.112 | | ------------------------------------------------------------------ | cLMobilityExtAnchorStatus | up(4) | | ------------------------------------------------------------------ | cLMobilityExtAnchorRowStatus | active(1) | | ------------------------------------------------------------------ This feature has advantages for both security and load balancing. It can be used to restrict a WLAN to a single subnet, regardless of the MN's entry point into the network. A 'public' or guest WLAN can thus be accessed throughout an enterprise, but still is restricted to a specific subnet. It can also be used to provide some geographic load balancing, since the WLANs can represent a particular section of a building (ie., engineering, marketing). Those groups can be 'anchored' on a particular subnet/switch rather than on the CC of first occurrence (ie., the switch controlling the APs by the front door).")
cLMobilityExtAnchorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtAnchorAssociatedMCAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtAnchorAssociatedMCAddress"))
if mibBuilder.loadTexts: cLMobilityExtAnchorEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtAnchorEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility Anchor configured on a WLAN on this controller.')
cLMobilityExtAnchorAssociatedMCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtAnchorAssociatedMCAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtAnchorAssociatedMCAddressType.setDescription("This object represents the anchor's IP address type.")
cLMobilityExtAnchorAssociatedMCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtAnchorAssociatedMCAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtAnchorAssociatedMCAddress.setDescription("This object represents the anchor's IP address")
cLMobilityExtAnchorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 0), ("datapathdown", 1), ("controlpathdown", 2), ("bothdown", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtAnchorStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtAnchorStatus.setDescription('This object specifies the operational and connectivity status of the mobility anchor. notconfigured: This means anchor is not configured for ICMP or EoIP pings. datapathdown: This means anchor is not responding to EoIP pings. controlpathdown: This means successive ICMP pings to the anchor have failed. bothdown: This means anchor is not responding to ICMP or EOIP pings. up: This means anchor is responding to both EOIP and ICMP pings.')
cLMobilityExtAnchorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtAnchorRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtAnchorRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table.')
cLMobilityExtMOMCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5), )
if mibBuilder.loadTexts: cLMobilityExtMOMCTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility Controllers on this MO.')
cLMobilityExtMOMCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCAddress"))
if mibBuilder.loadTexts: cLMobilityExtMOMCEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility Controller on this MO.')
cLMobilityExtMOMCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtMOMCAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCAddressType.setDescription("This object represents the MC's IP address type.")
cLMobilityExtMOMCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtMOMCAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCAddress.setDescription("This object represents the MC's IP address.")
cLMobilityExtMOMCMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOMCMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCMacAddress.setDescription("This object represents the MC's MAC IP address.")
cLMobilityExtMOMCLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 0), ("datapathdown", 1), ("controlpathdown", 2), ("bothdown", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOMCLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCLinkStatus.setDescription('This object specifies the operational and connectivity status of the MC. notconfigured: This means MC is not configured for ICMP or EoIP pings. datapathdown: This means MC is not responding to EoIP pings. controlpathdown: This means successive ICMP pings to the MC have failed. bothdown: This means MC is not responding to ICMP or EOIP pings. up: This means MC is responding to both EOIP and ICMP pings.')
cLMobilityExtMOMCClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOMCClientCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOMCClientCount.setDescription("This object represents the MC's client count.")
cLMobilityExtMCClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6), )
if mibBuilder.loadTexts: cLMobilityExtMCClientTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility Clients on this MC.')
cLMobilityExtMCClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientMacAddress"))
if mibBuilder.loadTexts: cLMobilityExtMCClientEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility Clients on this MC.')
cLMobilityExtMCClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: cLMobilityExtMCClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientMacAddress.setDescription('This object represents the client MAC IP address.')
cLMobilityExtMCClientAnchorMCPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMCPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMCPrivateAddressType.setDescription("This object represents the client's anchor MC private IP address type.")
cLMobilityExtMCClientAnchorMCPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMCPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMCPrivateAddress.setDescription("This object represents the client's anchor MC private IP address.")
cLMobilityExtMCClientAssociatedMCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMCAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMCAddressType.setDescription("This object represents the client's associated MC (local or foreign) IP address type.")
cLMobilityExtMCClientAssociatedMCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMCAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMCAddress.setDescription("This object represents the client's associated MC (local or foreign) IP address.")
cLMobilityExtMCClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAddressType.setDescription('This object represents the client IP address type.')
cLMobilityExtMCClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAddress.setDescription('This object represents the client IP address.')
cLMobilityExtMCClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("local", 1), ("foreign", 2), ("anchor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientState.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientState.setDescription('This object represents the client state.')
cLMobilityExtMCClientAssociationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociationTime.setStatus('deprecated')
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociationTime.setDescription("This object represents the client's association time. The object cLMobilityExtMCClientUpTime represents the MC client up time since its association.")
cLMobilityExtMCClientLocalClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientLocalClient.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientLocalClient.setDescription('This object specifies whether the client is local. A value of true indicates the client is local. A value of false indicates the client is not local to this MC.')
cLMobilityExtMCClientAnchorMCGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMCGroupId.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMCGroupId.setDescription("This object represents the client's anchor MC mobility group ID.")
cLMobilityExtMCClientAssociatedMCGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMCGroupId.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMCGroupId.setDescription("This object represents the client's associated MC (local or foreign) mobility group ID.")
cLMobilityExtMCClientAssociatedMAAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMAAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMAAddressType.setDescription('This object represents the MA local or foreign IP address type.')
cLMobilityExtMCClientAssociatedMAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMAAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAssociatedMAAddress.setDescription('This object represents the MA local or foreign IP address.')
cLMobilityExtMCClientAnchorMAAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMAAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMAAddressType.setDescription("This object represents the MA anchor's IP address type.")
cLMobilityExtMCClientAnchorMAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMAAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientAnchorMAAddress.setDescription("This object represents the MA anchor's IP address.")
cLMobilityExtMCClientUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 6, 1, 17), CiscoAbsZeroBasedCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCClientUpTime.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCClientUpTime.setDescription('The object cLMobilityExtMCClientUpTime represents the MC client up time since its association.')
cLMobilityExtMOClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7), )
if mibBuilder.loadTexts: cLMobilityExtMOClientTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility Clients on this MO.')
cLMobilityExtMOClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientMacAddress"))
if mibBuilder.loadTexts: cLMobilityExtMOClientEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility Clients on this MO.')
cLMobilityExtMOClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: cLMobilityExtMOClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientMacAddress.setDescription('This object represents the client MAC address.')
cLMobilityExtMOClientAnchorMCPublicAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPublicAddressType.setDescription("This object represents the client's anchor MC public IP address type.")
cLMobilityExtMOClientAnchorMCPublicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPublicAddress.setDescription("This object represents the client's anchor MC public IP address.")
cLMobilityExtMOClientAnchorMCPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPrivateAddressType.setDescription("This object represents the client's anchor MC private IP address type.")
cLMobilityExtMOClientAnchorMCPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAnchorMCPrivateAddress.setDescription("This object represents the client's anchor MC private IP address.")
cLMobilityExtMOClientAssociatedMCPublicAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPublicAddressType.setDescription("This object represents the client's associated MC (local or foreign) public IP address type.")
cLMobilityExtMOClientAssociatedMCPublicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPublicAddress.setDescription("This object represents the client's associated MC (local or foreign) public IP address.")
cLMobilityExtMOClientAssociatedMCPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPrivateAddressType.setDescription("This object represents the client's associated MC (local or foreign) private IP address type.")
cLMobilityExtMOClientAssociatedMCPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociatedMCPrivateAddress.setDescription("This object represents the client's associated MC (local or foreign) private IP address type.")
cLMobilityExtMOClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAddressType.setDescription('This object represents the client IP address type.')
cLMobilityExtMOClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientAddress.setDescription('This object represents the client IP address.')
cLMobilityExtMOClientLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientLocalTime.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientLocalTime.setDescription("This object represents the client's local time.")
cLMobilityExtMOClientAssociationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 13), DateAndTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociationTime.setStatus('deprecated')
if mibBuilder.loadTexts: cLMobilityExtMOClientAssociationTime.setDescription("This object represents the client's association time.The object cLMobilityExtMOClientUpTime represents the up time of the MO client since its association")
cLMobilityExtMOClientUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 7, 1, 14), CiscoAbsZeroBasedCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMOClientUpTime.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMOClientUpTime.setDescription("This object represents the client's up time since its association.")
cLMobilityExtApMgrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8), )
if mibBuilder.loadTexts: cLMobilityExtApMgrTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrTable.setDescription('This table represents the information about the 802.11 LWAPP Mobility AP Manager.')
cLMobilityExtApMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrName"))
if mibBuilder.loadTexts: cLMobilityExtApMgrEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility AP Manager configured on this controller.')
cLMobilityExtApMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cLMobilityExtApMgrName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrName.setDescription('This object represents the name for this AP manager.')
cLMobilityExtApMgrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrAddressType.setDescription("This object represents the AP manager's IP address type.")
cLMobilityExtApMgrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrAddress.setDescription("This object represents the AP manager's IP address.")
cLMobilityExtApMgrNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrNetmaskType.setDescription("This object represents the AP manager's netmask type.")
cLMobilityExtApMgrNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrNetmask.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrNetmask.setDescription("This object represents the AP manager's netmask.")
cLMobilityExtApMgrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrMacAddress.setDescription('This object represents the mac address for this AP manager.')
cLMobilityExtApMgrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrVlanId.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrVlanId.setDescription('This object represents the VLAN ID for this AP manager.')
cLMobilityExtApMgrInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("management", 1), ("ap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtApMgrInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrInterfaceType.setDescription('This object represents the AP manager interface type. It can be of two types: management: for in-band management of the controller ap: for L3 communications between the controller and LWAPP APs')
cLMobilityExtApMgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 8, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtApMgrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtApMgrRowStatus.setDescription('This object creates or deletes an entry in this table.')
cLMobilityExtForeignWlcMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 9), )
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapTable.setDescription('This table is used to create mappings of the foreign controller with the interface/interface group to be used, when clients directly connected to the foreign controller send the DHCP request to the anchor controller.')
cLMobilityExtForeignWlcMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 9, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtForeignWlcAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtForeignWlcAddress"))
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapEntry.setDescription('This represents a row in the cLMobilityExtForeignWlcIfMappingTable. The entries are added and deleted by explicit user driven action.')
cLMobilityExtForeignWlcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 9, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtForeignWlcAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtForeignWlcAddressType.setDescription('This object represents the IP address type of the foreign controller,to which the interface mapping is to be configured.')
cLMobilityExtForeignWlcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 9, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtForeignWlcAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtForeignWlcAddress.setDescription('This object represents the IP address of the foreign controller,to which the interface mapping is to be configured ')
cLMobilityExtForeignWlcMapIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 9, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapIf.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapIf.setDescription('This object represents name of the interface/interface group which would be used for the communication with the clients connected to the foreign controller .')
cLMobilityExtForeignWlcMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtForeignWlcMapRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table.')
cLMobilityExtGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 10), )
if mibBuilder.loadTexts: cLMobilityExtGroupTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupTable.setDescription('This table represents the information about the mobility groups where clients from this MC can roam.')
cLMobilityExtGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 10, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupName"))
if mibBuilder.loadTexts: cLMobilityExtGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupEntry.setDescription('Each entry in this table provides information about one mobility group.')
cLMobilityExtGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 10, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cLMobilityExtGroupName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupName.setDescription('This object represents the name for the mobility group.')
cLMobilityExtGroupMulticastAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 10, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtGroupMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMulticastAddressType.setDescription('This object represents the multicast IP address type for the mobility group.')
cLMobilityExtGroupMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 10, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtGroupMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtGroupMulticastAddress.setDescription('This object represents the multicast IP address for the mobility group.')
cLMobilityExtMAPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11), )
if mibBuilder.loadTexts: cLMobilityExtMAPeerTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerTable.setDescription('This table represents the information about the 802.11 LWAPP SPG peer members of this MA.')
cLMobilityExtMAPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerPrivateAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerPrivateAddress"))
if mibBuilder.loadTexts: cLMobilityExtMAPeerEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerEntry.setDescription('Each entry in this table provides information about one 802.11 LWAPP Mobility SPG peer member of this MA.')
cLMobilityExtMAPeerPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtMAPeerPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerPrivateAddressType.setDescription("This object represents this MA peer's private IP address type.")
cLMobilityExtMAPeerPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtMAPeerPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerPrivateAddress.setDescription("This object represents this MA peer's private IP address.")
cLMobilityExtMAPeerPublicAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAPeerPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerPublicAddressType.setDescription("This object represents this MA peer's public IP address type.")
cLMobilityExtMAPeerPublicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAPeerPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerPublicAddress.setDescription("This object represents this MA peer's public address.")
cLMobilityExtMAPeerLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 0), ("datapathdown", 1), ("controlpathdown", 2), ("bothdown", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAPeerLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAPeerLinkStatus.setDescription('This object specifies the control path and data path status of the link between this MA and its peer MA in the same SPG. notconfigured: This means group is not configured for ICMP or EoIP pings. datapathdown: This means group is not responding to EoIP pings. controlpathdown: This means successive ICMP pings to the group have failed. bothdown: This means group is not responding to ICMP or EOIP pings. up: This means group is responding to both EOIP and ICMP pings.')
cLMobilityExtMCMAStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 12), )
if mibBuilder.loadTexts: cLMobilityExtMCMAStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMAStatisticsTable.setDescription('This table represents the information about the MA statistics as reported by this MC.')
cLMobilityExtMCMAStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 12, 1), ).setIndexNames((0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMAPrivateAddressType"), (0, "CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMAPrivateAddress"))
if mibBuilder.loadTexts: cLMobilityExtMCMAStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMAStatisticsEntry.setDescription('Each entry in this table provides information about statistics of one MA that is associated with this MC.')
cLMobilityExtMCMAPrivateAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLMobilityExtMCMAPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMAPrivateAddressType.setDescription("This object represents the MA's private IP address type.")
cLMobilityExtMCMAPrivateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 12, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLMobilityExtMCMAPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMAPrivateAddress.setDescription("This object represents the MA's private IP address.")
cLMobilityExtMCMAClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 2, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCMAClientCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCMAClientCount.setDescription("This object represents the MA's client count.")
cLMobilityExtMAMCPublicAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMAMCPublicAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAMCPublicAddressType.setDescription("This object represents the MC's public IP address type for this MA.")
cLMobilityExtMAMCPublicAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMAMCPublicAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAMCPublicAddress.setDescription("This object represents the MC's public IP address for this MA.")
cLMobilityExtMAMCPrivateAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMAMCPrivateAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAMCPrivateAddressType.setDescription("This object represents the MC's private IP address type for this MA.")
cLMobilityExtMAMCPrivateAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMobilityExtMAMCPrivateAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAMCPrivateAddress.setDescription("This object represents the MC's private IP address for this MA.")
cLMobilityExtMAToMCLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notconfigured", 0), ("datapathdown", 1), ("controlpathdown", 2), ("bothdown", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAToMCLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAToMCLinkStatus.setDescription('This object specifies the control path and data path status of the link between this mobility agent and its mobility controller. notconfigured: This means group is not configured for ICMP or EoIP pings. datapathdown: This means group is not responding to EoIP pings. controlpathdown: This means successive ICMP pings to the group have failed. bothdown: This means group is not responding to ICMP or EOIP pings. up: This means group is responding to both EOIP and ICMP pings.')
cLMobilityExtMASpgPeerCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMASpgPeerCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMASpgPeerCount.setDescription('This object represents the number of peer members of this mobility agent (MA).')
cLMobilityExtMASpgName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMASpgName.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMASpgName.setDescription('This object represents the Switch Peer Group (SPG) name where this MA belongs.')
cLMobilityExtMAOwnMulticastAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAOwnMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAOwnMulticastAddressType.setDescription('This object represents the multicast address type for the own SPG group.')
cLMobilityExtMAOwnMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAOwnMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAOwnMulticastAddress.setDescription('This object represents the multicast address for the own SPG group.')
cLMobilityExtMAKeepAliveCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 20)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAKeepAliveCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAKeepAliveCount.setDescription('This object represents the keep alive count. If keep alive response is not received consecutively for N (keep alive count) times, the mobility link is declared as down.')
cLMobilityExtMAKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMAKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMAKeepAliveInterval.setDescription('Each MA sends periodically keep alive packet to other mobility devices (MA or MC). This object represents the keep alive interval.')
cLMobilityExtMADscpValue = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 3, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMADscpValue.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMADscpValue.setDescription('This object represents the Differentiated Services Code Point (DSCP) value. Here it is used for classifying and managing mobility control packets and providing quality of service (QoS) on IP networks.')
cLMobilityExtMCReceivedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCReceivedTotal.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCReceivedTotal.setDescription('This object represents the received total.')
cLMobilityExtMCReceivedDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCReceivedDrops.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCReceivedDrops.setDescription('This object represents the received drops.')
cLMobilityExtMCProtocolReceiveErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCProtocolReceiveErrors.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCProtocolReceiveErrors.setDescription('This object represents the protocol received errors.')
cLMobilityExtMCProtocolTransmitErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCProtocolTransmitErrors.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCProtocolTransmitErrors.setDescription('This object represents the protocol transmitted errors.')
cLMobilityExtMCStateErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCStateErrors.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCStateErrors.setDescription('This object represents the state errors.')
cLMobilityExtMCProtocolRetransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCProtocolRetransmitted.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCProtocolRetransmitted.setDescription('This object represents the protocol retransmitted.')
cLMobilityExtMCHandoffRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCHandoffRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCHandoffRequestsReceived.setDescription('This object represents the handoff requests received.')
cLMobilityExtMCHandoffCmplReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCHandoffCmplReceived.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCHandoffCmplReceived.setDescription('This object represents the handoff cmpl received.')
cLMobilityExtMCHandoffClientDeleteReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCHandoffClientDeleteReceived.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCHandoffClientDeleteReceived.setDescription('This object represents the handoff client delete received.')
cLMobilityExtMCHandoffRequestsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCHandoffRequestsTransmitted.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCHandoffRequestsTransmitted.setDescription('This object represents the handoff requests transmitted.')
cLMobilityExtMCHandoffCmplTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCHandoffCmplTransmitted.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCHandoffCmplTransmitted.setDescription('This object represents the handoff cmpl transmitted.')
cLMobilityExtMCHandoffClientDeleteTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCHandoffClientDeleteTransmitted.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCHandoffClientDeleteTransmitted.setDescription('This object represents the handoff client delete transmitted.')
cLMobilityExtMCTotalClientCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCTotalClientCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCTotalClientCount.setDescription('This object represents the total client count.')
cLMobilityExtMCWgbCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMobilityExtMCWgbCount.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtMCWgbCount.setDescription('This object represents the wgb count.')
cLMobilityExtNotifyObjectSourceIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 3, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectSourceIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectSourceIPAddressType.setDescription('This object represents the source address type.')
cLMobilityExtNotifyObjectSourceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 3, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectSourceIPAddress.setDescription('This object represents the sourc address')
cLMobilityExtNotifyObjectSourceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("mobilityAgent", 1), ("mobilityController", 2), ("mobilityOracle", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectSourceType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectSourceType.setDescription('Mobility source type')
cLMobilityExtNotifyObjectDestinationType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 999999, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("mobilityAgent", 1), ("mobilityController", 2), ("mobilityOracle", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectDestinationType.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtNotifyObjectDestinationType.setDescription('Mobility destination type')
ciscoLwappMobilityControlPathDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 999999, 0, 1)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectDestinationType"))
if mibBuilder.loadTexts: ciscoLwappMobilityControlPathDown.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityControlPathDown.setDescription('This notification is sent by the agent when a mobility control path goes down.')
ciscoLwappMobilityControlPathUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 999999, 0, 2)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectDestinationType"))
if mibBuilder.loadTexts: ciscoLwappMobilityControlPathUp.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityControlPathUp.setDescription('This notification is sent by the agent when a mobility control path goes up.')
ciscoLwappMobilityDataPathDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 999999, 0, 3)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectDestinationType"))
if mibBuilder.loadTexts: ciscoLwappMobilityDataPathDown.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityDataPathDown.setDescription('This notification is sent by the agent when a mobility data path goes down.')
ciscoLwappMobilityDataPathUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 999999, 0, 4)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectDestinationType"))
if mibBuilder.loadTexts: ciscoLwappMobilityDataPathUp.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityDataPathUp.setDescription('This notification is sent by the agent when a mobility data path goes up.')
ciscoLwappMobilityExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 1))
ciscoLwappMobilityExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 2))
ciscoLwappMobilityExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 1, 1)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtConfigGroup"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityExtNotifyObjectsGroup"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityExtNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMobilityExtMIBCompliance = ciscoLwappMobilityExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMobilityExtMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMobilityExtMIB module.')
ciscoLwappMobilityExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 1, 2)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtConfigGroupRev1"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityExtNotifyObjectsGroup"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityExtNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMobilityExtMIBComplianceRev1 = ciscoLwappMobilityExtMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityExtMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMobilityExtMIB module.')
cLMobilityExtConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 2, 1)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOAdminEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCAdminEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMulticastMode"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCKeepAliveCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCKeepAliveInterval"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCDscpValue"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCApCountLicensesInUse"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCOwnGroupMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCOwnGroupMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMobilityGroupName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrNetmaskType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrNetmask"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrVlanId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrInterfaceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNewArchitectureEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNewArchitectureAdminEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMAAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMAAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgBridgeDomainId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMulticastMode"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberGroupName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberHashKey"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtAnchorStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtAnchorRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCLinkStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCClientCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientState"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociationTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientLocalClient"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientLocalTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociationTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrNetmaskType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrNetmask"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrVlanId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrInterfaceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtForeignWlcMapIf"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtForeignWlcMapRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerLinkStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMAClientCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAToMCLinkStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMASpgPeerCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMASpgName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAOwnMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAOwnMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAKeepAliveCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAKeepAliveInterval"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMADscpValue"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCReceivedTotal"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCReceivedDrops"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCProtocolReceiveErrors"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCProtocolTransmitErrors"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCStateErrors"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCProtocolRetransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffRequestsReceived"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffCmplReceived"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffClientDeleteReceived"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffRequestsTransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffCmplTransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffClientDeleteTransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCTotalClientCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCWgbCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLMobilityExtConfigGroup = cLMobilityExtConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cLMobilityExtConfigGroup.setDescription('This is a collection of objects which can be configured to control Mobility parameters.')
ciscoLwappMobilityExtNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 2, 2)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceIPAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectSourceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNotifyObjectDestinationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMobilityExtNotifyObjectsGroup = ciscoLwappMobilityExtNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityExtNotifyObjectsGroup.setDescription('This collection of objects provide the information about mobility trap configuration and trap definition. These objects are defined under cwciscoLwappMobilityExtNotifObjects.')
ciscoLwappMobilityExtNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 2, 3)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityControlPathDown"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityControlPathUp"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityDataPathDown"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "ciscoLwappMobilityDataPathUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMobilityExtNotifsGroup = ciscoLwappMobilityExtNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMobilityExtNotifsGroup.setDescription('This collection of objects provides the information about the notifications sent by the agent related to mobility.')
cLMobilityExtConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 999999, 2, 2, 4)).setObjects(("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOAdminEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCAdminEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMulticastMode"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCKeepAliveCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCKeepAliveInterval"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCDscpValue"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMOPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCApCountLicensesInUse"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCOwnGroupMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCOwnGroupMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMobilityGroupName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrNetmaskType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrNetmask"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrVlanId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMgrInterfaceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNewArchitectureEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtNewArchitectureAdminEnableStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMAAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMAAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgBridgeDomainId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMulticastMode"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtSpgMemberRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberGroupName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberHashKey"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMemberRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtAnchorStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtAnchorRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCLinkStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOMCClientCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientState"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientLocalClient"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAnchorMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAssociatedMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientLocalTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrNetmaskType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrNetmask"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrMacAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrVlanId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrInterfaceType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtApMgrRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtForeignWlcMapIf"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtForeignWlcMapRowStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtGroupMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAPeerLinkStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCMAClientCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPublicAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPublicAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAToMCLinkStatus"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMASpgPeerCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMASpgName"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAOwnMulticastAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAOwnMulticastAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAKeepAliveCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMAKeepAliveInterval"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMADscpValue"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCReceivedTotal"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCReceivedDrops"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCProtocolReceiveErrors"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCProtocolTransmitErrors"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCStateErrors"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCProtocolRetransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffRequestsReceived"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffCmplReceived"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffClientDeleteReceived"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffRequestsTransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffCmplTransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCHandoffClientDeleteTransmitted"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCTotalClientCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCWgbCount"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMOClientUpTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLMobilityExtConfigGroupRev1 = cLMobilityExtConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cLMobilityExtConfigGroupRev1.setDescription('This is a collection of objects which can be configured to control Mobility parameters.')
mibBuilder.exportSymbols("CISCO-LWAPP-MOBILITY-EXT-MIB", cLMobilityExtMOClientAnchorMCPublicAddressType=cLMobilityExtMOClientAnchorMCPublicAddressType, cLMobilityExtMgrName=cLMobilityExtMgrName, cLMobilityExtMCStateErrors=cLMobilityExtMCStateErrors, cLMobilityExtMCMOEnableStatus=cLMobilityExtMCMOEnableStatus, ciscoLwappMobilityExtMCStats=ciscoLwappMobilityExtMCStats, cLMobilityExtApMgrNetmask=cLMobilityExtApMgrNetmask, cLMobilityExtSpgGroupName=cLMobilityExtSpgGroupName, ciscoLwappMobilityExtMIBCompliances=ciscoLwappMobilityExtMIBCompliances, cLMobilityExtMCHandoffRequestsReceived=cLMobilityExtMCHandoffRequestsReceived, cLMobilityExtApMgrName=cLMobilityExtApMgrName, cLMobilityExtGroupMulticastAddress=cLMobilityExtGroupMulticastAddress, cLMobilityExtMCMOPublicAddress=cLMobilityExtMCMOPublicAddress, cLMobilityExtMCMAClientCount=cLMobilityExtMCMAClientCount, cLMobilityExtMOClientAnchorMCPrivateAddress=cLMobilityExtMOClientAnchorMCPrivateAddress, cLMobilityExtGroupMemberRowStatus=cLMobilityExtGroupMemberRowStatus, cLMobilityExtNotifyObjectSourceIPAddressType=cLMobilityExtNotifyObjectSourceIPAddressType, cLMobilityExtMCClientAssociatedMCGroupId=cLMobilityExtMCClientAssociatedMCGroupId, cLMobilityExtMAPeerTable=cLMobilityExtMAPeerTable, cLMobilityExtSpgMulticastAddressType=cLMobilityExtSpgMulticastAddressType, cLMobilityExtMCMOPublicAddressType=cLMobilityExtMCMOPublicAddressType, cLMobilityExtNewArchitectureEnableStatus=cLMobilityExtNewArchitectureEnableStatus, ciscoLwappMobilityExtMIBCompliance=ciscoLwappMobilityExtMIBCompliance, ciscoLwappMobilityControlPathDown=ciscoLwappMobilityControlPathDown, cLMobilityExtMOClientAnchorMCPublicAddress=cLMobilityExtMOClientAnchorMCPublicAddress, cLMobilityExtMOMCTable=cLMobilityExtMOMCTable, cLMobilityExtMCMOAdminEnableStatus=cLMobilityExtMCMOAdminEnableStatus, cLMobilityExtMCClientAnchorMAAddress=cLMobilityExtMCClientAnchorMAAddress, cLMobilityExtMCProtocolReceiveErrors=cLMobilityExtMCProtocolReceiveErrors, cLMobilityExtMCOwnGroupMulticastAddressType=cLMobilityExtMCOwnGroupMulticastAddressType, cLMobilityExtMCClientLocalClient=cLMobilityExtMCClientLocalClient, cLMobilityExtMCClientAssociatedMAAddress=cLMobilityExtMCClientAssociatedMAAddress, cLMobilityExtAnchorTable=cLMobilityExtAnchorTable, cLMobilityExtMAMCPublicAddressType=cLMobilityExtMAMCPublicAddressType, cLMobilityExtMCOwnGroupMulticastAddress=cLMobilityExtMCOwnGroupMulticastAddress, cLMobilityExtApMgrAddressType=cLMobilityExtApMgrAddressType, cLMobilityExtMCAdminEnableStatus=cLMobilityExtMCAdminEnableStatus, cLMobilityExtMCMAStatisticsTable=cLMobilityExtMCMAStatisticsTable, cLMobilityExtMCWgbCount=cLMobilityExtMCWgbCount, cLMobilityExtGroupMulticastAddressType=cLMobilityExtGroupMulticastAddressType, cLMobilityExtForeignWlcMapEntry=cLMobilityExtForeignWlcMapEntry, cLMobilityExtMAOwnMulticastAddressType=cLMobilityExtMAOwnMulticastAddressType, cLMobilityExtSpgMulticastAddress=cLMobilityExtSpgMulticastAddress, cLMobilityExtMAKeepAliveInterval=cLMobilityExtMAKeepAliveInterval, cLMobilityExtGroupMemberGroupName=cLMobilityExtGroupMemberGroupName, cLMobilityExtGroupMemberPublicAddress=cLMobilityExtGroupMemberPublicAddress, cLMobilityExtMgrVlanId=cLMobilityExtMgrVlanId, cLMobilityExtForeignWlcMapRowStatus=cLMobilityExtForeignWlcMapRowStatus, cLMobilityExtForeignWlcAddress=cLMobilityExtForeignWlcAddress, ciscoLwappMobilityExtMIBConform=ciscoLwappMobilityExtMIBConform, cLMobilityExtMCEnableStatus=cLMobilityExtMCEnableStatus, cLMobilityExtGroupMemberMulticastAddress=cLMobilityExtGroupMemberMulticastAddress, cLMobilityExtMCClientAssociatedMCAddressType=cLMobilityExtMCClientAssociatedMCAddressType, cLMobilityExtApMgrEntry=cLMobilityExtApMgrEntry, cLMobilityExtMAMCPublicAddress=cLMobilityExtMAMCPublicAddress, cLMobilityExtMOClientAssociatedMCPrivateAddressType=cLMobilityExtMOClientAssociatedMCPrivateAddressType, cLMobilityExtNotifyObjectSourceIPAddress=cLMobilityExtNotifyObjectSourceIPAddress, cLMobilityExtMAKeepAliveCount=cLMobilityExtMAKeepAliveCount, cLMobilityExtMgrNetmaskType=cLMobilityExtMgrNetmaskType, cLMobilityExtNotifyObjectDestinationType=cLMobilityExtNotifyObjectDestinationType, cLMobilityExtMOMCEntry=cLMobilityExtMOMCEntry, cLMobilityExtMOClientLocalTime=cLMobilityExtMOClientLocalTime, cLMobilityExtMgrAddress=cLMobilityExtMgrAddress, cLMobilityExtMAPeerEntry=cLMobilityExtMAPeerEntry, cLMobilityExtMAToMCLinkStatus=cLMobilityExtMAToMCLinkStatus, cLMobilityExtSpgMemberPublicAddressType=cLMobilityExtSpgMemberPublicAddressType, cLMobilityExtMAPeerPrivateAddress=cLMobilityExtMAPeerPrivateAddress, cLMobilityExtSpgTable=cLMobilityExtSpgTable, ciscoLwappMobilityExtMAGlobalObjects=ciscoLwappMobilityExtMAGlobalObjects, cLMobilityExtMCClientAnchorMAAddressType=cLMobilityExtMCClientAnchorMAAddressType, cLMobilityExtAnchorEntry=cLMobilityExtAnchorEntry, cLMobilityExtMOClientAssociationTime=cLMobilityExtMOClientAssociationTime, ciscoLwappMobilityExtMIBNotifs=ciscoLwappMobilityExtMIBNotifs, cLMobilityExtMCMobilityGroupName=cLMobilityExtMCMobilityGroupName, cLMobilityExtMOClientAssociatedMCPublicAddressType=cLMobilityExtMOClientAssociatedMCPublicAddressType, cLMobilityExtMCHandoffClientDeleteTransmitted=cLMobilityExtMCHandoffClientDeleteTransmitted, cLMobilityExtMOMCMacAddress=cLMobilityExtMOMCMacAddress, cLMobilityExtGroupMemberHashKey=cLMobilityExtGroupMemberHashKey, ciscoLwappMobilityDataPathDown=ciscoLwappMobilityDataPathDown, cLMobilityExtApMgrRowStatus=cLMobilityExtApMgrRowStatus, cLMobilityExtConfigGroup=cLMobilityExtConfigGroup, cLMobilityExtMCMAPrivateAddressType=cLMobilityExtMCMAPrivateAddressType, ciscoLwappMobilityExtNotifObjects=ciscoLwappMobilityExtNotifObjects, cLMobilityExtGroupMemberStatus=cLMobilityExtGroupMemberStatus, cLMobilityExtMOClientAddressType=cLMobilityExtMOClientAddressType, cLMobilityExtMOMCLinkStatus=cLMobilityExtMOMCLinkStatus, cLMobilityExtMOClientMacAddress=cLMobilityExtMOClientMacAddress, ciscoLwappMobilityExtNotifsGroup=ciscoLwappMobilityExtNotifsGroup, cLMobilityExtMOClientUpTime=cLMobilityExtMOClientUpTime, cLMobilityExtMCReceivedTotal=cLMobilityExtMCReceivedTotal, cLMobilityExtMCClientAssociatedMAAddressType=cLMobilityExtMCClientAssociatedMAAddressType, cLMobilityExtGroupTable=cLMobilityExtGroupTable, cLMobilityExtMAPeerPublicAddressType=cLMobilityExtMAPeerPublicAddressType, cLMobilityExtApMgrMacAddress=cLMobilityExtApMgrMacAddress, cLMobilityExtMAPeerPublicAddress=cLMobilityExtMAPeerPublicAddress, cLMobilityExtMCMAStatisticsEntry=cLMobilityExtMCMAStatisticsEntry, cLMobilityExtMCClientAssociatedMCAddress=cLMobilityExtMCClientAssociatedMCAddress, cLMobilityExtMgrNetmask=cLMobilityExtMgrNetmask, cLMobilityExtMCProtocolRetransmitted=cLMobilityExtMCProtocolRetransmitted, cLMobilityExtMCClientAddressType=cLMobilityExtMCClientAddressType, cLMobilityExtMCApCountLicensesInUse=cLMobilityExtMCApCountLicensesInUse, cLMobilityExtMCReceivedDrops=cLMobilityExtMCReceivedDrops, cLMobilityExtMCClientAssociationTime=cLMobilityExtMCClientAssociationTime, cLMobilityExtMCClientAnchorMCPrivateAddressType=cLMobilityExtMCClientAnchorMCPrivateAddressType, cLMobilityExtGroupMemberTable=cLMobilityExtGroupMemberTable, cLMobilityExtApMgrNetmaskType=cLMobilityExtApMgrNetmaskType, cLMobilityExtMOMCAddressType=cLMobilityExtMOMCAddressType, cLMobilityExtApMgrAddress=cLMobilityExtApMgrAddress, cLMobilityExtApMgrInterfaceType=cLMobilityExtApMgrInterfaceType, cLMobilityExtMASpgName=cLMobilityExtMASpgName, ciscoLwappMobilityExtMIBGroups=ciscoLwappMobilityExtMIBGroups, cLMobilityExtSpgMemberStatus=cLMobilityExtSpgMemberStatus, cLMobilityExtMCClientMacAddress=cLMobilityExtMCClientMacAddress, cLMobilityExtAnchorAssociatedMCAddressType=cLMobilityExtAnchorAssociatedMCAddressType, cLMobilityExtMAMCPrivateAddress=cLMobilityExtMAMCPrivateAddress, cLMobilityExtAnchorStatus=cLMobilityExtAnchorStatus, cLMobilityExtGroupMemberPublicAddressType=cLMobilityExtGroupMemberPublicAddressType, cLMobilityExtSpgMemberRowStatus=cLMobilityExtSpgMemberRowStatus, cLMobilityExtMOClientAnchorMCPrivateAddressType=cLMobilityExtMOClientAnchorMCPrivateAddressType, cLMobilityExtMAOwnMulticastAddress=cLMobilityExtMAOwnMulticastAddress, cLMobilityExtGroupName=cLMobilityExtGroupName, cLMobilityExtForeignWlcMapTable=cLMobilityExtForeignWlcMapTable, cLMobilityExtSpgMulticastMode=cLMobilityExtSpgMulticastMode, cLMobilityExtSpgMemberPrivateAddress=cLMobilityExtSpgMemberPrivateAddress, cLMobilityExtMCClientState=cLMobilityExtMCClientState, cLMobilityExtMOClientEntry=cLMobilityExtMOClientEntry, cLMobilityExtNotifyObjectSourceType=cLMobilityExtNotifyObjectSourceType, cLMobilityExtGroupMemberPrivateAddress=cLMobilityExtGroupMemberPrivateAddress, CiscoAbsZeroBasedCounter64=CiscoAbsZeroBasedCounter64, ciscoLwappMobilityDataPathUp=ciscoLwappMobilityDataPathUp, cLMobilityExtSpgMemberCount=cLMobilityExtSpgMemberCount, cLMobilityExtMAPeerLinkStatus=cLMobilityExtMAPeerLinkStatus, ciscoLwappMobilityExtMCMAGlobalObjects=ciscoLwappMobilityExtMCMAGlobalObjects, cLMobilityExtMCTotalClientCount=cLMobilityExtMCTotalClientCount, PYSNMP_MODULE_ID=ciscoLwappMobilityExtMIB, cLMobilityExtGroupEntry=cLMobilityExtGroupEntry, cLMobilityExtApMgrVlanId=cLMobilityExtApMgrVlanId, cLMobilityExtMCClientAddress=cLMobilityExtMCClientAddress, cLMobilityExtMASpgPeerCount=cLMobilityExtMASpgPeerCount, cLMobilityExtNewArchitectureAdminEnableStatus=cLMobilityExtNewArchitectureAdminEnableStatus, cLMobilityExtSpgBridgeDomainId=cLMobilityExtSpgBridgeDomainId, cLMobilityExtGroupMemberMacAddress=cLMobilityExtGroupMemberMacAddress, ciscoLwappMobilityExtMIB=ciscoLwappMobilityExtMIB, cLMobilityExtApMgrTable=cLMobilityExtApMgrTable, cLMobilityExtGroupMemberMulticastAddressType=cLMobilityExtGroupMemberMulticastAddressType, cLMobilityExtMCClientTable=cLMobilityExtMCClientTable, cLMobilityExtMOClientTable=cLMobilityExtMOClientTable, cLMobilityExtMCHandoffClientDeleteReceived=cLMobilityExtMCHandoffClientDeleteReceived, cLMobilityExtMCKeepAliveInterval=cLMobilityExtMCKeepAliveInterval, cLMobilityExtForeignWlcMapIf=cLMobilityExtForeignWlcMapIf, ciscoLwappMobilityExtNotifyObjectsGroup=ciscoLwappMobilityExtNotifyObjectsGroup, ciscoLwappMobilityExtGlobalObjects=ciscoLwappMobilityExtGlobalObjects, cLMobilityExtAnchorAssociatedMCAddress=cLMobilityExtAnchorAssociatedMCAddress, cLMobilityExtMCDscpValue=cLMobilityExtMCDscpValue, ciscoLwappMobilityControlPathUp=ciscoLwappMobilityControlPathUp, cLMobilityExtMCMAPrivateAddress=cLMobilityExtMCMAPrivateAddress, cLMobilityExtMCClientAnchorMCPrivateAddress=cLMobilityExtMCClientAnchorMCPrivateAddress, cLMobilityExtMCHandoffCmplTransmitted=cLMobilityExtMCHandoffCmplTransmitted, cLMobilityExtMCClientUpTime=cLMobilityExtMCClientUpTime, ciscoLwappMobilityExtTableObjects=ciscoLwappMobilityExtTableObjects, cLMobilityExtSpgMemberPrivateAddressType=cLMobilityExtSpgMemberPrivateAddressType, cLMobilityExtMOMCAddress=cLMobilityExtMOMCAddress, cLMobilityExtGroupMemberEntry=cLMobilityExtGroupMemberEntry, cLMobilityExtMADscpValue=cLMobilityExtMADscpValue, ciscoLwappMobilityExtMIBObjects=ciscoLwappMobilityExtMIBObjects, cLMobilityExtMCHandoffCmplReceived=cLMobilityExtMCHandoffCmplReceived, cLMobilityExtMOClientAssociatedMCPublicAddress=cLMobilityExtMOClientAssociatedMCPublicAddress, cLMobilityExtMgrMacAddress=cLMobilityExtMgrMacAddress, cLMobilityExtSpgMemberPublicAddress=cLMobilityExtSpgMemberPublicAddress, cLMobilityExtMCMulticastMode=cLMobilityExtMCMulticastMode, ciscoLwappMobilityExtMCGlobalObjects=ciscoLwappMobilityExtMCGlobalObjects, cLMobilityExtMgrAddressType=cLMobilityExtMgrAddressType, cLMobilityExtMCHandoffRequestsTransmitted=cLMobilityExtMCHandoffRequestsTransmitted, cLMobilityExtMCProtocolTransmitErrors=cLMobilityExtMCProtocolTransmitErrors, cLMobilityExtConfigGroupRev1=cLMobilityExtConfigGroupRev1, cLMobilityExtAnchorRowStatus=cLMobilityExtAnchorRowStatus, ciscoLwappMobilityExtMIBComplianceRev1=ciscoLwappMobilityExtMIBComplianceRev1, cLMobilityExtSpgMemberTable=cLMobilityExtSpgMemberTable, cLMobilityExtGroupMemberPrivateAddressType=cLMobilityExtGroupMemberPrivateAddressType, cLMobilityExtMAMCPrivateAddressType=cLMobilityExtMAMCPrivateAddressType, cLMobilityExtSpgEntry=cLMobilityExtSpgEntry, cLMobilityExtSpgGroupId=cLMobilityExtSpgGroupId, cLMobilityExtMCClientAnchorMCGroupId=cLMobilityExtMCClientAnchorMCGroupId, cLMobilityExtMCKeepAliveCount=cLMobilityExtMCKeepAliveCount, cLMobilityExtMOMCClientCount=cLMobilityExtMOMCClientCount, cLMobilityExtMAPeerPrivateAddressType=cLMobilityExtMAPeerPrivateAddressType, cLMobilityExtMgrInterfaceType=cLMobilityExtMgrInterfaceType, cLMobilityExtForeignWlcAddressType=cLMobilityExtForeignWlcAddressType, cLMobilityExtMOClientAddress=cLMobilityExtMOClientAddress, cLMobilityExtSpgRowStatus=cLMobilityExtSpgRowStatus, cLMobilityExtMOClientAssociatedMCPrivateAddress=cLMobilityExtMOClientAssociatedMCPrivateAddress, cLMobilityExtMCClientEntry=cLMobilityExtMCClientEntry, cLMobilityExtSpgMemberEntry=cLMobilityExtSpgMemberEntry)
