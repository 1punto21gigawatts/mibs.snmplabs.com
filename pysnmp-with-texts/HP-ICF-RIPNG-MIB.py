#
# PySNMP MIB module HP-ICF-RIPNG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-RIPNG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, iso, IpAddress, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Integer32, ObjectIdentity, MibIdentifier, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "iso", "IpAddress", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Integer32", "ObjectIdentity", "MibIdentifier", "Counter32", "Counter64")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
hpicfRipng = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113))
hpicfRipng.setRevisions(('2015-05-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfRipng.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: hpicfRipng.setLastUpdated('201505110000Z')
if mibBuilder.loadTexts: hpicfRipng.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfRipng.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfRipng.setDescription('This is a HP proprietary MIB module to describe the RIPng protocol.')
hpicfRipngNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 0))
hpicfRipngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1))
hpicfRipngConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2))
hpicfRipngBaseScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1))
hpicfRipngGlobalRouteChanges = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRipngGlobalRouteChanges.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngGlobalRouteChanges.setDescription('The number of changes to the RIPng routing table, excluding the age refresh.')
hpicfRipngGlobalQueries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRipngGlobalQueries.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngGlobalQueries.setDescription('The number of responses received from other systems that are sent to the RIPng queries.')
hpicfRipngAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngAdminStatus.setDescription('The admin status of the RIPng routing protocol.')
hpicfRipngDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngDefaultMetric.setDescription('The default metric value for the routes that are redistributed by RIPng.')
hpicfRipngDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngDistance.setDescription('The administrative distance to associate with routes learned by RIPng. Routes with distances lower than the other peers in the network are preferred.')
hpicfRipngUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngUpdateTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngUpdateTime.setDescription('This timer defines the interval between RIPng update messages.')
hpicfRipngTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngTimeoutTime.setDescription('This timer defines the route aging time. If no update message related to that route is received within this period, the metric of this route is set to 16 in the routing table.')
hpicfRipngGarbageCollectTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngGarbageCollectTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngGarbageCollectTime.setDescription('The garbage-collect timer defines the time interval when the metric of a route is 16 to the time when it is deleted from the routing table.')
hpicfRipngNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipngNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngNotificationEnable.setDescription('A four-octet string serving as a bit map for the trap events defined by the RIPng traps. This object is used to enable or disable specific RIPng traps where a 1 in the bit field represents enabled. The right-most bit (least significant) represents trap 0. Trap Name BitMap ---------------------------------------- RIPNG_IF_STATE_CHANGE 0x00001 RIPNG_INTF_CONFIG_ERROR 0x00002 RIPNG_INTF_RCV_BAD_PKT 0x00004 RIPNG_ALL_TRAPS 0x00008')
hpicfRipngIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2), )
if mibBuilder.loadTexts: hpicfRipngIfConfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfTable.setDescription('A list of the interfaces that require separate configuration in RIPng.')
hpicfRipngIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1), ).setIndexNames((0, "HP-ICF-RIPNG-MIB", "hpicfRipngIfConfIndex"), (0, "HP-ICF-RIPNG-MIB", "hpicfRipngIfConfInstId"))
if mibBuilder.loadTexts: hpicfRipngIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfEntry.setDescription('A single routing domain in a single subnet.')
hpicfRipngIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfRipngIfConfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfIndex.setDescription('The interface index of this RIPng interface. It corresponds to the interface index of the IPv6 interface on which RIPng is configured.')
hpicfRipngIfConfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpicfRipngIfConfInstId.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfInstId.setDescription('This will allow multiple instances of RIPng to run on the same device. Currently, only one instance is supported.')
hpicfRipngIfConfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfRipngIfConfMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfMetric.setDescription('The RIPng metric for this interface.')
hpicfRipngIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfRipngIfConfStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfStatus.setDescription('The row status variable for the hpicfRipngIfConf table.')
hpicfRipngIfConfSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRipngIfConfSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfSrcAddressType.setDescription('The address type for hpicfRipngIfConfSrcAddress. Only IPv6 addresses without a zone index value are accepted.')
hpicfRipngIfConfSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRipngIfConfSrcAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfSrcAddress.setDescription('The link-local IPv6 address that this system will use as a source address on this interface.')
hpicfRipngIfConfDoPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 2, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfRipngIfConfDoPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfDoPoisonReverse.setDescription('A flag indicating whether the router should perform poison reverse on this interface.')
hpicfRipngPeerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 3), )
if mibBuilder.loadTexts: hpicfRipngPeerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerTable.setDescription('A list of RIPng peers.')
hpicfRipngPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 3, 1), ).setIndexNames((0, "HP-ICF-RIPNG-MIB", "hpicfRipngPeerAddressType"), (0, "HP-ICF-RIPNG-MIB", "hpicfRipngPeerAddress"))
if mibBuilder.loadTexts: hpicfRipngPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerEntry.setDescription('Information regarding a single routing peer.')
hpicfRipngPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfRipngPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerAddressType.setDescription('The address type for hpicfRipngPeerAddress. Only IPv6 addresses without a zone index are expected.')
hpicfRipngPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hpicfRipngPeerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerAddress.setDescription('The IPv6 address that the peer is using as its source address. On an unnumbered link, this IPv6 address might not be a member of any subnet on the system.')
hpicfRipngPeerLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRipngPeerLastUpdate.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerLastUpdate.setDescription('The value of sysUpTime when the most recent RIPng update was received from this peer.')
hpicfRipngPeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRipngPeerRcvBadPackets.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerRcvBadPackets.setDescription('The number of RIPng invalid response packets that are received from this peer.')
hpicfRipngNotificationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 4))
hpicfRipngConfigErrorType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("badVersion", 1), ("badIPtype", 2), ("badHop", 3), ("badField", 4), ("ownPkt", 5), ("noError", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRipngConfigErrorType.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngConfigErrorType.setDescription('Potential types of configuration conflicts. Used by hpicfRipngConfigError notifications.')
hpicfRipngPacketType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("nullPacket", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRipngPacketType.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPacketType.setDescription('RIPng packet types.')
hpicfRipngPacketSrcType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 4, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRipngPacketSrcType.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPacketSrcType.setDescription('The address type for hpicfRipngPacketSrc.')
hpicfRipngPacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 4, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRipngPacketSrc.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPacketSrc.setDescription('The IPv6 address of an inbound packet that cannot be identified by a peer instance. Only IPv6 addresses without a zone index are expected.')
hpicfRipngIfState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRipngIfState.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfState.setDescription('RIPng interface state types.')
hpicfRipngIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 0, 1)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfSrcAddress"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfState"))
if mibBuilder.loadTexts: hpicfRipngIfStateChange.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfStateChange.setDescription('A hpicfRipngIfStateChange notification signifies that there has been a change in the state of a RIPng interface.')
hpicfRipngIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 0, 2)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfSrcAddress"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfState"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketSrc"), ("HP-ICF-RIPNG-MIB", "hpicfRipngConfigErrorType"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketType"))
if mibBuilder.loadTexts: hpicfRipngIfConfigError.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfigError.setDescription("A hpicfRipngIfConfigError notification signifies that a packet has been received on an interface from a router whose configuration parameters conflict with this router's configuration parameters.")
hpicfRipngIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 0, 3)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfSrcAddress"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfState"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketSrc"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketType"))
if mibBuilder.loadTexts: hpicfRipngIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfRxBadPacket.setDescription('A hpicfRipngIfRxBadPacket notification signifies that a RIPng packet that cannot be parsed has been received on this interface.')
hpicfRipngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 1))
hpicfRipngGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 2))
hpicfRipngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 1, 1)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngBaseScalarsGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPeerGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngBaseScalarsGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPeerGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngNotificationObjectGroup"), ("HP-ICF-RIPNG-MIB", "hpicfRipngNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipngCompliance = hpicfRipngCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngCompliance.setDescription('The compliance statement for HP routing switches that support RIPng.')
hpicfRipngBaseScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 2, 1)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngGlobalRouteChanges"), ("HP-ICF-RIPNG-MIB", "hpicfRipngGlobalQueries"), ("HP-ICF-RIPNG-MIB", "hpicfRipngAdminStatus"), ("HP-ICF-RIPNG-MIB", "hpicfRipngDefaultMetric"), ("HP-ICF-RIPNG-MIB", "hpicfRipngDistance"), ("HP-ICF-RIPNG-MIB", "hpicfRipngUpdateTime"), ("HP-ICF-RIPNG-MIB", "hpicfRipngTimeoutTime"), ("HP-ICF-RIPNG-MIB", "hpicfRipngGarbageCollectTime"), ("HP-ICF-RIPNG-MIB", "hpicfRipngNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipngBaseScalarsGroup = hpicfRipngBaseScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngBaseScalarsGroup.setDescription('This group lists the basic scalars that are required for the RIPng configuration.')
hpicfRipngIfConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 2, 2)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfMetric"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfStatus"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfSrcAddressType"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfSrcAddress"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfDoPoisonReverse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipngIfConfGroup = hpicfRipngIfConfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngIfConfGroup.setDescription('This group lists the interface configuration of RIPng systems.')
hpicfRipngPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 2, 3)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngPeerLastUpdate"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPeerRcvBadPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipngPeerGroup = hpicfRipngPeerGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngPeerGroup.setDescription('A collection of objects that lists peer information.')
hpicfRipngNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 2, 4)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngConfigErrorType"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketType"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketSrcType"), ("HP-ICF-RIPNG-MIB", "hpicfRipngPacketSrc"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipngNotificationObjectGroup = hpicfRipngNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngNotificationObjectGroup.setDescription('A collection of objects that are used to record RIPng notification parameters.')
hpicfRipngNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 113, 2, 2, 5)).setObjects(("HP-ICF-RIPNG-MIB", "hpicfRipngIfStateChange"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfConfigError"), ("HP-ICF-RIPNG-MIB", "hpicfRipngIfRxBadPacket"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipngNotificationGroup = hpicfRipngNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipngNotificationGroup.setDescription('A collection of objects that lists RIPng notifications.')
mibBuilder.exportSymbols("HP-ICF-RIPNG-MIB", hpicfRipngGlobalQueries=hpicfRipngGlobalQueries, hpicfRipngPacketSrc=hpicfRipngPacketSrc, hpicfRipngPacketType=hpicfRipngPacketType, hpicfRipngIfConfMetric=hpicfRipngIfConfMetric, hpicfRipngConformance=hpicfRipngConformance, hpicfRipngObjects=hpicfRipngObjects, hpicfRipngIfConfEntry=hpicfRipngIfConfEntry, hpicfRipngNotifications=hpicfRipngNotifications, hpicfRipngPeerAddressType=hpicfRipngPeerAddressType, hpicfRipngCompliances=hpicfRipngCompliances, hpicfRipngIfState=hpicfRipngIfState, hpicfRipngAdminStatus=hpicfRipngAdminStatus, hpicfRipngPeerLastUpdate=hpicfRipngPeerLastUpdate, hpicfRipngConfigErrorType=hpicfRipngConfigErrorType, hpicfRipngPeerGroup=hpicfRipngPeerGroup, hpicfRipngPacketSrcType=hpicfRipngPacketSrcType, hpicfRipngIfConfSrcAddress=hpicfRipngIfConfSrcAddress, hpicfRipng=hpicfRipng, hpicfRipngIfConfIndex=hpicfRipngIfConfIndex, hpicfRipngBaseScalarsGroup=hpicfRipngBaseScalarsGroup, hpicfRipngNotificationEnable=hpicfRipngNotificationEnable, hpicfRipngNotificationEntry=hpicfRipngNotificationEntry, hpicfRipngUpdateTime=hpicfRipngUpdateTime, hpicfRipngIfConfStatus=hpicfRipngIfConfStatus, hpicfRipngTimeoutTime=hpicfRipngTimeoutTime, hpicfRipngGarbageCollectTime=hpicfRipngGarbageCollectTime, hpicfRipngIfConfGroup=hpicfRipngIfConfGroup, hpicfRipngIfConfigError=hpicfRipngIfConfigError, PYSNMP_MODULE_ID=hpicfRipng, hpicfRipngPeerRcvBadPackets=hpicfRipngPeerRcvBadPackets, hpicfRipngIfConfDoPoisonReverse=hpicfRipngIfConfDoPoisonReverse, hpicfRipngNotificationObjectGroup=hpicfRipngNotificationObjectGroup, hpicfRipngGroups=hpicfRipngGroups, hpicfRipngIfConfTable=hpicfRipngIfConfTable, hpicfRipngPeerTable=hpicfRipngPeerTable, hpicfRipngBaseScalars=hpicfRipngBaseScalars, hpicfRipngNotificationGroup=hpicfRipngNotificationGroup, hpicfRipngDistance=hpicfRipngDistance, hpicfRipngIfStateChange=hpicfRipngIfStateChange, hpicfRipngPeerAddress=hpicfRipngPeerAddress, hpicfRipngIfConfSrcAddressType=hpicfRipngIfConfSrcAddressType, hpicfRipngIfRxBadPacket=hpicfRipngIfRxBadPacket, hpicfRipngIfConfInstId=hpicfRipngIfConfInstId, hpicfRipngCompliance=hpicfRipngCompliance, hpicfRipngGlobalRouteChanges=hpicfRipngGlobalRouteChanges, hpicfRipngDefaultMetric=hpicfRipngDefaultMetric, hpicfRipngPeerEntry=hpicfRipngPeerEntry)
