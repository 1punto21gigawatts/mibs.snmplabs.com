#
# PySNMP MIB module HOTWIRE-MSDSL-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HOTWIRE-MSDSL-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdnmsdsl, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnmsdsl")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Unsigned32, MibIdentifier, NotificationType, Bits, iso, TimeTicks, ModuleIdentity, Counter32, NotificationType, enterprises, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Bits", "iso", "TimeTicks", "ModuleIdentity", "Counter32", "NotificationType", "enterprises", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
msdslDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1))
msdslCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1))
msdslInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2))
msdslWorstInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3))
msdslTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4))
msdslFarEndCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5))
msdslFarEndInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6))
msdslFarEndWorstInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7))
msdslFarEndTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8))
msdslCurrentPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9))
msdslIntervalPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10))
msdslFarEndCurrentPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11))
msdslFarEndIntervalPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12))
msdsldsx1WorstInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13))
msdslG703WorstInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14))
msdslConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15))
msdslCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1), )
if mibBuilder.loadTexts: msdslCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentTable.setDescription('The MSDSL Current 15 minute interval table.')
msdslCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslCurrentIfIndex"))
if mibBuilder.loadTexts: msdslCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentEntry.setDescription('An entry in the MSDSL Current table.')
msdslCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentESs.setDescription('The number of Errored Seconds, encountered by a MSDSL interface in the current 15 minute inter- val.')
msdslCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a msdsl interface in the current 15 minute interval.')
msdslCurrentFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentFEBEs.setDescription('The number of Far End Block Errors (FEBE) en- countered by a MSDSL interface in the current 15 minute interval.')
msdslErrEventsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslErrEventsCounter.setStatus('mandatory')
if mibBuilder.loadTexts: msdslErrEventsCounter.setDescription('An error event is a CRC error, maximum count is 65,535. If the count reaches 65,535 it will remain at that value until reset. Reset is when the near end data is cleared.')
msdslErrTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslErrTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: msdslErrTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurment period.')
msdslErrValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslErrValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: msdslErrValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals since the interface has been online.')
msdslIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2), )
if mibBuilder.loadTexts: msdslIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalTable.setDescription('An MSDSL Interval table.')
msdslIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslIntervalIfIndex"), (0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslIntervalNumber"))
if mibBuilder.loadTexts: msdslIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalEntry.setDescription('An entry in the MSDSL Interval table.')
msdslIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
msdslIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalESs.setDescription('The number of Errored Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdslIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslIntervalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalFEBEs.setDescription('The number of Far End Block Errors encountered by a MSDSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslWorstIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3, 3), )
if mibBuilder.loadTexts: msdslWorstIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslWorstIntervalTable.setDescription('The MSDSL Worst Interval table.')
msdslWorstIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3, 3, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslWorstIntervalIfIndex"))
if mibBuilder.loadTexts: msdslWorstIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslWorstIntervalEntry.setDescription('An entry in the msdsl Worst Interval table.')
msdslWorstIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslWorstIntervalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslWorstIntervalIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslWorstIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslWorstIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslWorstIntervalESs.setDescription('The value (1 to 96) indicating the interval containing the worst Errored Seconds encountered by a DSL interface.')
msdslWorstIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslWorstIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslWorstIntervalSESs.setDescription('The value (1 to 96) indicating the interval containing the worst Errored Seconds encountered by a DSL interface.')
msdslWorstIntervalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslWorstIntervalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslWorstIntervalFEBEs.setDescription('The value (1 to 96) indicating the interval containing the worst Errored Seconds encountered by a DSL interface.')
msdslTotalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4, 4), )
if mibBuilder.loadTexts: msdslTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTotalTable.setDescription('The DSL Total table. 24 hour interval.')
msdslTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4, 4, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslTotalIfIndex"))
if mibBuilder.loadTexts: msdslTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTotalEntry.setDescription('An entry in the DSL Total table.')
msdslTotalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslTotalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTotalIfIndex.setDescription('The index value which uniquely identifies the DSL interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a msdslLineIfIndex object instance.')
msdslTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTotalESs.setDescription('The number of Errored Seconds encountered by a DSL interface in the previous 24 hour interval')
msdslTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a DSL interface in the previous 24 hour interval.')
msdslTotalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 4, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslTotalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTotalFEBEs.setDescription('The number of Far End Block Errors ( FEBE) encountered by a DSL interface in the previous 24 hour interval.')
msdslFarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5, 5), )
if mibBuilder.loadTexts: msdslFarEndCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentTable.setDescription('The MSDSL Current table.')
msdslFarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5, 5, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndCurrentIfIndex"))
if mibBuilder.loadTexts: msdslFarEndCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentEntry.setDescription('An entry in the MSDSL Current table.')
msdslFarEndCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslFarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentESs.setDescription('The number of Errored Seconds, encountered by a MSDSL interface in the current 15 minute inter- val.')
msdslFarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a msdsl interface in the current 15 minute interval.')
msdslFarEndCurrentFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 5, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentFEBEs.setDescription('The number of Far End Block Errors (FEBE) en- countered by a MSDSL interface in the current 15 minute interval.')
msdslFarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6), )
if mibBuilder.loadTexts: msdslFarEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalTable.setDescription('The MSDSL Far End Interval table.')
msdslFarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndIntervalIfIndex"), (0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndIntervalNumber"))
if mibBuilder.loadTexts: msdslFarEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalEntry.setDescription('An entry in the msdsl Interval table.')
msdslFarEndIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslFarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
msdslFarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalESs.setDescription('The number of Errored Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdslFarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslFarEndIntervalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 6, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalFEBEs.setDescription('The number of Far End Block Errors encountered by a MSDSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslFarEndWorstIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7, 7), )
if mibBuilder.loadTexts: msdslFarEndWorstIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndWorstIntervalTable.setDescription('The MSDSL Far End Interval table.')
msdslFarEndWorstIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7, 7, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndWorstIntervalIfIndex"))
if mibBuilder.loadTexts: msdslFarEndWorstIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndWorstIntervalEntry.setDescription('An entry in the msdsl Worst Interval table.')
msdslFarEndWorstIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndWorstIntervalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndWorstIntervalIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslFarEndWorstIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndWorstIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndWorstIntervalESs.setDescription('The number of Far End Block Errors encountered by a MSDSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslFarEndWorstIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndWorstIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndWorstIntervalSESs.setDescription('The value (1 to 96) indicating the interval containing the worst Errored Seconds encountered by a DSL interface.')
msdslFarEndWorstIntervalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 7, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndWorstIntervalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndWorstIntervalFEBEs.setDescription('The value (1 to 96) indicating the interval containing the worst Errored Seconds encountered by a DSL interface.')
msdslFarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8, 8), )
if mibBuilder.loadTexts: msdslFarEndTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndTotalTable.setDescription('The DSL Total table. 24 hour interval.')
msdslFarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8, 8, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslTotalIfIndex"))
if mibBuilder.loadTexts: msdslFarEndTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndTotalEntry.setDescription('An entry in the DSL Total table.')
msdslFarEndTotalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndTotalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndTotalIfIndex.setDescription('The index value which uniquely identifies the DSL interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a msdslLineIfIndex object instance.')
msdslFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndTotalESs.setDescription('The number of Errored Seconds encountered by a DSL interface in the previous 24 hour interval')
msdslFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndTotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a DSL interface in the previous 24 hour interval.')
msdslFarEndTotalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 8, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndTotalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndTotalFEBEs.setDescription('The number of Far End Block Errors ( FEBE) encountered by a DSL interface in the previous 24 hour interval.')
msdslCurrentPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9), )
if mibBuilder.loadTexts: msdslCurrentPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentPerfTable.setDescription('The MSDSL Current Peformance Statistics table.')
msdslCurrentPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslCurrentPerfIfIndex"))
if mibBuilder.loadTexts: msdslCurrentPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentPerfEntry.setDescription('An entry in the MSDSL Current performance table.')
msdslCurrentPerfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentPerfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentPerfIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslCurrentPerfMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentPerfMargin.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentPerfMargin.setDescription('The average Margin value for the current 15 minute interval.')
msdslCurrentPerfTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentPerfTxPwr.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentPerfTxPwr.setDescription('The average value of the Transmit power in the current 15 minute interval.')
msdslCurrentPerfRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslCurrentPerfRxGain.setStatus('mandatory')
if mibBuilder.loadTexts: msdslCurrentPerfRxGain.setDescription('The average value of the Receiver gain the current 15 minute interval.')
msdslPerfPayloadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslPerfPayloadRate.setStatus('mandatory')
if mibBuilder.loadTexts: msdslPerfPayloadRate.setDescription("An estimate of the interface's current bandwidth in bits per second. Current range is: 64k to 2048k.")
msdslTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: msdslTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current error-measurment period.')
msdslValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 9, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: msdslValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals since the interface has been online.')
msdslIntervalPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10), )
if mibBuilder.loadTexts: msdslIntervalPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfTable.setDescription('The MSDSL Interval table.')
msdslIntervalPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslIntervalPerfIfIndex"), (0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslIntervalPerfNumber"))
if mibBuilder.loadTexts: msdslIntervalPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfEntry.setDescription('An entry in the msdsl Interval performance table.')
msdslIntervalPerfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalPerfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslIntervalPerfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalPerfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
msdslIntervalPerfMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalPerfMargin.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfMargin.setDescription('The average Margin for a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslIntervalPerfTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalPerfTxPwr.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfTxPwr.setDescription('The average Transmit Power on a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslIntervalPerfRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 10, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslIntervalPerfRxGain.setStatus('mandatory')
if mibBuilder.loadTexts: msdslIntervalPerfRxGain.setDescription('The average RxGain on a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslFarEndCurrentPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11, 11), )
if mibBuilder.loadTexts: msdslFarEndCurrentPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentPerfTable.setDescription('The MSDSL Current Peformance Statistics table.')
msdslFarEndCurrentPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11, 11, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndCurrentPerfIfIndex"))
if mibBuilder.loadTexts: msdslFarEndCurrentPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentPerfEntry.setDescription('An entry in the MSDSL Current performance table.')
msdslFarEndCurrentPerfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentPerfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentPerfIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslFarEndCurrentPerfMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11, 11, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentPerfMargin.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentPerfMargin.setDescription('The average Margin value for the current 15 minute interval.')
msdslFarEndCurrentPerfTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentPerfTxPwr.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentPerfTxPwr.setDescription('The average value of the Transmit power in the current 15 minute interval.')
msdslFarEndCurrentPerfRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 11, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndCurrentPerfRxGain.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndCurrentPerfRxGain.setDescription('The average value of the Receiver gain the current 15 minute interval.')
msdslFarEndIntervalPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12), )
if mibBuilder.loadTexts: msdslFarEndIntervalPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfTable.setDescription('The MSDSL Interval table.')
msdslFarEndIntervalPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndIntervalPerfIfIndex"), (0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFarEndIntervalPerfNumber"))
if mibBuilder.loadTexts: msdslFarEndIntervalPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfEntry.setDescription('An entry in the msdsl Interval performance table.')
msdslFarEndIntervalPerfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalPerfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslFarEndIntervalPerfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalPerfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
msdslFarEndIntervalPerfMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalPerfMargin.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfMargin.setDescription('The average Margin value for the current 15 minute interval.')
msdslFarEndIntervalPerfTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalPerfTxPwr.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfTxPwr.setDescription('The average value of the Transmit power in the current 15 minute interval.')
msdslFarEndIntervalPerfRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 12, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFarEndIntervalPerfRxGain.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFarEndIntervalPerfRxGain.setDescription('The average value of the Receiver gain the current 15 minute interval.')
msdsldsx1WorstIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13), )
if mibBuilder.loadTexts: msdsldsx1WorstIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalTable.setDescription('The MSDSL DSX1 Worst Interval table.')
msdsldsx1WorstIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdsldsx1WorstIntervalIfIndex"))
if mibBuilder.loadTexts: msdsldsx1WorstIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalEntry.setDescription('An entry in the msdsl DSX1 Worst Interval table.')
msdsldsx1WorstIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdsldsx1WorstIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalESs.setDescription('The number of Errored Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdsldsx1WorstIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdsldsx1WorstIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdsldsx1WorstIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalBESs.setDescription('The number of Bursty Errored Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdsldsx1WorstIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdsldsx1WorstIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 13, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdsldsx1WorstIntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: msdsldsx1WorstIntervalLOFC.setDescription('The number of Loss of Frame Counts encountered by a MSDSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslG703WorstIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14), )
if mibBuilder.loadTexts: msdslG703WorstIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalTable.setDescription('The MSDSL G.703 Worst Interval table.')
msdslG703WorstIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslG703WorstIntervalIfIndex"))
if mibBuilder.loadTexts: msdslG703WorstIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalEntry.setDescription('An entry in the msdsl G.703 Worst Interval table.')
msdslG703WorstIntervalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalIfIndex.setDescription('The index value which uniquely identifies the MSDSL interface to which this entry is applica- ble.')
msdslG703WorstIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalESs.setDescription('The number of Errored Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdslG703WorstIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdslG703WorstIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a DSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslG703WorstIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalBESs.setDescription('The number of Bursty Errored Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdslG703WorstIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DSL interface in one of the previous 96, indi- vidual 15 minute, intervals.')
msdslG703WorstIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 14, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslG703WorstIntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: msdslG703WorstIntervalLOFC.setDescription('The number of Loss of Frame Counts encountered by a MSDSL interface in one of the previous 96, individual 15 minute, intervals.')
msdslFracTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28), )
if mibBuilder.loadTexts: msdslFracTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracTable.setDescription('The Paradyne MSDSL Cross Connect Table.')
msdslFracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFracPortIndex"), (0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslFracPortTS"))
if mibBuilder.loadTexts: msdslFracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracEntry.setDescription('An entry in the Paradyne MSDSL Cross Connect Table.')
msdslFracPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslFracPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracPortIndex.setDescription(' The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
msdslFracPortTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdslFracPortTS.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracPortTS.setDescription(' The Time Slot number associated with the interface identified by msdslFracPortIndex for this entry. If the allocation method is ds1ByPass then this object is not required since the whole port specified by msdslFracPortIndex will be assigned to the corresponding msdslFracPortIfIndex. If the allocation method is ds1CrossConn then this object is also not required since the whole port specified by msdslFracPortIndex will be assigned to the port specified by msdslFracPortIfIndex. If the allocation method is ds0CrossConn, then this object specifies the Time Slot associated with the interface identified by msdslFracPortIndex for this entry.')
msdslFracPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdslFracPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracPortIfIndex.setDescription(' An index value that uniquely identifies the interface to which this entry is mapped. The interface identified by a particular value of this index is the same interface as identified by the same value of an ifIndex object instance If no interface is currently using the Time Slot identified by msdslFracPortTS, then this value should be zero. This is used to unassign the Time Slot. If a single interface occupies more than one time slot, then its ifIndex value is found in multiple time slots (i.e., there are multiple entries in table with the same msdslFracPortIfIndex value).')
msdslFracPortIfTS = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdslFracPortIfTS.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracPortIfTS.setDescription(' The Time Slot associated with the interface identified by msdslFracPortIfIndex for this entry. If the allocation method is ds1ByPass then this object is not required since the whole port specified by msdslFracPortIndex will be assigned to the corresponding msdslFracPortIfIndex. If the allocation method is ds1CrossConn then this object is also not required since the whole port specified by msdslFracPortIndex will be assigned to the port specified by msdslFracPortIfIndex. If the allocation method is ds0CrossConn, then this object specifies the Time Slot associated with the interface identified by msdslFracPortIfIndex for this entry.')
msdslFracPortVoiceData = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voice", 1), ("data", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdslFracPortVoiceData.setStatus('mandatory')
if mibBuilder.loadTexts: msdslFracPortVoiceData.setDescription('The Current mode for this DS0.')
msdslPortConfigAllocMethodTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 29), )
if mibBuilder.loadTexts: msdslPortConfigAllocMethodTable.setStatus('mandatory')
if mibBuilder.loadTexts: msdslPortConfigAllocMethodTable.setDescription('The Paradyne MSDSL Cross Connect Allocation Method Table.')
msdslPortConfigAllocMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 29, 1), ).setIndexNames((0, "HOTWIRE-MSDSL-INTERFACE-MIB", "msdslPortConfigAllocMethodIfIndex"))
if mibBuilder.loadTexts: msdslPortConfigAllocMethodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msdslPortConfigAllocMethodEntry.setDescription('An entry in the Paradyne MSDSL Cross Connect Table Allocation Method')
msdslPortConfigAllocMethodIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msdslPortConfigAllocMethodIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: msdslPortConfigAllocMethodIfIndex.setDescription(' The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
msdslPortConfigAllocMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1, 15, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds1ByPass", 1), ("ds1CrossConn", 2), ("ds0CrossConn", 3), ("notAssigned", 4), ("disabled", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msdslPortConfigAllocMethod.setStatus('mandatory')
if mibBuilder.loadTexts: msdslPortConfigAllocMethod.setDescription('The Current allocation method for this device. Where: ds1ByPass: In this mode the entire WAN interface is connected directly to the DSL interface. This connection provides minimal delay. Changing to this allocation method will automatically do the following assignments: WAN port 1 >>> DSL Port 1 WAN port 2 >>> DSL Port 2 WAN port 3 >>> DSL Port 3 WAN port 4 >>> DSL Port 4 WAN port 5 >>> DSL Port 5 WAN port 6 >>> DSL Port 6 WAN port 7 >>> DSL Port 7 WAN port 8 >>> DSL Port 8 ds1CrossConn: In this mode the individual WAN ports may be connected to individual DSL ports through the cross connect circuitry. This connection must use the System Clock for the timing source. Changing to this allocation method will unassign all the time slots for this interface and any time slots to the connected interface. For example: WAN port 1 >>> DSL Port 8 WAN port 2 >>> DSL Port 7 WAN port 3 >>> DSL Port 6 WAN port 4 >>> DSL Port 5 WAN port 5 >>> DSL Port 1 WAN port 6 >>> DSL Port 2 WAN port 7 >>> Not Assigned WAN port 8 >>> WAN Port 7 ds0CrossConn: This mode assigns individual time slots. Any timeslot from any WAN interface may be connected to any timeslot of any DSL interface. Changing to this allocation method will unassign all the time slots for this interface and any time slots to the connected interface. notAssigned: This indicates that this interface is not assigned. Changing to this allocation method will unassign all the time slots for this interface and any time slots to the connected interface. disabled: This is a Read Only value indicating that the interface is disabled. NOTE: Going from one mode to another mode will unassign all the time slots for that interface and the interface it was connected to. The only exception being ds1ByPass mode. When going from any mode to ds1ByPass, all the Time Slots will be assigned Network port to WAN port. These assignments, however, do not use the cross connect circuitry.')
msdslMarginLow = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msdslMarginLow.setDescription("This trap signifies that the margin estimate is below a customer set threshold value. This is a trap of 'minor' class.")
msdslMarginNormal = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1) + (0,103)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msdslMarginNormal.setDescription("This trap signifies that the margin estimate has gone above a customer set threshold value. this is a trap of 'minor' class. this trap compliments the xdslMarginLow trap")
msdslErrorRateHigh = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1) + (0,4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msdslErrorRateHigh.setDescription("This trap signifies that the error rate estimates is above a customer set threshold value. This is a trap of 'minor' class.")
msdslErrorRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1) + (0,104)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msdslErrorRateNormal.setDescription("This trap signifies that the error rate estimates gone below a customer set threshold value. This is a trap of 'minor' class. This trap compliments the xdslErrorRateHigh trap.")
msdslTestOver = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1) + (0,106)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msdslTestOver.setDescription('This trap signifies that the test has completed on one of the ports. This trap compliments the xdslTestStart trap.')
msdslNTUTypeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 15, 1) + (0,7)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: msdslNTUTypeMismatch.setDescription('The LTU configured does NOT match with the NTU connected to the DSL port indicated by the ifIndex.')
mibBuilder.exportSymbols("HOTWIRE-MSDSL-INTERFACE-MIB", msdslPortConfigAllocMethodTable=msdslPortConfigAllocMethodTable, msdslFarEndIntervalFEBEs=msdslFarEndIntervalFEBEs, msdslFarEndTotalIfIndex=msdslFarEndTotalIfIndex, msdslFarEndCurrentPerfRxGain=msdslFarEndCurrentPerfRxGain, msdslCurrentIfIndex=msdslCurrentIfIndex, msdslCurrentPerfTable=msdslCurrentPerfTable, msdslTotalEntry=msdslTotalEntry, msdslCurrent=msdslCurrent, msdslG703WorstIntervalIfIndex=msdslG703WorstIntervalIfIndex, msdslTotalESs=msdslTotalESs, msdslPerfPayloadRate=msdslPerfPayloadRate, msdslCurrentPerfRxGain=msdslCurrentPerfRxGain, msdslFarEndIntervalIfIndex=msdslFarEndIntervalIfIndex, msdslG703WorstIntervalUASs=msdslG703WorstIntervalUASs, msdslWorstIntervalIfIndex=msdslWorstIntervalIfIndex, msdslIntervalTable=msdslIntervalTable, msdsldsx1WorstIntervalEntry=msdsldsx1WorstIntervalEntry, msdslFarEndCurrentPerfMargin=msdslFarEndCurrentPerfMargin, msdslCurrentEntry=msdslCurrentEntry, msdslIntervalESs=msdslIntervalESs, msdslG703WorstIntervalESs=msdslG703WorstIntervalESs, msdslFarEndCurrent=msdslFarEndCurrent, msdslTotal=msdslTotal, msdslCurrentTable=msdslCurrentTable, msdslWorstIntervalSESs=msdslWorstIntervalSESs, msdslFarEndIntervalTable=msdslFarEndIntervalTable, msdslFarEndWorstInterval=msdslFarEndWorstInterval, msdslIntervalSESs=msdslIntervalSESs, msdslCurrentPerfIfIndex=msdslCurrentPerfIfIndex, msdslFarEndIntervalPerfTable=msdslFarEndIntervalPerfTable, msdslIntervalPerf=msdslIntervalPerf, msdslFarEndWorstIntervalIfIndex=msdslFarEndWorstIntervalIfIndex, msdslErrorRateHigh=msdslErrorRateHigh, msdslFarEndTotalSESs=msdslFarEndTotalSESs, msdslFarEndTotalEntry=msdslFarEndTotalEntry, msdslFracEntry=msdslFracEntry, msdslFarEndWorstIntervalESs=msdslFarEndWorstIntervalESs, msdslFracPortIndex=msdslFracPortIndex, msdslFarEndIntervalPerfRxGain=msdslFarEndIntervalPerfRxGain, msdslFarEndCurrentPerf=msdslFarEndCurrentPerf, msdslFracPortIfTS=msdslFracPortIfTS, msdslIntervalIfIndex=msdslIntervalIfIndex, msdslCurrentPerf=msdslCurrentPerf, msdslTotalFEBEs=msdslTotalFEBEs, msdslIntervalPerfRxGain=msdslIntervalPerfRxGain, msdslFracTable=msdslFracTable, msdslCurrentPerfTxPwr=msdslCurrentPerfTxPwr, msdslValidIntervals=msdslValidIntervals, msdslFarEndIntervalPerfNumber=msdslFarEndIntervalPerfNumber, msdslFarEndIntervalEntry=msdslFarEndIntervalEntry, msdslFarEndCurrentFEBEs=msdslFarEndCurrentFEBEs, msdslG703WorstIntervalCSSs=msdslG703WorstIntervalCSSs, msdslFarEndWorstIntervalEntry=msdslFarEndWorstIntervalEntry, msdslIntervalPerfMargin=msdslIntervalPerfMargin, msdslNTUTypeMismatch=msdslNTUTypeMismatch, msdslErrEventsCounter=msdslErrEventsCounter, msdsldsx1WorstIntervalTable=msdsldsx1WorstIntervalTable, msdslFarEndIntervalPerfTxPwr=msdslFarEndIntervalPerfTxPwr, msdslDevice=msdslDevice, msdslCurrentPerfEntry=msdslCurrentPerfEntry, msdslFarEndIntervalESs=msdslFarEndIntervalESs, msdslIntervalPerfEntry=msdslIntervalPerfEntry, msdslMarginNormal=msdslMarginNormal, msdslTestOver=msdslTestOver, msdslFarEndWorstIntervalTable=msdslFarEndWorstIntervalTable, msdslFarEndCurrentPerfEntry=msdslFarEndCurrentPerfEntry, msdslFarEndIntervalPerfEntry=msdslFarEndIntervalPerfEntry, msdslIntervalPerfTable=msdslIntervalPerfTable, msdslMarginLow=msdslMarginLow, msdslFarEndCurrentEntry=msdslFarEndCurrentEntry, msdslErrTimeElapsed=msdslErrTimeElapsed, msdslIntervalPerfIfIndex=msdslIntervalPerfIfIndex, msdslPortConfigAllocMethodEntry=msdslPortConfigAllocMethodEntry, msdslTimeElapsed=msdslTimeElapsed, msdslFarEndInterval=msdslFarEndInterval, msdslG703WorstIntervalTable=msdslG703WorstIntervalTable, msdslIntervalPerfNumber=msdslIntervalPerfNumber, msdslTotalTable=msdslTotalTable, msdslFracPortTS=msdslFracPortTS, msdsldsx1WorstInterval=msdsldsx1WorstInterval, msdslWorstInterval=msdslWorstInterval, msdslCurrentESs=msdslCurrentESs, msdslFarEndCurrentSESs=msdslFarEndCurrentSESs, msdslIntervalEntry=msdslIntervalEntry, msdslFarEndIntervalPerfIfIndex=msdslFarEndIntervalPerfIfIndex, msdslErrValidIntervals=msdslErrValidIntervals, msdslFarEndCurrentPerfTable=msdslFarEndCurrentPerfTable, msdslPortConfigAllocMethodIfIndex=msdslPortConfigAllocMethodIfIndex, msdslWorstIntervalFEBEs=msdslWorstIntervalFEBEs, msdslIntervalFEBEs=msdslIntervalFEBEs, msdsldsx1WorstIntervalCSSs=msdsldsx1WorstIntervalCSSs, msdslFarEndTotalFEBEs=msdslFarEndTotalFEBEs, msdslG703WorstIntervalBESs=msdslG703WorstIntervalBESs, msdslG703WorstInterval=msdslG703WorstInterval, msdslFarEndWorstIntervalSESs=msdslFarEndWorstIntervalSESs, msdslPortConfigAllocMethod=msdslPortConfigAllocMethod, msdsldsx1WorstIntervalIfIndex=msdsldsx1WorstIntervalIfIndex, msdslG703WorstIntervalSESs=msdslG703WorstIntervalSESs, msdslFarEndTotal=msdslFarEndTotal, msdslFarEndIntervalSESs=msdslFarEndIntervalSESs, msdslIntervalNumber=msdslIntervalNumber, msdslFarEndTotalESs=msdslFarEndTotalESs, msdslWorstIntervalTable=msdslWorstIntervalTable, msdslCurrentPerfMargin=msdslCurrentPerfMargin, msdslFarEndCurrentIfIndex=msdslFarEndCurrentIfIndex, msdsldsx1WorstIntervalUASs=msdsldsx1WorstIntervalUASs, msdslFarEndIntervalPerf=msdslFarEndIntervalPerf, msdslFarEndTotalTable=msdslFarEndTotalTable, msdslFarEndCurrentPerfIfIndex=msdslFarEndCurrentPerfIfIndex, msdsldsx1WorstIntervalLOFC=msdsldsx1WorstIntervalLOFC, msdslFracPortIfIndex=msdslFracPortIfIndex, msdslWorstIntervalEntry=msdslWorstIntervalEntry, msdsldsx1WorstIntervalESs=msdsldsx1WorstIntervalESs, msdslErrorRateNormal=msdslErrorRateNormal, msdslFarEndWorstIntervalFEBEs=msdslFarEndWorstIntervalFEBEs, msdslCurrentSESs=msdslCurrentSESs, msdslG703WorstIntervalLOFC=msdslG703WorstIntervalLOFC, msdslConfiguration=msdslConfiguration, msdslFarEndIntervalNumber=msdslFarEndIntervalNumber, msdslTotalSESs=msdslTotalSESs, msdslCurrentFEBEs=msdslCurrentFEBEs, msdslIntervalPerfTxPwr=msdslIntervalPerfTxPwr, msdslG703WorstIntervalEntry=msdslG703WorstIntervalEntry, msdslTotalIfIndex=msdslTotalIfIndex, msdslFarEndCurrentTable=msdslFarEndCurrentTable, msdslWorstIntervalESs=msdslWorstIntervalESs, msdslFracPortVoiceData=msdslFracPortVoiceData, msdslFarEndCurrentPerfTxPwr=msdslFarEndCurrentPerfTxPwr, msdsldsx1WorstIntervalBESs=msdsldsx1WorstIntervalBESs, msdslFarEndCurrentESs=msdslFarEndCurrentESs, msdsldsx1WorstIntervalSESs=msdsldsx1WorstIntervalSESs, msdslInterval=msdslInterval, msdslFarEndIntervalPerfMargin=msdslFarEndIntervalPerfMargin)
