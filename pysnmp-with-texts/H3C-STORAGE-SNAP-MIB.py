#
# PySNMP MIB module H3C-STORAGE-SNAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-STORAGE-SNAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:23:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
H3cExtendSelectPolicy, H3cRaidIDType, H3cLvIDType, H3cStorageOnlineState, H3cStorageActionType, H3cStorageEnableState, h3cStorageRef = mibBuilder.importSymbols("H3C-STORAGE-REF-MIB", "H3cExtendSelectPolicy", "H3cRaidIDType", "H3cLvIDType", "H3cStorageOnlineState", "H3cStorageActionType", "H3cStorageEnableState", "h3cStorageRef")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, ObjectIdentity, NotificationType, Bits, IpAddress, MibIdentifier, Unsigned32, ModuleIdentity, Gauge32, Counter32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "ObjectIdentity", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DateAndTime, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "RowStatus", "TextualConvention")
h3cStorageSnap = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2))
if mibBuilder.loadTexts: h3cStorageSnap.setLastUpdated('200709141452Z')
if mibBuilder.loadTexts: h3cStorageSnap.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cStorageSnap.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cStorageSnap.setDescription('This MIB describes the general information about snap of storage device.')
h3cSnapMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1))
h3cGlobalSnapSettingsObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 1))
h3cAddtionalSpaceMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 1, 1), Integer32()).setUnits('TB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cAddtionalSpaceMaxSize.setStatus('current')
if mibBuilder.loadTexts: h3cAddtionalSpaceMaxSize.setDescription('This object identifies the maximal size of snapshot resource, safecache, and Continued replication Resource .')
h3cSnapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2), )
if mibBuilder.loadTexts: h3cSnapConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cSnapConfigTable.setDescription('This table contains some entity to config the snapshot resources for special logic volumes.')
h3cSnapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"))
if mibBuilder.loadTexts: h3cSnapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSnapConfigEntry.setDescription('An entry containing configuration about the snapshot resource.')
h3cSnapLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cSnapLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSnapLvIndex.setDescription('This object identifies the index of h3cSnapConfigTable. The object identified by this index is the same object as identified by the same value of h3cLvIndex.')
h3cSnapAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 2), H3cLvIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapAreaId.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaId.setDescription('This object identifies the snapshot resource of the logic volume.')
h3cSnapAreaAutoExpand = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 3), H3cStorageEnableState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaAutoExpand.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaAutoExpand.setDescription('This object describes if the space of snapshot resource can be expanded automatically.')
h3cSnapAreaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaThreshold.setDescription("If h3cSnapAreaAutoExpand is selected, the 'h3cSnapAreaThreshold' means the threshold of the snapshot resource.")
h3cSnapAreaIncSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaIncSize.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaIncSize.setDescription("If h3cSnapAreaAutoExpand is selected, the 'h3cSnapAreaIncSize' means the amount of space to be allocated for each expansion.")
h3cSnapAreaMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 6), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaMaxSize.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaMaxSize.setDescription("If h3cSnapAreaAutoExpand is selected, the 'h3cSnapAreaIncSize' means the max size of snapshot resource.")
h3cSnapAreaFullDeleteTM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rotative", 1), ("none", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaFullDeleteTM.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaFullDeleteTM.setDescription('This object identifies if the snapshot resource is out of space and expand failed, if the system delete the old timemark until enough space or not.')
h3cSnapAreaNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 8), H3cStorageEnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaNotify.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaNotify.setDescription('This object describes if a snapshot notification should be send to the client when the system create a timemark.')
h3cSnapAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 9), H3cStorageOnlineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapAreaStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaStatus.setDescription('This object describes the state of the snapshot resource.')
h3cSnapRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 10), H3cRaidIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapRaidUuid.setStatus('current')
if mibBuilder.loadTexts: h3cSnapRaidUuid.setDescription('This object describes the raid where the snapshot resource is created.')
h3cSnapRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 11), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapRaidSize.setStatus('current')
if mibBuilder.loadTexts: h3cSnapRaidSize.setDescription('This object describes the size designated when the snapshot resource is created.')
h3cSnapRaidSelectPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 12), H3cExtendSelectPolicy().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapRaidSelectPolicy.setStatus('current')
if mibBuilder.loadTexts: h3cSnapRaidSelectPolicy.setDescription("This object describes the policy when the snapshot resource is created automatically. Note that the value can not be 'none' when the value of associated h3cSnapRaidUuid object is equal to null.")
h3cSnapAreaTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 13), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapAreaTotalSize.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaTotalSize.setDescription('This object identifies the current total size of the snapshot resource.')
h3cSnapAreaFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 14), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapAreaFreeSize.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaFreeSize.setDescription('This object identifies the free size of the snapshot resource.')
h3cSnapExtendTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapExtendTimes.setStatus('current')
if mibBuilder.loadTexts: h3cSnapExtendTimes.setDescription('This object identifies the times the snapshot resource extended.')
h3cSnapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSnapRowStatus.setDescription('This object identifies the action of snapshot resource. Note that the assocai snapshot resource can not be delete when a snapshot copy is processing or the TimeMark is enabled, or the replication is enabled.')
h3cSnapExpandTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 3), )
if mibBuilder.loadTexts: h3cSnapExpandTable.setStatus('current')
if mibBuilder.loadTexts: h3cSnapExpandTable.setDescription('This table contains some entity to expand a snapshot resource.')
h3cSnapExpandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 3, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cSAExpRaidUuid"))
if mibBuilder.loadTexts: h3cSnapExpandEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSnapExpandEntry.setDescription('An entry containing expand information applicable to the snapshot resource.')
h3cSAExpRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 3, 1, 1), H3cRaidIDType())
if mibBuilder.loadTexts: h3cSAExpRaidUuid.setStatus('current')
if mibBuilder.loadTexts: h3cSAExpRaidUuid.setDescription('This index is identical to h3cRaidUuid in H3C-RAID-MIB.')
h3cSAExpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 3, 1, 2), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSAExpSize.setStatus('current')
if mibBuilder.loadTexts: h3cSAExpSize.setDescription('This object describes the increased size for snapshot resource when expanded. The units is million bytes. The value is always equal to zero when read.')
h3cSAExpRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 3, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSAExpRaidSize.setStatus('current')
if mibBuilder.loadTexts: h3cSAExpRaidSize.setDescription('This object describes the size for snapshot resource on the raid. The units is million bytes. The value is always equal to zero when read.')
h3cSnapAreaExpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSnapAreaExpRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSnapAreaExpRowStatus.setDescription('This object describes the actions to expand the size for snap.')
h3cSnapCopyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 4), )
if mibBuilder.loadTexts: h3cSnapCopyTable.setStatus('current')
if mibBuilder.loadTexts: h3cSnapCopyTable.setDescription('This table contains some entity about snapshot copy.')
h3cSnapCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 4, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"))
if mibBuilder.loadTexts: h3cSnapCopyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSnapCopyEntry.setDescription('An entry containing snapshot copy information applicable.')
h3cSnapCopyLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 4, 1, 1), H3cLvIDType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSnapCopyLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSnapCopyLvIndex.setDescription('This object identifies the index of destination logic volume for snapshot copy.')
h3cSnapCopyPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapCopyPercentage.setStatus('current')
if mibBuilder.loadTexts: h3cSnapCopyPercentage.setDescription("This object identifies the percentage of snapshot copy. The value is equal to zero if the snapshot copy has not started. When finished, the value is always equal to '100'.")
h3cSnapCopyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSnapCopyStartTime.setStatus('current')
if mibBuilder.loadTexts: h3cSnapCopyStartTime.setDescription('This object identifies the time to start the snapshot copy.')
h3cSnapCopySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSnapCopySwitch.setStatus('current')
if mibBuilder.loadTexts: h3cSnapCopySwitch.setDescription("This object describes the actions to start or stop the snapshot copy. When read, the value of 'none' will be get. Note that if the snapshot resource of source logic volume has not been created, the action of snapshot copy will be refused by agent.")
h3cTimeMarkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5), )
if mibBuilder.loadTexts: h3cTimeMarkConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkConfigTable.setDescription('This table contains some entity to config a TimeMark on a special logic volume.')
h3cTimeMarkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"))
if mibBuilder.loadTexts: h3cTimeMarkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkConfigEntry.setDescription('An entry containing config information applicable to the TimeMark.')
h3cTimeMarkCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cTimeMarkCounts.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkCounts.setDescription('This object identifies the max num of TimeMark which can be configed.')
h3cTimeMarkInitializeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cTimeMarkInitializeTime.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkInitializeTime.setDescription('This object identifies the date and time when the first TimeMark is created on the logic volume.')
h3cTimeMarkInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cTimeMarkInterval.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkInterval.setDescription('This object identifies the interval when the TimeMark is created automatically if the value of this object is not equal to zero. The units is second. the min value is 10 seconds.')
h3cTimeMarkLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cTimeMarkLastTime.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkLastTime.setDescription('This object identifies the date and time when the latest TimeMark is created on the logic volume.')
h3cTimeMarkTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTimeMarkTotal.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkTotal.setDescription('This object identifies the current num of TimeMark.')
h3cTimeMarkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 5, 1, 6), H3cStorageEnableState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cTimeMarkSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkSwitch.setDescription('This object describes enable or disable TimeMark.')
h3cTimeMarkCreateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 6), )
if mibBuilder.loadTexts: h3cTimeMarkCreateTable.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkCreateTable.setDescription('This table contains some entity to create a TimeMark on a special logic volume.')
h3cTimeMarkCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 6, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cTimeMarkStamp"))
if mibBuilder.loadTexts: h3cTimeMarkCreateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkCreateEntry.setDescription('An entry containing create information applicable to the TimeMark.')
h3cTimeMarkStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 6, 1, 1), DateAndTime())
if mibBuilder.loadTexts: h3cTimeMarkStamp.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkStamp.setDescription('This object identifies the date and time the TimeMark is created.')
h3cTimeMarkComment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTimeMarkComment.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkComment.setDescription('This object identifies the comment of the TimeMark.')
h3cTimeMarkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 6, 1, 3), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTimeMarkSize.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkSize.setDescription('This object identifies the current size of the TimeMark.')
h3cTimeMarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cTimeMarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkRowStatus.setDescription('This object identifies the action to create or delete the TimeMark. Note that the TimeMark can not be deleted if it is using.')
h3cTimeMarkCopyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 7), )
if mibBuilder.loadTexts: h3cTimeMarkCopyTable.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkCopyTable.setDescription('This table contains some entity about a TimeMark copy.')
h3cTimeMarkCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 7, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cTimeMarkStamp"))
if mibBuilder.loadTexts: h3cTimeMarkCopyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkCopyEntry.setDescription('An entry containing config information applicable to the TimeMark copy.')
h3cTMCopyDestLvId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 7, 1, 1), H3cLvIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTMCopyDestLvId.setStatus('current')
if mibBuilder.loadTexts: h3cTMCopyDestLvId.setDescription('This object identifies the index of destination logic volume for TimeMark copy.')
h3cTMCopyPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTMCopyPercentage.setStatus('current')
if mibBuilder.loadTexts: h3cTMCopyPercentage.setDescription("This object identifies the percentage of TimeMark copy. The value is equal to zero if the TimeMark copy has not started. When finished, the value is always equal to '100'.")
h3cTMCopyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 7, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTMCopyStartTime.setStatus('current')
if mibBuilder.loadTexts: h3cTMCopyStartTime.setDescription('This object identifies the time to start the TimeMark copy.')
h3cTMCopySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cTMCopySwitch.setStatus('current')
if mibBuilder.loadTexts: h3cTMCopySwitch.setDescription("This object describes the actions to start or stop the TimeMark copy. When read, the value of 'none' will be get.")
h3cTimeMarkRollbackTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 8), )
if mibBuilder.loadTexts: h3cTimeMarkRollbackTable.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkRollbackTable.setDescription('This table contains some entity to use a TimeMark to rollback the logic volume.')
h3cTimeMarkRollbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 8, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cTimeMarkStamp"))
if mibBuilder.loadTexts: h3cTimeMarkRollbackEntry.setStatus('current')
if mibBuilder.loadTexts: h3cTimeMarkRollbackEntry.setDescription('An entry containing config information applicable to use a TimeMark to rollback the logic volume.')
h3cTMRollbackPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTMRollbackPercentage.setStatus('current')
if mibBuilder.loadTexts: h3cTMRollbackPercentage.setDescription('This object identifies the percentage of rollback.')
h3cTMRollbackStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTMRollbackStartTime.setStatus('current')
if mibBuilder.loadTexts: h3cTMRollbackStartTime.setDescription('This object identifies the time to start the rollback.')
h3cTMRollbackSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 8, 1, 3), H3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cTMRollbackSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cTMRollbackSwitch.setDescription('This object describes the actions to use a TimeMark to rollback the logic volume. Note that once you roll back, you cannot roll forward, all the later TimeMark behind it will be deleted.')
h3cTimeViewTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 9), )
if mibBuilder.loadTexts: h3cTimeViewTable.setStatus('current')
if mibBuilder.loadTexts: h3cTimeViewTable.setDescription('This table contains some entity to config a TimeView on a special TimeMark.')
h3cTimeViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 9, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSnapLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cTimeViewStamp"))
if mibBuilder.loadTexts: h3cTimeViewEntry.setStatus('current')
if mibBuilder.loadTexts: h3cTimeViewEntry.setDescription('An entry containing config information applicable to the TimeView.')
h3cTimeViewStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 9, 1, 1), DateAndTime())
if mibBuilder.loadTexts: h3cTimeViewStamp.setStatus('current')
if mibBuilder.loadTexts: h3cTimeViewStamp.setDescription('This object identifies the TimeView. The object identified by this index is the same object as identified by the same value of h3cTimeMarkStamp.')
h3cTimeViewID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 9, 1, 2), H3cLvIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTimeViewID.setStatus('current')
if mibBuilder.loadTexts: h3cTimeViewID.setDescription('This object identifies the TimeView. ')
h3cTimeViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 9, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cTimeViewName.setStatus('current')
if mibBuilder.loadTexts: h3cTimeViewName.setDescription('This object identifies the name of the TimeView.')
h3cTimeViewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cTimeViewRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cTimeViewRowStatus.setDescription('This object describes the actions to create or delete the TimeView.')
h3cReplicaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10), )
if mibBuilder.loadTexts: h3cReplicaConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaConfigTable.setDescription('This table contains some entity to config replication for a logic volume.')
h3cReplicaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cRepLocalLvIndex"))
if mibBuilder.loadTexts: h3cReplicaConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaConfigEntry.setDescription('An entry containing config information applicable to the replication for a logic volume.')
h3cRepLocalLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cRepLocalLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cRepLocalLvIndex.setDescription('This object identifies the local logic volume that is related with replication. The object identified by this index is the same object as identified by the same value of h3cSnapLvIndex.')
h3cLvRepLocalWay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cLvRepLocalWay.setStatus('current')
if mibBuilder.loadTexts: h3cLvRepLocalWay.setDescription("The value of 'outgoing' means the h3cRepLocalLvIndex is the primary logic volume of replication, and the h3cRepRemoteLvIndex is the replica logic volume. The value of 'incoming' means the h3cRepLocalLvIndex is the replica logic volume of replication. , and the h3cRepRemoteLvIndex is the primary logic volume.")
h3cRepLocalServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepLocalServerIP.setStatus('current')
if mibBuilder.loadTexts: h3cRepLocalServerIP.setDescription('This object identifies the ip address of local server.')
h3cRepLocalServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepLocalServerIPType.setStatus('current')
if mibBuilder.loadTexts: h3cRepLocalServerIPType.setDescription('This object identifies the ip address type of local server.')
h3cRepLocalServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRepLocalServerName.setStatus('current')
if mibBuilder.loadTexts: h3cRepLocalServerName.setDescription('This object identifies the name of local server.')
h3cRepLocalServerUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepLocalServerUsername.setStatus('current')
if mibBuilder.loadTexts: h3cRepLocalServerUsername.setDescription('This object identifies the username of local server.')
h3cRepLocalServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepLocalServerPassword.setStatus('current')
if mibBuilder.loadTexts: h3cRepLocalServerPassword.setDescription('This object identifies the password of local server.')
h3cRepRemoteServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepRemoteServerIP.setStatus('current')
if mibBuilder.loadTexts: h3cRepRemoteServerIP.setDescription('This object identifies the ip address of remote server.')
h3cRepRemoteServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 9), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepRemoteServerIPType.setStatus('current')
if mibBuilder.loadTexts: h3cRepRemoteServerIPType.setDescription('This object identifies the ip address type of remote server.')
h3cRepRemoteServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cRepRemoteServerName.setStatus('current')
if mibBuilder.loadTexts: h3cRepRemoteServerName.setDescription('This object identifies the name of remote server.')
h3cRepRemoteServerUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepRemoteServerUsername.setStatus('current')
if mibBuilder.loadTexts: h3cRepRemoteServerUsername.setDescription('This object identifies the username of remote server.')
h3cRepRemoteServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepRemoteServerPassword.setStatus('current')
if mibBuilder.loadTexts: h3cRepRemoteServerPassword.setDescription('This object identifies the password of remote server.')
h3cRepRemoteLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 13), H3cLvIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cRepRemoteLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cRepRemoteLvIndex.setDescription('This object identifies the logic volume of remote server.')
h3cReplicaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("adaptive", 1), ("remote", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaMode.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaMode.setDescription("This object identifies the replication mode: The value of 'adaptive' means that data from the primary resource is continuously replicated to a replica resource unless the system determines it is not practical or possible. The value of 'remote' means that a snapshot is taken of the primary resource at prescribed intervals based on the criteria you set (schedule and/or watermark value). Note that the associated Continuous Replication Resource can not be created if the value of this boject is not equal to 'adaptive'.")
h3cReplicaWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 15), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaWatermark.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaWatermark.setDescription('This object identifies the size of watermark which means a replication is scheduled.')
h3cReplicaWatermarkRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaWatermarkRetry.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaWatermarkRetry.setDescription("If the 'h3cReplicaWatermark' is set, This object identifies the interval time to retry if the last replication is failed. The units is minute.")
h3cReplicaInitializeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 17), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaInitializeTime.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaInitializeTime.setDescription('This object identifies the time to start an initial replication.')
h3cReplicaInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaInterval.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaInterval.setDescription('This object identifies how often the replication should be repeated after initial replication. The units is minute.')
h3cReplicaEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 19), H3cStorageEnableState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaEncrypt.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaEncrypt.setDescription('This object identifies the encrypt option is enable or diable.')
h3cReplicaCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 20), H3cStorageEnableState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaCompress.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaCompress.setDescription('This object identifies the compress option is enable or diable.')
h3cReplicaUseExistTM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 21), H3cStorageEnableState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaUseExistTM.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaUseExistTM.setDescription('This object identifies if using the exist TimeMark to replicate or not.')
h3cReplicaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("rudp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaProtocol.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaProtocol.setDescription("This object identifies the protocol about replication. The value 'tcp' means Transmission Control Protocol, and 'rudp' means Reliable User Datagram Protocol.")
h3cReplicaScanDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaScanDiff.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaScanDiff.setDescription('This object identifies the system to scan both the primary and replica resource to determine how much data needs to be synchronized.')
h3cReplicaStatSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("promte", 1), ("sync", 2), ("scan", 3), ("reversal", 4), ("stop", 5), ("suspend", 6), ("resume", 7), ("none", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaStatSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaStatSwitch.setDescription("This object identifies the action how to operate the replica. When read , a value of 'none' will be get. The value of 'promte' means remove the replication relation and promote the remote copy on the target server. The value of 'sync' means synchronize mannually (force a replication that is not scheduled.) The value of 'scan' means scan the delta data between primary resource and replica resource. The value of 'reversal' means switch the roles of the primary resource and replica resource. The replication configuration is maintained. The primary and replica must be synchronized in order to reverse a replica. The value of 'stop' means stop a replication that is currently in progress. The value of 'suspend' means suspend future replications from automatically being triggered by replication policies (watermark, interval, time). This will not stop a replication that is currently in progress. The value of 'resume' means resume the replication status from suspended to normal. Note that if the action of 'upgrade' is executed successfully, this replica resource will become a normal logic volume, and this entry will be deleted automatically. Note that if the action of 'reversal' is executed successfully, Clients will be disconnected from the former primary resource.")
h3cReplicaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 10, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cReplicaRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaRowStatus.setDescription('This object identifies the action to enable or disable the replication.')
h3cReplicaStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11), )
if mibBuilder.loadTexts: h3cReplicaStateTable.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaStateTable.setDescription('This table contains some entity to show replication state.')
h3cReplicaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cRepLocalLvIndex"))
if mibBuilder.loadTexts: h3cReplicaStateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaStateEntry.setDescription('An entry containing show information applicable to the replication state.')
h3cReplicaDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 1), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaDelta.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaDelta.setDescription('This object identifies the size of delta data after last sync.')
h3cReplicaLastSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaLastSyncTime.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaLastSyncTime.setDescription('This object identifies the date and time when last sync is taken.')
h3cReplicaNextSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaNextSyncTime.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaNextSyncTime.setDescription('This object identifies the date and time when next sync will be taken.')
h3cReplicaSyncTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaSyncTotalSize.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaSyncTotalSize.setDescription('This object identifies how much data need to be synchronized to the replica resource for current replication.')
h3cReplicaSyncCurPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaSyncCurPercentage.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaSyncCurPercentage.setDescription('This object identifies how much data has been synchronized to the replica resource for current replication.')
h3cReplicaSyncPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaSyncPerformance.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaSyncPerformance.setDescription('This object identifies the performance of the synchronize. The unit is MB/s.')
h3cReplicaRunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("suspend", 1), ("idle", 2), ("stop", 3), ("sync", 4), ("scan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cReplicaRunStatus.setStatus('current')
if mibBuilder.loadTexts: h3cReplicaRunStatus.setDescription('This object identifies the state of the replica.')
h3cCDRConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12), )
if mibBuilder.loadTexts: h3cCDRConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cCDRConfigTable.setDescription('This table contains some entity to config Continuous Replication Resource.')
h3cCDRConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cCDRLvIndex"))
if mibBuilder.loadTexts: h3cCDRConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCDRConfigEntry.setDescription('An entry containing some information applicable to Continuous Replication Resource of the logic volume.')
h3cCDRLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cCDRLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCDRLvIndex.setDescription("This object identifies the source logic volume of the Continuous Replication Resource. The object identified by this index is the same object as identified by the same value of h3cRepLocalLvIndex. Note that an entry of h3cCDRConfigTable can be created only when the associated h3cCDRDistributeTable's objects is ready or the associated select policy is not equal to 'none'. If an entry is deleted, the associated h3cCDRDistributeTable objects should be deleted automatically.")
h3cCDRID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCDRID.setStatus('current')
if mibBuilder.loadTexts: h3cCDRID.setDescription('This object identifies the Continuous Replication Resource.')
h3cCDRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 3), H3cStorageOnlineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCDRStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCDRStatus.setDescription('This object identifies the state of the Continuous Replication Resource.')
h3cCDRTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCDRTotalSize.setStatus('current')
if mibBuilder.loadTexts: h3cCDRTotalSize.setDescription('This object identifies the total size of the Continuous Replication Resource.')
h3cCDRFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCDRFreeSize.setStatus('current')
if mibBuilder.loadTexts: h3cCDRFreeSize.setDescription('This object identifies the free size of the Continuous Replication Resource.')
h3cCDRSelectPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 6), H3cExtendSelectPolicy().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCDRSelectPolicy.setStatus('current')
if mibBuilder.loadTexts: h3cCDRSelectPolicy.setDescription('This object describes the policy about allocating the space for Continuous Replication Resource.')
h3cCDRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 12, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCDRRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCDRRowStatus.setDescription('This object identifies the action to create or delete the Continuous Replication Resource.')
h3cCDRDistributeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 13), )
if mibBuilder.loadTexts: h3cCDRDistributeTable.setStatus('current')
if mibBuilder.loadTexts: h3cCDRDistributeTable.setDescription('This table contains some entity to config the distribution of Continuous Replication Resource.')
h3cCDRDistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 13, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cCDRDistLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cCDRRaidUuid"))
if mibBuilder.loadTexts: h3cCDRDistributeEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCDRDistributeEntry.setDescription('An entry containing some information applicable to the distribution of Continuous Replication Resource.')
h3cCDRDistLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 13, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cCDRDistLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCDRDistLvIndex.setDescription('This index is identical to h3cLvIndex in H3C-LOGIC-VOLUME-MIB.')
h3cCDRRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 13, 1, 2), H3cRaidIDType())
if mibBuilder.loadTexts: h3cCDRRaidUuid.setStatus('current')
if mibBuilder.loadTexts: h3cCDRRaidUuid.setDescription('This index is identical to h3cRaidUuid in H3C-RAID-MIB.')
h3cCDRRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 13, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCDRRaidSize.setStatus('current')
if mibBuilder.loadTexts: h3cCDRRaidSize.setDescription('This object identifies the size on the special raid distributed for the Continuous Replication Resource.')
h3cCDRExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCDRExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCDRExtRowStatus.setDescription('This object identifies the action to create the distribution for the Continuous Replication Resource.')
h3cSafeCacheConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14), )
if mibBuilder.loadTexts: h3cSafeCacheConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheConfigTable.setDescription('This table contains some entity to config SafeCache.')
h3cSafeCacheConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSafeCacheLvIndex"))
if mibBuilder.loadTexts: h3cSafeCacheConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheConfigEntry.setDescription('An entry containing some information applicable to SafeCache of the logic volume.')
h3cSafeCacheLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cSafeCacheLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheLvIndex.setDescription("This object identifies the source logic volume of the SafeCache. The object identified by this index is the same object as identified by the same value of h3cLvindex. Note that an entry of h3cSafeCacheConfigTable can be created only when the associated h3cSafeCacheDistributeTable's objects is ready or the associated select policy is not equal to 'none'. If an entry is deleted, the associated h3cSafeCacheDistributeTable objects should be deleted automatically.")
h3cSafeCacheID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSafeCacheID.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheID.setDescription('This object identifies a SafeCache.')
h3cSafeCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 3), H3cStorageOnlineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSafeCacheStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheStatus.setDescription('This object identifies the state of the SafeCache.')
h3cSafeCacheTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 4), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSafeCacheTotalSize.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheTotalSize.setDescription('This object identifies the total size of the SafeCache. The units is million bytes.')
h3cSafeCacheFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSafeCacheFreeSize.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheFreeSize.setDescription('This object identifies the free size of the SafeCache. The units is million bytes.')
h3cSafeCacheSelectPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 6), H3cExtendSelectPolicy().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheSelectPolicy.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheSelectPolicy.setDescription('This object describes the policy about allocating the space for SafeCache.')
h3cSafeCacheThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheThreshold.setDescription('This object identifies the maximal percentage of date changed before data flushing.')
h3cSafeCacheFlushTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheFlushTime.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheFlushTime.setDescription('This object identifies the period during which the date can stay in cache before data flushing. The units is second.')
h3cSafeCacheFlushCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheFlushCommand.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheFlushCommand.setDescription('This object identifies the number of commands when data flushing.')
h3cSafeCacheSkipDupWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheSkipDupWrite.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheSkipDupWrite.setDescription('This object identifies skip duplicate write commands or not.')
h3cSafeCacheRunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("run", 1), ("suspend", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSafeCacheRunStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheRunStatus.setDescription('This object identifies the run state of the SafeCache.')
h3cSafeCacheSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("suspend", 1), ("resume", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheSwitch.setDescription("This object identifies the action of the SafeCache. The value 'suspend' means suspend the SafeCache. The value 'resume' means resume the SafeCache.")
h3cSafeCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 14, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheRowStatus.setDescription('This object identifies the action to create or delete the SafeCache.')
h3cSafeCacheDistributeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 15), )
if mibBuilder.loadTexts: h3cSafeCacheDistributeTable.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheDistributeTable.setDescription('This table contains some entity to config the SafeCache resource.')
h3cSafeCacheDistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 15, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cSafeCacheDistLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cSafeCacheRaidUuid"))
if mibBuilder.loadTexts: h3cSafeCacheDistributeEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheDistributeEntry.setDescription('An entry containing some information applicable to SafeCache resource of the logic volume.')
h3cSafeCacheDistLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 15, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cSafeCacheDistLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheDistLvIndex.setDescription('This index is identical to h3cLvIndex in H3C-LOGIC-VOLUME-MIB.')
h3cSafeCacheRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 15, 1, 2), H3cRaidIDType())
if mibBuilder.loadTexts: h3cSafeCacheRaidUuid.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheRaidUuid.setDescription('This index is identical to h3cRaidUuid in H3C-RAID-MIB.')
h3cSafeCacheRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 15, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheRaidSize.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheRaidSize.setDescription('This object identifies the size on the special raid distributed for the SafeCache resource.')
h3cSafeCacheExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSafeCacheExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSafeCacheExtRowStatus.setDescription('This object identifies the action to create the distribution for the SafeCache resource.')
h3cMirrorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16), )
if mibBuilder.loadTexts: h3cMirrorConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorConfigTable.setDescription('This table contains some entity to config mirror.')
h3cMirrorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cMirrorLvIndex"))
if mibBuilder.loadTexts: h3cMirrorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorConfigEntry.setDescription('An entry containing some information applicable to mirror for the logic volume.')
h3cMirrorLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cMirrorLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorLvIndex.setDescription("This object identifies the source logic volume of the mirror. The object identified by this index is the same object as identified by the same value of h3cLvindex. Note that an entry of h3cMirrorConfigTable can be created only when the associated h3cMirrorDistributeTable's objects is ready or the associated select policy is not equal to 'none'. If an entry is deleted, the associated h3cMirrorDistributeTable objects should be deleted automatically.")
h3cMirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sync", 1), ("async", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMirrorType.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorType.setDescription('This object identifies the type of the mirror.')
h3cMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 3), H3cStorageOnlineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMirrorStatus.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorStatus.setDescription('This object identifies the state of the mirror resource.')
h3cMirrorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorName.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorName.setDescription('This object identifies the name of the mirror resource. it is used when promote mirror resource.')
h3cMirrorSyncPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMirrorSyncPercentage.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorSyncPercentage.setDescription('This object identifies the percentage of the mirror sync.')
h3cMirrorSyncPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMirrorSyncPerformance.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorSyncPerformance.setDescription('This object identifies the performance of the mirror sync. The unit is MB/S')
h3cMirrorDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 7), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMirrorDelta.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorDelta.setDescription('This object identifies size of delta data after the last mirror sync.')
h3cMirrorRaidType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("virtual", 1), ("serviceEnable", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorRaidType.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorRaidType.setDescription('This object identifies the raid type of the mirror resource.')
h3cMirrorSelectPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 9), H3cExtendSelectPolicy().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorSelectPolicy.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorSelectPolicy.setDescription('This object describes the policy about allocating the space for mirror resource.')
h3cMirrorSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sync", 1), ("swap", 2), ("promote", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorSwitch.setDescription("This object identifies the state of the mirror. The value of 'sync' means synchronize mannually. The value of 'swap' means switch the roles of the primary resource and mirror resource. The value of 'promte' means break the mirrored pair and convert the mirror resource into an independent logic volume. The new logic volume will have all of the properties of a regular logic volume. Note that if the action of 'promte' is executed successfully, this mirror resource will become a primary logic volume, and this entry will be deleted automatically.")
h3cMirrorExtendRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 11), H3cRaidIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorExtendRaidUuid.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorExtendRaidUuid.setDescription('This object identifies the raid of the mirror resource when the primary logic volume resource is extended.')
h3cMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 16, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorRowStatus.setDescription('This object identifies the action to create or delete the mirror resource.')
h3cMirrorDistributeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 17), )
if mibBuilder.loadTexts: h3cMirrorDistributeTable.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorDistributeTable.setDescription('This table contains some entity to config the mirror resource.')
h3cMirrorDistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 17, 1), ).setIndexNames((0, "H3C-STORAGE-SNAP-MIB", "h3cMirrorDistLvIndex"), (0, "H3C-STORAGE-SNAP-MIB", "h3cMirrorRaidUuid"))
if mibBuilder.loadTexts: h3cMirrorDistributeEntry.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorDistributeEntry.setDescription('An entry containing some information applicable to mirror resource for the logic volume.')
h3cMirrorDistLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 17, 1, 1), H3cLvIDType())
if mibBuilder.loadTexts: h3cMirrorDistLvIndex.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorDistLvIndex.setDescription('This index is identical to h3cLvIndex in H3C-LOGIC-VOLUME-MIB.')
h3cMirrorRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 17, 1, 2), H3cRaidIDType())
if mibBuilder.loadTexts: h3cMirrorRaidUuid.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorRaidUuid.setDescription('This index is identical to h3cRaidUuid in H3C-RAID-MIB.')
h3cMirrorRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 17, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorRaidSize.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorRaidSize.setDescription('This object identifies the size on the special raid distributed for the mirror resource.')
h3cMirrorExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 10, 2, 1, 17, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cMirrorExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cMirrorExtRowStatus.setDescription('This object identifies the action to create or delete the distribution for the mirror resource.')
mibBuilder.exportSymbols("H3C-STORAGE-SNAP-MIB", h3cSAExpSize=h3cSAExpSize, h3cSnapExpandTable=h3cSnapExpandTable, h3cReplicaRowStatus=h3cReplicaRowStatus, h3cCDRConfigTable=h3cCDRConfigTable, h3cMirrorRaidType=h3cMirrorRaidType, h3cStorageSnap=h3cStorageSnap, PYSNMP_MODULE_ID=h3cStorageSnap, h3cReplicaSyncCurPercentage=h3cReplicaSyncCurPercentage, h3cGlobalSnapSettingsObject=h3cGlobalSnapSettingsObject, h3cSafeCacheLvIndex=h3cSafeCacheLvIndex, h3cCDRDistributeEntry=h3cCDRDistributeEntry, h3cTimeViewName=h3cTimeViewName, h3cMirrorSyncPerformance=h3cMirrorSyncPerformance, h3cTimeViewStamp=h3cTimeViewStamp, h3cTimeViewID=h3cTimeViewID, h3cMirrorDelta=h3cMirrorDelta, h3cMirrorDistLvIndex=h3cMirrorDistLvIndex, h3cSnapAreaStatus=h3cSnapAreaStatus, h3cMirrorSyncPercentage=h3cMirrorSyncPercentage, h3cReplicaMode=h3cReplicaMode, h3cCDRStatus=h3cCDRStatus, h3cSafeCacheID=h3cSafeCacheID, h3cSnapAreaThreshold=h3cSnapAreaThreshold, h3cReplicaCompress=h3cReplicaCompress, h3cReplicaInitializeTime=h3cReplicaInitializeTime, h3cSnapExtendTimes=h3cSnapExtendTimes, h3cCDRFreeSize=h3cCDRFreeSize, h3cTimeMarkStamp=h3cTimeMarkStamp, h3cTMCopySwitch=h3cTMCopySwitch, h3cSafeCacheThreshold=h3cSafeCacheThreshold, h3cTimeMarkTotal=h3cTimeMarkTotal, h3cRepRemoteServerName=h3cRepRemoteServerName, h3cTMCopyStartTime=h3cTMCopyStartTime, h3cSnapCopyStartTime=h3cSnapCopyStartTime, h3cTimeMarkSize=h3cTimeMarkSize, h3cReplicaSyncTotalSize=h3cReplicaSyncTotalSize, h3cTimeMarkInterval=h3cTimeMarkInterval, h3cCDRDistLvIndex=h3cCDRDistLvIndex, h3cReplicaScanDiff=h3cReplicaScanDiff, h3cTMRollbackPercentage=h3cTMRollbackPercentage, h3cSafeCacheStatus=h3cSafeCacheStatus, h3cRepRemoteServerUsername=h3cRepRemoteServerUsername, h3cMirrorConfigTable=h3cMirrorConfigTable, h3cReplicaConfigTable=h3cReplicaConfigTable, h3cReplicaLastSyncTime=h3cReplicaLastSyncTime, h3cTMCopyDestLvId=h3cTMCopyDestLvId, h3cCDRID=h3cCDRID, h3cSafeCacheConfigTable=h3cSafeCacheConfigTable, h3cSnapExpandEntry=h3cSnapExpandEntry, h3cTMCopyPercentage=h3cTMCopyPercentage, h3cCDRSelectPolicy=h3cCDRSelectPolicy, h3cSafeCacheSwitch=h3cSafeCacheSwitch, h3cReplicaConfigEntry=h3cReplicaConfigEntry, h3cReplicaRunStatus=h3cReplicaRunStatus, h3cSnapCopyEntry=h3cSnapCopyEntry, h3cMirrorRowStatus=h3cMirrorRowStatus, h3cCDRRowStatus=h3cCDRRowStatus, h3cSafeCacheDistLvIndex=h3cSafeCacheDistLvIndex, h3cTimeMarkConfigEntry=h3cTimeMarkConfigEntry, h3cReplicaEncrypt=h3cReplicaEncrypt, h3cMirrorConfigEntry=h3cMirrorConfigEntry, h3cTimeMarkCreateEntry=h3cTimeMarkCreateEntry, h3cSnapCopyPercentage=h3cSnapCopyPercentage, h3cSafeCacheDistributeTable=h3cSafeCacheDistributeTable, h3cMirrorSelectPolicy=h3cMirrorSelectPolicy, h3cCDRRaidUuid=h3cCDRRaidUuid, h3cCDRExtRowStatus=h3cCDRExtRowStatus, h3cMirrorRaidUuid=h3cMirrorRaidUuid, h3cTimeMarkConfigTable=h3cTimeMarkConfigTable, h3cTimeViewEntry=h3cTimeViewEntry, h3cTimeMarkCreateTable=h3cTimeMarkCreateTable, h3cLvRepLocalWay=h3cLvRepLocalWay, h3cTimeMarkCopyEntry=h3cTimeMarkCopyEntry, h3cRepLocalServerUsername=h3cRepLocalServerUsername, h3cRepLocalServerIPType=h3cRepLocalServerIPType, h3cSnapLvIndex=h3cSnapLvIndex, h3cRepLocalLvIndex=h3cRepLocalLvIndex, h3cSafeCacheDistributeEntry=h3cSafeCacheDistributeEntry, h3cSAExpRaidUuid=h3cSAExpRaidUuid, h3cTimeMarkComment=h3cTimeMarkComment, h3cCDRConfigEntry=h3cCDRConfigEntry, h3cMirrorStatus=h3cMirrorStatus, h3cSnapConfigTable=h3cSnapConfigTable, h3cTimeViewTable=h3cTimeViewTable, h3cSnapAreaAutoExpand=h3cSnapAreaAutoExpand, h3cTimeMarkRollbackEntry=h3cTimeMarkRollbackEntry, h3cMirrorDistributeTable=h3cMirrorDistributeTable, h3cMirrorRaidSize=h3cMirrorRaidSize, h3cTimeMarkCopyTable=h3cTimeMarkCopyTable, h3cSafeCacheTotalSize=h3cSafeCacheTotalSize, h3cReplicaUseExistTM=h3cReplicaUseExistTM, h3cSafeCacheConfigEntry=h3cSafeCacheConfigEntry, h3cRepLocalServerPassword=h3cRepLocalServerPassword, h3cTimeMarkSwitch=h3cTimeMarkSwitch, h3cSafeCacheRaidSize=h3cSafeCacheRaidSize, h3cSnapCopyTable=h3cSnapCopyTable, h3cSafeCacheRunStatus=h3cSafeCacheRunStatus, h3cCDRRaidSize=h3cCDRRaidSize, h3cReplicaStateEntry=h3cReplicaStateEntry, h3cRepLocalServerName=h3cRepLocalServerName, h3cSnapRaidUuid=h3cSnapRaidUuid, h3cSnapConfigEntry=h3cSnapConfigEntry, h3cSafeCacheFlushCommand=h3cSafeCacheFlushCommand, h3cCDRTotalSize=h3cCDRTotalSize, h3cMirrorLvIndex=h3cMirrorLvIndex, h3cReplicaSyncPerformance=h3cReplicaSyncPerformance, h3cSafeCacheFreeSize=h3cSafeCacheFreeSize, h3cTimeMarkRowStatus=h3cTimeMarkRowStatus, h3cMirrorExtRowStatus=h3cMirrorExtRowStatus, h3cTimeMarkRollbackTable=h3cTimeMarkRollbackTable, h3cSafeCacheSelectPolicy=h3cSafeCacheSelectPolicy, h3cSnapRaidSelectPolicy=h3cSnapRaidSelectPolicy, h3cSnapAreaMaxSize=h3cSnapAreaMaxSize, h3cReplicaWatermark=h3cReplicaWatermark, h3cTimeMarkLastTime=h3cTimeMarkLastTime, h3cTimeMarkCounts=h3cTimeMarkCounts, h3cMirrorType=h3cMirrorType, h3cSAExpRaidSize=h3cSAExpRaidSize, h3cReplicaInterval=h3cReplicaInterval, h3cSafeCacheSkipDupWrite=h3cSafeCacheSkipDupWrite, h3cReplicaWatermarkRetry=h3cReplicaWatermarkRetry, h3cCDRLvIndex=h3cCDRLvIndex, h3cSnapAreaFullDeleteTM=h3cSnapAreaFullDeleteTM, h3cTMRollbackSwitch=h3cTMRollbackSwitch, h3cReplicaDelta=h3cReplicaDelta, h3cSnapAreaId=h3cSnapAreaId, h3cCDRDistributeTable=h3cCDRDistributeTable, h3cRepRemoteServerIPType=h3cRepRemoteServerIPType, h3cRepRemoteServerIP=h3cRepRemoteServerIP, h3cTimeMarkInitializeTime=h3cTimeMarkInitializeTime, h3cReplicaStatSwitch=h3cReplicaStatSwitch, h3cRepRemoteLvIndex=h3cRepRemoteLvIndex, h3cRepRemoteServerPassword=h3cRepRemoteServerPassword, h3cSafeCacheRowStatus=h3cSafeCacheRowStatus, h3cSnapAreaFreeSize=h3cSnapAreaFreeSize, h3cSnapCopyLvIndex=h3cSnapCopyLvIndex, h3cSnapRaidSize=h3cSnapRaidSize, h3cSnapAreaTotalSize=h3cSnapAreaTotalSize, h3cSnapRowStatus=h3cSnapRowStatus, h3cTMRollbackStartTime=h3cTMRollbackStartTime, h3cTimeViewRowStatus=h3cTimeViewRowStatus, h3cReplicaNextSyncTime=h3cReplicaNextSyncTime, h3cSafeCacheFlushTime=h3cSafeCacheFlushTime, h3cSnapAreaNotify=h3cSnapAreaNotify, h3cMirrorExtendRaidUuid=h3cMirrorExtendRaidUuid, h3cReplicaStateTable=h3cReplicaStateTable, h3cSafeCacheRaidUuid=h3cSafeCacheRaidUuid, h3cMirrorSwitch=h3cMirrorSwitch, h3cMirrorName=h3cMirrorName, h3cSnapCopySwitch=h3cSnapCopySwitch, h3cSafeCacheExtRowStatus=h3cSafeCacheExtRowStatus, h3cAddtionalSpaceMaxSize=h3cAddtionalSpaceMaxSize, h3cMirrorDistributeEntry=h3cMirrorDistributeEntry, h3cSnapAreaExpRowStatus=h3cSnapAreaExpRowStatus, h3cSnapAreaIncSize=h3cSnapAreaIncSize, h3cRepLocalServerIP=h3cRepLocalServerIP, h3cSnapMibObjects=h3cSnapMibObjects, h3cReplicaProtocol=h3cReplicaProtocol)
