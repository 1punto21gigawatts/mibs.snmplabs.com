#
# PySNMP MIB module TIMETRA-TWAMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-TWAMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:23:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, ModuleIdentity, iso, MibIdentifier, NotificationType, Gauge32, IpAddress, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "ModuleIdentity", "iso", "MibIdentifier", "NotificationType", "Gauge32", "IpAddress", "Unsigned32", "Counter64")
RowStatus, DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TimeStamp", "TextualConvention")
tmnxSRObjs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs")
TmnxAdminState, TItemDescription, TmnxOperState = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxAdminState", "TItemDescription", "TmnxOperState")
timetraTwampMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 76))
timetraTwampMIBModule.setRevisions(('2011-02-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraTwampMIBModule.setRevisionsDescriptions(('Rev 1.0 1 Feb 2011 00:00 Initial release of the TIMETRA-TWAMP-MIB in SROS release 9.0.',))
if mibBuilder.loadTexts: timetraTwampMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraTwampMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraTwampMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraTwampMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Two Way Active Measurement Protocol (TWAMP, RFC5357) components of Alcatel-Lucent SROS. Copyright (c) 2010-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxTwampObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76))
tmnxTwampNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76))
tmnxTwampConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76))
tmnxTwampTableLastChangeObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 1))
tmnxTwampConfigObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2))
tmnxTwampStatisticsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3))
tmnxTwampNotificationObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 4))
tmnxTwampNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76, 0))
tmnxTwampComplianceObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 1))
tmnxTwampGroupObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 2))
tmnxTwampConfigScalarObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 1))
tmnxTwampConfigTableObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2))
tmnxTwampStatisticsScalarObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1))
tmnxTwampStatisticsTableObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2))
tmnxTwampV9v0GroupObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 2, 1))
class TmnxTwampSrvConnectionCount(TextualConvention, Unsigned32):
    description = 'A TmnxTwampSrvConnectionCount value counts the concurrent control connections supported by a TWAMP server.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class TmnxTwampSrvSessionCount(TextualConvention, Unsigned32):
    description = 'A TmnxTwampSrvSessionCount value counts the concurrent test sessions supported by a TWAMP server.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 128)

tmnxTwampSrvPrefixTblLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPrefixTblLastChg.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixTblLastChg.setDescription('The value of tmnxTwampSrvPrefixTblLastChg indicates the time, since system startup, when tmnxTwampSrvPrefixTable last changed.')
tmnxTwampSrvAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 1, 1), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxTwampSrvAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvAdminState.setDescription("The value of tmnxTwampSrvAdminState specifies if the TWAMP server is administratively 'inService(2)', or 'outOfService(3)'. 'noop(1)' is a write-only value which does not change the current setting.")
tmnxTwampSrvInactTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxTwampSrvInactTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvInactTimeout.setDescription('The value of tmnxTwampSrvInactTimeout specifies the system-wide inactivity timeout for each TWAMP server control connection.')
tmnxTwampSrvMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 1, 3), TmnxTwampSrvConnectionCount().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxTwampSrvMaxConnections.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvMaxConnections.setDescription('The value of tmnxTwampSrvMaxConnections specifies the system-wide maximum number of concurrent TWAMP server control connections.')
tmnxTwampSrvMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 1, 4), TmnxTwampSrvSessionCount().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxTwampSrvMaxSessions.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvMaxSessions.setDescription('The value of tmnxTwampSrvMaxSessions specifies the system-wide maximum number of concurrent TWAMP server test sesssions.')
tmnxTwampSrvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1), )
if mibBuilder.loadTexts: tmnxTwampSrvPrefixTable.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixTable.setDescription('tmnxTwampSrvPrefixTable contains per-prefix TWAMP server configuration information.')
tmnxTwampSrvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1), ).setIndexNames((0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixAddrType"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixAddr"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixLen"))
if mibBuilder.loadTexts: tmnxTwampSrvPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixEntry.setDescription('tmnxTwampSrvPrefixEntry contains the TWAMP server configuration information for the IP prefix specified by the index values. Rows in this table are created and destroyed using the tmnxTwampSrvPrefixRowStatus object.')
tmnxTwampSrvPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxTwampSrvPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixAddrType.setDescription('The value of tmnxTwampSrvPrefixAddrType specifies the type of tmnxTwampSrvPrefixAddr. This is the first index for tmnxTwampSrvPrefixTable.')
tmnxTwampSrvPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxTwampSrvPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixAddr.setDescription('The value of tmnxTwampSrvPrefixAddr specifies, in conjuction with tmnxTwampSrvPrefixAddrType and tmnxTwampSrvPrefixLen, a prefix to be matched against a TWAMP client address. This is the second index for tmnxTwampSrvPrefixTable.')
tmnxTwampSrvPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixLen.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixLen.setDescription("The value of tmnxTwampSrvPrefixLen specifies the number of bits to match when comparing a TWAMP client address in an incoming message to tmnxTwampSrvPrefixAddr. This is the third index for tmnxTwampSrvPrefixTable. Best-fit is used when matching a TWAMP client's IP address against the set of configured prefixes. For example, suppose the first row of this table has the prefix 138.120.0.0/16, and the second row has the prefix 138.120.214.0/24. The TWAMP client address 138.120.214.52 matches the second row.")
tmnxTwampSrvPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxTwampSrvPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixRowStatus.setDescription('The value of tmnxTwampSrvPrefixRowStatus specifies the status of the row for the TWAMP prefix identified by the index values. This object controls the creation and deletion of row entries in the tmnxTwampSrvPrefixTable.')
tmnxTwampSrvPrefixLastChg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPrefixLastChg.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixLastChg.setDescription('The value of tmnxTwampSrvPrefixLastChg indicates the time, since system startup, that this row was created or modified.')
tmnxTwampSrvPrefixDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxTwampSrvPrefixDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixDescription.setDescription('The value of tmnxTwampSrvPrefixDescription specifies the description for the TWAMP prefix identified by the index values..')
tmnxTwampSrvPrefixMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 7), TmnxTwampSrvConnectionCount().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxTwampSrvPrefixMaxConnections.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixMaxConnections.setDescription('The value of tmnxTwampSrvPrefixMaxConnections specifies the maximum number of concurrent TWAMP control connections allowed for the TWAMP prefix identified by the index values. In addition, the number of concurrent TWAMP control connections for this prefix is limited by the system maximum (tmnxTwampSrvMaxConnections).')
tmnxTwampSrvPrefixMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 2, 2, 1, 1, 8), TmnxTwampSrvSessionCount().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxTwampSrvPrefixMaxSessions.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixMaxSessions.setDescription('The value of tmnxTwampSrvPrefixMaxSessions specifies the maximum number of concurrent TWAMP test sessions allowed for the TWAMP prefix identified by the index values. In addition, the number of concurrent TWAMP test sessions for this prefix is limited by the system maximum (tmnxTwampSrvMaxSessions).')
tmnxTwampSrvOperState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 1), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvOperState.setDescription("The value of tmnxTwampSrvOperState indicates if the TWAMP server is operationally 'inService(2)', or 'outOfService(3)'.")
tmnxTwampSrvUpTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 2), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvUpTime.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvUpTime.setDescription("The value of tmnxTwampSrvUpTime indicates the time elapsed, in seconds, since the most recent transition of tmnxTwampSrvOperState to 'inService(2)'. If tmnxTwampSrvOperState is not 'inService(2)', zero is returned.")
tmnxTwampSrvConnectionCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 3), TmnxTwampSrvConnectionCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnectionCount.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnectionCount.setDescription('The value of tmnxTwampSrvConnectionCount indicates the number of control connections currently managed by the TWAMP server.')
tmnxTwampSrvConnectionsRejected = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnectionsRejected.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnectionsRejected.setDescription("The value of tmnxTwampSrvConnectionsRejected indicates the total number of control connection requests which have been rejected by the TWAMP server. Example reject reasons: the server's limit on the number of active connections has been reached; the client's IP address does not match any of the prefixes configured on the TWAMP server.")
tmnxTwampSrvSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 5), TmnxTwampSrvSessionCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvSessionCount.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvSessionCount.setDescription('The value of tmnxTwampSrvSessionCount indicates the number of currently in-progress TWAMP test sesssions.')
tmnxTwampSrvTestSessCompleted = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvTestSessCompleted.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvTestSessCompleted.setDescription('The value of tmnxTwampSrvTestSessCompleted indicates the total number of test sessions completed by the TWAMP server.')
tmnxTwampSrvTestSessRejected = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvTestSessRejected.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvTestSessRejected.setDescription('The value of tmnxTwampSrvTestSessRejected indicates the total number of test sessions rejected by the TWAMP server.')
tmnxTwampSrvTestSessAborted = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvTestSessAborted.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvTestSessAborted.setDescription('The value of tmnxTwampSrvTestSessAborted indicates the total number of test sessions aborted by the TWAMP server.')
tmnxTwampSrvTestPacketsRx = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvTestPacketsRx.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvTestPacketsRx.setDescription('The value of tmnxTwampSrvTestPacketsRx indicates the total number of TWAMP test packets received by the TWAMP server.')
tmnxTwampSrvTestPacketsTx = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvTestPacketsTx.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvTestPacketsTx.setDescription('The value of tmnxTwampSrvTestPacketsTx indicates the total number of TWAMP test packets sent by the TWAMP server.')
tmnxTwampSrvPrefixStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1), )
if mibBuilder.loadTexts: tmnxTwampSrvPrefixStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixStatsTable.setDescription('tmnxTwampSrvPrefixStatsTable contains per-prefix TWAMP server statistics.')
tmnxTwampSrvPrefixStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1), )
tmnxTwampSrvPrefixEntry.registerAugmentions(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixStatsEntry"))
tmnxTwampSrvPrefixStatsEntry.setIndexNames(*tmnxTwampSrvPrefixEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxTwampSrvPrefixStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPrefixStatsEntry.setDescription('tmnxTwampSrvPrefixStatsEntry contains the TWAMP server statistics for the IP prefix specified by the index values.')
tmnxTwampSrvPfxConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 1), TmnxTwampSrvConnectionCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxConnCount.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxConnCount.setDescription('The value of tmnxTwampSrvPfxConnCount indicates, for the prefix specified by the index values, the number of control connections currently managed by the TWAMP server.')
tmnxTwampSrvPfxConnsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxConnsRejected.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxConnsRejected.setDescription("The value of tmnxTwampSrvPfxConnsRejected indicates, for the prefix specified by the index values, the number of control connection requests which have been rejected by the TWAMP server. An example reject reason: the prefix's limit on the number of active connections has been reached.")
tmnxTwampSrvPfxSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 3), TmnxTwampSrvSessionCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxSessionCount.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxSessionCount.setDescription('The value of tmnxTwampSrvPfxSessionCount indicates, for the prefix specified by the index values, the number of currently in-progress TWAMP test sesssions.')
tmnxTwampSrvPfxTestSessCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestSessCompleted.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestSessCompleted.setDescription('The value of tmnxTwampSrvPfxTestSessCompleted indicates, for the prefix specified by the index values, the number of test sessions completed by the TWAMP server.')
tmnxTwampSrvPfxTestSessRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestSessRejected.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestSessRejected.setDescription('The value of tmnxTwampSrvPfxTestSessRejected indicates, for the prefix specified by the index values, the number of test sessions rejected by the TWAMP server.')
tmnxTwampSrvPfxTestSessAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestSessAbort.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestSessAbort.setDescription('The value of tmnxTwampSrvPfxTestSessAbort indicates, for the prefix specified by the index values, the number of test sessions aborted by the TWAMP server.')
tmnxTwampSrvPfxTestPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestPacketsRx.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestPacketsRx.setDescription('The value of tmnxTwampSrvPfxTestPacketsRx indicates, for the prefix specified by the index values, the number of TWAMP test packets received by the TWAMP server.')
tmnxTwampSrvPfxTestPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestPacketsTx.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxTestPacketsTx.setDescription('The value of tmnxTwampSrvPfxTestPacketsTx indicates, for the prefix specified by the index values, the number of TWAMP test packets sent by the TWAMP server.')
tmnxTwampSrvConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2), )
if mibBuilder.loadTexts: tmnxTwampSrvConnStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnStatsTable.setDescription('tmnxTwampSrvConnStatsTable contains the statistics for each active control connection managed by the TWAMP server.')
tmnxTwampSrvConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1), ).setIndexNames((0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixAddrType"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixAddr"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixLen"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnClientAddrType"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnClientAddr"), (0, "TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnSeqNum"))
if mibBuilder.loadTexts: tmnxTwampSrvConnStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnStatsEntry.setDescription('tmnxTwampSrvConnStatsEntry contains the statistics for the TWAMP control connection specified by the index values. A row is created by the system when a TWAMP control connection is established.')
tmnxTwampSrvConnClientAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxTwampSrvConnClientAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnClientAddrType.setDescription('The value of tmnxTwampSrvConnClientAddrType specifies the type of tmnxTwampSrvConnClientAddr. This is the fourth index for tmnxTwampSrvConnStatsTable.')
tmnxTwampSrvConnClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxTwampSrvConnClientAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnClientAddr.setDescription("The value of tmnxTwampSrvConnClientAddr specifies the TWAMP client's address. This is the fifth index for tmnxTwampSrvConnStatsTable.")
tmnxTwampSrvConnSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: tmnxTwampSrvConnSeqNum.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnSeqNum.setDescription("The value of tmnxTwampSrvConnSeqNum specifies this control connection's sequence number. This is the sixth index for tmnxTwampSrvConnStatsTable - it allows n>1 rows (i.e. n>1 connections) for one client.")
tmnxTwampSrvConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("settingUp", 1), ("ready", 2), ("running", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnState.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnState.setDescription('The value of tmnxTwampSrvConnState indicates the operational state of a control connection managed by the TWAMP server. Code points: settingUp(1) - the connection is being established ready(2) - the connection is ready to accept test sessions running(3) - the connection is running a test.')
tmnxTwampSrvConnIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnIdleTime.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnIdleTime.setDescription('The value of tmnxTwampSrvConnIdleTime specifies the elapsed time, in seconds, since a TWAMP message was received on this control connection. When this value exceeds tmnxTwampSrvInactTimeout, the connection will be torn down.')
tmnxTwampSrvConnSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 6), TmnxTwampSrvSessionCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnSessionCount.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnSessionCount.setDescription('The value of tmnxTwampSrvConnSessionCount indicates, for the connection specified by the index values, the number of currently in-progress TWAMP test sesssions.')
tmnxTwampSrvConnTestSessComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnTestSessComplete.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnTestSessComplete.setDescription('The value of tmnxTwampSrvConnTestSessComplete indicates, for the connection specified by the index values, the number of test sessions completed by the TWAMP server.')
tmnxTwampSrvConnTestSessRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnTestSessRejected.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnTestSessRejected.setDescription('The value of tmnxTwampSrvConnTestSessRejected indicates, for the connection specified by the index values, the number of test sessions rejected by the TWAMP server.')
tmnxTwampSrvConnTestPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnTestPacketsRx.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnTestPacketsRx.setDescription('The value of tmnxTwampSrvConnTestPacketsRx indicates, for the connection specified by the index values, the number of TWAMP test packets received by the TWAMP server.')
tmnxTwampSrvConnTestPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxTwampSrvConnTestPacketsTx.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvConnTestPacketsTx.setDescription('The value of tmnxTwampSrvConnTestPacketsTx indicates, for the connection specified by the index values, the number of TWAMP test packets sent by the TWAMP server.')
tmnxTwampSrvNotifClientAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 4, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxTwampSrvNotifClientAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvNotifClientAddrType.setDescription('The value of tmnxTwampSrvNotifClientAddrType indicates the address type of tmnxTwampSrvNotifClientAddr.')
tmnxTwampSrvNotifClientAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 76, 4, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxTwampSrvNotifClientAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvNotifClientAddr.setDescription('The value of tmnxTwampSrvNotifClientAddr indicates, along with tmnxTwampSrvNotifClientAddrType, the address of a TWAMP client which could not be connected to the TWAMP server.')
tmnxTwampSrvInactivityTimeout = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76, 0, 1)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnIdleTime"))
if mibBuilder.loadTexts: tmnxTwampSrvInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvInactivityTimeout.setDescription("[CAUSE] The tmnxTwampSrvInactivityTimeout notification is generated when a TWAMP control connection was disconnected by the TWAMP server because the connection was inactive for a period exceeding the server's inactivity timeout (tmnxTwampSrvInactTimeout). [EFFECT] The TWAMP client cannot request test runs on the disconnected connection. [RECOVERY] Check the IP connectivity between this node and the TWAMP client.")
tmnxTwampSrvMaxConnsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76, 0, 2)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnectionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddrType"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddr"))
if mibBuilder.loadTexts: tmnxTwampSrvMaxConnsExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvMaxConnsExceeded.setDescription('[CAUSE] The tmnxTwampSrvMaxConnsExceeded notification is generated when a TWAMP control connection could not be established by the TWAMP server because the system-level maximum number of concurrent TWAMP control connections (tmnxTwampSrvMaxConnections) has been reached. [EFFECT] The TWAMP client cannot request test runs on the rejected connection. [RECOVERY] Configure the system-level maximum number of concurrent TWAMP control connections to a larger value, or disconnect any TWAMP control connection.')
tmnxTwampSrvPfxMaxConnsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76, 0, 3)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxConnCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddrType"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddr"))
if mibBuilder.loadTexts: tmnxTwampSrvPfxMaxConnsExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxMaxConnsExceeded.setDescription("[CAUSE] The tmnxTwampSrvPfxMaxConnsExceeded notification is generated when a TWAMP control connection could not be established by the TWAMP server because the maximum number of concurrent TWAMP control connections configured against the TWAMP client's prefix (tmnxTwampSrvPrefixMaxConnections) has been reached. [EFFECT] The TWAMP client cannot request test runs on the rejected connection. [RECOVERY] Configure the prefix's maximum number of concurrent TWAMP control connections to a larger value, or disconnect a TWAMP control connection which uses the prefix.")
tmnxTwampSrvMaxSessExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76, 0, 4)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvSessionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddrType"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddr"))
if mibBuilder.loadTexts: tmnxTwampSrvMaxSessExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvMaxSessExceeded.setDescription('[CAUSE] The tmnxTwampSrvMaxSessExceeded notification is generated when a TWAMP session could not be established by the TWAMP server because the system-level maximum number of concurrent TWAMP sessions (tmnxTwampSrvMaxSessions) has been reached. [EFFECT] The TWAMP client cannot request test runs on the rejected session. [RECOVERY] Configure the system-level maximum number of concurrent TWAMP sessions to a larger value, or disconnect any TWAMP session.')
tmnxTwampSrvPfxMaxSessExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 76, 0, 5)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxSessionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddrType"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddr"))
if mibBuilder.loadTexts: tmnxTwampSrvPfxMaxSessExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvPfxMaxSessExceeded.setDescription("[CAUSE] The tmnxTwampSrvPfxMaxSessExceeded notification is generated when a TWAMP session could not be established by the TWAMP server because the maximum number of concurrent TWAMP sessions configured against the TWAMP client's prefix (tmnxTwampSrvPrefixMaxSessions) has been reached. [EFFECT] The TWAMP client cannot request test runs on the rejected session. [RECOVERY] Configure the prefix's maximum number of concurrent TWAMP sessions to a larger value, or disconnect a TWAMP session which uses the prefix.")
tmnxTwampCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 1, 1)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvV9v0Group"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifyV9v0Group"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifyObjsV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxTwampCompliance = tmnxTwampCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampCompliance.setDescription('The compliance statement for the management of TWAMP for Release 9.0 on SROS series systems.')
tmnxTwampSrvV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 2, 1, 1)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvAdminState"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvInactTimeout"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvMaxConnections"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvMaxSessions"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixTblLastChg"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixRowStatus"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixLastChg"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixDescription"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixMaxConnections"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPrefixMaxSessions"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvOperState"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvUpTime"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnectionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnectionsRejected"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvSessionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvTestSessCompleted"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvTestSessRejected"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvTestSessAborted"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvTestPacketsRx"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvTestPacketsTx"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxConnCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxConnsRejected"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxSessionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxTestSessCompleted"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxTestSessRejected"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxTestSessAbort"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxTestPacketsRx"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxTestPacketsTx"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnState"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnIdleTime"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnSessionCount"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnTestSessComplete"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnTestSessRejected"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnTestPacketsRx"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvConnTestPacketsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxTwampSrvV9v0Group = tmnxTwampSrvV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvV9v0Group.setDescription('The group of objects supporting management of the TWAMP server on Alcatel-Lucent SROS Release 9.0.')
tmnxTwampSrvNotifyV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 2, 1, 2)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvInactivityTimeout"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvMaxConnsExceeded"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxMaxConnsExceeded"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvMaxSessExceeded"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvPfxMaxSessExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxTwampSrvNotifyV9v0Group = tmnxTwampSrvNotifyV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvNotifyV9v0Group.setDescription('The group of notifications supporting management of the TWAMP server on Alcatel-Lucent SROS Release 9.0.')
tmnxTwampSrvNotifyObjsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 76, 2, 1, 3)).setObjects(("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddrType"), ("TIMETRA-TWAMP-MIB", "tmnxTwampSrvNotifClientAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxTwampSrvNotifyObjsV9v0Group = tmnxTwampSrvNotifyObjsV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxTwampSrvNotifyObjsV9v0Group.setDescription('The group of accessible-for-notify objects supporting management of the TWAMP server on Alcatel-Lucent SROS Release 9.0.')
mibBuilder.exportSymbols("TIMETRA-TWAMP-MIB", tmnxTwampSrvPfxTestSessRejected=tmnxTwampSrvPfxTestSessRejected, tmnxTwampSrvConnSeqNum=tmnxTwampSrvConnSeqNum, tmnxTwampSrvConnectionsRejected=tmnxTwampSrvConnectionsRejected, tmnxTwampSrvPfxSessionCount=tmnxTwampSrvPfxSessionCount, tmnxTwampSrvNotifyV9v0Group=tmnxTwampSrvNotifyV9v0Group, tmnxTwampSrvPfxConnCount=tmnxTwampSrvPfxConnCount, tmnxTwampSrvMaxSessExceeded=tmnxTwampSrvMaxSessExceeded, tmnxTwampSrvPrefixTblLastChg=tmnxTwampSrvPrefixTblLastChg, tmnxTwampSrvPrefixEntry=tmnxTwampSrvPrefixEntry, tmnxTwampNotifyPrefix=tmnxTwampNotifyPrefix, tmnxTwampSrvPrefixDescription=tmnxTwampSrvPrefixDescription, tmnxTwampSrvNotifClientAddrType=tmnxTwampSrvNotifClientAddrType, tmnxTwampSrvMaxConnsExceeded=tmnxTwampSrvMaxConnsExceeded, tmnxTwampSrvConnState=tmnxTwampSrvConnState, PYSNMP_MODULE_ID=timetraTwampMIBModule, tmnxTwampSrvPfxMaxSessExceeded=tmnxTwampSrvPfxMaxSessExceeded, tmnxTwampSrvInactTimeout=tmnxTwampSrvInactTimeout, tmnxTwampConfigObjs=tmnxTwampConfigObjs, tmnxTwampSrvV9v0Group=tmnxTwampSrvV9v0Group, tmnxTwampSrvPrefixAddr=tmnxTwampSrvPrefixAddr, tmnxTwampSrvPfxConnsRejected=tmnxTwampSrvPfxConnsRejected, tmnxTwampSrvPfxTestPacketsRx=tmnxTwampSrvPfxTestPacketsRx, TmnxTwampSrvConnectionCount=TmnxTwampSrvConnectionCount, tmnxTwampSrvPrefixLen=tmnxTwampSrvPrefixLen, tmnxTwampSrvTestPacketsTx=tmnxTwampSrvTestPacketsTx, tmnxTwampConfigScalarObjs=tmnxTwampConfigScalarObjs, tmnxTwampSrvPrefixMaxSessions=tmnxTwampSrvPrefixMaxSessions, tmnxTwampSrvPfxTestSessCompleted=tmnxTwampSrvPfxTestSessCompleted, tmnxTwampSrvPrefixMaxConnections=tmnxTwampSrvPrefixMaxConnections, tmnxTwampSrvConnectionCount=tmnxTwampSrvConnectionCount, tmnxTwampSrvMaxSessions=tmnxTwampSrvMaxSessions, tmnxTwampObjs=tmnxTwampObjs, tmnxTwampNotifications=tmnxTwampNotifications, tmnxTwampSrvTestSessRejected=tmnxTwampSrvTestSessRejected, tmnxTwampConformance=tmnxTwampConformance, tmnxTwampNotificationObjs=tmnxTwampNotificationObjs, tmnxTwampSrvTestPacketsRx=tmnxTwampSrvTestPacketsRx, tmnxTwampSrvNotifClientAddr=tmnxTwampSrvNotifClientAddr, tmnxTwampSrvPfxMaxConnsExceeded=tmnxTwampSrvPfxMaxConnsExceeded, tmnxTwampStatisticsTableObjs=tmnxTwampStatisticsTableObjs, tmnxTwampSrvAdminState=tmnxTwampSrvAdminState, TmnxTwampSrvSessionCount=TmnxTwampSrvSessionCount, tmnxTwampConfigTableObjs=tmnxTwampConfigTableObjs, tmnxTwampSrvConnIdleTime=tmnxTwampSrvConnIdleTime, timetraTwampMIBModule=timetraTwampMIBModule, tmnxTwampComplianceObjs=tmnxTwampComplianceObjs, tmnxTwampSrvPrefixRowStatus=tmnxTwampSrvPrefixRowStatus, tmnxTwampSrvSessionCount=tmnxTwampSrvSessionCount, tmnxTwampSrvPrefixStatsEntry=tmnxTwampSrvPrefixStatsEntry, tmnxTwampSrvConnStatsEntry=tmnxTwampSrvConnStatsEntry, tmnxTwampSrvConnStatsTable=tmnxTwampSrvConnStatsTable, tmnxTwampCompliance=tmnxTwampCompliance, tmnxTwampSrvPrefixAddrType=tmnxTwampSrvPrefixAddrType, tmnxTwampSrvConnClientAddrType=tmnxTwampSrvConnClientAddrType, tmnxTwampSrvMaxConnections=tmnxTwampSrvMaxConnections, tmnxTwampSrvConnClientAddr=tmnxTwampSrvConnClientAddr, tmnxTwampSrvPfxTestPacketsTx=tmnxTwampSrvPfxTestPacketsTx, tmnxTwampSrvConnTestPacketsRx=tmnxTwampSrvConnTestPacketsRx, tmnxTwampSrvNotifyObjsV9v0Group=tmnxTwampSrvNotifyObjsV9v0Group, tmnxTwampSrvConnTestSessComplete=tmnxTwampSrvConnTestSessComplete, tmnxTwampGroupObjs=tmnxTwampGroupObjs, tmnxTwampSrvInactivityTimeout=tmnxTwampSrvInactivityTimeout, tmnxTwampStatisticsObjs=tmnxTwampStatisticsObjs, tmnxTwampSrvPrefixStatsTable=tmnxTwampSrvPrefixStatsTable, tmnxTwampStatisticsScalarObjs=tmnxTwampStatisticsScalarObjs, tmnxTwampSrvPrefixLastChg=tmnxTwampSrvPrefixLastChg, tmnxTwampSrvConnSessionCount=tmnxTwampSrvConnSessionCount, tmnxTwampV9v0GroupObjs=tmnxTwampV9v0GroupObjs, tmnxTwampSrvTestSessCompleted=tmnxTwampSrvTestSessCompleted, tmnxTwampSrvConnTestSessRejected=tmnxTwampSrvConnTestSessRejected, tmnxTwampTableLastChangeObjs=tmnxTwampTableLastChangeObjs, tmnxTwampSrvOperState=tmnxTwampSrvOperState, tmnxTwampSrvUpTime=tmnxTwampSrvUpTime, tmnxTwampSrvPrefixTable=tmnxTwampSrvPrefixTable, tmnxTwampSrvPfxTestSessAbort=tmnxTwampSrvPfxTestSessAbort, tmnxTwampSrvTestSessAborted=tmnxTwampSrvTestSessAborted, tmnxTwampSrvConnTestPacketsTx=tmnxTwampSrvConnTestPacketsTx)
