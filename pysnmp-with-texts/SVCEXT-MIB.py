#
# PySNMP MIB module SVCEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SVCEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
svcExt, = mibBuilder.importSymbols("APENT-MIB", "svcExt")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, IpAddress, ObjectIdentity, NotificationType, iso, MibIdentifier, Counter64, ModuleIdentity, Bits, Unsigned32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "IpAddress", "ObjectIdentity", "NotificationType", "iso", "MibIdentifier", "Counter64", "ModuleIdentity", "Bits", "Unsigned32", "Counter32", "Integer32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
apSvcExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 15, 1))
if mibBuilder.loadTexts: apSvcExtMib.setLastUpdated('9710092000Z')
if mibBuilder.loadTexts: apSvcExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: apSvcExtMib.setContactInfo(' Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: apSvcExtMib.setDescription('The MIB module used to describe the ArrowPoint Communications content services table')
apSvcTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2), )
if mibBuilder.loadTexts: apSvcTable.setStatus('current')
if mibBuilder.loadTexts: apSvcTable.setDescription('A list of content service entries.')
apSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1), ).setIndexNames((0, "SVCEXT-MIB", "apSvcName"))
if mibBuilder.loadTexts: apSvcEntry.setStatus('current')
if mibBuilder.loadTexts: apSvcEntry.setDescription('A group of information to uniquely identify a content providing service.')
apSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcName.setStatus('current')
if mibBuilder.loadTexts: apSvcName.setDescription('The name of the content providing service.')
apSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcIndex.setStatus('current')
if mibBuilder.loadTexts: apSvcIndex.setDescription('The unique service index assigned to the name by the SCM.')
apSvcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcIPAddress.setStatus('current')
if mibBuilder.loadTexts: apSvcIPAddress.setDescription('The IP Address the of the content providing service.')
apSvcIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17))).clone(namedValues=NamedValues(("any", 0), ("tcp", 6), ("udp", 17))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcIPProtocol.setStatus('current')
if mibBuilder.loadTexts: apSvcIPProtocol.setDescription('The IP Protocol the of the content providing service.')
apSvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcPort.setStatus('current')
if mibBuilder.loadTexts: apSvcPort.setDescription('The UDP or TCP port of the content providing service.')
apSvcKALType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("http", 2), ("ftp", 3), ("tcp", 4), ("named", 5), ("script", 6))).clone('icmp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALType.setStatus('current')
if mibBuilder.loadTexts: apSvcKALType.setDescription('The Keepalive detection method.')
apSvcKALFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALFrequency.setStatus('current')
if mibBuilder.loadTexts: apSvcKALFrequency.setDescription('The Keepalive frequency of doing keepalive probes in units of seconds.')
apSvcKALMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALMaxFailure.setStatus('current')
if mibBuilder.loadTexts: apSvcKALMaxFailure.setDescription('The Keepalive maximum number of failures before the service is transitioned to failed state.')
apSvcKALRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALRetryPeriod.setStatus('current')
if mibBuilder.loadTexts: apSvcKALRetryPeriod.setDescription('The Keepalive frequency of probes to the service after it has been transitioned to failed state.')
apSvcKALUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALUri.setStatus('current')
if mibBuilder.loadTexts: apSvcKALUri.setDescription('The URI which be checked during an HTTP keepalive.')
apSvcKALMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("head", 0), ("get", 1), ("post", 2))).clone('head')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALMethod.setStatus('current')
if mibBuilder.loadTexts: apSvcKALMethod.setDescription('The HTTP method used for the HTTP keepalive type. The methods operate in the following manner: HEAD -- HTTP HEAD generated. 200 response code required GET -- HTTP GET generated. MD5 Hash of entify body performed. First successful GET (200 response code) becomes reference hash. Deviation from rererence hash result, or non-200 response code, results in service state transition. POST -- Same as GET with substituation of POST method.')
apSvcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcEnable.setStatus('current')
if mibBuilder.loadTexts: apSvcEnable.setDescription('The state of the service, either enable or disabled')
apSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("local", 1), ("redirect", 2), ("proxyCache", 4), ("transparentCache", 8), ("automaticRedirect", 16), ("replicationStore", 32), ("replicationCache", 64), ("smashCache", 128), ("redundancyUp", 256), ("nciInfoOnly", 512), ("nciDirectReturn", 1024), ("replicationStoreRedirect", 2048), ("replicationCacheRedirect", 4096))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcType.setStatus('current')
if mibBuilder.loadTexts: apSvcType.setDescription('The type of this server')
apSvcQOSMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 14), Integer32().clone(14400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcQOSMinRate.setStatus('current')
if mibBuilder.loadTexts: apSvcQOSMinRate.setDescription('The Average Minimum Bandwidth Rate for this service')
apSvcQOSMinBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 15), Integer32().clone(100000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcQOSMinBW.setStatus('current')
if mibBuilder.loadTexts: apSvcQOSMinBW.setDescription('The Total Bandwidth of this service')
apSvcWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcWeight.setStatus('current')
if mibBuilder.loadTexts: apSvcWeight.setDescription('The Service weight which is used in conjunction with load metrics when making load allocation decisions. The weight may be used to bias flows towards the specified service .')
apSvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("suspended", 1), ("down", 2), ("alive", 4), ("dying", 5))).clone('suspended')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcState.setStatus('current')
if mibBuilder.loadTexts: apSvcState.setDescription('The current service state')
apSvcShortLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcShortLoad.setStatus('current')
if mibBuilder.loadTexts: apSvcShortLoad.setDescription('The Service currently sensed load for Short Lived Flows')
apSvcMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcMaxConnections.setStatus('current')
if mibBuilder.loadTexts: apSvcMaxConnections.setDescription('The maximum concurrent number of TCP connections allowed to this service')
apSvcConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcConnections.setStatus('current')
if mibBuilder.loadTexts: apSvcConnections.setDescription('The current number of TCP connections to this service')
apSvcTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcTransitions.setStatus('current')
if mibBuilder.loadTexts: apSvcTransitions.setDescription('The number of service state transitions that have occurred')
apSvcMaxContent = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcMaxContent.setStatus('current')
if mibBuilder.loadTexts: apSvcMaxContent.setDescription('Maximum pieces of content permitted to be replicated upon this service. This object only has validity when this service is configured to have type replication. The pieces of content replicated may by limited by apSvcMaxUsage prior to this object, where the limiting is the min(apSvcMaxContent,apSvcMaxUsage).')
apSvcMaxUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcMaxUsage.setStatus('current')
if mibBuilder.loadTexts: apSvcMaxUsage.setDescription('Maximum storage space in MB which may be replicated upon this service. This object only has validity when the this service is configured to have type replication. The storage space usage may be limited by apSvcMaxContent prior to this object, where the limiting is the min(apSvcMaxUsage,apSvcMaxContent).')
apSvcMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcMaxAge.setStatus('current')
if mibBuilder.loadTexts: apSvcMaxAge.setDescription('The time in minutes replicated content may exist upon this service before it is aged out. This age out time is applied on a per- replicated-content basis.')
apSvcAccessRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcAccessRecordName.setStatus('current')
if mibBuilder.loadTexts: apSvcAccessRecordName.setDescription('An access record name, present in apFtpTable or apHttpTable, used for replication access when this service is configured to be of type replicationStore, publisher or subscriber')
apSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcStatus.setStatus('current')
if mibBuilder.loadTexts: apSvcStatus.setDescription('Status entry for this row ')
apSvcCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcCookie.setStatus('current')
if mibBuilder.loadTexts: apSvcCookie.setDescription('The unique server cookie for this service.')
apSvcKALPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-persistent", 0), ("persistent", 1))).clone('persistent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALPersistence.setStatus('current')
if mibBuilder.loadTexts: apSvcKALPersistence.setDescription('This object controls whether the Keepalive will be attempted over a persistent connection. Persistent connections are supported through HTTP 1.1, and HTTP 1.0 with Connection-KeepAlive')
apSvcKALName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALName.setStatus('current')
if mibBuilder.loadTexts: apSvcKALName.setDescription('The name of the keepalive that this service will use.')
apSvcLongLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcLongLoad.setStatus('current')
if mibBuilder.loadTexts: apSvcLongLoad.setDescription('The Service currently sensed load for Long Lived Flows')
apSvcKALPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALPort.setStatus('current')
if mibBuilder.loadTexts: apSvcKALPort.setDescription("The port to use, for TCP & HTTP keepalives. This KAL port designation does not impact 'named' keep- alive configurations. If this object is not configured, keep- alive configurations will utilize the apSvcPort object if present, or default to 80")
apSvcPublishName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcPublishName.setStatus('current')
if mibBuilder.loadTexts: apSvcPublishName.setDescription('The name used to identify the service which publishes for this subscriber. This object is used in conjunction with apSvcPublishState.')
apSvcPublishState = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("publisher", 1), ("subscriber", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcPublishState.setStatus('current')
if mibBuilder.loadTexts: apSvcPublishState.setDescription('The state of this service in relation to publish/subscribe activity.')
apSvcPublishInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcPublishInterval.setStatus('current')
if mibBuilder.loadTexts: apSvcPublishInterval.setDescription('When this service is configured as a publisher, controls when the publisher will attempt to update the subscribers. When this object contains the value 0, it is interpreted as OFF.')
apSvcAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ftp-access", 0), ("http-access", 1), ("no-access", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcAccessType.setStatus('current')
if mibBuilder.loadTexts: apSvcAccessType.setDescription('Specifies whether the access mechanism associated with this service is of type HTTP or FTP')
apSvcKALHash = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALHash.setStatus('current')
if mibBuilder.loadTexts: apSvcKALHash.setDescription('This object contains the MD5 hash which will be compared for HTTP keepalives which use the GET method.')
apSvcKALFTPRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALFTPRecord.setStatus('current')
if mibBuilder.loadTexts: apSvcKALFTPRecord.setDescription('This object contains the name of the ftp-record used for a FTP keepalive')
apSvcPublishFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcPublishFile.setStatus('current')
if mibBuilder.loadTexts: apSvcPublishFile.setDescription('This object contains the name of the file which the publisher will check for modification on to commence a publish operation. This object is used in conjunction with apSvcPublishInterval')
apSvcRedirectDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcRedirectDomain.setStatus('current')
if mibBuilder.loadTexts: apSvcRedirectDomain.setDescription('The domain name used when a redirect service generates an object moved redirect instead of the service address.')
apSvcAvgLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSvcAvgLoad.setStatus('current')
if mibBuilder.loadTexts: apSvcAvgLoad.setDescription('The Service currently sensed average load')
apSvcIPAddressRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcIPAddressRange.setStatus('current')
if mibBuilder.loadTexts: apSvcIPAddressRange.setDescription('The range of IP Addresses of the content providing service.')
apSvcPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcPortRange.setStatus('current')
if mibBuilder.loadTexts: apSvcPortRange.setDescription('The range of UDP or TCP ports of the content providing service.')
apSvcKALScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALScriptName.setStatus('current')
if mibBuilder.loadTexts: apSvcKALScriptName.setDescription('This name represents the script that will be used in conjunction with the keepalive type script. The script will be played everytime the keepalive is issued.')
apSvcKALScriptArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALScriptArgs.setStatus('current')
if mibBuilder.loadTexts: apSvcKALScriptArgs.setDescription('This name represents the script arguments that will be used in conjunction with the keepalive type script.')
apSvcKALScriptLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcKALScriptLog.setStatus('current')
if mibBuilder.loadTexts: apSvcKALScriptLog.setDescription('This name represents the script log that can be used to capture output from a keepalive script.')
apSvcCacheByPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 15, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apSvcCacheByPass.setStatus('current')
if mibBuilder.loadTexts: apSvcCacheByPass.setDescription('Controls whether a chache type of services implicit by-pass feature is enabled or disabled')
apSvcTransitionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 15) + (0,1)).setObjects(("SVCEXT-MIB", "apSvcName"), ("SVCEXT-MIB", "apSvcState"))
if mibBuilder.loadTexts: apSvcTransitionTrap.setDescription('A service transition trap is generated whenever the the service state transitions from ACTIVE -> DEAD, or DEAD -> ACTIVE.')
apSvcLoadThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(254)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadThreshold.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadThreshold.setDescription('Global load threshold, maximum Load Number for service eligibility ')
apSvcLoadStepSize = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadStepSize.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadStepSize.setDescription('The granularity of Load Numbers, expressed in msec.')
apSvcLoadStepStatic = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadStepStatic.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadStepStatic.setDescription('Disables system dynamic Load Step Size calculation')
apSvcLoadDecayInterval = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadDecayInterval.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadDecayInterval.setDescription('The frequency which an ineligible service, becomes eligible, expressed in teardown report cycles.')
apSvcLoadEnable = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadEnable.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadEnable.setDescription('Controls system service Load calculation')
apSvcLoadSvcStatRptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadSvcStatRptTimeout.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadSvcStatRptTimeout.setDescription('The maximum time period the system will wait to send a teardown report. (in seconds)')
apSvcLoadInfoTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSvcLoadInfoTimeout.setStatus('current')
if mibBuilder.loadTexts: apSvcLoadInfoTimeout.setDescription('The amount of time (in seconds), which stale load information will be aged out.')
mibBuilder.exportSymbols("SVCEXT-MIB", apSvcKALPort=apSvcKALPort, apSvcAvgLoad=apSvcAvgLoad, apSvcType=apSvcType, apSvcKALFTPRecord=apSvcKALFTPRecord, apSvcKALScriptArgs=apSvcKALScriptArgs, apSvcWeight=apSvcWeight, apSvcKALMethod=apSvcKALMethod, apSvcMaxAge=apSvcMaxAge, apSvcLongLoad=apSvcLongLoad, apSvcStatus=apSvcStatus, apSvcAccessType=apSvcAccessType, apSvcKALUri=apSvcKALUri, apSvcLoadEnable=apSvcLoadEnable, apSvcLoadStepStatic=apSvcLoadStepStatic, apSvcLoadThreshold=apSvcLoadThreshold, apSvcMaxConnections=apSvcMaxConnections, apSvcKALName=apSvcKALName, apSvcLoadStepSize=apSvcLoadStepSize, apSvcLoadDecayInterval=apSvcLoadDecayInterval, apSvcQOSMinBW=apSvcQOSMinBW, apSvcKALScriptLog=apSvcKALScriptLog, apSvcTransitions=apSvcTransitions, PYSNMP_MODULE_ID=apSvcExtMib, apSvcQOSMinRate=apSvcQOSMinRate, apSvcKALHash=apSvcKALHash, apSvcPublishName=apSvcPublishName, apSvcPublishInterval=apSvcPublishInterval, apSvcLoadInfoTimeout=apSvcLoadInfoTimeout, apSvcIPProtocol=apSvcIPProtocol, apSvcKALRetryPeriod=apSvcKALRetryPeriod, apSvcCookie=apSvcCookie, apSvcKALFrequency=apSvcKALFrequency, apSvcIPAddressRange=apSvcIPAddressRange, apSvcKALPersistence=apSvcKALPersistence, apSvcName=apSvcName, apSvcTable=apSvcTable, apSvcLoadSvcStatRptTimeout=apSvcLoadSvcStatRptTimeout, apSvcPort=apSvcPort, apSvcPortRange=apSvcPortRange, apSvcPublishFile=apSvcPublishFile, apSvcEnable=apSvcEnable, apSvcKALScriptName=apSvcKALScriptName, apSvcMaxContent=apSvcMaxContent, apSvcKALMaxFailure=apSvcKALMaxFailure, apSvcCacheByPass=apSvcCacheByPass, apSvcConnections=apSvcConnections, apSvcExtMib=apSvcExtMib, apSvcEntry=apSvcEntry, apSvcRedirectDomain=apSvcRedirectDomain, apSvcIndex=apSvcIndex, apSvcAccessRecordName=apSvcAccessRecordName, apSvcShortLoad=apSvcShortLoad, apSvcTransitionTrap=apSvcTransitionTrap, apSvcIPAddress=apSvcIPAddress, apSvcKALType=apSvcKALType, apSvcPublishState=apSvcPublishState, apSvcState=apSvcState, apSvcMaxUsage=apSvcMaxUsage)
