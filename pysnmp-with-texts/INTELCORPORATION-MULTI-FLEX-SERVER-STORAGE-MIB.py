#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
bladeSlotId, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
groups, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "groups", "regModule")
FaultLedStates, Power, Index, PresenceLedStates, IdromBinary16, PowerLedStates = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "FaultLedStates", "Power", "Index", "PresenceLedStates", "IdromBinary16", "PowerLedStates")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, iso, IpAddress, NotificationType, ObjectIdentity, Integer32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "iso", "IpAddress", "NotificationType", "ObjectIdentity", "Integer32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Gauge32", "Counter32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
multiFlexServerStorageMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 18))
multiFlexServerStorageMibModule.setRevisions(('2007-09-12 11:10', '2007-08-16 13:30', '2007-07-20 16:30', '2007-07-09 12:00', '2007-06-07 20:30', '2007-06-07 13:30', '2007-04-18 19:05', '2007-04-18 19:05', '2007-04-09 15:45', '2007-04-09 10:30', '2007-03-15 18:30', '2007-03-10 16:00', '2007-02-22 17:00', '2007-01-08 09:50', '2006-12-28 17:30', '2006-12-05 10:30', '2006-12-04 16:30', '2006-11-07 07:01', '2006-10-02 06:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: multiFlexServerStorageMibModule.setRevisionsDescriptions(('Changed case of virtDriveStoragePoolID to virtDriveStoragePoolId to be consistent with other Id columns. Changed name of virtDriveIndex to virtDriveId to accurately describe column. Added dependency on INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB so as to be able to reference bladeSlotId for LUN mapping tables. Added vdb2lTable and bl2vdTable for mappings between virtual drives and blades.', 'Reordered Revision to reverse chronological as some browsers choke, cleaned up some other simple nit-picky errors', 'Dropped interposerBmcFirmwareVersion as there is no BMC on the interposer', 'Backed out blade2VirtualDrivesTable & virtualDrive2BladesTable tables to meet feature complete deadline as underlying implementation was not yet acceptable.', 'Added the IdromBinary16 to represent the asset tag, part number, and serial number fields within the IDROM fields.', 'Corrected maximum/nominal IDROM parameters and comments', 'With new drop from OEM: added spareDriveWWN to spareDriveTable, poolWWN to storagePoolTable', 'Moved the trees and chassis nodes around to accomodate the unique power supply characteristics. Added the missing numOfPwrUnknowns & pwrSupplyUnknownPresenceMask', 'Moved driveBackplane IDROM data to sharedDrives tree from storage tree where it makes more logical sense', 'Added interposer/driveBackplaneBmcFirmwareVersion to be consistent with other subsystems', 'Added blade2VirtualDrivesTable & virtualDrive2BladesTable Added sub trees to contain IDROM information for the Interposer and for the Drive Backplane', "All 'Logical' references have been changed to 'Virtual' All 'Array' references have been changed to 'Pool' All 'Disk' references have been changed to 'Drive' All 'Phy' references have been changed to 'Physical' All 'Drv' references have been changed to 'Drive' (or 'Drives' as appropriate)", 'Renamed MIB file and updated internal relevance to formal product name Multi-Flex Server', 'Reverted Indexing of Array table to Index type convention (from Integer32) to be SMIv2 compliant.', 'Corrected logDiskStatsTable INDEX to AUGMENTS.', 'Updated several object types to reflect changes in OEM objects. spareDiskTable: Removed spareCondition, spareOperation, & spareInUsed. Reindexed table to match. Renamed all of the *Transfered to *Transferred', 'Updated several object types to reflect changes in OEM objects. logDiskTable: Removed logDiskStripeSize, logDiskWritePolicy, logDiskReadPolicy, logDiskParityPace, logDiskCodecScheme, & logDiskMaxFailedDriveSpindlesTolerable. Added logDiskPreferredCtrlId logDiskStatsTable: Removed logDiskStatsIndex. Reindexed table to match.', "Consolodated use of Presence datatype and changed 'chassis' to 'chassis'", "Partitioned off and created as it's own module",))
if mibBuilder.loadTexts: multiFlexServerStorageMibModule.setLastUpdated('200709121110Z')
if mibBuilder.loadTexts: multiFlexServerStorageMibModule.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: multiFlexServerStorageMibModule.setContactInfo('Brian Kurle Intel Corporation JF5-2-C3 Tel: 503-712-5032 E-Mail: brianx.j.kurle@intel.com')
if mibBuilder.loadTexts: multiFlexServerStorageMibModule.setDescription('Storage Module of the Multi-Flex Server')
storage = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208))
if mibBuilder.loadTexts: storage.setStatus('current')
if mibBuilder.loadTexts: storage.setDescription('Container for Storage specific information as well as all components logically contained within.')
interposer = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1))
if mibBuilder.loadTexts: interposer.setStatus('current')
if mibBuilder.loadTexts: interposer.setDescription('IDROM information from the Interposer')
storageWWN = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageWWN.setStatus('current')
if mibBuilder.loadTexts: storageWWN.setDescription('The World Wide Name of the subsystem (hexadecimal ID in 0, 8, or 16 bytes)')
storageInterConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsupported", 0), ("sas", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageInterConnectionType.setStatus('current')
if mibBuilder.loadTexts: storageInterConnectionType.setDescription('The Inter-Connection Type for the subystem')
interposerVendor = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerVendor.setStatus('current')
if mibBuilder.loadTexts: interposerVendor.setDescription('Device manufacturer')
interposerMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerMfgDate.setStatus('current')
if mibBuilder.loadTexts: interposerMfgDate.setDescription('Manufacture date/time')
interposerDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerDeviceName.setStatus('current')
if mibBuilder.loadTexts: interposerDeviceName.setDescription('Device Name')
interposerPart = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 4), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerPart.setStatus('current')
if mibBuilder.loadTexts: interposerPart.setDescription('Device Part Number')
interposerSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 5), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerSerialNo.setStatus('current')
if mibBuilder.loadTexts: interposerSerialNo.setDescription('Device Serial Number')
interposerMaximumPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 6), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerMaximumPower.setStatus('current')
if mibBuilder.loadTexts: interposerMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Maximum power generation/consumption not known or specified')
interposerNominalPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 7), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerNominalPower.setStatus('current')
if mibBuilder.loadTexts: interposerNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
interposerAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 1, 8), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interposerAssetTag.setStatus('current')
if mibBuilder.loadTexts: interposerAssetTag.setDescription('Asset Tag # of device')
storagePoolTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5), )
if mibBuilder.loadTexts: storagePoolTable.setStatus('current')
if mibBuilder.loadTexts: storagePoolTable.setDescription('Information about the storage pools')
storagePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolIndex"))
if mibBuilder.loadTexts: storagePoolEntry.setStatus('current')
if mibBuilder.loadTexts: storagePoolEntry.setDescription('The parameters of a Storage Pool.')
poolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolIndex.setStatus('current')
if mibBuilder.loadTexts: poolIndex.setDescription('Index of the Storage Pool.')
poolAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAlias.setStatus('current')
if mibBuilder.loadTexts: poolAlias.setDescription('Alias of the Storage Pool.')
poolOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: poolOperationalStatus.setDescription('Operational Status of the Storage Pool.')
poolCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolCondition.setStatus('current')
if mibBuilder.loadTexts: poolCondition.setDescription('The condition of the Storage Pool. Currently not supported')
poolOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolOperation.setStatus('current')
if mibBuilder.loadTexts: poolOperation.setDescription('The current active operation running on the storage pool, e.g. rebuilding, migrating')
poolPhysicalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPhysicalCapacity.setStatus('current')
if mibBuilder.loadTexts: poolPhysicalCapacity.setDescription('The physical capacity in bytes of the Storage Pool. It is the sum of physical capacity of all the physical drives in the storage pool')
poolConfigurableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolConfigurableCapacity.setStatus('current')
if mibBuilder.loadTexts: poolConfigurableCapacity.setDescription('The configurable capacity in bytes of the Storage Pool. It is the minimum configurable capacity of the physical drives in the storage pool mulitplies by the number of physical drives in the storage pool.')
poolFreeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFreeCapacity.setStatus('current')
if mibBuilder.loadTexts: poolFreeCapacity.setDescription('Free (available) capacity in bytes of the Storage Pool.')
poolMaxContiguousCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMaxContiguousCapacity.setStatus('current')
if mibBuilder.loadTexts: poolMaxContiguousCapacity.setDescription('The maximum contiguous Size in bytes of the Storage Pool.')
poolMediaPatrolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMediaPatrolEnabled.setStatus('current')
if mibBuilder.loadTexts: poolMediaPatrolEnabled.setDescription('It indicates whether Media Patrol is enabled or disabled on the Storage Pool.')
poolPDMEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPDMEnabled.setStatus('current')
if mibBuilder.loadTexts: poolPDMEnabled.setDescription('It indicates whether PDM is enabled or disabled on the Storage Pool.')
poolNumOfPhysicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumOfPhysicalDrives.setStatus('current')
if mibBuilder.loadTexts: poolNumOfPhysicalDrives.setDescription('Number of Physical Drives of the Storage Pool.')
poolNumOfVirtualDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumOfVirtualDrives.setStatus('current')
if mibBuilder.loadTexts: poolNumOfVirtualDrives.setDescription('Number of Virtual Drives of the Storage Pool.')
poolNumOfDedicatedSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumOfDedicatedSpares.setStatus('current')
if mibBuilder.loadTexts: poolNumOfDedicatedSpares.setDescription('Number of dedicated spares of the Storage Pool.')
poolPhysicalDriveIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPhysicalDriveIDs.setStatus('current')
if mibBuilder.loadTexts: poolPhysicalDriveIDs.setDescription('The list of the ids of the physical drives in the storage pool')
poolVirtualDriveIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolVirtualDriveIDs.setStatus('current')
if mibBuilder.loadTexts: poolVirtualDriveIDs.setDescription('The list of the ids of the virtual drives on the storage pool')
poolDedicatedSpareIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDedicatedSpareIDs.setStatus('current')
if mibBuilder.loadTexts: poolDedicatedSpareIDs.setDescription('The list of the ids of the dedicated spares of the storage pool')
poolWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 5, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolWWN.setStatus('current')
if mibBuilder.loadTexts: poolWWN.setDescription('The WWN of the disk array in the 16 characters HEX format, e.g. 0000000000000000.')
virtualDriveTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6), )
if mibBuilder.loadTexts: virtualDriveTable.setStatus('current')
if mibBuilder.loadTexts: virtualDriveTable.setDescription('A table of VirtualDriveEntry.')
virtualDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveId"))
if mibBuilder.loadTexts: virtualDriveEntry.setStatus('current')
if mibBuilder.loadTexts: virtualDriveEntry.setDescription('The parameters of a virtual drive.')
virtDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveId.setStatus('current')
if mibBuilder.loadTexts: virtDriveId.setDescription('The virtual drive id, the index of the virtual drive table.')
virtDriveAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveAlias.setStatus('current')
if mibBuilder.loadTexts: virtDriveAlias.setDescription('Alias of the virtual drive.')
virtDriveSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveSerialNo.setStatus('current')
if mibBuilder.loadTexts: virtDriveSerialNo.setDescription('Serial Nubmer of the virtual drive.')
virtDriveWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveWWN.setStatus('current')
if mibBuilder.loadTexts: virtDriveWWN.setDescription('The WWN of the virtual drive.')
virtDriveOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: virtDriveOperationalStatus.setDescription('The operational Status of the virtual drive.')
virtDriveCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveCondition.setStatus('current')
if mibBuilder.loadTexts: virtDriveCondition.setDescription('The condition of the virtual drive, e.g. PFA.')
virtDriveOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveOperation.setStatus('current')
if mibBuilder.loadTexts: virtDriveOperation.setDescription('The current operation runngin on the virtual drive, e.g. initialing, synchronizing, etc.')
virtDriveSynchronized = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveSynchronized.setStatus('current')
if mibBuilder.loadTexts: virtDriveSynchronized.setDescription('It indicates whether or not the data on the virtual drive has been sychronized.')
virtDriveRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 3, 5, 6, 10, 16, 80, 81, 85, 95, 96))).clone(namedValues=NamedValues(("unknown", -1), ("raid0", 0), ("raid1", 1), ("raid3", 3), ("raid5", 5), ("raid6", 6), ("jbod", 10), ("raid10", 16), ("raid50", 80), ("raid51", 81), ("raid55", 85), ("raid1e", 95), ("raid60", 96)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveRAIDLevel.setStatus('current')
if mibBuilder.loadTexts: virtDriveRAIDLevel.setDescription('The RAID Level of the virtual drive.')
virtDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveCapacity.setStatus('current')
if mibBuilder.loadTexts: virtDriveCapacity.setDescription('The capacity in bytes of the virtual drive.')
virtDrivePhysicalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDrivePhysicalCapacity.setStatus('current')
if mibBuilder.loadTexts: virtDrivePhysicalCapacity.setDescription('The physical (raw) capacity in bytes of the virtual drive.')
virtDriveStoragePoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStoragePoolId.setStatus('current')
if mibBuilder.loadTexts: virtDriveStoragePoolId.setDescription('The id of the Storage Pool that the virtual drive belongs to.')
virtDriveNumOfAxels = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveNumOfAxels.setStatus('current')
if mibBuilder.loadTexts: virtDriveNumOfAxels.setDescription('Number of Axels of the virtual drive.')
virtDriveNumOfUsedPD = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveNumOfUsedPD.setStatus('current')
if mibBuilder.loadTexts: virtDriveNumOfUsedPD.setDescription('Number of Physical Drives used by the virtual drive.')
virtDriveSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveSectorSize.setStatus('current')
if mibBuilder.loadTexts: virtDriveSectorSize.setDescription('The sector sizes in bytes of the virtual drive.')
virtDrivePreferredScmId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("unavailable", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDrivePreferredScmId.setStatus('current')
if mibBuilder.loadTexts: virtDrivePreferredScmId.setDescription('The preferred controller id of the virtual drive.')
virtualDriveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7), )
if mibBuilder.loadTexts: virtualDriveStatsTable.setStatus('current')
if mibBuilder.loadTexts: virtualDriveStatsTable.setDescription('A table of Virtual Drive Statistics.')
virtualDriveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1), )
virtualDriveEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtualDriveStatsEntry"))
virtualDriveStatsEntry.setIndexNames(*virtualDriveEntry.getIndexNames())
if mibBuilder.loadTexts: virtualDriveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: virtualDriveStatsEntry.setDescription('The statistics of a virtual drive since its last reset or statistics rest.')
virtDriveStatsDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsDataTransferred.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsDataTransferred.setDescription('The total number of bytes of data transferred to and from the controller.')
virtDriveStatsReadDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsReadDataTransferred.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsReadDataTransferred.setDescription('The total number of bytes of data transferred from the controller.')
virtDriveStatsWriteDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsWriteDataTransferred.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsWriteDataTransferred.setDescription('The total number of bytes of data transferred to the controller.')
virtDriveStatsNumOfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfErrors.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfErrors.setDescription('The total number of errors.')
virtDriveStatsNumOfNonRWErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfNonRWErrors.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfNonRWErrors.setDescription('The total number of non-RW errors.')
virtDriveStatsNumOfReadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfReadErrors.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfReadErrors.setDescription('The total number of Read errors.')
virtDriveStatsNumOfWriteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfWriteErrors.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfWriteErrors.setDescription('The total number of Write errors.')
virtDriveStatsNumOfIORequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfIORequests.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfIORequests.setDescription('The total number of IO requests.')
virtDriveStatsNumOfNonRWRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfNonRWRequests.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfNonRWRequests.setDescription('The total number of non-RW requests.')
virtDriveStatsNumOfReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfReadRequests.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfReadRequests.setDescription('The total number of read requests.')
virtDriveStatsNumOfWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsNumOfWriteRequests.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsNumOfWriteRequests.setDescription('The total number of write requests.')
virtDriveStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsStartTime.setDescription('The time when the statistics date starts to accumulate since last statistics reset.')
virtDriveStatsCollectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtDriveStatsCollectionTime.setStatus('current')
if mibBuilder.loadTexts: virtDriveStatsCollectionTime.setDescription('The time when the statistics data was collected or updated last time.')
spareDriveTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8), )
if mibBuilder.loadTexts: spareDriveTable.setStatus('current')
if mibBuilder.loadTexts: spareDriveTable.setDescription('A table of SpareDriveEntry.')
spareDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareIndex"))
if mibBuilder.loadTexts: spareDriveEntry.setStatus('current')
if mibBuilder.loadTexts: spareDriveEntry.setDescription('The parameters of a spare drive.')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareIndex.setStatus('current')
if mibBuilder.loadTexts: spareIndex.setDescription('The id of the spare drive, the Index of the spare drive table.')
spareOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: spareOperationalStatus.setDescription('The operational status of the spare.')
sparePhysicalDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePhysicalDriveId.setStatus('current')
if mibBuilder.loadTexts: sparePhysicalDriveId.setDescription('The current operation running on the spare, e.g. sparechecking.')
sparePhysicalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePhysicalCapacity.setStatus('current')
if mibBuilder.loadTexts: sparePhysicalCapacity.setDescription('The physical capacity of the spare drive.')
spareConfigurableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareConfigurableCapacity.setStatus('current')
if mibBuilder.loadTexts: spareConfigurableCapacity.setDescription('The configurable capacity of the spare drive.')
spareRevertible = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareRevertible.setStatus('current')
if mibBuilder.loadTexts: spareRevertible.setDescription('It indicates whether or not the spare is a revertible spare or not.')
spareType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("dedicated", 2), ("global", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareType.setStatus('current')
if mibBuilder.loadTexts: spareType.setDescription('The type of the spare drive.')
spareNumOfAssociatedStoragePools = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareNumOfAssociatedStoragePools.setStatus('current')
if mibBuilder.loadTexts: spareNumOfAssociatedStoragePools.setDescription('The number of storage pools to which the spare is dedicated to')
spareAssociatedStoragePoolIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareAssociatedStoragePoolIDs.setStatus('current')
if mibBuilder.loadTexts: spareAssociatedStoragePoolIDs.setDescription('The list of the ids of the storage pools to which the spare is dedicated to.')
spareDriveWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDriveWWN.setStatus('current')
if mibBuilder.loadTexts: spareDriveWWN.setDescription('The WWN of the spare in 16 characters HEX format, e.g. 0000000000000000.')
vdb2lTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 9), )
if mibBuilder.loadTexts: vdb2lTable.setStatus('current')
if mibBuilder.loadTexts: vdb2lTable.setDescription('Virtual Drive to Blade/LUN mapping table. The table is doubly indexed given a instance of a virtual drive id and a blade slot, a specific LUN mapping for the virtual drive for that blade is provided.')
vdb2lEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 9, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveId"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"))
if mibBuilder.loadTexts: vdb2lEntry.setStatus('current')
if mibBuilder.loadTexts: vdb2lEntry.setDescription('The parameters of a vdb2l drive.')
vdb2Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vdb2Lun.setStatus('current')
if mibBuilder.loadTexts: vdb2Lun.setDescription('The LUN on the given blade for the given virtual drive')
bl2vdTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 10), )
if mibBuilder.loadTexts: bl2vdTable.setStatus('current')
if mibBuilder.loadTexts: bl2vdTable.setDescription('Blade/LUN to virtual drive mapping table. The table is doubly indexed given a blade slot and a LUN on that blade, it maps to an instance of a virtual drive id')
bl2vdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 10, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-BLADES-MIB", "bladeSlotId"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "vdb2Lun"))
if mibBuilder.loadTexts: bl2vdEntry.setStatus('current')
if mibBuilder.loadTexts: bl2vdEntry.setDescription('The parameters of a bl2vd drive.')
bl2vdVirtualDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 208, 10, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bl2vdVirtualDriveId.setStatus('current')
if mibBuilder.loadTexts: bl2vdVirtualDriveId.setDescription('Same as virtDriveId, but named differently so as not to cause namespace query conflicts. This is the associated virtual drive id given a blade slot and lun for the specified blade slot')
storageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 18)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "interposerAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "storageWWN"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "storageInterConnectionType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolAlias"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolOperationalStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolCondition"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolOperation"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolPhysicalCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolConfigurableCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolFreeCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolMaxContiguousCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolMediaPatrolEnabled"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolPDMEnabled"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolNumOfPhysicalDrives"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolNumOfVirtualDrives"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolNumOfDedicatedSpares"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolPhysicalDriveIDs"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolVirtualDriveIDs"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolDedicatedSpareIDs"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "poolWWN"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveAlias"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveWWN"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveOperationalStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveCondition"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveOperation"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveSynchronized"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveRAIDLevel"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDrivePhysicalCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStoragePoolId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveNumOfAxels"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveNumOfUsedPD"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveSectorSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDrivePreferredScmId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsReadDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsWriteDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfNonRWErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfReadErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfWriteErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfIORequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfNonRWRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfReadRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsNumOfWriteRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsStartTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "virtDriveStatsCollectionTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareOperationalStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "sparePhysicalDriveId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "sparePhysicalCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareConfigurableCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareRevertible"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareNumOfAssociatedStoragePools"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareAssociatedStoragePoolIDs"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "spareDriveWWN"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "vdb2Lun"), ("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", "bl2vdVirtualDriveId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    storageGroup = storageGroup.setStatus('current')
if mibBuilder.loadTexts: storageGroup.setDescription('Description.')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-STORAGE-MIB", virtDriveSerialNo=virtDriveSerialNo, poolDedicatedSpareIDs=poolDedicatedSpareIDs, PYSNMP_MODULE_ID=multiFlexServerStorageMibModule, virtDriveCapacity=virtDriveCapacity, interposerMfgDate=interposerMfgDate, virtDriveStatsDataTransferred=virtDriveStatsDataTransferred, virtDriveStatsNumOfIORequests=virtDriveStatsNumOfIORequests, interposerAssetTag=interposerAssetTag, virtDriveSectorSize=virtDriveSectorSize, poolPhysicalCapacity=poolPhysicalCapacity, poolAlias=poolAlias, multiFlexServerStorageMibModule=multiFlexServerStorageMibModule, virtDriveRAIDLevel=virtDriveRAIDLevel, storage=storage, virtualDriveStatsEntry=virtualDriveStatsEntry, sparePhysicalCapacity=sparePhysicalCapacity, virtDriveSynchronized=virtDriveSynchronized, poolOperation=poolOperation, spareType=spareType, interposerNominalPower=interposerNominalPower, virtDrivePhysicalCapacity=virtDrivePhysicalCapacity, vdb2Lun=vdb2Lun, spareDriveEntry=spareDriveEntry, bl2vdTable=bl2vdTable, virtDriveStatsNumOfReadRequests=virtDriveStatsNumOfReadRequests, poolIndex=poolIndex, interposer=interposer, poolNumOfVirtualDrives=poolNumOfVirtualDrives, spareAssociatedStoragePoolIDs=spareAssociatedStoragePoolIDs, storageWWN=storageWWN, spareDriveWWN=spareDriveWWN, bl2vdVirtualDriveId=bl2vdVirtualDriveId, virtDriveOperation=virtDriveOperation, virtDriveCondition=virtDriveCondition, virtDriveNumOfUsedPD=virtDriveNumOfUsedPD, poolWWN=poolWWN, poolNumOfPhysicalDrives=poolNumOfPhysicalDrives, virtDriveNumOfAxels=virtDriveNumOfAxels, interposerVendor=interposerVendor, virtualDriveTable=virtualDriveTable, interposerDeviceName=interposerDeviceName, vdb2lEntry=vdb2lEntry, storageInterConnectionType=storageInterConnectionType, virtDriveWWN=virtDriveWWN, poolConfigurableCapacity=poolConfigurableCapacity, spareDriveTable=spareDriveTable, virtDriveStatsNumOfReadErrors=virtDriveStatsNumOfReadErrors, spareIndex=spareIndex, spareOperationalStatus=spareOperationalStatus, virtDriveStatsNumOfNonRWErrors=virtDriveStatsNumOfNonRWErrors, virtDriveOperationalStatus=virtDriveOperationalStatus, virtualDriveEntry=virtualDriveEntry, virtDriveStatsReadDataTransferred=virtDriveStatsReadDataTransferred, poolPhysicalDriveIDs=poolPhysicalDriveIDs, poolCondition=poolCondition, poolPDMEnabled=poolPDMEnabled, storageGroup=storageGroup, poolOperationalStatus=poolOperationalStatus, virtDriveStatsStartTime=virtDriveStatsStartTime, virtDriveAlias=virtDriveAlias, virtDriveStatsNumOfWriteErrors=virtDriveStatsNumOfWriteErrors, sparePhysicalDriveId=sparePhysicalDriveId, storagePoolTable=storagePoolTable, virtDrivePreferredScmId=virtDrivePreferredScmId, spareConfigurableCapacity=spareConfigurableCapacity, virtDriveStatsWriteDataTransferred=virtDriveStatsWriteDataTransferred, virtDriveStatsNumOfErrors=virtDriveStatsNumOfErrors, virtDriveStatsNumOfWriteRequests=virtDriveStatsNumOfWriteRequests, virtDriveStatsNumOfNonRWRequests=virtDriveStatsNumOfNonRWRequests, bl2vdEntry=bl2vdEntry, spareRevertible=spareRevertible, poolMediaPatrolEnabled=poolMediaPatrolEnabled, virtDriveStatsCollectionTime=virtDriveStatsCollectionTime, poolVirtualDriveIDs=poolVirtualDriveIDs, interposerPart=interposerPart, virtDriveStoragePoolId=virtDriveStoragePoolId, poolMaxContiguousCapacity=poolMaxContiguousCapacity, spareNumOfAssociatedStoragePools=spareNumOfAssociatedStoragePools, interposerMaximumPower=interposerMaximumPower, poolFreeCapacity=poolFreeCapacity, virtualDriveStatsTable=virtualDriveStatsTable, virtDriveId=virtDriveId, vdb2lTable=vdb2lTable, poolNumOfDedicatedSpares=poolNumOfDedicatedSpares, interposerSerialNo=interposerSerialNo, storagePoolEntry=storagePoolEntry)
