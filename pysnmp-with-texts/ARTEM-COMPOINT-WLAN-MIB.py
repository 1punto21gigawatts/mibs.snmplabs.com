#
# PySNMP MIB module ARTEM-COMPOINT-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARTEM-COMPOINT-WLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, iso, IpAddress, Bits, Counter64, Integer32, TimeTicks, ObjectIdentity, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "IpAddress", "Bits", "Counter64", "Integer32", "TimeTicks", "ObjectIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "Counter32")
TextualConvention, MacAddress, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString", "TruthValue")
artem = ModuleIdentity((1, 3, 6, 1, 4, 1, 4280))
artem.setRevisions(('2005-05-12 10:05', '2005-04-21 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: artem.setRevisionsDescriptions(('Added missing index artemBridgePeerIndex for artemBridgePeersTable.', 'Initial version.',))
if mibBuilder.loadTexts: artem.setLastUpdated('200504210958Z')
if mibBuilder.loadTexts: artem.setOrganization('Funkwerk Enterprise Communications.')
if mibBuilder.loadTexts: artem.setContactInfo('juergen.lachmann@funkwerk-ec.com.')
if mibBuilder.loadTexts: artem.setDescription('Funkwerk Enterprise Communications MIB file that provides additional attributes not covered by standard MIBs for WLAN functionality in artem products.')
class ArtemRSSI(TextualConvention, Integer32):
    description = 'This type is used to represent receiver input levels in dBm.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-110, 0)

artemWLAN = ObjectIdentity((1, 3, 6, 1, 4, 1, 4280, 5))
if mibBuilder.loadTexts: artemWLAN.setStatus('current')
if mibBuilder.loadTexts: artemWLAN.setDescription('Definitions and attributes that apply to a radio module. The radio module may host one or more interfaces (AP service sets or bridge links).')
artemBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 4280, 5, 1))
artemBridgeConfigScanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4280, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgeConfigScanTimeout.setStatus('current')
if mibBuilder.loadTexts: artemBridgeConfigScanTimeout.setDescription('This attribute defines the maximum time a bridge auto-configuration scan may take. After this timeout has expired, any auto-configuration scan will be aborted, regardless of current state.')
artemBridgeConfigSetupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4280, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgeConfigSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: artemBridgeConfigSetupTimeout.setDescription("This attribute defines the maximum time a bridge auto-configuration setup may take. After this timeout has expired, any auto-configuration setup will be aborted, regardless of current state. In this case, artemBridgePeerConfigSetupResult will be set to 'timeout'.")
artemBridgeLinksTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3), )
if mibBuilder.loadTexts: artemBridgeLinksTable.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinksTable.setDescription('Attributes for artem bridge links.')
artemBridgeLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1), ).setIndexNames((0, "ARTEM-COMPOINT-WLAN-MIB", "artemRadioIndex"), (0, "ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkIndex"))
if mibBuilder.loadTexts: artemBridgeLinksEntry.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinksEntry.setDescription('An entry in artemBridgeLinksTable.')
artemBridgeLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: artemBridgeLinkIndex.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkIndex.setDescription('This is the unique index number for a bridge link of the given radio.')
artemBridgeLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemBridgeLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkRowStatus.setDescription('Auxiliary variable for creation of new object instances and/or the deletion of existing object instances.')
artemBridgeLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgeLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkIfIndex.setDescription('ifIndex that is associated to the combination of artemRadioIndex and artemBridgeLinkIndex.')
artemBridgeLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemBridgeLinkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkAdminStatus.setDescription('This attribute defines if the associated bridge link is currently active.')
artemBridgeLinkAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemBridgeLinkAliasName.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkAliasName.setDescription("This attribute can be used to set a textual alias name for this bridge link. Default is 'wl?_br?', where first '?' is radio number and second '?' is link number on this radio.")
artemBridgeLinkCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgeLinkCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkCurrentSpeed.setDescription('This attribute returns the current transmission speed for this link, or 0 if no connection can be established.')
artemBridgeLinkPartnerRadioMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemBridgeLinkPartnerRadioMacAddress.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkPartnerRadioMacAddress.setDescription('This attribute contains the MAC address of the remote radio module. It can be set directly, or via the auto-configuration mechanism.')
artemBridgeLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgeLinkOperStatus.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkOperStatus.setDescription('This attribute shows if the bridge link connection is currently operative.')
artemBridgePrivacyTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 1, 4), )
if mibBuilder.loadTexts: artemBridgePrivacyTable.setStatus('current')
if mibBuilder.loadTexts: artemBridgePrivacyTable.setDescription('Table of privacy settings, with special privacy modes for bridge links.')
artemBridgePrivacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 1, 4, 1), ).setIndexNames((0, "ARTEM-COMPOINT-WLAN-MIB", "artemRadioIndex"))
if mibBuilder.loadTexts: artemBridgePrivacyEntry.setStatus('current')
if mibBuilder.loadTexts: artemBridgePrivacyEntry.setDescription('An entry in artemBridgePrivacyTable.')
artemBridgePrivacyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2), ("aes", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgePrivacyMode.setStatus('current')
if mibBuilder.loadTexts: artemBridgePrivacyMode.setDescription("This attribute selects privacy mode to use for all bridge links on this radio. Privacy is immediately enabled anything different from 'none' is selected and an appropriate key has been set.")
artemBridgePrivacyAutoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgePrivacyAutoKey.setStatus('current')
if mibBuilder.loadTexts: artemBridgePrivacyAutoKey.setDescription('Writing this attribute triggers automatic bridge privacy setup. Depending on artemBridgePrivacyMode, a pseudo-random WEP key or passphrase is generated, and privacy is activated. If non-empty keys have previously been set, writing this attribute returns an error.')
artemBridgeAutoConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 1, 5), )
if mibBuilder.loadTexts: artemBridgeAutoConfigTable.setStatus('current')
if mibBuilder.loadTexts: artemBridgeAutoConfigTable.setDescription('Attributes for artem bridge link auto-configuration.')
artemBridgeAutoConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: artemBridgeAutoConfigEntry.setStatus('current')
if mibBuilder.loadTexts: artemBridgeAutoConfigEntry.setDescription('An entry in artemBridgeAutoConfigTable.')
artemBridgeLinkLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgeLinkLockState.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkLockState.setDescription('This attribute defines if the bridge is locked. Lock state is common for all bridge links using the same radio. If the bridge is locked, it cannot be discovered by auto-configuration scan, and remote changing of any parameters is blocked.')
artemBridgeLinkConfigScanState = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("scanning", 1), ("busy", 2))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgeLinkConfigScanState.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkConfigScanState.setDescription('This attribute defines the current auto-configuration state. idle(0) - In this state, writing any value starts an auto-configuration scan for bridge link peers. State will change to scanning(1) while the scan is in progress. When the scan is finished, the results are available in the artemBidgePeersTable. scanning(1) - An auto-configuration scan for bridge link peers is currently in progress. When scanning has finished, the state will automatically change to idle(0). busy(2) - An auto-configuration setup is currently in progress on this radio module. Writing this attribute in any state other than idle(0) will return an error.')
artemBridgePeersTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6), )
if mibBuilder.loadTexts: artemBridgePeersTable.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeersTable.setDescription('This table contains the results of bridge link auto-configuration scans. Each line represents a possible link partner.')
artemBridgePeersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerIndex"))
if mibBuilder.loadTexts: artemBridgePeersEntry.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeersEntry.setDescription('An entry in artemBridgePeersTable.')
artemBridgePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: artemBridgePeerIndex.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the artemBridgePeersTable.')
artemBridgePeerLinkAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerLinkAliasName.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerLinkAliasName.setDescription("This attribute shows the user-defined alias name for the peer's bridge link.")
artemBridgePeerCompointName = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerCompointName.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerCompointName.setDescription('This attribute displays the given node name of the peer ComPoint.')
artemBridgePeerRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 4), ArtemRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerRSSI.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerRSSI.setDescription('This attribute shows the receive signal strength for the signal received from the peer in dBm.')
artemBridgePeerLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerLinkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerLinkAdminStatus.setDescription("This attribute shows is the peer's bridge link is currently enabled.")
artemBridgePeerLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerLockState.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerLockState.setDescription("This attribute defines if the peer's bridge is locked. Lock state is common for all bridge links using the same radio. If the bridge is locked, it cannot be discovered by auto-configuration scan, and changing of any parameters is blocked.")
artemBridgePeerCompointMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerCompointMacAddress.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerCompointMacAddress.setDescription("This attribute displays the MAC address of the peer ComPoint. This is not the WLAN radio's MAC address, but rather the MAC address of the first ethernet port.")
artemBridgePeerRadioMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerRadioMacAddress.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerRadioMacAddress.setDescription("This attribute displays the peer's WLAN radio's MAC address.")
artemBridgePeerConfigSetupState = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("setup", 1), ("busy", 2))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBridgePeerConfigSetupState.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerConfigSetupState.setDescription('This attribute defines the current auto-configuration setup state of the bridge link. idle(0) - No auto-configuration is currently in progress. In this state, writing to this attribute starts auto-configuration of a bridge link to the partner defined by the table row. The state automatically changes to setup(1) for this peer, and to busy(3) for all other peers. setup(1) - Auto-configuration of this bridge link to connect to this peer is currently in progress. As soon as auto-config setup is finished, the state changes back to idle(0). You can check whether auto-config setup succeeded by reading artemBridgePeerConfigSetupResult. busy(2) - Either the bridge link is currently scanning for peers, or auto-configuration setup with another peer is currently in progress for this bridge link. Writing this attribute in any state other than idle(0) returns an error.')
artemBridgePeerConfigSetupResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noError", 0), ("unknownCommand", 1), ("locked", 2), ("invalidPortID", 3), ("deviceError", 4), ("invalidTag", 5), ("timeout", 6), ("outOfBuffers", 7), ("notFound", 8), ("internalError", 9), ("receivedNAK", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBridgePeerConfigSetupResult.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerConfigSetupResult.setDescription('This attribute holds the result after a bridge link auto-config setup. It is reset whenever a new auto-config setup is triggered.')
artemLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7), )
if mibBuilder.loadTexts: artemLinkTestTable.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestTable.setDescription('This table contains the link test results for every bridge link. Reading the artemLinkTestSignalRemote attribute triggers transmission of a new link request frame.')
artemLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: artemLinkTestEntry.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestEntry.setDescription('An entry in artemLinkTestEntry.')
artemLinkTestSignalLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 1), ArtemRSSI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestSignalLocal.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestSignalLocal.setDescription('This attribute shows the received signal strength in dBm.')
artemLinkTestSignalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 2), ArtemRSSI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestSignalRemote.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestSignalRemote.setDescription('This attribute shows the received signal in dBm, as measured by remote bridge link partner. Reading this attribute triggers transmission of a new link request frame.')
artemLinkTestNoiseLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 3), ArtemRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestNoiseLocal.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestNoiseLocal.setDescription('This attribute shows the measured noise level in dBm.')
artemLinkTestNoiseRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 4), ArtemRSSI()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestNoiseRemote.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestNoiseRemote.setDescription('This attribute shows the noise level in dBm, as measured by remote bridge link partner.')
artemLinkTestSNRLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestSNRLocal.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestSNRLocal.setDescription('This attribute shows the calculated Signal to Noise ratio in dB.')
artemLinkTestSNRRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestSNRRemote.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestSNRRemote.setDescription('This attribute shows the calculated Signal to Noise ratio in dB, as measured by remote bridge link partner.')
artemLinkTestFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestFramesTransmitted.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestFramesTransmitted.setDescription('This attribute shows the number of link test frames transmitted.')
artemLinkTestFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestFramesReceived.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestFramesReceived.setDescription('This attribute shows the number of link test frames successfully received.')
artemLinkTestFramesLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestFramesLost.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestFramesLost.setDescription('This attribute shows the number of link test frames for which no reply has been received and therefore are considered lost.')
artemLinkTestRxFrames54 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames54.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames54.setDescription('This attribute shows the number of link test frames that were received at 54 Mbps.')
artemLinkTestRxFrames48 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames48.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames48.setDescription('This attribute shows the number of link test frames that were received at 48 Mbps.')
artemLinkTestRxFrames36 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames36.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames36.setDescription('This attribute shows the number of link test frames that were received at 36 Mbps.')
artemLinkTestRxFrames24 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames24.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames24.setDescription('This attribute shows the number of link test frames that were received at 24 Mbps.')
artemLinkTestRxFrames18 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames18.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames18.setDescription('This attribute shows the number of link test frames that were received at 18 Mbps.')
artemLinkTestRxFrames12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames12.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames12.setDescription('This attribute shows the number of link test frames that were received at 12 Mbps.')
artemLinkTestRxFrames11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames11.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames11.setDescription('This attribute shows the number of link test frames that were received at 11 Mbps.')
artemLinkTestRxFrames9 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames9.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames9.setDescription('This attribute shows the number of link test frames that were received at 9 Mbps.')
artemLinkTestRxFrames6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames6.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames6.setDescription('This attribute shows the number of link test frames that were received at 6 Mbps.')
artemLinkTestRxFrames5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames5.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames5.setDescription('This attribute shows the number of link test frames that were received at 5.5 Mbps.')
artemLinkTestRxFrames2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames2.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames2.setDescription('This attribute shows the number of link test frames that were received at 2 Mbps.')
artemLinkTestRxFrames1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 1, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemLinkTestRxFrames1.setStatus('current')
if mibBuilder.loadTexts: artemLinkTestRxFrames1.setDescription('This attribute shows the number of link test frames that were received at 1 Mbps.')
artemBridgeNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4280, 5, 1, 8))
artemBridgeLinkOperState = NotificationType((1, 3, 6, 1, 4, 1, 4280, 5, 1, 8, 1)).setObjects(("IF-MIB", "ifIndex"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkOperStatus"))
if mibBuilder.loadTexts: artemBridgeLinkOperState.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkOperState.setDescription('This notification is triggered whenever the connection state of the bridge link changes, i.e. link connection is lost, or link connection is restored.')
artemBridgeLinkConfigScan = NotificationType((1, 3, 6, 1, 4, 1, 4280, 5, 1, 8, 2)).setObjects(("IF-MIB", "ifIndex"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkConfigScanState"))
if mibBuilder.loadTexts: artemBridgeLinkConfigScan.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkConfigScan.setDescription('This notification is thrown whenever the bridge link auto-configuration scanning state changes.')
artemBridgePeerConfigSetup = NotificationType((1, 3, 6, 1, 4, 1, 4280, 5, 1, 8, 3)).setObjects(("IF-MIB", "ifIndex"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerConfigSetupState"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerConfigSetupResult"))
if mibBuilder.loadTexts: artemBridgePeerConfigSetup.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeerConfigSetup.setDescription('This notification is thrown whenever the bridge link auto-configuration setup state changes.')
artemBridgeLinkLock = NotificationType((1, 3, 6, 1, 4, 1, 4280, 5, 1, 8, 4)).setObjects(("IF-MIB", "ifIndex"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkLockState"))
if mibBuilder.loadTexts: artemBridgeLinkLock.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkLock.setDescription('This notification is triggered whenever the lock state of the bridge link changes.')
artemBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 5, 1, 9)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkRowStatus"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkIfIndex"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkAdminStatus"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkAliasName"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkCurrentSpeed"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkPartnerRadioMacAddress"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkOperStatus"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkLockState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBridgeGroup = artemBridgeGroup.setStatus('current')
if mibBuilder.loadTexts: artemBridgeGroup.setDescription('artem bridge-specific attributes.')
artemBridgePrivacyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 5, 1, 10)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePrivacyMode"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePrivacyAutoKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBridgePrivacyGroup = artemBridgePrivacyGroup.setStatus('current')
if mibBuilder.loadTexts: artemBridgePrivacyGroup.setDescription('artem bridge-specific privacy attributes.')
artemBridgePeersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 5, 1, 11)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerLinkAliasName"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerCompointName"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerRSSI"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerLinkAdminStatus"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerLockState"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerCompointMacAddress"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerRadioMacAddress"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerConfigSetupState"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerConfigSetupResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBridgePeersGroup = artemBridgePeersGroup.setStatus('current')
if mibBuilder.loadTexts: artemBridgePeersGroup.setDescription('Attributes of the results of bridge link auto-configuration scans.')
artemBridgeLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 5, 1, 12)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestSignalLocal"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestSignalRemote"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestNoiseLocal"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestNoiseRemote"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestSNRLocal"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestSNRRemote"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestFramesTransmitted"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestFramesReceived"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestFramesLost"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames54"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames48"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames36"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames24"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames18"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames12"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames11"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames9"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames6"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames5"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames2"), ("ARTEM-COMPOINT-WLAN-MIB", "artemLinkTestRxFrames1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBridgeLinkTestGroup = artemBridgeLinkTestGroup.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkTestGroup.setDescription('Attributes for bridge link test.')
artemBridgeLinkNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4280, 5, 1, 13)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkOperState"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkConfigScan"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgePeerConfigSetup"), ("ARTEM-COMPOINT-WLAN-MIB", "artemBridgeLinkLock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBridgeLinkNotificationGroup = artemBridgeLinkNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: artemBridgeLinkNotificationGroup.setDescription('artem notifications for bridge links')
artemAP = MibIdentifier((1, 3, 6, 1, 4, 1, 4280, 5, 2))
artemAPServiceSetsTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 2, 1), )
if mibBuilder.loadTexts: artemAPServiceSetsTable.setStatus('current')
if mibBuilder.loadTexts: artemAPServiceSetsTable.setDescription('Attributes for artem AP service sets.')
artemAPServiceSetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 2, 1, 1), ).setIndexNames((0, "ARTEM-COMPOINT-WLAN-MIB", "artemRadioIndex"), (0, "ARTEM-COMPOINT-WLAN-MIB", "artemAPServiceSetIndex"))
if mibBuilder.loadTexts: artemAPServiceSetsEntry.setStatus('current')
if mibBuilder.loadTexts: artemAPServiceSetsEntry.setDescription('An entry in artemAPServiceSetsTable.')
artemAPServiceSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: artemAPServiceSetIndex.setStatus('current')
if mibBuilder.loadTexts: artemAPServiceSetIndex.setDescription('This is the unique index number for a service set of the given radio.')
artemAPServiceSetsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemAPServiceSetsRowStatus.setStatus('current')
if mibBuilder.loadTexts: artemAPServiceSetsRowStatus.setDescription('Auxiliary variable for creation of new object instances and/or the deletion of existing object instances.')
artemAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemAPIfIndex.setStatus('current')
if mibBuilder.loadTexts: artemAPIfIndex.setDescription('ifIndex that is associated to the combination of artemRadioIndex and artemAPServiceSetIndex.')
artemAPServiceSetAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemAPServiceSetAdminStatus.setStatus('current')
if mibBuilder.loadTexts: artemAPServiceSetAdminStatus.setDescription('This attribute defines if the associated AP service is currently active.')
artemAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 5, 2, 10)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemAPServiceSetsRowStatus"), ("ARTEM-COMPOINT-WLAN-MIB", "artemAPIfIndex"), ("ARTEM-COMPOINT-WLAN-MIB", "artemAPServiceSetAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemAPGroup = artemAPGroup.setStatus('current')
if mibBuilder.loadTexts: artemAPGroup.setDescription('Extended AP parameters not covered in standard 802.11 MIB.')
artemAPNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4280, 5, 2, 9))
artemRadioParametersTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 3), )
if mibBuilder.loadTexts: artemRadioParametersTable.setStatus('current')
if mibBuilder.loadTexts: artemRadioParametersTable.setDescription('Table of WLAN radio parameters not covered in standard 802.11 MIB.')
artemRadioParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1), ).setIndexNames((0, "ARTEM-COMPOINT-WLAN-MIB", "artemRadioIndex"))
if mibBuilder.loadTexts: artemRadioParametersEntry.setStatus('current')
if mibBuilder.loadTexts: artemRadioParametersEntry.setDescription('An entry in artemRadioParametersTable.')
artemRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: artemRadioIndex.setStatus('current')
if mibBuilder.loadTexts: artemRadioIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the artemRadioParametersTable.')
artemRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioChannel.setStatus('current')
if mibBuilder.loadTexts: artemRadioChannel.setDescription('Selecting a radio channel by writing this attribute implicitly defines the radio band to use. Channels 1..14 implies 2.4 GHz Channels 30.. implies 5 GHz Selecting any channel outside the ranges above selects 2.4 GHz with DFS. Is the selected channel part of a DFS-only subband or is it outside of any allowed subband, then DFS will be activated. Reading this attribute always returns the actually working channel, even with DFS. A returned value of 0 means no channel has (yet) been selected, perhaps due to 5 GHz band scanning.')
artemRadioSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 6, 9, 11, 12, 18, 24, 36, 48, 54))).clone(namedValues=NamedValues(("autoFallback", 0), ("fixed1Mbps", 1), ("fixed2Mpbs", 2), ("fixed5Mbps", 5), ("fixed6Mbps", 6), ("fixed9Mbps", 9), ("fixed11Mbps", 11), ("fixed12Mbps", 12), ("fixed18Mbps", 18), ("fixed24Mbps", 24), ("fixed36Mbps", 36), ("fixed48Mbps", 48), ("fixed54Mbps", 54))).clone('autoFallback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioSpeedMode.setStatus('current')
if mibBuilder.loadTexts: artemRadioSpeedMode.setDescription('This attribute selects the data rate to be used for transmissions. Selecting autoFallback activates automatic adaption of the data rate to the transmission conditions.')
artemRadioTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioTxPower.setStatus('current')
if mibBuilder.loadTexts: artemRadioTxPower.setDescription('Transmit power in dBm.')
artemRadioAntennaDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("receive", 1), ("transmit", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioAntennaDiversity.setStatus('current')
if mibBuilder.loadTexts: artemRadioAntennaDiversity.setDescription('This attribute selects the mode of antenna diversity. none(0) - No diversity, the main antenna is always used for transmission and receival. receive(1) - The main antenna is always used for transmission. Both main and aux antennas are used for receival, depending on signal levels. transmit(2) - The main antenna is always used for receival. Both main and aux antennas are used for transmission. both(3) - Both main and aux antennas are used for transmission and receival, depending on signal levels.')
artemRadioNitroMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioNitroMode.setStatus('current')
if mibBuilder.loadTexts: artemRadioNitroMode.setDescription('This attribute enables Conexant proprietary (but 100% 802.11g standard interoperable) frame bursting for increased data throughput, especially with mixed operation of 802.11b and 802.11g stations.')
artemRadioAckWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioAckWindow.setStatus('current')
if mibBuilder.loadTexts: artemRadioAckWindow.setDescription('Additional 802.11 ACK timeout in microseconds. This must be set to non-zero value for radio distances larger than about 700m. Recommended setting is about 10 microseconds per kilometer.')
artemRadioWwrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("wwr11d", 1), ("wwr11dhFlexible", 2), ("wwr11dhStrict", 3))).clone('wwr11dhFlexible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioWwrMode.setStatus('current')
if mibBuilder.loadTexts: artemRadioWwrMode.setDescription('This attribute enables/disables 802.11d and 802.11h support. none(0) - 802.11d disabled, 802.11h disabled. wwr11d(1) - 802.11d enabled, 802.11h disabled. wwr11d11hFlexible(2) - 802.11d enabled, 802.11h enabled; access point allows non-spectrum-management capable clients to join. wwr11dhStrict(3) - 802.11d enabled, 802.11h enabled; access point requires clients to be spectrum-management capable.')
artemRadioOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accessPoint", 1), ("bridge", 2), ("doubleBridge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemRadioOperatingMode.setStatus('current')
if mibBuilder.loadTexts: artemRadioOperatingMode.setDescription('This attribute selects the operation mode for this radio. accessPoint(1) - select access point mode. bridge(2) - select bridge mode, up to 6 bridge links may be generated. doubleBridge(3) - selects double bridge mode. Only available with 802.11b products.')
artemInterfaceRadioTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 5, 4), )
if mibBuilder.loadTexts: artemInterfaceRadioTable.setStatus('current')
if mibBuilder.loadTexts: artemInterfaceRadioTable.setDescription('Table of connection between interfaces (ifIndex) and radio indices (artemWLANRadioIndex).')
artemInterfaceRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: artemInterfaceRadioEntry.setStatus('current')
if mibBuilder.loadTexts: artemInterfaceRadioEntry.setDescription('An entry in artemInterfaceRadioTable.')
artemWLANRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemWLANRadioIndex.setStatus('current')
if mibBuilder.loadTexts: artemWLANRadioIndex.setDescription('The auxiliary variable used to identify instances of the columnar objects in the artemRadioParametersTable.')
artemWLANNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4280, 5, 8))
artemWLANGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 5, 9)).setObjects(("ARTEM-COMPOINT-WLAN-MIB", "artemRadioChannel"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioSpeedMode"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioTxPower"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioAntennaDiversity"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioNitroMode"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioAckWindow"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioWwrMode"), ("ARTEM-COMPOINT-WLAN-MIB", "artemRadioOperatingMode"), ("ARTEM-COMPOINT-WLAN-MIB", "artemWLANRadioIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemWLANGroup = artemWLANGroup.setStatus('current')
if mibBuilder.loadTexts: artemWLANGroup.setDescription('Extended WLAN radio parameters not covered in standard 802.11 MIB.')
mibBuilder.exportSymbols("ARTEM-COMPOINT-WLAN-MIB", artemRadioSpeedMode=artemRadioSpeedMode, artemLinkTestSignalLocal=artemLinkTestSignalLocal, artem=artem, artemBridgeNotification=artemBridgeNotification, artemBridgePeerLinkAdminStatus=artemBridgePeerLinkAdminStatus, artemBridgeLinkAdminStatus=artemBridgeLinkAdminStatus, artemRadioChannel=artemRadioChannel, artemBridgeLinkConfigScan=artemBridgeLinkConfigScan, artemLinkTestRxFrames48=artemLinkTestRxFrames48, artemAPServiceSetIndex=artemAPServiceSetIndex, artemLinkTestEntry=artemLinkTestEntry, artemRadioIndex=artemRadioIndex, artemBridgeConfigSetupTimeout=artemBridgeConfigSetupTimeout, artemInterfaceRadioEntry=artemInterfaceRadioEntry, artemBridgeLinkIndex=artemBridgeLinkIndex, artemBridgePrivacyAutoKey=artemBridgePrivacyAutoKey, artemWLAN=artemWLAN, artemBridgeLinkNotificationGroup=artemBridgeLinkNotificationGroup, artemLinkTestFramesReceived=artemLinkTestFramesReceived, artemBridgePrivacyEntry=artemBridgePrivacyEntry, artemLinkTestSNRLocal=artemLinkTestSNRLocal, artemBridgeLinkLock=artemBridgeLinkLock, artemBridgeLinkLockState=artemBridgeLinkLockState, artemBridgePeersGroup=artemBridgePeersGroup, artemBridgePeerConfigSetup=artemBridgePeerConfigSetup, artemBridgePeersTable=artemBridgePeersTable, artemBridgePrivacyMode=artemBridgePrivacyMode, artemLinkTestSNRRemote=artemLinkTestSNRRemote, artemBridgeLinkRowStatus=artemBridgeLinkRowStatus, artemWLANNotification=artemWLANNotification, artemBridgePeerRadioMacAddress=artemBridgePeerRadioMacAddress, artemBridgeAutoConfigEntry=artemBridgeAutoConfigEntry, artemBridgeLinkIfIndex=artemBridgeLinkIfIndex, artemBridge=artemBridge, artemBridgePeerCompointMacAddress=artemBridgePeerCompointMacAddress, artemAPGroup=artemAPGroup, artemAP=artemAP, artemLinkTestRxFrames12=artemLinkTestRxFrames12, artemBridgePeerLockState=artemBridgePeerLockState, artemAPServiceSetsEntry=artemAPServiceSetsEntry, artemBridgePeersEntry=artemBridgePeersEntry, artemBridgePeerConfigSetupState=artemBridgePeerConfigSetupState, artemInterfaceRadioTable=artemInterfaceRadioTable, artemBridgeLinkPartnerRadioMacAddress=artemBridgeLinkPartnerRadioMacAddress, artemLinkTestNoiseLocal=artemLinkTestNoiseLocal, artemLinkTestTable=artemLinkTestTable, artemRadioWwrMode=artemRadioWwrMode, artemRadioNitroMode=artemRadioNitroMode, artemLinkTestNoiseRemote=artemLinkTestNoiseRemote, artemLinkTestRxFrames24=artemLinkTestRxFrames24, artemBridgeLinkTestGroup=artemBridgeLinkTestGroup, artemBridgePeerConfigSetupResult=artemBridgePeerConfigSetupResult, artemBridgeGroup=artemBridgeGroup, artemBridgeLinkOperState=artemBridgeLinkOperState, artemLinkTestFramesTransmitted=artemLinkTestFramesTransmitted, artemRadioAckWindow=artemRadioAckWindow, artemAPIfIndex=artemAPIfIndex, artemBridgeAutoConfigTable=artemBridgeAutoConfigTable, artemAPServiceSetsTable=artemAPServiceSetsTable, artemRadioOperatingMode=artemRadioOperatingMode, artemBridgeConfigScanTimeout=artemBridgeConfigScanTimeout, artemRadioParametersEntry=artemRadioParametersEntry, artemBridgePeerCompointName=artemBridgePeerCompointName, artemWLANGroup=artemWLANGroup, artemAPNotification=artemAPNotification, artemBridgePeerIndex=artemBridgePeerIndex, artemBridgeLinksTable=artemBridgeLinksTable, artemLinkTestRxFrames2=artemLinkTestRxFrames2, artemBridgePrivacyTable=artemBridgePrivacyTable, artemLinkTestSignalRemote=artemLinkTestSignalRemote, artemAPServiceSetAdminStatus=artemAPServiceSetAdminStatus, artemBridgePeerRSSI=artemBridgePeerRSSI, artemLinkTestRxFrames9=artemLinkTestRxFrames9, artemBridgePrivacyGroup=artemBridgePrivacyGroup, artemBridgeLinksEntry=artemBridgeLinksEntry, ArtemRSSI=ArtemRSSI, artemLinkTestRxFrames18=artemLinkTestRxFrames18, artemLinkTestRxFrames36=artemLinkTestRxFrames36, artemRadioAntennaDiversity=artemRadioAntennaDiversity, artemLinkTestRxFrames5=artemLinkTestRxFrames5, artemAPServiceSetsRowStatus=artemAPServiceSetsRowStatus, artemLinkTestRxFrames11=artemLinkTestRxFrames11, artemRadioParametersTable=artemRadioParametersTable, artemBridgeLinkCurrentSpeed=artemBridgeLinkCurrentSpeed, artemRadioTxPower=artemRadioTxPower, artemBridgeLinkConfigScanState=artemBridgeLinkConfigScanState, artemBridgeLinkOperStatus=artemBridgeLinkOperStatus, PYSNMP_MODULE_ID=artem, artemLinkTestRxFrames54=artemLinkTestRxFrames54, artemLinkTestRxFrames6=artemLinkTestRxFrames6, artemWLANRadioIndex=artemWLANRadioIndex, artemBridgeLinkAliasName=artemBridgeLinkAliasName, artemBridgePeerLinkAliasName=artemBridgePeerLinkAliasName, artemLinkTestRxFrames1=artemLinkTestRxFrames1, artemLinkTestFramesLost=artemLinkTestFramesLost)
