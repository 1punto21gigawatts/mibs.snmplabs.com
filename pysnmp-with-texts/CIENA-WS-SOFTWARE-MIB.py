#
# PySNMP MIB module CIENA-WS-SOFTWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-WS-SOFTWARE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cienaWsConfig, = mibBuilder.importSymbols("CIENA-WS-MIB", "cienaWsConfig")
StringMaxl128, StringMaxl32, StringMaxl256, StringMaxl64 = mibBuilder.importSymbols("CIENA-WS-TYPEDEFS-MIB", "StringMaxl128", "StringMaxl32", "StringMaxl256", "StringMaxl64")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, TimeTicks, NotificationType, MibIdentifier, ModuleIdentity, Counter32, Unsigned32, Bits, Integer32, Counter64, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "NotificationType", "MibIdentifier", "ModuleIdentity", "Counter32", "Unsigned32", "Bits", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
cienaWsSoftwareMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14))
cienaWsSoftwareMIB.setRevisions(('2016-11-03 00:00', '2016-06-14 00:00', '2015-09-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaWsSoftwareMIB.setRevisionsDescriptions(("Waveserver Rel 1.3 revised. 'ws-software/installed' has been restructred. The change is made to support when number of installed items exceeds five.", 'Waveserver Rel 1.2 revised. Major restructuring of this YANG module.', 'Initial version.',))
if mibBuilder.loadTexts: cienaWsSoftwareMIB.setLastUpdated('201611030000Z')
if mibBuilder.loadTexts: cienaWsSoftwareMIB.setOrganization('Ciena Corporation')
if mibBuilder.loadTexts: cienaWsSoftwareMIB.setContactInfo('Web URL: http://www.ciena.com/ Postal: 7035 Ridge Road Hanover, Maryland 21076 U.S.A. Phone: +1 800-921-1144 Fax: +1 410-694-5750')
if mibBuilder.loadTexts: cienaWsSoftwareMIB.setDescription("This module defines software information representation for Ciena's Waveserver.")
class SoftwareOpState(TextualConvention, Integer32):
    description = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("normal", 1), ("upgradeinprogress", 2), ("restartinprogress", 3), ("subsystemfailed", 4), ("systemloaderror", 5))

class SoftwareRtncode(TextualConvention, Unsigned32):
    description = 'Return code value used in the software module. 0 indicate success. None-zero indicate failure.'
    status = 'current'

class UpgradeOpState(TextualConvention, Integer32):
    description = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("unknown", 0), ("idle", 1), ("downloadinprogress", 2), ("downloadcomplete", 3), ("downloadfailed", 4), ("installationinprogress", 5), ("installationcomplete", 6), ("installationfailed", 7), ("activationinprogress", 8), ("activationcomplete", 9), ("activationfailed", 10), ("commitinprogress", 11), ("commitcomplete", 12), ("commitfailed", 13), ("cancelinprogress", 14), ("cancelcomplete", 15), ("cancelfailed", 16), ("manualcommit", 17), ("manualcancel", 18))

cwsSoftwareStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3), )
if mibBuilder.loadTexts: cwsSoftwareStatusTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusTable.setDescription('Waveserver software status information.')
cwsSoftwareStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusTableSnmpKey"))
if mibBuilder.loadTexts: cwsSoftwareStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusEntry.setDescription('Entry for cwsSoftwareStatusTable.')
cwsSoftwareStatusTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareStatusTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusTableSnmpKey.setDescription('Unique key for cwsSoftwareStatus')
cwsSoftwareStatusSoftwareOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 2), SoftwareOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareStatusSoftwareOperationalState.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusSoftwareOperationalState.setDescription('The current software operational state.')
cwsSoftwareStatusUpgradeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 3), UpgradeOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareStatusUpgradeOperationalState.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusUpgradeOperationalState.setDescription('The current upgrade operational state.')
cwsSoftwareStatusCommittedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareStatusCommittedVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusCommittedVersion.setDescription('The software committed version.')
cwsSoftwareStatusActiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 5), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareStatusActiveVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusActiveVersion.setDescription('The software active version.')
cwsSoftwareStatusUpgradeToVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 6), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareStatusUpgradeToVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusUpgradeToVersion.setDescription('The software upgrade-to version.')
cwsSoftwareStatusLastOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 3, 1, 7), StringMaxl128()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareStatusLastOperation.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareStatusLastOperation.setDescription('The software upgrade last operation.')
cwsSoftwareCheckStatusReportTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4), )
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportTable.setDescription('Waveserver Software Check Status Report. This status report is generated after rpc ws-software-check has been run.')
cwsSoftwareCheckStatusReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportTableSnmpKey"))
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportEntry.setDescription('Entry for cwsSoftwareCheckStatusReportTable.')
cwsSoftwareCheckStatusReportTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportTableSnmpKey.setDescription('Unique key for cwsSoftwareCheckStatusReport')
cwsSoftwareCheckStatusReportActiveReleaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportActiveReleaseVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportActiveReleaseVersion.setDescription('The software active version.')
cwsSoftwareCheckStatusReportServerReleaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServerReleaseVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServerReleaseVersion.setDescription('The remote server release version.')
cwsSoftwareCheckStatusReportLocalReleaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportLocalReleaseVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportLocalReleaseVersion.setDescription('The Local release version.')
cwsSoftwareCheckStatusReportServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 5), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServerHostname.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServerHostname.setDescription('The remote server host name.')
cwsSoftwareCheckStatusReportServerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 6), StringMaxl256()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServerPath.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServerPath.setDescription('The remote server path name.')
cwsSoftwareCheckStatusReportTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 7), StringMaxl128()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportTimestamp.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportTimestamp.setDescription('The check status timestamp')
cwsSoftwareCheckStatusReportCheckOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 8), SoftwareOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportCheckOperationalState.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportCheckOperationalState.setDescription('The Check Operational State of the check status report.')
cwsSoftwareCheckStatusReportCheckUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 9), UpgradeOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportCheckUpgradeState.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportCheckUpgradeState.setDescription('Check Upgrade State of the check status report.')
cwsSoftwareCheckStatusReportRequiredActivationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 10), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportRequiredActivationType.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportRequiredActivationType.setDescription('The activation type required for upgrading the remote version: cold restart or warm restart.')
cwsSoftwareCheckStatusReportServiceInterruptionActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServiceInterruptionActivation.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareCheckStatusReportServiceInterruptionActivation.setDescription('This is to indicate whether the system service will be interrupted if the remote version is upgraded.')
cwsSoftwareUpgradeServerTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5), )
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerTable.setDescription('Waveserver remote upgrade server information.')
cwsSoftwareUpgradeServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerTableSnmpKey"))
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerEntry.setDescription('Entry for cwsSoftwareUpgradeServerTable.')
cwsSoftwareUpgradeServerTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerTableSnmpKey.setDescription('Unique key for cwsSoftwareUpgradeServer')
cwsSoftwareUpgradeServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerIndex.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerIndex.setDescription('Unique id, read-only attribute.')
cwsSoftwareUpgradeServerServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 3), StringMaxl64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerServer.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerServer.setDescription('Remote server hostname or IP address')
cwsSoftwareUpgradeServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("tftp", 0), ("ftp", 1), ("sftp", 2), ("scp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerMode.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerMode.setDescription('The protocol to access server, supported protcols are ftp, tftp, sftp, scp')
cwsSoftwareUpgradeServerRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerRemotePath.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerRemotePath.setDescription('The remote server file system path that stores the RPM and bundle xml files.')
cwsSoftwareUpgradeServerLoginId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 6), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerLoginId.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerLoginId.setDescription('The user name string to authenticate remote server.')
cwsSoftwareUpgradeServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 5, 1, 7), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerPassword.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeServerPassword.setDescription('The password for the username.')
cwsSoftwareUpgradeLogListTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 6), )
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListTable.setDescription('None')
cwsSoftwareUpgradeLogListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 6, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeLogListLogIndex"))
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListEntry.setDescription('Entry for cwsSoftwareUpgradeLogListTable.')
cwsSoftwareUpgradeLogListLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListLogIndex.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListLogIndex.setDescription('Softsare log index. Unique id, read-only attribute.')
cwsSoftwareUpgradeLogListDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 6, 1, 2), StringMaxl64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListDateAndTime.setDescription('The software log date and time, in string format.')
cwsSoftwareUpgradeLogListText = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 6, 1, 3), StringMaxl256()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListText.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareUpgradeLogListText.setDescription('The software log text.')
cwsSoftwareActiveSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7), )
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareTable.setDescription('Waveserver active software information.')
cwsSoftwareActiveSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActiveSoftwareTableSnmpKey"))
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareEntry.setDescription('Entry for cwsSoftwareActiveSoftwareTable.')
cwsSoftwareActiveSoftwareTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareTableSnmpKey.setDescription('Unique key for cwsSoftwareActiveSoftware')
cwsSoftwareActiveSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareVersion.setDescription('Active software release version.')
cwsSoftwareActiveSoftwareBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareBuildNumber.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareBuildNumber.setDescription('Active software release build number.')
cwsSoftwareActiveSoftwareBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareBuildDate.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareBuildDate.setDescription('Active software release build date.')
cwsSoftwareActiveSoftwareCatalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1, 5), StringMaxl64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareCatalogName.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareCatalogName.setDescription('Active software release catalog name.')
cwsSoftwareActiveSoftwareNumberOfComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareNumberOfComponents.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActiveSoftwareNumberOfComponents.setDescription('The active software release component count.')
cwsSoftwareActivecomponentsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8), )
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsTable.setDescription('None')
cwsSoftwareActivecomponentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActivecomponentsComponentIndex"))
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsEntry.setDescription('Entry for cwsSoftwareActivecomponentsTable.')
cwsSoftwareActivecomponentsComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsComponentIndex.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsComponentIndex.setDescription('The active software component index. Unique id, read-only attribute.')
cwsSoftwareActivecomponentsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsName.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsName.setDescription('The active software component name.')
cwsSoftwareActivecomponentsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsVersion.setDescription('The active software component version.')
cwsSoftwareActivecomponentsBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsBuildNumber.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsBuildNumber.setDescription('The active software component build number.')
cwsSoftwareActivecomponentsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("failed", 2), ("pending", 3), ("restarting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsStatus.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareActivecomponentsStatus.setDescription('The active software component status.')
cwsSoftwareBootPartitionListTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9), )
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListTable.setDescription('None')
cwsSoftwareBootPartitionListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareBootPartitionListIndex"))
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListEntry.setDescription('Entry for cwsSoftwareBootPartitionListTable.')
cwsSoftwareBootPartitionListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListIndex.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListIndex.setDescription('Unique id, read-only attribute.')
cwsSoftwareBootPartitionListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("kernel0", 1), ("bootloader0", 2), ("kernel1", 3), ("bootloader1", 4), ("firmware0", 5), ("firmware1", 6), ("backupbl", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListName.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListName.setDescription('The partition name.')
cwsSoftwareBootPartitionListVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListVersion.setDescription('The partition version.')
cwsSoftwareBootPartitionListDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListDate.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListDate.setDescription('The partition date.')
cwsSoftwareBootPartitionListState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("standby", 2), ("notapplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListState.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListState.setDescription('The partition state.')
cwsSoftwareBootPartitionListIntegrityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("pass", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListIntegrityCheck.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareBootPartitionListIntegrityCheck.setDescription('The partition integrity check.')
cwsSoftwareVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10), )
if mibBuilder.loadTexts: cwsSoftwareVersionsTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsTable.setDescription('None')
cwsSoftwareVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsIndex"))
if mibBuilder.loadTexts: cwsSoftwareVersionsEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsEntry.setDescription('Entry for cwsSoftwareVersionsTable.')
cwsSoftwareVersionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareVersionsIndex.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsIndex.setDescription('Unique id, read-only attribute.')
cwsSoftwareVersionsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareVersionsVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsVersion.setDescription('The software installed version.')
cwsSoftwareVersionsBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareVersionsBuildNumber.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsBuildNumber.setDescription('The software installed build number.')
cwsSoftwareVersionsBuildTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareVersionsBuildTag.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsBuildTag.setDescription('The software installed build tag.')
cwsSoftwareVersionsBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 5), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareVersionsBuildDate.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsBuildDate.setDescription('The software release build date.')
cwsSoftwareVersionsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareVersionsSize.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsSize.setDescription('The software package size in MB.')
cwsSoftwareVersionsNumberOfComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareVersionsNumberOfComponents.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareVersionsNumberOfComponents.setDescription('The installed software component count.')
cwsSoftwareInstalledcomponentsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11), )
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsTable.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsTable.setDescription('None')
cwsSoftwareInstalledcomponentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1), ).setIndexNames((0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsIndex"), (0, "CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsComponentIndex"))
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsEntry.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsEntry.setDescription('Entry for cwsSoftwareInstalledcomponentsTable.')
cwsSoftwareInstalledcomponentsComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsComponentIndex.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsComponentIndex.setDescription('Unique id, read-only attribute.')
cwsSoftwareInstalledcomponentsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsName.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsName.setDescription('The installed software component name.')
cwsSoftwareInstalledcomponentsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsVersion.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsVersion.setDescription('The installed software component version.')
cwsSoftwareInstalledcomponentsBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildNumber.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildNumber.setDescription('The installed software component build number.')
cwsSoftwareInstalledcomponentsBuildTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 5), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildTag.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildTag.setDescription('The installed software component build tag.')
cwsSoftwareInstalledcomponentsBuildTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 6), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildTimestamp.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildTimestamp.setDescription('The installed software component build timestamp.')
cwsSoftwareInstalledcomponentsBuildSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildSize.setStatus('current')
if mibBuilder.loadTexts: cwsSoftwareInstalledcomponentsBuildSize.setDescription('The installed software component build size.')
cienaWsSoftwareObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 1))
cienaWsSoftwareConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 2))
cienaWsSoftwareGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 2, 1))
cienaWsSoftwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 2, 1, 1)).setObjects(("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusSoftwareOperationalState"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusUpgradeOperationalState"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusCommittedVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusActiveVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusUpgradeToVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareStatusLastOperation"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportActiveReleaseVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportServerReleaseVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportLocalReleaseVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportServerHostname"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportServerPath"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportTimestamp"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportCheckOperationalState"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportCheckUpgradeState"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportRequiredActivationType"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareCheckStatusReportServiceInterruptionActivation"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerIndex"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerServer"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerMode"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerRemotePath"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerLoginId"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeServerPassword"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeLogListDateAndTime"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareUpgradeLogListText"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActiveSoftwareVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActiveSoftwareBuildNumber"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActiveSoftwareBuildDate"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActiveSoftwareCatalogName"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActiveSoftwareNumberOfComponents"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActivecomponentsName"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActivecomponentsVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActivecomponentsBuildNumber"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareActivecomponentsStatus"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareBootPartitionListName"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareBootPartitionListVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareBootPartitionListDate"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareBootPartitionListState"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareBootPartitionListIntegrityCheck"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsBuildNumber"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsBuildTag"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsBuildDate"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsSize"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareVersionsNumberOfComponents"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsName"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsVersion"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsBuildNumber"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsBuildTag"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsBuildTimestamp"), ("CIENA-WS-SOFTWARE-MIB", "cwsSoftwareInstalledcomponentsBuildSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cienaWsSoftwareGroup = cienaWsSoftwareGroup.setStatus('current')
if mibBuilder.loadTexts: cienaWsSoftwareGroup.setDescription('Conformance Group')
cienaWsSoftwareCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 2, 2))
cienaWsSoftwareCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1271, 3, 4, 14, 2, 2, 1)).setObjects(("CIENA-WS-SOFTWARE-MIB", "cienaWsSoftwareGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cienaWsSoftwareCompliance = cienaWsSoftwareCompliance.setStatus('current')
if mibBuilder.loadTexts: cienaWsSoftwareCompliance.setDescription('Compliance')
mibBuilder.exportSymbols("CIENA-WS-SOFTWARE-MIB", cwsSoftwareUpgradeLogListDateAndTime=cwsSoftwareUpgradeLogListDateAndTime, PYSNMP_MODULE_ID=cienaWsSoftwareMIB, cwsSoftwareActiveSoftwareTableSnmpKey=cwsSoftwareActiveSoftwareTableSnmpKey, cwsSoftwareInstalledcomponentsComponentIndex=cwsSoftwareInstalledcomponentsComponentIndex, cwsSoftwareActivecomponentsTable=cwsSoftwareActivecomponentsTable, SoftwareOpState=SoftwareOpState, cienaWsSoftwareGroup=cienaWsSoftwareGroup, cwsSoftwareBootPartitionListVersion=cwsSoftwareBootPartitionListVersion, cwsSoftwareInstalledcomponentsTable=cwsSoftwareInstalledcomponentsTable, cwsSoftwareCheckStatusReportTableSnmpKey=cwsSoftwareCheckStatusReportTableSnmpKey, cwsSoftwareVersionsTable=cwsSoftwareVersionsTable, cwsSoftwareVersionsNumberOfComponents=cwsSoftwareVersionsNumberOfComponents, cwsSoftwareStatusTable=cwsSoftwareStatusTable, cienaWsSoftwareCompliances=cienaWsSoftwareCompliances, cwsSoftwareCheckStatusReportEntry=cwsSoftwareCheckStatusReportEntry, cwsSoftwareCheckStatusReportServerPath=cwsSoftwareCheckStatusReportServerPath, cwsSoftwareUpgradeServerIndex=cwsSoftwareUpgradeServerIndex, cwsSoftwareCheckStatusReportCheckOperationalState=cwsSoftwareCheckStatusReportCheckOperationalState, cwsSoftwareStatusSoftwareOperationalState=cwsSoftwareStatusSoftwareOperationalState, cwsSoftwareBootPartitionListName=cwsSoftwareBootPartitionListName, cwsSoftwareUpgradeServerTable=cwsSoftwareUpgradeServerTable, cwsSoftwareVersionsBuildNumber=cwsSoftwareVersionsBuildNumber, cwsSoftwareInstalledcomponentsEntry=cwsSoftwareInstalledcomponentsEntry, cwsSoftwareActivecomponentsBuildNumber=cwsSoftwareActivecomponentsBuildNumber, cwsSoftwareUpgradeServerLoginId=cwsSoftwareUpgradeServerLoginId, cwsSoftwareStatusActiveVersion=cwsSoftwareStatusActiveVersion, cwsSoftwareCheckStatusReportServiceInterruptionActivation=cwsSoftwareCheckStatusReportServiceInterruptionActivation, cwsSoftwareActivecomponentsVersion=cwsSoftwareActivecomponentsVersion, cwsSoftwareInstalledcomponentsBuildTimestamp=cwsSoftwareInstalledcomponentsBuildTimestamp, cwsSoftwareUpgradeServerServer=cwsSoftwareUpgradeServerServer, cwsSoftwareActivecomponentsStatus=cwsSoftwareActivecomponentsStatus, cwsSoftwareInstalledcomponentsBuildSize=cwsSoftwareInstalledcomponentsBuildSize, cwsSoftwareVersionsBuildDate=cwsSoftwareVersionsBuildDate, cwsSoftwareVersionsIndex=cwsSoftwareVersionsIndex, SoftwareRtncode=SoftwareRtncode, cwsSoftwareStatusUpgradeOperationalState=cwsSoftwareStatusUpgradeOperationalState, cwsSoftwareVersionsVersion=cwsSoftwareVersionsVersion, cwsSoftwareBootPartitionListTable=cwsSoftwareBootPartitionListTable, cwsSoftwareStatusUpgradeToVersion=cwsSoftwareStatusUpgradeToVersion, cwsSoftwareInstalledcomponentsBuildNumber=cwsSoftwareInstalledcomponentsBuildNumber, cwsSoftwareInstalledcomponentsBuildTag=cwsSoftwareInstalledcomponentsBuildTag, cwsSoftwareBootPartitionListIndex=cwsSoftwareBootPartitionListIndex, cwsSoftwareActiveSoftwareBuildNumber=cwsSoftwareActiveSoftwareBuildNumber, UpgradeOpState=UpgradeOpState, cwsSoftwareUpgradeLogListEntry=cwsSoftwareUpgradeLogListEntry, cwsSoftwareUpgradeServerTableSnmpKey=cwsSoftwareUpgradeServerTableSnmpKey, cwsSoftwareCheckStatusReportServerReleaseVersion=cwsSoftwareCheckStatusReportServerReleaseVersion, cienaWsSoftwareMIB=cienaWsSoftwareMIB, cwsSoftwareCheckStatusReportCheckUpgradeState=cwsSoftwareCheckStatusReportCheckUpgradeState, cwsSoftwareActiveSoftwareCatalogName=cwsSoftwareActiveSoftwareCatalogName, cwsSoftwareBootPartitionListState=cwsSoftwareBootPartitionListState, cwsSoftwareInstalledcomponentsName=cwsSoftwareInstalledcomponentsName, cwsSoftwareUpgradeServerEntry=cwsSoftwareUpgradeServerEntry, cienaWsSoftwareCompliance=cienaWsSoftwareCompliance, cwsSoftwareUpgradeLogListText=cwsSoftwareUpgradeLogListText, cwsSoftwareCheckStatusReportLocalReleaseVersion=cwsSoftwareCheckStatusReportLocalReleaseVersion, cwsSoftwareUpgradeServerMode=cwsSoftwareUpgradeServerMode, cwsSoftwareCheckStatusReportActiveReleaseVersion=cwsSoftwareCheckStatusReportActiveReleaseVersion, cwsSoftwareVersionsEntry=cwsSoftwareVersionsEntry, cwsSoftwareUpgradeLogListLogIndex=cwsSoftwareUpgradeLogListLogIndex, cwsSoftwareUpgradeLogListTable=cwsSoftwareUpgradeLogListTable, cwsSoftwareCheckStatusReportTable=cwsSoftwareCheckStatusReportTable, cwsSoftwareBootPartitionListEntry=cwsSoftwareBootPartitionListEntry, cwsSoftwareVersionsSize=cwsSoftwareVersionsSize, cienaWsSoftwareObjects=cienaWsSoftwareObjects, cwsSoftwareActiveSoftwareBuildDate=cwsSoftwareActiveSoftwareBuildDate, cwsSoftwareStatusTableSnmpKey=cwsSoftwareStatusTableSnmpKey, cwsSoftwareActiveSoftwareTable=cwsSoftwareActiveSoftwareTable, cwsSoftwareCheckStatusReportRequiredActivationType=cwsSoftwareCheckStatusReportRequiredActivationType, cwsSoftwareCheckStatusReportServerHostname=cwsSoftwareCheckStatusReportServerHostname, cwsSoftwareStatusLastOperation=cwsSoftwareStatusLastOperation, cwsSoftwareStatusCommittedVersion=cwsSoftwareStatusCommittedVersion, cwsSoftwareUpgradeServerPassword=cwsSoftwareUpgradeServerPassword, cwsSoftwareInstalledcomponentsVersion=cwsSoftwareInstalledcomponentsVersion, cwsSoftwareCheckStatusReportTimestamp=cwsSoftwareCheckStatusReportTimestamp, cwsSoftwareActivecomponentsComponentIndex=cwsSoftwareActivecomponentsComponentIndex, cwsSoftwareBootPartitionListDate=cwsSoftwareBootPartitionListDate, cwsSoftwareActivecomponentsEntry=cwsSoftwareActivecomponentsEntry, cwsSoftwareActivecomponentsName=cwsSoftwareActivecomponentsName, cwsSoftwareActiveSoftwareNumberOfComponents=cwsSoftwareActiveSoftwareNumberOfComponents, cienaWsSoftwareConformance=cienaWsSoftwareConformance, cwsSoftwareActiveSoftwareVersion=cwsSoftwareActiveSoftwareVersion, cienaWsSoftwareGroups=cienaWsSoftwareGroups, cwsSoftwareUpgradeServerRemotePath=cwsSoftwareUpgradeServerRemotePath, cwsSoftwareVersionsBuildTag=cwsSoftwareVersionsBuildTag, cwsSoftwareBootPartitionListIntegrityCheck=cwsSoftwareBootPartitionListIntegrityCheck, cwsSoftwareStatusEntry=cwsSoftwareStatusEntry, cwsSoftwareActiveSoftwareEntry=cwsSoftwareActiveSoftwareEntry)
