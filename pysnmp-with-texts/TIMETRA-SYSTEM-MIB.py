#
# PySNMP MIB module TIMETRA-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:23:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
InetAddressType, InetAddress, InetAddressIPv6, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressIPv6", "InetAddressPrefixLength")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, Counter64, TimeTicks, Unsigned32, iso, IpAddress, Integer32, Bits, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "Counter64", "TimeTicks", "Unsigned32", "iso", "IpAddress", "Integer32", "Bits", "MibIdentifier", "NotificationType")
TextualConvention, TruthValue, RowStatus, RowPointer, TimeStamp, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "RowPointer", "TimeStamp", "DisplayString", "DateAndTime")
tmnxChassisNotifyHwIndex, tmnxHwID, tmnxHwClass = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex", "tmnxHwID", "tmnxHwClass")
tmnxSRNotifyPrefix, tmnxSRObjs, timetraSRMIBModules, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRConfs")
tmnxLogExecRollbackOpIndex, = mibBuilder.importSymbols("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex")
TmnxAdminState, TmnxEnabledDisabled, TTcpUdpPort, TmnxOperState, TItemDescription, IpAddressPrefixLength, TNamedItem, TNamedItemOrEmpty, TmnxActionType = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxAdminState", "TmnxEnabledDisabled", "TTcpUdpPort", "TmnxOperState", "TItemDescription", "IpAddressPrefixLength", "TNamedItem", "TNamedItemOrEmpty", "TmnxActionType")
timetraSysMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 1))
timetraSysMIBModule.setRevisions(('1911-02-01 00:00', '1910-01-01 00:00', '1909-02-28 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-15 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraSysMIBModule.setRevisionsDescriptions(('Rev 9.0 01 Feb 2011 00:00 9.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 8.0 01 Jan 2010 00:00 8.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 4.0 15 Mar 2006 00:00 4.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-SYSTEM-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-SYSTEM-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-SYSTEM-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-SYSTEM-MIB.', 'Rev 0.1 14 Aug 2000 00:00 First version of the TIMETRA-SYSTEM-MIB.',))
if mibBuilder.loadTexts: timetraSysMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: timetraSysMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraSysMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraSysMIBModule.setDescription("This document is the System SNMP MIB module for the Alcatel-Lucent SROS device. The System MIB module defines SNMP objects to manage and provision system features. Copyright 2003-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied `as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxSysObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1))
tmnxSysConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1))
tmnxSysMIBNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1))
tmnxSysNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0))
class TmnxSsiSyncMode(TextualConvention, Integer32):
    description = 'The value of TmnxSsiSyncMode specifies the type of synchronization operation to perform between the primary and secondary CPMs after a change has been made to the configuration files or the boot environment information contained in the boot options file (bof).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("config", 2), ("bootEnv", 3))

class TmnxSsiSyncRollbackMode(TextualConvention, Integer32):
    description = 'The value of TmnxSsiSyncRollbackMode specifies the type of synchronization operation to perform between the primary and secondary CPMs after a change has been made to the rollback files.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("rollbackSingle", 2), ("rollbackAll", 3))

class TmnxSysMonSampleTime(TextualConvention, Unsigned32):
    description = 'The value of TmnxSysMonSampleTime specifies the monitoring sample time (in terms of seconds) for a system object.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(60, 60), ValueRangeConstraint(300, 300), )
class TmnxSysMonUtilization(TextualConvention, Gauge32):
    description = 'The value of TmnxSysMonUtilization specifies the utilization/idle percentage (in terms 100ths of a percent) for a given sample-time.'
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 10000)

sysGenInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1))
sgiCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiCpuUsage.setStatus('current')
if mibBuilder.loadTexts: sgiCpuUsage.setDescription('The value of sgiCpuUsage indicates the current CPU utilization for the system.')
sgiMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sgiMemoryUsed.setDescription('The value of sgiMemoryUsed indicates the total pre-allocated pool memory currently in use on the system. If the value is greater than the maximum value reportable by this object then this object reports its maximum value (4,294,967,295) and sgiKbMemoryUsed must be used to determine the total pre-allocated pool memory.')
sgiMemoryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 3), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiMemoryAvailable.setStatus('current')
if mibBuilder.loadTexts: sgiMemoryAvailable.setDescription('The value of sgiMemoryAvailable indicates the amount of free memory in the overall system that is not allocated to memory pools, but is available in case a memory pool needs to grow.')
sgiMemoryPoolAllocated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 4), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiMemoryPoolAllocated.setStatus('current')
if mibBuilder.loadTexts: sgiMemoryPoolAllocated.setDescription('The value of sgiMemoryPoolAllocated indicates the total memory currently allocated in memory-pools on the system. This memory may or may not be currently in use, but is pre-allocated should the software need to use it. If the value is greater than the maximum value reportable by this object then this object reports its maximum value (4,294,967,295) and sgiKbMemoryPoolAllocated must be used to determine the total memory allocated in memory-pools.')
sgiSwMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSwMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sgiSwMajorVersion.setDescription('The value of sgiSwMajorVersion indicates the major version number of the software running on the active CPM card.')
sgiSwMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSwMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sgiSwMinorVersion.setDescription('The value of sgiSwMinorVersion indicates the minor version number of the software running on the active CPM card.')
sgiSwVersionModifier = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSwVersionModifier.setStatus('current')
if mibBuilder.loadTexts: sgiSwVersionModifier.setDescription('The value of sgiSwVersionModifier indicates additional information about the version of software running on the active CPM card.')
sgiSnmpInGetBulks = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiSnmpInGetBulks.setStatus('current')
if mibBuilder.loadTexts: sgiSnmpInGetBulks.setDescription('The value of sgiSnmpInGetBulks indicates the total number of SNMP Get-Next PDUs which have been accepted and processed by the SNMP protocol entity.')
sgiKbMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 9), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiKbMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: sgiKbMemoryUsed.setDescription('The value of sgiKbMemoryUsed indicates the total pre-allocated pool memory, in kilobytes, currently in use on the system.')
sgiKbMemoryAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 10), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiKbMemoryAvailable.setStatus('current')
if mibBuilder.loadTexts: sgiKbMemoryAvailable.setDescription('The value of sgiKbMemoryAvailable indicates the amount of free memory, in kilobytes, in the overall system that is not allocated to memory pools, but is available in case a memory pool needs to grow.')
sgiKbMemoryPoolAllocated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 11), Unsigned32()).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: sgiKbMemoryPoolAllocated.setStatus('current')
if mibBuilder.loadTexts: sgiKbMemoryPoolAllocated.setDescription('The value of sgiKbMemoryPoolAllocated indicates the total memory, in kilobytes, currently allocated in memory-pools on the system. This memory may or may not be currently in use, but is pre-allocated should the software need to use it.')
tmnxSysCpuMonTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12), )
if mibBuilder.loadTexts: tmnxSysCpuMonTable.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonTable.setDescription('tmnxSysCpuMonTable consists of the system level CPU monitoring statistics.')
tmnxSysCpuMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonSampleTime"))
if mibBuilder.loadTexts: tmnxSysCpuMonEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonEntry.setDescription('tmnxSysCpuMonEntry contains the system level CPU monitoring statistics over a specified sample-time.')
tmnxSysCpuMonSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 1), TmnxSysMonSampleTime())
if mibBuilder.loadTexts: tmnxSysCpuMonSampleTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonSampleTime.setDescription('The value of tmnxSysCpuMonSampleTime specifies the sample-time used to calculate the utilization results for the row.')
tmnxSysCpuMonCpuIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 2), TmnxSysMonUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonCpuIdle.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonCpuIdle.setDescription('The value of tmnxSysCpuMonCpuIdle indicates the overall percentage of CPU idleness over the specified sample-time.')
tmnxSysCpuMonBusyCoreUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 3), TmnxSysMonUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonBusyCoreUtil.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonBusyCoreUtil.setDescription('The value of tmnxSysCpuMonBusyCoreUtil indicates the utilization percentage of the busiest processor core over the specified sample-time. On single core CPUs, this is the overall system utilization percentage over the specified sample-time.')
tmnxSysCpuMonBusyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonBusyGroupName.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonBusyGroupName.setDescription('The value of tmnxSysCpuMonBusyGroupName indicates the name of the group that is running at the highest capacity utilization. Capacity utilization is the CPU utilization relative to the maximum CPU resources available to that group. A group is a set of related applications, services, tasks or protocol handlers that consumes some part of the system CPU resources. The capacity utilization of the busiest group is indicated by tmnxSysCpuMonBusyGroupUtil.')
tmnxSysCpuMonBusyGroupUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 1, 12, 1, 5), TmnxSysMonUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysCpuMonBusyGroupUtil.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCpuMonBusyGroupUtil.setDescription('The value of tmnxSysCpuMonBusyGroupUtil indicates the capacity utilization of the group that is running at the highest capacity utilization. Capacity utilization is the CPU utilization relative to the maximum CPU resources available to that group. A group is a set of related applications, services, tasks or protocol handlers that consumes some part of the system CPU resources. The name of the busiest group is indicated by tmnxSysCpuMonBusyGroupName.')
sysTimeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2))
stiDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 1), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiDateAndTime.setStatus('current')
if mibBuilder.loadTexts: stiDateAndTime.setDescription('The current date and time (in UTC) maintained in this managed system.')
stiActiveZone = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiActiveZone.setStatus('current')
if mibBuilder.loadTexts: stiActiveZone.setDescription('The time zone that is active in this managed system.')
stiHoursOffset = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-11, 12))).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiHoursOffset.setStatus('current')
if mibBuilder.loadTexts: stiHoursOffset.setDescription('The number of hours by which the time zone represented by stiActiveZone offsets from UTC (Coordinated Universal Time).')
stiMinutesOffset = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: stiMinutesOffset.setStatus('current')
if mibBuilder.loadTexts: stiMinutesOffset.setDescription("The number of minutes (in addition to the hours offset defined by stiHoursOffset) by which the time zone represented by stiActiveZone offsets from UTC (Coordinated Universal Time). This value is used when the time zone does not have an offset that is an integral number of hours. If the hour offset is defined as '12', the minute offset cannot be anything other than zero.")
stiZoneType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("user", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stiZoneType.setStatus('current')
if mibBuilder.loadTexts: stiZoneType.setDescription("stiZoneType will be 'system' if the zone defined by stiActiveZone is a system-defined zone. It will be 'user' if the zone has been defined by the user.")
stiSummerZoneTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6), )
if mibBuilder.loadTexts: stiSummerZoneTable.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneTable.setDescription('The stiSummerZoneTable has an entry for each summer time zone information.')
stiSummerZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1), ).setIndexNames((1, "TIMETRA-SYSTEM-MIB", "stiSummerZoneName"))
if mibBuilder.loadTexts: stiSummerZoneEntry.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneEntry.setDescription('Each row entry contains information about a summer time zone. This information can be used to either override the default summer (or daylight savings) time information for a system-defined time zone or define the summer time information for a user-defined time zone.')
stiSummerZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)))
if mibBuilder.loadTexts: stiSummerZoneName.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneName.setDescription('The name for a summer time zone. This name must be unique amongst the table entries. The summer time zone name should comprise only of uppercase letters A-Z and digits 0-9.')
stiSummerZoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneRowStatus.setDescription('The row status used to create and delete rows in this table.')
stiSummerZoneStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 3), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartDate.setStatus('obsolete')
if mibBuilder.loadTexts: stiSummerZoneStartDate.setDescription('The starting date and time when the summer time will take effect. This object was made obsolete in the 4.0 release.')
stiSummerZoneEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 4), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndDate.setStatus('obsolete')
if mibBuilder.loadTexts: stiSummerZoneEndDate.setDescription('The date and time when summer time will end. This object was made obsolete in the 4.0 release.')
stiSummerZoneOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(60)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneOffset.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneOffset.setDescription('The number of minutes that will be added to the time when summer time takes effect. The same number of minutes will be subtracted from the time when the summer time ends.')
stiSummerZoneStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone('sunday')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartDay.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneStartDay.setDescription('The starting day of the week when the summer time will take effect.')
stiSummerZoneStartWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4))).clone('first')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartWeek.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneStartWeek.setDescription('The starting week of the month when the summer time will take effect.')
stiSummerZoneStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11))).clone('january')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartMonth.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneStartMonth.setDescription('The starting month of the year when the summer time will take effect.')
stiSummerZoneStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartHour.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneStartHour.setDescription('The hour at which the summer time will take effect.')
stiSummerZoneStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneStartMinute.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneStartMinute.setDescription('The number of minutes after the hours defined by stiSummerZoneStartHour when the summer time will take effect.')
stiSummerZoneEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone('sunday')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndDay.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneEndDay.setDescription('The day of the week when the summer time setting will end.')
stiSummerZoneEndWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4))).clone('first')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndWeek.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneEndWeek.setDescription('The week of the month when the summer time setting will end.')
stiSummerZoneEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11))).clone('january')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndMonth.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneEndMonth.setDescription('The month of the year when the summer time setting will end.')
stiSummerZoneEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setUnits('hours').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndHour.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneEndHour.setDescription('The hour at which the summer time will stop taking effect.')
stiSummerZoneEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 2, 6, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: stiSummerZoneEndMinute.setStatus('current')
if mibBuilder.loadTexts: stiSummerZoneEndMinute.setDescription('The number of minutes after the hours defined by stiSummerZoneEndHour when the summer time will stop taking effect.')
sysSntpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3))
sntpState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("broadcast", 2))).clone('unicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpState.setStatus('current')
if mibBuilder.loadTexts: sntpState.setDescription("The mode for Simple Network Time Protocol (SNTP). 'Unicast' indicates that broadcast client is disabled. A value of 'broadcast' indicates that SNTP is listening to SNTP/NTP broadcast messages on interfaces with broadcast client enabled.")
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpServerTable.setDescription('The sntpServerEntry has an entry for each SNTP server for SNTP unicast client mode. SNTP can only receive the time from one of these SNTP servers. The table can have upto a maximum of 3 entries.')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "sntpServerAddress"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpServerEntry.setDescription('Each row entry contains information about an SNTP server.')
sntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: sntpServerAddress.setStatus('current')
if mibBuilder.loadTexts: sntpServerAddress.setDescription('The IP address of the SNTP server.')
sntpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: sntpServerRowStatus.setDescription('The row status used to create and delete rows in this table.')
sntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerVersion.setStatus('current')
if mibBuilder.loadTexts: sntpServerVersion.setDescription('The SNTP Version supported by this server.')
sntpServerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("preferred", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerPreference.setStatus('current')
if mibBuilder.loadTexts: sntpServerPreference.setDescription('The preference value for this SNTP server. When more then one time-server is configured it may be desirable that one server have preference over others. The value of sntpServerPreference for that server will be set to preferred(2). Only one server in the table can be a preferred server')
sntpServerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024)).clone(64)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerInterval.setStatus('current')
if mibBuilder.loadTexts: sntpServerInterval.setDescription('The frequency at which this server is queried.')
sntpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3))).clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpAdminState.setStatus('current')
if mibBuilder.loadTexts: sntpAdminState.setDescription('The desired administrative state for SNTP.')
sntpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 3, 4), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpOperStatus.setStatus('current')
if mibBuilder.loadTexts: sntpOperStatus.setDescription('The value of sntpOperStatus indicates the current operational status of SNTP.')
sysSyncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4))
ssiSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 15), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveConfig.setStatus('current')
if mibBuilder.loadTexts: ssiSaveConfig.setDescription("Setting this action variable to 'doAction' causes the current running configuration information to be saved to the location specified by ssiSaveConfigDest. If no location is specified by ssiSaveConfigDest, the primary configuration file pointed to in the boot options file (bof) will be backed up and a new primary configuration file will be created with the current running configuration information. If ssiSaveConfigDetail has a value of 'true', default configuration values will be included in the saved configuration information. A corresponding persistent SNMP index file is created regardless of the setting of the persistence switch in the bof.")
ssiSyncMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 16), TmnxSsiSyncMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncMode.setStatus('current')
if mibBuilder.loadTexts: ssiSyncMode.setDescription('The value of ssiSyncMode specifies the type of synchronization operation to perform between the primary and secondary CPMs after a change has been made to the configuration files or the boot environment information contained in the boot options file (bof).')
ssiSyncForce = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 17), TmnxSsiSyncMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncForce.setStatus('current')
if mibBuilder.loadTexts: ssiSyncForce.setDescription("The value of ssiSyncForce specifies the type of synchronization operation to perform when an SNMP set is made to this object. 'config' synchronizes only configuration files. 'bootEnv' synchronizes all files required to boot the system. The result of a read operation on this object is always 'none'.")
ssiSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("configOnly", 1), ("bootEnv", 2), ("configFail", 3), ("bootEnvFail", 4), ("configInProgress", 5), ("bootEnvInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncStatus.setStatus('current')
if mibBuilder.loadTexts: ssiSyncStatus.setDescription('The value of ssiSyncStatus indicates the results of the last synchronization operation between the primary and secondary CPMs.')
ssiSyncConfigLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncConfigLastTime.setStatus('current')
if mibBuilder.loadTexts: ssiSyncConfigLastTime.setDescription('The value of ssiSyncConfigLastTime is the timestamp of the last successful synchronization of the configuration files.')
ssiSyncBootEnvLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncBootEnvLastTime.setStatus('current')
if mibBuilder.loadTexts: ssiSyncBootEnvLastTime.setDescription('The value of ssiSyncBootEnvLastTime is the timestamp of the last successful synchronization of the boot environment files.')
ssiConfigMaxBackupRevisions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiConfigMaxBackupRevisions.setStatus('current')
if mibBuilder.loadTexts: ssiConfigMaxBackupRevisions.setDescription('The value of ssiConfigMaxBackupRevisions is the maximum number of backup revisions maintained for a configuration file. This value also applies to the number of revisions maintained for the BOF file.')
ssiSaveConfigResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSaveConfigResult.setStatus('current')
if mibBuilder.loadTexts: ssiSaveConfigResult.setDescription('The value of ssiSaveConfigResult represents the result of the last ssiSaveConfig action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
ssiSaveBof = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 23), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveBof.setStatus('current')
if mibBuilder.loadTexts: ssiSaveBof.setDescription("Setting ssiSaveBof action variable to 'doAction' causes the existing BOF to be backed up and a new BOF file to be created with the current boot options information.")
ssiSaveBofResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSaveBofResult.setStatus('current')
if mibBuilder.loadTexts: ssiSaveBofResult.setDescription('The value of ssiSaveBofResult represents the result of the last ssiSaveBof action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
ssiSaveConfigDest = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveConfigDest.setStatus('current')
if mibBuilder.loadTexts: ssiSaveConfigDest.setDescription("The value of ssiSaveConfigDest specifies the destination filepath or file-URL where the current running configuration information will be saved when ssiSaveConfig is set to 'doAction'. If ssiSaveConfigDest is set to the empty string, ''H, the primary configuration file pointed to in the boot options file (bof) will be backed up and a new primary configuration file will be created with the current running configuration information. A corresponding persistent SNMP index file is created regardless of the setting of the persistence switch in the bof.")
ssiSaveConfigDetail = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSaveConfigDetail.setStatus('current')
if mibBuilder.loadTexts: ssiSaveConfigDetail.setDescription("When ssiSaveConfigDetail has a value of 'true', the default configuration values will also be included in the current running configuration information that will be saved when ssiSaveConfig is set to 'doAction'. When ssiSaveConfigDetail has a value of 'false', only non-default configuration values are saved. ")
ssiRedFailoverTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiRedFailoverTime.setStatus('current')
if mibBuilder.loadTexts: ssiRedFailoverTime.setDescription('The value of ssiRedFailoverTime is the timestamp when the last redundancy failover occurred causing a switchover from active to standby CPM. If there is no redundant CPM card in this system or no failover has occurred since the system last booted, ssiRedFailoverTime will always return 0.')
ssiRedFailoverReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiRedFailoverReason.setStatus('current')
if mibBuilder.loadTexts: ssiRedFailoverReason.setDescription("The value of ssiRedFailoverReason is a text string giving an explanation of the cause of the last redundancy failover. If no failover has occurred, the empty string, ''H, will be returned.")
ssiSyncRollbackLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncRollbackLastTime.setStatus('current')
if mibBuilder.loadTexts: ssiSyncRollbackLastTime.setDescription('The value of ssiSyncRollbackLastTime is the timestamp of the last successful synchronization of the rollback files.')
ssiSyncRollbackMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 30), TmnxSsiSyncRollbackMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncRollbackMode.setStatus('current')
if mibBuilder.loadTexts: ssiSyncRollbackMode.setDescription('The value of ssiSyncRollbackMode specifies the type of synchronization operation to perform between the primary and secondary CPMs after a change has been made to the rollback files.')
ssiSyncRollbackForce = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 31), TmnxSsiSyncRollbackMode().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncRollbackForce.setStatus('current')
if mibBuilder.loadTexts: ssiSyncRollbackForce.setDescription("The value of ssiSyncRollbackForce specifies the type of synchronization operation to perform when an SNMP set is made to this object. 'rollbackSingle' synchronizes only the rollback file that recently changed. 'rollbackAll' synchronizes all rollback files. The result of a read operation on this object is always 'none'.")
ssiSyncRollbackStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("rollbackFail", 1), ("rollbackInProgress", 2), ("rollbackSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncRollbackStatus.setStatus('current')
if mibBuilder.loadTexts: ssiSyncRollbackStatus.setDescription('The value of ssiSyncRollbackStatus indicates the results of the last rollback synchronization operation between the primary and secondary CPMs.')
ssiSyncCertLastTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncCertLastTime.setStatus('current')
if mibBuilder.loadTexts: ssiSyncCertLastTime.setDescription('The value of ssiSyncCertLastTime is the timestamp of the last successful synchronization of the certificate files.')
ssiSyncCertMode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncCertMode.setStatus('current')
if mibBuilder.loadTexts: ssiSyncCertMode.setDescription('The value of ssiSyncCertMode specifies whether to synchronize certificate files between the primary and secondary CPMs.')
ssiSyncCertForce = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 35), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssiSyncCertForce.setStatus('current')
if mibBuilder.loadTexts: ssiSyncCertForce.setDescription("The value of ssiSyncCertForce specifies to perform action to synchronize certificate files between the primary and secondary CPMs when an SNMP set is made to this object. The value of ssiSyncCertForce will always be returned as 'notApplicable'.")
ssiSyncCertStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("fail", 1), ("inProgress", 2), ("success", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssiSyncCertStatus.setStatus('current')
if mibBuilder.loadTexts: ssiSyncCertStatus.setDescription('The value of ssiSyncCertStatus indicates the results of the last certificate synchronization operation between the primary and secondary CPMs.')
sysBootInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5))
sbiConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configRead", 1), ("configOK", 2), ("defaultBooted", 3), ("bootConfigFailed", 4), ("bootRestoreFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiConfigStatus.setStatus('current')
if mibBuilder.loadTexts: sbiConfigStatus.setDescription('The value of sbiConfigStatus indicates the result of the last attempt to execute the configuration file upon reboot of the system. configRead (1) - The configuration file is being read. configOK (2) - The configuration file was successfully executed. defaultBooted (3) - There was no configuration file and the system booted using a minimal default configuration. bootConfigFailed (4) - An error occurred while the configuration file was being executed. The system configuration is incomplete. bootRestoreFailed (5) - An error occurred while the restoration was being performed. The system configuration is incomplete.')
sbiPersistStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("persistOK", 1), ("noPersistFile", 2), ("persistMismatch", 3), ("persistIndexFailure", 4), ("persistDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiPersistStatus.setStatus('current')
if mibBuilder.loadTexts: sbiPersistStatus.setDescription("The value of sbiPersistStatus indicates the result of the last attempt to rebuild the SNMP persistent index database upon reboot of the system. persistOK (1) - The persistent index database was successfully created. Persistent SNMP managed objects were recreated with the same SNMP indexes they had prior to the system reboot. noPersistFile (2) - There was no persistent index file with the same pathname as the configuration file. persistMismatch (3) -The headers in the persistent index file and the configuration file with the same name do not match. persistIndexFailure (4) - An error occurred while creating the persistent index database. persistDisabled (5) - The system was administratively reconfigured without maintaining persistent SNMP index values because sbiPersistIndex has a value of 'false'. If sbiConfigStatus has a value of 'configOK' and sbiPersistStatus has any value other than 'persistOK', the system was reconfigured without maintaining persistent SNMP index values. Unless sbiPersistIndex has a value of 'false', sbiSnmpdOperStatus returns 'disabled' and the SNMP daemon will not receive SNMP requests until sbiSnmpdAdminStatus variable has been set to 'inService'.")
sbiPersistIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiPersistIndex.setStatus('current')
if mibBuilder.loadTexts: sbiPersistIndex.setDescription("When sbiPersistIndex has a value of 'true', the SNMP persistent index database was rebuilt when the system was rebooted. If there was an error during the processing of the configuration file the system may have been reconfigured without persistent SNMP indexes and the SNMP daemon will be suspended until it is manually enabled by setting sbiSnmpdAdminStatus to 'inService. When sbiPersistIndex has a value of 'false' the system was reconfigured without maintaining persistent SNMP index values and the SNMP daemon was enabled.")
sbiSnmpdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 4), TmnxAdminState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSnmpdAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sbiSnmpdAdminStatus.setDescription("The value of sbiSnmpdAdminStatus is the desired administrative state for the SNMP daemon. When sbiSnmpdAdminStatus is set to 'inService' the SNMP daemon will begin receiving SNMP requests from external SNMP managers. When sbiSnmpdAdminStatus is set to 'outOfService' the SNMP daemon is suspended and will no longer receive SNMP requests from external SNMP managers.")
sbiSnmpdOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 5), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiSnmpdOperStatus.setStatus('current')
if mibBuilder.loadTexts: sbiSnmpdOperStatus.setDescription("When sbiSnmpdOperStatus has a value of 'inService', the SNMP daemon will receive SNMP requests from external SNMP managers. When sbiSnmpdOperStatus has a value of 'outOfService', the SNMP daemon is suspended and will not receive SNMP requests from external SNMP managers.")
sbiSnmpdMaxPktSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(484, 9216)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSnmpdMaxPktSize.setStatus('current')
if mibBuilder.loadTexts: sbiSnmpdMaxPktSize.setDescription('The value of sbiSnmpdMaxPktSize indicates the maximum length in octets of an SNMP message which the SNMP daemon can send or receive and process.')
sbiSnmpdPortNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 7), TTcpUdpPort().clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSnmpdPortNum.setStatus('current')
if mibBuilder.loadTexts: sbiSnmpdPortNum.setDescription('The value of sbiSnmpdPortNum indicates the UDP port to send and receive SNMP messages.')
sbiBootConfigOKScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 8), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiBootConfigOKScript.setStatus('current')
if mibBuilder.loadTexts: sbiBootConfigOKScript.setDescription("The value of sbiBootConfigOKScript specifies the location and name of the CLI script file executed following successful completion of the boot-up configuration file execution. I.e. sbiPersistStatus has a value of 'configOK'. When this object has the empty string value, ''H, no CLI script file is executed.")
sbiConfigOKScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiConfigOKScriptStatus.setStatus('current')
if mibBuilder.loadTexts: sbiConfigOKScriptStatus.setDescription('The value of sbiConfigOKScriptStatus indicates the results of executing the CLI script file specified in sbiBootConfigOKScript.')
sbiBootConfigFailScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 10), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiBootConfigFailScript.setStatus('current')
if mibBuilder.loadTexts: sbiBootConfigFailScript.setDescription("The value of sbiBootConfigFailScript specifies the location and name of the CLI script file executed following failure of the boot-up configuration file execution. I.e. sbiPersistStatus has a value other than 'configOK'. When this object has the empty string value, ''H, no CLI script file is executed.")
sbiConfigFailScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiConfigFailScriptStatus.setStatus('current')
if mibBuilder.loadTexts: sbiConfigFailScriptStatus.setDescription('The value of sbiConfigFailScriptStatus indicates the results of executing the CLI script file specified in sbiBootConfigFailScript.')
sbiRedSwitchoverScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 12), DisplayString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiRedSwitchoverScript.setStatus('current')
if mibBuilder.loadTexts: sbiRedSwitchoverScript.setDescription("The value of sbiRedSwitchoverScript specifies the location and name of the CLI script file executed following a redundancy switchover from the previously active CPM card. A switchover can happen because of a fatal failure or by manual action. This CLI script file can contain commands for environment settings, debug and mirroring settings, and other commands not maintained by the configuration redundancy. When this object has the empty string value, ''H, no CLI script file is executed.")
sbiRedSwitchoverScriptStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbiRedSwitchoverScriptStatus.setStatus('current')
if mibBuilder.loadTexts: sbiRedSwitchoverScriptStatus.setDescription('The value of sbiRedSwitchoverScriptStatus indicates the results of executing the CLI script file specified in sbiRedSwitchoverScript.')
sysRadiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6))
radiusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusOperStatus.setStatus('current')
if mibBuilder.loadTexts: radiusOperStatus.setDescription("The radiusOperStatus will have a value of 'up' if any one of the RADIUS servers in the radiusServerTable has the radiusServerOperStatus value of 'up'. It will have a value of 'down' if all the RADIUS servers in the radiusServerTable have the radiusServerOperStatus value of 'down'.")
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
if mibBuilder.loadTexts: radiusServerTable.setDescription('The radiusServerEntry has an entry for each RADIUS server. The table can have up to a maximum of 5 entries.')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: radiusServerEntry.setDescription('Each row entry contains information about a RADIUS server.')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: radiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: radiusServerIndex.setDescription('The unique value which identifies a specific radius server.')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: radiusServerAddress.setDescription('The IP address of the RADIUS server. This object was made obsolete in the 5.0 release.')
radiusServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: radiusServerOperStatus.setDescription('Current status of the RADIUS server.')
radiusServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: radiusServerInetAddressType.setDescription("The value of radiusServerInetAddressType indicates the address type of radiusServerInetAddress address. The value of radiusServerInetAddressType can be either of InetAddressType - 'ipv4' or InetAddressType - 'ipv6' or InetAddressType - 'ipv6z'.")
radiusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 6, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: radiusServerInetAddress.setDescription('The value of radiusServerInetAddress indicates the address of the Radius server.')
tmnxSysNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7))
tmnxNotifyRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 1), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyRow.setStatus('current')
if mibBuilder.loadTexts: tmnxNotifyRow.setDescription('tmnxNotifyRow is used by the configuration modify, create and delete traps. tmnxNotifyRow specifies the OID of the MIB table entry that was changed.')
tmnxNotifyRowAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 2), TmnxAdminState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyRowAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxNotifyRowAdminState.setDescription('tmnxNotifyRowAdminState is used by the state change notification to specify the administrative state of the MIB table entry reported in the notification.')
tmnxNotifyRowOperState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 3), TmnxOperState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyRowOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxNotifyRowOperState.setDescription('tmnxNotifyRowOperState is used by the state change notification to specify the operational state of the MIB table entry reported in the notification.')
tmnxMemoryModule = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 4), TNamedItem()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxMemoryModule.setStatus('current')
if mibBuilder.loadTexts: tmnxMemoryModule.setDescription('tmnxMemoryModule is used by the module malloc failed notification to specify the memory module for which the trap is generated.')
tmnxModuleMallocSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 5), Unsigned32()).setUnits('bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxModuleMallocSize.setStatus('current')
if mibBuilder.loadTexts: tmnxModuleMallocSize.setDescription('tmnxModuleMallocSize is used by the module malloc failed notification to specify the memory size (in bytes) requested in the failed malloc call.')
tmnxDroppedTrapID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDroppedTrapID.setStatus('current')
if mibBuilder.loadTexts: tmnxDroppedTrapID.setDescription('tmnxDroppedTrapID is used by the trap dropped notification to specify the NOTIFICATION-TYPE object identifier of the dropped trap.')
tmnxTrapDroppedReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("frequencyExceeded", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxTrapDroppedReasonCode.setStatus('current')
if mibBuilder.loadTexts: tmnxTrapDroppedReasonCode.setDescription('tmnxTrapDroppedReasonCode is used by the trap dropped notification to specify the reason for which a trap is dropped.')
tmnxTrapDroppedEntryID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 8), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxTrapDroppedEntryID.setStatus('current')
if mibBuilder.loadTexts: tmnxTrapDroppedEntryID.setDescription('tmnxTrapDroppedEntryID is used by the trap dropped notification to specify the table entry associated with the dropped trap.')
tmnxNotifyEntryOID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 9), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyEntryOID.setStatus('current')
if mibBuilder.loadTexts: tmnxNotifyEntryOID.setDescription('tmnxNotifyEntryOID is used by the configuration modify, create and delete traps. tmnxNotifyEntryOID specifies the OID of the MIB table that was changed.')
tmnxSnmpdErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSnmpdErrorMsg.setStatus('current')
if mibBuilder.loadTexts: tmnxSnmpdErrorMsg.setDescription('tmnxSnmpdErrorMsg is used by the tmnxSnmpdError notification to indicate the type of SNMP daemon error detected.')
tmnxPersistencyClient = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistencyClient.setStatus('current')
if mibBuilder.loadTexts: tmnxPersistencyClient.setDescription('tmnxPersistencyClient is used by the persistencyClosedAlarmRaised, persistencyClosedAlarmCleared, persistencyFileSysThresRaised and persistencyFileSysThresCleared notification to indicate the affected persistent application.')
tmnxPersistencyFileLocator = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistencyFileLocator.setStatus('current')
if mibBuilder.loadTexts: tmnxPersistencyFileLocator.setDescription('tmnxPersistencyFileLocator is used by the persistencyClosedAlarmRaised, persistencyClosedAlarmCleared, persistencyFileSysThresRaised and persistencyFileSysThresCleared notification to indicate the affected file used to store persistence data.')
tmnxPersistencyNotifyMsg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistencyNotifyMsg.setStatus('current')
if mibBuilder.loadTexts: tmnxPersistencyNotifyMsg.setDescription('tmnxPersistencyNotifyMsg is used by the persistencyClosedAlarmRaised persistencyClosedAlarmCleared, persistencyEventReport, persistencyFileSysThresRaised and persistencyFileSysThresCleared notification to provide additional information related to the event that occurred.')
tmnxPersistenceAffectedCpm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPersistenceAffectedCpm.setStatus('current')
if mibBuilder.loadTexts: tmnxPersistenceAffectedCpm.setDescription('tmnxPersistenceAffectedCpm is used by the persistencyClosedAlarmRaised, persistencyClosedAlarmCleared, persistencyFileSysThresRaised and persistencyFileSysThresCleared notification to indicate the affected CPM.')
tmnxSysTimeSetBy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ntp", 1), ("sntp", 2), ("snmp", 3), ("manually", 4), ("rtc", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysTimeSetBy.setStatus('current')
if mibBuilder.loadTexts: tmnxSysTimeSetBy.setDescription('tmnxSysTimeSetBy is used by tmnxSysTimeSetBy notification to indicate who set the time.')
tmnxFtpFailureMsg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFtpFailureMsg.setStatus('current')
if mibBuilder.loadTexts: tmnxFtpFailureMsg.setDescription('tmnxFtpFailureMsg is used by tmnxFtpClientFailure notification to indicate FTP error.')
tmnxFtpFailureDestAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 17), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFtpFailureDestAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxFtpFailureDestAddressType.setDescription('tmnxFtpFailureDestAddressType is used by tmnxFtpClientFailure notification to indicate the IP address type of the remote host.')
tmnxFtpFailureDestAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 18), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFtpFailureDestAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxFtpFailureDestAddress.setDescription('The value of tmnxFtpFailureDestAddress indicates the IP address of the remote host to which an ftp operation is being attempted on. The value of tmnxFtpFailureDestAddress is used by tmnxFtpClientFailure notification.')
tmnxNotifyObjectName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxNotifyObjectName.setStatus('current')
if mibBuilder.loadTexts: tmnxNotifyObjectName.setDescription('tmnxNotifyObjectName is used by the configuration modify, create, delete and state change traps. tmnxNotifyObjectName specifies the human readable name of the OID instance of the MIB table entry that was changed.')
tmnxSyncFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSyncFailureReason.setStatus('current')
if mibBuilder.loadTexts: tmnxSyncFailureReason.setDescription('tmnxSyncFailureReason is used by the ssiSyncConfigFailed, ssiSyncBootEnvFailed, and ssiSyncRollbackFailed traps to specify the reason for synchronization failure.')
tmnxSysExecScript = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysExecScript.setStatus('current')
if mibBuilder.loadTexts: tmnxSysExecScript.setDescription("The value of tmnxSysExecScript specifies the location and name of the CLI command script file executed by a SROS CLI 'exec' command. It is used by the tmnxSysExecStarted and tmnxSysExecFinished notifications.")
tmnxSysExecResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysExecResult.setStatus('current')
if mibBuilder.loadTexts: tmnxSysExecResult.setDescription('The value of tmnxSysExecResult indicates the results of executing the CLI script file specified in tmnxSysExecScript. It is used by the tmnxSysExecFinished notification.')
tmnxSysRollbackFileType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rollback", 1), ("rescue", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysRollbackFileType.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileType.setDescription('tmnxSysRollbackFileType is used by tmnxSysRollbackStarted, tmnxSysRollbackSaveStarted, tmnxSysRollbackDeleteStarted, tmnxSysRollbackStatusChange, tmnxSysRollbackSaveStatusChange, and tmnxSysRollbackFileDeleteStatus notifications to indicate the type of file involved in a rollback operation.')
tmnxSysFileErrorType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 7, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSysFileErrorType.setStatus('current')
if mibBuilder.loadTexts: tmnxSysFileErrorType.setDescription('tmnxSysFileErrorType is used by tmnxSysNvsysFileError notification to indicate the type of file error occurred.')
sysLoginControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8))
slcFtpInboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcFtpInboundMaxSessions.setStatus('current')
if mibBuilder.loadTexts: slcFtpInboundMaxSessions.setDescription('The maximum number of concurrent inbound FTP sessions permitted.')
slcTelnetInboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetInboundMaxSessions.setStatus('current')
if mibBuilder.loadTexts: slcTelnetInboundMaxSessions.setDescription('The value of slcTelnetInboundMaxSessions specifies the maximum number of concurrent inbound telnet sessions permitted.')
slcTelnetOutboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetOutboundMaxSessions.setStatus('current')
if mibBuilder.loadTexts: slcTelnetOutboundMaxSessions.setDescription('The value of slcTelnetOutboundMaxSessions specifies the maximum number of concurrent outbound telnet sessions permitted.')
slcPreLoginMessage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcPreLoginMessage.setStatus('current')
if mibBuilder.loadTexts: slcPreLoginMessage.setDescription('The message to be displayed prior to the login prompt of an inbound FTP or telnet session.')
slcPreLoginMessageInclName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcPreLoginMessageInclName.setStatus('current')
if mibBuilder.loadTexts: slcPreLoginMessageInclName.setDescription("If the value of slcPreLoginMessageInclName is set to 'TRUE', the slcPreLoginMessage which is displayed prior to the login prompt will contain the system name.")
slcMessageOfTheDay = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcMessageOfTheDay.setStatus('current')
if mibBuilder.loadTexts: slcMessageOfTheDay.setDescription("The message-of-the-day text will be displayed when the user successfully authenticates himself for an inbound FTP, telnet or console session. If slcMessageOfTheDayType is set to 'URL', then slcMessageOfTheDay should be of the form: 'url-prefix:source-url'.")
slcMessageOfTheDayType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("motd-type-none", 0), ("motd-type-url", 1), ("motd-type-text", 2))).clone('motd-type-none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcMessageOfTheDayType.setStatus('current')
if mibBuilder.loadTexts: slcMessageOfTheDayType.setDescription("The type of slcMessageOfTheDay. If the value of slcMessageOfTheDayType is set to 'motd-type-none', then message of the day will not be displayed. If it is set to 'motd-type-url', then the message is fetched from the URL.")
slcLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcLoginBanner.setStatus('current')
if mibBuilder.loadTexts: slcLoginBanner.setDescription("If the value of slcLoginBanner is set to 'true', the login banner containing Alcatel-Lucent copyright and version information is displayed prior to the login prompt. If the value is set to 'false', the login banner is not displayed.")
slcLoginExponentialBackOff = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcLoginExponentialBackOff.setStatus('current')
if mibBuilder.loadTexts: slcLoginExponentialBackOff.setDescription("The value of slcLoginExponentialBackOff specifies if exponential-backoff of the login prompt is enabled. Exponential-backoff is used to deter dictionary attacks. A value of 'true' specifies that exponential-backoff is enabled, while a value of 'false' indicates that exponential-backoff is disabled.")
slcTelnetGracefulShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetGracefulShutdown.setStatus('current')
if mibBuilder.loadTexts: slcTelnetGracefulShutdown.setDescription("The value of slcTelnetGracefulShutdown specifies if graceful shutdown is enabled. A value of 'true' specifies that telnet sessions are closed gracefully by using a TCP FIN/ACK handshake. A value of 'false' indicates that telnet sessions are disconnected by sending a RST (reset) TCP packet.")
slcSSHGracefulShutdown = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHGracefulShutdown.setStatus('current')
if mibBuilder.loadTexts: slcSSHGracefulShutdown.setDescription("The value of slcSSHGracefulShutdown specifies if graceful shutdown is enabled. A value of 'true' specifies that SSH sessions are closed gracefully by using a TCP FIN/ACK handshake. A value of 'false' indicates that SSH sessions are disconnected by sending a RST (reset) TCP packet.")
slcTelnetMinTTLValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcTelnetMinTTLValue.setStatus('current')
if mibBuilder.loadTexts: slcTelnetMinTTLValue.setDescription("The value of slcTelnetMinTTLValue specifies the minimum TTL value for an incoming packet. This object can only be set if the value of tmnxCpmPerPeerQueuing is 'true (1)'. This value is applied after restarting the Telnet server. If slcTelnetMinTTLValue is set to zero (0), the TTL Security feature is disabled.")
slcSSHMinTTLValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHMinTTLValue.setStatus('current')
if mibBuilder.loadTexts: slcSSHMinTTLValue.setDescription("The value of slcSSHMinTTLValue specifies the minimum TTL value for an incoming packet. This object can only be set if the value of tmnxCpmPerPeerQueuing is 'true (1)'. This value is applied after restarting the SSH server. If slcSSHMinTTLValue is set to zero (0), the TTL Security feature is disabled.")
slcSSHInboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHInboundMaxSessions.setStatus('current')
if mibBuilder.loadTexts: slcSSHInboundMaxSessions.setDescription('The value of slcSSHInboundMaxSessions specifies the maximum number of concurrent inbound SSH sessions permitted.')
slcSSHOutboundMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 8, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slcSSHOutboundMaxSessions.setStatus('current')
if mibBuilder.loadTexts: slcSSHOutboundMaxSessions.setDescription('The value of slcSSHOutboundMaxSessions specifies the maximum number of concurrent outbound SSH sessions permitted.')
sysLACPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 9))
sysLACPSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLACPSystemPriority.setStatus('current')
if mibBuilder.loadTexts: sysLACPSystemPriority.setDescription('sysLACPSystemPriority is the Link Aggregation Control Protocol (LACP) system priority which is combined with the system MAC address to make up a unique system ID that is used by LACP in communications with LACP peer systems on Link Aggregation (LAG) ports.')
sysTacplusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10))
tacplusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacplusOperStatus.setStatus('current')
if mibBuilder.loadTexts: tacplusOperStatus.setDescription("The tacplusOperStatus will have a value of 'up' if any one of the TACACS+ servers in the tacplusServerTable has the tacplusServerOperStatus value of 'up'. It will have a value of 'down' if all the TACACS+ servers in the tacplusServerTable have the tacplusServerOperStatus value of 'down'.")
tacplusServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2), )
if mibBuilder.loadTexts: tacplusServerTable.setStatus('current')
if mibBuilder.loadTexts: tacplusServerTable.setDescription('The tacplusServerEntry has an entry for each TACACS+ server. The table can have up to a maximum of 5 entries.')
tacplusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "tacplusServerIndex"))
if mibBuilder.loadTexts: tacplusServerEntry.setStatus('current')
if mibBuilder.loadTexts: tacplusServerEntry.setDescription('Each row entry contains information about a TACACS+ server.')
tacplusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: tacplusServerIndex.setStatus('current')
if mibBuilder.loadTexts: tacplusServerIndex.setDescription('The unique value which identifies a specific TACACS+ server.')
tacplusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacplusServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: tacplusServerAddress.setDescription('The IP address of the TACACS+ server. This object was made obsolete in the 5.0 release.')
tacplusServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacplusServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: tacplusServerOperStatus.setDescription('Current status of the TACACS+ server.')
tacPlusServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacPlusServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: tacPlusServerInetAddressType.setDescription("The value of tacPlusServerInetAddressType indicates the address type of tacPlusServerInetAddress address. The value of tacPlusServerInetAddressType can be either of InetAddressType - 'ipv4' or InetAddressType - 'ipv6' or InetAddressType - 'ipv6z'.")
tacPlusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 10, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacPlusServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: tacPlusServerInetAddress.setDescription('The value of tacPlusServerInetAddress indicates the address of the Tacplus server.')
stiDateAndTimeChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 1)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTime"))
if mibBuilder.loadTexts: stiDateAndTimeChanged.setStatus('current')
if mibBuilder.loadTexts: stiDateAndTimeChanged.setDescription('The date and time changed event is generated when the time on the system is modified either by explicit setting or automatic update in case of SNTP.')
ssiSaveConfigSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 2))
if mibBuilder.loadTexts: ssiSaveConfigSucceeded.setStatus('current')
if mibBuilder.loadTexts: ssiSaveConfigSucceeded.setDescription('The save config succeeded event is generated when the saving of configuration finishes without errors.')
ssiSaveConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 3))
if mibBuilder.loadTexts: ssiSaveConfigFailed.setStatus('current')
if mibBuilder.loadTexts: ssiSaveConfigFailed.setDescription('The save config failed event is generated when the saving of configuration is stopped due to errors.')
sbiBootConfig = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 4)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"))
if mibBuilder.loadTexts: sbiBootConfig.setStatus('current')
if mibBuilder.loadTexts: sbiBootConfig.setDescription('The sbiBootConfig notification is generated upon completion of the configuration phase following a system reboot.')
sbiBootSnmpd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 5)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"))
if mibBuilder.loadTexts: sbiBootSnmpd.setStatus('current')
if mibBuilder.loadTexts: sbiBootSnmpd.setDescription('The sbiBootSnmpd notification is generated upon completion of the SNMP daemon initialization following a system reboot. Some system configuration and initialization errors may result in the SNMP daemon being suspended.')
radiusServerOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 6)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"))
if mibBuilder.loadTexts: radiusServerOperStatusChange.setStatus('obsolete')
if mibBuilder.loadTexts: radiusServerOperStatusChange.setDescription("The radiusServerOperStatusChange notification is generated when the operational status of a RADIUS server has transitioned either from 'up' to 'down' or from 'down' to 'up'. This object was made obsolete in the 5.0 release.")
radiusOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 7)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusOperStatus"))
if mibBuilder.loadTexts: radiusOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: radiusOperStatusChange.setDescription("The radiusOperStatusChange notification is generated when the radiusOperStatus has transitioned either from 'up' to 'down' or from 'down' to 'up'")
tmnxConfigModify = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 8)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxConfigModify.setStatus('current')
if mibBuilder.loadTexts: tmnxConfigModify.setDescription('A tmnxConfigModify notification is generated when a configuration attribute associated with a row entry in a MIB table is modified. It can be used by the NMS to trigger maintenance polls of the configuration information.')
tmnxConfigCreate = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 9)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxConfigCreate.setStatus('current')
if mibBuilder.loadTexts: tmnxConfigCreate.setDescription('A tmnxConfigCreate notification is generated when a new row entry is created in one of the MIB tables. It can be used by the NMS to trigger maintenance polls of the configuration information.')
tmnxConfigDelete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 10)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxConfigDelete.setStatus('current')
if mibBuilder.loadTexts: tmnxConfigDelete.setDescription('A tmnxConfigDelete notification is generated when an existing row entry in one of the MIB tables is deleted. It can be used by the NMS to trigger maintenance polls of the configuration information.')
tmnxStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 11)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowAdminState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowOperState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"))
if mibBuilder.loadTexts: tmnxStateChange.setStatus('current')
if mibBuilder.loadTexts: tmnxStateChange.setDescription('A tmnxStateChange notification is generated when there is a change in either the administrative or operational state of a MIB table entry.')
tmnxModuleMallocFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 12)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxMemoryModule"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocSize"))
if mibBuilder.loadTexts: tmnxModuleMallocFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxModuleMallocFailed.setDescription('A tmnxModuleMallocFailed notification is generated when a request to allocate memory from a particular module fails because the memory module is short on memory and cannot support the size that was requested.')
tmnxTrapDropped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 13)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxDroppedTrapID"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedReasonCode"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedEntryID"))
if mibBuilder.loadTexts: tmnxTrapDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxTrapDropped.setDescription('A tmnxTrapDropped notification is generated when a trap is dropped for the reason specified by the reason code. The tmnxTrapDroppedEntryID identifies the table entry associated with the dropped trap.')
ssiSyncConfigOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 14))
if mibBuilder.loadTexts: ssiSyncConfigOK.setStatus('current')
if mibBuilder.loadTexts: ssiSyncConfigOK.setDescription('The ssiSyncConfigOK event is generated when the synchronization of configuration files between the primary and secondary CPMs finishes without errors.')
ssiSyncConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 15)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncConfigFailed.setStatus('current')
if mibBuilder.loadTexts: ssiSyncConfigFailed.setDescription('The ssiSyncConfigFailed event is generated when the synchronization of configuration files between the primary and secondary CPMs is stopped due to errors. The tmnxSyncFailureReason will state reason for failure.')
ssiSyncBootEnvOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 16))
if mibBuilder.loadTexts: ssiSyncBootEnvOK.setStatus('current')
if mibBuilder.loadTexts: ssiSyncBootEnvOK.setDescription('The ssiSyncBootEnvOK event is generated when the synchronization of boot environment files between the primary and secondary CPMs finishes without errors.')
ssiSyncBootEnvFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 17)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncBootEnvFailed.setStatus('current')
if mibBuilder.loadTexts: ssiSyncBootEnvFailed.setDescription('The ssiSyncBootEnvFailed event is generated when the synchronization of boot environment files between the primary and secondary CPMs is stopped due to errors. The tmnxSyncFailureReason will state reason for failure.')
sntpTimeDiffExceedsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 18)).setObjects(("TIMETRA-SYSTEM-MIB", "sntpAdminState"))
if mibBuilder.loadTexts: sntpTimeDiffExceedsThreshold.setStatus('current')
if mibBuilder.loadTexts: sntpTimeDiffExceedsThreshold.setDescription('The sntpTimeDiffExceedsThreshold event is generated when the time differential between the system and the SNTP server is more than 10 seconds. In this case the system clock is not automatically adjusted.')
tacplusServerOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 19)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"))
if mibBuilder.loadTexts: tacplusServerOperStatusChange.setStatus('obsolete')
if mibBuilder.loadTexts: tacplusServerOperStatusChange.setDescription("The tacplusServerOperStatusChange notification is generated when the operational status of a TACACS+ server has transitioned either from 'up' to 'down' or from 'down' to 'up'. This object was made obsolete in the 5.0 release.")
tacplusOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 20)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusOperStatus"))
if mibBuilder.loadTexts: tacplusOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: tacplusOperStatusChange.setDescription("The tacplusOperStatusChange notification is generated when the tacplusOperStatus has transitioned either from 'up' to 'down' or from 'down' to 'up'")
tmnxSnmpdError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 21)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSnmpdErrorMsg"))
if mibBuilder.loadTexts: tmnxSnmpdError.setStatus('current')
if mibBuilder.loadTexts: tmnxSnmpdError.setDescription('The tmnxSnmpdError notification is generated when the SNMP daemon detects an error condition.')
tmnxSsiMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 22)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSyncMode"), ("TIMETRA-SYSTEM-MIB", "sbiPersist"))
if mibBuilder.loadTexts: tmnxSsiMismatch.setStatus('current')
if mibBuilder.loadTexts: tmnxSsiMismatch.setDescription("The tmnxSsiMismatch notification is generated by a system with redundant CPM cards after the processing of the bootup configuration has completed when ssiSyncMode has a value of 'none' and sbiPersist has a value of 'true'. This can result in SNMP indexes having different values following a system failover.")
tmnxSnmpdStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 23)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"))
if mibBuilder.loadTexts: tmnxSnmpdStateChange.setStatus('current')
if mibBuilder.loadTexts: tmnxSnmpdStateChange.setDescription('The tmnxSnmpdStateChange notification is generated whenever there is a change in either the administrative or operational state of the SNMP agent.')
ssiRedStandbySyncing = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 24)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedStandbySyncing.setStatus('current')
if mibBuilder.loadTexts: ssiRedStandbySyncing.setDescription('The ssiRedStandbySyncing notification is generated when synchronization of redundancy information onto the standby CPM is started. tmnxChassisNotifyHwIndex identifies the standby CPM.')
ssiRedStandbyReady = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 25)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedStandbyReady.setStatus('current')
if mibBuilder.loadTexts: ssiRedStandbyReady.setDescription('The ssiRedStandbyReady notification is generated when the synchronization of redundancy information onto the standby CPM has completed. The standby CPM is now ready to take over control of the system if the active CPM fails or a manual switchover command is issued. tmnxChassisNotifyHwIndex identifies the standby CPM.')
ssiRedStandbySyncLost = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 26)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedStandbySyncLost.setStatus('current')
if mibBuilder.loadTexts: ssiRedStandbySyncLost.setDescription('The ssiRedStandbySyncLost notification is generated when the active CPM looses communication with the standby CPM. tmnxChassisNotifyHwIndex identifies the lost standby CPM.')
ssiRedSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 27)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverTime"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverReason"))
if mibBuilder.loadTexts: ssiRedSwitchover.setStatus('current')
if mibBuilder.loadTexts: ssiRedSwitchover.setDescription('The ssiRedSwitchover notification is generated when the standby CPM detects that the active CPM has failed and the standby prepares to take over as the new active CPM. tmnxChassisNotifyHwIndex identifies the new active CPM.')
ssiRedCpmActive = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 28)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedCpmActive.setStatus('current')
if mibBuilder.loadTexts: ssiRedCpmActive.setDescription('The ssiRedCpmActive notification is generated following a redundancy switchover when the new active CPM has completed its audit and is ready to accept management commands via CLI or SNMP SET requests. tmnxChassisNotifyHwIndex identifies the new active CPM.')
ssiRedSingleCpm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 29)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: ssiRedSingleCpm.setStatus('current')
if mibBuilder.loadTexts: ssiRedSingleCpm.setDescription("The ssiRedSingleCpm notification is generated by a system with a chassis with two CPM slots when the active CPM cannot detect a standby CPM in the chassis. When the operating state of TIMETRA-CHASSIS-MIB::tmnxCpmCardRedundant for the active CPM card transitions to a value of 'singleton (1)', this notification is generated. tmnxChassisNotifyHwIndex identifies the singleton CPM. When the active CPM later detects a standby CPM in the chassis, the ssiRedStandbySyncing event will be generated followed by a ssiRedStandbyReady event to indicate clearing of the CPM singleton state. The value of tmnxCpmCardRedundant will then transition to 'redundantActive (2)'.")
persistencyClosedAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 30)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyClosedAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: persistencyClosedAlarmRaised.setDescription('The persistencyClosedAlarmRaised notification is generated when the system is unable to store persistency data (e.g. because the device is inaccessible, or full).')
persistencyClosedAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 31)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyClosedAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: persistencyClosedAlarmCleared.setDescription('The persistencyClosedAlarmCleared notification is generated when the output device used to store the persistence data is available for use again.')
tmnxSntpOperChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 32)).setObjects(("TIMETRA-SYSTEM-MIB", "sntpOperStatus"))
if mibBuilder.loadTexts: tmnxSntpOperChange.setStatus('current')
if mibBuilder.loadTexts: tmnxSntpOperChange.setDescription('The tmnxSntpOperChange notification is generated whenever there is a change in the operational state of SNTP.')
tmnxSysTimeSet = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 33)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSetBy"))
if mibBuilder.loadTexts: tmnxSysTimeSet.setStatus('current')
if mibBuilder.loadTexts: tmnxSysTimeSet.setDescription('The tmnxSysTimeSet notification is generated whenever system time is set by NTP, SNTP, SNMP, Real Time Clock(RTC) or if it was set manually.')
tmnxFtpClientFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 34)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddressType"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddress"))
if mibBuilder.loadTexts: tmnxFtpClientFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxFtpClientFailure.setDescription('The tmnxFtpClientFailure notification is generated when a file transfer operation initiated by the FTP client fails.')
tacplusInetSrvrOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 35)).setObjects(("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddress"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"))
if mibBuilder.loadTexts: tacplusInetSrvrOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: tacplusInetSrvrOperStatusChange.setDescription("The tacplusInetSrvrOperStatusChange notification is generated when the operational status of a TACACS+ server has transitioned either from 'up' to 'down' or from 'down' to 'up'.")
radiusInetServerOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 36)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "radiusServerInetAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"))
if mibBuilder.loadTexts: radiusInetServerOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: radiusInetServerOperStatusChange.setDescription("The radiusInetServerOperStatusChange notification is generated when the operational status of a Radius server has transitioned either from 'up' to 'down' or from 'down' to 'up'.")
persistencyEventReport = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 37)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyEventReport.setStatus('current')
if mibBuilder.loadTexts: persistencyEventReport.setDescription('The persistencyEventReport notification is generated when a client-specific persistence event occurs (e.g. the start and completion of a recover action after system startup).')
sbiBootConfigFailFileError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 38)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailScript"))
if mibBuilder.loadTexts: sbiBootConfigFailFileError.setStatus('current')
if mibBuilder.loadTexts: sbiBootConfigFailFileError.setDescription('The sbiBootConfigFailFileError notification is generated when sbiBootConfigFailScript file cannot be accessed.')
sbiBootConfigOKFileError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 39)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKScript"))
if mibBuilder.loadTexts: sbiBootConfigOKFileError.setStatus('current')
if mibBuilder.loadTexts: sbiBootConfigOKFileError.setDescription('The sbiBootConfigOKFileError notification is generated when sbiBootConfigOKScript file cannot be accessed.')
sbiBootLiConfig = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 40)).setObjects(("TIMETRA-SYSTEM-MIB", "sliConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiLiSeparate"), ("TIMETRA-SYSTEM-MIB", "sbiLiLocalSave"))
if mibBuilder.loadTexts: sbiBootLiConfig.setStatus('current')
if mibBuilder.loadTexts: sbiBootLiConfig.setDescription('The sbiBootLiConfig notification is generated upon completion of the Lawful Intercept (LI) configuration phase following a system reboot. This notification is generated periodically, about once an hour. This event is generated only from the LI context.')
persistenceRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 41)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistenceRestoreProblem.setStatus('current')
if mibBuilder.loadTexts: persistenceRestoreProblem.setDescription('The persistenceRestoreProblem notification is generated when an an error is detected while processing a persistence record.')
tmnxSysRollbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 42)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysRollbackStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackStarted.setDescription('[CAUSE] The tmnxSysRollbackStarted notification is generated when the user initiates a revert of the rollback checkpoint file specified by tmnxSysRollbackIndex and tmnxSysRollbackFileType. The value of tmnxLogExecRollbackOpIndex indicates the row entry in the TIMETRA-LOG-MIB::tmnxLogExecRollbackOpTable for this rollback revert operation. [EFFECT] The specified file is executed and system configuration may change. [RECOVERY] There is no recovery required for this notification.')
tmnxSysRollbackStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 43)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysRollbackStatusChange.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackStatusChange.setDescription('[CAUSE] The tmnxSysRollbackStatusChange notification is generated upon the completion of a rollback revert as specified by tmnxSysRollbackIndex and tmnxSysRollbackFileType. The value of tmnxLogExecRollbackOpIndex indicates the row entry in the TIMETRA-LOG-MIB::tmnxLogExecRollbackOpTable for this rollback revert operation. [EFFECT] The result is indicated by the value of tmnxSysRollbackResult. [RECOVERY] When the value of tmnxSysRollbackResult is none, inProgress or success no recovery is required. When the value is failed, the user should try to determine the reason for the failure. The user can attempt a recovery by reverting back to a known good checkpoint. The user may reboot the system with the bof pointing to a saved configuration file.')
tmnxSysRollbackSaveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 44)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackSaveStatusChange.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackSaveStatusChange.setDescription('[CAUSE] The tmnxSysRollbackSaveStatusChange notification is generated upon the completion of a rollback save as specified by tmnxSysRollbackFileType. [EFFECT] The result is indicated by value of tmnxSysRollbackSaveResult. [RECOVERY] When the value of tmnxSysRollbackSaveResult is none, inProgress or success no recovery is required. When the value is is failed, the user should try to determine the reason for the failure. The user can attempt a recovery by attempting the rollback save again.')
tmnxSysRollbackFileDeleteStatus = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 45)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDeleteResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackFileDeleteStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileDeleteStatus.setDescription('[CAUSE] The tmnxSysRollbackFileDeleteStatus notification is generated upon the completion of a rollback file delete as specified by tmnxSysRollbackIndex and tmnxSysRollbackFileType. [EFFECT] The result is indicated by the value of tmnxSysRollbackFileDeleteResult. [RECOVERY] When the value of tmnxSysRollbackFileDeleteResult is none, inProgress or success no recovery is required. When the value is failed, the user should try to determine the reason for the failure. The user can attempt a recovery by deleting the file again.')
ssiSyncRollbackOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 46))
if mibBuilder.loadTexts: ssiSyncRollbackOK.setStatus('current')
if mibBuilder.loadTexts: ssiSyncRollbackOK.setDescription('[CAUSE] The ssiSyncRollbackOK event is generated when the synchronization of rollback files between the primary and secondary CPMs finishes without errors. [EFFECT] Rollback files are synchronized. [RECOVERY] No recovery is necessary.')
ssiSyncRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 47)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncRollbackFailed.setStatus('current')
if mibBuilder.loadTexts: ssiSyncRollbackFailed.setDescription('[CAUSE] The ssiSyncRollbackFailed event is generated when the synchronization of rollback files between the primary and secondary CPMs is stopped due to errors. The tmnxSyncFailureReason will state the reason for the failure. [EFFECT] Rollback files are not synchronized. [RECOVERY] The user should try to determine the cause of the failure and can attempt synchronizing the files again.')
ssiSyncCertOK = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 48))
if mibBuilder.loadTexts: ssiSyncCertOK.setStatus('current')
if mibBuilder.loadTexts: ssiSyncCertOK.setDescription('[CAUSE] The ssiSyncCertOK event is generated when the synchronization of certificate files between the primary and secondary CPMs finishes without errors. [EFFECT] Certificate files are synchronized. [RECOVERY] No recovery is necessary.')
ssiSyncCertFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 49)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if mibBuilder.loadTexts: ssiSyncCertFailed.setStatus('current')
if mibBuilder.loadTexts: ssiSyncCertFailed.setDescription('[CAUSE] The ssiSyncCertFailed event is generated when the synchronization of certificate files between the primary and secondary CPMs is stopped due to errors. The tmnxSyncFailureReason will state the reason for the failure. [EFFECT] Certificate files are not synchronized. [RECOVERY] The user should try to determine the cause of the failure and can attempt synchronizing the files again.')
persistencyFileSysThresRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 50)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyFileSysThresRaised.setStatus('current')
if mibBuilder.loadTexts: persistencyFileSysThresRaised.setDescription('The persistencyFileSysThresRaised notification is generated when the filesystem reaches 90 percent occupation.')
persistencyFileSysThresCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 51)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"))
if mibBuilder.loadTexts: persistencyFileSysThresCleared.setStatus('current')
if mibBuilder.loadTexts: persistencyFileSysThresCleared.setDescription('The persistencyFileSysThresCleared notification is generated when the filesystem drops below 90 percent occupation.')
tmnxSysExecStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 52)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysExecScript"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysExecStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxSysExecStarted.setDescription("[CAUSE] The tmnxSysExecStarted notification is generated when the user initiates a CLI 'exec' operation to process a file of SROS CLI commands. The value of tmnxSysExecScript indicates the command file. The value of tmnxLogExecRollbackOpIndex indicates the row entry in TIMETRA-LOG-MIB::tmnxLogExecRollbackOpTable for this CLI 'exec' operation. [EFFECT] The specified CLI configuration file is executed and the system configuration may have changed. [RECOVERY] There is no recovery required for this notification.")
tmnxSysExecFinished = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 53)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysExecScript"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecResult"), ("TIMETRA-LOG-MIB", "tmnxLogExecRollbackOpIndex"))
if mibBuilder.loadTexts: tmnxSysExecFinished.setStatus('current')
if mibBuilder.loadTexts: tmnxSysExecFinished.setDescription("[CAUSE] The tmnxSysExecFinished notification is generated upon the completion of the execution of a CLI command file indicated by the value of tmnxSysExecScript. The value of tmnxLogExecRollbackOpIndex indicates the row entry in TIMETRA-LOG-MIB::tmnxLogExecRollbackOpTable for this CLI 'exec' operation. [EFFECT] The success or failure result is indicated by the value of tmnxSysExecResult. [RECOVERY] When the value of tmnxSysExecResult is 'none' or 'success', no recovery is required. When the value is 'fail', the system may be left in an inconsistent state and the user should try to determine the reason for the failure. The user can attempt a recovery by manually entering CLI commands to reverse the failed configuration. The user can attempt a recovery by performing a rollback revert to a known good checkpoint. The user can attempt a recovery by rebooting the system with the bof pointing to a saved configuration file.")
tmnxSysRollbackSaveStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 54)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackSaveStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackSaveStarted.setDescription('[CAUSE] The tmnxSysRollbackSaveStarted notification is generated when the user initiates a rollback save as specified by tmnxSysRollbackFileType. [EFFECT] The specified configuration file is saved. [RECOVERY] There is no recovery required for this notification.')
tmnxSysRollbackDeleteStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 55)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"))
if mibBuilder.loadTexts: tmnxSysRollbackDeleteStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackDeleteStarted.setDescription('[CAUSE] The tmnxSysRollbackDeleteStarted notification is generated when the user initiates a rollback delete as specified by by tmnxSysRollbackIndex and tmnxSysRollbackFileType. [EFFECT] The specified configuration file is deleted. [RECOVERY] There is no recovery required for this notification.')
tmnxSysNvsysFileError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 1, 0, 56)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysFileErrorType"))
if mibBuilder.loadTexts: tmnxSysNvsysFileError.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNvsysFileError.setDescription('[CAUSE] The tmnxSysNvsysFileError notification is generated when there is a failure in accessing the nvsys file as specified by tmnxSysFileErrorType. [EFFECT] The specified nvsys file operation is unsuccessful. [RECOVERY] The user should investigate why the failure occurred. A failure can indicate a problem with the compact flash.')
sysBofInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11))
sbiActiveIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIpAddr.setStatus('current')
if mibBuilder.loadTexts: sbiActiveIpAddr.setDescription('The value of sbiActiveIpAddr specifies the IP address of the ethernet port on the active CPM.')
sbiActiveIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 2), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIpMask.setStatus('current')
if mibBuilder.loadTexts: sbiActiveIpMask.setDescription('The value of sbiActiveIpMask specifies the mask length of the subnet associated with the IP address of the ethernet port on the active CPM.')
sbiStandbyIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIpAddr.setStatus('current')
if mibBuilder.loadTexts: sbiStandbyIpAddr.setDescription('The value of sbiStandbyIpAddr specifies the IP address of the ethernet port on the standby CPM.')
sbiStandbyIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 4), IpAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIpMask.setStatus('current')
if mibBuilder.loadTexts: sbiStandbyIpMask.setDescription('The value of sbiStandbyIpMask specifies the mask length of the subnet associated with the IP address of the ethernet port on the standby CPM.')
sbiPrimaryImage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryImage.setStatus('current')
if mibBuilder.loadTexts: sbiPrimaryImage.setDescription('The value of sbiPrimaryImage specifies the primary location of the directory that contains the runtime image files.')
sbiSecondaryImage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryImage.setStatus('current')
if mibBuilder.loadTexts: sbiSecondaryImage.setDescription('The value of sbiSecondaryImage specifies the secondary location of the directory that contains the runtime image files.')
sbiTertiaryImage = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryImage.setStatus('current')
if mibBuilder.loadTexts: sbiTertiaryImage.setDescription('The value of sbiTertiaryImage specifies the tertiary location of the directory that contains the runtime image files.')
sbiPrimaryConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryConfigFile.setStatus('current')
if mibBuilder.loadTexts: sbiPrimaryConfigFile.setDescription('The value of sbiPrimaryConfigFile specifies the location and name of the primary configuration file.')
sbiSecondaryConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryConfigFile.setStatus('current')
if mibBuilder.loadTexts: sbiSecondaryConfigFile.setDescription('The value of sbiSecondaryConfigFile specifies the location and name of the secondary configuration file.')
sbiTertiaryConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryConfigFile.setStatus('current')
if mibBuilder.loadTexts: sbiTertiaryConfigFile.setDescription('The value of sbiTertiaryConfigFile specifies the location and name of the tertiary configuration file.')
sbiPersist = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPersist.setStatus('current')
if mibBuilder.loadTexts: sbiPersist.setDescription("The value of sbiPersist specifies whether or not the system will preserve SNMP indexes between reboots. When set to 'true', persistent indexing is enabled.")
sbiConsoleSpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(9600, 9600), ValueRangeConstraint(19200, 19200), ValueRangeConstraint(38400, 38400), ValueRangeConstraint(57600, 57600), ValueRangeConstraint(115200, 115200), )).clone(115200)).setUnits('bps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiConsoleSpeed.setStatus('current')
if mibBuilder.loadTexts: sbiConsoleSpeed.setDescription('The value of sbiConsoleSpeed specifies the baud rate of the console port.')
sbiAutoNegotiate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: sbiAutoNegotiate.setDescription("The value of sbiAutoNegotiate determines whether or not the speed and duplex parameters will be automatically negotiated on the CPM ethernet port. When set to 'true', auto-negotiation is enabled.")
sbiSpeed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setUnits('Mbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSpeed.setStatus('current')
if mibBuilder.loadTexts: sbiSpeed.setDescription('The value of sbiSpeed specifies the speed of the CPM ethernet port. This value is ignored if auto-negotiation is enabled.')
sbiDuplex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiDuplex.setStatus('current')
if mibBuilder.loadTexts: sbiDuplex.setDescription('The value of sbiDuplex specifies the duplex mode for the CPM ethernet port. This value is ignored if auto-negotiation is enabled.')
sbiPrimaryDns = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryDns.setStatus('current')
if mibBuilder.loadTexts: sbiPrimaryDns.setDescription('The value of sbiPrimaryDns specifies the IP address of the primary DNS server to use for DNS name resolution.')
sbiSecondaryDns = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryDns.setStatus('current')
if mibBuilder.loadTexts: sbiSecondaryDns.setDescription('The value of sbiSecondaryDns specifies the IP address of the secondary DNS server to use for DNS name resolution.')
sbiTertiaryDns = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryDns.setStatus('current')
if mibBuilder.loadTexts: sbiTertiaryDns.setDescription('The value of sbiTertiaryDns specifies the IP address of the tertiary DNS server to use for DNS name resolution.')
sbiDnsDomain = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 19), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 178), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiDnsDomain.setStatus('current')
if mibBuilder.loadTexts: sbiDnsDomain.setDescription('The value of sbiDnsDomain specifies the domain name to use when performing DNS address resolution.')
sbiWait = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiWait.setStatus('current')
if mibBuilder.loadTexts: sbiWait.setDescription('The value of sbiWait specifies the number of seconds the system pauses at the start of the boot process. This pause allows the operator to interrupt the system initialization at the console and manually override the parameters in the BOF.')
sbiStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21), )
if mibBuilder.loadTexts: sbiStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteTable.setDescription('The sbiStaticRouteTable contains an entry for each static route configured for the CPM ethernet port. These static routes are only used to route traffic generated by the CPM ethernet port. The table can have upto a maximum of 10 entries.')
sbiStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteDest"), (0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteMask"))
if mibBuilder.loadTexts: sbiStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteEntry.setDescription('Each row entry contains information about a static route configured for the CPM ethernet port. Entries in this table can be created and deleted via SNMP SET operations to sbiStaticRouteRowStatus.')
sbiStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 1), IpAddress())
if mibBuilder.loadTexts: sbiStaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteDest.setDescription('The value of sbiStaticRouteDest specifies the destination IP address of this static route.')
sbiStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 2), IpAddressPrefixLength())
if mibBuilder.loadTexts: sbiStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteMask.setDescription('The value of sbiStaticRouteMask specifies the length of the subnet mask associated with the destination IP address of this static route.')
sbiStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteNextHop.setDescription('The value of sbiStaticRouteNextHop specifies the IP address of the next hop for this static route. This IP address should be in the same subnet as the ethernet port on the active CPM. The value of sbiStaticRouteNextHop must be set to a valid IP address for the row creation to succeed.')
sbiStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteRowStatus.setDescription("sbiStaticRouteRowStatus controls the creation and deletion of rows in the table. To create a row in this table, set the row status to createAndGo(4)'. The value of sbiStaticRouteNextHop must also be set to a valid IP address for the row creation to succeed. To delete a row in this table, set the row status to delete(6).")
sbiActiveIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 22), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: sbiActiveIPv6Addr.setDescription('The value of sbiActiveIPv6Addr specifies the IPv6 address of the ethernet port on the active CPM.')
sbiActiveIPv6PfxLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 23), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiActiveIPv6PfxLen.setStatus('current')
if mibBuilder.loadTexts: sbiActiveIPv6PfxLen.setDescription('The value of sbiActiveIPv6PfxLen specifies the prefix length of the subnet associated with the sbiActiveIPv6Addr address of the ethernet port on the active CPM.')
sbiStandbyIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 24), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: sbiStandbyIPv6Addr.setDescription('The value of sbiStandbyIPv6Addr specifies the IPv6 address of the ethernet port on the standby CPM.')
sbiStandbyIPv6PfxLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 25), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiStandbyIPv6PfxLen.setStatus('current')
if mibBuilder.loadTexts: sbiStandbyIPv6PfxLen.setDescription('The value of sbiStandbyIPv6PfxLen specifies the prefix length of the subnet associated with the sbiStandbyIPv6Addr address of the ethernet port on the active CPM.')
sbiPrimaryDnsIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 26), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiPrimaryDnsIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: sbiPrimaryDnsIPv6Addr.setDescription('The value of sbiPrimaryDnsIPv6Addr specifies the IPv6 address of the primary DNS server to use for DNS name resolution.')
sbiSecondaryDnsIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 27), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiSecondaryDnsIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: sbiSecondaryDnsIPv6Addr.setDescription('The value of sbiSecondaryDnsIPv6Addr specifies the IPv6 address of the secondary DNS server to use for DNS name resolution.')
sbiTertiaryDnsIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 28), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiTertiaryDnsIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: sbiTertiaryDnsIPv6Addr.setDescription('The value of sbiTertiaryDnsIPv6Addr specifies the IPv6 address of the tertiary DNS server to use for DNS name resolution.')
sbiStaticRouteIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29), )
if mibBuilder.loadTexts: sbiStaticRouteIPv6Table.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteIPv6Table.setDescription('The sbiStaticRouteIPv6Table contains an entry for each static IPv6 route configured for the CPM ethernet port. These static routes are only used to route traffic generated by the CPM ethernet port. The table can have upto a maximum of 10 entries.')
sbiStaticRouteIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6Dest"), (0, "TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6PfxLen"))
if mibBuilder.loadTexts: sbiStaticRouteIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteIPv6Entry.setDescription('Each row entry contains information about a static IPv6 route configured for the CPM ethernet port. Entries in this table can be created and deleted via SNMP SET operations to sbiStaticRouteIPv6RowStatus.')
sbiStaticRouteIPv6Dest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: sbiStaticRouteIPv6Dest.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteIPv6Dest.setDescription('The value of sbiStaticRouteIPv6Dest specifies the destination IPv6 address of this static route.')
sbiStaticRouteIPv6PfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 2), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: sbiStaticRouteIPv6PfxLen.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteIPv6PfxLen.setDescription('The value of sbiStaticRouteIPv6PfxLen specifies the prefix length of sbiStaticRouteIPv6Dest, the destination IPv6 address of this static route.')
sbiStaticRouteIPv6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 3), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteIPv6NextHop.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteIPv6NextHop.setDescription('The value of sbiStaticRouteIPv6NextHop specifies the IPv6 address of the next hop for this static route. This IPv6 address should be in the same subnet as the ethernet port on the active CPM. The value of sbiStaticRouteIPv6NextHop must be set to a valid IPv6 address for the row creation to succeed.')
sbiStaticRouteIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 29, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sbiStaticRouteIPv6RowStatus.setStatus('current')
if mibBuilder.loadTexts: sbiStaticRouteIPv6RowStatus.setDescription("sbiStaticRouteIPv6RowStatus controls the creation and deletion of rows in the table. To create a row in this table, set the row status to createAndGo(4)'. The value of sbiStaticRouteIPv6NextHop must also be set to a valid IPv6 address for the row creation to succeed. To delete a row in this table, set the row status to delete(6).")
sbiLiSeparate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiLiSeparate.setStatus('current')
if mibBuilder.loadTexts: sbiLiSeparate.setDescription("The value of sbiLiSeparate specifies whether or not a non-LI user has access to Lawful Intercept (LI) information. When sbiLiSeparate has a value of 'true', a user who does not have the TMETRA-SECURITY-MIB:: tmnxUserAccess 'li' bit set will not be allowed to access CLI or SNMP objects in the 'li' context. A change to the value of this object does not take affect until the system is rebooted.")
sbiLiLocalSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 11, 31), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbiLiLocalSave.setStatus('current')
if mibBuilder.loadTexts: sbiLiLocalSave.setDescription('The value of sbiLiLocalSave specifies whether or not Lawful Intercept (LI) configuration is allowed to be save to a local file. A change to the value of this object does not take affect until the system is rebooted.')
sysPersistenceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12))
sysPersistenceDhcpL2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 1))
sysPersistenceDhcpL3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 2))
sysPersistenceSubMgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 3))
sysPersistenceDhcpSrvInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 4))
sysPersistenceNatInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 5))
sysPersistenceAAInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 6))
spiDhcpL2PersistenceFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL2PersistenceFileLocation.setStatus('obsolete')
if mibBuilder.loadTexts: spiDhcpL2PersistenceFileLocation.setDescription('The value of spiDhcpL2PersistenceFileLocation specifies the flash device on a CPM card where the data for handling DHCP Layer2 persistency is stored. The value 0 indicates that no flash device is specified. This object was made obsolete in the 5.0 release.')
spiDhcpL2PersistenceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 1, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL2PersistenceDescription.setStatus('obsolete')
if mibBuilder.loadTexts: spiDhcpL2PersistenceDescription.setDescription('The value of the object spiDhcpL2PersistenceDescription specifies a user provided description related to DHCP Layer-2 persistency. It consists of any printable, seven-bit ASCII characters up to 80 characters in length. This object was made obsolete in the 5.0 release.')
spiDhcpL3PersistenceFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL3PersistenceFileLocation.setStatus('obsolete')
if mibBuilder.loadTexts: spiDhcpL3PersistenceFileLocation.setDescription('The value of spiDhcpL3PersistenceFileLocation specifies the flash device on a CPM card where the data for handling DHCP Layer3 persistency is stored. The value 0 indicates that no flash device is specified. This object was made obsolete in the 5.0 release.')
spiDhcpL3PersistenceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 2, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpL3PersistenceDescription.setStatus('obsolete')
if mibBuilder.loadTexts: spiDhcpL3PersistenceDescription.setDescription('The value of the object spiDhcpL3PersistenceDescription specifies a user provided description related to DHCP Layer-3 persistency. It consists of any printable, seven-bit ASCII characters up to 80 characters in length. This object was made obsolete in the 5.0 release.')
spiSubMgmtPersistenceFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiSubMgmtPersistenceFileLocation.setStatus('current')
if mibBuilder.loadTexts: spiSubMgmtPersistenceFileLocation.setDescription('The value of spiSubMgmtPersistenceFileLocation specifies the flash device on a CPM card where the data for handling subscriber management persistency is stored. The value 0 indicates that no flash device is specified.')
spiSubMgmtPersistenceDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 3, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiSubMgmtPersistenceDescription.setStatus('current')
if mibBuilder.loadTexts: spiSubMgmtPersistenceDescription.setDescription('The value of the object spiSubMgmtPersistenceDescription specifies a user provided description related to subscriber management persistency. It consists of any printable, seven-bit ASCII characters up to 80 characters in length.')
spiDhcpSrvPersistenceFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpSrvPersistenceFileLoc.setStatus('current')
if mibBuilder.loadTexts: spiDhcpSrvPersistenceFileLoc.setDescription('The value of spiDhcpSrvPersistenceFileLoc specifies the flash device on a CPM card where the data for handling the local DHCP server persistency is stored. The value 0 indicates that no flash device is specified.')
spiDhcpSrvPersistenceDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 4, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiDhcpSrvPersistenceDescr.setStatus('current')
if mibBuilder.loadTexts: spiDhcpSrvPersistenceDescr.setDescription('The value of the object spiDhcpSrvPersistenceDescr specifies a user provided description related to the local DHCP server persistency. It consists of any printable, seven-bit ASCII characters up to 80 characters in length.')
spiNatFwdPersistenceFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiNatFwdPersistenceFileLoc.setStatus('current')
if mibBuilder.loadTexts: spiNatFwdPersistenceFileLoc.setDescription('The value of spiNatFwdPersistenceFileLoc specifies the flash device on a CPM card where the data for handling the NAT (Network Address Translation) port forwarding persistence is stored. The value 0 indicates that no flash device is specified.')
spiNatFwdPersistenceDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 5, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiNatFwdPersistenceDescr.setStatus('current')
if mibBuilder.loadTexts: spiNatFwdPersistenceDescr.setDescription('The value of the object spiNatFwdPersistenceDescr specifies a user provided description related to the NAT port forwarding persistence. It consists of any printable, seven-bit ASCII characters up to 80 characters in length.')
spiAAPersistenceFileLoc = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiAAPersistenceFileLoc.setStatus('current')
if mibBuilder.loadTexts: spiAAPersistenceFileLoc.setDescription('The value of spiAAPersistenceFileLoc specifies the flash device on a CPM card where the data for handling the AA (Application Assurance) persistence is stored. The value 0 indicates that no flash device is specified.')
spiAAPersistenceDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 12, 6, 2), TItemDescription()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiAAPersistenceDescr.setStatus('current')
if mibBuilder.loadTexts: spiAAPersistenceDescr.setDescription('The value of the object spiAAPersistenceDescr specifies a user provided description related to the AA (Application Assurance) persistence. It consists of any printable, seven-bit ASCII characters up to 80 characters in length.')
sysLiInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13))
sliConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRun", 0), ("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliConfigStatus.setStatus('current')
if mibBuilder.loadTexts: sliConfigStatus.setDescription('The value of sliConfigStatus indicates the results of restoring the Lawful Intercept (LI) configuration at boot-up time.')
sliSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 2), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sliSaveConfig.setStatus('current')
if mibBuilder.loadTexts: sliSaveConfig.setDescription("The value of sliSaveConfig indicates a desired action. Setting this action variable to 'doAction' causes the current Lawful Intercept (LI) running configuration information, to be saved to a file called li.cfg in the same location as the BOF file. If the li.cfg file already exists, it will be renamed and a new file is created with the current running configuration. An attempt to set this object to 'doAction' when the booted value of sbiLiLocalSave is 'false' will result in an 'inconsistentValue' error. Default configuration values will be included in the saved configuration information.")
sliSaveConfigResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliSaveConfigResult.setStatus('current')
if mibBuilder.loadTexts: sliSaveConfigResult.setDescription('The value of sliSaveConfigResult represents the result of the last sliSaveConfig action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
sliConfigLastModified = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliConfigLastModified.setStatus('current')
if mibBuilder.loadTexts: sliConfigLastModified.setDescription('The value of sliConfigLastModified indicates the date and time the Lawful Intercept (LI) running configuration was last modified. If sliConfigLastModified is more recent than TIMETRA-CHASSIS-MIB:: tmnxHwSwLastBoot, the current configuration may be different than that in the configuration file read upon system initialization.')
sliConfigLastSaved = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sliConfigLastSaved.setStatus('current')
if mibBuilder.loadTexts: sliConfigLastSaved.setDescription('The value of sliConfigLastSaved indicates the date and time the current Lawful Intercept (LI) configuration was last saved. If sliConfigLastSaved is more recent than the value of TIMETRA-CHASSIS-MIB::tmnxHwSwLastBoot, the initial configuration is likely to be different the next time the system is rebooted.')
sliFilterLock = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlockedForLiUsers", 1), ("unlockedForAll", 2))).clone('locked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sliFilterLock.setStatus('current')
if mibBuilder.loadTexts: sliFilterLock.setDescription("The of sliFilterLock specifies who can modify the Lawful Intercept (LI) filters. The value: 'locked': no users can modify the LI filters 'unlockedForLiUsers': only users with LI privileges can modify the LI filters 'unlockedForAll': all users can modify the LI filters.")
sysDNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 14))
sysDNSInfoLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 14, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDNSInfoLastChanged.setStatus('current')
if mibBuilder.loadTexts: sysDNSInfoLastChanged.setDescription('The value of sysDNSInfoLastChanged is the timestamp of the last configuration changes to any of the DNS global settings.')
sysDNSAddressResolvePref = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4Only", 1), ("ipv6First", 2))).clone('ipv4Only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDNSAddressResolvePref.setStatus('current')
if mibBuilder.loadTexts: sysDNSAddressResolvePref.setDescription('The value of sysDNSAddressResolvePref specifies how the DNS client will request for address resolution. ipv4-only: The DNS client will only try to resolve a domain name into an ipv4 address. ipv6-first: the DNS client will first try to relsove the domain name in to ipv6 address. If no ipv6 address is available it will try to resolve the domain name into an ipv4 address.')
sysIcmpVSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 15))
sysIcmpVSEnhancement = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 15, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIcmpVSEnhancement.setStatus('current')
if mibBuilder.loadTexts: sysIcmpVSEnhancement.setDescription('The value of sysIcmpVSEnhancement specifies if vendor specific extensions to ICMP is enabled or not.')
sysEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 16))
sysNewQinqUntaggedSap = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 16, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNewQinqUntaggedSap.setStatus('current')
if mibBuilder.loadTexts: sysNewQinqUntaggedSap.setDescription("The value of sysNewQinqUntaggedSap controls the forwarding of packets on a QinQ X.0 access SAP. When sysNewQinqUntaggedSap is set to true, the SAP will only accept: - frames with a single tag matching the SAP's outer tag or, - frames with double tag where the outer tag matches the SAP's outer tag and inner tag is set to 0. When sysNewQinqUntaggedSap is set to false, forwarding of packets remains unchanged.")
tmnxSysRollbackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17))
tmnxSysRollbackIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackIndex.setDescription('The value of tmnxSysRollbackIndex indicates a specific rollback checkpoint file to which a rollback action can be taken. The value of the tmnxSysRollbackIndex corresponds to a rollback checkpoint file with suffix .rb.index. The maximum checkpoint file that can be specified is determined by the rollback location as specified by tmnxSysRollbackLocation. If the location is on a compact flash, then the maximum value of tmnxSysRollbackIndex can be tmnxSysRollbackMaxLocalFiles minus 1. If the location is a remote ftp location, then the maximum value of tmnxSysRollbackIndex can be tmnxSysRollbackMaxRemoteFiles minus 1. This index is SET along with another action object, including tmnxSysRollbackStart to initiate a rollback revert of a file and tmnxSysRollbackFileDelete to delete a rollback file. An SNMP GET request on this object should return the last SET value.')
tmnxSysRollbackStart = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 2), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackStart.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackStart.setDescription("The value of tmnxSysRollbackStart indicates whether to revert the rollback file specified by tmnxSysRollbackIndex. When SET to the value of 'doAction' the system will revert the rollback file specified by tmnxSysRollbackIndex. This variable must be set along with tmnxSysRollbackIndex to indicate the specific rollback file to revert. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4), ("interrupted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackResult.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackResult.setDescription('The value of tmnxSysRollbackResult indicates the result of the last tmnxSysRollbackStart action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed interrupted (5) The action was interrupted')
tmnxSysRollbackSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 4), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackSave.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackSave.setDescription("The value of tmnxSysRollbackSave indicates whether to save the existing configuration in a rollback checkpoint file. When SET to the value of 'doAction' the system will save the configuration in a new rollback checkpoint file, with suffix '.rb'. Previously saved rollback files with the same name will increment the filename suffix by 1 upto a maximum of 9. For example, file.rb is moved to file.rb.1. The higher the number, the older the file is. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackSaveResult.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackSaveResult.setDescription('The value of tmnxSysRollbackSaveResult indicates the result of the last tmnxSysRollbackSave action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
tmnxSysRollbackLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackLocation.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackLocation.setDescription("The value of tmnxSysRollbackLocation specifies the destination filepath or file-URL where the current running configuration information will be saved when tmnxSysRollbackSave is set to 'doAction'. If the value of tmnxSysRollbackLocation is an empty string the system will attempt to store the file in the best available location locally, for example compact flash 1 or 2 if either is present.")
tmnxSysRollbackRevertIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRevertIndex.setDescription('The value of tmnxSysRollbackRevertIndex indicates the last rollback checkpoint file reverted on the system.')
tmnxSysRollbackRevertEndTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertEndTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRevertEndTime.setDescription('The value of tmnxSysRollbackRevertEndTime indicates the timestamp the last rollback revert on the system is completed.')
tmnxSysRollbackSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackSavedTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackSavedTime.setDescription('The value of tmnxSysRollbackSavedTime indicates the timestamp the last rollback save on the system is completed.')
tmnxSysRollbackRevertStartTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertStartTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRevertStartTime.setDescription('The value of tmnxSysRollbackRevertStartTime indicates the timestamp the last rollback file reverted on the system is initiated.')
tmnxSysRollbackRevertUserName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 11), TNamedItemOrEmpty().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertUserName.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRevertUserName.setDescription('The value of tmnxSysRollbackRevertUserName indicates the name of a system user who initiates the last rollback revert.')
tmnxSysRollbackRevertFilename = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRevertFilename.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRevertFilename.setDescription('The value of tmnxSysRollbackRevertFilename specifies the filepath or file-URL of the last reverted rollback file.')
tmnxSysRollbackSaveComment = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackSaveComment.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackSaveComment.setDescription('The value of the object tmnxSysRollbackSaveComment specifies a user provided comment related to the rollback checkpoint file about to be saved. It consists of any printable, seven-bit ASCII characters up to 255 characters in length.')
tmnxSysRollbackFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 14), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackFileDelete.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileDelete.setDescription("The value of tmnxSysRollbackFileDelete specifies whether to delete the rollback file specified by tmnxSysRollbackIndex. When SET to the value of 'doAction' the system will delete the rollback file specified by tmnxSysRollbackIndex. This variable must be set along with tmnxSysRollbackIndex to specify the specific rollback file to delete. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackFileDeleteResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileDeleteResult.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileDeleteResult.setDescription('The value of tmnxSysRollbackFileDeleteResult indicates the result of the last tmnxSysRollbackFileDelete action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
tmnxSysRollbackAbortRevert = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 16), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackAbortRevert.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackAbortRevert.setDescription("The value of tmnxSysRollbackAbortRevert indicates whether to abort the rollback revert that's currently in progress. When SET to the value of 'doAction' the system will abort the active rollback revert. This will leave the system in an unknown state, so it should be used with care. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackRescueLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueLocation.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueLocation.setDescription('The value of tmnxSysRollbackRescueLocation specifies the destination file path or file-URL where the rollback rescue configuration file will be saved. If the value of tmnxSysRollbackRescueLocation is an empty string the system will attempt to store the file in the best available location locally, for example compact flash 1 or 2 if either is present.')
tmnxSysRollbackRescueRevert = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 18), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevert.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevert.setDescription("The value of tmnxSysRollbackRescueRevert indicates whether to revert the rollback rescue file located in tmnxSysRollbackRescueLocation. When SET to the value of 'doAction' the system will revert the rollback rescue file. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackRescueSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSave.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueSave.setDescription("The value of tmnxSysRollbackRescueSave indicates whether to save the existing configuration in the rollback rescue file located in tmnxSysRollbackRescueLocation. When SET to the value of 'doAction' the system will save the configuration to the rollback rescue file. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackRescueDelete = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 20), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueDelete.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueDelete.setDescription("The value of tmnxSysRollbackRescueDelete specifies whether to delete the rollback rescue file located in tmnxSysRollbackRescueLocation. When SET to the value of 'doAction' the system will delete the rollback rescue file. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackRescueSaveRes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSaveRes.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueSaveRes.setDescription('The value of tmnxSysRollbackRescueSaveRes indicates the result of the last tmnxSysRollbackRescueSave action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
tmnxSysRollbackRescueRevertRes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4), ("interrupted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevertRes.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevertRes.setDescription('The value of tmnxSysRollbackRescueRevertRes indicates the result of the last tmnxSysRollbackRescueRevert action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed interrupted (5) The action was interrupted')
tmnxSysRollbackRescueDeleteRes = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueDeleteRes.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueDeleteRes.setDescription('The value of tmnxSysRollbackRescueDeleteRes indicates the result of the last tmnxSysRollbackRescueDelete action. none(1) None of the following apply inProgress(2) The action is still in progress success(3) The action completed successfully failed(4) The action failed')
tmnxSysRollbackRescueSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSavedTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueSavedTime.setDescription('The value of tmnxSysRollbackRescueSavedTime indicates the timestamp the last rollback rescue save on the system is completed.')
tmnxSysRollbackRescueRevStTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevStTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevStTime.setDescription('The value of tmnxSysRollbackRescueRevStTime indicates the timestamp the last rescue rollback file reverted on the system is initiated.')
tmnxSysRollbackRescueRevEdTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevEdTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevEdTime.setDescription('The value of tmnxSysRollbackRescueRevEdTime indicates the timestamp the last rollback rescue revert on the system is completed.')
tmnxSysRollbackRescueRevUser = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 27), TNamedItemOrEmpty().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevUser.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueRevUser.setDescription('The value of tmnxSysRollbackRescueRevUser indicates the name of a system user who initiates the last rollback rescue revert.')
tmnxSysRollbackRescueSaveComment = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueSaveComment.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueSaveComment.setDescription('The value of the object tmnxSysRollbackRescueSaveComment specifies a user provided comment related to the rollback rescue file about to be saved. It consists of any printable, seven-bit ASCII characters up to 255 characters in length.')
tmnxSysRollbackRescueAbortRevert = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 29), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackRescueAbortRevert.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueAbortRevert.setDescription("The value of tmnxSysRollbackRescueAbortRevert indicates whether to abort the rescue revert that's currently in progress. When SET to the value of 'doAction' the system will abort the active rollback revert. This will leave the system in an unknown state, so it should be used with care. An SNMP GET request on this object should return 'notApplicable'.")
tmnxSysRollbackRescueFileExists = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 30), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackRescueFileExists.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueFileExists.setDescription("The value of tmnxSysRollbackRescueFileExists indicates whether a rollback rescue file specified by tmnxSysRollbackRescueLocation and suffix '.rc' is present. A value of 'true' indicates the file is present and a value of 'false' indicates the file is not present.")
tmnxSysRollbackMaxLocalFiles = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackMaxLocalFiles.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackMaxLocalFiles.setDescription('The value of tmnxSysRollbackMaxLocalFiles indicates the maximum number of rollback checkpoint files that can be saved locally on the compact flash.')
tmnxSysRollbackMaxRemoteFiles = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 17, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSysRollbackMaxRemoteFiles.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackMaxRemoteFiles.setDescription('The value of tmnxSysRollbackMaxRemoteFiles indicates the maximum number of rollback checkpoint files that can be saved at a remote ftp location.')
tmnxSysRollbackTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackTableLastChanged.setDescription('The value of tmnxSysRollbackTableLastChanged indicates the timestamp of the last configuration changes to any of the rows in tmnxSysRollbackFileTable.')
tmnxSysRollbackFileTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19), )
if mibBuilder.loadTexts: tmnxSysRollbackFileTable.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileTable.setDescription('The table tmnxSysRollbackFileTable contains information pertaining to an entry for each rollback checkpoint file. If the configured rollback location as specified by tmnxSysRollbackLocation is on compact flash, this table can have upto a maximum of tmnxSysRollbackMaxLocalFiles. If the configured rollback location as specified by tmnxSysRollbackLocation is a remote ftp location, this table can have upto a maximum of tmnxSysRollbackMaxRemoteFiles.')
tmnxSysRollbackFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1), ).setIndexNames((0, "TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileIndex"))
if mibBuilder.loadTexts: tmnxSysRollbackFileEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileEntry.setDescription('Each row entry contains information about a rollback checkpoint file.')
tmnxSysRollbackFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 199)))
if mibBuilder.loadTexts: tmnxSysRollbackFileIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileIndex.setDescription('The value of tmnxSysRollbackFileIndex specifies the index of the rollback checkpoint file.')
tmnxSysRollbackFileCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileCreationTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileCreationTime.setDescription('The value of tmnxSysRollbackFileCreationTime indicates the timestamp of the creation time of this row in tmnxSysRollbackFileTable.')
tmnxSysRollbackFileComment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileComment.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileComment.setDescription('The value of the object tmnxSysRollbackFileComment specifies a user provided comment related to a rollback checkpoint file. It consists of any printable, seven-bit ASCII characters up to 255 characters in length.')
tmnxSysRollbackFileUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 4), TNamedItem().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileUserName.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileUserName.setDescription('The value of tmnxSysRollbackFileUserName indicates the name of a system user who saves this rollback file.')
tmnxSysRollbackFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSysRollbackFileVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackFileVersion.setDescription('The value of tmnxSysRollbackFileVersion indicates the version number of the software running on the system when the rollback file is saved.')
sysBootedBofInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 20))
sbbiLiSeparate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 20, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbbiLiSeparate.setStatus('current')
if mibBuilder.loadTexts: sbbiLiSeparate.setDescription("This object gives the currently active (booted) value of li-separate. This value specifies whether or not a non-LI user has access to Lawful Intercept (LI) information. When sbbiLiSeparate has a value of 'true', a user who does not have the TMETRA-SECURITY-MIB:: tmnxUserAccess 'li' bit set will not be allowed to access CLI or SNMP objects in the 'li' context.")
sbbiLiLocalSave = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 1, 20, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbbiLiLocalSave.setStatus('current')
if mibBuilder.loadTexts: sbbiLiLocalSave.setDescription('This object gives the currently active (booted) value of li-local-save. This value specifies whether or not Lawful Intercept (LI) configuration is allowed to be save to a local file.')
tmnxSysCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1))
tmnxSysGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2))
tmnxSysV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 4)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV4v0Compliance = tmnxSysV4v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysV4v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 5)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV5v0Compliance = tmnxSysV5v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysV5v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysV6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 6)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV6v0Compliance = tmnxSysV6v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysV6v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysV7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 7)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV7v0Compliance = tmnxSysV7v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysV7v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysV8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 8)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIcmpVSV6v1Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysEthInfoGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV8v0Compliance = tmnxSysV8v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysV8v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 9)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysEthInfoGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIcmpVSV6v1Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiFilterGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlSecGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCertGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationRBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV9v0Compliance = tmnxSysV9v0Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysV9v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysBootedBofCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 10)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysBootedBofGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBootedBofCompliance = tmnxSysBootedBofCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSysBootedBofCompliance.setDescription('The compliance statement for currently active (booted) BOF capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 1, 11)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistenceV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysBofV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysConfigV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysEthInfoGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV3v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysGeneralV7v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIcmpVSV6v1Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysIpv6MgmtItfV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiFilterGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLiV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlSecGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV8v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysLoginControlV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV6v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationV10v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRadiusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackV9v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTacPlusServerV5v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeV4v0Group"), ("TIMETRA-SYSTEM-MIB", "tmnxSystemCpuMonitorGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCertGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueGroup"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNotificationRBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysV10v0Compliance = tmnxSysV10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSysV10v0Compliance.setDescription('The compliance statement for management of general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysRadiusServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 4)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusOperStatus"), ("TIMETRA-SYSTEM-MIB", "radiusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRadiusServerGroup = tmnxSysRadiusServerGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysRadiusServerGroup.setDescription('The group of objects supporting management of RADIUS servers on Alcatel-Lucent SROS series systems.')
tmnxSysTacPlusServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 5)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusOperStatus"), ("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysTacPlusServerGroup = tmnxSysTacPlusServerGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysTacPlusServerGroup.setDescription('The group of objects supporting management of TACACS+ servers on Alcatel-Lucent SROS series systems.')
tmnxSysBofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 8)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiActiveIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiActiveIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiPersist"), ("TIMETRA-SYSTEM-MIB", "sbiConsoleSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiAutoNegotiate"), ("TIMETRA-SYSTEM-MIB", "sbiSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiDuplex"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiDnsDomain"), ("TIMETRA-SYSTEM-MIB", "sbiWait"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteNextHop"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBofGroup = tmnxSysBofGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysBofGroup.setDescription('The group of objects supporting management of the Boot Options File (BOF) on Alcatel-Lucent SROS series systems.')
tmnxSysConfigV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 12)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSaveConfig"), ("TIMETRA-SYSTEM-MIB", "ssiSyncMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncStatus"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiConfigMaxBackupRevisions"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBof"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBofResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDest"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDetail"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverTime"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverReason"), ("TIMETRA-SYSTEM-MIB", "sbiConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdMaxPktSize"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdPortNum"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigOKScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigFailScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScript"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScriptStatus"), ("TIMETRA-SYSTEM-MIB", "slcFtpInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetOutboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessage"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessageInclName"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDay"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDayType"), ("TIMETRA-SYSTEM-MIB", "slcLoginBanner"), ("TIMETRA-SYSTEM-MIB", "sysLACPSystemPriority"), ("TIMETRA-SYSTEM-MIB", "slcLoginExponentialBackOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysConfigV3v0Group = tmnxSysConfigV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysConfigV3v0Group.setDescription('The group of objects supporting management of boot-up configuration and synchronization of active and standby systems on Alcatel-Lucent SROS series systems.')
tmnxSysGeneralV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 15)).setObjects(("TIMETRA-SYSTEM-MIB", "sgiCpuUsage"), ("TIMETRA-SYSTEM-MIB", "sgiMemoryUsed"), ("TIMETRA-SYSTEM-MIB", "sgiMemoryAvailable"), ("TIMETRA-SYSTEM-MIB", "sgiMemoryPoolAllocated"), ("TIMETRA-SYSTEM-MIB", "sgiSwMajorVersion"), ("TIMETRA-SYSTEM-MIB", "sgiSwMinorVersion"), ("TIMETRA-SYSTEM-MIB", "sgiSwVersionModifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysGeneralV3v0Group = tmnxSysGeneralV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysGeneralV3v0Group.setDescription('The group of objects supporting management of general system capabilities on Alcatel-Lucent SROS series systems, 3.0 Release.')
tmnxSysObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 17)).setObjects(("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartDate"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndDate"), ("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysObsoleteGroup = tmnxSysObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysObsoleteGroup.setDescription('The group of objects in TIMETRA-SYSTEM-MIB which are obsoleted.')
tmnxPersistenceV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 18)).setObjects(("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV4v0Group = tmnxPersistenceV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPersistenceV4v0Group.setDescription('The group of objects supporting management of persistency accross system reboot on Alcatel-Lucent SROS series systems.')
tmnxSysTimeV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 19)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTime"), ("TIMETRA-SYSTEM-MIB", "stiActiveZone"), ("TIMETRA-SYSTEM-MIB", "stiHoursOffset"), ("TIMETRA-SYSTEM-MIB", "stiMinutesOffset"), ("TIMETRA-SYSTEM-MIB", "stiZoneType"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneRowStatus"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneOffset"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartDay"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartWeek"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartMonth"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartHour"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartMinute"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndDay"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndWeek"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndMonth"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndHour"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndMinute"), ("TIMETRA-SYSTEM-MIB", "sntpState"), ("TIMETRA-SYSTEM-MIB", "sntpServerRowStatus"), ("TIMETRA-SYSTEM-MIB", "sntpServerVersion"), ("TIMETRA-SYSTEM-MIB", "sntpServerPreference"), ("TIMETRA-SYSTEM-MIB", "sntpServerInterval"), ("TIMETRA-SYSTEM-MIB", "sntpAdminState"), ("TIMETRA-SYSTEM-MIB", "sntpOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysTimeV4v0Group = tmnxSysTimeV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysTimeV4v0Group.setDescription('The group of objects supporting management of time on Alcatel-Lucent SROS series systems, 4.0 Release.')
tmnxSysNotifyObjsR4r0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 20)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowAdminState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowOperState"), ("TIMETRA-SYSTEM-MIB", "tmnxMemoryModule"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocSize"), ("TIMETRA-SYSTEM-MIB", "tmnxDroppedTrapID"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedReasonCode"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedEntryID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdErrorMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSetBy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsR4r0Group = tmnxSysNotifyObjsR4r0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysNotifyObjsR4r0Group.setDescription('The group of objects supporting notifications for general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 21)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTimeChanged"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigSucceeded"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigFailed"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfig"), ("TIMETRA-SYSTEM-MIB", "sbiBootSnmpd"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigModify"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigCreate"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxStateChange"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocFailed"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDropped"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvFailed"), ("TIMETRA-SYSTEM-MIB", "sntpTimeDiffExceedsThreshold"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tacplusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdError"), ("TIMETRA-SYSTEM-MIB", "tmnxSsiMismatch"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdStateChange"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncing"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbyReady"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncLost"), ("TIMETRA-SYSTEM-MIB", "ssiRedSwitchover"), ("TIMETRA-SYSTEM-MIB", "ssiRedCpmActive"), ("TIMETRA-SYSTEM-MIB", "ssiRedSingleCpm"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSntpOperChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV4v0Group = tmnxSysNotificationV4v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysNotificationV4v0Group.setDescription('The group of notifications supporting the general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 22)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxPersistencyClient"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyFileLocator"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistencyNotifyMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxPersistenceAffectedCpm"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRow"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowAdminState"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyRowOperState"), ("TIMETRA-SYSTEM-MIB", "tmnxMemoryModule"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocSize"), ("TIMETRA-SYSTEM-MIB", "tmnxDroppedTrapID"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedReasonCode"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDroppedEntryID"), ("TIMETRA-SYSTEM-MIB", "tmnxNotifyEntryOID"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdErrorMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSetBy"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureMsg"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddressType"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpFailureDestAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsV5v0Group = tmnxSysNotifyObjsV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotifyObjsV5v0Group.setDescription('The group of objects supporting notifications for general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 23)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTimeChanged"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigSucceeded"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigFailed"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfig"), ("TIMETRA-SYSTEM-MIB", "sbiBootSnmpd"), ("TIMETRA-SYSTEM-MIB", "radiusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigModify"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigCreate"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxStateChange"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocFailed"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDropped"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvFailed"), ("TIMETRA-SYSTEM-MIB", "sntpTimeDiffExceedsThreshold"), ("TIMETRA-SYSTEM-MIB", "tacplusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdError"), ("TIMETRA-SYSTEM-MIB", "tmnxSsiMismatch"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdStateChange"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncing"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbyReady"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncLost"), ("TIMETRA-SYSTEM-MIB", "ssiRedSwitchover"), ("TIMETRA-SYSTEM-MIB", "ssiRedCpmActive"), ("TIMETRA-SYSTEM-MIB", "ssiRedSingleCpm"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSntpOperChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSet"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpClientFailure"), ("TIMETRA-SYSTEM-MIB", "tacplusInetSrvrOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusInetServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "persistencyEventReport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV5v0Group = tmnxSysNotificationV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSysNotificationV5v0Group.setDescription('The group of notifications supporting the general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysObsoleteNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 24)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysObsoleteNotificationV5v0Group = tmnxSysObsoleteNotificationV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysObsoleteNotificationV5v0Group.setDescription('The group of notification objects in TIMETRA-SYSTEM-MIB which are obsoleted.')
tmnxSysTacPlusServerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 25)).setObjects(("TIMETRA-SYSTEM-MIB", "tacplusOperStatus"), ("TIMETRA-SYSTEM-MIB", "tacplusServerOperStatus"), ("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "tacPlusServerInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysTacPlusServerV5v0Group = tmnxSysTacPlusServerV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysTacPlusServerV5v0Group.setDescription('The group of objects supporting management of TACACS+ servers on Alcatel-Lucent SROS series systems.')
tmnxSysRadiusServerV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 26)).setObjects(("TIMETRA-SYSTEM-MIB", "radiusOperStatus"), ("TIMETRA-SYSTEM-MIB", "radiusServerOperStatus"), ("TIMETRA-SYSTEM-MIB", "radiusServerInetAddressType"), ("TIMETRA-SYSTEM-MIB", "radiusServerInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRadiusServerV5v0Group = tmnxSysRadiusServerV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRadiusServerV5v0Group.setDescription('The group of objects supporting management of RADIUS servers on Alcatel-Lucent SROS series systems.')
tmnxSysObsoleteV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 27)).setObjects(("TIMETRA-SYSTEM-MIB", "stiSummerZoneStartDate"), ("TIMETRA-SYSTEM-MIB", "stiSummerZoneEndDate"), ("TIMETRA-SYSTEM-MIB", "tacplusServerAddress"), ("TIMETRA-SYSTEM-MIB", "radiusServerAddress"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL2PersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiDhcpL3PersistenceDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysObsoleteV5v0Group = tmnxSysObsoleteV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysObsoleteV5v0Group.setDescription('The group of objects in TIMETRA-SYSTEM-MIB which are obsoleted.')
tmnxPersistenceV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 28)).setObjects(("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV5v0Group = tmnxPersistenceV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPersistenceV5v0Group.setDescription('The group of objects supporting management of persistency accross system reboot on Alcatel-Lucent SROS series systems.')
tmnxSysIpv6MgmtItfV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 29)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiActiveIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiActiveIPv6PfxLen"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIPv6PfxLen"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryDnsIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryDnsIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryDnsIPv6Addr"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6NextHop"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteIPv6RowStatus"), ("TIMETRA-SYSTEM-MIB", "sysDNSInfoLastChanged"), ("TIMETRA-SYSTEM-MIB", "sysDNSAddressResolvePref"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysIpv6MgmtItfV6v0Group = tmnxSysIpv6MgmtItfV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysIpv6MgmtItfV6v0Group.setDescription('The group of objects supporting ipv6 management interface on Alcatel-Lucent SROS series systems.')
tmnxPersistenceV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 30)).setObjects(("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV6v0Group = tmnxPersistenceV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPersistenceV6v0Group.setDescription('The group of objects supporting management of persistency accross system reboot on Alcatel-Lucent SROS series systems.')
tmnxSysBofV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 31)).setObjects(("TIMETRA-SYSTEM-MIB", "sbiActiveIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiActiveIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpAddr"), ("TIMETRA-SYSTEM-MIB", "sbiStandbyIpMask"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryImage"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryConfigFile"), ("TIMETRA-SYSTEM-MIB", "sbiPersist"), ("TIMETRA-SYSTEM-MIB", "sbiConsoleSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiAutoNegotiate"), ("TIMETRA-SYSTEM-MIB", "sbiSpeed"), ("TIMETRA-SYSTEM-MIB", "sbiDuplex"), ("TIMETRA-SYSTEM-MIB", "sbiPrimaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiSecondaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiTertiaryDns"), ("TIMETRA-SYSTEM-MIB", "sbiDnsDomain"), ("TIMETRA-SYSTEM-MIB", "sbiWait"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteNextHop"), ("TIMETRA-SYSTEM-MIB", "sbiStaticRouteRowStatus"), ("TIMETRA-SYSTEM-MIB", "sbiLiSeparate"), ("TIMETRA-SYSTEM-MIB", "sbiLiLocalSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBofV6v0Group = tmnxSysBofV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysBofV6v0Group.setDescription('The group of objects supporting management of the Boot Options File (BOF) on Alcatel-Lucent SROS series systems.')
tmnxSysNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 32)).setObjects(("TIMETRA-SYSTEM-MIB", "stiDateAndTimeChanged"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigSucceeded"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigFailed"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfig"), ("TIMETRA-SYSTEM-MIB", "sbiBootSnmpd"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailFileError"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKFileError"), ("TIMETRA-SYSTEM-MIB", "sbiBootLiConfig"), ("TIMETRA-SYSTEM-MIB", "radiusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigModify"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigCreate"), ("TIMETRA-SYSTEM-MIB", "tmnxConfigDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxStateChange"), ("TIMETRA-SYSTEM-MIB", "tmnxModuleMallocFailed"), ("TIMETRA-SYSTEM-MIB", "tmnxTrapDropped"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvFailed"), ("TIMETRA-SYSTEM-MIB", "sntpTimeDiffExceedsThreshold"), ("TIMETRA-SYSTEM-MIB", "tacplusOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdError"), ("TIMETRA-SYSTEM-MIB", "tmnxSsiMismatch"), ("TIMETRA-SYSTEM-MIB", "tmnxSnmpdStateChange"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncing"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbyReady"), ("TIMETRA-SYSTEM-MIB", "ssiRedStandbySyncLost"), ("TIMETRA-SYSTEM-MIB", "ssiRedSwitchover"), ("TIMETRA-SYSTEM-MIB", "ssiRedCpmActive"), ("TIMETRA-SYSTEM-MIB", "ssiRedSingleCpm"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyClosedAlarmCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSntpOperChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysTimeSet"), ("TIMETRA-SYSTEM-MIB", "tmnxFtpClientFailure"), ("TIMETRA-SYSTEM-MIB", "tacplusInetSrvrOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "radiusInetServerOperStatusChange"), ("TIMETRA-SYSTEM-MIB", "persistencyEventReport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV6v0Group = tmnxSysNotificationV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotificationV6v0Group.setDescription('The group of notifications supporting the general system capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysLiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 33)).setObjects(("TIMETRA-SYSTEM-MIB", "sliConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sliSaveConfig"), ("TIMETRA-SYSTEM-MIB", "sliSaveConfigResult"), ("TIMETRA-SYSTEM-MIB", "sliConfigLastModified"), ("TIMETRA-SYSTEM-MIB", "sliConfigLastSaved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLiV6v0Group = tmnxSysLiV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysLiV6v0Group.setDescription('The group of objects supporting management of Lawful Intercept configuration on Alcatel-Lucent SROS series systems.')
tmnxSysNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 34)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxNotifyObjectName"), ("TIMETRA-SYSTEM-MIB", "tmnxSyncFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsV6v0Group = tmnxSysNotifyObjsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotifyObjsV6v0Group.setDescription('The group of objects added in 6.0 release to support system notifications.')
tmnxSysGeneralV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 35)).setObjects(("TIMETRA-SYSTEM-MIB", "sgiSnmpInGetBulks"), ("TIMETRA-SYSTEM-MIB", "sgiKbMemoryUsed"), ("TIMETRA-SYSTEM-MIB", "sgiKbMemoryAvailable"), ("TIMETRA-SYSTEM-MIB", "sgiKbMemoryPoolAllocated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysGeneralV7v0Group = tmnxSysGeneralV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysGeneralV7v0Group.setDescription('The group of objects supporting management of general system capabilities on Alcatel-Lucent SROS series systems added in 7.0 Release.')
tmnxSysIcmpVSV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 36)).setObjects(("TIMETRA-SYSTEM-MIB", "sysIcmpVSEnhancement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysIcmpVSV6v1Group = tmnxSysIcmpVSV6v1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysIcmpVSV6v1Group.setDescription('The group of objects supporting management of ICMP vendor specific enhancement capabilities on Alcatel-Lucent SROS series systems.')
tmnxSysConfigV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 37)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSaveConfig"), ("TIMETRA-SYSTEM-MIB", "ssiSyncMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncStatus"), ("TIMETRA-SYSTEM-MIB", "ssiSyncConfigLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncBootEnvLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiConfigMaxBackupRevisions"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBof"), ("TIMETRA-SYSTEM-MIB", "ssiSaveBofResult"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDest"), ("TIMETRA-SYSTEM-MIB", "ssiSaveConfigDetail"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverTime"), ("TIMETRA-SYSTEM-MIB", "ssiRedFailoverReason"), ("TIMETRA-SYSTEM-MIB", "sbiConfigStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistStatus"), ("TIMETRA-SYSTEM-MIB", "sbiPersistIndex"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdAdminStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdOperStatus"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdMaxPktSize"), ("TIMETRA-SYSTEM-MIB", "sbiSnmpdPortNum"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigOKScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigOKScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiBootConfigFailScript"), ("TIMETRA-SYSTEM-MIB", "sbiConfigFailScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScript"), ("TIMETRA-SYSTEM-MIB", "sbiRedSwitchoverScriptStatus"), ("TIMETRA-SYSTEM-MIB", "sysLACPSystemPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysConfigV8v0Group = tmnxSysConfigV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysConfigV8v0Group.setDescription('The group of objects supporting management of boot-up configuration and synchronization of active and standby systems on Alcatel-Lucent SROS series systems.')
tmnxSysLoginControlV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 38)).setObjects(("TIMETRA-SYSTEM-MIB", "slcFtpInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcTelnetOutboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessage"), ("TIMETRA-SYSTEM-MIB", "slcPreLoginMessageInclName"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDay"), ("TIMETRA-SYSTEM-MIB", "slcMessageOfTheDayType"), ("TIMETRA-SYSTEM-MIB", "slcLoginBanner"), ("TIMETRA-SYSTEM-MIB", "slcLoginExponentialBackOff"), ("TIMETRA-SYSTEM-MIB", "slcTelnetGracefulShutdown"), ("TIMETRA-SYSTEM-MIB", "slcSSHGracefulShutdown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLoginControlV8v0Group = tmnxSysLoginControlV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysLoginControlV8v0Group.setDescription('The group of objects supporting management of login control on Alcatel-Lucent SROS series systems.')
tmnxSysEthInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 39)).setObjects(("TIMETRA-SYSTEM-MIB", "sysNewQinqUntaggedSap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysEthInfoGroup = tmnxSysEthInfoGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysEthInfoGroup.setDescription('The group of objects supporting management of Ethernet Info on Alcatel-Lucent SROS series systems.')
tmnxPersistenceV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 40)).setObjects(("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceFileLocation"), ("TIMETRA-SYSTEM-MIB", "spiSubMgmtPersistenceDescription"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiDhcpSrvPersistenceDescr"), ("TIMETRA-SYSTEM-MIB", "spiNatFwdPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiNatFwdPersistenceDescr"), ("TIMETRA-SYSTEM-MIB", "spiAAPersistenceFileLoc"), ("TIMETRA-SYSTEM-MIB", "spiAAPersistenceDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPersistenceV9v0Group = tmnxPersistenceV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPersistenceV9v0Group.setDescription('The group of objects supporting management of persistency accross system reboot on Alcatel-Lucent SROS series systems release 9.0.')
tmnxSysLoginControlSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 41)).setObjects(("TIMETRA-SYSTEM-MIB", "slcTelnetMinTTLValue"), ("TIMETRA-SYSTEM-MIB", "slcSSHMinTTLValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLoginControlSecGroup = tmnxSysLoginControlSecGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysLoginControlSecGroup.setDescription('The group of objects supporting management of login control on Alcatel-Lucent SROS series systems.')
tmnxSysLiFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 42)).setObjects(("TIMETRA-SYSTEM-MIB", "sliFilterLock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLiFilterGroup = tmnxSysLiFilterGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysLiFilterGroup.setDescription('The group of objects supporting management of Lawful Intercept configuration on Alcatel-Lucent SROS series systems.')
tmnxSysNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 43)).setObjects(("TIMETRA-SYSTEM-MIB", "persistenceRestoreProblem"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveStatusChange"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDeleteStatus"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackFailed"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertOK"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV9v0Group = tmnxSysNotificationV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotificationV9v0Group.setDescription('The group of notifications supporting the general system capabilities added in release 9.0 of SROS.')
tmnxSysRollbackV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 44)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackStart"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSave"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveResult"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackLocation"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertIndex"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertEndTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackTableLastChanged"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileCreationTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileComment"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileUserName"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSavedTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackLastTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertStartTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertUserName"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRevertFilename"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveComment"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackAbortRevert"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileVersion"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileDeleteResult"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncRollbackStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRollbackV9v0Group = tmnxSysRollbackV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackV9v0Group.setDescription('The group of objects supporting management of the Rollback Files on Alcatel-Lucent SROS series systems.')
tmnxSysLoginControlV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 45)).setObjects(("TIMETRA-SYSTEM-MIB", "slcSSHInboundMaxSessions"), ("TIMETRA-SYSTEM-MIB", "slcSSHOutboundMaxSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysLoginControlV9v0Group = tmnxSysLoginControlV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysLoginControlV9v0Group.setDescription('The group of objects supporting management of login control on Alcatel-Lucent SROS series systems, added in release 9.0.')
tmnxSystemCpuMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 46)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonCpuIdle"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonBusyCoreUtil"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonBusyGroupName"), ("TIMETRA-SYSTEM-MIB", "tmnxSysCpuMonBusyGroupUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSystemCpuMonitorGroup = tmnxSystemCpuMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSystemCpuMonitorGroup.setDescription('The group of objects, added in release 7.0, used for monitoring system CPU utilization on Alcatel SROS series systems.')
tmnxSysCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 47)).setObjects(("TIMETRA-SYSTEM-MIB", "ssiSyncCertForce"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertLastTime"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertMode"), ("TIMETRA-SYSTEM-MIB", "ssiSyncCertStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysCertGroup = tmnxSysCertGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysCertGroup.setDescription('The group of objects supporting management of the synchronization of certificate Files on Alcatel-Lucent SROS series systems.')
tmnxSysBootedBofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 48)).setObjects(("TIMETRA-SYSTEM-MIB", "sbbiLiSeparate"), ("TIMETRA-SYSTEM-MIB", "sbbiLiLocalSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysBootedBofGroup = tmnxSysBootedBofGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysBootedBofGroup.setDescription('The group of objects giving the value of the currently active (booted) Boot Options File (BOF) parameters on Alcatel-Lucent SROS series systems.')
tmnxSysRollbackRescueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 49)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueLocation"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSave"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevert"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueDelete"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSaveRes"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevertRes"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueDeleteRes"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSavedTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevStTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevEdTime"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueRevUser"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueSaveComment"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueAbortRevert"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackRescueFileExists"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackMaxLocalFiles"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackMaxRemoteFiles"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysRollbackRescueGroup = tmnxSysRollbackRescueGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysRollbackRescueGroup.setDescription('The group of objects supporting management of the Rollback Rescue file on Alcatel-Lucent SROS series systems.')
tmnxSysNotificationV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 50)).setObjects(("TIMETRA-SYSTEM-MIB", "persistencyFileSysThresRaised"), ("TIMETRA-SYSTEM-MIB", "persistencyFileSysThresCleared"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecFinished"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationV10v0Group = tmnxSysNotificationV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotificationV10v0Group.setDescription('The group of notifications supporting the general system capabilities added in release 10.0 of SROS.')
tmnxSysNotifyObjsV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 51)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackFileType"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecScript"), ("TIMETRA-SYSTEM-MIB", "tmnxSysExecResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsV10v0Group = tmnxSysNotifyObjsV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotifyObjsV10v0Group.setDescription('The group of accessible-for-notify objects supporting notifications on Alcatel-Lucent SROS series systems added in SROS release 10.0.')
tmnxSysNotificationRBGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 52)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackSaveStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysRollbackDeleteStarted"), ("TIMETRA-SYSTEM-MIB", "tmnxSysNvsysFileError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotificationRBGroup = tmnxSysNotificationRBGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotificationRBGroup.setDescription('The group of notifications supporting the general system capabilities added in Alcatel-Lucent SROS series systems.')
tmnxSysNotifyObjsGenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 1, 2, 53)).setObjects(("TIMETRA-SYSTEM-MIB", "tmnxSysFileErrorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSysNotifyObjsGenGroup = tmnxSysNotifyObjsGenGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSysNotifyObjsGenGroup.setDescription('The group of accessible-for-notify objects supporting notifications on Alcatel-Lucent SROS series systems added in SROS.')
mibBuilder.exportSymbols("TIMETRA-SYSTEM-MIB", tmnxSysBootedBofGroup=tmnxSysBootedBofGroup, tmnxNotifyRowOperState=tmnxNotifyRowOperState, sysGenInfo=sysGenInfo, tmnxSntpOperChange=tmnxSntpOperChange, sbiStaticRouteDest=sbiStaticRouteDest, tmnxSysRollbackRescueRevert=tmnxSysRollbackRescueRevert, slcLoginExponentialBackOff=slcLoginExponentialBackOff, ssiSyncMode=ssiSyncMode, tmnxPersistenceV5v0Group=tmnxPersistenceV5v0Group, slcMessageOfTheDayType=slcMessageOfTheDayType, sntpServerPreference=sntpServerPreference, ssiSyncBootEnvFailed=ssiSyncBootEnvFailed, slcSSHGracefulShutdown=slcSSHGracefulShutdown, sysTimeInfo=sysTimeInfo, tmnxSysObsoleteNotificationV5v0Group=tmnxSysObsoleteNotificationV5v0Group, sbiSpeed=sbiSpeed, TmnxSysMonSampleTime=TmnxSysMonSampleTime, sntpServerVersion=sntpServerVersion, tmnxSysRollbackInfo=tmnxSysRollbackInfo, stiSummerZoneRowStatus=stiSummerZoneRowStatus, sysLACPInfo=sysLACPInfo, sbiStaticRouteIPv6RowStatus=sbiStaticRouteIPv6RowStatus, TmnxSsiSyncRollbackMode=TmnxSsiSyncRollbackMode, sbiBootConfigOKScript=sbiBootConfigOKScript, sysLACPSystemPriority=sysLACPSystemPriority, tmnxSysNotificationV5v0Group=tmnxSysNotificationV5v0Group, sysPersistenceSubMgmtInfo=sysPersistenceSubMgmtInfo, tmnxConfigCreate=tmnxConfigCreate, sysEthInfo=sysEthInfo, sysBootInfo=sysBootInfo, sbiStandbyIPv6Addr=sbiStandbyIPv6Addr, ssiSaveConfigFailed=ssiSaveConfigFailed, slcSSHMinTTLValue=slcSSHMinTTLValue, sysLiInfo=sysLiInfo, radiusOperStatus=radiusOperStatus, sbiStaticRouteIPv6NextHop=sbiStaticRouteIPv6NextHop, tmnxSysNotificationV10v0Group=tmnxSysNotificationV10v0Group, stiDateAndTimeChanged=stiDateAndTimeChanged, sbiStaticRouteTable=sbiStaticRouteTable, ssiSaveConfig=ssiSaveConfig, stiSummerZoneTable=stiSummerZoneTable, tmnxSysCpuMonBusyGroupName=tmnxSysCpuMonBusyGroupName, tmnxSysBofV6v0Group=tmnxSysBofV6v0Group, tmnxSysRollbackSaveStatusChange=tmnxSysRollbackSaveStatusChange, sliConfigLastSaved=sliConfigLastSaved, sntpOperStatus=sntpOperStatus, tmnxStateChange=tmnxStateChange, TmnxSsiSyncMode=TmnxSsiSyncMode, tmnxSysNotifyObjsGenGroup=tmnxSysNotifyObjsGenGroup, slcPreLoginMessageInclName=slcPreLoginMessageInclName, tmnxSysRollbackFileTable=tmnxSysRollbackFileTable, sntpAdminState=sntpAdminState, tmnxSysNotificationV9v0Group=tmnxSysNotificationV9v0Group, ssiSaveConfigSucceeded=ssiSaveConfigSucceeded, sbiSecondaryConfigFile=sbiSecondaryConfigFile, sysSntpInfo=sysSntpInfo, tmnxSysTacPlusServerGroup=tmnxSysTacPlusServerGroup, stiSummerZoneEntry=stiSummerZoneEntry, tmnxSysLiFilterGroup=tmnxSysLiFilterGroup, stiSummerZoneStartWeek=stiSummerZoneStartWeek, slcTelnetInboundMaxSessions=slcTelnetInboundMaxSessions, stiSummerZoneStartDay=stiSummerZoneStartDay, tmnxSysIpv6MgmtItfV6v0Group=tmnxSysIpv6MgmtItfV6v0Group, tmnxSysExecStarted=tmnxSysExecStarted, tmnxSysRollbackFileDeleteResult=tmnxSysRollbackFileDeleteResult, tmnxSysRollbackRescueSaveRes=tmnxSysRollbackRescueSaveRes, tmnxFtpFailureMsg=tmnxFtpFailureMsg, stiHoursOffset=stiHoursOffset, ssiSaveConfigResult=ssiSaveConfigResult, sysPersistenceAAInfo=sysPersistenceAAInfo, ssiRedStandbySyncing=ssiRedStandbySyncing, tmnxSysCpuMonCpuIdle=tmnxSysCpuMonCpuIdle, sbiBootConfigFailScript=sbiBootConfigFailScript, sbiActiveIPv6PfxLen=sbiActiveIPv6PfxLen, tmnxSysV5v0Compliance=tmnxSysV5v0Compliance, sbiBootLiConfig=sbiBootLiConfig, tmnxMemoryModule=tmnxMemoryModule, sliSaveConfig=sliSaveConfig, ssiRedSwitchover=ssiRedSwitchover, tmnxSysRollbackRescueGroup=tmnxSysRollbackRescueGroup, tmnxSysRollbackTableLastChanged=tmnxSysRollbackTableLastChanged, sgiKbMemoryUsed=sgiKbMemoryUsed, tmnxSysV10v0Compliance=tmnxSysV10v0Compliance, tmnxSysRollbackMaxLocalFiles=tmnxSysRollbackMaxLocalFiles, tmnxFtpFailureDestAddress=tmnxFtpFailureDestAddress, tmnxConfigModify=tmnxConfigModify, sbiActiveIpAddr=sbiActiveIpAddr, sntpTimeDiffExceedsThreshold=sntpTimeDiffExceedsThreshold, tmnxPersistencyClient=tmnxPersistencyClient, slcPreLoginMessage=slcPreLoginMessage, sliFilterLock=sliFilterLock, tmnxSysRollbackRevertStartTime=tmnxSysRollbackRevertStartTime, tmnxSysTimeSetBy=tmnxSysTimeSetBy, slcTelnetOutboundMaxSessions=slcTelnetOutboundMaxSessions, sntpServerAddress=sntpServerAddress, tmnxSysRollbackRescueSaveComment=tmnxSysRollbackRescueSaveComment, stiSummerZoneStartDate=stiSummerZoneStartDate, tacplusServerEntry=tacplusServerEntry, sbiRedSwitchoverScript=sbiRedSwitchoverScript, radiusServerOperStatus=radiusServerOperStatus, tmnxSysRollbackResult=tmnxSysRollbackResult, tmnxSysV4v0Compliance=tmnxSysV4v0Compliance, tmnxSysObsoleteGroup=tmnxSysObsoleteGroup, tmnxSysRollbackIndex=tmnxSysRollbackIndex, radiusServerOperStatusChange=radiusServerOperStatusChange, ssiSyncCertStatus=ssiSyncCertStatus, stiSummerZoneOffset=stiSummerZoneOffset, sbiStaticRouteIPv6Table=sbiStaticRouteIPv6Table, tacplusServerOperStatusChange=tacplusServerOperStatusChange, sgiSwMinorVersion=sgiSwMinorVersion, spiDhcpL2PersistenceFileLocation=spiDhcpL2PersistenceFileLocation, sbiConfigStatus=sbiConfigStatus, ssiRedStandbySyncLost=ssiRedStandbySyncLost, tmnxSnmpdErrorMsg=tmnxSnmpdErrorMsg, tmnxSysCpuMonEntry=tmnxSysCpuMonEntry, spiDhcpL3PersistenceFileLocation=spiDhcpL3PersistenceFileLocation, sbiPrimaryConfigFile=sbiPrimaryConfigFile, ssiConfigMaxBackupRevisions=ssiConfigMaxBackupRevisions, sgiKbMemoryPoolAllocated=sgiKbMemoryPoolAllocated, tmnxSysExecFinished=tmnxSysExecFinished, tmnxSysNotifyObjs=tmnxSysNotifyObjs, stiSummerZoneEndDay=stiSummerZoneEndDay, sntpServerInterval=sntpServerInterval, tmnxSysRollbackFileIndex=tmnxSysRollbackFileIndex, sbbiLiSeparate=sbbiLiSeparate, ssiSyncCertOK=ssiSyncCertOK, tmnxSysConfigV8v0Group=tmnxSysConfigV8v0Group, tmnxPersistenceAffectedCpm=tmnxPersistenceAffectedCpm, sbiSecondaryDns=sbiSecondaryDns, tmnxPersistencyFileLocator=tmnxPersistencyFileLocator, tmnxSysMIBNotifyPrefix=tmnxSysMIBNotifyPrefix, tmnxSysRadiusServerV5v0Group=tmnxSysRadiusServerV5v0Group, sntpServerTable=sntpServerTable, sbiBootConfigOKFileError=sbiBootConfigOKFileError, tmnxSysRollbackFileDelete=tmnxSysRollbackFileDelete, radiusServerTable=radiusServerTable, tmnxSysGeneralV7v0Group=tmnxSysGeneralV7v0Group, tmnxSysRollbackRescueDelete=tmnxSysRollbackRescueDelete, ssiSyncStatus=ssiSyncStatus, tmnxSysRollbackFileCreationTime=tmnxSysRollbackFileCreationTime, sysIcmpVSEnhancement=sysIcmpVSEnhancement, tacplusOperStatusChange=tacplusOperStatusChange, tmnxSysV7v0Compliance=tmnxSysV7v0Compliance, slcLoginBanner=slcLoginBanner, sgiSnmpInGetBulks=sgiSnmpInGetBulks, sgiCpuUsage=sgiCpuUsage, tmnxConfigDelete=tmnxConfigDelete, ssiSyncConfigFailed=ssiSyncConfigFailed, slcTelnetMinTTLValue=slcTelnetMinTTLValue, tmnxNotifyObjectName=tmnxNotifyObjectName, tmnxSysExecScript=tmnxSysExecScript, tmnxFtpClientFailure=tmnxFtpClientFailure, sysDNSAddressResolvePref=sysDNSAddressResolvePref, tacPlusServerInetAddressType=tacPlusServerInetAddressType, slcSSHOutboundMaxSessions=slcSSHOutboundMaxSessions, sgiMemoryAvailable=sgiMemoryAvailable, sbiTertiaryImage=sbiTertiaryImage, stiSummerZoneEndWeek=stiSummerZoneEndWeek, sbiPrimaryImage=sbiPrimaryImage, tmnxSysRollbackV9v0Group=tmnxSysRollbackV9v0Group, sbiSnmpdPortNum=sbiSnmpdPortNum, tmnxSystemCpuMonitorGroup=tmnxSystemCpuMonitorGroup, sysDNSInfoLastChanged=sysDNSInfoLastChanged, sntpServerEntry=sntpServerEntry, tmnxSyncFailureReason=tmnxSyncFailureReason, tmnxSysFileErrorType=tmnxSysFileErrorType, persistenceRestoreProblem=persistenceRestoreProblem, tacplusServerAddress=tacplusServerAddress, stiSummerZoneName=stiSummerZoneName, ssiSaveBof=ssiSaveBof, stiSummerZoneStartHour=stiSummerZoneStartHour, sbiStaticRouteMask=sbiStaticRouteMask, spiAAPersistenceDescr=spiAAPersistenceDescr, tmnxSysRollbackMaxRemoteFiles=tmnxSysRollbackMaxRemoteFiles, sbiLiLocalSave=sbiLiLocalSave, tmnxTrapDropped=tmnxTrapDropped, tmnxSysBofGroup=tmnxSysBofGroup, spiDhcpL3PersistenceDescription=spiDhcpL3PersistenceDescription, stiSummerZoneEndHour=stiSummerZoneEndHour, stiMinutesOffset=stiMinutesOffset, sysBootedBofInfo=sysBootedBofInfo, ssiSyncBootEnvOK=ssiSyncBootEnvOK, ssiSyncCertLastTime=ssiSyncCertLastTime, ssiSyncRollbackFailed=ssiSyncRollbackFailed, tmnxSysIcmpVSV6v1Group=tmnxSysIcmpVSV6v1Group, sbiBootConfigFailFileError=sbiBootConfigFailFileError, tmnxSysRollbackSaveComment=tmnxSysRollbackSaveComment, sbiStaticRouteNextHop=sbiStaticRouteNextHop, sbiPrimaryDns=sbiPrimaryDns, ssiSyncRollbackOK=ssiSyncRollbackOK, spiNatFwdPersistenceFileLoc=spiNatFwdPersistenceFileLoc, tmnxPersistenceV4v0Group=tmnxPersistenceV4v0Group, tmnxSysTacPlusServerV5v0Group=tmnxSysTacPlusServerV5v0Group, tacplusServerOperStatus=tacplusServerOperStatus, sbiBootConfig=sbiBootConfig, sbiPrimaryDnsIPv6Addr=sbiPrimaryDnsIPv6Addr, spiSubMgmtPersistenceFileLocation=spiSubMgmtPersistenceFileLocation, sysPersistenceInfo=sysPersistenceInfo, ssiSyncCertMode=ssiSyncCertMode, sbiStandbyIPv6PfxLen=sbiStandbyIPv6PfxLen, sgiMemoryUsed=sgiMemoryUsed, sbiTertiaryDns=sbiTertiaryDns, tmnxSysRadiusServerGroup=tmnxSysRadiusServerGroup, tmnxSysCpuMonBusyGroupUtil=tmnxSysCpuMonBusyGroupUtil, tmnxSysRollbackSaveStarted=tmnxSysRollbackSaveStarted, ssiSyncForce=ssiSyncForce, tmnxNotifyEntryOID=tmnxNotifyEntryOID, tmnxNotifyRowAdminState=tmnxNotifyRowAdminState, tmnxSysRollbackFileVersion=tmnxSysRollbackFileVersion, tmnxSysRollbackFileEntry=tmnxSysRollbackFileEntry, tmnxSysExecResult=tmnxSysExecResult, tmnxSysConformance=tmnxSysConformance, sbiStandbyIpAddr=sbiStandbyIpAddr, tmnxSysV8v0Compliance=tmnxSysV8v0Compliance, tmnxSysRollbackRescueRevEdTime=tmnxSysRollbackRescueRevEdTime, slcMessageOfTheDay=slcMessageOfTheDay, ssiRedFailoverReason=ssiRedFailoverReason, tmnxSysRollbackRescueFileExists=tmnxSysRollbackRescueFileExists, sysPersistenceDhcpL3Info=sysPersistenceDhcpL3Info, sbiSnmpdOperStatus=sbiSnmpdOperStatus, sgiSwMajorVersion=sgiSwMajorVersion, tmnxSysNotificationV4v0Group=tmnxSysNotificationV4v0Group, spiSubMgmtPersistenceDescription=spiSubMgmtPersistenceDescription, tacplusInetSrvrOperStatusChange=tacplusInetSrvrOperStatusChange, spiDhcpSrvPersistenceDescr=spiDhcpSrvPersistenceDescr, tmnxSysRollbackFileUserName=tmnxSysRollbackFileUserName, sbiPersist=sbiPersist, ssiSyncBootEnvLastTime=ssiSyncBootEnvLastTime, tacplusServerIndex=tacplusServerIndex, radiusServerInetAddressType=radiusServerInetAddressType, tmnxFtpFailureDestAddressType=tmnxFtpFailureDestAddressType, sbiAutoNegotiate=sbiAutoNegotiate, slcFtpInboundMaxSessions=slcFtpInboundMaxSessions, tmnxSysRollbackStarted=tmnxSysRollbackStarted, ssiRedCpmActive=ssiRedCpmActive, sbiStaticRouteIPv6Dest=sbiStaticRouteIPv6Dest, tmnxSysLiV6v0Group=tmnxSysLiV6v0Group, tmnxSysEthInfoGroup=tmnxSysEthInfoGroup, tmnxSysCpuMonTable=tmnxSysCpuMonTable, tmnxSysCompliances=tmnxSysCompliances, ssiSyncRollbackLastTime=ssiSyncRollbackLastTime, TmnxSysMonUtilization=TmnxSysMonUtilization, sysPersistenceNatInfo=sysPersistenceNatInfo, sbiDuplex=sbiDuplex, tacplusOperStatus=tacplusOperStatus, tmnxSysCertGroup=tmnxSysCertGroup, ssiSyncCertFailed=ssiSyncCertFailed, slcTelnetGracefulShutdown=slcTelnetGracefulShutdown, sbiTertiaryDnsIPv6Addr=sbiTertiaryDnsIPv6Addr, sbiConfigOKScriptStatus=sbiConfigOKScriptStatus, sbiSnmpdMaxPktSize=sbiSnmpdMaxPktSize, tmnxSysNotifyObjsV10v0Group=tmnxSysNotifyObjsV10v0Group, slcSSHInboundMaxSessions=slcSSHInboundMaxSessions, ssiSyncConfigOK=ssiSyncConfigOK)
mibBuilder.exportSymbols("TIMETRA-SYSTEM-MIB", sbiSecondaryImage=sbiSecondaryImage, sbiSecondaryDnsIPv6Addr=sbiSecondaryDnsIPv6Addr, sbbiLiLocalSave=sbbiLiLocalSave, sysDNSInfo=sysDNSInfo, tmnxSysNotificationV6v0Group=tmnxSysNotificationV6v0Group, stiActiveZone=stiActiveZone, tmnxSysRollbackRescueRevertRes=tmnxSysRollbackRescueRevertRes, tmnxSysObsoleteV5v0Group=tmnxSysObsoleteV5v0Group, sgiSwVersionModifier=sgiSwVersionModifier, sysBofInfo=sysBofInfo, sbiTertiaryConfigFile=sbiTertiaryConfigFile, radiusInetServerOperStatusChange=radiusInetServerOperStatusChange, tmnxSysNvsysFileError=tmnxSysNvsysFileError, tmnxSysRollbackFileType=tmnxSysRollbackFileType, persistencyClosedAlarmCleared=persistencyClosedAlarmCleared, radiusServerEntry=radiusServerEntry, ssiRedSingleCpm=ssiRedSingleCpm, persistencyClosedAlarmRaised=persistencyClosedAlarmRaised, sliSaveConfigResult=sliSaveConfigResult, ssiSaveConfigDest=ssiSaveConfigDest, tmnxSysNotifyObjsV5v0Group=tmnxSysNotifyObjsV5v0Group, sysLoginControlInfo=sysLoginControlInfo, ssiSaveBofResult=ssiSaveBofResult, tmnxSysObjs=tmnxSysObjs, tmnxSysRollbackRescueRevUser=tmnxSysRollbackRescueRevUser, tmnxSysCpuMonSampleTime=tmnxSysCpuMonSampleTime, sbiConfigFailScriptStatus=sbiConfigFailScriptStatus, tmnxSysLoginControlSecGroup=tmnxSysLoginControlSecGroup, spiNatFwdPersistenceDescr=spiNatFwdPersistenceDescr, ssiRedFailoverTime=ssiRedFailoverTime, sbiRedSwitchoverScriptStatus=sbiRedSwitchoverScriptStatus, tmnxNotifyRow=tmnxNotifyRow, tmnxSysRollbackStatusChange=tmnxSysRollbackStatusChange, tmnxSysRollbackRescueSavedTime=tmnxSysRollbackRescueSavedTime, tmnxSysCpuMonBusyCoreUtil=tmnxSysCpuMonBusyCoreUtil, stiSummerZoneEndMinute=stiSummerZoneEndMinute, sbiActiveIpMask=sbiActiveIpMask, tmnxTrapDroppedEntryID=tmnxTrapDroppedEntryID, tmnxSysRollbackRescueDeleteRes=tmnxSysRollbackRescueDeleteRes, stiDateAndTime=stiDateAndTime, sntpServerRowStatus=sntpServerRowStatus, tacplusServerTable=tacplusServerTable, sysPersistenceDhcpL2Info=sysPersistenceDhcpL2Info, sysSyncInfo=sysSyncInfo, tmnxSysRollbackFileDeleteStatus=tmnxSysRollbackFileDeleteStatus, tmnxSysRollbackStart=tmnxSysRollbackStart, sysTacplusInfo=sysTacplusInfo, spiDhcpL2PersistenceDescription=spiDhcpL2PersistenceDescription, sbiDnsDomain=sbiDnsDomain, tmnxSysConfigV3v0Group=tmnxSysConfigV3v0Group, tmnxSysRollbackRevertIndex=tmnxSysRollbackRevertIndex, tmnxSysRollbackRescueSave=tmnxSysRollbackRescueSave, ssiSyncRollbackForce=ssiSyncRollbackForce, tmnxSysLoginControlV9v0Group=tmnxSysLoginControlV9v0Group, stiZoneType=stiZoneType, tmnxModuleMallocFailed=tmnxModuleMallocFailed, tmnxSysTimeV4v0Group=tmnxSysTimeV4v0Group, stiSummerZoneStartMinute=stiSummerZoneStartMinute, sbiStaticRouteRowStatus=sbiStaticRouteRowStatus, ssiSyncCertForce=ssiSyncCertForce, tmnxDroppedTrapID=tmnxDroppedTrapID, sbiSnmpdAdminStatus=sbiSnmpdAdminStatus, tmnxSysRollbackSave=tmnxSysRollbackSave, sbiActiveIPv6Addr=sbiActiveIPv6Addr, sgiKbMemoryAvailable=sgiKbMemoryAvailable, ssiRedStandbyReady=ssiRedStandbyReady, tmnxSysRollbackDeleteStarted=tmnxSysRollbackDeleteStarted, tmnxTrapDroppedReasonCode=tmnxTrapDroppedReasonCode, tmnxSysRollbackRevertFilename=tmnxSysRollbackRevertFilename, sbiStaticRouteEntry=sbiStaticRouteEntry, tmnxSysNotifyObjsV6v0Group=tmnxSysNotifyObjsV6v0Group, radiusServerInetAddress=radiusServerInetAddress, tmnxPersistenceV6v0Group=tmnxPersistenceV6v0Group, sysPersistenceDhcpSrvInfo=sysPersistenceDhcpSrvInfo, tmnxPersistencyNotifyMsg=tmnxPersistencyNotifyMsg, sgiMemoryPoolAllocated=sgiMemoryPoolAllocated, tmnxSysNotifyObjsR4r0Group=tmnxSysNotifyObjsR4r0Group, tmnxSsiMismatch=tmnxSsiMismatch, tmnxModuleMallocSize=tmnxModuleMallocSize, sbiStaticRouteIPv6PfxLen=sbiStaticRouteIPv6PfxLen, tmnxSysV9v0Compliance=tmnxSysV9v0Compliance, radiusServerAddress=radiusServerAddress, radiusOperStatusChange=radiusOperStatusChange, persistencyFileSysThresRaised=persistencyFileSysThresRaised, sysNewQinqUntaggedSap=sysNewQinqUntaggedSap, tmnxSysLoginControlV8v0Group=tmnxSysLoginControlV8v0Group, tacPlusServerInetAddress=tacPlusServerInetAddress, tmnxSysRollbackRevertEndTime=tmnxSysRollbackRevertEndTime, ssiSyncRollbackStatus=ssiSyncRollbackStatus, ssiSyncConfigLastTime=ssiSyncConfigLastTime, stiSummerZoneEndDate=stiSummerZoneEndDate, tmnxSnmpdStateChange=tmnxSnmpdStateChange, sbiConsoleSpeed=sbiConsoleSpeed, tmnxSysRollbackSavedTime=tmnxSysRollbackSavedTime, sntpState=sntpState, tmnxSysRollbackRescueRevStTime=tmnxSysRollbackRescueRevStTime, tmnxSysRollbackFileComment=tmnxSysRollbackFileComment, ssiSaveConfigDetail=ssiSaveConfigDetail, sbiBootSnmpd=sbiBootSnmpd, sysIcmpVSInfo=sysIcmpVSInfo, stiSummerZoneEndMonth=stiSummerZoneEndMonth, sliConfigStatus=sliConfigStatus, tmnxSysRollbackRescueAbortRevert=tmnxSysRollbackRescueAbortRevert, sbiWait=sbiWait, sbiStandbyIpMask=sbiStandbyIpMask, sliConfigLastModified=sliConfigLastModified, tmnxSysNotificationRBGroup=tmnxSysNotificationRBGroup, tmnxSysRollbackRevertUserName=tmnxSysRollbackRevertUserName, spiAAPersistenceFileLoc=spiAAPersistenceFileLoc, timetraSysMIBModule=timetraSysMIBModule, sbiPersistStatus=sbiPersistStatus, tmnxSysTimeSet=tmnxSysTimeSet, tmnxSysRollbackLocation=tmnxSysRollbackLocation, sbiStaticRouteIPv6Entry=sbiStaticRouteIPv6Entry, radiusServerIndex=radiusServerIndex, spiDhcpSrvPersistenceFileLoc=spiDhcpSrvPersistenceFileLoc, tmnxSysNotifications=tmnxSysNotifications, tmnxSysRollbackSaveResult=tmnxSysRollbackSaveResult, persistencyEventReport=persistencyEventReport, persistencyFileSysThresCleared=persistencyFileSysThresCleared, tmnxPersistenceV9v0Group=tmnxPersistenceV9v0Group, tmnxSysBootedBofCompliance=tmnxSysBootedBofCompliance, tmnxSysGroups=tmnxSysGroups, stiSummerZoneStartMonth=stiSummerZoneStartMonth, tmnxSysV6v0Compliance=tmnxSysV6v0Compliance, tmnxSnmpdError=tmnxSnmpdError, sysRadiusInfo=sysRadiusInfo, tmnxSysRollbackRescueLocation=tmnxSysRollbackRescueLocation, tmnxSysRollbackAbortRevert=tmnxSysRollbackAbortRevert, sbiPersistIndex=sbiPersistIndex, sbiLiSeparate=sbiLiSeparate, tmnxSysGeneralV3v0Group=tmnxSysGeneralV3v0Group, ssiSyncRollbackMode=ssiSyncRollbackMode, PYSNMP_MODULE_ID=timetraSysMIBModule)
