#
# PySNMP MIB module CPQWCRM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQWCRM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysDescr, sysContact, sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysContact", "sysName", "sysLocation")
NotificationType, IpAddress, MibIdentifier, iso, Integer32, TimeTicks, ObjectIdentity, Bits, Counter32, Counter64, NotificationType, Gauge32, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibIdentifier", "iso", "Integer32", "TimeTicks", "ObjectIdentity", "Bits", "Counter32", "Counter64", "NotificationType", "Gauge32", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqWcrm = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167))
cpqWcrmMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 1))
cpqWcrmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2))
cpqWcrmStatusSensorInternal = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3))
cpqWcrmStatusInternalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5))
cpqWcrmStatusInternalOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6))
cpqWcrmStatusInternalMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7))
cpqWcrmStatusSensorWaterCoolUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4))
cpqWcrmStatusWaterCoolUnitSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5))
cpqWcrmStatusWaterCoolUnitOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6))
cpqWcrmStatusWaterCoolUnitMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7))
cpqWcrmSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 3))
cpqWcrmSetupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 3, 1))
cpqWcrmTimerTable1 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8))
cpqWcrmTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 4))
cpqWcrmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 4, 7))
cpqWcrmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 167, 5))
cpqWcrmMibMajRev = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmMibMajRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmMibMajRev.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqWcrmMibMinRev = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmMibMinRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmMibMinRev.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqWcrmMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("configChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmMibCondition.setDescription('The overall condition (status) of the system represented by this MIB. (2) OK (3) a minor problem, warning condition (yellow LED on Environmental Controller) (4) a major problem (red LED on Environmental Controller) (5) configuration of sensor units changed or unit detected (red/yellow/green LED on Environmental Controller)')
cpqWcrmStatusDeviceEnvironmentalController = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmStatusDeviceEnvironmentalController.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmStatusDeviceEnvironmentalController.setDescription('General Status of Environmental Controller unit itself (1) failed (2) OK')
cpqWcrmUnitsConnected = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmUnitsConnected.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmUnitsConnected.setDescription('Number of sensor units connected to the Environmental Controller, Port 1 to 2')
cpqWcrmURL = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmURL.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmURL.setDescription('URL of the management interface in the format http[s]://ipaddr[:port#][/page]')
cpqWcrmInternalTypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvail", 1), ("unitWcrm", 2), ("unitIO", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalTypeOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalTypeOfDevice.setDescription('Type of sensor unit connected to port 1')
cpqWcrmInternalText = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmInternalText.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalText.setDescription('Descriptional text for sensor unit connected to port 1')
cpqWcrmInternalSerial = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalSerial.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalSerial.setDescription('Serialnumber of sensor unit connected to port 1')
cpqWcrmInternalStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("reset", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalStatus.setDescription('General Status sensor unit connected to port 1 (1) OK (2) error, e. g. value overflow (3) configuration of sensor unit has changed, confirmation required (4) reset from sensor unit to confirm configuration changes (5) timeout of sensor unit, confirmation required to unload this unit (6) sensor unit detected, needs to be confirmed (7) unit is not available (8) supply voltage is too low')
cpqWcrmInternalNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfSensors.setDescription('Number of sensors connected to sensor unit 1')
cpqWcrmInternalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2), )
if mibBuilder.loadTexts: cpqWcrmInternalSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalSensorTable.setDescription('Headline of sensor table')
cpqWcrmInternalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "internalSensorIndex"))
if mibBuilder.loadTexts: cpqWcrmInternalSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalSensorEntry.setDescription('Entries of sensor table')
internalSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorIndex.setDescription('Index for the list of value entries. Its value ranges between 1 and the value of cpqWcrmInternalNumberOfSensors.')
internalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("access", 4), ("vibration", 5), ("motion", 6), ("smoke", 7), ("airFlow", 8), ("type6", 9), ("temperature", 10), ("current4to20", 11), ("humidity", 12), ("userNO", 13), ("userNC", 14), ("voltOK", 17), ("voltage", 18), ("fanOK", 19), ("leakage", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorType.setDescription('Type of sensor which is connected to internal sensor to sensor[internalSensorIndex] 1: no sensor connected 2: sensor failure 3: value overflow 4: sensor type 1, access sensor 5: sensor type 2, vibration sensor 6: sensor type 3, motion sensor 7: sensor type 4, smoke sensor 8: sensor type 5, air flow sensor 9: sensor type 6, reserved 10: sensor type 7, temperature sensor 11: sensor type 8, 4..20mA sensor 12: sensor type 9, humidity sensor 13: user sensor with normally opened contact 14: user sensor with normally closed contact 15: door locked sensor from locking device 16: remote unlock sensor (e.g. external keypad) 17: voltage sensor, indicates status of main voltage (OK, NOK) 18: voltage value 19: fan status, from Environmental Controller-FAS-Unit 20: leakage sensor')
internalSensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorText.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorText.setDescription('Descriptional text for each sensor (entry in the table)')
internalSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorStatus.setDescription('Actual status of the sensor')
internalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorValue.setDescription('Value of sensor')
internalSensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorSetHigh.setDescription('Value for high setpoint of sensor')
internalSensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorSetLow.setDescription('Value for low setpoint of sensor, also used as alarm delay')
internalSensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalSensorSetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: internalSensorSetWarn.setDescription('Value for warning setpoint of sensor, also used as fan threshold')
cpqWcrmInternalNumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfOutputs.setDescription('Number of outputs available on internal sensor')
cpqWcrmInternalOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2), )
if mibBuilder.loadTexts: cpqWcrmInternalOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalOutputTable.setDescription('Headline of output table')
cpqWcrmInternalOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "internalOutputIndex"))
if mibBuilder.loadTexts: cpqWcrmInternalOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalOutputEntry.setDescription('Entries of output table')
internalOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputIndex.setDescription('Index for the list of output entries. Its value ranges between 1 and the value of cpqWcrmInternalNumberOfOutputs.')
internalOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("universalOut", 4), ("powerOut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalOutputType.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputType.setDescription('Type of output which is connected to internal sensor to output[internalOutputIndex] 1: no output connected 2: output failure 3: value overflow 4: output type 6, universal relay output 5: output type 8, power output')
internalOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputText.setDescription('Descriptional text for each output (entry in the table)')
internalOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputStatus.setDescription('Actual status of the output')
internalOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputValue.setDescription('Value for output')
internalOutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputSet.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputSet.setDescription('Command for output')
internalOutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputConfig.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputConfig.setDescription('Configuration for output 1: disable remote control (e.g. keypad) 2: enable remote control ')
internalOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputDelay.setDescription('Unsigned Value for delay, after this time the output will fall into the previous state')
internalOutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalOutputTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: internalOutputTimeoutAction.setDescription('State for output if timeout (RS422) occurs')
cpqWcrmInternalNumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalNumberOfMsgs.setDescription('Number of messages that can be created with internal sensor')
cpqWcrmInternalMsgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2), )
if mibBuilder.loadTexts: cpqWcrmInternalMsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalMsgTable.setDescription('Headline of message table')
cpqWcrmInternalMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "internalMsgIndex"))
if mibBuilder.loadTexts: cpqWcrmInternalMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmInternalMsgEntry.setDescription('Entries of message table')
internalMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgIndex.setDescription('Index for the list of message entries. Its value ranges between 1 and the value of cpqWcrmInternalNumberOfMsgs.')
internalMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgText.setDescription('Descriptional text for each message (entry in the table)')
internalMsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalMsgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgStatus.setDescription('Actual message status 1: not available 2: configuration has changed (sensor new, changed, lost) 3: error 4: OK 5: alarm, e.g. smoke, vibration... 6: warning of analog value, value reached warning threshold 7: analog value too low, value reached low threshold 8: analog value too high, value reached high threshold 9: output is set to ON 10: output is set to OFF')
internalMsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgRelay.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgRelay.setDescription('Setup of Alarm relay for this message/alarm 1: no switching of alarm relay 2: switching of alarm relay')
internalMsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgBeeper.setDescription('Setup of Alarm beeper for this alarm 1: no audible alarm 2: audible alarm')
internalMsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgTrap1.setDescription('Trap receiver 1 activated')
internalMsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgTrap2.setDescription('Trap receiver 2 activated')
internalMsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgTrap3.setDescription('Trap receiver 3 activated')
internalMsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgTrap4.setDescription('Trap receiver 4 and Event Logging activated')
internalMsgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: internalMsgReset.setStatus('mandatory')
if mibBuilder.loadTexts: internalMsgReset.setDescription("Reset of this alarm 1: auto 2: manual, alarm needs confirmation, e. g. with 'C' key")
cpqWcrmWaterCoolUnitTypeOfDevice = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvail", 1), ("unitWcrm", 2), ("unitIO", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitTypeOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitTypeOfDevice.setDescription('Type of sensor unit connected to port 2')
cpqWcrmWaterCoolUnitText = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitText.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitText.setDescription('Descriptional text for sensor unit connected to port 2')
cpqWcrmWaterCoolUnitSerial = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSerial.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSerial.setDescription('Serialnumber of sensor unit connected to port 2')
cpqWcrmWaterCoolUnitStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("changed", 3), ("reset", 4), ("timeout", 5), ("detected", 6), ("notAvail", 7), ("lowPower", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitStatus.setDescription('General Status sensor unit connected to port 2 (1) OK (2) error (3) configuration of sensor unit has changed, confirmation required (4) reset from sensor unit to confirm configuration changes (5) timeout of sensor unit, confirmation required (6) sensor unit detected, needs to be confirmed (8) supply voltage is too low')
cpqWcrmWaterCoolUnitNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfSensors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfSensors.setDescription('Number of sensors connected to water cool unit')
cpqWcrmWaterCoolUnitSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSensorTable.setDescription('Headline of sensor table')
cpqWcrmWaterCoolUnitSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "waterCoolUnitSensorIndex"))
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitSensorEntry.setDescription('Entries of sensor table')
waterCoolUnitSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorIndex.setDescription('Index for the list of value entries. Its value ranges between 1 and the value of cpqWcrmWaterCoolUnitNumberOfSensors.')
waterCoolUnitSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("tempIn", 4), ("tempOut", 5), ("heatFlow", 6), ("alarm", 7), ("warning", 8), ("rpmFan1", 9), ("rpmFan2", 10), ("rpmFan3", 11), ("fanSpeed", 12), ("tempIn1", 13), ("tempOut1", 14), ("tempIn2", 15), ("tempOut2", 16), ("tempIn3", 17), ("tempOut3", 18), ("tempWaterIn", 19), ("tempWaterOut", 20), ("waterFlow", 21), ("valve", 22), ("status", 23), ("condensateDuration", 24), ("condensateCycles", 25), ("rpmFan4", 26), ("rpmFan5", 27), ("rpmFan6", 28), ("transfSwitch", 29), ("valveActValue", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorType.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorType.setDescription('Type of sensor which is connected to internal sensor to sensor[internalSensorIndex] 1: no sensor connected 2: sensor failure 3: value overflow 4: average temperature of air inlet to rack, average or max/min from each HEX 5: average temperature of air outlet from rack, average or max/min from each HEX 6: heatflow sensor 7: alarm: Bit 0: Leakage Bit 1: IIC Failure 8: warning: Bit 0..2: Fan Tach 1..3 Bit 3,4: Temp. sensor HEX1 In,Out Bit 5,6: Temp. sensor HEX2 In,Out Bit 7,8: Temp. sensor HEX3 In,Out Bit 9: Air temp. sensor Bit 10..12: IIC failure, HEX1..3 Bit 13: Waterflow low Bit 14,15: Watertemp. In,Out Bit 16: Waterflow sensor fail. Bit 17: Magnetic valve fail. Bit 18: Leakdetector fail. Bit 19: Uneven heat load Bit 20: Condensation Pump Cycles > Max Bit 21: Condensation Pump Running Time > Max 9: rpm speed of Fan1 10: rpm speed of Fan2 11: rpm speed of Fan3 12: fanSpeed setpoint, calculated from average temperatures 13: temperature air inlet to rack, HEX 1 14: temperature air outlet from rack, HEX 1 15: temperature air inlet to rack, HEX 1 16: temperature air outlet from rack, HEX 1 17: temperature air inlet to rack, HEX 1 18: temperature air outlet from rack, HEX 1 19: water temperature In 20: water temperature Out 21: water Flow 22: water valve status: MCS:0: Valve opened, 1: valve closed; MCSS: valve setpoint (%) 23: status: Bit 0..Bit 2: fan module 1..3 available Bit 3: water module available 24: condensation pump number of seconds on counter (last operating time) 25: condensation pump on/off cycle counter 26: rpm speed of Fan4 27: rpm speed of Fan5 28: rpm speed of Fan6 29: status of transfer switch, 1=AC1, 2=AC2, 3=AC1 and AC2 30: water valve actual value (%)')
waterCoolUnitSensorText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorText.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorText.setDescription('Descriptional text for each sensor (entry in the table)')
waterCoolUnitSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("warning", 7), ("tooLow", 8), ("tooHigh", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorStatus.setDescription('Actual status of the sensor')
waterCoolUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorValue.setDescription('Value of sensor added to traps, msg index also added (waterCoolUnitMsgIndex) If msg index = 1, 5 or 6 This value represents the actual Server Intake Temperature. If msg index = 2: This value represents the bit coded warning condition Bit 0: Top Fan Module Failed Bit 1: Middle Fan Module Failed Bit 2: Bottom Fan Module Failed Bit 3: Top HEX Intake Air Temperature Sensor to Server Failed Bit 4: Top HEX Exhaust Air Temperature Sensor from Server Failed Bit 5: Middle HEX Intake Air Temperature Sensor to Server Failed Bit 6: Middle HEX Exhaust Air Temperature Sensor from Server Failed Bit 7: Bottom HEX Intake Air Temperature Sensor to Server Failed Bit 8: Bottom HEX Exhaust Air Temperature Sensor from Server Failed Bit 9: Air Temperature Sensor Failed Bit 10: Top Fan not installed Bit 11: Middle Fan not installed Bit 12: Bottom Fan not installed Bit 13: Waterflow low Bit 14: Water Unit Temperature Input Out of Range Bit 15: Water Unit Temperature Output Out of Range Bit 16: Waterflow Sensor Value Out of Range Bit 17: Water Valve Failed Bit 18: Leakdetector Failed Bit 19: Heat Load Warning Bit 20: The Condensation Pump has exceeded the max. number of cycles Bit 21: The Condensation Pump has exceeded the max. Running Time If msg index = 3: This value represents the bit coded alarm condition Bit 0: Leakage Detected Bit 1: Comm. Failure IIC')
waterCoolUnitSensorSetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorSetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorSetHigh.setDescription('Value for high setpoint of sensor')
waterCoolUnitSensorSetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorSetLow.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorSetLow.setDescription('Value for low setpoint of sensor, also used as alarm delay')
waterCoolUnitSensorSetWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitSensorSetWarn.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitSensorSetWarn.setDescription('Value for warning setpoint of sensor, also used as fan threshold')
cpqWcrmWaterCoolUnitNumberOfOutputs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfOutputs.setDescription('Number of outputs available on sensor water cool unit')
cpqWcrmWaterCoolUnitOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2), )
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitOutputTable.setDescription('Headline of output table')
cpqWcrmWaterCoolUnitOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "waterCoolUnitOutputIndex"))
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitOutputEntry.setDescription('Entries of output table')
waterCoolUnitOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputIndex.setDescription('Index for the list of output entries. Its value ranges between 1 and the value of cpqWcrmWaterCoolUnitNumberOfOutputs.')
waterCoolUnitOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("notAvail", 1), ("failure", 2), ("overflow", 3), ("setpoint", 4), ("hysteresis", 5), ("command", 6), ("controlMode", 7), ("fanSpeedMin", 8), ("dTmin", 9), ("dTmax", 10), ("cpWatert", 11), ("setHeatload", 12), ("setEdoFlow", 13), ("setEdoHeat", 14), ("setCondCycles", 15), ("setCondRun", 16), ("doorControl", 17), ("pidContrKP", 18), ("pidContrKI", 19), ("pidContrKD", 20), ("pidSampleTime", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitOutputType.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputType.setDescription('Type of output which is connected to water cool unit to output[waterCoolUnitOutputIndex] 1: no output connected 2: output failure 3: value overflow 4: water valve setpoint 5: water valve hysteresis 6: command for manual control 7: Flow Meter Model, 0=SIKA, 1=Chemline 8: minimum fan speed 9: min delta T, used for fan control 10: max delta T, used for fan control 11: specific heat capacity 12: setpoint heatload warning 13: setpoint Water Flow Loss Emergency Door Opening 14: setpoint High Temperature Emergency Door Opening 15: setpoint Condensation Pump Cycles (Warning) 16: setpoint Condensation Pump Running Time (Warning) 17: command for door opening, 0=lock door, 1=unlock door 18: KP parameter for PID controller 19: KI parameter for PID controller 20: KD parameter for PID controller 21: sampling time PID controller')
waterCoolUnitOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputText.setDescription('Descriptional text for each output (entry in the table)')
waterCoolUnitOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("lost", 2), ("changed", 3), ("ok", 4), ("off", 5), ("on", 6), ("setOff", 7), ("setOn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputStatus.setDescription('Actual status of the output')
waterCoolUnitOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputValue.setDescription('Signed value for output')
waterCoolUnitOutputSet = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("lock", 3), ("unlock", 4), ("unlockDelay", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputSet.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputSet.setDescription('Command for output')
waterCoolUnitOutputConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disRemote", 1), ("enRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputConfig.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputConfig.setDescription('Configuration for output 1: disable remote control (e.g. keypad) 2: enable remote control ')
waterCoolUnitOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputDelay.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputDelay.setDescription('Unsigned Value for delay, after this time the output will fall into the previous state')
waterCoolUnitOutputTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stay", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitOutputTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitOutputTimeoutAction.setDescription('State for output if timeout (RS422) occurs')
cpqWcrmWaterCoolUnitNumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitNumberOfMsgs.setDescription('Number of alarms that can be created with water cool unit')
cpqWcrmWaterCoolUnitMsgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2), )
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitMsgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitMsgTable.setDescription('Headline of message table')
cpqWcrmWaterCoolUnitMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "waterCoolUnitMsgIndex"))
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWaterCoolUnitMsgEntry.setDescription('Entries of message table')
waterCoolUnitMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgIndex.setDescription('Index for the list of alarm entries. Its value ranges between 1 and the value of cpqWcrmWaterCoolUnitNumberOfMsgs.')
waterCoolUnitMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgText.setDescription('Descriptional text for each message (entry in the table)')
waterCoolUnitMsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("warning", 6), ("tooLow", 7), ("tooHigh", 8), ("setOff", 9), ("setOn", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterCoolUnitMsgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgStatus.setDescription('Actual message status 4: OK 5: alarm 6: warning 7: analog value too low, value reached low threshold 8: analog value too high, value reached high threshold')
waterCoolUnitMsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgRelay.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgRelay.setDescription('Setup of Alarm relay for this alarm 2: no switching of alarm relay 1: switching of alarm relay')
waterCoolUnitMsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgBeeper.setDescription('Setup of Alarm beeper for this alarm 2: no audible alarm 1: audible alarm')
waterCoolUnitMsgTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgTrap1.setDescription('Trap receiver 1 activated')
waterCoolUnitMsgTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgTrap2.setDescription('Trap receiver 2 activated')
waterCoolUnitMsgTrap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap3.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgTrap3.setDescription('Trap receiver 3 activated')
waterCoolUnitMsgTrap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgTrap4.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgTrap4.setDescription('Trap receiver 4 and Event Logging activated')
waterCoolUnitMsgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 2, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waterCoolUnitMsgReset.setStatus('mandatory')
if mibBuilder.loadTexts: waterCoolUnitMsgReset.setDescription("Reset of this alarm 1: auto 2: manual, alarm needs confirmation, e. g. with 'C' key")
cpqWcrmSetTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetTempUnit.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmSetTempUnit.setDescription('Unit of all temperature values and setpoints, Celsius or Fahrenheit')
cpqWcrmSetBeeper = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetBeeper.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmSetBeeper.setDescription('Audible alarm in Environmental Controller unit: (2): beeper is on (1): beeper is off (general)')
cpqWcrmResetRelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmResetRelay.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmResetRelay.setDescription("Enable or disable acknowledging currently active alarm relay (with 'C' on Environmental Controller).")
cpqWcrmLogicRelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closeAtAlarm", 1), ("openAtAlarm", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmLogicRelay.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmLogicRelay.setDescription('Logic of alarm relay: (1) Relay will pick up in case of an alarm (2) Relay will release in case of an alarm (3) Relay off (general)')
cpqWcrmWebAccess = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("viewOnly", 1), ("fullAccess", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmWebAccess.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmWebAccess.setDescription('Web access via HTTP: (1) view only (2) full Access, read and set (3) Web disabled (general)')
cpqWcrmSetupDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetupDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmSetupDate.setDescription('actual Date in format DD.MM.YYYY')
cpqWcrmSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmSetupTime.setDescription('actual Time in format HH:MM:SS, HH (0-23), MM (0-59), SS (0-59)')
cpqWcrmTimerNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTimerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerNumber.setDescription('Number of value-table entries=number of outlets available on this unit')
cpqWcrmTimerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2), )
if mibBuilder.loadTexts: cpqWcrmTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerTable.setDescription('Headline of status-table')
cpqWcrmTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "cpqWcrmTimerIndex"))
if mibBuilder.loadTexts: cpqWcrmTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerEntry.setDescription('Entries of timer-table')
cpqWcrmTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTimerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerIndex.setDescription('Index for the list of timer entries. Its value ranges between 1 and the value of cpqWcrmTimerNumber.')
cpqWcrmTimerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedOff", 1), ("switchedOn", 2), ("noTime", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTimerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerStatus.setDescription('Actual status of the timer')
cpqWcrmTimerDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7), ("sat-sun", 8), ("mon-fri", 9), ("mon-sun", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimerDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerDayOfWeek.setDescription('Selection of day of week for timer to switch')
cpqWcrmTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimeOn.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimeOn.setDescription('Time to switch on current function, Format: HH:MM')
cpqWcrmTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimeOff.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimeOff.setDescription('Time to switch off current function, Format: HH:MM')
cpqWcrmTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimeControl.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimeControl.setDescription('Control via RTC')
cpqWcrmTimerFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disTrapRec1", 1), ("disTrapRec2", 2), ("disTrapRec3", 3), ("disTrapRec4", 4), ("schedule1", 5), ("schedule2", 6), ("schedule3", 7), ("schedule4", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmTimerFunction.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTimerFunction.setDescription('Function which is controlled via timer 1-4: sending Traps to this Trap receiver will be disabled 5 - 8: scheduled alarm off')
cpqWcrmSetFlowUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("literMin", 1), ("gallonMin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmSetFlowUnit.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmSetFlowUnit.setDescription('Unit of Water Flow, Liter/min or Gallon/min')
cpqWcrmTraptableNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqWcrmTraptableNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTraptableNumber.setDescription('Number of trapTable entries. The number of trap-receiver')
cpqWcrmTrapTableTable = MibTable((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2), )
if mibBuilder.loadTexts: cpqWcrmTrapTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTrapTableTable.setDescription('A list of trap-receiver entries')
cpqWcrmTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1), ).setIndexNames((0, "CPQWCRM-MIB", "trapIndex"))
if mibBuilder.loadTexts: cpqWcrmTrapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmTrapTableEntry.setDescription('Entries of trapTable')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapIndex.setDescription('Index for the trap-receiver-table. Its value ranges between 1 and the value of traptableNumber ')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapStatus.setDescription('Enable or disable trap receiver')
trapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 167, 4, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapIPaddress.setDescription('IP-address of trap-receiver')
cpqWcrmResetUnit = MibScalar((1, 3, 6, 1, 4, 1, 232, 167, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqWcrmResetUnit.setStatus('mandatory')
if mibBuilder.loadTexts: cpqWcrmResetUnit.setDescription("Command to reset (acknowledge) alarms of Environmental Controller unit. Setting to 'reset' (2) will have same result as pressing 'C' on Units. Variable is automatically set back to 'noReset' (1).")
alarmSensorInternal = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,1)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "internalMsgIndex"), ("CPQWCRM-MIB", "internalMsgText"), ("CPQWCRM-MIB", "internalMsgStatus"), ("CPQWCRM-MIB", "internalSensorValue"), ("CPQWCRM-MIB", "cpqWcrmURL"))
if mibBuilder.loadTexts: alarmSensorInternal.setDescription('Internal Sensor Alarm')
alarmSensorWaterCoolUnit = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,2)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "waterCoolUnitMsgIndex"), ("CPQWCRM-MIB", "waterCoolUnitMsgText"), ("CPQWCRM-MIB", "waterCoolUnitMsgStatus"), ("CPQWCRM-MIB", "waterCoolUnitSensorValue"), ("CPQWCRM-MIB", "cpqWcrmURL"))
if mibBuilder.loadTexts: alarmSensorWaterCoolUnit.setDescription('Water Cool Unit Sensor Alarm')
alarmInternal = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,5)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "cpqWcrmInternalText"), ("CPQWCRM-MIB", "cpqWcrmInternalStatus"), ("CPQWCRM-MIB", "cpqWcrmURL"))
if mibBuilder.loadTexts: alarmInternal.setDescription('Internal Unit Alarm')
alarmWaterCoolUnit = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,6)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "cpqWcrmWaterCoolUnitText"), ("CPQWCRM-MIB", "cpqWcrmWaterCoolUnitStatus"), ("CPQWCRM-MIB", "cpqWcrmURL"))
if mibBuilder.loadTexts: alarmWaterCoolUnit.setDescription('Water Cool Unit System Alarm')
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 167) + (0,10)).setObjects(("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("CPQWCRM-MIB", "cpqWcrmURL"))
if mibBuilder.loadTexts: testTrap.setDescription('Test trap sent to a trap receiver to check proper reception of traps')
mibBuilder.exportSymbols("CPQWCRM-MIB", cpqWcrmWaterCoolUnitNumberOfSensors=cpqWcrmWaterCoolUnitNumberOfSensors, cpqWcrmMibMajRev=cpqWcrmMibMajRev, internalSensorSetWarn=internalSensorSetWarn, internalOutputDelay=internalOutputDelay, waterCoolUnitSensorValue=waterCoolUnitSensorValue, waterCoolUnitMsgStatus=waterCoolUnitMsgStatus, cpqWcrmInternalSensorTable=cpqWcrmInternalSensorTable, cpqWcrmSetBeeper=cpqWcrmSetBeeper, waterCoolUnitOutputConfig=waterCoolUnitOutputConfig, cpqWcrmTimerStatus=cpqWcrmTimerStatus, cpqWcrmStatusWaterCoolUnitMsg=cpqWcrmStatusWaterCoolUnitMsg, cpqWcrmWaterCoolUnitMsgTable=cpqWcrmWaterCoolUnitMsgTable, internalOutputSet=internalOutputSet, internalOutputValue=internalOutputValue, cpqWcrmInternalSerial=cpqWcrmInternalSerial, cpqWcrmControl=cpqWcrmControl, internalOutputText=internalOutputText, waterCoolUnitOutputText=waterCoolUnitOutputText, trapIndex=trapIndex, cpqWcrmTimerNumber=cpqWcrmTimerNumber, waterCoolUnitMsgTrap2=waterCoolUnitMsgTrap2, trapStatus=trapStatus, alarmInternal=alarmInternal, cpqWcrmInternalText=cpqWcrmInternalText, cpqWcrmTimeControl=cpqWcrmTimeControl, waterCoolUnitMsgIndex=waterCoolUnitMsgIndex, internalMsgText=internalMsgText, cpqWcrmWaterCoolUnitSensorTable=cpqWcrmWaterCoolUnitSensorTable, internalOutputIndex=internalOutputIndex, cpqWcrmTimerDayOfWeek=cpqWcrmTimerDayOfWeek, cpqWcrmTimerTable=cpqWcrmTimerTable, waterCoolUnitMsgRelay=waterCoolUnitMsgRelay, alarmWaterCoolUnit=alarmWaterCoolUnit, cpqWcrmWaterCoolUnitSensorEntry=cpqWcrmWaterCoolUnitSensorEntry, cpqWcrmWebAccess=cpqWcrmWebAccess, waterCoolUnitOutputTimeoutAction=waterCoolUnitOutputTimeoutAction, trapIPaddress=trapIPaddress, cpqWcrmSetupDate=cpqWcrmSetupDate, cpqWcrmURL=cpqWcrmURL, waterCoolUnitMsgTrap3=waterCoolUnitMsgTrap3, cpqWcrmInternalNumberOfMsgs=cpqWcrmInternalNumberOfMsgs, internalMsgReset=internalMsgReset, waterCoolUnitMsgTrap1=waterCoolUnitMsgTrap1, internalMsgTrap4=internalMsgTrap4, cpqWcrmSetupGeneral=cpqWcrmSetupGeneral, cpqWcrmSetTempUnit=cpqWcrmSetTempUnit, testTrap=testTrap, alarmSensorInternal=alarmSensorInternal, cpqWcrmStatusSensorWaterCoolUnit=cpqWcrmStatusSensorWaterCoolUnit, cpqWcrmStatusWaterCoolUnitOutputs=cpqWcrmStatusWaterCoolUnitOutputs, waterCoolUnitOutputValue=waterCoolUnitOutputValue, cpqWcrmTrapTableEntry=cpqWcrmTrapTableEntry, cpqWcrmMibCondition=cpqWcrmMibCondition, internalMsgTrap3=internalMsgTrap3, cpqWcrmTimeOn=cpqWcrmTimeOn, cpqWcrmStatusInternalOutputs=cpqWcrmStatusInternalOutputs, waterCoolUnitSensorSetHigh=waterCoolUnitSensorSetHigh, waterCoolUnitOutputDelay=waterCoolUnitOutputDelay, waterCoolUnitMsgBeeper=waterCoolUnitMsgBeeper, cpqWcrmWaterCoolUnitMsgEntry=cpqWcrmWaterCoolUnitMsgEntry, cpqWcrmTrapControl=cpqWcrmTrapControl, cpqWcrmStatusDeviceEnvironmentalController=cpqWcrmStatusDeviceEnvironmentalController, cpqWcrmTimerTable1=cpqWcrmTimerTable1, internalSensorStatus=internalSensorStatus, cpqWcrmSetupTime=cpqWcrmSetupTime, internalMsgIndex=internalMsgIndex, waterCoolUnitOutputType=waterCoolUnitOutputType, cpqWcrmWaterCoolUnitText=cpqWcrmWaterCoolUnitText, cpqWcrmInternalMsgTable=cpqWcrmInternalMsgTable, cpqWcrmStatus=cpqWcrmStatus, waterCoolUnitSensorStatus=waterCoolUnitSensorStatus, internalOutputConfig=internalOutputConfig, waterCoolUnitOutputStatus=waterCoolUnitOutputStatus, waterCoolUnitSensorType=waterCoolUnitSensorType, waterCoolUnitSensorText=waterCoolUnitSensorText, cpqWcrmInternalStatus=cpqWcrmInternalStatus, cpqWcrmInternalOutputEntry=cpqWcrmInternalOutputEntry, cpqWcrmTrapTableTable=cpqWcrmTrapTableTable, waterCoolUnitMsgTrap4=waterCoolUnitMsgTrap4, cpqWcrmSetup=cpqWcrmSetup, waterCoolUnitMsgReset=waterCoolUnitMsgReset, internalSensorIndex=internalSensorIndex, cpqWcrmTimerEntry=cpqWcrmTimerEntry, cpqWcrmResetRelay=cpqWcrmResetRelay, internalSensorType=internalSensorType, waterCoolUnitOutputIndex=waterCoolUnitOutputIndex, internalMsgStatus=internalMsgStatus, cpqWcrmStatusInternalSensors=cpqWcrmStatusInternalSensors, internalOutputTimeoutAction=internalOutputTimeoutAction, internalOutputType=internalOutputType, cpqWcrmWaterCoolUnitSerial=cpqWcrmWaterCoolUnitSerial, cpqWcrmTraps=cpqWcrmTraps, cpqWcrmUnitsConnected=cpqWcrmUnitsConnected, waterCoolUnitSensorSetLow=waterCoolUnitSensorSetLow, cpqWcrmWaterCoolUnitStatus=cpqWcrmWaterCoolUnitStatus, cpqWcrmInternalNumberOfOutputs=cpqWcrmInternalNumberOfOutputs, cpqWcrmTimeOff=cpqWcrmTimeOff, internalSensorText=internalSensorText, cpqWcrmLogicRelay=cpqWcrmLogicRelay, cpqWcrmMibRev=cpqWcrmMibRev, cpqWcrm=cpqWcrm, internalSensorValue=internalSensorValue, cpqWcrmStatusSensorInternal=cpqWcrmStatusSensorInternal, internalMsgTrap2=internalMsgTrap2, internalSensorSetHigh=internalSensorSetHigh, cpqWcrmInternalNumberOfSensors=cpqWcrmInternalNumberOfSensors, cpqWcrmTimerIndex=cpqWcrmTimerIndex, cpqWcrmInternalOutputTable=cpqWcrmInternalOutputTable, cpqWcrmInternalSensorEntry=cpqWcrmInternalSensorEntry, cpqWcrmStatusInternalMsg=cpqWcrmStatusInternalMsg, cpqWcrmSetFlowUnit=cpqWcrmSetFlowUnit, cpqWcrmMibMinRev=cpqWcrmMibMinRev, alarmSensorWaterCoolUnit=alarmSensorWaterCoolUnit, waterCoolUnitOutputSet=waterCoolUnitOutputSet, cpqWcrmResetUnit=cpqWcrmResetUnit, cpqWcrmStatusWaterCoolUnitSensors=cpqWcrmStatusWaterCoolUnitSensors, waterCoolUnitSensorSetWarn=waterCoolUnitSensorSetWarn, internalMsgBeeper=internalMsgBeeper, waterCoolUnitMsgText=waterCoolUnitMsgText, cpqWcrmTimerFunction=cpqWcrmTimerFunction, cpqWcrmInternalMsgEntry=cpqWcrmInternalMsgEntry, internalSensorSetLow=internalSensorSetLow, internalOutputStatus=internalOutputStatus, cpqWcrmWaterCoolUnitOutputEntry=cpqWcrmWaterCoolUnitOutputEntry, internalMsgTrap1=internalMsgTrap1, cpqWcrmWaterCoolUnitOutputTable=cpqWcrmWaterCoolUnitOutputTable, cpqWcrmWaterCoolUnitNumberOfMsgs=cpqWcrmWaterCoolUnitNumberOfMsgs, cpqWcrmTraptableNumber=cpqWcrmTraptableNumber, cpqWcrmWaterCoolUnitNumberOfOutputs=cpqWcrmWaterCoolUnitNumberOfOutputs, cpqWcrmWaterCoolUnitTypeOfDevice=cpqWcrmWaterCoolUnitTypeOfDevice, waterCoolUnitSensorIndex=waterCoolUnitSensorIndex, internalMsgRelay=internalMsgRelay, cpqWcrmInternalTypeOfDevice=cpqWcrmInternalTypeOfDevice)
