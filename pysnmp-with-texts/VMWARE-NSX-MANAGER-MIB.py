#
# PySNMP MIB module VMWARE-NSX-MANAGER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VMWARE-NSX-MANAGER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, iso, NotificationType, Counter64, ObjectIdentity, Counter32, ModuleIdentity, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "iso", "NotificationType", "Counter64", "ObjectIdentity", "Counter32", "ModuleIdentity", "Gauge32", "IpAddress")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
UUID, = mibBuilder.importSymbols("UUID-TC-MIB", "UUID")
vmwNsxManager, = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwNsxManager")
vmwNsxManagerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1))
vmwNsxManagerMIB.setRevisions(('2016-06-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vmwNsxManagerMIB.setRevisionsDescriptions(('This is the initial version of the NSX Manager MIB. It describes all the notifications sent from the NSX Manager appliance. WARNING: This mib module will not be backward compatible with next version. ',))
if mibBuilder.loadTexts: vmwNsxManagerMIB.setLastUpdated('201606020000Z')
if mibBuilder.loadTexts: vmwNsxManagerMIB.setOrganization('VMware, Inc')
if mibBuilder.loadTexts: vmwNsxManagerMIB.setContactInfo('VMware, Inc 3401 Hillview Ave Palo Alto, CA 94304 Tel: 1-877-486-9273 or 650-427-5000 Fax: 650-427-5001 Web: http://communities.vmware.com/community/developer/forums/managementapi ')
if mibBuilder.loadTexts: vmwNsxManagerMIB.setDescription('This MIB file contains the information that the receiving party needs in order to interpret SNMP traps sent by NSX Manager. VMware NSX for vSphere is a key product in the SDDC architecture. With NSX, virtualization delivers for networking what it has already delivered for compute and storage. In much the same way that server virtualization programmatically creates, snapshots, deletes and restores software-based virtual machines (VMs), NSX network virtualization programmatically creates, snapshots, deletes, and restores software-based virtual networks. The result is a completely transformative approach to networking that not only enables data center managers to achieve orders of magnitude better agility and economics, but also allows for a vastly simplified operational model for the underlying physical network. With the ability to be deployed on any IP network, including both existing traditional networking models and next-generation fabric architectures from any vendor, NSX is a completely non-disruptive solution. In fact, with NSX, the physical network infrastructure you already have is all you need to deploy a software-defined data center. The NSX Manager provides the graphical user interface (GUI) and the REST APIs for creating, configuring, and monitoring NSX components, such as controllers, logical switches, and edge services gateways. The NSX Manager provides an aggregated system view and is the centralized network management component of NSX. NSX Manager is installed as a virtual appliance on any ESX host in your vCenter environment. Support requests can be filed with VMware using KB article: http://kb.vmware.com/kb/2006985 To reach NSX Manager Service Composer UI, login to vSphere UI(https://<vsphere-ip>)->Networking & Security->Service Composer')
class VmwNsxManagerTypeSeverity(TextualConvention, Integer32):
    description = 'Severity enumeration definition of NSX Manager events'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("informational", 1), ("low", 2), ("medium", 3), ("major", 4), ("critical", 5), ("high", 6))

vmwNsxMAlertData = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1))
if mibBuilder.loadTexts: vmwNsxMAlertData.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMAlertData.setDescription('This members of this group are the OIDs for VarBinds that contain data for ALL Alerts.')
vmwNsxMNotification = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2))
if mibBuilder.loadTexts: vmwNsxMNotification.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMNotification.setDescription('All notifications for NSX Manager use this oid prefix.')
vmwNsxMEventCode = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMEventCode.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEventCode.setDescription('The event code of the alert that was generated. To fetch a list of all the events with their code, severity and description please invoke the nsx-manager url https://<nsx-manager-host>/api/2.0/systemevent/eventcode . The event code specifically identifies each individual event type. This event code is uniquely assigned only once to a particular event type.')
vmwNsxMEventTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 2), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMEventTimestamp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEventTimestamp.setDescription('The timestamp when the event was raised in the NSX Manager.')
vmwNsxMEventMessage = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMEventMessage.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEventMessage.setDescription('This object provides a human readable description of the event or group of events')
vmwNsxMEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 4), VmwNsxManagerTypeSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMEventSeverity.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEventSeverity.setDescription('The severity for the event that was generated. The severity is pre-defined and can only be changed from the NSX Manager section of vsphere web client if the administrator so wishes.')
vmwNsxMEventComponent = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMEventComponent.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEventComponent.setDescription('The NSX manager component where this event was generated.')
vmwNsxMUuid = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 6), UUID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMUuid.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUuid.setDescription('The NSX manager UUID where this event was generated.')
vmwNsxMCount = MibScalar((1, 3, 6, 1, 4, 1, 6876, 90, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vmwNsxMCount.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMCount.setDescription('The count of the number of events for a particular group raised in the last 5 minute interval.')
vmwNsxMBranch = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 0))
if mibBuilder.loadTexts: vmwNsxMBranch.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMBranch.setDescription('Branch segregated out for various groups and other future requirements.')
vmwNsxMGroupsBranch = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 0, 1))
if mibBuilder.loadTexts: vmwNsxMGroupsBranch.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGroupsBranch.setDescription('Grouped Notifications will have this OID prefix.')
vmwNsxMGroupsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 0, 1, 0))
if mibBuilder.loadTexts: vmwNsxMGroupsPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGroupsPrefix.setDescription('Prefix added to place zero in penultimate sub-identifier of group oids.')
vmwNsxMConfigGroup = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 0, 1, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMCount"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMConfigGroup.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMConfigGroup.setDescription('Configuration notifications that are grouped will have this OID prefix.')
vmwNsxMSnmp = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 1))
if mibBuilder.loadTexts: vmwNsxMSnmp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSnmp.setDescription('Notifications that are Snmp related will have this OID prefix.')
vmwNsxMSnmpPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 1, 0))
if mibBuilder.loadTexts: vmwNsxMSnmpPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSnmpPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Snmp module.")
vmwNsxMSnmpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 1, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSnmpDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSnmpDisabled.setDescription('This notification is sent when the sending out of Snmp traps is disabled. This would most likely be the last Snmp trap the snmp manager receives. You may some times not receive it in case of high volume of traps. In those cases you can rely on the heartbeat traps not being sent out. Action required: None. If the sending of Snmp traps is enabled a warmStart trap is received. Frequency of traps: Once, whenever the sending snmp traps is disabled.')
vmwNsxMSnmpManagerConfigUpdated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 1, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSnmpManagerConfigUpdated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSnmpManagerConfigUpdated.setDescription("This notification is sent when the snmp manager configuration has been updated. The event message will carry the semicolon separated new snmp managers' details. Action required: None Frequency of traps: Once, whenever the Snmp manager configuration is updated.")
vmwNsxMSecurity = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2))
if mibBuilder.loadTexts: vmwNsxMSecurity.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSecurity.setDescription('Notifications that are security related will have this OID prefix.')
vmwNsxMSecurityPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0))
if mibBuilder.loadTexts: vmwNsxMSecurityPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSecurityPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for security module.")
vmwNsxMIpAddedBlackList = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpAddedBlackList.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpAddedBlackList.setDescription('Whenever user authentication fails for number of times that user is blacklisted and further login attempts are disabled for that user from given IP address for some time. Action required: None Frequency of traps: Whenever user authentication fails consecutively within some time.')
vmwNsxMIpRemovedBlackList = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpRemovedBlackList.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpRemovedBlackList.setDescription('After user is blacklisted, after blacklist duration expires, user is removed from blacklist. Action required: None Frequency of traps: Whenever blacklist duration expires for any user.')
vmwNsxMSsoConfigFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSsoConfigFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSsoConfigFailure.setDescription('Whenever configuration of lookup service / SSO fails due to various reasons like invalid credentials, invalid configuration, time sync problem etc. Action required: Check the event message and reconfigure lookup service with correct details. Frequency of traps: Once per failed configuration of lookup service.')
vmwNsxMSsoUnconfigured = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSsoUnconfigured.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSsoUnconfigured.setDescription('Whenever user unconfigures lookup service. Action required: None Frequency of traps: Once per unconfiguration event of lookup service.')
vmwNsxMUserRoleAssigned = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUserRoleAssigned.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUserRoleAssigned.setDescription('When role is assigned on NSX manager for vCenter user. Action required: None Frequency of traps: Once for each user who is assigned role.')
vmwNsxMUserRoleUnassigned = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUserRoleUnassigned.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUserRoleUnassigned.setDescription('When role is unassigned on NSX manager for vCenter user. Action: None Frequency of traps: Once for each user where role is removed.')
vmwNsxMGroupRoleAssigned = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGroupRoleAssigned.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGroupRoleAssigned.setDescription('When role is assigned on NSX manager for vCenter group. Action required: None Frequency of traps: Once for each group who is assigned role.')
vmwNsxMGroupRoleUnassigned = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGroupRoleUnassigned.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGroupRoleUnassigned.setDescription('When role is unassigned on NSX manager for vCenter group. Action required: None Frequency of traps: Once for each group where role is removed.')
vmwNsxMVcLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVcLoginFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVcLoginFailed.setDescription('Whenever Connection with vCenter starts failing due to invalid credentials. Action required: Reconfigure NSX Manager vCenter configuration with correct credentials.')
vmwNsxMVcDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 10)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVcDisconnected.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVcDisconnected.setDescription('Whenever there is disconnectivity for default VCenter Connection maintained by NSX. Action required: Administrator needs to check the connectivity with vCenter for network problems or any other reasons.')
vmwNsxMLostVcConnectivity = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 11)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMLostVcConnectivity.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMLostVcConnectivity.setDescription('Whenever there is disconnectivity for default VCenter Connection maintained by NSX. Action required: Administrator needs to check the connectivity with vCenter for network problems or any other reasons.')
vmwNsxMSsoDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 2, 0, 12)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSsoDisconnected.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSsoDisconnected.setDescription('Whenever there is disconnection with SSO lookup service. Action required: Please check the configuration for possible disconnection reasons like Invalid Credentials, Time sync issues, Network connectivity problems etc. Navigate to Appliance management Web UI in browser (https://<nsx-manager-host>/) traverse to Manage vCenter Registration tab and verify the configuration for SSO Lookupservice. Frequency of traps: Once per disconnect event, default frequency to check SSO connection state is 1 hour.')
vmwNsxMFirewall = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3))
if mibBuilder.loadTexts: vmwNsxMFirewall.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewall.setDescription('Notifications that are firewall related will have this OID prefix.')
vmwNsxMFirewallPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0))
if mibBuilder.loadTexts: vmwNsxMFirewallPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for firewall module.")
vmwNsxMFltrCnfgUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFltrCnfgUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFltrCnfgUpdateFailed.setDescription('NSX Manager failed to enforce DFW. VMs on this host may not be protected by the DFW. Contextual data provided with this event may indicate the cause of this failure. This could happen if the VIB version mismatches on the NSX Manager and ESX host. This may happen during an upgrade. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFltrCnfgNotAppliedToVnic = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFltrCnfgNotAppliedToVnic.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFltrCnfgNotAppliedToVnic.setDescription('NSX Manager failed to enforce DFW configuration on a vnic. This particular VM may not be protected by the DFW. Contextual data provided with this event may indicate the cause of this failure.This could happen if the VIB version mismatches on the NSX Manager and ESX host. This may happen during an upgrade. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFltrCnfgAppliedToVnic = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFltrCnfgAppliedToVnic.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFltrCnfgAppliedToVnic.setDescription('Successfully updated filter config. Action required: None')
vmwNsxMFltrCreatedForVnic = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFltrCreatedForVnic.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFltrCreatedForVnic.setDescription('Filter created. DFW is enforced in the datapath for the vnic. Action required: None')
vmwNsxMFltrDeletedForVnic = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFltrDeletedForVnic.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFltrDeletedForVnic.setDescription('Filter deleted. DFW is removed from the vnic. Action required: None')
vmwNsxMFirewallConfigUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallConfigUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallConfigUpdateFailed.setDescription('Firewall rule Configuration between the NSX Manager and the host is not in sync. Contextual data provided with this event may indicate the cause of this failure. Verify that the host in question was properly prepared by NSX Manager. Collect error logs (vsfwd.log) when the host received firewall config. Force sync firewall config using ForceSync API/UI. See kb.vmware.com/kb/2125437 . If the issue persists, please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFirewallRuleFailedVnic = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallRuleFailedVnic.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallRuleFailedVnic.setDescription('Failed to apply Distributed Firewall configuration. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vmkernel.log) when the firewall configuration was applied to the vnic. vsip kernel heaps may not have enough free memory. Check VSFWD logs . See kb.vmware.com/kb/2125437. If the issue persists, please collect the ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFirewallRuleAppliedVnic = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallRuleAppliedVnic.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallRuleAppliedVnic.setDescription('Applied firewall config. Key value will have context info like generation number and also other debugging info. Action required: None')
vmwNsxMCntnrCnfgUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMCntnrCnfgUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMCntnrCnfgUpdateFailed.setDescription('Failed receive, parse or update the container configuration. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory. Check VSFWD logs. See kb.vmware.com/kb/2125437 . If the issue persists, please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFlowMissed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 10)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFlowMissed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFlowMissed.setDescription('Flow missed. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory and vsfwd memory consumption is within resource limits. Check VSFWD logs. See kb.vmware.com/kb/2125437. If the issue persists, please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMSpoofGuardCnfgUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 11)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardCnfgUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardCnfgUpdateFailed.setDescription('Failed to receive, parse or Update the spoofguard configuration. Contextual data provided with this event may indicate the cause of this failure. Verify that the host in question was properly prepared by NSX Manager. Collect error logs (vmkernel.log) when the spoofguard configuration was applied to the host. For Sync the firewall configuration . See kb.vmware.com/kb/2125437.')
vmwNsxMSpoofGuardFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 12)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardFailed.setDescription('Failed to apply spoofguard to the vnic. Contextual data provided with this event may indicate the cause of this failure. Verify that vsip kernel heaps have enough free memory. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMSpoofGuardApplied = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 13)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardApplied.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardApplied.setDescription('Enabled spoofguard for vnic. Action required: None')
vmwNsxMSpoofGuardDisableFail = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 14)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardDisableFail.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardDisableFail.setDescription('Failed to disable spoofguard on the vnic. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMSpoofGuardDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 15)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardDisabled.setDescription('Disabled spoofguard for vnic. Action required: None')
vmwNsxMLegacyAppServiceDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 16)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMLegacyAppServiceDeletionFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMLegacyAppServiceDeletionFailed.setDescription('A notification generated when legacy application service VM deletion failed.')
vmwNsxMFirewallCpuThresholdCrossed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 17)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallCpuThresholdCrossed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallCpuThresholdCrossed.setDescription('vsfwd CPU usage threshold was exceeded. Reduce the amount of traffic of VMs on the host in question.')
vmwNsxMFirewallMemThresholdCrossed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 18)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallMemThresholdCrossed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallMemThresholdCrossed.setDescription('vsfwd memory threshold exceeded. Reduce the number of of VMs on the host in question, reduce the number of rules or containers in firewall config. Use appliedTo feature to limit the number of rules for the current cluster.')
vmwNsxMConnPerSecThrshldCrossed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 19)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMConnPerSecThrshldCrossed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMConnPerSecThrshldCrossed.setDescription('vsfwd Connectons Per Second (CPS) threshold exceeded. Reduce the amount of new connections of VMs on the host in question.')
vmwNsxMFirewallCnfgUpdateTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 20)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallCnfgUpdateTimedOut.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallCnfgUpdateTimedOut.setDescription('NSX Manager waits for 2 minutes after publishing the Firewall configuration to each host in the cluster. If a host takes more than 2 minutes to process the data, it times out. Please check the Host in question. See if VSFWD is functioning or not. Also use CLI commands to verify if the rule realization is working properly or not. See kb.vmware.com/kb/2125437. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMSpoofGuardCnfgUpdateTmOut = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 21)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardCnfgUpdateTmOut.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardCnfgUpdateTmOut.setDescription('NSX Manager waits for 2 minutes after publishing the Spoofguard configuration to each host in the cluster. If a host takes more than 2 minutes to process the data, it times out. Please check the Host in question. See if VSFWD is functioning or not. Also use CLI commands to verify if the rule realization is working properly or not. See kb.vmware.com/kb/2125437. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFirewallPublishFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 22)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallPublishFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallPublishFailed.setDescription('Firewall Configuration Publishing has failed for a given cluster/host. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMCntnrUpdatePublishFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 23)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMCntnrUpdatePublishFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMCntnrUpdatePublishFailed.setDescription('Publishing of container (IP/MAC/vNIC) update pdate failed for a given host/cluster object. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMSpoofGuardUpdatePublishFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 24)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSpoofGuardUpdatePublishFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSpoofGuardUpdatePublishFailed.setDescription('The publishing of the spoofguard updates on this host has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMExcludeListPublishFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 25)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMExcludeListPublishFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMExcludeListPublishFailed.setDescription('The publishing of the exclude list or updates to the exclude list on this host has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFirewallCnfgUpdateOnDltCntnr = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 26)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallCnfgUpdateOnDltCntnr.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallCnfgUpdateOnDltCntnr.setDescription('Deletion of the object referenced in firewall rules. Action required: Go to the NSX manager DFW UI. All the invalid reference are marked invalid on the UI as well. Please remove the orphaned referenced and update the firewall rules.')
vmwNsxMHostSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 27)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMHostSyncFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMHostSyncFailed.setDescription('Host-level force synchronization has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMHostSynced = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 28)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMHostSynced.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMHostSynced.setDescription('Force Sync operation for host succeeded. Action required: None')
vmwNsxMFirewallInstalled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 29)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallInstalled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallInstalled.setDescription('The Distributed Firewall was successfully Installed on the host.')
vmwNsxMFirewallInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 30)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallInstallFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallInstallFailed.setDescription('The Distributed Firewall Installation has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFirewallClusterInstalled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 31)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallClusterInstalled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallClusterInstalled.setDescription('The Distributed Firewall has been installed at the request of a user.')
vmwNsxMFirewallClusterUninstalled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 32)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallClusterUninstalled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallClusterUninstalled.setDescription('The Distributed Firewall has been uninstalled at the request of a user.')
vmwNsxMFirewallClusterDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 33)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallClusterDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallClusterDisabled.setDescription('The Distributed Firewall has been disabeld on the cluster at the request of a user.')
vmwNsxMFirewallForceSyncClusterFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 34)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallForceSyncClusterFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallForceSyncClusterFailed.setDescription('Force Sync operation for the cluster has failed. Use CLI commands to look at the logs and verify if any error messages appeared during the operation. See kb.vmware.com/kb/2125437. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See http://kb.vmware.com/kb/2074678 and http://kb.vmware.com/kb/1010705')
vmwNsxMFirewallForceSyncClusterSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 35)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallForceSyncClusterSuccess.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallForceSyncClusterSuccess.setDescription('Force Sync operation for cluster succeeded. Action required: None')
vmwNsxMFirewallVsfwdProcessStarted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 3, 0, 36)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallVsfwdProcessStarted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallVsfwdProcessStarted.setDescription('vsfwd process started on host. Action required: None')
vmwNsxMEdge = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4))
if mibBuilder.loadTexts: vmwNsxMEdge.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdge.setDescription('Notifications that are edge related will have this OID prefix.')
vmwNsxMEdgePrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0))
if mibBuilder.loadTexts: vmwNsxMEdgePrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgePrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for edge module.")
vmwNsxMEdgeNoVmServing = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeNoVmServing.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeNoVmServing.setDescription('None of the Edge VMs found in serving state. There is a possibility of network disruption. Action required: System auto recovers from this state today. Event should be followed by traps with event code 30202 or 30203')
vmwNsxMEdgeGatewayCreated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayCreated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayCreated.setDescription('Edge Gateway created. Action required: None')
vmwNsxMEdgeVmBadState = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmBadState.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmBadState.setDescription('Edge VM in bad state. Needs a force sync. Action required: System auto triggres force sync but if problem is sustained then manual force sync should be triggered. For ESG force sync is disruptive and will reboot edge VMs.')
vmwNsxMEdgeVmCommFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmCommFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmCommFailed.setDescription('Failed to communicate with the Edge VM. Action required: Need investigation depending upon comunication channel. Log needs to be checked for VIX error code for futher action.')
vmwNsxMEdgeVmCnfgChanged = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmCnfgChanged.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmCnfgChanged.setDescription('A notification generated when NSX Edge VM configuration is changed. Action required: None')
vmwNsxMEdgeGatewayDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayDeleted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayDeleted.setDescription('A notification generated when Edge Gateway is deleted. Action required: None')
vmwNsxMEdgeGatewayReDeployed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayReDeployed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayReDeployed.setDescription('A notification generated when Edge Gateway is redeployed. Action required: None')
vmwNsxMEdgeVmPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmPowerOff.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmPowerOff.setDescription('A notification generated when NSX Edge VM is powered off. Action required: None')
vmwNsxMEdgeApplianceSizeChanged = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeApplianceSizeChanged.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeApplianceSizeChanged.setDescription('A notification generated when Edge appliance size has changed. Action required: None')
vmwNsxMEdgeUpgrade51x = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 10)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeUpgrade51x.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeUpgrade51x.setDescription('A notification generated when Edge Gateway is upgraded to 5.1.x. Action required: None')
vmwNsxMEdgeLicenseChanged = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 11)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeLicenseChanged.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeLicenseChanged.setDescription('A notification generated when Edge licensing changed on vCenter Server. Action required: None')
vmwNsxMEdgeApplianceMoved = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 12)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeApplianceMoved.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeApplianceMoved.setDescription('A notification generated when Edge appliance is moved in the vCenter inventory.')
vmwNsxMEdgeApplianceNotFound = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 13)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeApplianceNotFound.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeApplianceNotFound.setDescription('A notification generated when Edge appliance not found in the vCenter inventory. Action required: If VM is accidentally deleted, redeploy edge.')
vmwNsxMEdgeVMHealthCheckMiss = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 14)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVMHealthCheckMiss.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVMHealthCheckMiss.setDescription('A notification generated when Edge VM is not responding to health check. Action required: Communicaiton issues between manager and edge. Log analysis required to root cause issue.')
vmwNsxMEdgeHealthCheckMiss = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 15)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHealthCheckMiss.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHealthCheckMiss.setDescription('A notification generated when none of the Edge VMs are found in serving state. There is a possibility of network disruption. Action required: Commnunicaiton issues between manager and edge. Log analysis required to root cause issue.')
vmwNsxMEdgeCommAgentNotConnected = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 16)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeCommAgentNotConnected.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeCommAgentNotConnected.setDescription('A notification generated when Edge Communication Agent is not connected to vCenter Server. Action required: Check VSM and VC connectivity. Try registering VSM to VC')
vmwNsxMApplianceWithDifferentId = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 17)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMApplianceWithDifferentId.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMApplianceWithDifferentId.setDescription('A notification generated when Edge VM is discovered with a different vmId. Action required: None')
vmwNsxMFirewallRuleModified = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 18)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFirewallRuleModified.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFirewallRuleModified.setDescription('A notification generated when Edge firewall rule is modified. Action required: Revisit firewall rule and perform required updates')
vmwNsxMEdgeAntiAffinityRuleViolated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 19)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeAntiAffinityRuleViolated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeAntiAffinityRuleViolated.setDescription('A notification generated when powering on NSX Edge appliance violates a virtual machine anti-affinity rule. Action required: Anti affinity rules removed from cluster. Both HA VM may run on same host. Go to VC and please revisit anti affinity rules on Cluster')
vmwNsxMEdgeHaEnabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 20)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHaEnabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHaEnabled.setDescription('A notification generated when NSX Edge HighAvailability is enabled. Action required: None')
vmwNsxMEdgeHaDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 21)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHaDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHaDisabled.setDescription('A notification generated when NSX Edge HighAvailability is disabled. Action required: None')
vmwNsxMEdgeGatewayRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 22)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayRecovered.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayRecovered.setDescription('A notification generated when NSX Edge Gateway has recovered and now responding to health check. Action required: None')
vmwNsxMEdgeVmRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 23)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmRecovered.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmRecovered.setDescription('A notification generated when NSX Edge VM has recovered and now responding to health check. Actione required: None')
vmwNsxMEdgeGatewayUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 24)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayUpgraded.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeGatewayUpgraded.setDescription('A notification generated when Edge Gateway is upgraded. Action required: None')
vmwNsxMEdgeVmHlthChkDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 25)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmHlthChkDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmHlthChkDisabled.setDescription('A notification generated when Edge VM health check is disabled on consecutive critical vix errors. Please redeploy or force sync vm to resume health check. Action required: This points to environmental issues that lead to repeated failure over vix. Log analysis needs to be done to identify root cause. Post resoving issues force sync edge vm to resume health check. Force sync and redeploy are disruptive operation.')
vmwNsxMEdgePrePublishFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 26)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgePrePublishFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgePrePublishFailed.setDescription('A notification generated when Pre Publish has failed on Edge VM. Action required: Firewall rules might be out of sync. System auto recovers but if problem persists then trigger force sync.')
vmwNsxMEdgeForcedSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 27)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeForcedSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeForcedSync.setDescription('A notification generated when Edge VM was force synced. Action required: None')
vmwNsxMEdgeVmBooted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 28)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmBooted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmBooted.setDescription('A notification generated when Edge VM was booted. Action required: None')
vmwNsxMEdgeVmInBadState = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 29)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmInBadState.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmInBadState.setDescription('A notification generated when Edge VM is in Bad State. Needs a force sync. Action required: Force sync required.')
vmwNsxMEdgeVmCpuUsageIncreased = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 30)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmCpuUsageIncreased.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmCpuUsageIncreased.setDescription('A notification generated when Edge VM CPU usage has increased. Action required: Spikes are normal but collect tech support logs for further analysis if high CPU sustained for longer duration.')
vmwNsxMEdgeVmMemUsageIncreased = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 31)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmMemUsageIncreased.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmMemUsageIncreased.setDescription('A notification generated when Edge VM Memory usage has increased. Action required: System recovers but collect tech support logs for further analysis.')
vmwNsxMEdgeVmProcessFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 32)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmProcessFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmProcessFailure.setDescription('A notification generated when Edge VM process monitor detects a process failure. Action required: System recovers but collect tech support logs for further analysis.')
vmwNsxMEdgeVmSysTimeBad = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 33)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmSysTimeBad.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmSysTimeBad.setDescription('A notification generated when Edge VM system time is bad. Action required: System recovers. Check NTP setting on hosts.')
vmwNsxMEdgeVmSysTimeSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 34)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmSysTimeSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmSysTimeSync.setDescription('A notification generated when Edge VM system time sync up happens. Action required: None')
vmwNsxMEdgeAesniCryptoEngineUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 35)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeAesniCryptoEngineUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeAesniCryptoEngineUp.setDescription('A notification generated when AESNI crypto engine is up. Action required: None')
vmwNsxMEdgeAesniCryptoEngineDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 36)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeAesniCryptoEngineDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeAesniCryptoEngineDown.setDescription('A notification generated when AESNI crypto engine is down. Action required: None')
vmwNsxMEdgeVmOom = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 37)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeVmOom.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeVmOom.setDescription('A notification generated when Edge VM is out of memory. The Edge is rebooting in 3 seconds. Action required: Collect tech support for further analysis.')
vmwNsxMEdgeFileSysRo = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 38)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeFileSysRo.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeFileSysRo.setDescription('A notification generated when Edge file system is read only. Action required: Check datastore issues, once resolved force sync is required.')
vmwNsxMEdgeHaCommDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 39)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHaCommDisconnected.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHaCommDisconnected.setDescription('A notification generated when Edge HighAvailability communication channel is disconnected from peer node. Action required: None')
vmwNsxMEdgeHaSwitchOverSelf = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 40)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHaSwitchOverSelf.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHaSwitchOverSelf.setDescription("A notification generated when High Availability is disabled for NSX Edge. The primary NSX Edge VM has its state transitioned from ACTIVE to SELF. High Availability (HA) ensures that NSX Edge services are always available, by deploying an additional Edge VM for failover. The primary NSX Edge VM is the ACTIVE node and the secondary VM is the STANDBY node. Whenever the ACTIVE VM is unreachable on account of VM powered off or network connectivity issues, the STANDBY VM takes over the ACTIVE vm's role. In the event NSX Edge High Availability is disabled, the STANDBY VM is deleted and the ACTIVE VM continues to function with its ACTIVE state transitioned to SELF. Action required: None")
vmwNsxMEdgeHaSwitchOverActive = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 41)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHaSwitchOverActive.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHaSwitchOverActive.setDescription("A notification generated when High Availability switch over has happened for NSX Edge. The secondary NSX Edge VM has its state transitioned from STANDBY to ACTIVE. High Availability (HA) ensures that NSX Edge services are always available, by deploying an additional Edge VM for failover. The primary NSX Edge VM is the ACTIVE node and the secondary VM is the STANDBY node. Whenever the ACTIVE VM is unreachable on account of VM powered off or network connectivity issues, the STANDBY VM takes over the ACTIVE vm's role. Action required: None")
vmwNsxMEdgeHaSwitchOverStandby = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 42)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeHaSwitchOverStandby.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeHaSwitchOverStandby.setDescription("A notification generated when High Availability switch over has happened for NSX Edge. The primary NSX Edge VM has its state transitioned from ACTIVE to STANDBY. High Availability (HA) ensures that NSX Edge services are always available, by deploying an additional Edge VM for failover. The primary NSX Edge VM is the ACTIVE node and the secondary VM is the STANDBY node. Whenever the ACTIVE VM is unreachable on account of VM powered off or network connectivity issues, the STANDBY VM takes over the ACTIVE vm's role. When connectivity is re-established between the NSX Edge VM's, one of the VM's state is transitioned from ACTIVE to STANDBY. Action required: None")
vmwNsxMEdgeMonitorProcessFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 43)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeMonitorProcessFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeMonitorProcessFailure.setDescription('A notification generated when Edge process monitor detected a process failure. Action required: Collect tech support logs for further analysis.')
vmwNsxMLbVirtualServerPoolUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 44)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMLbVirtualServerPoolUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMLbVirtualServerPoolUp.setDescription('A notification generated when LoadBalancer virtualServer/pool is up. Action required: None')
vmwNsxMLbVirtualServerPoolDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 45)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMLbVirtualServerPoolDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMLbVirtualServerPoolDown.setDescription('A notification generated when LoadBalancer virtualServer/pool is down.')
vmwNsxMLbVirtualServerPoolWrong = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 46)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMLbVirtualServerPoolWrong.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMLbVirtualServerPoolWrong.setDescription('A notification generated when LoadBalancer virtualServer/pool state is wrong.')
vmwNsxMLbPoolWarning = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 47)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMLbPoolWarning.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMLbPoolWarning.setDescription('A notification generated when LoadBalancer pool changed to a warning state.')
vmwNsxMIpsecChannelUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 48)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpsecChannelUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpsecChannelUp.setDescription('A notification generated when IPsec Channel is up. Action required: None')
vmwNsxMIpsecChannelDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 49)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpsecChannelDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpsecChannelDown.setDescription('A notification generated when IPsec Channel is down. Action required: Collect tech support logs for further analysis.')
vmwNsxMIpsecTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 50)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpsecTunnelUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpsecTunnelUp.setDescription('A notification generated when IPsec Tunnel is up. Action required: None')
vmwNsxMIpsecTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 51)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpsecTunnelDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpsecTunnelDown.setDescription('A notification generated when IPsec Tunnel is down. Action required: Collect tech support logs for further analysis.')
vmwNsxMIpsecChannelUnknown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 52)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpsecChannelUnknown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpsecChannelUnknown.setDescription('A notification generated when IPsec Channel status is unknown. Action required: Collect tech support logs for further analysis.')
vmwNsxMIpsecTunnelUnknown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 53)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMIpsecTunnelUnknown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMIpsecTunnelUnknown.setDescription('A notification generated when IPsec Tunnel status is unknown. Action required: Collect tech support logs for further analysis.')
vmwNsxMGlobalLbMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 54)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberUp.setDescription('A notification generated when Global Loadbalancer member status is up. Action required: None')
vmwNsxMGlobalLbMemberWarning = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 55)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberWarning.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberWarning.setDescription('A notification generated when Global Loadbalancer member status is warning.')
vmwNsxMGlobalLbMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 56)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberDown.setDescription('A notification generated when Global Loadbalancer member status is down.')
vmwNsxMGlobalLbMemberUnknown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 57)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberUnknown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGlobalLbMemberUnknown.setDescription('A notification generated when Global Loadbalancer member status is unknown.')
vmwNsxMGlobalLbPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 58)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGlobalLbPeerUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGlobalLbPeerUp.setDescription('A notification generated when Global Loadbalancer peer status is up. Action required: None')
vmwNsxMGlobalLbPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 59)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGlobalLbPeerDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGlobalLbPeerDown.setDescription('A notification generated when Global Loadbalancer peer status is down.')
vmwNsxMDhcpServiceDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 60)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDhcpServiceDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDhcpServiceDisabled.setDescription('A notification generated when DHCP Relay Service is disabled.')
vmwNsxMEdgeResourceReservationFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 61)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeResourceReservationFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeResourceReservationFailure.setDescription('Insufficient CPU and/or Memory Resources available on Host or Resource Pool, during resource reservation at the time of NSX Edge deployment. Resources are explicitly reserved to ensure sufficient resources are available for NSX Edge to service High Availability. User can view the available resources vs reserved resources by navigating to the page Home > Hosts and Clusters > [Cluster-name] > Monitor > Resource Reservation. Action required: After checking available resources, re-specify the resources as part of appliance configuration so that resource reservation succeeds.')
vmwNsxMEdgeSplitBrainDetected = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 62)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeSplitBrainDetected.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeSplitBrainDetected.setDescription("Split Brain detected for NSX Edge with HighAvailability. NSX Edge VM's configured for High Availability are unable to determine if the other VM is alive due to network failure. In such scenario, both the VM's think the other is not alive and take on the ACTIVE state. This may cause network disruption. Action required: User will need to check network infrastructure (virtual and physical) to look for any failures, specially on the interfaces and the path configured for HA.")
vmwNsxMEdgeSplitBrainRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 63)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeSplitBrainRecovered.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeSplitBrainRecovered.setDescription("Resolved Split Brain for NSX Edge with HighAvailability. The network path used by the NSX Edge VM's High Availability has been re-established. NSX Edge VM's are able to communicate with each other, and one of the VM has taken the STANDBY role, resolving the ACTIVE-ACTIVE split brain scenario. Action required: None")
vmwNsxMEdgeSplitBrainRecoveryAttempt = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 4, 0, 64)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEdgeSplitBrainRecoveryAttempt.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEdgeSplitBrainRecoveryAttempt.setDescription('Attempted Split Brain resolution for NSX Edge. Split Brain recovery will be attempted on NSX Edge versions prior to 6.2.3, which are not based on BFD. Action required: None')
vmwNsxMEndpoint = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5))
if mibBuilder.loadTexts: vmwNsxMEndpoint.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEndpoint.setDescription('Notifications that are Endpoint related will have this OID prefix.')
vmwNsxMEndpointPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0))
if mibBuilder.loadTexts: vmwNsxMEndpointPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEndpointPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Endpoint module.")
vmwNsxMEndpointThinAgentEnabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEndpointThinAgentEnabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEndpointThinAgentEnabled.setDescription('A notification generated when Thin agent is enabled.')
vmwNsxMGuestIntrspctnEnabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnEnabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnEnabled.setDescription('A notification generated when Guest Introspection solution is enabled.')
vmwNsxMGuestIntrspctnIncompatibleEsx = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnIncompatibleEsx.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnIncompatibleEsx.setDescription('A notification generated when Guest Introspection solution was contacted by an incompatible version of the ESX module.')
vmwNsxMGuestIntrspctnEsxConnFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnEsxConnFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnEsxConnFailed.setDescription('A notification generated when connection between the ESX module and the Guest Introspection solution failed.')
vmwNsxMGuestIntrspctnStatusRcvFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnStatusRcvFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnStatusRcvFailed.setDescription('A notification generated when failed to receive status from Guest Introspection solution.')
vmwNsxMEsxModuleEnabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEsxModuleEnabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEsxModuleEnabled.setDescription('A notification generated when ESX module is enabled.')
vmwNsxMEsxModuleUninstalled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEsxModuleUninstalled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEsxModuleUninstalled.setDescription('A notification generated when ESX module is uninstalled.')
vmwNsxMGuestIntrspctnHstMxMssngRep = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnHstMxMssngRep.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMGuestIntrspctnHstMxMssngRep.setDescription('A notification generated when Guest Introspection host MUX is missing report.')
vmwNsxMEndpointUndefined = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 5, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEndpointUndefined.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEndpointUndefined.setDescription('A notification generated when Endpoint is undefined.')
vmwNsxMEam = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 6))
if mibBuilder.loadTexts: vmwNsxMEam.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEam.setDescription('Notifications that are Eam related will have this OID prefix.')
vmwNsxMEamPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 6, 0))
if mibBuilder.loadTexts: vmwNsxMEamPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEamPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Eam module.")
vmwNsxMEamGenericAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 6, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMEamGenericAlarm.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMEamGenericAlarm.setDescription('EAM reports problems to NSX during vib/service VM install/upgrade as these traps. Action required: Use resolve API to resolve the Alarm. Frequency of traps: N times per cluster per user action, where N is number of hosts in a cluster.')
vmwNsxMFabric = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7))
if mibBuilder.loadTexts: vmwNsxMFabric.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabric.setDescription('Notifications that are Fabric related will have this OID prefix.')
vmwNsxMFabricPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0))
if mibBuilder.loadTexts: vmwNsxMFabricPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Fabric module.")
vmwNsxMFabricDplymntStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricDplymntStatusChanged.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricDplymntStatusChanged.setDescription('The status of a service on a cluster has changed. It can change to RED(Failure), GREEN(Success), YELLOW(in-progress). Action required: RED state would be accompanied with an EAM Alarm/Event/Trap, that indicates root cause. Use resolver API to fix it. Frequency of traps: Once per state change. State could change 2-3 times per user operation [Deploy/Undeploy/Update]')
vmwNsxMFabricDplymntUnitCreated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricDplymntUnitCreated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricDplymntUnitCreated.setDescription('NSX Manager has created the required objects for deploying a service on a cluster. This would be followed by deployment of the service on all hosts in the cluster. Action required: None Frequency: Once per cluster')
vmwNsxMFabricDplymntUnitUpdated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricDplymntUnitUpdated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricDplymntUnitUpdated.setDescription('NSX Manager has made changes in the objects required for deploying a service on a cluster. This would be followed by updation of the service on all hosts in the cluster. Action required: None Frequency of traps: Once per cluster per user operation [Update]')
vmwNsxMFabricDplymntUnitDestroyed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricDplymntUnitDestroyed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricDplymntUnitDestroyed.setDescription('A service has been removed from all hosts in a cluster. NSX Manager has deleted the objects for the service on the cluster. Action required: None Frequency of traps: Once per cluster')
vmwNsxMDataStoreNotCnfgrdOnHost = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDataStoreNotCnfgrdOnHost.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDataStoreNotCnfgrdOnHost.setDescription('Datastore could not be configured on host, probably its not connected. Action required: Ensure that datastore is connected to the host. Use resolve API to resolve the Alarm. Service will be deployed. Frequency of traps: Once per cluster per user operation [Deploy].')
vmwNsxMFabricDplymntInstallationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricDplymntInstallationFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricDplymntInstallationFailed.setDescription('Installation of service failed, please check if ovf/vib urls are accessible, in correct format and all the properties in ovf environment have been configured in service attributes. Please check logs for details. Action required: Ensure that ovf/vib urls accessible from VC and are in correct format. Use resolve API to resolve the Alarm. Service will be deployed. Frequency of traps: Once per cluster per user operation [Deploy].')
vmwNsxMFabricAgentCreated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricAgentCreated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricAgentCreated.setDescription('The service has been successfully installed on a host. Action required: None Frequency of traps: N times per cluster, where N is number of hosts in a cluster.')
vmwNsxMFabricAgentDestroyed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricAgentDestroyed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricAgentDestroyed.setDescription('The service has been successfully removed from a host. Action required: None Frequency of traps: N times per cluster, where N is number of hosts in a cluster.')
vmwNsxMFabricSrvceNeedsRedplymnt = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricSrvceNeedsRedplymnt.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricSrvceNeedsRedplymnt.setDescription('Service will need to be redeployed as the location of the OVF / VIB bundles to be deployed has changed. Action required: Use resolve API to resolve the Alarm. Service will be redeployed. Frequency of traps: N times per NSX Manager IP change, where N is number of cluster and service combinations deployed.')
vmwNsxMUpgradeOfDplymntFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 10)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUpgradeOfDplymntFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUpgradeOfDplymntFailed.setDescription('Upgrade of deployment unit failed, please check if ovf/vib urls are accessible, in correct format and all the properties in ovf environment have been configured in service attributes. Please check logs for details. Action required: Ensure that ovf/vib urls accessible from VC and are in correct format. Use resolve API to resolve the Alarm. Service will be redeployed. Frequency of traps: Once per cluster per user operation [Upgrade]')
vmwNsxMFabricDependenciesNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 11)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricDependenciesNotInstalled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricDependenciesNotInstalled.setDescription('The service being installed is dependent on another service that has not yet been installed. Action required: Deploy the required service on the cluster. Frequency of traps: Once per cluster per user operation [Deploy]')
vmwNsxMFabricErrorNotifSecBfrUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 12)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricErrorNotifSecBfrUpgrade.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricErrorNotifSecBfrUpgrade.setDescription('Error while notifying security solution before upgrade. The solution may not be reachable/responding. Action required: Ensure that solution urls are accessible from NSX. Use resolve API to resolve the Alarm. Service will be redeployed. Frequency of traps: Once per cluster per user operation [Upgrade]')
vmwNsxMFabricErrCallbackNtRcvdUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 13)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricErrCallbackNtRcvdUpgrade.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricErrCallbackNtRcvdUpgrade.setDescription('Did not receive callback from security solution for upgrade notification even after timeout. Action required: Ensure that solution urls are accessible from NSX, and NSX is reachable from the solution. Use resolve API to resolve the Alarm. Service will be redeployed. Frequency : Once per cluster per user operation [Upgrade]')
vmwNsxMFabricErrCallbackNtRcvdUninstall = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 14)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricErrCallbackNtRcvdUninstall.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricErrCallbackNtRcvdUninstall.setDescription('Uninstallation of service failed. Action required: Ensure that solution urls are accessible from NSX, and NSX is reachable from the solution. Use resolve API to resolve the Alarm. Service will be removed. Frequency of traps: Once per cluster per user operation [Uninstall]')
vmwNsxMFabricUninstallServiceFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 15)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricUninstallServiceFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricUninstallServiceFailed.setDescription('Error while notifying security solution before uninstall. Resolve to notify once again, or delete to uninstall without notification. Action required: Ensure that solution urls are accessible from NSX, and NSX is reachable from the solution. Use resolve API to resolve the Alarm. Service will be removed. Frequency of traps: Once per cluster per user operation [Uninstall]')
vmwNsxMFabricErrorNotifSecBfrUninstall = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 16)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricErrorNotifSecBfrUninstall.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricErrorNotifSecBfrUninstall.setDescription('Error while notifying security solution before uninstall. Resolve to notify once again, or delete to uninstall without notification. Action required: Ensure that solution urls are accessible from NSX, and NSX is reachable from the solution. Use resolve API to resolve the Alarm. Service will be removed. Frequency of traps: Once per cluster per user operation [Uninstall]')
vmwNsxMFabricServerRebootUninstall = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 17)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricServerRebootUninstall.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricServerRebootUninstall.setDescription('Server rebooted while security solution notification for uninstall was going on. Action required: Ensure that solution urls are accessible from NSX. Use resolve API to resolve the Alarm. Service will be uninstalled. Frequency of traps: Once per cluster per user operation [Uninstall]')
vmwNsxMFabricServerRebootUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 18)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricServerRebootUpgrade.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricServerRebootUpgrade.setDescription('Server rebooted while security solution notification for upgrade was going on. Action required: Ensure that solution urls are accessible from NSX. Use resolve API to resolve the Alarm. Service will be redeployed. Frequency of traps: Once per cluster per user operation [Upgrade]')
vmwNsxMFabricConnEamFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 19)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricConnEamFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricConnEamFailed.setDescription('NSX Manager relies on the ESX Agent Manager service in VC for deploying/monitoring NSX vibs on ESX. The connection to this EAM service has gone down. This could be due to EAM service or VC restart/stop or an issue in the EAM service. Action required: In the NSX UI, traverse to Manage, then NSX Management Service. Verify that the status of VC connection on this page is Green. Use the VC IP to verify that EAM is UP by visiting https://<vc ip>/eam/mob. Frequency of traps: Once per switch from success to failed EAM connection')
vmwNsxMFabricConnEamRestored = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 20)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricConnEamRestored.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricConnEamRestored.setDescription('NSX Manager relies on the EAM service in VC for deploying/monitoring NSX vibs on ESX. The connection of NSX to this EAM service was re-established successfully. Action required: None Frequency of traps: Once per switch from failed to success EAM connection')
vmwNsxMFabricPreUninstallCleanUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 21)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricPreUninstallCleanUpFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricPreUninstallCleanUpFailed.setDescription('Pre Uninstall cleanup failed. Action required: Use resolve API to resolve the Alarm. Service will be removed. Frequency of traps: Once per cluster per user operation [Uninstall]')
vmwNsxMFabricBackingEamNotFound = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 7, 0, 22)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFabricBackingEamNotFound.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFabricBackingEamNotFound.setDescription('The backing EAM agency for this deployment could not be found. It is possible that the VC services may still be initializing. Please try to resolve the alarm to check existence of the agency. In case you have deleted the agency manually, please delete the deployment entry from NSX. Action required: Use resolve API to check existence of the agency, if backing agency exists in EAM, else delete the deployment entry from NSX. Frequency of traps: Once per cluster.')
vmwNsxMDepPlugin = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 8))
if mibBuilder.loadTexts: vmwNsxMDepPlugin.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDepPlugin.setDescription('Notifications that are DeploymentPlugin related will have this OID prefix.')
vmwNsxMDepPluginPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 8, 0))
if mibBuilder.loadTexts: vmwNsxMDepPluginPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDepPluginPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for DeploymentPlugin module.")
vmwNsxMDepPluginIpPoolExhausted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 8, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDepPluginIpPoolExhausted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDepPluginIpPoolExhausted.setDescription('When deploying Guest Introspection or other VM based service with static IP, NSX Manager needs to have a IP pool, for IP assignment to the VM. This pool has been exhausted, and new service VMs cannot be provisioned. Action required: Traverse to the Networking & Security page on VMWare vSphere Web Client, then go to Installation, followed by Service Deployments. Note the IP pool name for the failed service. Now traverse to NSX Managers, then go to Manage tab, followed by Grouping Objects sub-tab. Click on IP Pools, and add more Ips to the static IP pool. Use resolve API to resolve the Alarm. Service will be deployed. Frequency of traps: N times per cluster, where N is number of hosts in the cluster.')
vmwNsxMDepPluginGenericAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 8, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDepPluginGenericAlarm.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDepPluginGenericAlarm.setDescription('Deployment plugin generic alarm. Action required: Use resolve API to resolve the Alarm. Service will be deployed. Frequency of traps: N times per cluster, where N is number of hosts in the cluster.')
vmwNsxMDepPluginGenericException = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 8, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDepPluginGenericException.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDepPluginGenericException.setDescription('Deployment plugin generic exception alarm. Action required: Use resolve API to resolve the Alarm. Service will be deployed. Frequency of traps: N times per cluster, where N is number of hosts in the cluster.')
vmwNsxMDepPluginVmReboot = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 8, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDepPluginVmReboot.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDepPluginVmReboot.setDescription('VM needs to be rebooted for some changes to be made/take effect. Action required: Use resolve API to resolve the Alarm. Frequency of traps: N times per cluster, where N is number of hosts in the cluster.')
vmwNsxMMessaging = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9))
if mibBuilder.loadTexts: vmwNsxMMessaging.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessaging.setDescription('Notifications that are Messaging related will have this OID prefix.')
vmwNsxMMessagingPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0))
if mibBuilder.loadTexts: vmwNsxMMessagingPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Messaging module.")
vmwNsxMMessagingConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMMessagingConfigFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingConfigFailed.setDescription('A notification generated when host messaging configuration failed.')
vmwNsxMMessagingReconfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMMessagingReconfigFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingReconfigFailed.setDescription('A notification generated when host messaging connection reconfiguration failed.')
vmwNsxMMessagingConfigFailedNotifSkip = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMMessagingConfigFailedNotifSkip.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingConfigFailedNotifSkip.setDescription('A notification generated when host messaging configuration failed and notifications were skipped.')
vmwNsxMMessagingInfraUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMMessagingInfraUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingInfraUp.setDescription('Manager runs a heartbeat with all hosts it manages. Missing heartbeat responses from a host indicate a communication issue between manager and the host. Such instances are indicated by event code 391002. When the communication is restored after such an instance, it is indicated by this event/trap. Action required: Refer to KB article https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2133897 Frequency of traps: Will be seen within 3 minutes of communication being restored between manager and a host. URL: https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2133897')
vmwNsxMMessagingInfraDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMMessagingInfraDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingInfraDown.setDescription('Manager runs a heartbeat with all hosts it manages. Missing heartbeat responses from a host indicate a communication issue between manager and the host. In the case of such a communication issue, this trap will be sent. Action required: Refer to KB article https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2133897 Frequency of traps: Will be seen within 6 minutes of a communication failure between manager and a host. URL: https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2133897')
vmwNsxMMessagingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 9, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMMessagingDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMMessagingDisabled.setDescription("A messaging client such as a Host, an Edge appliance or a USVM appliance is expected to change its password within 2 hours of being prepped or deployed. If the password isn't changed in this duration, the messaging account for the client is disabled. Action required: This event will indicate communication issue between the manager and the client. Verify if the client is running. If running, in case of a Host, re-sync messaging. In case of an Edge or a USVM, redeploy. Frequency of traps: Will be seen 2 hours after prep, host re-sync or deployment of appliance. URL: https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=2133897")
vmwNsxMServiceComposer = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10))
if mibBuilder.loadTexts: vmwNsxMServiceComposer.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposer.setDescription('Notifications that are ServiceComposer related will have this OID prefix.')
vmwNsxMServiceComposerPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0))
if mibBuilder.loadTexts: vmwNsxMServiceComposerPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for ServiceComposer module.")
vmwNsxMServiceComposerPolicyOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerPolicyOutOfSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerPolicyOutOfSync.setDescription("Service Composer encountered an error while attempting to enforce rules on this Policy. Action required: Administrator needs to check the rules on the given Policy for any errors, as reported in the message. After fixing the rules in the Policy, user would need to resolve the alarm to bring this Policy back in sync. Policy's alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once, if an error is encountered while enforcing the Policy.")
vmwNsxMServiceComposerPolicyDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerPolicyDeleted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerPolicyDeleted.setDescription('A Policy got deleted as a result of the internal SecurityGroup, over which the Policy was created, got deleted. Frequency of traps: This event is generated once every time any internal SecurityGroup, that is being consumed by a policy, gets deleted.')
vmwNsxMServiceComposerFirewallPolicyOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerFirewallPolicyOutOfSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerFirewallPolicyOutOfSync.setDescription("Service Composer encountered an error while attempting to enforce Firewall rules on this Policy. Firewall related changes on this Policy will not take effect, until this alarm is resolved. Action required: Administrator needs to check the rules on the given Policy for any errors, as reported in the message. After fixing the rules in the Policy, user would need to resolve the alarm to bring this Policy back in sync. Policy's alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once, if an error is encountered while enforcing the Policy.")
vmwNsxMServiceComposerNetworkPolicyOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerNetworkPolicyOutOfSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerNetworkPolicyOutOfSync.setDescription("Service Composer encountered an error while attempting to enforce Network Introspection rules on this Policy. Network Introspection related changes on this Policy will not take effect, until this alarm is resolved. Action required: Administrator needs to check the rules on the given Policy for any errors, as reported in the message. After fixing the rules in the Policy, user would need to resolve the alarm to bring this Policy back in sync. Policy's alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once, if an error is encountered while enforcing the Policy.")
vmwNsxMServiceComposerGuestPolicyOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerGuestPolicyOutOfSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerGuestPolicyOutOfSync.setDescription("Service Composer encountered an error while attempting to enforce Guest Introspection rules on this Policy. Guest Introspection related changes on this Policy will not take effect, until this alarm is resolved. Action required: Administrator needs to check the rules on the given Policy for any errors, as reported in the message. After fixing the rules in the Policy, user would need to resolve the alarm to bring this Policy back in sync. Policy's alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once, if an error is encountered while enforcing the Policy.")
vmwNsxMServiceComposerOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSync.setDescription('Service Composer encountered an error synchronizing Policies. Any changes on Service Composer will not be pushed to Firewall/Network Introspection Services, until this alarm is resolved. Action required: Administrator needs to check Policies and/or Firewall sections for any errors, as reported in the message. After fixing the errors, user would need to resolve the alarm to bring Service Composer back in sync. Alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once, whenever an error is encountered.')
vmwNsxMServiceComposerOutOfSyncRebootFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncRebootFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncRebootFailure.setDescription('Service Composer encountered an error while synchronizing Policies on reboot. Action required: Administrator needs to check Policies and/or Firewall config for any errors, as reported in the message. After fixing the errors, user would need to resolve the alarm to bring Service Composer back in sync. Alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once on NSX Manager reboot, if an error is encountered.')
vmwNsxMServiceComposerOutOfSyncDraftRollback = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncDraftRollback.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncDraftRollback.setDescription('Service Composer went out of sync due to rollback of drafts from Firewall. Any changes on Service Composer will not be pushed to Firewall/Network Introspection Services, until this alarm is resolved. Action required: Administrator needs to resolve the alarm to bring Service Composer back in sync. Alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once, whenever Firewall config is reverted to an older version of drafts.')
vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure.setDescription("Service Composer encountered an error while deleting the section corresponding to the Policy. This generally happens if third party(NetX) service's Manager is not reachable. Action required: Administrator needs to check connectivity with third party(NetX) service's Manager. Once the connectivity is restored, user would need to resolve the alarm. Alarm can either be resolved from Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once if a failure is encountered while deleting a Policy's section on Policy deletion.")
vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 10)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure.setDescription("Service Composer encountered an error reordering sections to reflect Policy's precedence change. This generally happens if there are Alarms on any other Policy. Action required: Administrator needs to check Policies and/or Firewall sections for any errors, as reported in the message. After fixing the errors, user would need to resolve the alarm. Alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once if a failure is encountered while reordering section to reflect precedence change.")
vmwNsxMServiceComposerOutOfSyncDraftSettingFailure = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 10, 0, 11)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncDraftSettingFailure.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServiceComposerOutOfSyncDraftSettingFailure.setDescription('Service Composer encountered an error while initializing auto save drafts setting. Action required: Administrator needs to check Policies and/or Firewall sections for any errors, as reported in the message. After fixing the errors, user would need to resolve the alarm. Alarm can either be resolved from NSX Manager Service Composer UI or by using alarms API. Frequency of traps: This trap is generated only once if a failure is encountered while initializing auto save drafts setting.')
vmwNsxMSvmOperations = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 11))
if mibBuilder.loadTexts: vmwNsxMSvmOperations.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSvmOperations.setDescription('Notifications that are SvmOperations related will have this OID prefix.')
vmwNsxMSvmOperationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 11, 0))
if mibBuilder.loadTexts: vmwNsxMSvmOperationsPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSvmOperationsPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for SvmOperations module.")
vmwNsxMInconsistentSvmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 11, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMInconsistentSvmAlarm.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMInconsistentSvmAlarm.setDescription('Service VMs are deployed per ESX host, to provide functionality like guest introspection and McAfee/Trend virus checking in VMs on the host. An issue is detected with the state of the deployed Service VM. Follow instructions in http://kb.vmware.com/kb/2125482 to analyze the logs further. Warning: Resolving this alarm will delete the VM. After deletion you will see a different alarm saying VM is deleted. If you resolve same, it will reinstall the VM. If redeployment of the VM does not fix the original issue, the original alarm will be added back immediately. Action required: Use resolve API to resolve the Alarm. Frequency of traps: Once per host.')
vmwNsxMSvmRestartAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 11, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSvmRestartAlarm.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSvmRestartAlarm.setDescription('Service VMs are deployed per ESX host, to provide functionality like guest introspection and McAfee/Trend virus checking in VMs on the host. An issue is detected with the state of the deployed Service VM. Follow instructions in http://kb.vmware.com/kb/2125482 to analyze the logs further. Warning: Resolving this alarm will restart the VM. If the root cause here is not solved, the same alarm will be added back immediately. Action required: Use resolve API to resolve the Alarm. Frequency of traps: Once per host.')
vmwNsxMSvmAgentUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 11, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSvmAgentUnavailable.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSvmAgentUnavailable.setDescription('An issue is detected while marking agent as available. Kindly check the logs. Resolving this alarm will attempt to mark the agent as available. Action required: Use resolve API to resolve the Alarm. Frequency of traps: Once per host.')
vmwNsxMTranslation = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 12))
if mibBuilder.loadTexts: vmwNsxMTranslation.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMTranslation.setDescription('Notifications that are Translation related will have this OID prefix.')
vmwNsxMTranslationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 12, 0))
if mibBuilder.loadTexts: vmwNsxMTranslationPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMTranslationPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Translation module.")
vmwNsxMVmAddedToSg = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 12, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVmAddedToSg.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVmAddedToSg.setDescription('A VM has got added to the SecurityGroup. Frequency of traps: Once for every VM getting added to any SecurityGroup.')
vmwNsxMVmRemovedFromSg = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 12, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVmRemovedFromSg.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVmRemovedFromSg.setDescription('A VM has got removed from the SecurityGroup. Frequency of traps: Once for every VM getting removed from any SecurityGroup.')
vmwNsxMUniversalSync = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 13))
if mibBuilder.loadTexts: vmwNsxMUniversalSync.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUniversalSync.setDescription('Notifications that are UniversalSync related will have this OID prefix.')
vmwNsxMUniversalSyncPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 13, 0))
if mibBuilder.loadTexts: vmwNsxMUniversalSyncPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUniversalSyncPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for UniversalSync module.")
vmwNsxMFullUniversalSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 13, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMFullUniversalSyncFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMFullUniversalSyncFailed.setDescription("A failure is encountered when doing full sync of universal objects on a secondary NSX manager. IP address of the secondary NSX manager is present in event's message variable. Action required: Kindly check NSX manager logs on the secondary NSX manager on which the full sync has failed. Frequency of traps: This trap is generated once per NSX manager on which full sync failure is seen.")
vmwNsxMSecondaryDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 13, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSecondaryDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSecondaryDown.setDescription("Secondary NSX manager is unreachable. Action required: Kindly check if NSX manager is running and is reachable from primary NSX manager. IP address of the secondary NSX manager is present in event's message variable. Frequency of traps: This trap is generated once per NSX manager for which connection issue is seen.")
vmwNsxMUniversalSyncFailedForEntity = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 13, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUniversalSyncFailedForEntity.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUniversalSyncFailedForEntity.setDescription("A failure is encountered when doing sync of universal object on a secondary NSX manager. IP address of the secondary NSX manager is present in event's message variable. Action required: Kindly check NSX manager logs on the secondary NSX manager on which the sync has failed. Frequency of traps: This trap is generated once per universal object on a NSX manager on which sync failure is seen.")
vmwNsxMAsyncRest = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 14))
if mibBuilder.loadTexts: vmwNsxMAsyncRest.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMAsyncRest.setDescription('Notifications that are AsyncRest related will have this OID prefix.')
vmwNsxMAsyncRestPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 14, 0))
if mibBuilder.loadTexts: vmwNsxMAsyncRestPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMAsyncRestPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for AsyncRest module.")
vmwNsxMServerUp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 14, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMServerUp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMServerUp.setDescription('Denotes that NSX manager server is up and in running state, Informs clients of NSX Manager of the current state. Action required: None Frequency of traps: Once for every query')
vmwNsxMExtensionRegistration = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 15))
if mibBuilder.loadTexts: vmwNsxMExtensionRegistration.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMExtensionRegistration.setDescription('Notifications that are ExtensionRegistration related will have this OID prefix.')
vmwNsxMExtensionRegistrationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 15, 0))
if mibBuilder.loadTexts: vmwNsxMExtensionRegistrationPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMExtensionRegistrationPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for ExtensionRegistration module.")
vmwNsxMExtensionRegistered = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 15, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMExtensionRegistered.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMExtensionRegistered.setDescription('Registers NSX manager as a vCenter extenstion. This is applicable when no other NSX Manager is registered with vCenter and the current NSX manager is the one registering with vCenter. Action required: None Frequency of traps: Only once when the extension is registered for the very first time.')
vmwNsxMExtensionUpdated = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 15, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMExtensionUpdated.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMExtensionUpdated.setDescription('Updates the vCenter extension registration with the new NSX Manager. This is applicable when there already exists another NSX manager that is registered as a vCenter extension and the current one overwrites it. Action required: None Frequency of traps: Every time a NSX Manager registers as a vCenter extension when there already exists another NSX manager registered with vCenter')
vmwNsxMDlp = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 16))
if mibBuilder.loadTexts: vmwNsxMDlp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDlp.setDescription('Notifications that are Dlp related will have this OID prefix.')
vmwNsxMDlpPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 16, 0))
if mibBuilder.loadTexts: vmwNsxMDlpPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDlpPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Dlp module.")
vmwNsxMDataSecScanStarted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 16, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDataSecScanStarted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDataSecScanStarted.setDescription('A notification generated when NSX Data Security scan started on VirtualMachine.')
vmwNsxMDataSecScanEnded = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 16, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDataSecScanEnded.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDataSecScanEnded.setDescription('A notification generated when NSX Data Security scan ended on VirtualMachine.')
vmwNsxMSamSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 17))
if mibBuilder.loadTexts: vmwNsxMSamSystem.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSamSystem.setDescription('Notifications that are SamSystem related will have this OID prefix.')
vmwNsxMSamSystemPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 17, 0))
if mibBuilder.loadTexts: vmwNsxMSamSystemPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSamSystemPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for SamSystem module.")
vmwNsxMSamDataCollectionEnabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 17, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSamDataCollectionEnabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSamDataCollectionEnabled.setDescription('Service Activity Monitoring will start collecting data. Action required: None Frequency of traps: Event is triggered when SAM data collection state is toggled.')
vmwNsxMSamDataCollectionDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 17, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSamDataCollectionDisabled.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSamDataCollectionDisabled.setDescription('Service Activity Monitoring will stop collecting data. Action required: SAM data collection can be enabled to start collectiing data. Frequency of traps: Event is triggered when SAM data collection state is toggled')
vmwNsxMSamDataStoppedFlowing = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 17, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSamDataStoppedFlowing.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSamDataStoppedFlowing.setDescription('Service Activity Monitoring data stopped flowing from USVM Action required: Check the following - USVM log to see if heartbeats are recieved and sent - is the USVM running - is the Mux - USVM connection healthy - is the USVM - RMQ connection healthy - does the VM have endpoint driver installed Frequency of traps: Event is triggered when NSX Manager does not receives SAM data from USVM')
vmwNsxMSamDataResumedFlowing = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 17, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMSamDataResumedFlowing.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMSamDataResumedFlowing.setDescription('Service Activity Monitoring data resumes flowing from USVM Action required: None Frequency of traps: Event is triggered when SAM data is received from USVM.')
vmwNsxMUsvm = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 18))
if mibBuilder.loadTexts: vmwNsxMUsvm.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUsvm.setDescription('Notifications that are Usvm related will have this OID prefix.')
vmwNsxMUsvmPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 18, 0))
if mibBuilder.loadTexts: vmwNsxMUsvmPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUsvmPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Usvm module.")
vmwNsxMUsvmHeartbeatStopped = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 18, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUsvmHeartbeatStopped.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUsvmHeartbeatStopped.setDescription("USVM stopped sending heartbeats to management plane. Action required: Connection to NSX Manager was lost. Check why the Manager didn't send a heartbeat. Frequency of traps: Event is triggered when NSX Manager does not receives heartbeats from USVM")
vmwNsxMUsvmHeartbeatResumed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 18, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUsvmHeartbeatResumed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUsvmHeartbeatResumed.setDescription('USVM will start sending heartbeats to management plane. Action required: None Frequency of traps: Event is triggered when NSX Manager receives heartbeats from USVM')
vmwNsxMUsvmReceivedHello = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 18, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUsvmReceivedHello.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUsvmReceivedHello.setDescription('USVM sent a HELLO message to Mux Action: None Frequency of traps: Event is triggered when Epsec Mux receives HELLO message from USVM during initial connection establishement.')
vmwNsxMVsmCore = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 19))
if mibBuilder.loadTexts: vmwNsxMVsmCore.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVsmCore.setDescription('Notifications that are VsmCore related will have this OID prefix.')
vmwNsxMVsmCorePrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 19, 0))
if mibBuilder.loadTexts: vmwNsxMVsmCorePrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVsmCorePrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for VsmCore module.")
vmwNsxMUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 19, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMUpgradeSuccess.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMUpgradeSuccess.setDescription('A notification generated when NSX Manager upgraded successfully.')
vmwNsxMRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 19, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMRestoreSuccess.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMRestoreSuccess.setDescription('A notification generated when NSX Manager restored successfully.')
vmwNsxMDuplicateIp = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 19, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMDuplicateIp.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMDuplicateIp.setDescription('The NSX Manager IP has been assigned to another machine Action: None Frequency: This is triggered whenever NSX Manager detects that its IP address is being used by another machine in the same network')
vmwNsxMVxlan = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20))
if mibBuilder.loadTexts: vmwNsxMVxlan.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlan.setDescription('Notifications that are Vxlan related will have this OID prefix.')
vmwNsxMVxlanPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0))
if mibBuilder.loadTexts: vmwNsxMVxlanPrefix.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanPrefix.setDescription("This group is actually the prefix one uses when creating vmware NSX manager specific trap OID's for Vxlan module.")
vmwNsxMVxlanLogicalSwitchImproperlyCnfg = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 1)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanLogicalSwitchImproperlyCnfg.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanLogicalSwitchImproperlyCnfg.setDescription('This event is triggered if one or more distributed virtual port groups backing a certain Logical Switch were modified and/or removed. Or if migration of Control plane mode for a Logical Switch/Transport Zone failed. Action required: (1) If the event was triggered due to deletion/modification of backing distributed virtual port groups, then the error will be visible on Logical Switch UI page. Resolve from there will try and create missing distributed virtual port groups for the Logical Switch. (2) If event was triggered due to failure of Control plan mode migration, redo the migration for that Logical Switch or Transport Zone. Frequency of traps: Event is triggered due to user actions as explained in description. Affects: Logical Switch network traffic.')
vmwNsxMVxlanLogicalSwitchProperlyCnfg = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanLogicalSwitchProperlyCnfg.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanLogicalSwitchProperlyCnfg.setDescription('Logical Switch status has been marked good, most probably as result of resolving any errors on it. Action required: None Frequency of traps: Event is triggered when user resolves the Logical Switch error and as a result missing backing distributed virtual port groups are recreated.')
vmwNsxMVxlanInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanInitFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanInitFailed.setDescription("Failed to configure vmknic as a VTEP, VXLAN traffic through this interface will be dropped until this is resolved. Action required: Check the host's vmkernel.log for more details. Frequency of traps: Every time a VTEP vmknic tries to connect to it's Distributed Virtual Port. Affects: VXLAN traffic on the affected Host.")
vmwNsxMVxlanPortInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 4)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanPortInitFailed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanPortInitFailed.setDescription("Failed to configure VXLAN on the Distributed Virtual Port, the port will be disconnected. Action required: Check the host's vmkernel.log for more details. Frequency of traps: Every time a VXLAN vNic tries to connect to it's Distributed Virtual Port on the host. Affects: VXLAN traffic on the affected Host.")
vmwNsxMVxlanInstanceDoesNotExist = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 5)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanInstanceDoesNotExist.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanInstanceDoesNotExist.setDescription("VXLAN configuration was received for a Distributed Virtual Port, but the host has not yet enabled VXLAN on the vSphere Distributed Switch. VXLAN ports on affected Host will fail to connect until resolved. Action required: See KB 2107951 (https://kb.vmware.com/selfservice/microsites/search.do?cmd=displayKC&docType=kc&externalId=2107951&sliceId=1&docTypeID=DT_KB_1_1&dialogID=40732862&stateId=0%200%2040754197) Frequency of traps: Every time any VXLAN related port (vNic or vmknic) tries to connect to it's Distributed Virtual Port on the host. Affects: VXLAN Traffic on that Host.")
vmwNsxMVxlanLogicalSwitchWrkngImproperly = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 6)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanLogicalSwitchWrkngImproperly.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanLogicalSwitchWrkngImproperly.setDescription("VTEP interface was unable to join the specified multicast address, the VTEP will be unable to receive some traffic from other hosts until this is resolved. The host will periodically retry joining the group until it is successful. Action required: Check the host's vmkernel.log for more details. Frequency of traps: NSX retries joining failed mcast groups every 5 seconds. Affects: Logical Switch associated with problem VTEP interface won't work properly.")
vmwNsxMVxlanTransportZoneIncorrectlyWrkng = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 7)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanTransportZoneIncorrectlyWrkng.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanTransportZoneIncorrectlyWrkng.setDescription('The IP address of a VTEP vmknic has changed. Action required: None. Frequency of traps: Every time a VTEP IP changes')
vmwNsxMVxlanTransportZoneNotUsed = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 8)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanTransportZoneNotUsed.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanTransportZoneNotUsed.setDescription("VTEP vmknic does not have a valid IP address assigned, all VXLAN traffic through this vmknic will be dropped. Action required: Verify the IP configuration for the interface, and the DHCP server if DHCP is used. Frequency of traps: Once per VTEP loosing it's IP address.")
vmwNsxMVxlanOverlayClassMissingOnDvs = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 9)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanOverlayClassMissingOnDvs.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanOverlayClassMissingOnDvs.setDescription('NSX packages where not installed prior to DVS configuration for VXLAN. All VXLAN ports will fail to connect until resolved. Action required: See KB 2107951 https://kb.vmware.com/selfservice/microsites/search.do?cmd=displayKC&docType=kc&externalId=2107951&sliceId=1&docTypeID=DT_KB_1_1&dialogID=40732862&stateId=0%200%2040754197 Frequency of traps: Once per setting of the com.vmware.netoverlay.layer0=vxlan opaque property or whenver the host is configured for vxlan or Host reconnects to VCEnter and host has some problem. Affects: VXLAN Traffic for that Host will be affected.')
vmwNsxMVxlanControllerRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 10)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanControllerRemoved.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanControllerRemoved.setDescription('A notification generated when VXLAN Controller has been removed due to the connection cant be built, please check controller IP configuration and deploy again.')
vmwNsxMVxlanControllerConnProblem = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 11)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanControllerConnProblem.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanControllerConnProblem.setDescription('NSX manager detected the connection between two controller nodes is broken. Action required: It is a warning event, users need to check the controller cluster for the further steps. Check following KB 2127655 https://kb.vmware.com/selfservice/microsites/search.do?cmd=displayKC&docType=kc&externalId=2127655&sliceId=1&docTypeID=DT_KB_1_1&dialogID=40732913&stateId=0%200%2040754965 to see if issue matches. Frequency of traps: Whenever the controller reports the issue. Affects: Networking might get affected.')
vmwNsxMVxlanControllerInactive = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 12)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanControllerInactive.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanControllerInactive.setDescription("Host Certification information couldn't be sent to NSX Controllers. Action required: Ensure that NSX Controller cluster is in healthy state before preparing a new Host. Invoke Controller Sync API to try and rectify this error. Frequency of traps: When a new host is prepared for NSX networking. Affects: Newly prepared Host. Communication channel between Host and NSX Controllers might have issues.")
vmwNsxMVxlanControllerActive = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 13)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanControllerActive.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanControllerActive.setDescription('A notification generated when Controller cluster state is now active. Controller Synchronization job is in progress. Frequency of traps: Controller cluster becomes active again from a previous inactive state. Action required: User doesnt have to take any corrective action. NSX will auto-sync the controllers.')
vmwNsxMVxlanVmknicMissingOrDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 14)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanVmknicMissingOrDeleted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanVmknicMissingOrDeleted.setDescription('VXLAN vmknic is missing or deleted from host. Action required: Issue can be resolved from Logical Network Preparation - VXLAN Transport UI section. Clicking on resolve will try to rectify the issue. Frequency of traps: First time NSX Manager finds that VXLAN vmknic is missing or deleted from Host. Affects: VXLAN Traffic to/from the mentioned Host will be affected.')
vmwNsxMVxlanInfo = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 15)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanInfo.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanInfo.setDescription('NSX Manager will raise this event when connection between either of the following component is established/re-established (i) connection between NSX Manager and Host Firewall agent. (ii) connection between NSX Manager and Control Plane Agent. (iii) connection between Control Plane Agent to Controllers. Action required: None Frequency of traps: NSX Manager will raise this event when connection between either of the following component is established/re-established (i) connection between NSX Manager and Host Firewall agent. (ii) connection between NSX Manager and Control Plane Agent (iii) connection between Control Plane Agent to Controllers.')
vmwNsxMVxlanVmknicPortGrpMissing = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 16)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanVmknicPortGrpMissing.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanVmknicPortGrpMissing.setDescription('NSX manager detected one vxlan vmknic is missing on VC. Action required: Check the host, if that vmknic is deleted, click on the resolve button on UI, or call the remediate API (POST /api/2.0/vdn/config/host/{hostId}/vxlan/vteps?action=remediate) to recreate the vxlan vmknic. Frequency of traps: First time when vxlan vmknic is detected missing (manually deleted by user or inventory report the incorrect information) Affects: The VXLAN traffic on that host may be interrupted.')
vmwNsxMVxlanVmknicPortGrpAppears = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 17)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanVmknicPortGrpAppears.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanVmknicPortGrpAppears.setDescription('NSX manager detected one vxlan vmknic that was marked as missing has now reappeared on VC. Action required: None Frequency of traps: When that missing vmknic re-appears again. Affects: The VXLAN traffic on that host may be resumed.')
vmwNsxMVxlanConnDown = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 18)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanConnDown.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanConnDown.setDescription('This event is triggered when either of the following connections are detected down by NSX Manager: (i) connection between NSX Manager and Host Firewall agent. (ii) connection between NSX Manager and Control Plane Agent. (iii) connection between Control Plane Agent to Controllers. Action required: (i) If NSX Manager to Host Firewall Agent connection is down, check NSX Manager and Firewall Agent logs to get error details. You can try Fabric Synchronize API to try and retificy this issue. (ii) If NSX Manager to Control Plane Agent connection is down, please check NSX Manager and Control Plane Agent logs to get the error detail, check whether the Control Plane Agent process is down. (iii) If Control Plane Agent to Controllers connection is down, please go to UI Installation page to check the connection status for crossponding Host. Frequency of traps: When (i) NSX Manager looses connection with Firewall agent on host or (ii) NSX Manager losses connection with Control plane agent on host or (iii) Control plane agent on Host looses connection with NSX Controllers. Affects: VMs on that Host might get affected.')
vmwNsxMBackingPortgroupMissing = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 19)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMBackingPortgroupMissing.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMBackingPortgroupMissing.setDescription('NSX manager detected one backing portgroup of a logical switch is missing on VCenter. Action required: Click on the resolve button on UI or call the API (POST https://<nsx-manager-host>/api/2.0/vdn/virtualwires/<virtualwireId>/backing?action=remediate) to recreate that backing portgroup. Frequency of traps: Whenever logical switch backing portgroup is missing on VC. Affects: VMs cannot be connected to this Logical Switch.')
vmwNsxMBackingPortgroupReappears = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 20)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMBackingPortgroupReappears.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMBackingPortgroupReappears.setDescription('NSX manager detected one backing portgroup of a logical switch that was missing reappears on VC. Action required: None Frequency of traps: Whenever user triggered remediate API on Logical Switch which has missing backing portgroup.')
vmwNsxMManagedObjectIdChanged = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 21)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMManagedObjectIdChanged.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMManagedObjectIdChanged.setDescription('NSX manager detected the Managed Objectid of one backing portgroup of a logical switch changed. Action required: None Frequnecy of traps: This typically happens when user restores a backup of Logical Switch backing portgroup.')
vmwNsxMHighLatencyOnDisk = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 22)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMHighLatencyOnDisk.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMHighLatencyOnDisk.setDescription('NSX manager detected some disk on a NSX Controller has high latency. Action required: Rectify the issue on specified device and controller. Frequency of traps: First time NSX detected this issue as reported by Controller. When this issue gets resolved another Informational event will be raised by NSX Manager indicating the same. Affects: NSX Controller.')
vmwNsxMHighLatencyOnDiskResolved = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 23)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMHighLatencyOnDiskResolved.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMHighLatencyOnDiskResolved.setDescription('NSX manager detected the disk high latency alert on a some disk on a NSX Controller has been resolved. Frequency of traps: First time NSX detected, previously raised disk latency issue has been resolved.')
vmwNsxMControllerVmPoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 24)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMControllerVmPoweredOff.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMControllerVmPoweredOff.setDescription("NSX manager detected a Controller Virtual Machine is powered off from vCenter. Action required: Click on the 'Resolve' button on Controller page on UI or call the API (POST https://<nsx-manager-host>/api/2.0/vdn/controller/{controllerId}?action=remediate) to power on the Controller Virtual Machine. Frequency of traps: This event wil be raised when controller Virtual Machine is powered off from vCenter. Affects: Controller cluster status might go to disconnected if a controller Virtual Machine is powered off. Any operation that requires an active Controller Cluster may be affected.")
vmwNsxMControllerVmDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 25)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMControllerVmDeleted.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMControllerVmDeleted.setDescription("NSX manager detected a Controller Virtual Machine is deleted from vCenter. Action required: Click on the Resolve button on Controller page on UI or call the API (POST https://<nsx-manager-host>/api/2.0/vdn/controller/{controllerId}?action=remediate) to clean up NSX manager's database state. Frequency of traps: This event will be raised when Controller Virtual Machine is deleted from vCenter. Affects: Controller cluster status might go to disconnected if a controller Virtual Machine is powered off. Any operation that requires an active Controller Cluster may be affected.")
vmwNsxMVxlanConfigNotSet = NotificationType((1, 3, 6, 1, 4, 1, 6876, 90, 1, 2, 20, 0, 26)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"))
if mibBuilder.loadTexts: vmwNsxMVxlanConfigNotSet.setStatus('current')
if mibBuilder.loadTexts: vmwNsxMVxlanConfigNotSet.setDescription('NSX manager detected the VXLAN configuration is not set on the host (would-block issue). And this event indicates NSX Manager tried to rectify this issue by resending the VXLAN configuration on Host. Action required: See KB 2107951 https://kb.vmware.com/selfservice/microsites/search.do?cmd=displayKC&docType=kc&externalId=2107951&sliceId=1&docTypeID=DT_KB_1_1&dialogID=40732862&stateId=0%200%2040754197 for more information. Frequency of traps: This event will generate when host preparation task is triggered for a host and Host encounters would-block issue. Affects: It is a notification, no specific guide for the next step.')
vmwNsxManagerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 90, 1, 99))
vmwNsxManagerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 90, 1, 99, 1))
vmwNsxManagerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 90, 1, 99, 2))
vmwNsxManagerMIBBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6876, 90, 1, 99, 1, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxManagerNotificationInfoGroup1"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxManagerNotificationGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwNsxManagerMIBBasicCompliance = vmwNsxManagerMIBBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: vmwNsxManagerMIBBasicCompliance.setDescription('The compliance statement for entities which implement VMWARE-NSX-MANAGER-MIB.')
vmwNsxManagerNotificationInfoGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6876, 90, 1, 99, 2, 2)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventCode"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventTimestamp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventMessage"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventSeverity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEventComponent"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUuid"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwNsxManagerNotificationInfoGroup1 = vmwNsxManagerNotificationInfoGroup1.setStatus('current')
if mibBuilder.loadTexts: vmwNsxManagerNotificationInfoGroup1.setDescription('These objects provide details in NSX Manager notifications.')
vmwNsxManagerNotificationGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 6876, 90, 1, 99, 2, 3)).setObjects(("VMWARE-NSX-MANAGER-MIB", "vmwNsxMConfigGroup"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpAddedBlackList"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpRemovedBlackList"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSsoConfigFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSsoUnconfigured"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUserRoleAssigned"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUserRoleUnassigned"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGroupRoleAssigned"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGroupRoleUnassigned"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVcLoginFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVcDisconnected"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMLostVcConnectivity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFltrCnfgUpdateFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFltrCnfgNotAppliedToVnic"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFltrCnfgAppliedToVnic"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFltrCreatedForVnic"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFltrDeletedForVnic"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallConfigUpdateFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallRuleFailedVnic"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallRuleAppliedVnic"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMCntnrCnfgUpdateFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFlowMissed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardCnfgUpdateFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardApplied"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardDisableFail"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMLegacyAppServiceDeletionFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallCpuThresholdCrossed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallMemThresholdCrossed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMConnPerSecThrshldCrossed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallCnfgUpdateTimedOut"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardCnfgUpdateTmOut"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallPublishFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMCntnrUpdatePublishFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSpoofGuardUpdatePublishFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMExcludeListPublishFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallCnfgUpdateOnDltCntnr"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMHostSyncFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMHostSynced"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallInstalled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallClusterInstalled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallClusterUninstalled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallClusterDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeNoVmServing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeGatewayCreated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmBadState"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmCommFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmCnfgChanged"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeGatewayDeleted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeGatewayReDeployed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmPowerOff"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeApplianceSizeChanged"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeUpgrade51x"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeLicenseChanged"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeApplianceMoved"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeApplianceNotFound"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVMHealthCheckMiss"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHealthCheckMiss"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeCommAgentNotConnected"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMApplianceWithDifferentId"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallRuleModified"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeAntiAffinityRuleViolated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHaEnabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHaDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeGatewayRecovered"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmRecovered"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeGatewayUpgraded"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmHlthChkDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgePrePublishFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeForcedSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmBooted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmInBadState"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmCpuUsageIncreased"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmMemUsageIncreased"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmProcessFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmSysTimeBad"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmSysTimeSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeAesniCryptoEngineUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeAesniCryptoEngineDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeVmOom"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeFileSysRo"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHaCommDisconnected"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHaSwitchOverSelf"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHaSwitchOverActive"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeHaSwitchOverStandby"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeMonitorProcessFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMLbVirtualServerPoolUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMLbVirtualServerPoolDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMLbVirtualServerPoolWrong"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMLbPoolWarning"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpsecChannelUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpsecChannelDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpsecTunnelUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpsecTunnelDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpsecChannelUnknown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMIpsecTunnelUnknown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGlobalLbMemberUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGlobalLbMemberWarning"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGlobalLbMemberDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGlobalLbMemberUnknown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGlobalLbPeerUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGlobalLbPeerDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDhcpServiceDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEndpointThinAgentEnabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGuestIntrspctnEnabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGuestIntrspctnIncompatibleEsx"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGuestIntrspctnEsxConnFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGuestIntrspctnStatusRcvFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEsxModuleEnabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEsxModuleUninstalled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMGuestIntrspctnHstMxMssngRep"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEndpointUndefined"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEamGenericAlarm"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricDplymntStatusChanged"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricDplymntUnitCreated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricDplymntUnitUpdated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricDplymntUnitDestroyed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDataStoreNotCnfgrdOnHost"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricDplymntInstallationFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricAgentCreated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricAgentDestroyed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricSrvceNeedsRedplymnt"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUpgradeOfDplymntFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricDependenciesNotInstalled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricErrorNotifSecBfrUpgrade"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricErrCallbackNtRcvdUpgrade"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricErrCallbackNtRcvdUninstall"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricUninstallServiceFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricErrorNotifSecBfrUninstall"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricServerRebootUninstall"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricServerRebootUpgrade"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricConnEamFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricConnEamRestored"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricPreUninstallCleanUpFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFabricBackingEamNotFound"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDepPluginIpPoolExhausted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDepPluginGenericAlarm"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDepPluginGenericException"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDepPluginVmReboot"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMMessagingConfigFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMMessagingReconfigFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMMessagingConfigFailedNotifSkip"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMMessagingInfraUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMMessagingInfraDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMMessagingDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerPolicyOutOfSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerPolicyDeleted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMInconsistentSvmAlarm"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSvmRestartAlarm"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSvmAgentUnavailable"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVmAddedToSg"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVmRemovedFromSg"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFullUniversalSyncFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSecondaryDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUniversalSyncFailedForEntity"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServerUp"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMExtensionRegistered"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMExtensionUpdated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDataSecScanStarted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDataSecScanEnded"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataCollectionEnabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataCollectionDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataStoppedFlowing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataResumedFlowing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUsvmHeartbeatStopped"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUsvmHeartbeatResumed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUsvmReceivedHello"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMUpgradeSuccess"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMRestoreSuccess"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanLogicalSwitchImproperlyCnfg"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanLogicalSwitchProperlyCnfg"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanInitFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanPortInitFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanInstanceDoesNotExist"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanLogicalSwitchWrkngImproperly"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanTransportZoneIncorrectlyWrkng"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanTransportZoneNotUsed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanOverlayClassMissingOnDvs"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerRemoved"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerConnProblem"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerInactive"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerActive"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanVmknicMissingOrDeleted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanInfo"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanVmknicPortGrpMissing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanVmknicPortGrpAppears"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanConnDown"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataCollectionDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataStoppedFlowing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSamDataResumedFlowing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanOverlayClassMissingOnDvs"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerRemoved"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerConnProblem"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanControllerInactive"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSsoDisconnected"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallInstallFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallForceSyncClusterFailed"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallForceSyncClusterSuccess"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMFirewallVsfwdProcessStarted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeResourceReservationFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeSplitBrainDetected"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeSplitBrainRecovered"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMEdgeSplitBrainRecoveryAttempt"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerFirewallPolicyOutOfSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerNetworkPolicyOutOfSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerGuestPolicyOutOfSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerOutOfSync"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerOutOfSyncRebootFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerOutOfSyncDraftRollback"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMServiceComposerOutOfSyncDraftSettingFailure"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMBackingPortgroupMissing"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMBackingPortgroupReappears"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMManagedObjectIdChanged"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMHighLatencyOnDisk"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMHighLatencyOnDiskResolved"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMControllerVmPoweredOff"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMControllerVmDeleted"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMVxlanConfigNotSet"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSnmpDisabled"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMSnmpManagerConfigUpdated"), ("VMWARE-NSX-MANAGER-MIB", "vmwNsxMDuplicateIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmwNsxManagerNotificationGroup1 = vmwNsxManagerNotificationGroup1.setStatus('current')
if mibBuilder.loadTexts: vmwNsxManagerNotificationGroup1.setDescription('Group of objects describing notifications (traps, informs).')
mibBuilder.exportSymbols("VMWARE-NSX-MANAGER-MIB", vmwNsxManagerNotificationGroup1=vmwNsxManagerNotificationGroup1, vmwNsxMIpsecChannelUp=vmwNsxMIpsecChannelUp, vmwNsxMIpsecChannelUnknown=vmwNsxMIpsecChannelUnknown, vmwNsxMGlobalLbMemberUp=vmwNsxMGlobalLbMemberUp, vmwNsxMMessagingInfraDown=vmwNsxMMessagingInfraDown, vmwNsxMFabric=vmwNsxMFabric, vmwNsxMEdgeSplitBrainRecovered=vmwNsxMEdgeSplitBrainRecovered, vmwNsxMFirewallForceSyncClusterSuccess=vmwNsxMFirewallForceSyncClusterSuccess, vmwNsxMFabricDplymntUnitUpdated=vmwNsxMFabricDplymntUnitUpdated, vmwNsxMMessaging=vmwNsxMMessaging, vmwNsxMLbPoolWarning=vmwNsxMLbPoolWarning, vmwNsxMHostSynced=vmwNsxMHostSynced, vmwNsxMVcLoginFailed=vmwNsxMVcLoginFailed, vmwNsxMVxlanConnDown=vmwNsxMVxlanConnDown, vmwNsxManagerMIBBasicCompliance=vmwNsxManagerMIBBasicCompliance, vmwNsxMEdgeVmBadState=vmwNsxMEdgeVmBadState, vmwNsxMEventMessage=vmwNsxMEventMessage, vmwNsxMFirewallMemThresholdCrossed=vmwNsxMFirewallMemThresholdCrossed, vmwNsxMFabricErrorNotifSecBfrUninstall=vmwNsxMFabricErrorNotifSecBfrUninstall, vmwNsxMServiceComposerNetworkPolicyOutOfSync=vmwNsxMServiceComposerNetworkPolicyOutOfSync, vmwNsxMDepPluginGenericException=vmwNsxMDepPluginGenericException, vmwNsxMFabricServerRebootUpgrade=vmwNsxMFabricServerRebootUpgrade, vmwNsxMEdgeVmCnfgChanged=vmwNsxMEdgeVmCnfgChanged, vmwNsxMExcludeListPublishFailed=vmwNsxMExcludeListPublishFailed, vmwNsxMVxlanInitFailed=vmwNsxMVxlanInitFailed, vmwNsxMEdgeGatewayUpgraded=vmwNsxMEdgeGatewayUpgraded, vmwNsxMVxlanVmknicPortGrpAppears=vmwNsxMVxlanVmknicPortGrpAppears, vmwNsxMTranslationPrefix=vmwNsxMTranslationPrefix, vmwNsxMEamGenericAlarm=vmwNsxMEamGenericAlarm, vmwNsxManagerMIBConformance=vmwNsxManagerMIBConformance, vmwNsxMDuplicateIp=vmwNsxMDuplicateIp, vmwNsxMBranch=vmwNsxMBranch, vmwNsxMVxlanConfigNotSet=vmwNsxMVxlanConfigNotSet, vmwNsxMLegacyAppServiceDeletionFailed=vmwNsxMLegacyAppServiceDeletionFailed, vmwNsxMEdgeFileSysRo=vmwNsxMEdgeFileSysRo, vmwNsxMGuestIntrspctnStatusRcvFailed=vmwNsxMGuestIntrspctnStatusRcvFailed, vmwNsxMFlowMissed=vmwNsxMFlowMissed, vmwNsxMEventCode=vmwNsxMEventCode, vmwNsxMSecurityPrefix=vmwNsxMSecurityPrefix, vmwNsxMEdgeApplianceNotFound=vmwNsxMEdgeApplianceNotFound, vmwNsxMGlobalLbPeerUp=vmwNsxMGlobalLbPeerUp, vmwNsxMFabricErrorNotifSecBfrUpgrade=vmwNsxMFabricErrorNotifSecBfrUpgrade, vmwNsxMMessagingConfigFailed=vmwNsxMMessagingConfigFailed, vmwNsxMVsmCorePrefix=vmwNsxMVsmCorePrefix, vmwNsxMVxlanControllerConnProblem=vmwNsxMVxlanControllerConnProblem, vmwNsxManagerMIBCompliances=vmwNsxManagerMIBCompliances, vmwNsxMFirewallClusterDisabled=vmwNsxMFirewallClusterDisabled, vmwNsxMSpoofGuardApplied=vmwNsxMSpoofGuardApplied, vmwNsxMFirewallCnfgUpdateTimedOut=vmwNsxMFirewallCnfgUpdateTimedOut, vmwNsxManagerMIB=vmwNsxManagerMIB, vmwNsxMEdgeHaCommDisconnected=vmwNsxMEdgeHaCommDisconnected, vmwNsxMVxlan=vmwNsxMVxlan, vmwNsxMFabricAgentDestroyed=vmwNsxMFabricAgentDestroyed, vmwNsxMVxlanInfo=vmwNsxMVxlanInfo, vmwNsxMFirewallRuleFailedVnic=vmwNsxMFirewallRuleFailedVnic, vmwNsxMServiceComposerFirewallPolicyOutOfSync=vmwNsxMServiceComposerFirewallPolicyOutOfSync, vmwNsxMEdgePrePublishFailed=vmwNsxMEdgePrePublishFailed, vmwNsxMLbVirtualServerPoolDown=vmwNsxMLbVirtualServerPoolDown, VmwNsxManagerTypeSeverity=VmwNsxManagerTypeSeverity, vmwNsxMSvmOperations=vmwNsxMSvmOperations, vmwNsxMSvmAgentUnavailable=vmwNsxMSvmAgentUnavailable, vmwNsxMEdgeAesniCryptoEngineUp=vmwNsxMEdgeAesniCryptoEngineUp, vmwNsxMSecurity=vmwNsxMSecurity, vmwNsxMEamPrefix=vmwNsxMEamPrefix, vmwNsxMEndpoint=vmwNsxMEndpoint, vmwNsxMEam=vmwNsxMEam, vmwNsxMGlobalLbPeerDown=vmwNsxMGlobalLbPeerDown, vmwNsxMEdgeAntiAffinityRuleViolated=vmwNsxMEdgeAntiAffinityRuleViolated, vmwNsxMDlpPrefix=vmwNsxMDlpPrefix, vmwNsxMEdgeApplianceMoved=vmwNsxMEdgeApplianceMoved, vmwNsxMApplianceWithDifferentId=vmwNsxMApplianceWithDifferentId, vmwNsxMGuestIntrspctnEnabled=vmwNsxMGuestIntrspctnEnabled, vmwNsxMEdgeApplianceSizeChanged=vmwNsxMEdgeApplianceSizeChanged, vmwNsxMFabricErrCallbackNtRcvdUninstall=vmwNsxMFabricErrCallbackNtRcvdUninstall, vmwNsxMEndpointUndefined=vmwNsxMEndpointUndefined, vmwNsxMCntnrCnfgUpdateFailed=vmwNsxMCntnrCnfgUpdateFailed, vmwNsxMEdgeVmOom=vmwNsxMEdgeVmOom, vmwNsxMHostSyncFailed=vmwNsxMHostSyncFailed, vmwNsxMMessagingDisabled=vmwNsxMMessagingDisabled, vmwNsxMControllerVmPoweredOff=vmwNsxMControllerVmPoweredOff, vmwNsxMFirewallCpuThresholdCrossed=vmwNsxMFirewallCpuThresholdCrossed, vmwNsxMUsvmReceivedHello=vmwNsxMUsvmReceivedHello, vmwNsxMBackingPortgroupMissing=vmwNsxMBackingPortgroupMissing, vmwNsxManagerMIBGroups=vmwNsxManagerMIBGroups, vmwNsxMEdgeVmRecovered=vmwNsxMEdgeVmRecovered, vmwNsxMEdgeHaSwitchOverSelf=vmwNsxMEdgeHaSwitchOverSelf, vmwNsxMUniversalSync=vmwNsxMUniversalSync, vmwNsxMGroupsPrefix=vmwNsxMGroupsPrefix, vmwNsxMManagedObjectIdChanged=vmwNsxMManagedObjectIdChanged, vmwNsxMServiceComposerPolicyDeleted=vmwNsxMServiceComposerPolicyDeleted, vmwNsxMSvmRestartAlarm=vmwNsxMSvmRestartAlarm, vmwNsxMFabricServerRebootUninstall=vmwNsxMFabricServerRebootUninstall, vmwNsxMSpoofGuardFailed=vmwNsxMSpoofGuardFailed, vmwNsxMEdgeMonitorProcessFailure=vmwNsxMEdgeMonitorProcessFailure, vmwNsxMFabricSrvceNeedsRedplymnt=vmwNsxMFabricSrvceNeedsRedplymnt, vmwNsxMRestoreSuccess=vmwNsxMRestoreSuccess, vmwNsxMSnmp=vmwNsxMSnmp, vmwNsxMSecondaryDown=vmwNsxMSecondaryDown, vmwNsxMGroupRoleAssigned=vmwNsxMGroupRoleAssigned, vmwNsxMEdgeAesniCryptoEngineDown=vmwNsxMEdgeAesniCryptoEngineDown, vmwNsxMEsxModuleEnabled=vmwNsxMEsxModuleEnabled, vmwNsxMServiceComposerOutOfSyncRebootFailure=vmwNsxMServiceComposerOutOfSyncRebootFailure, vmwNsxMFabricUninstallServiceFailed=vmwNsxMFabricUninstallServiceFailed, vmwNsxMIpRemovedBlackList=vmwNsxMIpRemovedBlackList, vmwNsxMEdgeVmSysTimeBad=vmwNsxMEdgeVmSysTimeBad, vmwNsxMEdgeHaDisabled=vmwNsxMEdgeHaDisabled, vmwNsxMUserRoleAssigned=vmwNsxMUserRoleAssigned, vmwNsxMLostVcConnectivity=vmwNsxMLostVcConnectivity, vmwNsxMFltrCnfgNotAppliedToVnic=vmwNsxMFltrCnfgNotAppliedToVnic, vmwNsxMFabricErrCallbackNtRcvdUpgrade=vmwNsxMFabricErrCallbackNtRcvdUpgrade, vmwNsxMVxlanTransportZoneNotUsed=vmwNsxMVxlanTransportZoneNotUsed, vmwNsxMVxlanVmknicPortGrpMissing=vmwNsxMVxlanVmknicPortGrpMissing, vmwNsxMEdgeGatewayReDeployed=vmwNsxMEdgeGatewayReDeployed, vmwNsxMEdgeHaSwitchOverStandby=vmwNsxMEdgeHaSwitchOverStandby, vmwNsxMGroupsBranch=vmwNsxMGroupsBranch, vmwNsxMSpoofGuardUpdatePublishFailed=vmwNsxMSpoofGuardUpdatePublishFailed, vmwNsxMExtensionRegistrationPrefix=vmwNsxMExtensionRegistrationPrefix, vmwNsxMHighLatencyOnDisk=vmwNsxMHighLatencyOnDisk, vmwNsxMServiceComposerOutOfSync=vmwNsxMServiceComposerOutOfSync, vmwNsxMUpgradeSuccess=vmwNsxMUpgradeSuccess, vmwNsxMServiceComposerOutOfSyncDraftRollback=vmwNsxMServiceComposerOutOfSyncDraftRollback, vmwNsxMTranslation=vmwNsxMTranslation, vmwNsxMEdgeLicenseChanged=vmwNsxMEdgeLicenseChanged, vmwNsxMVxlanControllerRemoved=vmwNsxMVxlanControllerRemoved, vmwNsxMDhcpServiceDisabled=vmwNsxMDhcpServiceDisabled, vmwNsxMFabricConnEamFailed=vmwNsxMFabricConnEamFailed, vmwNsxMVxlanOverlayClassMissingOnDvs=vmwNsxMVxlanOverlayClassMissingOnDvs, PYSNMP_MODULE_ID=vmwNsxManagerMIB, vmwNsxMEdgeSplitBrainRecoveryAttempt=vmwNsxMEdgeSplitBrainRecoveryAttempt, vmwNsxMEventComponent=vmwNsxMEventComponent, vmwNsxMVxlanPrefix=vmwNsxMVxlanPrefix, vmwNsxMEdgeForcedSync=vmwNsxMEdgeForcedSync, vmwNsxMIpsecTunnelUnknown=vmwNsxMIpsecTunnelUnknown, vmwNsxMUpgradeOfDplymntFailed=vmwNsxMUpgradeOfDplymntFailed, vmwNsxMUserRoleUnassigned=vmwNsxMUserRoleUnassigned, vmwNsxMSamDataCollectionDisabled=vmwNsxMSamDataCollectionDisabled, vmwNsxMEventTimestamp=vmwNsxMEventTimestamp, vmwNsxMGuestIntrspctnHstMxMssngRep=vmwNsxMGuestIntrspctnHstMxMssngRep, vmwNsxMVxlanPortInitFailed=vmwNsxMVxlanPortInitFailed, vmwNsxMSsoDisconnected=vmwNsxMSsoDisconnected, vmwNsxMSamSystem=vmwNsxMSamSystem, vmwNsxMUsvm=vmwNsxMUsvm, vmwNsxMSnmpManagerConfigUpdated=vmwNsxMSnmpManagerConfigUpdated, vmwNsxMExtensionUpdated=vmwNsxMExtensionUpdated, vmwNsxMBackingPortgroupReappears=vmwNsxMBackingPortgroupReappears, vmwNsxMMessagingInfraUp=vmwNsxMMessagingInfraUp, vmwNsxMEdgeVmProcessFailure=vmwNsxMEdgeVmProcessFailure, vmwNsxMEndpointThinAgentEnabled=vmwNsxMEndpointThinAgentEnabled, vmwNsxMEdgeVmMemUsageIncreased=vmwNsxMEdgeVmMemUsageIncreased, vmwNsxMDlp=vmwNsxMDlp, vmwNsxMAlertData=vmwNsxMAlertData, vmwNsxMDepPluginPrefix=vmwNsxMDepPluginPrefix, vmwNsxMDepPluginIpPoolExhausted=vmwNsxMDepPluginIpPoolExhausted, vmwNsxMFirewallInstalled=vmwNsxMFirewallInstalled, vmwNsxMFabricPreUninstallCleanUpFailed=vmwNsxMFabricPreUninstallCleanUpFailed, vmwNsxMFabricDplymntStatusChanged=vmwNsxMFabricDplymntStatusChanged, vmwNsxMVxlanLogicalSwitchWrkngImproperly=vmwNsxMVxlanLogicalSwitchWrkngImproperly, vmwNsxMFirewallClusterUninstalled=vmwNsxMFirewallClusterUninstalled, vmwNsxMEdgeGatewayDeleted=vmwNsxMEdgeGatewayDeleted, vmwNsxMFabricDplymntInstallationFailed=vmwNsxMFabricDplymntInstallationFailed, vmwNsxMEdgeVmCommFailed=vmwNsxMEdgeVmCommFailed, vmwNsxMInconsistentSvmAlarm=vmwNsxMInconsistentSvmAlarm, vmwNsxMFltrCnfgAppliedToVnic=vmwNsxMFltrCnfgAppliedToVnic, vmwNsxMControllerVmDeleted=vmwNsxMControllerVmDeleted, vmwNsxMUsvmPrefix=vmwNsxMUsvmPrefix, vmwNsxMDepPlugin=vmwNsxMDepPlugin, vmwNsxMServiceComposerPolicyOutOfSync=vmwNsxMServiceComposerPolicyOutOfSync, vmwNsxMNotification=vmwNsxMNotification, vmwNsxMSsoConfigFailure=vmwNsxMSsoConfigFailure, vmwNsxMMessagingReconfigFailed=vmwNsxMMessagingReconfigFailed, vmwNsxMEdgeVmCpuUsageIncreased=vmwNsxMEdgeVmCpuUsageIncreased, vmwNsxMUniversalSyncPrefix=vmwNsxMUniversalSyncPrefix, vmwNsxMIpsecTunnelDown=vmwNsxMIpsecTunnelDown, vmwNsxMFirewallInstallFailed=vmwNsxMFirewallInstallFailed, vmwNsxMDepPluginGenericAlarm=vmwNsxMDepPluginGenericAlarm, vmwNsxMEdgeVmPowerOff=vmwNsxMEdgeVmPowerOff, vmwNsxMSamDataStoppedFlowing=vmwNsxMSamDataStoppedFlowing, vmwNsxMEdgeHaEnabled=vmwNsxMEdgeHaEnabled, vmwNsxMIpsecChannelDown=vmwNsxMIpsecChannelDown, vmwNsxMFabricPrefix=vmwNsxMFabricPrefix, vmwNsxMFullUniversalSyncFailed=vmwNsxMFullUniversalSyncFailed, vmwNsxMFabricDplymntUnitCreated=vmwNsxMFabricDplymntUnitCreated, vmwNsxMGroupRoleUnassigned=vmwNsxMGroupRoleUnassigned, vmwNsxMUuid=vmwNsxMUuid, vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure=vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure, vmwNsxMEdgeGatewayRecovered=vmwNsxMEdgeGatewayRecovered, vmwNsxMSamSystemPrefix=vmwNsxMSamSystemPrefix, vmwNsxMEdgeVmHlthChkDisabled=vmwNsxMEdgeVmHlthChkDisabled, vmwNsxMFabricAgentCreated=vmwNsxMFabricAgentCreated, vmwNsxMServiceComposerPrefix=vmwNsxMServiceComposerPrefix, vmwNsxMEdgeVMHealthCheckMiss=vmwNsxMEdgeVMHealthCheckMiss, vmwNsxMSpoofGuardCnfgUpdateFailed=vmwNsxMSpoofGuardCnfgUpdateFailed, vmwNsxMSpoofGuardCnfgUpdateTmOut=vmwNsxMSpoofGuardCnfgUpdateTmOut, vmwNsxMUsvmHeartbeatStopped=vmwNsxMUsvmHeartbeatStopped, vmwNsxMHighLatencyOnDiskResolved=vmwNsxMHighLatencyOnDiskResolved, vmwNsxMEdgeVmSysTimeSync=vmwNsxMEdgeVmSysTimeSync, vmwNsxMLbVirtualServerPoolWrong=vmwNsxMLbVirtualServerPoolWrong, vmwNsxMConfigGroup=vmwNsxMConfigGroup, vmwNsxMGuestIntrspctnEsxConnFailed=vmwNsxMGuestIntrspctnEsxConnFailed, vmwNsxMCntnrUpdatePublishFailed=vmwNsxMCntnrUpdatePublishFailed, vmwNsxMSnmpDisabled=vmwNsxMSnmpDisabled, vmwNsxMFirewallClusterInstalled=vmwNsxMFirewallClusterInstalled, vmwNsxMFabricDependenciesNotInstalled=vmwNsxMFabricDependenciesNotInstalled, vmwNsxMMessagingConfigFailedNotifSkip=vmwNsxMMessagingConfigFailedNotifSkip, vmwNsxMAsyncRest=vmwNsxMAsyncRest, vmwNsxMFirewallRuleModified=vmwNsxMFirewallRuleModified, vmwNsxMAsyncRestPrefix=vmwNsxMAsyncRestPrefix, vmwNsxMExtensionRegistration=vmwNsxMExtensionRegistration, vmwNsxMEdgePrefix=vmwNsxMEdgePrefix, vmwNsxMServiceComposerGuestPolicyOutOfSync=vmwNsxMServiceComposerGuestPolicyOutOfSync, vmwNsxMVxlanLogicalSwitchImproperlyCnfg=vmwNsxMVxlanLogicalSwitchImproperlyCnfg, vmwNsxMEdgeCommAgentNotConnected=vmwNsxMEdgeCommAgentNotConnected, vmwNsxMFirewallForceSyncClusterFailed=vmwNsxMFirewallForceSyncClusterFailed, vmwNsxMEdgeVmBooted=vmwNsxMEdgeVmBooted, vmwNsxMDepPluginVmReboot=vmwNsxMDepPluginVmReboot, vmwNsxMDataSecScanStarted=vmwNsxMDataSecScanStarted, vmwNsxMVxlanVmknicMissingOrDeleted=vmwNsxMVxlanVmknicMissingOrDeleted, vmwNsxMVmRemovedFromSg=vmwNsxMVmRemovedFromSg, vmwNsxMEdge=vmwNsxMEdge, vmwNsxMVmAddedToSg=vmwNsxMVmAddedToSg, vmwNsxMUsvmHeartbeatResumed=vmwNsxMUsvmHeartbeatResumed, vmwNsxManagerNotificationInfoGroup1=vmwNsxManagerNotificationInfoGroup1, vmwNsxMVxlanInstanceDoesNotExist=vmwNsxMVxlanInstanceDoesNotExist, vmwNsxMSpoofGuardDisableFail=vmwNsxMSpoofGuardDisableFail, vmwNsxMConnPerSecThrshldCrossed=vmwNsxMConnPerSecThrshldCrossed, vmwNsxMSamDataCollectionEnabled=vmwNsxMSamDataCollectionEnabled, vmwNsxMGlobalLbMemberDown=vmwNsxMGlobalLbMemberDown, vmwNsxMVxlanTransportZoneIncorrectlyWrkng=vmwNsxMVxlanTransportZoneIncorrectlyWrkng, vmwNsxMFirewallConfigUpdateFailed=vmwNsxMFirewallConfigUpdateFailed, vmwNsxMGuestIntrspctnIncompatibleEsx=vmwNsxMGuestIntrspctnIncompatibleEsx, vmwNsxMGlobalLbMemberWarning=vmwNsxMGlobalLbMemberWarning, vmwNsxMEdgeVmInBadState=vmwNsxMEdgeVmInBadState, vmwNsxMFltrCreatedForVnic=vmwNsxMFltrCreatedForVnic, vmwNsxMMessagingPrefix=vmwNsxMMessagingPrefix, vmwNsxMFirewallCnfgUpdateOnDltCntnr=vmwNsxMFirewallCnfgUpdateOnDltCntnr, vmwNsxMFirewall=vmwNsxMFirewall, vmwNsxMEdgeSplitBrainDetected=vmwNsxMEdgeSplitBrainDetected, vmwNsxMSamDataResumedFlowing=vmwNsxMSamDataResumedFlowing, vmwNsxMGlobalLbMemberUnknown=vmwNsxMGlobalLbMemberUnknown, vmwNsxMServerUp=vmwNsxMServerUp, vmwNsxMFltrCnfgUpdateFailed=vmwNsxMFltrCnfgUpdateFailed, vmwNsxMServiceComposer=vmwNsxMServiceComposer, vmwNsxMIpAddedBlackList=vmwNsxMIpAddedBlackList, vmwNsxMEventSeverity=vmwNsxMEventSeverity, vmwNsxMFirewallPrefix=vmwNsxMFirewallPrefix, vmwNsxMEdgeGatewayCreated=vmwNsxMEdgeGatewayCreated, vmwNsxMEndpointPrefix=vmwNsxMEndpointPrefix, vmwNsxMFirewallPublishFailed=vmwNsxMFirewallPublishFailed, vmwNsxMVxlanControllerInactive=vmwNsxMVxlanControllerInactive, vmwNsxMSpoofGuardDisabled=vmwNsxMSpoofGuardDisabled, vmwNsxMLbVirtualServerPoolUp=vmwNsxMLbVirtualServerPoolUp, vmwNsxMVcDisconnected=vmwNsxMVcDisconnected, vmwNsxMSvmOperationsPrefix=vmwNsxMSvmOperationsPrefix, vmwNsxMSsoUnconfigured=vmwNsxMSsoUnconfigured)
mibBuilder.exportSymbols("VMWARE-NSX-MANAGER-MIB", vmwNsxMEsxModuleUninstalled=vmwNsxMEsxModuleUninstalled, vmwNsxMDataSecScanEnded=vmwNsxMDataSecScanEnded, vmwNsxMVxlanLogicalSwitchProperlyCnfg=vmwNsxMVxlanLogicalSwitchProperlyCnfg, vmwNsxMDataStoreNotCnfgrdOnHost=vmwNsxMDataStoreNotCnfgrdOnHost, vmwNsxMVxlanControllerActive=vmwNsxMVxlanControllerActive, vmwNsxMFabricConnEamRestored=vmwNsxMFabricConnEamRestored, vmwNsxMExtensionRegistered=vmwNsxMExtensionRegistered, vmwNsxMEdgeNoVmServing=vmwNsxMEdgeNoVmServing, vmwNsxMServiceComposerOutOfSyncDraftSettingFailure=vmwNsxMServiceComposerOutOfSyncDraftSettingFailure, vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure=vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure, vmwNsxMFltrDeletedForVnic=vmwNsxMFltrDeletedForVnic, vmwNsxMEdgeUpgrade51x=vmwNsxMEdgeUpgrade51x, vmwNsxMFirewallRuleAppliedVnic=vmwNsxMFirewallRuleAppliedVnic, vmwNsxMEdgeHealthCheckMiss=vmwNsxMEdgeHealthCheckMiss, vmwNsxMEdgeHaSwitchOverActive=vmwNsxMEdgeHaSwitchOverActive, vmwNsxMFabricDplymntUnitDestroyed=vmwNsxMFabricDplymntUnitDestroyed, vmwNsxMFabricBackingEamNotFound=vmwNsxMFabricBackingEamNotFound, vmwNsxMFirewallVsfwdProcessStarted=vmwNsxMFirewallVsfwdProcessStarted, vmwNsxMCount=vmwNsxMCount, vmwNsxMEdgeResourceReservationFailure=vmwNsxMEdgeResourceReservationFailure, vmwNsxMUniversalSyncFailedForEntity=vmwNsxMUniversalSyncFailedForEntity, vmwNsxMVsmCore=vmwNsxMVsmCore, vmwNsxMIpsecTunnelUp=vmwNsxMIpsecTunnelUp, vmwNsxMSnmpPrefix=vmwNsxMSnmpPrefix)
