#
# PySNMP MIB module CISCO-DOT11-HT-PHY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-HT-PHY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, Counter64, MibIdentifier, Bits, NotificationType, IpAddress, Counter32, ObjectIdentity, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "Counter64", "MibIdentifier", "Bits", "NotificationType", "IpAddress", "Counter32", "ObjectIdentity", "TimeTicks", "Integer32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoDot11HtPhyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 607))
ciscoDot11HtPhyMIB.setRevisions(('2006-12-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDot11HtPhyMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoDot11HtPhyMIB.setLastUpdated('200612110000Z')
if mibBuilder.loadTexts: ciscoDot11HtPhyMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDot11HtPhyMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoDot11HtPhyMIB.setDescription("This MIB is intended to be implemented on Cisco's WLAN devices that provide the wired uplink to wireless clients through the high-throughput dot11 radios compliant to the 802.11n specification. The MIB describes the PHY layer parameters of the 802.11n compliant radio interfaces. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. A-MPDU An aggregated format that consists of several MAC Protocol Data Units being aggregated and transmitted in one PHY Service Data Unit. A-MSDU An aggregated format that consists of several MAC Service Data Units being aggregated and transmitted in one MAC Protocol Data Unit. Block-Ack This refers to the acknowledgement done for all the MPDUs in an A-MDPU. Basic Service Set ( BSS ) The IEEE 802.11 BSS of an AP comprises of the stations directly associating with the AP. CSI Channel State Information Clear Channel Assessment ( CCA ) A technique to assess the availability of the channel for communication purposes. Dual CTS Clear-To-Send control frame is sent by the receiver in response to the Request-To-Send (RTS) control frame from the sender to virtually reserve the wireless medium for data transfer. Dual CTS mechanism is used by the AP to reserve the wireless medium for wireless devices that do not support STBC. Green Field A mode of operation where high-throughput 802.11n frames are transmitted without a legacy compatible part. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node and client are used interchangeably. Modulation and Coding Scheme ( MCS ) This is a value that determines the modulation, coding and number of spatial channels. Each scheme specifies the modulation technique, coding rate , number of spatial streams etc and the corresponding data rate. Multiple Input Multiple Output ( MIMO ) This technique advocates sending and receiving data communication signals through multiple antennas. MIMO uses the multiple streams to transmit more information and recombine the signal at the receiving end. This brings more reliability and significant gain over the traditional antenna systems. PLCP PHY Layer Convergence Protocol PMD Physical Medium Dependent Power Save Multi-Poll ( PSMP ) A MAC control frame that schedules the transmissions and receptions of PSMP devices. Phased Coexistence Operation ( PCO ) A BSS mode with alternating 20MHz and 40MHz phases of operation controlled by a PCO AP. PHY Protocol Data Unit ( PPDU ) Unit of data transfer at PHY level. Short-Guard Interval ( SG ) Space-Time Block Coding ( STBC ) By this technique, a wireless device transmits several copies of a data stream across a series of antennas so that the receiver can use the various received portions of the data signal to improve reliability of data transfer. Reduced Inter-Frame Space ( RIFS ) A time interval between multiple transmissions of a single transmitter used to reduce overhead and increase network efficiency. Zero Length Frame ( ZLF ) A PPDU carrying a PSDU of zero-length. REFERENCE [1] Part 11. Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications: Enhancements for Higher Throughput [2] Enhanced Wireless Consortium MAC Specification, v1.24 [3] Enhanced Wireless Consortium PHY Specification, v1.27 [4] IEEE802dot11-MIB ")
ciscoDot11HtPhyMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 607, 0))
ciscoDot11HtPhyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 607, 1))
ciscoDot11HtPhyMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 607, 2))
cD11HtPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1))
class CD11HtPhyBeamformFeedback(TextualConvention, Bits):
    description = "This textual convention represents the Beamforming feedback characteristics. The semantics are as follows. 'unsolicited' - The 802.11n interface can provide unsolicited feedback. 'immediate' - The 802.11n interface can provide immediate feedback. 'aggregated' - The 802.11n interface can provide an aggregated feedback. If none of these bits are set, it indicates that the 802.11n interface is incapable of providing the feedback. "
    status = 'current'
    namedValues = NamedValues(("unsolicited", 0), ("immediate", 1), ("aggregated", 2))

cD11HtPhyAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1), )
if mibBuilder.loadTexts: cD11HtPhyAntennaTable.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyAntennaTable.setDescription("This table describes the antennas connected to the 802.11n interface. Entries in this table are created automatically by the agent corresponding to each 802.11n radio interface. There exists in this table, an entry corresponding to each entry in dot11PhyOperationTable where dot11PHYType equals 'ht'(7). ")
cD11HtPhyAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cD11HtPhyAntennaEntry.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyAntennaEntry.setDescription('Each entry represents a conceptual row in cD11HtPhyAntennaTable and describes the antennas connected to the 802.11n interface. ')
cD11HtPhyAntennaSelectionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyAntennaSelectionImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyAntennaSelectionImplemented.setDescription("This object, when 'true', indicates that antenna selection is supported on this 802.11n interface. ")
cD11HtPhyXmitExpCSIFdbkASImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyXmitExpCSIFdbkASImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyXmitExpCSIFdbkASImplemented.setDescription("This object, when 'true', indicates that transmit Antenna Selection based on explicit CSI feedback is supported on this 802.11n interface. ")
cD11HtPhyXmitIndFdbkASImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyXmitIndFdbkASImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyXmitIndFdbkASImplemented.setDescription("This object, when 'true', indicates that the transmit antenna selection based on antenna indices feedback is supported on this 802.11n interface. ")
cD11HtPhyExplCSIFdbkASImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExplCSIFdbkASImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExplCSIFdbkASImplemented.setDescription("This object, when 'true', indicates that the computation of CSI and feedback to support the peer to do antenna selection is supported on this 802.11n interface. ")
cD11HtPhyXmitIndCompFdbkASImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyXmitIndCompFdbkASImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyXmitIndCompFdbkASImplemented.setDescription("This object is set to 'true' to indicate that the transmit antenna selection based on antenna indices selection computation and feedback the results to support the peer to do antenna selection is supported on this 802.11n interface. ")
cD11HtPhyRcvAntennaSelImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyRcvAntennaSelImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyRcvAntennaSelImplemented.setDescription("This object is set to 'true' to indicate that the receive antenna selection is supported on this 802.11n interface. ")
cD11HtPhyXmitSoundPPDUImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyXmitSoundPPDUImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyXmitSoundPPDUImplemented.setDescription("This object when set to 'true', indicates that the transmission of sounding PPDUs is supported on the 802.11n interface. ")
cD11HtPhyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2), )
if mibBuilder.loadTexts: cD11HtPhyTable.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTable.setDescription("This table represents the physical layer parameters of the 802.11n radio interface. Entries in this table are created automatically by the agent corresponding to each 802.11n interface. There exists in this table, an entry corresponding to each entry in dot11PhyOperationTable where dot11PHYType equals 'ht'(7). ")
cD11HtPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cD11HtPhyEntry.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyEntry.setDescription('Each entry represents a conceptual row in cD11HtPhyTable and corresponds to the support available for the various high-throughput capabilities on an 802.11n interface. ')
cD11HtPhyOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("legacy", 1), ("mixed", 2), ("greenField", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyOperatingMode.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyOperatingMode.setDescription("This object represents the mode of operation of 802.11n interface at the physical layer. The semantics are as follows. legacy - In this mode, packets are transmitted in the legacy 802.11a/g format. mixed - In this mode, packets are transmitted with a preamble that can be recognized by the legacy 802.11a/g devices. Both mixed mode and legacy packets can be recognised by the receiving 802.11n interface. greenField - In this mode, a transmitting station won't add a preamble to the packets sent. ")
cD11HtPhyOperModeFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("legacyMode", 1), ("htMode", 2), ("dupLegacyMode", 3), ("fortyMHzUpperMode", 4), ("fortyMHzLowerMode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyOperModeFrequency.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyOperModeFrequency.setDescription('This object represents the channel characteristics of the PHY. The semantics are as follows. legacyMode - The radio channel characteristics are the same as that of 802.11a/802.11g radios. htMode - The radio operates in either 40MHz bandwidth with one to four spatial streams. dupLegacyMode - The radio operates in a 40MHz channel composed of 2 adjacent 20MHz channels. The packets sent are in the legacy 802.11a format in each of the 20MHz channels. fortyMHzUpperMode - The radio tranmits a legacy or HT packet in the upper 20MHz channel of a 40MHz channel. fortyMHzLowerMode - The radio transmits a legacy or HT packet in the lower 20MHz channel of a 40MHz channel. ')
cD11HtPhyOperBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("band24GHz", 1), ("band5GHz", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyOperBand.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyOperBand.setDescription('This object represents the frequency band an 802.11n radio operates in. The semantics are as follows. 24GHz - The radio operates in the 2.4GHz frequency band. 5GHz - The radio operates in the 5 GHz frequency band. ')
cD11HtPhyFortyMHzOperationImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyFortyMHzOperationImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyFortyMHzOperationImplemented.setDescription("This object, when set to 'true', indicates that the 40 MHz operation is implemented. ")
cD11HtPhyFortyMHzOperationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyFortyMHzOperationEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyFortyMHzOperationEnabled.setDescription("This object , when set to 'true', indicates that the 40 MHz Operation is enabled. ")
cD11HtPhyCurrentControlChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyCurrentControlChannel.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyCurrentControlChannel.setDescription('This object represents the operating channel. If 40 MHz mode is currently in use then this object indicates the control channel. ')
cD11HtPhyCurrentExtensionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noExtension", 1), ("extensionAbove", 2), ("extensionBelow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyCurrentExtensionChannel.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyCurrentExtensionChannel.setDescription('This object represents the channel extension offset. The semantics are as follows. noExtension - No extension channel is present and the radio operates in the 20MHz mode. extensionAbove - The extension channel is above the control channel. This is applicable only if the radio operates in the 40MHz mode. extensionBelow - The extension channel is below the control channel. This is applicable only if the radio operates in the 40MHz mode. ')
cD11HtPhyExtChannelCCAImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExtChannelCCAImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExtChannelCCAImplemented.setDescription('This object, when set to true, indicates that making a CCA on the extension channel is supported. ')
cD11HtPhyNumberOfSpatialStreamsImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyNumberOfSpatialStreamsImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyNumberOfSpatialStreamsImplemented.setDescription('This object represents the maximum number of spatial streams implemented. ')
cD11HtPhyNumberOfSpatialStreamsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyNumberOfSpatialStreamsEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyNumberOfSpatialStreamsEnabled.setDescription('This object represents the maximum number of spatial streams enabled. ')
cD11HtPhyGreenFieldImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyGreenFieldImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyGreenFieldImplemented.setDescription("This object, when set to 'true', indicates that the Greenfield option is implemented. ")
cD11HtPhyGreenFieldEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyGreenFieldEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyGreenFieldEnabled.setDescription("This object, when set to 'true', indicates that the Greenfield option is enabled. ")
cD11HtPhyShortGIInTwentyImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyShortGIInTwentyImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyShortGIInTwentyImplemented.setDescription("This object, when set to 'true', indicates that the Short-Guard option is implemented for 20 MHz operation. ")
cD11HtPhyShortGIInTwentyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyShortGIInTwentyEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyShortGIInTwentyEnabled.setDescription("This object, when set to 'true', indicates that the Short Guard option is enabled for 20 MHz operation. ")
cD11HtPhyShortGIInFortyImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyShortGIInFortyImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyShortGIInFortyImplemented.setDescription("This object, when set to 'true', indicates that the Short Guard option is implemented for 40 MHz operation. ")
cD11HtPhyShortGIInFortyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyShortGIInFortyEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyShortGIInFortyEnabled.setDescription("This object, when set to 'true', indicates that the Short Guard option is enabled for 40 MHz operation. ")
cD11HtPhyAdvancedCodingImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyAdvancedCodingImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyAdvancedCodingImplemented.setDescription("This object, when set to 'true', indicates that the Advanced Coding option is implemented. ")
cD11HtPhyAdvancedCodingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyAdvancedCodingEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyAdvancedCodingEnabled.setDescription("This object, when set to 'true', indicates that the Advanced Coding option is enabled. ")
cD11HtPhyTxSTBCImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyTxSTBCImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTxSTBCImplemented.setDescription("This object, when set to 'true', indicates that the entity is capable of transmitting frames using Space-Time Block Code (STBC) option. ")
cD11HtPhyTxSTBCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyTxSTBCEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTxSTBCEnabled.setDescription("This object, when set to 'true', indicates that the entity's capability of transmitting frames using Space-Time Block Code (STBC) option is enabled. ")
cD11HtPhyRxSTBCImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 21), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyRxSTBCImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyRxSTBCImplemented.setDescription("This object, when set to 'true', indicates that the entity is capable of receiving frames that are sent using the Space-Time Block Code (STBC). ")
cD11HtPhyRxSTBCEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyRxSTBCEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyRxSTBCEnabled.setDescription("This object, when set to 'true', indicates that the entity's capability of receiving frames that are sent using the Space-Time Block Code (STBC) is enabled. ")
cD11HtPhyBeamFormingImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyBeamFormingImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyBeamFormingImplemented.setDescription("This object, when set to 'true', indicates that the Beam Forming option is implemented. ")
cD11HtPhyBeamFormingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 2, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cD11HtPhyBeamFormingEnabled.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyBeamFormingEnabled.setDescription("This object, when set to 'true', indicates that the BeamForming option is enabled. ")
cD11HtPhySupportedMCSTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 3), )
if mibBuilder.loadTexts: cD11HtPhySupportedMCSTable.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhySupportedMCSTable.setDescription("This table represents the transmit and receive MCS supported by the PLCP and PMD, represented by a count from 0 to 127, subject to limitations of each individual PHY. Entries in this table are created automatically by the agent corresponding to each 802.11n compliant interface. There exists in this table, an entry corresponding to each entry in dot11PhyOperationTable where dot11PHYType equals 'ht'(7). ")
cD11HtPhySupportedMCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cD11HtPhySupportedMCSEntry.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhySupportedMCSEntry.setDescription('Each entry represents a conceptual row in cD11HtPhySupportedMCSTable and describes the transmit and receive MCS supported on this 802.11n interface. ')
cD11HtPhySupportedMCSTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhySupportedMCSTxValue.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhySupportedMCSTxValue.setDescription('This object represents the Transmit MCS supported by the PLCP and PMD. ')
cD11HtPhySupportedMCSRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhySupportedMCSRxValue.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhySupportedMCSRxValue.setDescription('This object represents the Receive MCS supported by the PLCP and PMD. ')
cD11HtPhyTxBFConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4), )
if mibBuilder.loadTexts: cD11HtPhyTxBFConfigTable.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTxBFConfigTable.setDescription("This table describes the Transmit BeamForming capabilities of an 802.11n interface. Entries in this table are created automatically by the agent corresponding to each 802.11n interface. There exists in this table, an entry corresponding to each entry in dot11PhyOperationTable where dot11PHYType equals 'ht'(7). ")
cD11HtPhyTxBFConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cD11HtPhyTxBFConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTxBFConfigEntry.setDescription('Each entry represents a conceptual row in cD11HtPhyTxBFConfigTable and corresponds to the Beamforming capabilities of an 802.11n interface. ')
cD11HtPhyRxStaggerSoundImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyRxStaggerSoundImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyRxStaggerSoundImplemented.setDescription("This object, when set to 'true', indicates that the implementation supports the receiving of staggered sounding frames. ")
cD11HtPhyTxStaggerSoundImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyTxStaggerSoundImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTxStaggerSoundImplemented.setDescription("This object, when set to 'true', indicates that the implementation supports the transmission of staggered sounding frames. ")
cD11HtPhyRxZLFImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyRxZLFImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyRxZLFImplemented.setDescription("This object, when set to 'true', indicates that the implementation is capable of receiving ZLF as sounding frames. ")
cD11HtPhyTxZLFImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyTxZLFImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyTxZLFImplemented.setDescription("This object, when set to 'true', indicates that the implementation is capable of transmitting ZLF as sounding frames. ")
cD11HtPhyImplicitTxBFImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyImplicitTxBFImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyImplicitTxBFImplemented.setDescription("This object, when set to 'true', indicates that the implementation is capable of applying implicit transmit beamforming. ")
cD11HtPhyCalibrationImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inCapable", 1), ("unableToInitiate", 2), ("ableToInitiate", 3), ("fullyCapable", 4))).clone('inCapable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyCalibrationImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyCalibrationImplemented.setDescription("This object indicates the level of calibration supported by the implementation. The semantics are follows. 'inCapable' - This station can't participate in a calibration procedure initiated by another station. 'unableToInitiate' - This station can involve in calibration, but cannot apply reciprocity correction vector received from the initiator and cannot initiate calibration. 'ableToInitiate' - This station can initiate calibration but cannot apply reciprocity correction vector received from the initiator. 'fullyCapable' - This statin can participate in a calibration procedure initiated by another station, can respond to a Sounding PPDU and provide a MIMO channel measurement report in response to the receipt of a Sounding PPDU. The station can also apply reciprocity correction vector received from the initiator of calibration response. ")
cD11HtPhyExplCSITxBFImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExplCSITxBFImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExplCSITxBFImplemented.setDescription("This object, when set to 'true', indicates that implementation is capable of applying transmit beamforming using CSI explicit feedback in its transmission. ")
cD11HtPhyExplUncompSteerMatrixImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExplUncompSteerMatrixImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExplUncompSteerMatrixImplemented.setDescription("This object, when set to 'true', indicates that implementation is capable of applying transmit beamforming using uncompressed steering matrix explicit feedback in its transmission. ")
cD11HtPhyExplBFCSIFdbkImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 9), CD11HtPhyBeamformFeedback()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExplBFCSIFdbkImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExplBFCSIFdbkImplemented.setDescription('This object indicates the level of CSI explicit feedback supported by the implementation. ')
cD11HtPhyExplUncompSteerMatrixFdbkImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 10), CD11HtPhyBeamformFeedback()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExplUncompSteerMatrixFdbkImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExplUncompSteerMatrixFdbkImplemented.setDescription('This object indicates the level of uncompressed steering matrix explicit feedback supported by the implementation. ')
cD11HtPhyExplCompSteerMatrixFdbkImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 11), CD11HtPhyBeamformFeedback()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyExplCompSteerMatrixFdbkImplemented.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyExplCompSteerMatrixFdbkImplemented.setDescription('This object indicates the level of uncompressed steering matrix explicit feedback returned by the implementation. ')
cD11HtPhyNumberBeamFormingCSISupportAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyNumberBeamFormingCSISupportAntenna.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyNumberBeamFormingCSISupportAntenna.setDescription('This object indicates the maximum number of beamform antennas the beamformee can support when CSI feedback is required. ')
cD11HtPhyNumberUncompSteerMatrixSupportAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyNumberUncompSteerMatrixSupportAntenna.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyNumberUncompSteerMatrixSupportAntenna.setDescription('This object indicates the maximum number of beamform antennas the beamformee can support when uncompressed steering matrix feedback is required. ')
cD11HtPhyNumberCompSteerMatrixSupportAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyNumberCompSteerMatrixSupportAntenna.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyNumberCompSteerMatrixSupportAntenna.setDescription('This object indicates the maximum number of beamform antennas the beamformee can support when compressed steering matrix feedback is required. ')
cD11HtPhyEnhPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 5), )
if mibBuilder.loadTexts: cD11HtPhyEnhPowerTable.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyEnhPowerTable.setDescription("This table represents the transmission power characteristics specific to 802.11n radio interfaces. There exists in this table, an entry corresponding to each entry in dot11PhyOperationTable where dot11PHYType equals 'ht'(7). ")
cD11HtPhyEnhPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cD11HtPhyEnhPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyEnhPowerEntry.setDescription('Each entry represents a conceptual row in ccD11HtPhyEnhPowerTable and describes the transmission power characteristics specific to a 802.11n radio. ')
cD11HtPhyEnhPowerLevel20MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyEnhPowerLevel20MHz.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyEnhPowerLevel20MHz.setDescription("This object represents the power level of the 802.11n radio when operating at 20 MHz. A value of 0 indicates that the power level couldn't be determined at the time the agent is queried for an instance of this object. ")
cD11HtPhyEnhPowerLevel40MHz = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 607, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cD11HtPhyEnhPowerLevel40MHz.setStatus('current')
if mibBuilder.loadTexts: cD11HtPhyEnhPowerLevel40MHz.setDescription("This object represents the power level of the 802.11n radio when operating at 40 MHz. A value of 0 indicates that the power level couldn't be determined at the time the agent is queried for an instance of this object. ")
ciscoDot11HtPhyMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 1))
ciscoDot11HtPhyMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 2))
ciscoDot11HtMacCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 1, 1)).setObjects(("CISCO-DOT11-HT-PHY-MIB", "ciscoDot11HtPhyAntennaGroup"), ("CISCO-DOT11-HT-PHY-MIB", "ciscoDot11HtPhyConfigGroup"), ("CISCO-DOT11-HT-PHY-MIB", "ciscoDot11HtPhyMcsGroup"), ("CISCO-DOT11-HT-PHY-MIB", "ciscoDot11HtPhyTxBfGroup"), ("CISCO-DOT11-HT-PHY-MIB", "ciscoDot11HtPhyEnhPowerLevelsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11HtMacCompliance = ciscoDot11HtMacCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11HtMacCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoDot11HtPhyMIB module. ')
ciscoDot11HtPhyAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 2, 1)).setObjects(("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyAntennaSelectionImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyXmitExpCSIFdbkASImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyXmitIndFdbkASImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExplCSIFdbkASImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyXmitIndCompFdbkASImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyRcvAntennaSelImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyXmitSoundPPDUImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11HtPhyAntennaGroup = ciscoDot11HtPhyAntennaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11HtPhyAntennaGroup.setDescription('This collection of objects represent the antennae-related parameters. ')
ciscoDot11HtPhyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 2, 2)).setObjects(("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyOperatingMode"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyOperModeFrequency"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyOperBand"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyFortyMHzOperationImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyFortyMHzOperationEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyCurrentControlChannel"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyCurrentExtensionChannel"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExtChannelCCAImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyNumberOfSpatialStreamsImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyNumberOfSpatialStreamsEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyGreenFieldImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyGreenFieldEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyShortGIInTwentyImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyShortGIInTwentyEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyShortGIInFortyImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyShortGIInFortyEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyAdvancedCodingImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyAdvancedCodingEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyTxSTBCImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyTxSTBCEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyRxSTBCImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyRxSTBCEnabled"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyBeamFormingImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyBeamFormingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11HtPhyConfigGroup = ciscoDot11HtPhyConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11HtPhyConfigGroup.setDescription('This collection of objects represent the operating parameters of the 802.11n radio at the physical layer. ')
ciscoDot11HtPhyMcsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 2, 3)).setObjects(("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhySupportedMCSTxValue"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhySupportedMCSRxValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11HtPhyMcsGroup = ciscoDot11HtPhyMcsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11HtPhyMcsGroup.setDescription('This collection of objects represent the MCS rates supported by the 802.11n radio. ')
ciscoDot11HtPhyTxBfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 2, 4)).setObjects(("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyRxStaggerSoundImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyTxStaggerSoundImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyRxZLFImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyTxZLFImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyImplicitTxBFImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyCalibrationImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExplCSITxBFImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExplUncompSteerMatrixImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExplBFCSIFdbkImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExplUncompSteerMatrixFdbkImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyExplCompSteerMatrixFdbkImplemented"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyNumberBeamFormingCSISupportAntenna"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyNumberUncompSteerMatrixSupportAntenna"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyNumberCompSteerMatrixSupportAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11HtPhyTxBfGroup = ciscoDot11HtPhyTxBfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11HtPhyTxBfGroup.setDescription('This collection of objects represent the transmit BeamForming configuration on an 802.11n radio. ')
ciscoDot11HtPhyEnhPowerLevelsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 607, 2, 2, 5)).setObjects(("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyEnhPowerLevel20MHz"), ("CISCO-DOT11-HT-PHY-MIB", "cD11HtPhyEnhPowerLevel40MHz"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11HtPhyEnhPowerLevelsGroup = ciscoDot11HtPhyEnhPowerLevelsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11HtPhyEnhPowerLevelsGroup.setDescription('This collection of objects represents the transmission power characteristics specific to a 802.11n radio. ')
mibBuilder.exportSymbols("CISCO-DOT11-HT-PHY-MIB", cD11HtPhyRxSTBCEnabled=cD11HtPhyRxSTBCEnabled, cD11HtPhyShortGIInFortyEnabled=cD11HtPhyShortGIInFortyEnabled, cD11HtPhyExplBFCSIFdbkImplemented=cD11HtPhyExplBFCSIFdbkImplemented, cD11HtPhyRxZLFImplemented=cD11HtPhyRxZLFImplemented, ciscoDot11HtMacCompliance=ciscoDot11HtMacCompliance, CD11HtPhyBeamformFeedback=CD11HtPhyBeamformFeedback, cD11HtPhyExplCSITxBFImplemented=cD11HtPhyExplCSITxBFImplemented, cD11HtPhySupportedMCSRxValue=cD11HtPhySupportedMCSRxValue, cD11HtPhySupportedMCSTable=cD11HtPhySupportedMCSTable, cD11HtPhyImplicitTxBFImplemented=cD11HtPhyImplicitTxBFImplemented, cD11HtPhyGreenFieldImplemented=cD11HtPhyGreenFieldImplemented, cD11HtPhyEnhPowerLevel40MHz=cD11HtPhyEnhPowerLevel40MHz, cD11HtPhyExplCSIFdbkASImplemented=cD11HtPhyExplCSIFdbkASImplemented, ciscoDot11HtPhyEnhPowerLevelsGroup=ciscoDot11HtPhyEnhPowerLevelsGroup, cD11HtPhyOperBand=cD11HtPhyOperBand, cD11HtPhyExtChannelCCAImplemented=cD11HtPhyExtChannelCCAImplemented, ciscoDot11HtPhyMIBConform=ciscoDot11HtPhyMIBConform, cD11HtPhyBeamFormingEnabled=cD11HtPhyBeamFormingEnabled, cD11HtPhyFortyMHzOperationEnabled=cD11HtPhyFortyMHzOperationEnabled, cD11HtPhyAdvancedCodingImplemented=cD11HtPhyAdvancedCodingImplemented, ciscoDot11HtPhyAntennaGroup=ciscoDot11HtPhyAntennaGroup, cD11HtPhyAntennaEntry=cD11HtPhyAntennaEntry, cD11HtPhyCurrentExtensionChannel=cD11HtPhyCurrentExtensionChannel, cD11HtPhyCurrentControlChannel=cD11HtPhyCurrentControlChannel, cD11HtPhyEntry=cD11HtPhyEntry, cD11HtPhyFortyMHzOperationImplemented=cD11HtPhyFortyMHzOperationImplemented, PYSNMP_MODULE_ID=ciscoDot11HtPhyMIB, ciscoDot11HtPhyMIBNotifs=ciscoDot11HtPhyMIBNotifs, ciscoDot11HtPhyMIB=ciscoDot11HtPhyMIB, cD11HtPhyXmitExpCSIFdbkASImplemented=cD11HtPhyXmitExpCSIFdbkASImplemented, cD11HtPhyOperatingMode=cD11HtPhyOperatingMode, cD11HtPhyNumberOfSpatialStreamsImplemented=cD11HtPhyNumberOfSpatialStreamsImplemented, cD11HtPhyTxSTBCImplemented=cD11HtPhyTxSTBCImplemented, cD11HtPhyGreenFieldEnabled=cD11HtPhyGreenFieldEnabled, cD11HtPhyBeamFormingImplemented=cD11HtPhyBeamFormingImplemented, cD11HtPhySupportedMCSEntry=cD11HtPhySupportedMCSEntry, cD11HtPhyNumberUncompSteerMatrixSupportAntenna=cD11HtPhyNumberUncompSteerMatrixSupportAntenna, cD11HtPhyEnhPowerLevel20MHz=cD11HtPhyEnhPowerLevel20MHz, cD11HtPhyRcvAntennaSelImplemented=cD11HtPhyRcvAntennaSelImplemented, cD11HtPhyShortGIInTwentyImplemented=cD11HtPhyShortGIInTwentyImplemented, cD11HtPhyAdvancedCodingEnabled=cD11HtPhyAdvancedCodingEnabled, ciscoDot11HtPhyMIBGroups=ciscoDot11HtPhyMIBGroups, cD11HtPhySupportedMCSTxValue=cD11HtPhySupportedMCSTxValue, cD11HtPhy=cD11HtPhy, cD11HtPhyXmitSoundPPDUImplemented=cD11HtPhyXmitSoundPPDUImplemented, cD11HtPhyExplUncompSteerMatrixImplemented=cD11HtPhyExplUncompSteerMatrixImplemented, cD11HtPhyXmitIndFdbkASImplemented=cD11HtPhyXmitIndFdbkASImplemented, cD11HtPhyExplUncompSteerMatrixFdbkImplemented=cD11HtPhyExplUncompSteerMatrixFdbkImplemented, cD11HtPhyEnhPowerTable=cD11HtPhyEnhPowerTable, cD11HtPhyTable=cD11HtPhyTable, cD11HtPhyTxSTBCEnabled=cD11HtPhyTxSTBCEnabled, cD11HtPhyExplCompSteerMatrixFdbkImplemented=cD11HtPhyExplCompSteerMatrixFdbkImplemented, ciscoDot11HtPhyMcsGroup=ciscoDot11HtPhyMcsGroup, cD11HtPhyShortGIInTwentyEnabled=cD11HtPhyShortGIInTwentyEnabled, cD11HtPhyXmitIndCompFdbkASImplemented=cD11HtPhyXmitIndCompFdbkASImplemented, cD11HtPhyRxSTBCImplemented=cD11HtPhyRxSTBCImplemented, cD11HtPhyAntennaSelectionImplemented=cD11HtPhyAntennaSelectionImplemented, cD11HtPhyRxStaggerSoundImplemented=cD11HtPhyRxStaggerSoundImplemented, cD11HtPhyEnhPowerEntry=cD11HtPhyEnhPowerEntry, ciscoDot11HtPhyConfigGroup=ciscoDot11HtPhyConfigGroup, cD11HtPhyAntennaTable=cD11HtPhyAntennaTable, cD11HtPhyTxZLFImplemented=cD11HtPhyTxZLFImplemented, cD11HtPhyNumberOfSpatialStreamsEnabled=cD11HtPhyNumberOfSpatialStreamsEnabled, cD11HtPhyCalibrationImplemented=cD11HtPhyCalibrationImplemented, ciscoDot11HtPhyTxBfGroup=ciscoDot11HtPhyTxBfGroup, cD11HtPhyNumberBeamFormingCSISupportAntenna=cD11HtPhyNumberBeamFormingCSISupportAntenna, cD11HtPhyTxBFConfigTable=cD11HtPhyTxBFConfigTable, cD11HtPhyNumberCompSteerMatrixSupportAntenna=cD11HtPhyNumberCompSteerMatrixSupportAntenna, cD11HtPhyTxBFConfigEntry=cD11HtPhyTxBFConfigEntry, cD11HtPhyTxStaggerSoundImplemented=cD11HtPhyTxStaggerSoundImplemented, cD11HtPhyShortGIInFortyImplemented=cD11HtPhyShortGIInFortyImplemented, ciscoDot11HtPhyMIBCompliances=ciscoDot11HtPhyMIBCompliances, ciscoDot11HtPhyMIBObjects=ciscoDot11HtPhyMIBObjects, cD11HtPhyOperModeFrequency=cD11HtPhyOperModeFrequency)
