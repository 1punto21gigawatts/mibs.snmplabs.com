#
# PySNMP MIB module Unisphere-Data-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, ObjectIdentity, ModuleIdentity, MibIdentifier, Integer32, Unsigned32, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Integer32", "Unsigned32", "Counter64", "Counter32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdName, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdName")
usdAaaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20))
usdAaaMIB.setRevisions(('2002-08-02 12:50', '2002-08-01 19:50', '2001-10-05 13:25', '2001-10-03 19:05', '2001-03-01 17:03', '2001-02-12 19:54', '2000-05-18 00:00', '1999-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdAaaMIB.setRevisionsDescriptions(('Added support for additional AAA objects: usdAaaAssignSubscriberLimit, usdAaaAcctSendStopOnAaaDeny, usdAaaAcctSendStopOnAaaReject, usdAaaTunnelIgnoreNasPort, usdAaaTunnelIgnoreNasPortType, usdAaaTunnelAssignmentIdFormat, usdAaaSubscriberPseudoCount, usdAaaSubscriberPseudoPeakCount.', 'Added interface location-relative subscriber management attributes under usdAaaSubscribers. Increase ranges for usdAaaSessionTimeout and usdAaaAcctInterval.', 'Added subscriber management attributes under usdAaaSubscribers, capabilities management attributes under usdAaaCapabilities.', 'Added assignment delimiter attributes: usdAaaAssignDomainDelimiters usdAaaAssignRealmDelimiters usdAaaAssignDomainParseOrder usdAaaTunnelClientName usdAaaTunnelPassword usdAaaTunnelNasPortMethod; also, resized: usdAaaAssignDomainTunnelHostName usdAaaAssignDomainTunnelServerName ', 'Added usdAaaAssignDomainStripDomain', 'Added parameters to the usdAaaAssignDomainTunnelTable: usdAaaAssignDomainTunnelServerName usdAaaAssignDomainTunnelClientAddress Added usdAaaDupAddrCheck, usdAaaIdleTimeout and usdAaaSessionTimeout parameters.', "Added ATM traffic shaping parameters to usdAaaAssignDomainTable. Added usdAaaAssignDomainTunnelTable. Added 'dhcp' as an option for usdAaaAddrAddrPoolDefault; use of the value 'none' has been discontinued. Added statistics to track the performance of AAA.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdAaaMIB.setLastUpdated('200208021250Z')
if mibBuilder.loadTexts: usdAaaMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdAaaMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdAaaMIB.setDescription('The Authentication, Authorization and Accounting (AAA) MIB for the Unisphere Networks enterprise.')
class UsdAaaDomainName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'The name of an internet domain. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '63a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 63)

class UsdAaaAuthenticationMethods(TextualConvention, Integer32):
    description = 'The set of configurable authentication choices. The maximum enumerated type will never be greater than 255.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 5))
    namedValues = NamedValues(("protocolRadius", 1), ("protocolNone", 4), ("protocolLine", 5))

class UsdAaaAccountingMethods(TextualConvention, Integer32):
    description = 'The set of configurable accounting choices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4))
    namedValues = NamedValues(("protocolRadius", 1), ("protocolNone", 4))

class UsdAddressAssignType(TextualConvention, Integer32):
    description = 'The set of possible AAA address assignment sources.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("radius", 1), ("localPool", 2), ("dhcp", 3), ("user", 4))

class UsdSubscriberState(TextualConvention, Bits):
    description = 'The set of possible AAA subscriber states, expressed as a bit map: init Initial state (transient) pending Auth/Acct or Addr Request is pending established Subscriber is authenticated deleting Deletion of subscriber is pending tunneling Subscriber is being tunneled tunnelAcct Tunnel accounting is enabled terminated Subscriber has been terminated More than one state bit can be active simultaneously. If no bits are set, the subscriber is in a transient initial state.'
    status = 'current'
    namedValues = NamedValues(("pending", 0), ("established", 1), ("deleting", 2), ("tunneling", 3), ("tunnelAcct", 4), ("terminated", 5))

class UsdSubscriberClientType(TextualConvention, Integer32):
    description = 'The set of possible AAA subscriber client types: ppp PPP client login Command line interface or SSH ip IP-based application config Locally configured client identity tunnel Tunnel e.g. L2TP other Unspecified client type '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("ppp", 0), ("login", 1), ("ip", 2), ("config", 3), ("tunnel", 4), ("other", 5))

class UsdSubscriberLocationType(TextualConvention, Integer32):
    description = "Describes the platform-dependent interpretation of a UsdSubscriberLocationValue object: unknown Unspecified/unknown slotPort Two octets in length; first octet is 'slot', second octet is 'port' "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unknown", 0), ("slotPort", 1))

class UsdSubscriberLocationValue(TextualConvention, OctetString):
    description = "The value of a platform-dependent interface location, represented as an OCTET STRING. A corresponding UsdSubscriberLocationType object will identify the mapping of octets to location elements, e.g. 'slot.port'. Note, when the value of an object having this syntax is encoded as a MIB table INDEX, the rules for encoding a variable-length OCTET STRING are observed."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

usdAaaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1))
usdAaaAssignment = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1))
usdAaaAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2))
usdAaaAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3))
usdAaaAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4))
usdAaaStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5))
usdAaaTimeout = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6))
usdAaaTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7))
usdAaaSubscribers = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8))
usdAaaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9))
usdAaaAssignGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1))
usdAaaAssignBrasLicense = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAssignBrasLicense.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignBrasLicense.setDescription('The license string that determines the system-wide maximum number of remote user connections allowed. A zero-length string (no license) prohibits remote user connections.')
usdAaaAssignBrasLicensedUsers = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaAssignBrasLicensedUsers.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignBrasLicensedUsers.setDescription('The system-wide maximum number of remote user connections allowed by the currently configured license string.')
usdAaaAssignDomainDelimiters = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAssignDomainDelimiters.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainDelimiters.setDescription("The list of delimiters used to separate the user's name from the user's domain in the username field. The default is '@'.")
usdAaaAssignRealmDelimiters = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAssignRealmDelimiters.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignRealmDelimiters.setDescription("The list of delimiters used to separate the user's name from the user's realm in the username field. The realm is treated like the domain in the ERX. The default is none.")
usdAaaAssignDomainParseOrder = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("domainFirst", 1), ("realmFirst", 2))).clone('realmFirst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAssignDomainParseOrder.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainParseOrder.setDescription("The order in which the user's name is parsed: either search for domain first or realm first in the form (realm/user@domain.com). The default is domain first.")
usdAaaAssignSubscriberLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('users').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAssignSubscriberLimit.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignSubscriberLimit.setDescription("The maximum number of subscribers permitted in this VR context. The value '0' means no limit.")
usdAaaAssignDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2))
usdAaaAssignDomainTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1), )
if mibBuilder.loadTexts: usdAaaAssignDomainTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTable.setDescription("The entries in this table specify the assignment of a remote access user to a virtual router, based on the user's domain.")
usdAaaAssignDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1), ).setIndexNames((1, "Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"))
if mibBuilder.loadTexts: usdAaaAssignDomainEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainEntry.setDescription('A specification of the virtual router to which users on a specified domain should be assigned.')
usdAaaAssignDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 1), UsdAaaDomainName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaAssignDomainName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainName.setDescription('The domain name uniquely identifying this entry.')
usdAaaAssignDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
usdAaaAssignDomainRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 3), UsdName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainRouterName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainRouterName.setDescription('The name of the virtual router to which remote access users within this domain are assigned.')
usdAaaAssignDomainLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32000)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainLoopback.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainLoopback.setDescription("The number of the loopback interface, associated with the specified virtual router, whose IP address is used as the source address when transmitting IP packets on unnumbered remote access user links. For example, if the associated loopback interface for this domain/router was configured via the console as 'loopback 2', this object would contain the integer value 2. A value of -1 indicates the loopback interface is unspecified.")
usdAaaAssignDomainIpHint = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainIpHint.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainIpHint.setDescription('Enables/disables the IP hint feature, which causes the system to allocate an IP address before going to RADIUS for authentication.')
usdAaaAssignDomainAtmServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ubr", 1), ("ubrPcr", 2), ("nrtVbr", 3), ("cbr", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainAtmServiceLevel.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainAtmServiceLevel.setDescription('The Service category for this circuit: ubr Unspecified bit rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-realtime Variable Bit Rate. cbr Constant bit rate. Set the service level in combination of the traffic attributes PCR/SCR/MBS in the following matrix for successfull configurations. ServiceLevel PCR SCR MBS ------------------------------------------ ubr omit omit omit ubrPcr must omit omit nrtVbr must must must cbr must omit omit ')
usdAaaAssignDomainAtmPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainAtmPcr.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainAtmPcr.setDescription('Peak Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when usdAaaAssignDomainAtmServiceLevel is configured to have one of the following values: ubrPcr nrtVbr cbr ')
usdAaaAssignDomainAtmScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainAtmScr.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainAtmScr.setDescription('Sustained Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when usdAaaAssignDomainAtmServiceLevel is configured to have one of the following values: nrtVbr ')
usdAaaAssignDomainAtmMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainAtmMbs.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainAtmMbs.setDescription('Maximum Burst Size, in cells, of this circuit. This parameter is only required when usdAaaAssugbDomainAtmServiceLevel is configured to have one of the following values: nrtVbr ')
usdAaaAssignDomainOverrideUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainOverrideUserName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainOverrideUserName.setDescription('The override user name associated with this entry. This object is used to override the username of the remote client.')
usdAaaAssignDomainOverridePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainOverridePassword.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainOverridePassword.setDescription('The override password for the user name defined by usdAaaAssignDomainOverrideUserName. This object is used to override the password part of the username/password pair of the remote client. This value returns a string length of 0 on reads for security reasons.')
usdAaaAssignDomainStripDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainStripDomain.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainStripDomain.setDescription('Enables/disables the domain name stripping feature, which causes the system to strip the domain name before sending the access-request to RADIUS for authentication.')
usdAaaAssignDomainTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2), )
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelTable.setDescription('The entries in this table specify the tunnels associated with a domain.')
usdAaaAssignDomainTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1), ).setIndexNames((0, "Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelName"), (0, "Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelTag"))
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelEntry.setDescription('A specification of the tunnels associated with a domain.')
usdAaaAssignDomainTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 1), UsdAaaDomainName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelName.setDescription('The domain name associated with this entry.')
usdAaaAssignDomainTunnelTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelTag.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelTag.setDescription('The tunnel tag value associated with this entry.')
usdAaaAssignDomainTunnelPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelPreference.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelPreference.setDescription("The tunnel's preference value associated with this entry. The value 0 is the highest preference.")
usdAaaAssignDomainTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tunnelL2tp", 1), ("tunnelUnknown", 2), ("tunnelL2f", 3))).clone('tunnelL2tp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelType.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelType.setDescription('The tunnel type associated with this entry. Attempts to set this object to tunnelUnknown(2) will fail (wrongValue).')
usdAaaAssignDomainTunnelMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnelMediumIPv4", 1), ("tunnelMediumUnknown", 2))).clone('tunnelMediumIPv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelMedium.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelMedium.setDescription('The tunnel medium associated with this entry. The medium dictates the format of the tunnel address. Attempts to set this object to tunnelMediumUnknown(2) will fail (wrongValue).')
usdAaaAssignDomainTunnelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelAddress.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelAddress.setDescription('The tunnel server address associated with this entry. The usdAaaAssignDomainTunnelMedium object defines the format of the address. MEDIUM EXAMPLE FORMAT tunnelMedium_IPv4 xyz.xyz.xyz.xyz ')
usdAaaAssignDomainTunnelPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelPassword.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelPassword.setDescription('The tunnel password associated with this entry. The object returns a null length string on reads due to security concerns.')
usdAaaAssignDomainTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelId.setDescription('The tunnel identifier associated with this entry. The tunnel identifier is used to distinguish between multiple tunnels to the same usdAaaAssignDomainTunnelAddress.')
usdAaaAssignDomainTunnelHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelHostName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelHostName.setDescription('The tunnel client hostname associated with this entry. This object is analogous to the RADIUS attribute Tunnel-Client-Auth-ID. When a tunnel is established with a peer, this object can be used to distinguish groups of tunnels.')
usdAaaAssignDomainTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
usdAaaAssignDomainTunnelServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelServerName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelServerName.setDescription('The tunnel server hostname associated with this entry. This object is analogous to the RADIUS attribute Tunnel-Server-Auth-ID. When a tunnel is established with a peer, this object can be used to distinguish groups of tunnels.')
usdAaaAssignDomainTunnelClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelClientAddress.setStatus('current')
if mibBuilder.loadTexts: usdAaaAssignDomainTunnelClientAddress.setDescription('The tunnel client address associated with this entry. The usdAaaAssignDomainTunnelMedium object defines the format of the address. MEDIUM EXAMPLE FORMAT tunnelMedium_IPv4 xyz.xyz.xyz.xyz ')
usdAaaAuthGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1))
usdAaaAuthMethods = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAuthMethods.setStatus('current')
if mibBuilder.loadTexts: usdAaaAuthMethods.setDescription('The set of authentication protocols configured on this system. Each octet in this object contains one of the values defined in the UsdAaaAuthenticationMethods TEXTUAL-CONVENTION. The system will sequence through each octet of this object starting at octet 1 and attempt to use the corresponding authentication protocol defined by UsdAaaAuthenticationMethods. Note that if the octet is set to: protocolNone(4) Then authentication does not take place. If an authentication protocol is configured and attempts to reach the authentication server fail, the system will move to the next octet in this object and retry the authentication in the form dictated by the corresponding authentication protocoltype. The process of sequencing thru each octet will stop if the authentication server is successfully contacted, or there are no more configured octets in this object.')
usdAaaAcctGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1))
usdAaaAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 86400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAcctInterval.setStatus('current')
if mibBuilder.loadTexts: usdAaaAcctInterval.setDescription('The interval that must elapse between generation of accounting reports, ranging from 10 minutes to 18 hours, or disabled if set to zero.')
usdAaaAcctDupServerRouterName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 2), UsdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAcctDupServerRouterName.setStatus('current')
if mibBuilder.loadTexts: usdAaaAcctDupServerRouterName.setDescription('The name of another router on this system to which accounting reports should be sent, in addition to or instead of sending accounting reports to the accounting service (if any) configured on the current router (i.e., the router context within which this object instance exists). A zero-length name disables this mechanism.')
usdAaaAcctMethods = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAcctMethods.setStatus('current')
if mibBuilder.loadTexts: usdAaaAcctMethods.setDescription('The set of accounting protocols configured on this system. Each octet in this object contains one of the values defined in the UsdAaaAccountingMethods TEXTUAL CONVENTION. The system will sequence through each octet of this object starting at octet 1 and attempt to use the corresponding accounting protocol defined by UsdAaaAccountingMethods. Note that if the octet is set to: protocolNone(4) Then accounting is disabled. If an accounting protocol is configured and reports are not successfully generated, the system will move to the next octet in this object and repeat the attempt to generate an accounting report in the form dictated by the corresponding accounting protocol type. The process of sequencing thru each octet will stop if accounting reports are either successfully generated, or there are no more configured octets in this object.')
usdAaaAcctSendStopOnAaaDeny = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAcctSendStopOnAaaDeny.setStatus('current')
if mibBuilder.loadTexts: usdAaaAcctSendStopOnAaaDeny.setDescription('Enables/disables the accounting stop message sent to the accounting server when authentication server grants access, but AAA denies access.')
usdAaaAcctSendStopOnAaaReject = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAcctSendStopOnAaaReject.setStatus('current')
if mibBuilder.loadTexts: usdAaaAcctSendStopOnAaaReject.setDescription('Enables/disables the accounting stop message sent to the accounting server when authentication server denies access.')
usdAaaAddrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 1))
usdAaaAddrPoolDefault = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAddrPoolDefault.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddrPoolDefault.setDescription("Identifies the default source of IP address allocation for remote access links: none No address source is specified. Using this setting allows the remote PPP subscriber (client) to set it's own address. local Use the local address pool named 'default'. dhcp Use DHCP service.")
usdAaaDupAddrCheck = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaDupAddrCheck.setStatus('current')
if mibBuilder.loadTexts: usdAaaDupAddrCheck.setDescription("Enables/disables the duplicate IP address checking which causes the system to check the route table for the PPP user's dynamic IP address is provided to PPP (from AAA).")
usdAaaAddrNameServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2))
usdAaaAddrDns = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1))
usdAaaAddrWins = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 2))
usdAaaAddrDnsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAddrDnsPrimary.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddrDnsPrimary.setDescription('The IP address of the primary DNS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
usdAaaAddrDnsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAddrDnsSecondary.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddrDnsSecondary.setDescription('The IP address of the secondary DNS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
usdAaaAddrWinsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAddrWinsPrimary.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddrWinsPrimary.setDescription('The IP address of the primary WINS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
usdAaaAddrWinsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 4, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaAddrWinsSecondary.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddrWinsSecondary.setDescription('The IP address of the secondary WINS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
usdAaaTimeoutGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1))
usdAaaIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 7200), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: usdAaaIdleTimeout.setDescription('The maximum number of seconds that a user session can be idle before system disconnects the user, ranging from 300 to 7200 seconds, 0 disables idle timeout.')
usdAaaSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1814400), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: usdAaaSessionTimeout.setDescription('The maximum number of seconds that a user session can be established before system disconnects the user, ranging from 60 to 604800 seconds, 0 disables session timeout.')
usdAaaTunnelGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1))
usdAaaTunnelClientName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaTunnelClientName.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelClientName.setDescription('The default tunnel client hostname associated with this virtual router. This object is used when no tunnel client name (client auth ID) is supplied in the authentication response.')
usdAaaTunnelPassword = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaTunnelPassword.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelPassword.setDescription('The default tunnel password associated with this virtual router. This object is used when no tunnel password is supplied in the authentication response. The object returns a null length string on reads due to security concerns.')
usdAaaTunnelNasPortMethod = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("ciscoAvp", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaTunnelNasPortMethod.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelNasPortMethod.setDescription("The default tunnel NAS-port method associated with this virtual router. This object is used to specify the LAC's NAS-port method. This provides limit compatiability to Cisco LNS for the NAS-port method AVP.")
usdAaaTunnelIgnoreNasPort = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaTunnelIgnoreNasPort.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelIgnoreNasPort.setDescription('Enables/disables the use of the NAS-port value that is passed in from the tunnel application.')
usdAaaTunnelIgnoreNasPortType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaTunnelIgnoreNasPortType.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelIgnoreNasPortType.setDescription('Enables/disables the use of the NAS-port-type value that is passed in from the tunnel application.')
usdAaaTunnelAssignmentIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("assignmentId", 0), ("clientServerId", 1))).clone('assignmentId')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaTunnelAssignmentIdFormat.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelAssignmentIdFormat.setDescription('The tunnel assignment ID format for distinguishing tunnel definitions. This object is used to specify the tunnel assigment ID format passed to the LAC. The value assignmentId(0) indicates that the original tunnel assignment ID value is to be used; clientServerId(1) indicates that the concatenated value from client-auth-name, server-auth-name, and assignment-id is to be used.')
usdAaaIncomingInitiateRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingInitiateRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingInitiateRequests.setDescription('The number of AAA incoming initiate requests')
usdAaaIncomingTerminateRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingTerminateRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingTerminateRequests.setDescription('The number of AAA incomining termination requests')
usdAaaOutgoingTunnelGrantResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingTunnelGrantResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingTunnelGrantResponses.setDescription('The number of AAA outgoing tunnel grant responses')
usdAaaOutgoingGrantResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingGrantResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingGrantResponses.setDescription('The number of AAA outgoing grant responses')
usdAaaOutgoingDenyResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingDenyResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingDenyResponses.setDescription('The number of AAA outgoing deny responses')
usdAaaOutgoingErrorResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingErrorResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingErrorResponses.setDescription('The number of AAA outgoing error responses')
usdAaaOutgoingAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingAuthRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingAuthRequests.setDescription('The number of AAA outgoing authentication requests')
usdAaaIncomingAuthResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingAuthResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingAuthResponses.setDescription('The number of AAA incoming authentication responses')
usdAaaOutgoingReAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingReAuthRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingReAuthRequests.setDescription('The number of AAA outgoing re-authentication requests')
usdAaaIncomingReAuthResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingReAuthResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingReAuthResponses.setDescription('The number of AAA incoming re-authentication responses')
usdAaaOutgoingAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingAcctRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingAcctRequests.setDescription('The number of AAA outgoing accounting requests')
usdAaaIncomingAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingAcctResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingAcctResponses.setDescription('The number of AAA incoming accounting responses')
usdAaaOutgoingDupAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingDupAcctRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingDupAcctRequests.setDescription('The number of AAA outgoing duplicate accounting requests')
usdAaaIncomingDupAcctResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingDupAcctResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingDupAcctResponses.setDescription('The number of AAA incoing duplication accounting responses')
usdAaaOutgoingAddrRequests = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaOutgoingAddrRequests.setStatus('current')
if mibBuilder.loadTexts: usdAaaOutgoingAddrRequests.setDescription('The number of AAA outgoing address requests')
usdAaaIncomingAddrResponses = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaIncomingAddrResponses.setStatus('current')
if mibBuilder.loadTexts: usdAaaIncomingAddrResponses.setDescription('The number of AAA incoming address responses')
usdAaaSubscriberMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberMaxCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberMaxCount.setDescription('The configuration setting for the maximum number of subscribers. There is a grace number of subscribers above this limit, which when reached will cause authentication requests to be denied.')
usdAaaSubscriberPeakCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberPeakCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberPeakCount.setDescription('The peak number of subscribers. The peak count includes successfully authenticated subscribers as well as those subscribers in the process of being authenticated.')
usdAaaSubscriberCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberCount.setDescription('The current number of subscribers. The subscriber count includes successfully authenticated subscribers as well as those subscribers in the process of being authenticated.')
usdAaaSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4), )
if mibBuilder.loadTexts: usdAaaSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberTable.setDescription('The entries in this table represent subscribers by subscriber handle value.')
usdAaaSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1), ).setIndexNames((0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberHandle"))
if mibBuilder.loadTexts: usdAaaSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberEntry.setDescription('A specification of subscribers by subscriber handle.')
usdAaaSubscriberHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdAaaSubscriberHandle.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberHandle.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotomically increasing integer.')
usdAaaSubscriberUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberUserName.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberUserName.setDescription('The RADIUS userName associated with this subscriber.')
usdAaaSubscriberRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 3), UsdName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberRouterName.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterName.setDescription('The virtual router assigned to this subscriber.')
usdAaaSubscriberRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterIndex.setDescription('The router index that identifies the virtual router associated with this subscriber. The value of this object can be used to index the router in the usdRouterTable.')
usdAaaSubscriberLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberLoginTime.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLoginTime.setDescription('The time this subscriber logged in to RADIUS server.')
usdAaaSubscriberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberIpAddress.setDescription('The client IP Address assigned to this subscriber.')
usdAaaSubscriberIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberIpAddressMask.setDescription('The client IP Address Mask assigned to this subscriber.')
usdAaaSubscriberAddrAssignType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 8), UsdAddressAssignType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberAddrAssignType.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberAddrAssignType.setDescription('The address assignment type for this subscriber.')
usdAaaSubscriberInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberInterfaceId.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberInterfaceId.setDescription("A text string describing the local interface associated with this subscriber. Types/formats/examples for this string include: ATM Virtual Circuit atm <slot>/<port>:<vpi>.<vci> 'atm 3/0:0.100' Ethernet { fastEthernet | gigabitEthernet } <slot>/<port> 'fastEthernet 3/0' 'gigabitEthernet 3/0' Ethernet VLAN { fastEthernet | gigabitEthernet } <slot>/<port>:<vlanID> 'fastEthernet 3/0:1000' 'gigabitEthernet 3/0:1000' Channelized Serial serial <slot>/<port>:<channelSpecifier>[/<channelSpecifier>]* 'serial 3/0:4' (T1/E1) 'serial 3/0:2/4' (T3/E3) 'serial 3/0:2/1/1/4' (OC3/OC12 - channelized DS3) 'serial 3/0:2/1/1/1/4' (OC3/OC12 - virtual tributaries) L2TP/L2F over IP ip:<localIpAddr>:<peerIpAddr>:<localTunnelID>:<peerTunnelID>: <localSessionID>:<peerSessionID>:<callSerialNumber> 'ip:10.10.0.1:20.20.0.2:1234:5678:9abc:def0:6789abcd' (Note: tunnelIDs, sessionIDs, and callSerialNumber are in hexadecimal.) Other formats may be supported over time.")
usdAaaSubscriberState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 10), UsdSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberState.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberState.setDescription('The state of this subscriber.')
usdAaaSubscriberClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 11), UsdSubscriberClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberClientType.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberClientType.setDescription("The client type for this subscriber. Certain client types (e.g., 'other') might be suppressed from representation in this table.")
usdAaaSubscriberIngressPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberIngressPolicyName.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberIngressPolicyName.setDescription('The Ingress Policy Name associated with this subscriber.')
usdAaaSubscriberEgressPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberEgressPolicyName.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberEgressPolicyName.setDescription('The Egress Policy Name associated with this subscriber.')
usdAaaSubscriberQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberQosProfileName.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberQosProfileName.setDescription('The QoS Profile Name associated with this subscriber.')
usdAaaSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 4, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdAaaSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRowStatus.setDescription("Controls the deletion of the subscriber from this table. Deletion of the subscriber is analogous to logging the subscriber out of the network. Note: only 'destroy' is supported for SNMP SET operations.")
usdAaaSubscriberRouterSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5), )
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryTable.setDescription('The entries in this table report number of subscribers per router.')
usdAaaSubscriberRouterSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5, 1), ).setIndexNames((0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterSummaryRouterIndex"))
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryEntry.setDescription('A specification of subscribers for a router.')
usdAaaSubscriberRouterSummaryRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryRouterIndex.setReference('Unisphere-Data-ROUTER-MIB')
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryRouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router mib.')
usdAaaSubscriberRouterSummaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterSummaryCount.setDescription('The number of subscribers on this router.')
usdAaaSubscriberRouterTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6), )
if mibBuilder.loadTexts: usdAaaSubscriberRouterTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterTable.setDescription('The entries in this table sort subscribers by router ID.')
usdAaaSubscriberRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1), ).setIndexNames((0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterRouterIndex"), (0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterHandle"))
if mibBuilder.loadTexts: usdAaaSubscriberRouterEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterEntry.setDescription('A specification of subscribers by router ID.')
usdAaaSubscriberRouterRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdAaaSubscriberRouterRouterIndex.setReference('Unisphere-Data-ROUTER-MIB')
if mibBuilder.loadTexts: usdAaaSubscriberRouterRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterRouterIndex.setDescription('The router index of the virtual router. The value of this object can be used to retrieve additional information in the router MIB.')
usdAaaSubscriberRouterHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: usdAaaSubscriberRouterHandle.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterHandle.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing integer.')
usdAaaSubscriberRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 6, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberRouterRowStatus.setDescription("Always has value 'active'.")
usdAaaSubscriberLocationType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 7), UsdSubscriberLocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberLocationType.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationType.setDescription("Describes the interpretation of UsdSubscriberLocationValue object values into platform-dependent interface location components, e.g., 'slot.port'.")
usdAaaSubscriberLocationSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8), )
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryTable.setDescription('The entries in this table report number of subscribers per interface location.')
usdAaaSubscriberLocationSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8, 1), ).setIndexNames((0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationSummaryLocationIndex"))
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryEntry.setDescription('A specification of subscribers on an interface location.')
usdAaaSubscriberLocationSummaryLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8, 1, 1), UsdSubscriberLocationValue())
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryLocationIndex.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryLocationIndex.setDescription('The value of a platform interface location.')
usdAaaSubscriberLocationSummaryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationSummaryCount.setDescription('The number of subscribers associated with this interface location.')
usdAaaSubscriberLocationTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9), )
if mibBuilder.loadTexts: usdAaaSubscriberLocationTable.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationTable.setDescription('The entries in this table sort subscribers by interface location.')
usdAaaSubscriberLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1), ).setIndexNames((0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationLocationIndex"), (0, "Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationHandle"))
if mibBuilder.loadTexts: usdAaaSubscriberLocationEntry.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationEntry.setDescription('An association of a subscriber to an interface location.')
usdAaaSubscriberLocationLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1, 1), UsdSubscriberLocationValue())
if mibBuilder.loadTexts: usdAaaSubscriberLocationLocationIndex.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationLocationIndex.setDescription('The value of a platform interface location.')
usdAaaSubscriberLocationHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: usdAaaSubscriberLocationHandle.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationHandle.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing integer.')
usdAaaSubscriberLocationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 9, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberLocationRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberLocationRowStatus.setDescription("Always has value 'active'.")
usdAaaSubscriberPseudoPeakCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberPseudoPeakCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberPseudoPeakCount.setDescription('The peak number of pseudo-subscribers. The peak count includes successfully authenticated pseudo-subscribers as well as those pseudo-subscribers in the process of being authenticated. Pseudo-subscribers are those whose identities are locally configured on a dynamic link (e.g. an ATM subinterface) via the (imprecisely named) Unisphere-Data-SUBSCRIBER-MIB. Some links (e.g. IPoA) provide no link protocol with which to query the identity of a remote user. In such a case, a locally configured pseudo-subscriber can be used to conduct AAA authentication-based configuration of the dynamic link when it becomes active. Pseudo-subscribers are understood to be intended more for dynamic configuration than for actually identifying the remote user. Consequently, the pseudo-subscribers are not reflected in any of the subscriber tables defined in this MIB.')
usdAaaSubscriberPseudoCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaSubscriberPseudoCount.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberPseudoCount.setDescription('The current number of pseudo-subscribers. The pseudo-subscriber count includes successfully authenticated subscribers as well as those subscribers in the process of being authenticated. Pseudo-subscribers are those whose identities are locally configured on a dynamic link (e.g. an ATM subinterface) via the (imprecisely named) Unisphere-Data-SUBSCRIBER-MIB. Some links (e.g. IPoA) provide no link protocol with which to query the identity of a remote user. In such a case, a locally configured pseudo-subscriber can be used to conduct AAA authentication-based configuration of the dynamic link when it becomes active. Pseudo-subscribers are understood to be intended more for dynamic configuration than for actually identifying the remote user. Consequently, the pseudo-subscribers are not reflected in any of the subscriber tables defined in this MIB.')
usdAaaAccountingCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaAccountingCapability.setStatus('current')
if mibBuilder.loadTexts: usdAaaAccountingCapability.setDescription('Indicates whether this system supports AAA Accounting. The value true(1) indicate that it does, false(2) indicates that it does not.')
usdAaaAddressAssignmentCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaAddressAssignmentCapability.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddressAssignmentCapability.setDescription('Indicates whether this system supports AAA address assignment. The value true(1) indicates that it does, false(2) indicates that it does not.')
usdAaaBrasCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaBrasCapability.setStatus('current')
if mibBuilder.loadTexts: usdAaaBrasCapability.setDescription('Indicates whether this system supports AAA BRAS functionality. The value true(1) indicates that it does, false(2) indicates that it does not.')
usdAaaTunnelingCapability = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 1, 9, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAaaTunnelingCapability.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelingCapability.setDescription('Indicates whether this system supports AAA tunneling. The value true(1) indicates that it does, false(2) indicates that it does not.')
usdAaaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4))
usdAaaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1))
usdAaaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2))
usdAaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 1)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance = usdAaaCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added.')
usdAaaCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 2)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance2 = usdAaaCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance2.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new objects were added and new groupings were defined.')
usdAaaCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 3)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaBasicGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAuthenticationGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAccountingGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance3 = usdAaaCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance3.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when the usdAaaAssignDomainStripDomain object was added to the B-RAS group.')
usdAaaCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 4)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaBasicGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasGroup2"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAuthenticationGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAccountingGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance4 = usdAaaCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance4.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when new assignment delimiter objects were added to the B-RAS group.')
usdAaaCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 5)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaBasicGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasGroup3"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAuthenticationGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAccountingGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance5 = usdAaaCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance5.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when the subscriber and capabilities groups were added.')
usdAaaCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 6)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaBasicGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaCapabilitiesGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasGroup3"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAuthenticationGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAccountingGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance6 = usdAaaCompliance6.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance6.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when support was added for subscriber information by interface location.')
usdAaaCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 7)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaBasicGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaCapabilitiesGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasGroup3"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberGroup2"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAuthenticationGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAccountingGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance7 = usdAaaCompliance7.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaCompliance7.setDescription('Obsolete compliance statement for systems supporting AAA. This statement became obsolete when several new objects were added.')
usdAaaCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 1, 8)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaBasicGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaCapabilitiesGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasGroup4"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberGroup3"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAuthenticationGroup"), ("Unisphere-Data-AAA-MIB", "usdAaaAccountingGroup2"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCompliance8 = usdAaaCompliance8.setStatus('current')
if mibBuilder.loadTexts: usdAaaCompliance8.setDescription('The compliance statement for systems supporting AAA.')
usdAaaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 1)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicense"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicensedUsers"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainLoopback"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctInterval"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctDupServerRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrPoolDefault"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrDnsPrimary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrDnsSecondary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrWinsPrimary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrWinsSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaGroup = usdAaaGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaGroup.setDescription('Obsolete collection of objects providing management of AAA functionality in a Unisphere product. This group became obsolete when new objects were added.')
usdAaaGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 2)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicense"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicensedUsers"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainLoopback"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainIpHint"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmServiceLevel"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmPcr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmScr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmMbs"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverrideUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverridePassword"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctInterval"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctDupServerRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrPoolDefault"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrDnsPrimary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrDnsSecondary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrWinsPrimary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrWinsSecondary"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingInitiateRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingTerminateRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingTunnelGrantResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingGrantResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingDenyResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingErrorResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAuthRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAuthResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingReAuthRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingReAuthResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAcctRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAcctResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingDupAcctRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingDupAcctResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAddrRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAddrResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelTag"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelPreference"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelType"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelMedium"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelAddress"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelPassword"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelId"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelHostName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaGroup2 = usdAaaGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaGroup2.setDescription('Obsolete collection of objects providing management of AAA functionality in a Unisphere product. This group became obsolete when new objects were added and new groupings were defined.')
usdAaaBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 3)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaIncomingInitiateRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingTerminateRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingGrantResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingDenyResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingErrorResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaBasicGroup = usdAaaBasicGroup.setStatus('current')
if mibBuilder.loadTexts: usdAaaBasicGroup.setDescription('The basic collection of objects providing management of AAA functionality in a Unisphere product.')
usdAaaBrasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 4)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicense"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicensedUsers"), ("Unisphere-Data-AAA-MIB", "usdAaaIdleTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaSessionTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainLoopback"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainIpHint"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmServiceLevel"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmPcr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmScr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmMbs"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverrideUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverridePassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaBrasGroup = usdAaaBrasGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaBrasGroup.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Unisphere product. This group became obsolete when the usdAaaAssignDomainStripDomain object was added.')
usdAaaTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 5)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelTag"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelPreference"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelType"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelMedium"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelAddress"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelPassword"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelId"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelHostName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelServerName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelClientAddress"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainTunnelRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingTunnelGrantResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaTunnelGroup = usdAaaTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: usdAaaTunnelGroup.setDescription('The collection of objects providing management of AAA tunneling functionality in a Unisphere product.')
usdAaaAuthenticationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 6)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAuthMethods"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAuthRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAuthResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingReAuthRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingReAuthResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaAuthenticationGroup = usdAaaAuthenticationGroup.setStatus('current')
if mibBuilder.loadTexts: usdAaaAuthenticationGroup.setDescription('The collection of objects providing management of AAA authentication functionality in a Unisphere product.')
usdAaaAccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 7)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAcctInterval"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctDupServerRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctMethods"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAcctRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAcctResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingDupAcctRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingDupAcctResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaAccountingGroup = usdAaaAccountingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaAccountingGroup.setDescription('Obsolete collection of objects providing management of AAA accounting functionality in a Unisphere product. This group became obsolete when the usdAaaAcctSendStopOnAaaDeny object was added.')
usdAaaAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 8)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAddrPoolDefault"), ("Unisphere-Data-AAA-MIB", "usdAaaDupAddrCheck"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrDnsPrimary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrDnsSecondary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrWinsPrimary"), ("Unisphere-Data-AAA-MIB", "usdAaaAddrWinsSecondary"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAddrRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAddrResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaAddressGroup = usdAaaAddressGroup.setStatus('current')
if mibBuilder.loadTexts: usdAaaAddressGroup.setDescription('The collection of objects providing management of AAA address assignment functionality in a Unisphere product.')
usdAaaBrasGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 9)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicense"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicensedUsers"), ("Unisphere-Data-AAA-MIB", "usdAaaIdleTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaSessionTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainLoopback"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainIpHint"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmServiceLevel"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmPcr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmScr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmMbs"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverrideUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverridePassword"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaBrasGroup2 = usdAaaBrasGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaBrasGroup2.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Unisphere product. This group became obsolete when new assignment delimiter objects were added.')
usdAaaBrasGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 10)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicense"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicensedUsers"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainDelimiters"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignRealmDelimiters"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainParseOrder"), ("Unisphere-Data-AAA-MIB", "usdAaaIdleTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaSessionTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelClientName"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelPassword"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelNasPortMethod"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainLoopback"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainIpHint"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmServiceLevel"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmPcr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmScr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmMbs"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverrideUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverridePassword"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaBrasGroup3 = usdAaaBrasGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaBrasGroup3.setDescription('Obsolete collection of objects providing management of AAA B-RAS functionality in a Unisphere product. This group became obsolete when new objects were added.')
usdAaaSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 11)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaSubscriberMaxCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberPeakCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterIndex"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLoginTime"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIpAddress"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIpAddressMask"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberAddrAssignType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberInterfaceId"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberState"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberClientType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIngressPolicyName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberEgressPolicyName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberQosProfileName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterSummaryCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaSubscriberGroup = usdAaaSubscriberGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaSubscriberGroup.setDescription('Obsolete collection of objects providing management of AAA B-RAS Subscriber functionality in a Unisphere product. This group became obsolete when support was added for monitoring subscriber information by interface location.')
usdAaaCapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 12)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAccountingCapability"), ("Unisphere-Data-AAA-MIB", "usdAaaAddressAssignmentCapability"), ("Unisphere-Data-AAA-MIB", "usdAaaBrasCapability"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelingCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaCapabilitiesGroup = usdAaaCapabilitiesGroup.setStatus('current')
if mibBuilder.loadTexts: usdAaaCapabilitiesGroup.setDescription('The collection of objects providing management of AAA Capabilities functionality in a Unisphere product.')
usdAaaSubscriberGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 13)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaSubscriberMaxCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberPeakCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterIndex"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLoginTime"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIpAddress"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIpAddressMask"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberAddrAssignType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberInterfaceId"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberState"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberClientType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIngressPolicyName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberEgressPolicyName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberQosProfileName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterSummaryCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationSummaryCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaSubscriberGroup2 = usdAaaSubscriberGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAaaSubscriberGroup2.setDescription('Obsolete collection of objects providing management of AAA B-RAS Subscriber functionality in a Unisphere product. This group became obsolete when the pseudo-subscriber meters were added.')
usdAaaAccountingGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 14)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAcctInterval"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctDupServerRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctMethods"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctSendStopOnAaaDeny"), ("Unisphere-Data-AAA-MIB", "usdAaaAcctSendStopOnAaaReject"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingAcctRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingAcctResponses"), ("Unisphere-Data-AAA-MIB", "usdAaaOutgoingDupAcctRequests"), ("Unisphere-Data-AAA-MIB", "usdAaaIncomingDupAcctResponses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaAccountingGroup2 = usdAaaAccountingGroup2.setStatus('current')
if mibBuilder.loadTexts: usdAaaAccountingGroup2.setDescription('The collection of objects providing management of AAA accounting functionality in a Unisphere product.')
usdAaaBrasGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 15)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicense"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignBrasLicensedUsers"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainDelimiters"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignRealmDelimiters"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainParseOrder"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignSubscriberLimit"), ("Unisphere-Data-AAA-MIB", "usdAaaIdleTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaSessionTimeout"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelClientName"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelPassword"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelNasPortMethod"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelIgnoreNasPort"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelIgnoreNasPortType"), ("Unisphere-Data-AAA-MIB", "usdAaaTunnelAssignmentIdFormat"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainLoopback"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainIpHint"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmServiceLevel"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmPcr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmScr"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainAtmMbs"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverrideUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainOverridePassword"), ("Unisphere-Data-AAA-MIB", "usdAaaAssignDomainStripDomain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaBrasGroup4 = usdAaaBrasGroup4.setStatus('current')
if mibBuilder.loadTexts: usdAaaBrasGroup4.setDescription('The collection of objects providing management of AAA B-RAS functionality in a Unisphere product.')
usdAaaSubscriberGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 20, 4, 2, 16)).setObjects(("Unisphere-Data-AAA-MIB", "usdAaaSubscriberMaxCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberPeakCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberUserName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterIndex"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLoginTime"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIpAddress"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIpAddressMask"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberAddrAssignType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberInterfaceId"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberState"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberClientType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberIngressPolicyName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberEgressPolicyName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberQosProfileName"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterSummaryCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberRouterRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationType"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationSummaryCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberLocationRowStatus"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberPseudoPeakCount"), ("Unisphere-Data-AAA-MIB", "usdAaaSubscriberPseudoCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAaaSubscriberGroup3 = usdAaaSubscriberGroup3.setStatus('current')
if mibBuilder.loadTexts: usdAaaSubscriberGroup3.setDescription('The collection of objects providing management of AAA B-RAS Subscriber functionality in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-AAA-MIB", usdAaaTimeoutGeneral=usdAaaTimeoutGeneral, usdAaaAddrWinsPrimary=usdAaaAddrWinsPrimary, usdAaaAccountingGroup=usdAaaAccountingGroup, usdAaaSubscriberRouterIndex=usdAaaSubscriberRouterIndex, usdAaaOutgoingAuthRequests=usdAaaOutgoingAuthRequests, usdAaaAssignDomainAtmPcr=usdAaaAssignDomainAtmPcr, usdAaaSubscriberLocationSummaryLocationIndex=usdAaaSubscriberLocationSummaryLocationIndex, usdAaaCompliance4=usdAaaCompliance4, UsdAaaAccountingMethods=UsdAaaAccountingMethods, usdAaaAuthentication=usdAaaAuthentication, usdAaaSubscriberLoginTime=usdAaaSubscriberLoginTime, usdAaaAssignRealmDelimiters=usdAaaAssignRealmDelimiters, usdAaaSubscriberRouterSummaryEntry=usdAaaSubscriberRouterSummaryEntry, usdAaaOutgoingTunnelGrantResponses=usdAaaOutgoingTunnelGrantResponses, usdAaaAssignDomainRowStatus=usdAaaAssignDomainRowStatus, usdAaaCompliance7=usdAaaCompliance7, usdAaaMIBConformance=usdAaaMIBConformance, usdAaaSubscriberMaxCount=usdAaaSubscriberMaxCount, usdAaaSubscriberTable=usdAaaSubscriberTable, usdAaaTunnelingCapability=usdAaaTunnelingCapability, usdAaaSubscriberEntry=usdAaaSubscriberEntry, usdAaaSubscriberLocationEntry=usdAaaSubscriberLocationEntry, usdAaaOutgoingGrantResponses=usdAaaOutgoingGrantResponses, usdAaaTunnelIgnoreNasPortType=usdAaaTunnelIgnoreNasPortType, usdAaaCapabilities=usdAaaCapabilities, usdAaaIdleTimeout=usdAaaIdleTimeout, usdAaaTunnel=usdAaaTunnel, usdAaaSubscriberState=usdAaaSubscriberState, usdAaaSubscriberLocationLocationIndex=usdAaaSubscriberLocationLocationIndex, usdAaaMIB=usdAaaMIB, usdAaaSubscriberLocationSummaryCount=usdAaaSubscriberLocationSummaryCount, usdAaaMIBGroups=usdAaaMIBGroups, usdAaaAddrDnsSecondary=usdAaaAddrDnsSecondary, usdAaaSubscriberRowStatus=usdAaaSubscriberRowStatus, usdAaaIncomingReAuthResponses=usdAaaIncomingReAuthResponses, usdAaaSubscriberIpAddressMask=usdAaaSubscriberIpAddressMask, usdAaaSubscriberRouterEntry=usdAaaSubscriberRouterEntry, UsdAaaDomainName=UsdAaaDomainName, usdAaaOutgoingReAuthRequests=usdAaaOutgoingReAuthRequests, usdAaaAssignDomainTunnelTable=usdAaaAssignDomainTunnelTable, usdAaaAuthGeneral=usdAaaAuthGeneral, usdAaaSubscriberGroup=usdAaaSubscriberGroup, UsdAaaAuthenticationMethods=UsdAaaAuthenticationMethods, usdAaaOutgoingErrorResponses=usdAaaOutgoingErrorResponses, usdAaaTunnelGeneral=usdAaaTunnelGeneral, usdAaaAssignDomainTunnelServerName=usdAaaAssignDomainTunnelServerName, usdAaaAuthenticationGroup=usdAaaAuthenticationGroup, usdAaaAddrWinsSecondary=usdAaaAddrWinsSecondary, usdAaaSubscriberLocationHandle=usdAaaSubscriberLocationHandle, usdAaaAssignGeneral=usdAaaAssignGeneral, usdAaaAccounting=usdAaaAccounting, usdAaaSubscriberRouterRouterIndex=usdAaaSubscriberRouterRouterIndex, usdAaaTunnelGroup=usdAaaTunnelGroup, usdAaaAssignDomainTunnelName=usdAaaAssignDomainTunnelName, usdAaaIncomingAuthResponses=usdAaaIncomingAuthResponses, usdAaaTunnelNasPortMethod=usdAaaTunnelNasPortMethod, usdAaaAssignSubscriberLimit=usdAaaAssignSubscriberLimit, usdAaaSubscriberLocationSummaryTable=usdAaaSubscriberLocationSummaryTable, usdAaaBrasGroup=usdAaaBrasGroup, usdAaaAssignDomainOverridePassword=usdAaaAssignDomainOverridePassword, usdAaaOutgoingAcctRequests=usdAaaOutgoingAcctRequests, usdAaaAddrWins=usdAaaAddrWins, usdAaaSubscriberLocationType=usdAaaSubscriberLocationType, usdAaaCompliance8=usdAaaCompliance8, usdAaaOutgoingDenyResponses=usdAaaOutgoingDenyResponses, usdAaaAcctSendStopOnAaaDeny=usdAaaAcctSendStopOnAaaDeny, usdAaaAddressGroup=usdAaaAddressGroup, UsdSubscriberClientType=UsdSubscriberClientType, UsdAddressAssignType=UsdAddressAssignType, usdAaaSubscribers=usdAaaSubscribers, usdAaaAssignDomainTunnelEntry=usdAaaAssignDomainTunnelEntry, usdAaaAcctDupServerRouterName=usdAaaAcctDupServerRouterName, usdAaaAssignBrasLicensedUsers=usdAaaAssignBrasLicensedUsers, usdAaaOutgoingDupAcctRequests=usdAaaOutgoingDupAcctRequests, usdAaaSubscriberGroup2=usdAaaSubscriberGroup2, usdAaaSubscriberLocationSummaryEntry=usdAaaSubscriberLocationSummaryEntry, usdAaaStatistics=usdAaaStatistics, usdAaaTunnelAssignmentIdFormat=usdAaaTunnelAssignmentIdFormat, usdAaaAssignDomainTable=usdAaaAssignDomainTable, usdAaaBrasGroup4=usdAaaBrasGroup4, usdAaaIncomingDupAcctResponses=usdAaaIncomingDupAcctResponses, usdAaaCapabilitiesGroup=usdAaaCapabilitiesGroup, usdAaaSubscriberRouterSummaryTable=usdAaaSubscriberRouterSummaryTable, usdAaaAssignDomainTunnelAddress=usdAaaAssignDomainTunnelAddress, usdAaaGroup2=usdAaaGroup2, usdAaaAddrPoolDefault=usdAaaAddrPoolDefault, usdAaaCompliance=usdAaaCompliance, usdAaaIncomingAddrResponses=usdAaaIncomingAddrResponses, usdAaaSubscriberLocationTable=usdAaaSubscriberLocationTable, PYSNMP_MODULE_ID=usdAaaMIB, usdAaaBrasGroup2=usdAaaBrasGroup2, usdAaaIncomingTerminateRequests=usdAaaIncomingTerminateRequests, usdAaaDupAddrCheck=usdAaaDupAddrCheck, usdAaaAssignDomainTunnelId=usdAaaAssignDomainTunnelId, usdAaaAcctGeneral=usdAaaAcctGeneral, usdAaaSubscriberHandle=usdAaaSubscriberHandle, usdAaaTunnelClientName=usdAaaTunnelClientName, usdAaaAssignDomainTunnelType=usdAaaAssignDomainTunnelType, usdAaaAssignBrasLicense=usdAaaAssignBrasLicense, usdAaaAssignDomainStripDomain=usdAaaAssignDomainStripDomain, usdAaaSubscriberIpAddress=usdAaaSubscriberIpAddress, usdAaaAssignDomainLoopback=usdAaaAssignDomainLoopback, usdAaaAcctSendStopOnAaaReject=usdAaaAcctSendStopOnAaaReject, usdAaaOutgoingAddrRequests=usdAaaOutgoingAddrRequests, usdAaaObjects=usdAaaObjects, usdAaaAssignDomainAtmMbs=usdAaaAssignDomainAtmMbs, usdAaaAssignDomainTunnelPassword=usdAaaAssignDomainTunnelPassword, usdAaaSubscriberIngressPolicyName=usdAaaSubscriberIngressPolicyName, usdAaaSubscriberRouterSummaryRouterIndex=usdAaaSubscriberRouterSummaryRouterIndex, UsdSubscriberLocationValue=UsdSubscriberLocationValue, usdAaaAssignDomain=usdAaaAssignDomain, usdAaaTimeout=usdAaaTimeout, usdAaaAssignDomainRouterName=usdAaaAssignDomainRouterName, usdAaaAccountingGroup2=usdAaaAccountingGroup2, UsdSubscriberLocationType=UsdSubscriberLocationType, usdAaaAssignDomainTunnelMedium=usdAaaAssignDomainTunnelMedium, usdAaaSubscriberRouterRowStatus=usdAaaSubscriberRouterRowStatus, usdAaaAddrNameServer=usdAaaAddrNameServer, usdAaaAcctInterval=usdAaaAcctInterval, usdAaaAssignDomainTunnelHostName=usdAaaAssignDomainTunnelHostName, usdAaaAddrDns=usdAaaAddrDns, usdAaaAddrDnsPrimary=usdAaaAddrDnsPrimary, usdAaaBasicGroup=usdAaaBasicGroup, usdAaaAddressAssignmentCapability=usdAaaAddressAssignmentCapability, usdAaaCompliance2=usdAaaCompliance2, UsdSubscriberState=UsdSubscriberState, usdAaaAssignDomainDelimiters=usdAaaAssignDomainDelimiters, usdAaaSubscriberPseudoCount=usdAaaSubscriberPseudoCount, usdAaaAssignDomainName=usdAaaAssignDomainName, usdAaaAssignDomainTunnelClientAddress=usdAaaAssignDomainTunnelClientAddress, usdAaaAssignDomainEntry=usdAaaAssignDomainEntry, usdAaaAccountingCapability=usdAaaAccountingCapability, usdAaaAssignDomainTunnelTag=usdAaaAssignDomainTunnelTag, usdAaaIncomingInitiateRequests=usdAaaIncomingInitiateRequests, usdAaaSubscriberClientType=usdAaaSubscriberClientType, usdAaaGroup=usdAaaGroup, usdAaaAssignDomainTunnelPreference=usdAaaAssignDomainTunnelPreference, usdAaaSubscriberLocationRowStatus=usdAaaSubscriberLocationRowStatus, usdAaaSubscriberPseudoPeakCount=usdAaaSubscriberPseudoPeakCount, usdAaaSubscriberGroup3=usdAaaSubscriberGroup3, usdAaaAddrGeneral=usdAaaAddrGeneral, usdAaaAssignment=usdAaaAssignment, usdAaaAssignDomainAtmServiceLevel=usdAaaAssignDomainAtmServiceLevel, usdAaaCompliance6=usdAaaCompliance6, usdAaaAssignDomainParseOrder=usdAaaAssignDomainParseOrder, usdAaaSubscriberEgressPolicyName=usdAaaSubscriberEgressPolicyName, usdAaaAssignDomainIpHint=usdAaaAssignDomainIpHint, usdAaaSubscriberQosProfileName=usdAaaSubscriberQosProfileName, usdAaaSubscriberPeakCount=usdAaaSubscriberPeakCount, usdAaaSubscriberRouterName=usdAaaSubscriberRouterName, usdAaaIncomingAcctResponses=usdAaaIncomingAcctResponses, usdAaaTunnelPassword=usdAaaTunnelPassword, usdAaaSubscriberInterfaceId=usdAaaSubscriberInterfaceId, usdAaaSubscriberUserName=usdAaaSubscriberUserName, usdAaaCompliance5=usdAaaCompliance5, usdAaaSubscriberAddrAssignType=usdAaaSubscriberAddrAssignType, usdAaaAuthMethods=usdAaaAuthMethods, usdAaaBrasGroup3=usdAaaBrasGroup3, usdAaaMIBCompliances=usdAaaMIBCompliances, usdAaaSubscriberRouterTable=usdAaaSubscriberRouterTable, usdAaaAssignDomainOverrideUserName=usdAaaAssignDomainOverrideUserName, usdAaaCompliance3=usdAaaCompliance3, usdAaaAssignDomainAtmScr=usdAaaAssignDomainAtmScr, usdAaaSessionTimeout=usdAaaSessionTimeout, usdAaaTunnelIgnoreNasPort=usdAaaTunnelIgnoreNasPort, usdAaaAddress=usdAaaAddress, usdAaaAcctMethods=usdAaaAcctMethods, usdAaaSubscriberRouterHandle=usdAaaSubscriberRouterHandle, usdAaaSubscriberCount=usdAaaSubscriberCount, usdAaaAssignDomainTunnelRowStatus=usdAaaAssignDomainTunnelRowStatus, usdAaaSubscriberRouterSummaryCount=usdAaaSubscriberRouterSummaryCount, usdAaaBrasCapability=usdAaaBrasCapability)
