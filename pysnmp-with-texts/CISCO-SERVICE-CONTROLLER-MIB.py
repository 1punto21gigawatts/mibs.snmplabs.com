#
# PySNMP MIB module CISCO-SERVICE-CONTROLLER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SERVICE-CONTROLLER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Integer32, MibIdentifier, Counter64, NotificationType, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Unsigned32, Bits, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibIdentifier", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Unsigned32", "Bits", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoServiceControllerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 667))
ciscoServiceControllerMIB.setRevisions(('2011-03-03 00:00', '2008-08-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoServiceControllerMIB.setRevisionsDescriptions(('Added the following MIB tables: cscAggregativeGlobalControllersTable cscAggregativeGlobalControllersLinkTable Deprecated following MIB compliance: ciscoServiceControlMIBCompliance Added the following new MIB compliance: ciscoServiceControlMIBComplianceRev1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoServiceControllerMIB.setLastUpdated('201103030000Z')
if mibBuilder.loadTexts: ciscoServiceControllerMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoServiceControllerMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-excelsior-dev@cisco.com')
if mibBuilder.loadTexts: ciscoServiceControllerMIB.setDescription('This MIB module defines objects describing traffic controllers used by a service control entity. A service control entity is a network device which monitors and controls traffic. The service control enitity is used as a platform for different service control applications which may perform monitoring operations beyond packet counting and delve deeper into the contents of network traffic, such as deep packet inspection. It provides programmable stateful inspection of bidirectional traffic flows, maps these flows to users or subscribers, and can control traffic flow according to different attributes. A service control entity traffic controller can act as a rather simple policer or implement more complicated logic in controlling traffic, up to actual applicative attributes of the traffic itself. The global service controller is a controller component implemented by the service control entity, which acts as a rather simple policer for traffic transiting through the service control entity. A global service controller may be configured per service control entity interface with a configurable bandwidth limitation. The controller is responsible for the enforcement of the bandwith limitation configured in the service control entity. Aggregative global controller is a mechanism that allows dynamic bandwidth allocation between two global controllers that reside on the same direction of two links. Regularly, a global controller is configured per physical port. When aggregative global controller is configured, the relevant per-port global controllers are configured dynamically and automatically by the aggregative global controller mechanism. Primary bandwidth controller controls the total of subscriber traffic and manage the number of bandwidth controller. Its main properties are committed information rate, peak information rate, and relative priority.')
ciscoServiceControlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 667, 0))
ciscoServiceControlMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 667, 1))
cscGlobalControllersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1), )
if mibBuilder.loadTexts: cscGlobalControllersTable.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersTable.setDescription('This table contains data for each global service controller in the service control entity. The table has an expansion dependent relationship on the entPhysicalTable, containing zero or more rows for each physical entity.')
cscGlobalControllersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SERVICE-CONTROLLER-MIB", "cscGlobalControllersIndex"))
if mibBuilder.loadTexts: cscGlobalControllersEntry.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersEntry.setDescription('This entry contains the operational data for the global service controller associated with the service control entity identified by its assigned entPhysicalIndex. Each entry uniquely identifies a global controller by its index. The')
cscGlobalControllersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cscGlobalControllersIndex.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersIndex.setDescription('This object indicates an arbitrary integer-value that uniquely identifies a global service controller.')
cscGlobalControllersId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cscGlobalControllersId.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersId.setDescription('This object indicates the unique id assigned to this global controller by the service control entity.')
cscGlobalControllersDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cscGlobalControllersDescription.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersDescription.setDescription('This object indicates a human readable string which is the name associated with this global service controller.')
cscGlobalControllersBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("mbps", 2))).clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cscGlobalControllersBandwidthUnits.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersBandwidthUnits.setDescription("An enumerated value which identifies the units for cscGlobalControllersBandwidth value, such as 'kbps' (kilobit per second), 'mbps' (megabit per second), etc.")
cscGlobalControllersBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cscGlobalControllersBandwidth.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersBandwidth.setDescription('This object indicates the bandwidth limitation for this global controller to enforce. The units of cscGlobalControllersBandwidth are indicated by the value of cscGlobalControllersBandwidthUnits.')
cscGlobalControllersUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cscGlobalControllersUtilization.setStatus('current')
if mibBuilder.loadTexts: cscGlobalControllersUtilization.setDescription('This object specifies the percentage of utilized bandwidth of the controller out of the configured bandwidth limitation by the cscGlobalControllersBandwidth. For example, if cscGlobalControllersBandwidth = 1000 kbps and cscGlobalControllersUtilization = 65%, then the current utilization of this controller is 650 kbps.')
cscAggregativeGlobalControllersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 2), )
if mibBuilder.loadTexts: cscAggregativeGlobalControllersTable.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersTable.setDescription('This table lists the aggregative global controller associated with the service controller entity.')
cscAggregativeGlobalControllersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 2, 1), ).setIndexNames((0, "CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersSide"), (0, "CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersAgcId"))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersEntry.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersEntry.setDescription('This entry contains the operational data for the aggregative global controller associated with the service control entity. Each entry uniquely identifies an aggregative global controller by its indices.')
cscAggregativeGlobalControllersSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscriber", 1), ("network", 2))))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersSide.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersSide.setDescription('This object indicates the direction of flow (subscriber side or network side).')
cscAggregativeGlobalControllersAgcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersAgcId.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersAgcId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies an aggregative global controller.')
cscAggregativeGlobalControllersLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 2, 1, 3), Gauge32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLimit.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLimit.setDescription('This object specifies the bandwidth limit of an aggregative global controller.')
cscAggregativeGlobalControllersRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 2, 1, 4), Gauge32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscAggregativeGlobalControllersRate.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersRate.setDescription('This object specifies the bandwidth rate of an aggregative global controller.')
cscAggregativeGlobalControllersLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3), )
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkTable.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkTable.setDescription('This table provides information regarding the aggregative global controller related configuration per link.')
cscAggregativeGlobalControllersLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1), ).setIndexNames((0, "CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersLinkIndex"), (0, "CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersLinkSide"), (0, "CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersLinkAgcId"))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkEntry.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkEntry.setDescription('This entry contains the operational data for the aggregative global controller associated with the service control entity identified by its assigned link number. Each entry uniquely identifies an aggregative global controller by its indices. The link on a service control engine joins subscriber side to network side.')
cscAggregativeGlobalControllersLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkIndex.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkIndex.setDescription('This object indicates an arbitrary integer-value that uniquely identifies a link.')
cscAggregativeGlobalControllersLinkSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscriber", 1), ("network", 2))))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkSide.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkSide.setDescription('This object indicates the direction of flow (subscriber side or network side).')
cscAggregativeGlobalControllersLinkAgcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkAgcId.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkAgcId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies an aggregative global controller.')
cscAggregativeGlobalControllersLinkEnforcedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 4), Gauge32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkEnforcedRate.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersLinkEnforcedRate.setDescription('This object specifies the enforced rate which is the rate that each bandwidth controller, primary bandwidth controller seek to attain, taking into account external constraints. The types of external constraint are global controller, physical port, primary bandwidth controller.')
cscAggregativeGlobalControllersCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 5), Gauge32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscAggregativeGlobalControllersCommittedInformationRate.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersCommittedInformationRate.setDescription('This object specifies the committed information rate which is the aggregate rate that the bandwidth controller is committed to supply to its controlled flows. In all cases, the system will do its utmost to ensure that committed rate is not harmed. This cannot be guaranteed in cases of oversubscription of committed rate in the system as a whole.')
cscAggregativeGlobalControllersPeakInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 6), Gauge32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscAggregativeGlobalControllersPeakInformationRate.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersPeakInformationRate.setDescription('This object specifies peak information rate which is the peak aggregate rate of the controlled flows. Aggregate rate means the total bandwidth of all controlled flows.')
cscAggregativeGlobalControllersAssuranceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 667, 0, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cscAggregativeGlobalControllersAssuranceLevel.setStatus('current')
if mibBuilder.loadTexts: cscAggregativeGlobalControllersAssuranceLevel.setDescription('This object specifies assurance level which is the bandwidth controller strength in the competition over bandwidth in case of congestion. Assured level controls how fast Enforced rate would decrease from peak information rate to committed information rate as congestion builds, or increase from committed information rate to peak information rate as congestion decreases. A higher assured level ensures a higher enforced rate compared to a similar bandwidth controller with a lower assured level.')
ciscoServiceControlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 667, 1, 1))
ciscoServiceControlMIBObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 667, 1, 2))
ciscoServiceControlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 667, 1, 1, 1)).setObjects(("CISCO-SERVICE-CONTROLLER-MIB", "ciscoServiceControlMIBGlobalControllersObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoServiceControlMIBCompliance = ciscoServiceControlMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoServiceControlMIBCompliance.setDescription('The compliance statement for SNMP entities that implement version 1 of the Cisco Service Controller MIB.')
ciscoServiceControlMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 667, 1, 1, 2)).setObjects(("CISCO-SERVICE-CONTROLLER-MIB", "ciscoServiceControlMIBGlobalControllersObjectGroup"), ("CISCO-SERVICE-CONTROLLER-MIB", "ciscoServiceControlAGCMIBObjectGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoServiceControlMIBComplianceRev1 = ciscoServiceControlMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoServiceControlMIBComplianceRev1.setDescription('This compliance statement specifies the minimal requirements an implementation must meet in order to claim full compliance with the definition of the CISCO-SERVICE-CONTROLLER-MIB.')
ciscoServiceControlMIBGlobalControllersObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 667, 1, 2, 1)).setObjects(("CISCO-SERVICE-CONTROLLER-MIB", "cscGlobalControllersDescription"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscGlobalControllersBandwidth"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscGlobalControllersUtilization"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscGlobalControllersBandwidthUnits"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscGlobalControllersId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoServiceControlMIBGlobalControllersObjectGroup = ciscoServiceControlMIBGlobalControllersObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoServiceControlMIBGlobalControllersObjectGroup.setDescription('This group is a collection of objects that describes the global controllers statistics for service control entity.')
ciscoServiceControlAGCMIBObjectGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 667, 1, 2, 2)).setObjects(("CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersLimit"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersRate"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersLinkEnforcedRate"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersPeakInformationRate"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersCommittedInformationRate"), ("CISCO-SERVICE-CONTROLLER-MIB", "cscAggregativeGlobalControllersAssuranceLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoServiceControlAGCMIBObjectGroups = ciscoServiceControlAGCMIBObjectGroups.setStatus('current')
if mibBuilder.loadTexts: ciscoServiceControlAGCMIBObjectGroups.setDescription('This group is a collection of objects that describes the aggregative global controller for service control entity.')
mibBuilder.exportSymbols("CISCO-SERVICE-CONTROLLER-MIB", cscAggregativeGlobalControllersEntry=cscAggregativeGlobalControllersEntry, cscGlobalControllersUtilization=cscGlobalControllersUtilization, cscAggregativeGlobalControllersLinkIndex=cscAggregativeGlobalControllersLinkIndex, cscAggregativeGlobalControllersLinkSide=cscAggregativeGlobalControllersLinkSide, cscGlobalControllersIndex=cscGlobalControllersIndex, cscAggregativeGlobalControllersLinkAgcId=cscAggregativeGlobalControllersLinkAgcId, cscAggregativeGlobalControllersLinkTable=cscAggregativeGlobalControllersLinkTable, cscAggregativeGlobalControllersSide=cscAggregativeGlobalControllersSide, cscAggregativeGlobalControllersAgcId=cscAggregativeGlobalControllersAgcId, ciscoServiceControlMIBComplianceRev1=ciscoServiceControlMIBComplianceRev1, ciscoServiceControlMIBGlobalControllersObjectGroup=ciscoServiceControlMIBGlobalControllersObjectGroup, cscGlobalControllersDescription=cscGlobalControllersDescription, cscAggregativeGlobalControllersRate=cscAggregativeGlobalControllersRate, cscAggregativeGlobalControllersLinkEntry=cscAggregativeGlobalControllersLinkEntry, cscGlobalControllersBandwidthUnits=cscGlobalControllersBandwidthUnits, cscGlobalControllersBandwidth=cscGlobalControllersBandwidth, cscAggregativeGlobalControllersLinkEnforcedRate=cscAggregativeGlobalControllersLinkEnforcedRate, PYSNMP_MODULE_ID=ciscoServiceControllerMIB, ciscoServiceControlAGCMIBObjectGroups=ciscoServiceControlAGCMIBObjectGroups, ciscoServiceControlMIBObjects=ciscoServiceControlMIBObjects, ciscoServiceControlMIBConform=ciscoServiceControlMIBConform, cscAggregativeGlobalControllersTable=cscAggregativeGlobalControllersTable, cscAggregativeGlobalControllersCommittedInformationRate=cscAggregativeGlobalControllersCommittedInformationRate, cscAggregativeGlobalControllersLimit=cscAggregativeGlobalControllersLimit, cscGlobalControllersEntry=cscGlobalControllersEntry, cscAggregativeGlobalControllersAssuranceLevel=cscAggregativeGlobalControllersAssuranceLevel, ciscoServiceControllerMIB=ciscoServiceControllerMIB, ciscoServiceControlMIBObjectGroups=ciscoServiceControlMIBObjectGroups, cscGlobalControllersId=cscGlobalControllersId, cscAggregativeGlobalControllersPeakInformationRate=cscAggregativeGlobalControllersPeakInformationRate, ciscoServiceControlMIBCompliance=ciscoServiceControlMIBCompliance, cscGlobalControllersTable=cscGlobalControllersTable, ciscoServiceControlMIBCompliances=ciscoServiceControlMIBCompliances)
