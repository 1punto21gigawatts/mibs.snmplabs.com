#
# PySNMP MIB module CADANT-CMTS-DHCPRA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-DHCPRA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cadIfUpChannelId, cadIfUpChannelCardNumber = mibBuilder.importSymbols("CADANT-CMTS-UPCHANNEL-MIB", "cadIfUpChannelId", "cadIfUpChannelCardNumber")
cadLayer3, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadLayer3")
CadCpeDeviceTypes, CadBridgePortType, InetAddressIPv4or6 = mibBuilder.importSymbols("CADANT-TC", "CadCpeDeviceTypes", "CadBridgePortType", "InetAddressIPv4or6")
cadVrInterfaceIfIndex, = mibBuilder.importSymbols("CADANT-VIRTUAL-ROUTER-MIB", "cadVrInterfaceIfIndex")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressIPv6, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, NotificationType, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, MibIdentifier, ObjectIdentity, ModuleIdentity, Bits, iso, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Bits", "iso", "TimeTicks", "Counter32")
TruthValue, DisplayString, RowStatus, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime", "MacAddress")
cadDhcpRaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6))
cadDhcpRaMib.setRevisions(('2015-04-22 00:00', '2014-09-16 00:00', '2013-10-17 00:00', '2011-11-16 00:00', '2011-10-27 00:00', '2011-07-05 00:00', '2010-11-01 00:00', '2010-10-19 00:00', '2010-04-22 00:00', '2010-04-15 00:00', '2010-03-09 00:00', '2010-03-05 00:00', '2009-11-04 00:00', '2009-10-01 00:00', '2009-09-21 00:00', '2009-09-17 00:00', '2009-08-27 00:00', '2006-12-06 00:00', '2006-11-22 00:00', '2006-10-18 00:00', '2006-08-22 00:00', '2006-01-27 00:00', '2004-01-18 00:00', '2003-08-18 00:00', '2003-07-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadDhcpRaMib.setRevisionsDescriptions(('Add support for cadVrDhcpRaOptionFanoutDisabled.', 'Add support for cadDhcpRaOptionMSOText', 'Change default value of cadDhcpThrottleEnable, cadArpThrottleEnable, cadDhcpV6Throttle, and cadNdThrottleEnable from false(2) to true(1)', 'Add cadDhcpPdPrefixStabilityEnabled', 'Add cadVrDhcpRaOptionScnEnable', 'Increase range to full range of Unsigned32 for cadVrDhcpPdClientIaid and cadVrDhcpPdPreClientIaid ', 'Add cadVrDhcpPdPreExpirytime', 'Add cadDhcpPdBLQFailedTCPSIP, cadDhcpPdBLQFailedTCPDIP cadDhcpPdBLQFailedTCPTime and cadDhcpPdBLQFailedTCPNum', 'Add cadVrDhcpPdCmMacAddress. Rename cadVrDhcpPdClientIpAddr to cadVrDhcpPdClientIpv6Addr, cadVrDhcpPdPreClientIpAddr to cadVrDhcpPdPreClientIpv6Addr.', 'Add cadDhcpPdPrefixAction group.', 'Add cadDhcpV6ThrottleEnable and cadNdThrottleEnable.', 'Change description of cadDhcpRaLeasequeryVersion and cadDhcpRaLeasequeryMessageType to indicate both do not apply to IPv6.', 'Rename cadVrDhcpRelaySrcIntefaceIndex to cadVrDhcpRelaySrcInterfaceIndex, cadVrDhcpRelaySrcIntefaceLinkAddrEnabled to cadVrDhcpRelaySrcInterfaceLinkAddrEnabled', 'Add cadVrDhcpRelaySrcIntefaceIndex, cadVrDhcpRelaySrcIntefaceLinkAddrEnabled, and cadVrDhcpRelayEgressIfTable. ', 'Remove cadVrDhcpPdPreRowStatus', 'Add cadDhcpPdRiEnabled, cadVrDhcpPdTable and cadVrDhcpPdPrefixEntry.', 'Remove cadVrDhcpServerType.', 'Modify the index for cadDhcpRaOptionUpstreamChannelTable.', 'Added capability for DHCP Lease Query configuration. ', 'Add support for DHCPv6 link-level addresses.', 'Add support for IPv6. ', 'Added capability for DHCP Relay Agent Option 82.', 'Remove support for layer 2 forwarding.', 'Add support for ARP throttling.', 'Add support for DHCP throttling.',))
if mibBuilder.loadTexts: cadDhcpRaMib.setLastUpdated('201504220000Z')
if mibBuilder.loadTexts: cadDhcpRaMib.setOrganization('ARRIS Group, Inc.')
if mibBuilder.loadTexts: cadDhcpRaMib.setContactInfo('Email: support@arris.com')
if mibBuilder.loadTexts: cadDhcpRaMib.setDescription('This MIB module defines objects to help support the Dynamic Host Configuration Protocol Relay Agent (DHCPRA) in the Cadant CMTS.')
class CadDhcpRelayAgentOptionType(TextualConvention, Integer32):
    description = "DHCP Relay Agent Circuit-ID sub-option type. The value `mac-ifindex' indicates that the 4 byte MAC ifIndex is used for the circuit ID relay sub-option. The value `us-ifindex' indicates that the 4 byte upstream channel ifIndex is used for the circuit ID relay sub-option. The values `octet-string-text' and `octet-string-hex' indicate that a user specified octet string is used for the sub-option (with the -text and -hex indicating how the string is to be represented in the running-config)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mac-ifindex", 1), ("us-ifindex", 2), ("octet-string-text", 3), ("octet-string-hex", 4))

class CadDhcpPDPreActionType(TextualConvention, Integer32):
    description = 'Read, remove or restore Prefix/route.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("clear", 1), ("restore", 2))

class CadDhcpPDPreActionDataType(TextualConvention, Integer32):
    description = 'type of data based on action. all - all prefixes and associated routes of C4 prefixOrIp - a prefix or an IP address cableMacInterface - All prefixes and routes of a cable mac interface'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("all", 0), ("prefixOrIp", 1), ("cableMacInterface", 2))

class CadDhcpRaOptionMSOTextType(TextualConvention, Integer32):
    description = 'DHCP Relay Agent MSO Defined Text sub-option type. The value `octet-string-text` indicates that a user specified octet string is used for the sub-option. The value `hostname` indicates that up to the first 64 bytes of the sysName MIB variable is used for the sub-option.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("octet-string-text", 1), ("hostname", 2))

cadVrDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 4), )
if mibBuilder.loadTexts: cadVrDhcpServerTable.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpServerTable.setDescription('This Table describes the assignment of DHCP servers to virtual router interfaces.')
cadVrDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 4, 1), ).setIndexNames((0, "CADANT-VIRTUAL-ROUTER-MIB", "cadVrInterfaceIfIndex"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpServerIPAddress"))
if mibBuilder.loadTexts: cadVrDhcpServerEntry.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpServerEntry.setDescription('A conceptual row containing information related to the internet service provider. ')
cadVrDhcpServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 4, 1, 1), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadVrDhcpServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpServerIPAddress.setDescription('Secondary Index into the DHCP server table. This identifies the DHCP server for this vrInterface/portType combination.')
cadVrDhcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadVrDhcpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpServerRowStatus.setDescription('Controls row creation and deletion.')
cadVrDhcpServerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 4, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadVrDhcpServerIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpServerIPAddressType.setDescription('This identifies the IP address type for DHCP server for this vrInterface/portType combination.')
cadVrDhcpServerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 4, 1, 5), CadCpeDeviceTypes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadVrDhcpServerTypes.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpServerTypes.setDescription('Indicates what type of traffic is served by this DHCP server.')
cadDhcpThrottle = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5))
cadDhcpThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpThrottleEnable.setStatus('current')
if mibBuilder.loadTexts: cadDhcpThrottleEnable.setDescription('Enable DHCP throttle feature.')
cadDhcpThrottleBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpThrottleBurstSize.setStatus('current')
if mibBuilder.loadTexts: cadDhcpThrottleBurstSize.setDescription('Maximum size of DHCP throttle bucket.')
cadDhcpThrottleRate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpThrottleRate.setStatus('current')
if mibBuilder.loadTexts: cadDhcpThrottleRate.setDescription('Rate in seconds between sending DHCP messages.')
cadArpThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadArpThrottleEnable.setStatus('current')
if mibBuilder.loadTexts: cadArpThrottleEnable.setDescription('Enable ARP throttle feature.')
cadDhcpV6ThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpV6ThrottleEnable.setStatus('current')
if mibBuilder.loadTexts: cadDhcpV6ThrottleEnable.setDescription('Enable IPv6 DHCPv6 throttle feature.')
cadNdThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 5, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadNdThrottleEnable.setStatus('current')
if mibBuilder.loadTexts: cadNdThrottleEnable.setDescription('Enable IPv6 ND throttle feature.')
cadDhcpRaOption = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6))
cadDhcpRaOptionType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 1), CadDhcpRelayAgentOptionType().clone('mac-ifindex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpRaOptionType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionType.setDescription('The default DHCP Relay Agent Circuit-ID sub-option type if not specified for an interface.')
cadDhcpRaOptionString = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpRaOptionString.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionString.setDescription('The default DHCP Relay Agent Circuit-ID sub-option value to use if the cadSysDhcpRaGlobalOptionType is octet-string-text or octet-string-hex.')
cadDhcpRaOptionUpstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 3), )
if mibBuilder.loadTexts: cadDhcpRaOptionUpstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionUpstreamChannelTable.setDescription('')
cadDhcpRaOptionUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadDhcpRaOptionUpstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionUpstreamChannelEntry.setDescription('A conceptual row containing information about upstream channels for the DHCP Relay Agent TLV.')
cadDhcpRaOptUpChannelOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 3, 1, 1), CadDhcpRelayAgentOptionType().clone('us-ifindex')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDhcpRaOptUpChannelOptionType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptUpChannelOptionType.setDescription('DHCP Relay Agent Circuit-ID sub-option type.')
cadDhcpRaOptUpChannelOptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDhcpRaOptUpChannelOptionString.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptUpChannelOptionString.setDescription('DHCP Relay Agent Circuit-ID sub-option user specified string.')
cadDhcpRaOptUpChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDhcpRaOptUpChannelStatus.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptUpChannelStatus.setDescription('The status variable controlling row creation and deletion. CreateAndGo(4) and delete(6) are the currently supported values.')
cadVrDhcpRelaySrcInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadVrDhcpRelaySrcInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRelaySrcInterfaceIndex.setDescription('This object specifies the selection of the layer 3 interface ifIndex of the SIP field in the DHCPv6 relay forward message. The default value is 0, which means that the routing stack will pick the appropriate RCM IP address. The options are cable MAC virtual interface ifIndex or a loopback virtual router interface ifIndex')
cadVrDhcpRelaySrcInterfaceLinkAddrEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadVrDhcpRelaySrcInterfaceLinkAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRelaySrcInterfaceLinkAddrEnabled.setDescription('This object specifies whether the link address of the source interface of the CM/CPE DHCPv6 message is used as a SIP in the DHCPv6 relay forward message.')
cadVrDhcpRaOptionScnEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadVrDhcpRaOptionScnEnable.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRaOptionScnEnable.setDescription('This object specifies whether enterprise 4491 (CableLabs) vendor specific information suboption (suboption 9) of the DHCP relay agent option (option 82) is to be populated with the CMTS CM service class suboption (sub-suboption 5) information for CPE DHCP requests.')
cadDhcpRaOptionMSOTextType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 7), CadDhcpRaOptionMSOTextType().clone('octet-string-text')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpRaOptionMSOTextType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionMSOTextType.setDescription('The DHCP Relay Agent MSO Defined Text sub-option type.')
cadDhcpRaOptionMSOTextString = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpRaOptionMSOTextString.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionMSOTextString.setDescription('The DHCP Relay Agent MSO Defined Text sub-option value to use if the cadDhcpRaOptionMSOTextType is octet-string-text.')
cadDhcpRaOptionChannelMSOTextTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 9), )
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextTable.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextTable.setDescription('')
cadDhcpRaOptionChannelMSOTextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextEntry.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextEntry.setDescription('A conceptual row containing information about channels for the DHCP Relay Agent MSO Defined Text sub-option TLV. The ifIndex must be an upstream channel ifIndex.')
cadDhcpRaOptionChannelMSOTextType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 9, 1, 1), CadDhcpRaOptionMSOTextType().clone('octet-string-text')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextType.setDescription('DHCP Relay Agent MSO Defined Text sub-option type.')
cadDhcpRaOptionChannelMSOTextString = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextString.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextString.setDescription('DHCP Relay Agent MSO Defined Text sub-option user specified string.')
cadDhcpRaOptionChannelMSOTextStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextStatus.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaOptionChannelMSOTextStatus.setDescription('The status variable controlling row creation and deletion. CreateAndGo(4) and delete(6) are the currently supported values.')
cadVrDhcpRaOptionFanoutDisabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 6, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadVrDhcpRaOptionFanoutDisabled.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRaOptionFanoutDisabled.setDescription('This object is used to disable fanning out of CPE DHCP requests across DHCP servers on multiple subinterfaces by the DHCP relay agent.')
cadDhcpRaLeaseQuery = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 7))
cadDhcpRaLeasequeryVersion = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 11))).clone(namedValues=NamedValues(("draft-0", 1), ("draft-2", 3), ("draft-4", 5), ("rfc-4388", 11))).clone('draft-0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpRaLeasequeryVersion.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaLeasequeryVersion.setDescription('Indicates which version of DHCP Lease Query is supported. This object does not apply to IPv6.')
cadDhcpRaLeasequeryMessageType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 13)).clone(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpRaLeasequeryMessageType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpRaLeasequeryMessageType.setDescription('Indicates the message type value of the DHCPLEASEQUERY message if operating in one of the draft modes. If the mode is rfc-4388, then the value for the DHCPLEASEQUERY message will be 10 and this parameter is ignored. The message type for the DHCPLEASEKNOWN, DHCPLEASEUNKNOWN and DHCPACTIVE messages will be the value of DHCPLEASEQUERY plus 1, 2, and 3 respectively. This object does not apply to IPv6.')
cadVrDhcpLinkAddressTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 8), )
if mibBuilder.loadTexts: cadVrDhcpLinkAddressTable.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpLinkAddressTable.setDescription('This Table describes the assignment of link addresses used by the DHCP relay agent.')
cadVrDhcpLinkAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 8, 1), ).setIndexNames((0, "CADANT-VIRTUAL-ROUTER-MIB", "cadVrInterfaceIfIndex"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpLinkAddressType"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpLinkAddress"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpLinkType"))
if mibBuilder.loadTexts: cadVrDhcpLinkAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpLinkAddressEntry.setDescription('A conceptual row containing information related to the DHCP relay agent link.')
cadVrDhcpLinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadVrDhcpLinkAddressType.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpLinkAddressType.setDescription('This identifies the IP address type for the link.')
cadVrDhcpLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 8, 1, 2), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadVrDhcpLinkAddress.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpLinkAddress.setDescription('Secondary Index into the DHCP server table. This identifies the DHCP server for this vrInterface/portType combination.')
cadVrDhcpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 8, 1, 3), CadBridgePortType())
if mibBuilder.loadTexts: cadVrDhcpLinkType.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpLinkType.setDescription('Tertiary index indicating what type of traffic is served by this DHCP server.')
cadVrDhcpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadVrDhcpLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpLinkRowStatus.setDescription('Controls row creation and deletion. Valid values are createAndGo(4) and delete(6).')
cadDhcpPd = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 9))
cadDhcpPdRiEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 9, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdRiEnabled.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdRiEnabled.setDescription('Global enable or disable route injection for DHCP Relay IPv6 prefix delegation. If set to true, then enabled. If set to false, then disabled')
cadDhcpPdPrefixStabilityEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 9, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdPrefixStabilityEnabled.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdPrefixStabilityEnabled.setDescription('This object specifies whether the IPV6 Prefix Stability is enabled or not. If set to true, then enabled. If set to false, then disabled')
cadVrDhcpPdTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10), )
if mibBuilder.loadTexts: cadVrDhcpPdTable.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdTable.setDescription('This table describes the DHCP client information associated with IPv6 prefix delegation.')
cadVrDhcpPdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1), ).setIndexNames((0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpPdClientIpv6Addr"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpPdClientIaid"))
if mibBuilder.loadTexts: cadVrDhcpPdEntry.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdEntry.setDescription('A conceptual row containing information related to the DHCP relay prefix delegation.')
cadVrDhcpPdClientIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: cadVrDhcpPdClientIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdClientIpv6Addr.setDescription('This identifies the requesting DHCP client IPv6 Link-local address.')
cadVrDhcpPdClientIaid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cadVrDhcpPdClientIaid.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdClientIaid.setDescription('The requesting DHCP client identity association identification number. One of the keys for cadVrDhcpPdPrefixEntry ')
cadVrDhcpPdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdIfIndex.setDescription('This identifies the CMTS interface index associated with the requesting DHCP client.')
cadVrDhcpPdClientDuid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdClientDuid.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdClientDuid.setDescription('The client DHCP unique identifier.')
cadVrDhcpPdCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdCmMacAddress.setDescription('This identifies the Mac address associated with the requesting DHCP client.')
cadVrDhcpPdT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdT1.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdT1.setDescription('The time duration relative to the current time, expressed in units of seconds, at which the requesting client should contact the delegating router from which the prefixes in the IA_PD were obtained to extend the lifetimes of the prefixes delegated to the IA_PD')
cadVrDhcpPdT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdT2.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdT2.setDescription('The time duration relative to the current time expressed in units of seconds at which the requesting client should contact any available delegating router to extend the lifetimes of the prefixes assigned to the IA_PD')
cadVrDhcpPdPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11), )
if mibBuilder.loadTexts: cadVrDhcpPdPrefixTable.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPrefixTable.setDescription('This table describes the IPv6 prefixes that have been delegated by the DHCP server and learned by the DHCP relay agent.')
cadVrDhcpPdPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1), ).setIndexNames((0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpPdPreClientIpv6Addr"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpPdPreClientIaid"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpPdPrePrefix"), (0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpPdPrePrefixLength"))
if mibBuilder.loadTexts: cadVrDhcpPdPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPrefixEntry.setDescription('A conceptual row containing information related to the DHCP relay prefix delegation.')
cadVrDhcpPdPreClientIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: cadVrDhcpPdPreClientIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPreClientIpv6Addr.setDescription('This identifies the requesting DHCP client IPv6 Link-local address.')
cadVrDhcpPdPreClientIaid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cadVrDhcpPdPreClientIaid.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPreClientIaid.setDescription('The requesting DHCP client identity association identification number.')
cadVrDhcpPdPrePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: cadVrDhcpPdPrePrefix.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPrePrefix.setDescription('This identifies the delegated IPv6 prefix.')
cadVrDhcpPdPrePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: cadVrDhcpPdPrePrefixLength.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPrePrefixLength.setDescription('This identifies the delegated IPv6 prefix length.')
cadVrDhcpPdPrePreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdPrePreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPrePreferredLifetime.setDescription('The prefix preferred time, in seconds, as received from the DHCPv6 server. A value of 4,294,967,295 (0xFFFFFFFF) represents infinity.')
cadVrDhcpPdPreValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdPreValidLifetime.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPreValidLifetime.setDescription('The prefix valid time, in seconds, as received from the DHCPv6 server. A value of 4,294,967,295 (0xFFFFFFFF) represents infinity.')
cadVrDhcpPdPreRouteInject = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdPreRouteInject.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPreRouteInject.setDescription('If true, then a route for this prefix and length has been injected into the routing table. If false, then a route for this prefix and length has not been injected into the routing table')
cadVrDhcpPdPreExpirytime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadVrDhcpPdPreExpirytime.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpPdPreExpirytime.setDescription('The time, in seconds, when this prefix expires. A value of 4,294,967,295 (0xFFFFFFFF) represents infinity.')
cadVrDhcpRelayEgressIfTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 12), )
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfTable.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfTable.setDescription('Cadant Virtual Router DHCP Relay Egress Interface Table')
cadVrDhcpRelayEgressIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 12, 1), ).setIndexNames((0, "CADANT-CMTS-DHCPRA-MIB", "cadVrDhcpRelayEgressIfIndex"))
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfEntry.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfEntry.setDescription('each interface must be a unique network interface of RCM')
cadVrDhcpRelayEgressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfIndex.setDescription(' This object specifies an Egress interface over which multicast DHCP relay forward messages are sent.')
cadVrDhcpRelayEgressIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadVrDhcpRelayEgressIfRowStatus.setDescription('Row Status for this table.')
cadDhcpPdPrefixAction = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 13))
cadDhcpPdPrefixActionType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 13, 1), CadDhcpPDPreActionType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdPrefixActionType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdPrefixActionType.setDescription('Action to be performed.')
cadDhcpPdPrefixActionDataType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 13, 2), CadDhcpPDPreActionDataType().clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataType.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataType.setDescription('type of data')
cadDhcpPdPrefixActionDataIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 13, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataIfIndex.setDescription('cable mac VrInterface ifIndex - only valid when cadDhcpPdPrefixActionType is set to cableMacInterface')
cadDhcpPdPrefixActionDataPrefixOrIp = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 13, 4), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataPrefixOrIp.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataPrefixOrIp.setDescription('ipv6 prefix or IP address - only valid when cadDhcpPdPrefixActionType is set to prefixOrIp')
cadDhcpPdPrefixActionDataPrefixOrIpLen = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataPrefixOrIpLen.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdPrefixActionDataPrefixOrIpLen.setDescription('ipv6 prefix or IP address length - only valid when cadDhcpPdPrefixActionType is set to prefixOrIp')
cadDhcpPdBLQFailedGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 14))
cadDhcpPdBLQFailedTCPSIP = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 14, 1), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPSIP.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPSIP.setDescription('The SIP of the last failed TCP connection between the CMTS and the DHCPv6 server during the bulk lease query process')
cadDhcpPdBLQFailedTCPDIP = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 14, 2), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPDIP.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPDIP.setDescription('The DIP of the last failed TCP connection between the CMTS and the DHCPv6 server during the bulk lease query process')
cadDhcpPdBLQFailedTCPTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 14, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPTime.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPTime.setDescription('The time of the last failed TCP connection between the CMTS and the DHCPv6 server during the bulk lease query process')
cadDhcpPdBLQFailedTCPNum = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 6, 14, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPNum.setStatus('current')
if mibBuilder.loadTexts: cadDhcpPdBLQFailedTCPNum.setDescription('The total number of failed TCP connections between the CMTS and the DHCPv6 server during the bulk lease query process')
mibBuilder.exportSymbols("CADANT-CMTS-DHCPRA-MIB", cadVrDhcpPdPreRouteInject=cadVrDhcpPdPreRouteInject, cadVrDhcpServerIPAddressType=cadVrDhcpServerIPAddressType, cadDhcpRaLeasequeryMessageType=cadDhcpRaLeasequeryMessageType, cadVrDhcpPdClientIpv6Addr=cadVrDhcpPdClientIpv6Addr, cadVrDhcpLinkAddressTable=cadVrDhcpLinkAddressTable, cadDhcpPdBLQFailedTCPNum=cadDhcpPdBLQFailedTCPNum, cadVrDhcpPdPrePrefix=cadVrDhcpPdPrePrefix, cadDhcpRaMib=cadDhcpRaMib, cadDhcpPdPrefixActionDataType=cadDhcpPdPrefixActionDataType, cadDhcpThrottleEnable=cadDhcpThrottleEnable, cadVrDhcpRelaySrcInterfaceIndex=cadVrDhcpRelaySrcInterfaceIndex, cadDhcpRaOptionChannelMSOTextStatus=cadDhcpRaOptionChannelMSOTextStatus, cadVrDhcpPdEntry=cadVrDhcpPdEntry, cadVrDhcpLinkRowStatus=cadVrDhcpLinkRowStatus, cadVrDhcpPdT1=cadVrDhcpPdT1, cadDhcpPdBLQFailedTCPDIP=cadDhcpPdBLQFailedTCPDIP, cadDhcpPdBLQFailedGrp=cadDhcpPdBLQFailedGrp, cadVrDhcpPdCmMacAddress=cadVrDhcpPdCmMacAddress, cadDhcpRaOptionType=cadDhcpRaOptionType, CadDhcpPDPreActionType=CadDhcpPDPreActionType, CadDhcpRaOptionMSOTextType=CadDhcpRaOptionMSOTextType, cadDhcpRaOption=cadDhcpRaOption, cadDhcpPdPrefixActionDataPrefixOrIpLen=cadDhcpPdPrefixActionDataPrefixOrIpLen, cadVrDhcpServerTypes=cadVrDhcpServerTypes, cadVrDhcpPdClientIaid=cadVrDhcpPdClientIaid, cadVrDhcpRelayEgressIfRowStatus=cadVrDhcpRelayEgressIfRowStatus, cadVrDhcpPdPreExpirytime=cadVrDhcpPdPreExpirytime, cadDhcpPdBLQFailedTCPSIP=cadDhcpPdBLQFailedTCPSIP, cadVrDhcpPdPrePrefixLength=cadVrDhcpPdPrePrefixLength, cadDhcpRaOptionUpstreamChannelEntry=cadDhcpRaOptionUpstreamChannelEntry, cadDhcpPdBLQFailedTCPTime=cadDhcpPdBLQFailedTCPTime, CadDhcpRelayAgentOptionType=CadDhcpRelayAgentOptionType, cadDhcpRaOptionChannelMSOTextType=cadDhcpRaOptionChannelMSOTextType, cadVrDhcpServerEntry=cadVrDhcpServerEntry, cadVrDhcpLinkAddress=cadVrDhcpLinkAddress, cadVrDhcpPdClientDuid=cadVrDhcpPdClientDuid, cadVrDhcpRaOptionFanoutDisabled=cadVrDhcpRaOptionFanoutDisabled, cadVrDhcpRelayEgressIfEntry=cadVrDhcpRelayEgressIfEntry, cadVrDhcpPdT2=cadVrDhcpPdT2, cadArpThrottleEnable=cadArpThrottleEnable, cadDhcpRaLeasequeryVersion=cadDhcpRaLeasequeryVersion, cadVrDhcpPdPrefixEntry=cadVrDhcpPdPrefixEntry, cadVrDhcpPdTable=cadVrDhcpPdTable, cadVrDhcpLinkAddressEntry=cadVrDhcpLinkAddressEntry, cadVrDhcpServerIPAddress=cadVrDhcpServerIPAddress, cadDhcpRaOptUpChannelStatus=cadDhcpRaOptUpChannelStatus, cadDhcpRaOptionMSOTextType=cadDhcpRaOptionMSOTextType, CadDhcpPDPreActionDataType=CadDhcpPDPreActionDataType, cadVrDhcpLinkType=cadVrDhcpLinkType, cadDhcpPdPrefixActionDataIfIndex=cadDhcpPdPrefixActionDataIfIndex, cadVrDhcpLinkAddressType=cadVrDhcpLinkAddressType, cadVrDhcpPdPreValidLifetime=cadVrDhcpPdPreValidLifetime, cadDhcpRaOptionChannelMSOTextEntry=cadDhcpRaOptionChannelMSOTextEntry, cadDhcpRaOptionString=cadDhcpRaOptionString, cadDhcpRaOptionChannelMSOTextTable=cadDhcpRaOptionChannelMSOTextTable, cadNdThrottleEnable=cadNdThrottleEnable, cadDhcpV6ThrottleEnable=cadDhcpV6ThrottleEnable, cadDhcpPdPrefixActionType=cadDhcpPdPrefixActionType, cadDhcpPdRiEnabled=cadDhcpPdRiEnabled, cadVrDhcpPdPrePreferredLifetime=cadVrDhcpPdPrePreferredLifetime, cadDhcpPd=cadDhcpPd, cadVrDhcpPdPreClientIpv6Addr=cadVrDhcpPdPreClientIpv6Addr, cadVrDhcpRaOptionScnEnable=cadVrDhcpRaOptionScnEnable, cadDhcpThrottle=cadDhcpThrottle, cadVrDhcpRelayEgressIfIndex=cadVrDhcpRelayEgressIfIndex, cadDhcpRaOptUpChannelOptionType=cadDhcpRaOptUpChannelOptionType, cadVrDhcpRelaySrcInterfaceLinkAddrEnabled=cadVrDhcpRelaySrcInterfaceLinkAddrEnabled, cadDhcpPdPrefixAction=cadDhcpPdPrefixAction, cadVrDhcpServerRowStatus=cadVrDhcpServerRowStatus, PYSNMP_MODULE_ID=cadDhcpRaMib, cadDhcpRaOptionChannelMSOTextString=cadDhcpRaOptionChannelMSOTextString, cadVrDhcpRelayEgressIfTable=cadVrDhcpRelayEgressIfTable, cadDhcpRaOptionMSOTextString=cadDhcpRaOptionMSOTextString, cadVrDhcpPdPreClientIaid=cadVrDhcpPdPreClientIaid, cadDhcpPdPrefixStabilityEnabled=cadDhcpPdPrefixStabilityEnabled, cadVrDhcpServerTable=cadVrDhcpServerTable, cadDhcpThrottleRate=cadDhcpThrottleRate, cadDhcpRaOptUpChannelOptionString=cadDhcpRaOptUpChannelOptionString, cadVrDhcpPdPrefixTable=cadVrDhcpPdPrefixTable, cadDhcpRaOptionUpstreamChannelTable=cadDhcpRaOptionUpstreamChannelTable, cadDhcpPdPrefixActionDataPrefixOrIp=cadDhcpPdPrefixActionDataPrefixOrIp, cadDhcpThrottleBurstSize=cadDhcpThrottleBurstSize, cadDhcpRaLeaseQuery=cadDhcpRaLeaseQuery, cadVrDhcpPdIfIndex=cadVrDhcpPdIfIndex)
