#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-SnaMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-SnaMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
Gauge32, RowPointer, RowStatus, StorageType, Integer32, DisplayString, Unsigned32, Counter32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Gauge32", "RowPointer", "RowStatus", "StorageType", "Integer32", "DisplayString", "Unsigned32", "Counter32")
NonReplicated, DashedHexString, HexString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "DashedHexString", "HexString")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
mscVrIndex, mscVrPp, mscVrPpIndex, mscVr = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex", "mscVrPp", "mscVrPpIndex", "mscVr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, Gauge32, ObjectIdentity, TimeTicks, iso, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Counter32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Gauge32", "ObjectIdentity", "TimeTicks", "iso", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Counter32", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snaMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56))
mscVrPpSnaPort = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15))
mscVrPpSnaPortRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 1), )
if mibBuilder.loadTexts: mscVrPpSnaPortRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrPpSnaPort components.')
mscVrPpSnaPortRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpSnaPort component.')
mscVrPpSnaPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpSnaPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpSnaPort components. These components can be added and deleted.')
mscVrPpSnaPortComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpSnaPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortStorageType.setDescription('This variable represents the storage type value for the mscVrPpSnaPort tables.')
mscVrPpSnaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrPpSnaPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortIndex.setDescription('This variable represents the index for the mscVrPpSnaPort tables.')
mscVrPpSnaPortAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 100), )
if mibBuilder.loadTexts: mscVrPpSnaPortAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
mscVrPpSnaPortAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortAdminControlEntry.setDescription('An entry in the mscVrPpSnaPortAdminControlTable.')
mscVrPpSnaPortSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpSnaPortSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
mscVrPpSnaPortProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 101), )
if mibBuilder.loadTexts: mscVrPpSnaPortProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortProvTable.setDescription('This group contains provisionable attributes for SNA ports.')
mscVrPpSnaPortProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortProvEntry.setDescription('An entry in the mscVrPpSnaPortProvTable.')
mscVrPpSnaPortVirtualSegmentLFSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 101, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(516, 516), ValueRangeConstraint(635, 635), ValueRangeConstraint(754, 754), ValueRangeConstraint(873, 873), ValueRangeConstraint(993, 993), ValueRangeConstraint(1112, 1112), ValueRangeConstraint(1231, 1231), ValueRangeConstraint(1350, 1350), ValueRangeConstraint(1470, 1470), ValueRangeConstraint(1542, 1542), ValueRangeConstraint(1615, 1615), ValueRangeConstraint(1688, 1688), ValueRangeConstraint(1761, 1761), ValueRangeConstraint(1833, 1833), ValueRangeConstraint(1906, 1906), ValueRangeConstraint(1979, 1979), ValueRangeConstraint(2052, 2052), ValueRangeConstraint(2345, 2345), ValueRangeConstraint(5331, 5331), ValueRangeConstraint(5798, 5798), ValueRangeConstraint(6264, 6264), ValueRangeConstraint(6730, 6730), ValueRangeConstraint(7197, 7197), ValueRangeConstraint(7663, 7663), ValueRangeConstraint(8130, 8130), ValueRangeConstraint(8539, 8539), ValueRangeConstraint(8949, 8949), ValueRangeConstraint(9358, 9358), ValueRangeConstraint(9768, 9768), ValueRangeConstraint(10178, 10178), ValueRangeConstraint(10587, 10587), ValueRangeConstraint(10997, 10997), ValueRangeConstraint(11407, 11407), ValueRangeConstraint(12199, 12199), ValueRangeConstraint(12992, 12992), ValueRangeConstraint(13785, 13785), ValueRangeConstraint(14578, 14578), ValueRangeConstraint(15370, 15370), ValueRangeConstraint(16163, 16163), ValueRangeConstraint(16956, 16956), ValueRangeConstraint(17749, 17749), ValueRangeConstraint(20730, 20730), ValueRangeConstraint(23711, 23711), ValueRangeConstraint(26693, 26693), ValueRangeConstraint(29674, 29674), ValueRangeConstraint(32655, 32655), ValueRangeConstraint(35637, 35637), ValueRangeConstraint(38618, 38618), ValueRangeConstraint(41600, 41600), ValueRangeConstraint(44591, 44591), ValueRangeConstraint(47583, 47583), ValueRangeConstraint(50575, 50575), ValueRangeConstraint(53567, 53567), ValueRangeConstraint(56559, 56559), ValueRangeConstraint(59551, 59551), ValueRangeConstraint(65535, 65535), )).clone(2345)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpSnaPortVirtualSegmentLFSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortVirtualSegmentLFSize.setDescription('This attribute specifies the largest frame size (including DLC header and info field but not any MAC-level or framing octets) for end-to- end connections established through this Sna component. This value is used as the largest frame size for all circuits unless a smaller value is specified in XID signals or by local LAN constraints.')
mscVrPpSnaPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 103), )
if mibBuilder.loadTexts: mscVrPpSnaPortStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscVrPpSnaPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortStateEntry.setDescription('An entry in the mscVrPpSnaPortStateTable.')
mscVrPpSnaPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscVrPpSnaPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscVrPpSnaPortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscVrPpSnaPortOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 104), )
if mibBuilder.loadTexts: mscVrPpSnaPortOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscVrPpSnaPortOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortOperStatusEntry.setDescription('An entry in the mscVrPpSnaPortOperStatusTable.')
mscVrPpSnaPortSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscVrPpSnaPortCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2))
mscVrPpSnaPortCircuitRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1), )
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrPpSnaPortCircuit components.')
mscVrPpSnaPortCircuitRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS1MacIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS1SapIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS2MacIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS2SapIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpSnaPortCircuit component.')
mscVrPpSnaPortCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpSnaPortCircuit components. These components cannot be added nor deleted.')
mscVrPpSnaPortCircuitComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpSnaPortCircuitStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitStorageType.setDescription('This variable represents the storage type value for the mscVrPpSnaPortCircuit tables.')
mscVrPpSnaPortCircuitS1MacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1MacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1MacIndex.setDescription('This variable represents an index for the mscVrPpSnaPortCircuit tables.')
mscVrPpSnaPortCircuitS1SapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1SapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1SapIndex.setDescription('This variable represents an index for the mscVrPpSnaPortCircuit tables.')
mscVrPpSnaPortCircuitS2MacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 12), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS2MacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS2MacIndex.setDescription('This variable represents an index for the mscVrPpSnaPortCircuit tables.')
mscVrPpSnaPortCircuitS2SapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS2SapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS2SapIndex.setDescription('This variable represents an index for the mscVrPpSnaPortCircuit tables.')
mscVrPpSnaPortCircuitOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100), )
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group defines an entry in the SnaCircuitEntry Table.')
mscVrPpSnaPortCircuitOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS1MacIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS1SapIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS2MacIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrPpSnaPortCircuitS2SapIndex"))
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitOperEntry.setDescription('An entry in the mscVrPpSnaPortCircuitOperTable.')
mscVrPpSnaPortCircuitS1DlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("na", 2), ("llc", 3), ("sdlc", 4), ("qllc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1DlcType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1DlcType.setDescription('This attribute indicates the DLC protocol in use between the SNA node and S1.')
mscVrPpSnaPortCircuitS1RouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1RouteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS1RouteInfo.setDescription('If source-route bridging is in use between the SNA node and S1, this is the routing information field describing the path between the two devices. The format of the routing information corresponds to that of the route designator fields of a specifically routed SRB frame. Otherwise the value will be a Hex string of zero length.')
mscVrPpSnaPortCircuitS2Location = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("local", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS2Location.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitS2Location.setDescription('This attribute indicates the location of End Station 2 (S2). If the location of End Station 2 is local, the interface information will be available in the conceptual row whose S1 and S2 are the S2 and the S1 of this conceptual row, respectively.')
mscVrPpSnaPortCircuitOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("s2", 0), ("s1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitOrigin.setDescription('This attribute indicates which of the two end stations initiated the establishment of this circuit.')
mscVrPpSnaPortCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("disconnected", 1), ("circuitStart", 2), ("resolvePending", 3), ("circuitPending", 4), ("circuitEstablished", 5), ("connectPending", 6), ("contactPending", 7), ("connected", 8), ("disconnectPending", 9), ("haltPending", 10), ("haltPendingNoack", 11), ("circuitRestart", 12), ("restartPending", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitState.setDescription('This attribute indicates the current state of this circuit. Note that this implementation does not keep entries after circuit disconnect. Details regarding the state machine and meaning of individual states may be found in RFC 1795.')
mscVrPpSnaPortCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unsupported", 1), ("low", 2), ("medium", 3), ("high", 4), ("highest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitPriority.setDescription('This attribute indicates the transmission priority of this circuit as understood by this SNA node. This value is determined by the two SNA nodes at circuit startup time.')
mscVrPpSnaPortCircuitVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 15, 2, 100, 1, 26), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitVcId.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpSnaPortCircuitVcId.setDescription('This attribute indicates the component name of the GvcIf/n Dlci/n which represents this VC connection in the SNA DLR service. This attribute appears only for circuits that are connecting over a Frame Relay DLCI only. For circuits connecting over Qllc VCs or Token Ring interface this attribute does not appear.')
mscVrSna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14))
mscVrSnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 1), )
if mibBuilder.loadTexts: mscVrSnaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrSna components.')
mscVrSnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaRowStatusEntry.setDescription('A single entry in the table represents a single mscVrSna component.')
mscVrSnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrSnaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrSna components. These components can be added and deleted.')
mscVrSnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrSnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaStorageType.setDescription('This variable represents the storage type value for the mscVrSna tables.')
mscVrSnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrSnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaIndex.setDescription('This variable represents the index for the mscVrSna tables.')
mscVrSnaAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 100), )
if mibBuilder.loadTexts: mscVrSnaAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
mscVrSnaAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaAdminControlEntry.setDescription('An entry in the mscVrSnaAdminControlTable.')
mscVrSnaSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrSnaSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
mscVrSnaStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 101), )
if mibBuilder.loadTexts: mscVrSnaStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscVrSnaStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaStateEntry.setDescription('An entry in the mscVrSnaStateTable.')
mscVrSnaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 101, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscVrSnaOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 101, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscVrSnaUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 101, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscVrSnaOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 102), )
if mibBuilder.loadTexts: mscVrSnaOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscVrSnaOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 102, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaOperStatusEntry.setDescription('An entry in the mscVrSnaOperStatusTable.')
mscVrSnaSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscVrSnaOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 103), )
if mibBuilder.loadTexts: mscVrSnaOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaOperTable.setDescription('This group contains operational attributes which describe the behavior of the Sna component and associated ports under the Virtual Router (VR).')
mscVrSnaOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaOperEntry.setDescription('An entry in the mscVrSnaOperTable.')
mscVrSnaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 103, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaVersion.setDescription('This attribute indicates the particular version of the SNA standard supported by this Sna. The first 2 digits represent the SNA standard Version number of this Sna, the second 2 digits represent the SNA standard Release number.')
mscVrSnaCircStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 104), )
if mibBuilder.loadTexts: mscVrSnaCircStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaCircStatsTable.setDescription("A circuit is the end-to-end association of two Data Link Routing (DLR) entities through one or two DLR nodes. It is the concatenation of two 'data links', optionally with an intervening transport connection (not initially supported). The origin of the circuit is the end station that initiates the circuit. The target of the circuit is the end station that receives the initiation.")
mscVrSnaCircStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaCircStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaCircStatsEntry.setDescription('An entry in the mscVrSnaCircStatsTable.')
mscVrSnaActives = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 104, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaActives.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaActives.setDescription('This attribute indiates the current number of circuits in Circuit table that are not in the disconnected state.')
mscVrSnaCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 104, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaCreates.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaCreates.setDescription('This attribute indicates the total number of entries ever added to Circuit table, or reactivated upon exiting disconnected state.')
mscVrSnaDirStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 105), )
if mibBuilder.loadTexts: mscVrSnaDirStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaDirStatsTable.setDescription('MAC Table Directory statistics')
mscVrSnaDirStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 105, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-SnaMIB", "mscVrSnaIndex"))
if mibBuilder.loadTexts: mscVrSnaDirStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaDirStatsEntry.setDescription('An entry in the mscVrSnaDirStatsTable.')
mscVrSnaMacEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 105, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaMacEntries.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaMacEntries.setDescription('This attribute indicates the current total number of entries in the DirectoryEntry table.')
mscVrSnaMacCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 105, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaMacCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaMacCacheHits.setDescription('This attribute indicates the number of times a cache search for a particular MAC address resulted in success.')
mscVrSnaMacCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 14, 105, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrSnaMacCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrSnaMacCacheMisses.setDescription('This attribute indicates the number of times a cache search for a particular MAC address resulted in failure.')
snaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 1))
snaGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 1, 1))
snaGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 1, 1, 3))
snaGroupCA02DevelopmentLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 1, 1, 3, 1))
snaGroupCA0214 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 1, 1, 3, 1, 14))
snaGroupCA0214A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 1, 1, 3, 1, 14, 1))
snaCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 3))
snaCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 3, 1))
snaCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 3, 1, 3))
snaCapabilitiesCA02DevelopmentLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 3, 1, 3, 1))
snaCapabilitiesCA0214 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 3, 1, 3, 1, 14))
snaCapabilitiesCA0214A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 56, 3, 1, 3, 1, 14, 1))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-SnaMIB", snaGroupCA02=snaGroupCA02, mscVrSnaOperStatusEntry=mscVrSnaOperStatusEntry, mscVrPpSnaPortCircuitComponentName=mscVrPpSnaPortCircuitComponentName, mscVrSnaSnmpOperStatus=mscVrSnaSnmpOperStatus, snaMIB=snaMIB, mscVrSnaActives=mscVrSnaActives, mscVrPpSnaPortCircuitOperEntry=mscVrPpSnaPortCircuitOperEntry, mscVrPpSnaPortRowStatusTable=mscVrPpSnaPortRowStatusTable, mscVrPpSnaPortCircuitS1DlcType=mscVrPpSnaPortCircuitS1DlcType, snaCapabilitiesCA02=snaCapabilitiesCA02, snaGroupCA=snaGroupCA, mscVrPpSnaPortCircuitVcId=mscVrPpSnaPortCircuitVcId, mscVrSnaVersion=mscVrSnaVersion, mscVrPpSnaPortSnmpAdminStatus=mscVrPpSnaPortSnmpAdminStatus, mscVrPpSnaPortIndex=mscVrPpSnaPortIndex, mscVrPpSnaPortProvEntry=mscVrPpSnaPortProvEntry, mscVrPpSnaPortCircuitS1RouteInfo=mscVrPpSnaPortCircuitS1RouteInfo, mscVrSnaStorageType=mscVrSnaStorageType, mscVrPpSnaPortAdminState=mscVrPpSnaPortAdminState, mscVrSnaStateEntry=mscVrSnaStateEntry, snaGroupCA0214A=snaGroupCA0214A, mscVrSnaOperTable=mscVrSnaOperTable, mscVrPpSnaPortCircuitOrigin=mscVrPpSnaPortCircuitOrigin, mscVrSnaCircStatsTable=mscVrSnaCircStatsTable, mscVrPpSnaPortVirtualSegmentLFSize=mscVrPpSnaPortVirtualSegmentLFSize, mscVrPpSnaPortAdminControlEntry=mscVrPpSnaPortAdminControlEntry, mscVrSnaUsageState=mscVrSnaUsageState, mscVrPpSnaPortStateTable=mscVrPpSnaPortStateTable, mscVrSnaCircStatsEntry=mscVrSnaCircStatsEntry, mscVrSnaOperStatusTable=mscVrSnaOperStatusTable, mscVrPpSnaPortCircuit=mscVrPpSnaPortCircuit, snaCapabilitiesCA0214A=snaCapabilitiesCA0214A, mscVrPpSnaPortRowStatusEntry=mscVrPpSnaPortRowStatusEntry, mscVrPpSnaPortStorageType=mscVrPpSnaPortStorageType, mscVrSnaStateTable=mscVrSnaStateTable, mscVrSnaAdminState=mscVrSnaAdminState, mscVrSnaOperEntry=mscVrSnaOperEntry, snaGroup=snaGroup, mscVrSnaMacCacheMisses=mscVrSnaMacCacheMisses, mscVrPpSnaPortCircuitStorageType=mscVrPpSnaPortCircuitStorageType, mscVrSnaRowStatusEntry=mscVrSnaRowStatusEntry, mscVrPpSnaPortComponentName=mscVrPpSnaPortComponentName, mscVrPpSnaPortCircuitS2Location=mscVrPpSnaPortCircuitS2Location, snaGroupCA02DevelopmentLoad=snaGroupCA02DevelopmentLoad, mscVrPpSnaPortSnmpOperStatus=mscVrPpSnaPortSnmpOperStatus, mscVrSnaRowStatus=mscVrSnaRowStatus, mscVrPpSnaPortUsageState=mscVrPpSnaPortUsageState, mscVrPpSnaPortCircuitRowStatusEntry=mscVrPpSnaPortCircuitRowStatusEntry, mscVrPpSnaPortProvTable=mscVrPpSnaPortProvTable, snaCapabilitiesCA0214=snaCapabilitiesCA0214, mscVrPpSnaPortCircuitRowStatusTable=mscVrPpSnaPortCircuitRowStatusTable, snaCapabilities=snaCapabilities, mscVrPpSnaPortCircuitOperTable=mscVrPpSnaPortCircuitOperTable, mscVrPpSnaPortRowStatus=mscVrPpSnaPortRowStatus, snaCapabilitiesCA02DevelopmentLoad=snaCapabilitiesCA02DevelopmentLoad, mscVrSnaComponentName=mscVrSnaComponentName, mscVrPpSnaPort=mscVrPpSnaPort, mscVrSnaDirStatsTable=mscVrSnaDirStatsTable, mscVrSnaIndex=mscVrSnaIndex, mscVrSnaSnmpAdminStatus=mscVrSnaSnmpAdminStatus, mscVrPpSnaPortCircuitS2SapIndex=mscVrPpSnaPortCircuitS2SapIndex, mscVrPpSnaPortCircuitState=mscVrPpSnaPortCircuitState, snaGroupCA0214=snaGroupCA0214, mscVrSnaDirStatsEntry=mscVrSnaDirStatsEntry, mscVrSnaAdminControlEntry=mscVrSnaAdminControlEntry, mscVrPpSnaPortCircuitS1SapIndex=mscVrPpSnaPortCircuitS1SapIndex, mscVrSnaOperationalState=mscVrSnaOperationalState, mscVrPpSnaPortCircuitS2MacIndex=mscVrPpSnaPortCircuitS2MacIndex, mscVrPpSnaPortOperationalState=mscVrPpSnaPortOperationalState, mscVrPpSnaPortCircuitRowStatus=mscVrPpSnaPortCircuitRowStatus, mscVrSnaMacCacheHits=mscVrSnaMacCacheHits, mscVrSnaRowStatusTable=mscVrSnaRowStatusTable, mscVrSnaMacEntries=mscVrSnaMacEntries, mscVrSna=mscVrSna, mscVrPpSnaPortCircuitPriority=mscVrPpSnaPortCircuitPriority, mscVrSnaAdminControlTable=mscVrSnaAdminControlTable, mscVrPpSnaPortCircuitS1MacIndex=mscVrPpSnaPortCircuitS1MacIndex, mscVrPpSnaPortOperStatusEntry=mscVrPpSnaPortOperStatusEntry, mscVrSnaCreates=mscVrSnaCreates, mscVrPpSnaPortAdminControlTable=mscVrPpSnaPortAdminControlTable, snaCapabilitiesCA=snaCapabilitiesCA, mscVrPpSnaPortStateEntry=mscVrPpSnaPortStateEntry, mscVrPpSnaPortOperStatusTable=mscVrPpSnaPortOperStatusTable)
