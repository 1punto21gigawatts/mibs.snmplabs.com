#
# PySNMP MIB module MICROSENS-CWDM8-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICROSENS-CWDM8-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, iso, TimeTicks, MibIdentifier, enterprises, IpAddress, ObjectIdentity, Counter32, Counter64, ModuleIdentity, NotificationType, Unsigned32, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "iso", "TimeTicks", "MibIdentifier", "enterprises", "IpAddress", "ObjectIdentity", "Counter32", "Counter64", "ModuleIdentity", "NotificationType", "Unsigned32", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
microsens = MibIdentifier((1, 3, 6, 1, 4, 1, 3181))
cwdm = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 6))
eightChannelCwdm = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 6, 4))
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTable.setDescription('This table describes the device-status of the CWDM-system.')
deviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "deviceId"))
if mibBuilder.loadTexts: deviceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTableEntry.setDescription('An entry in the port table.')
deviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceId.setStatus('mandatory')
if mibBuilder.loadTexts: deviceId.setDescription('This entry describes the device id.')
deviceArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceArtNo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceArtNo.setDescription('This entry describes the article number of the device.')
deviceSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerNo.setStatus('mandatory')
if mibBuilder.loadTexts: deviceSerNo.setDescription('This entry describes the serial number of the device.')
deviceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDesc.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDesc.setDescription('This entry provides a detailed description of the device.')
deviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTemperature.setDescription('This entry describes the temperature of the device in degree centigrade.')
deviceTempAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTempAlarmThreshold.setDescription('This entry describes the current temperature-alarm threshold value of the device in degree centigrade.')
deviceTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTempAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTempAlarm.setDescription('This entry describes if a temperature-alarm condition has occurred or not.')
deviceTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTempShutdown.setDescription('This entry describes if a temperature-shutdown condition has occurred or not.')
deviceTrPowerFailureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, -255))).clone(namedValues=NamedValues(("no-alarm", 0), ("alarm-channel-1-4", 1), ("alarm-channel-5-8", 2), ("alarm-channel-1-8", 3), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTrPowerFailureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTrPowerFailureAlarm.setDescription('This entry describes if a transceiver-board power-supply-alarm condition has occurred or not.')
deviceMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMinorAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: deviceMinorAlarm.setDescription('This entry describes if a minor-alarm condition has occurred or not.')
deviceMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMajorAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: deviceMajorAlarm.setDescription('This entry describes if a major-alarm condition has occurred or not.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription('This table describes the port-status of the CWDM-system.')
portTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "portId"))
if mibBuilder.loadTexts: portTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portTableEntry.setDescription('An entry in the port table.')
portId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portId.setStatus('mandatory')
if mibBuilder.loadTexts: portId.setDescription('This entry describes the port id. ')
portChannelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: portChannelEnabled.setDescription("This entry describes the channel's status. A value of 1 indicates that the channel is enabled, a value of 0 indicates that the channel is not enabled.")
portLinkThroughLocalLine = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkThroughLocalLine.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkThroughLocalLine.setDescription('This entry describes the local-line link-through-status of the port.')
portLinkThroughLineLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkThroughLineLocal.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkThroughLineLocal.setDescription('This entry describes the line-local link-through-status of the port.')
portLocalModuleInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalModuleInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: portLocalModuleInstalled.setDescription('This entry describes if a local transceiver module is installed or not.')
portLineModuleInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLineModuleInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: portLineModuleInstalled.setDescription('This entry describes if a line transceiver module is installed or not.')
portLocalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalLink.setStatus('mandatory')
if mibBuilder.loadTexts: portLocalLink.setDescription("This entry describes the port's local link status.")
portLineLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLineLink.setStatus('mandatory')
if mibBuilder.loadTexts: portLineLink.setDescription("This entry describes the port's line link status.")
portLocalTxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalTxFault.setStatus('mandatory')
if mibBuilder.loadTexts: portLocalTxFault.setDescription("This entry describes the port's local-tx-fault status.")
portLineTxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLineTxFault.setStatus('mandatory')
if mibBuilder.loadTexts: portLineTxFault.setDescription("This entry describes the port's line-tx-fault status.")
portLocalPowerFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalPowerFault.setStatus('mandatory')
if mibBuilder.loadTexts: portLocalPowerFault.setDescription("This entry describes the port's local-power-fault status.")
portLinePowerFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinePowerFault.setStatus('mandatory')
if mibBuilder.loadTexts: portLinePowerFault.setDescription("This entry describes the port's line-power-fault status.")
portRateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("reduced", 0), ("full", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateSelect.setStatus('mandatory')
if mibBuilder.loadTexts: portRateSelect.setDescription("This entry describes the port's local data rate. A value of 1 describes full data rate, a value of 0 describes reduced data rate.")
localModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3), )
if mibBuilder.loadTexts: localModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTable.setDescription('This table describes the local module status of the CWDM-system.')
localModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "localModuleId"))
if mibBuilder.loadTexts: localModuleTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTableEntry.setDescription('An entry in the local module table.')
localModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleId.setDescription('This entry describes the local module id. ')
localModuleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("style1-copper", 2), ("style2-copper", 3), ("bnc-tnc", 4), ("coaxial-headers", 5), ("fiberjack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalpigtail", 11), ("hssdc2", 32), ("copperpigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleConnector.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleConnector.setDescription('This entry describes the connector-type of the port.')
localModuleTrCodeSonet = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 16, 32, 64, 128, 256, 512))).clone(namedValues=NamedValues(("unknown", 0), ("oc3-multi-mode-short-reach", 1), ("oc3-single-mode-intermediate-reach", 2), ("oc3-single-mode-long-reach", 4), ("oc12-multi-mode-short-reach", 16), ("oc12-single-mode-intermediate-reach", 32), ("oc12-single-mode-long-reach", 64), ("oc48-short-reach", 128), ("oc48-intermediate-reach", 256), ("oc48-long-reach", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeSonet.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTrCodeSonet.setDescription('This entry describes the SONET compliance of the transceiver.')
localModuleTrCodeGigabit = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("unknown", 0), ("base-1000-sx", 1), ("base-1000-lx", 2), ("base-1000-cx", 4), ("base-1000-t", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeGigabit.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTrCodeGigabit.setDescription('This entry describes the Gigabit Ethernet compliance of the transceiver.')
localModuleTrCodeFbLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("unknown", 0), ("long-distance", 1), ("intermediate-distance", 2), ("short-distance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbLinkLength.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTrCodeFbLinkLength.setDescription('This entry describes the fibre channel link length of the transceiver.')
localModuleTrCodeFbTrTech = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("unknown", 0), ("longwave-laser-LL", 1), ("shortwave-laser-OFC", 2), ("shortwave-laser-no-OFC", 4), ("electrical-intra-enclosure", 8), ("electrical-inter-enclosure", 16), ("longwave-laser-LC", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbTrTech.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTrCodeFbTrTech.setDescription('This entry describes the fibre channel transmitter technology of the transceiver.')
localModuleTrCodeFbTrMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("unknown", 0), ("single-mode", 1), ("multi-mode-50", 4), ("multi-mode-62-5", 8), ("video-coax", 16), ("miniature-coax", 32), ("shielded-twisted-pair", 64), ("twin-axial-pair", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbTrMedia.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTrCodeFbTrMedia.setDescription('This entry describes the fibre channel transmission media of the transceiver.')
localModuleTrCodeFbSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16))).clone(namedValues=NamedValues(("unknown", 0), ("speed-100MBytes-per-sec", 1), ("speed-200MBytes-per-sec", 4), ("speed-400MBytes-per-sec", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleTrCodeFbSpeed.setDescription('This entry describes the fibre channel speed of the transceiver.')
localModuleBrNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleBrNominal.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleBrNominal.setDescription('This entry describes the nominal bit rate, specified in units of 100 Megabits per second.')
localModuleLength9km = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength9km.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleLength9km.setDescription('This entry describes the link length supported by the transceiver using single-mode fibers. The value is in units of kilometers. A value of 255 means that the transceiver supports a link length greater than 254 km. A value of zero means that the transceiver does not support single-mode fibers.')
localModuleLength9m = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength9m.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleLength9m.setDescription('This entry describes the link length supported by the transceiver using single-mode fibers. The value is in units of 100 meters. A value of 255 means that the transceiver supports a link length greater than 25.4 km. A value of zero means that the transceiver does not support single-mode fibers.')
localModuleLength50 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength50.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleLength50.setDescription('This entry describes the link length supported by the transceiver using 50 micron multi-mode mode fibers. The value is in units of 10 meters. A value of 255 means that the transceiver supports a link length greater than 2.54 km. A value of zero means that the transceiver does not support 50 micron multi-mode fibers.')
localModuleLength62 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength62.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleLength62.setDescription('This entry describes the link length supported by the transceiver using 62.5 micron multi-mode mode fibers. The value is in units of 10 meters. A value of 255 means that the transceiver supports a link length greater than 2.54 km. A value of zero means that the transceiver does not support 62.5 micron multi-mode fibers.')
localModuleLengthCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLengthCopper.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleLengthCopper.setDescription('This entry describes the link length supported by the transceiver using copper cables. The value is in units of 1 meter. A value of 255 means that the transceiver supports a link length greater than 254 m. A value of zero means that the transceiver does not support copper cables.')
localModuleVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleVendorSN.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleVendorSN.setDescription("This entry describes the vendor's serial number of the transceiver.")
localModuleDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: localModuleDateCode.setDescription("This entry describes the vendor's date code in the [yymmdd]-format.")
localModuleLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLaserCurrent.setStatus('optional')
if mibBuilder.loadTexts: localModuleLaserCurrent.setDescription("This entry describes the transmitter laser's bias current in milli ampere.")
localModuleTransmittedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTransmittedPower.setStatus('optional')
if mibBuilder.loadTexts: localModuleTransmittedPower.setDescription('This entry describes the transmitter optical output power in micro watt.')
localModuleReceivedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleReceivedPower.setStatus('optional')
if mibBuilder.loadTexts: localModuleReceivedPower.setDescription('This entry describes the transmitter optical received power in micro watt.')
localModuleLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLaserTemperature.setStatus('optional')
if mibBuilder.loadTexts: localModuleLaserTemperature.setDescription('This entry describes the laser temperature in degree centigrade.')
localModuleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleVoltage.setStatus('optional')
if mibBuilder.loadTexts: localModuleVoltage.setDescription('This entry describes the transceiver supply voltage in mV.')
lineModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4), )
if mibBuilder.loadTexts: lineModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTable.setDescription('This table describes the line module status of the CWDM-system.')
lineModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "lineModuleId"))
if mibBuilder.loadTexts: lineModuleTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTableEntry.setDescription('An entry in the line module table.')
lineModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleId.setDescription('This entry describes the line module id. ')
lineModuleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("style1-copper", 2), ("style2-copper", 3), ("bnc-tnc", 4), ("coaxial-headers", 5), ("fiberjack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalpigtail", 11), ("hssdc2", 32), ("copperpigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleConnector.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleConnector.setDescription('This entry describes the connector-type of the port.')
lineModuleTrCodeSonet = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 16, 32, 64, 128, 256, 512))).clone(namedValues=NamedValues(("unknown", 0), ("oc3-multi-mode-short-reach", 1), ("oc3-single-mode-intermediate-reach", 2), ("oc3-single-mode-long-reach", 4), ("oc12-multi-mode-short-reach", 16), ("oc12-single-mode-intermediate-reach", 32), ("oc12-single-mode-long-reach", 64), ("oc48-short-reach", 128), ("oc48-intermediate-reach", 256), ("oc48-long-reach", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeSonet.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTrCodeSonet.setDescription('This entry describes the SONET compliance of the transceiver.')
lineModuleTrCodeGigabit = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("unknown", 0), ("base-1000-SX", 1), ("base-1000-LX", 2), ("base-1000-CX", 4), ("base-1000-T", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeGigabit.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTrCodeGigabit.setDescription('This entry describes the Gigabit Ethernet compliance of the transceiver.')
lineModuleTrCodeFbLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("unknown", 0), ("long-distance", 1), ("intermediate-distance", 2), ("short-distance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbLinkLength.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTrCodeFbLinkLength.setDescription('This entry describes the fibre channel link length of the transceiver.')
lineModuleTrCodeFbTrTech = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("unknown", 0), ("longwave-laser-LL", 1), ("shortwave-laser-OFC", 2), ("shortwave-laser-no-OFC", 4), ("electrical-intra-enclosure", 8), ("electrical-inter-enclosure", 16), ("longwave-laser-LC", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbTrTech.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTrCodeFbTrTech.setDescription('This entry describes the fibre channel transmitter technology of the transceiver.')
lineModuleTrCodeFbTrMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("unknown", 0), ("single-mode", 1), ("multi-mode-50", 4), ("multi-mode-62-5", 8), ("video-coax", 16), ("miniature-coax", 32), ("shielded-twisted-pair", 64), ("twin-axial-pair", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbTrMedia.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTrCodeFbTrMedia.setDescription('This entry describes the fibre channel transmission media of the transceiver.')
lineModuleTrCodeFbSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16))).clone(namedValues=NamedValues(("unknown", 0), ("speed-100MBytes-per-sec", 1), ("speed-200MBytes-per-sec", 4), ("speed-400MBytes-per-sec", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTrCodeFbSpeed.setDescription('This entry describes the fibre channel speed of the transceiver.')
lineModuleBrNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleBrNominal.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleBrNominal.setDescription('This entry describes the nominal bit rate, specified in units of 100 Megabits per second.')
lineModuleLength9km = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength9km.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLength9km.setDescription('This entry describes the link length supported by the transceiver using single-mode fibers. The value is in units of kilometers. A value of 255 means that the transceiver supports a link length greater than 254 km. A value of zero means that the transceiver does not support single-mode fibers.')
lineModuleLength9m = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength9m.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLength9m.setDescription('This entry describes the link length supported by the transceiver using single-mode fibers. The value is in units of 100 meters. A value of 255 means that the transceiver supports a link length greater than 25.4 km. A value of zero means that the transceiver does not support single-mode fibers.')
lineModuleLength50 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength50.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLength50.setDescription('This entry describes the link length supported by the transceiver using 50 micron multi-mode mode fibers. The value is in units of 10 meters. A value of 255 means that the transceiver supports a link length greater than 2.54 km. A value of zero means that the transceiver does not support 50 micron multi-mode fibers.')
lineModuleLength62 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength62.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLength62.setDescription('This entry describes the link length supported by the transceiver using 62.5 micron multi-mode mode fibers. The value is in units of 10 meters. A value of 255 means that the transceiver supports a link length greater than 2.54 km. A value of zero means that the transceiver does not support 62.5 micron multi-mode fibers.')
lineModuleLengthCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLengthCopper.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLengthCopper.setDescription('This entry describes the link length supported by the transceiver using copper cables. The value is in units of 1 meter. A value of 255 means that the transceiver supports a link length greater than 254 m. A value of zero means that the transceiver does not support copper cables.')
lineModuleVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleVendorSN.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleVendorSN.setDescription("This entry describes the vendor's serial number of the transceiver.")
lineModuleDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleDateCode.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleDateCode.setDescription("This entry describes the vendor's date code in the [yymmdd]-format.")
lineModuleLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLaserCurrent.setDescription("This entry describes the transmitter laser's bias current in milli ampere.")
lineModuleTransmittedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTransmittedPower.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleTransmittedPower.setDescription('This entry describes the transmitter optical output power in micro watt.')
lineModuleReceivedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleReceivedPower.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleReceivedPower.setDescription('This entry describes the transmitter optical received power in micro watt.')
lineModuleLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLaserTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleLaserTemperature.setDescription('This entry describes the laser temperature in degree centigrade.')
lineModuleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: lineModuleVoltage.setDescription('This entry describes the transceiver supply voltage in mV.')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerTable.setDescription('This table describes the power-supply-status of the CWDM-system.')
powerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "powerId"))
if mibBuilder.loadTexts: powerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerTableEntry.setDescription('An entry in the power-supply table.')
powerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerId.setStatus('mandatory')
if mibBuilder.loadTexts: powerId.setDescription('This entry describes the power-supply module id. ')
powerArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerArtNo.setStatus('mandatory')
if mibBuilder.loadTexts: powerArtNo.setDescription('This entry describes the article number of the power-supply module.')
powerSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSerNo.setStatus('mandatory')
if mibBuilder.loadTexts: powerSerNo.setDescription('This entry describes the serial number of the power-supply module.')
powerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDesc.setStatus('mandatory')
if mibBuilder.loadTexts: powerDesc.setDescription('This entry provides a detailed description of the power-supply module.')
powerTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: powerTemperature.setDescription('This entry describes the temperature of the power-supply module.')
powerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-active", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerStatus.setDescription('This entry describes the operational status of the power-supply module.')
powerSuppliedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSuppliedPower.setStatus('mandatory')
if mibBuilder.loadTexts: powerSuppliedPower.setDescription('This entry describes the power output of the power-supply module in watt.')
powerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerLoad.setStatus('mandatory')
if mibBuilder.loadTexts: powerLoad.setDescription('This entry describes the load level of the power-supply module in percent.')
powerFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-active", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerFanStatus.setDescription('This entry describes the fan status of the power-supply module.')
lineIfTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6), )
if mibBuilder.loadTexts: lineIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: lineIfTable.setDescription('This table describes the line-interface status of the CWDM-system.')
lineIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "lineIfId"))
if mibBuilder.loadTexts: lineIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lineIfTableEntry.setDescription('An entry in the line-interface table.')
lineIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfId.setStatus('mandatory')
if mibBuilder.loadTexts: lineIfId.setDescription('This entry describes the power-supply module id. ')
lineIfArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfArtNo.setStatus('mandatory')
if mibBuilder.loadTexts: lineIfArtNo.setDescription('This entry describes the article number of the power-supply module.')
lineIfSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfSerNo.setStatus('mandatory')
if mibBuilder.loadTexts: lineIfSerNo.setDescription('This entry describes the serial number of the power-supply module.')
lineIfWestLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfWestLinkStatus.setStatus('optional')
if mibBuilder.loadTexts: lineIfWestLinkStatus.setDescription('This entry describes the west-link status of the interface module.')
lineIfEastLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfEastLinkStatus.setStatus('optional')
if mibBuilder.loadTexts: lineIfEastLinkStatus.setDescription('This entry describes the east-link status of the interface module.')
lineIfWestChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-in-use", 0), ("in-use", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfWestChannelStatus.setStatus('optional')
if mibBuilder.loadTexts: lineIfWestChannelStatus.setDescription('This entry describes the west-channel status of the interface module.')
lineIfEastChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-in-use", 0), ("in-use", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfEastChannelStatus.setStatus('optional')
if mibBuilder.loadTexts: lineIfEastChannelStatus.setDescription('This entry describes the east-channel status of the interface module.')
lineIfWestLinkRcvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfWestLinkRcvPower.setStatus('optional')
if mibBuilder.loadTexts: lineIfWestLinkRcvPower.setDescription('This entry describes the west-link receive power of the interface module in micro watts.')
lineIfEastLinkRcvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfEastLinkRcvPower.setStatus('optional')
if mibBuilder.loadTexts: lineIfEastLinkRcvPower.setDescription('This entry describes the east-link receive power of the interface module in micro watts.')
passiveTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7), )
if mibBuilder.loadTexts: passiveTable.setStatus('mandatory')
if mibBuilder.loadTexts: passiveTable.setDescription('This table describes the passive optical module status of the CWDM-system.')
passiveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "passiveId"))
if mibBuilder.loadTexts: passiveTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: passiveTableEntry.setDescription('An entry in the passive table.')
passiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveId.setStatus('mandatory')
if mibBuilder.loadTexts: passiveId.setDescription('This entry describes the passive optical module id. ')
passiveArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveArtNo.setStatus('mandatory')
if mibBuilder.loadTexts: passiveArtNo.setDescription('This entry describes the article number of the power-supply module.')
passiveSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveSerNo.setStatus('mandatory')
if mibBuilder.loadTexts: passiveSerNo.setDescription('This entry describes the serial number of the power-supply module.')
channelCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 6, 4, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelCount.setStatus('mandatory')
if mibBuilder.loadTexts: channelCount.setDescription('This entry describes the number of channels in the CWDM-system.')
minorAlarmRelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,0)).setObjects(("MICROSENS-CWDM8-MIB", "deviceMinorAlarm"))
if mibBuilder.loadTexts: minorAlarmRelayTrap.setDescription('Trap indicating a change in the minor alarm relay status.')
majorAlarmRelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,1)).setObjects(("MICROSENS-CWDM8-MIB", "deviceMajorAlarm"))
if mibBuilder.loadTexts: majorAlarmRelayTrap.setDescription('Trap indicating a change in the major alarm relay status.')
devicePowerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,2)).setObjects(("MICROSENS-CWDM8-MIB", "powerId"), ("MICROSENS-CWDM8-MIB", "powerStatus"))
if mibBuilder.loadTexts: devicePowerSupplyTrap.setDescription('Trap indicating a change in the power-supply redundancy status.')
deviceTemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,3)).setObjects(("MICROSENS-CWDM8-MIB", "deviceTemperature"), ("MICROSENS-CWDM8-MIB", "deviceTempAlarm"))
if mibBuilder.loadTexts: deviceTemperatureAlarmTrap.setDescription('Trap indicating a device temperature alarm event has occurred.')
deviceTemperatureShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,4)).setObjects(("MICROSENS-CWDM8-MIB", "deviceTemperature"), ("MICROSENS-CWDM8-MIB", "deviceTempShutdown"))
if mibBuilder.loadTexts: deviceTemperatureShutdownTrap.setDescription('Trap indicating a device temperature shutdown event has occurred.')
fanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,5)).setObjects(("MICROSENS-CWDM8-MIB", "powerId"), ("MICROSENS-CWDM8-MIB", "powerFanStatus"))
if mibBuilder.loadTexts: fanAlarmTrap.setDescription('Trap indicating a fan alarm in a power supply module.')
portLocalLinkChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,6)).setObjects(("MICROSENS-CWDM8-MIB", "portId"), ("MICROSENS-CWDM8-MIB", "portLocalLink"))
if mibBuilder.loadTexts: portLocalLinkChangeTrap.setDescription("Trap indicating that a port's local link status has changed. The port is identified by the portId variable.")
portLineLinkChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,7)).setObjects(("MICROSENS-CWDM8-MIB", "portId"), ("MICROSENS-CWDM8-MIB", "portLineLink"))
if mibBuilder.loadTexts: portLineLinkChangeTrap.setDescription("Trap indicating that a port's line link status has changed. The port is identified by the portId variable.")
mibBuilder.exportSymbols("MICROSENS-CWDM8-MIB", deviceTable=deviceTable, lineIfEastChannelStatus=lineIfEastChannelStatus, majorAlarmRelayTrap=majorAlarmRelayTrap, localModuleLength9km=localModuleLength9km, powerTable=powerTable, portLocalLink=portLocalLink, lineModuleTransmittedPower=lineModuleTransmittedPower, localModuleId=localModuleId, localModuleLength62=localModuleLength62, portTableEntry=portTableEntry, localModuleTrCodeFbLinkLength=localModuleTrCodeFbLinkLength, localModuleLength50=localModuleLength50, minorAlarmRelayTrap=minorAlarmRelayTrap, powerSuppliedPower=powerSuppliedPower, portLocalPowerFault=portLocalPowerFault, portRateSelect=portRateSelect, lineModuleLength9km=lineModuleLength9km, deviceTempShutdown=deviceTempShutdown, portLinePowerFault=portLinePowerFault, lineModuleTrCodeFbTrMedia=lineModuleTrCodeFbTrMedia, lineModuleLength9m=lineModuleLength9m, deviceTemperatureShutdownTrap=deviceTemperatureShutdownTrap, lineModuleLengthCopper=lineModuleLengthCopper, localModuleVendorSN=localModuleVendorSN, powerDesc=powerDesc, lineModuleTableEntry=lineModuleTableEntry, lineModuleLaserCurrent=lineModuleLaserCurrent, localModuleTrCodeFbTrTech=localModuleTrCodeFbTrTech, powerStatus=powerStatus, passiveId=passiveId, powerLoad=powerLoad, portLocalTxFault=portLocalTxFault, lineIfEastLinkStatus=lineIfEastLinkStatus, lineIfWestChannelStatus=lineIfWestChannelStatus, lineModuleBrNominal=lineModuleBrNominal, passiveSerNo=passiveSerNo, lineModuleDateCode=lineModuleDateCode, portLineLink=portLineLink, powerId=powerId, lineModuleConnector=lineModuleConnector, localModuleLengthCopper=localModuleLengthCopper, lineModuleTrCodeFbTrTech=lineModuleTrCodeFbTrTech, lineModuleLaserTemperature=lineModuleLaserTemperature, passiveArtNo=passiveArtNo, lineIfId=lineIfId, localModuleTrCodeFbSpeed=localModuleTrCodeFbSpeed, portLocalLinkChangeTrap=portLocalLinkChangeTrap, deviceId=deviceId, portLinkThroughLocalLine=portLinkThroughLocalLine, portLineTxFault=portLineTxFault, deviceMajorAlarm=deviceMajorAlarm, lineModuleTrCodeFbSpeed=lineModuleTrCodeFbSpeed, cwdm=cwdm, portLineModuleInstalled=portLineModuleInstalled, localModuleTransmittedPower=localModuleTransmittedPower, eightChannelCwdm=eightChannelCwdm, portLocalModuleInstalled=portLocalModuleInstalled, devicePowerSupplyTrap=devicePowerSupplyTrap, deviceMinorAlarm=deviceMinorAlarm, portChannelEnabled=portChannelEnabled, lineIfTable=lineIfTable, lineIfTableEntry=lineIfTableEntry, lineIfWestLinkRcvPower=lineIfWestLinkRcvPower, lineModuleTrCodeGigabit=lineModuleTrCodeGigabit, portLineLinkChangeTrap=portLineLinkChangeTrap, lineModuleReceivedPower=lineModuleReceivedPower, deviceTrPowerFailureAlarm=deviceTrPowerFailureAlarm, powerTemperature=powerTemperature, powerFanStatus=powerFanStatus, deviceSerNo=deviceSerNo, fanAlarmTrap=fanAlarmTrap, channelCount=channelCount, lineIfEastLinkRcvPower=lineIfEastLinkRcvPower, lineModuleId=lineModuleId, deviceTemperature=deviceTemperature, lineModuleTrCodeFbLinkLength=lineModuleTrCodeFbLinkLength, deviceTemperatureAlarmTrap=deviceTemperatureAlarmTrap, deviceTempAlarm=deviceTempAlarm, portLinkThroughLineLocal=portLinkThroughLineLocal, deviceDesc=deviceDesc, localModuleReceivedPower=localModuleReceivedPower, deviceArtNo=deviceArtNo, lineIfArtNo=lineIfArtNo, passiveTable=passiveTable, lineIfSerNo=lineIfSerNo, powerArtNo=powerArtNo, lineModuleVoltage=lineModuleVoltage, lineModuleLength62=lineModuleLength62, localModuleTrCodeSonet=localModuleTrCodeSonet, localModuleConnector=localModuleConnector, localModuleTable=localModuleTable, localModuleLength9m=localModuleLength9m, lineIfWestLinkStatus=lineIfWestLinkStatus, deviceTableEntry=deviceTableEntry, localModuleTableEntry=localModuleTableEntry, localModuleTrCodeFbTrMedia=localModuleTrCodeFbTrMedia, lineModuleVendorSN=lineModuleVendorSN, microsens=microsens, powerTableEntry=powerTableEntry, portTable=portTable, lineModuleLength50=lineModuleLength50, deviceTempAlarmThreshold=deviceTempAlarmThreshold, localModuleLaserTemperature=localModuleLaserTemperature, localModuleLaserCurrent=localModuleLaserCurrent, localModuleVoltage=localModuleVoltage, lineModuleTrCodeSonet=lineModuleTrCodeSonet, powerSerNo=powerSerNo, portId=portId, lineModuleTable=lineModuleTable, localModuleTrCodeGigabit=localModuleTrCodeGigabit, localModuleBrNominal=localModuleBrNominal, localModuleDateCode=localModuleDateCode, passiveTableEntry=passiveTableEntry)
