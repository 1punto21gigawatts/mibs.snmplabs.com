#
# PySNMP MIB module FRF16-MFR-MIB-EXP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRF16-MFR-MIB-EXP
# Produced by pysmi-0.3.4 at Wed May  1 13:16:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, Integer32, MibIdentifier, experimental, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, iso, Gauge32, TimeTicks, Bits, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Integer32", "MibIdentifier", "experimental", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "iso", "Gauge32", "TimeTicks", "Bits", "Unsigned32", "Counter64")
TestAndIncr, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "TextualConvention", "RowStatus", "DisplayString")
mfrMib = ModuleIdentity((1, 3, 6, 1, 3, 555))
mfrMib.setRevisions(('1999-10-01 14:40', '1999-10-15 13:00', '1999-10-21 20:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mfrMib.setRevisionsDescriptions(('Initial version submitted to the Frame Relay Forum October meeting in Huntsville as FRFTC/99-151.', 'Updated after review at the October meeting in Huntsville: o removed log table o removed several columns from each table o combined configuration, status and error tables into one table each for bundles and bundle links o added new objects for - maximum number of bundles - maximum fragment size - size of sequence number o added notifications o added conformance information', 'Updated after comments from Michael Allen and Ken Rehben. o corrected options for sequence number length o changed frf16Mfr prefix to mfr o created a sub-group for scalars o created an entry in the bundleTable for maximum links per bundle o changed indices to not-accessible o changed DisplayString to SnmpAdminString o updated some of the object descriptions o added a -EXP to the name of the MIB o added some DEFVAL and REFERENCE clauses',))
if mibBuilder.loadTexts: mfrMib.setLastUpdated('9910191300Z')
if mibBuilder.loadTexts: mfrMib.setOrganization('IETF Frame Relay Service MIB (frnetmib) Working Group')
if mibBuilder.loadTexts: mfrMib.setContactInfo('Prayson Pate/Bob Lynch Postal: Larscom P. O. Box 14993 RTP, NC, USA 27560 Phone: +1 919 991-9000 EMail: pate@larscom.com/blynch@larscom.com Kenneth Rehbehn Postal: Visual Networks 2092 Gaither Road Rockville, MD USA 20850 Tel: +1 301 296 2325 Fax: +1 301 296 2302 E-mail: krehbehn@visualnetworks.com')
if mibBuilder.loadTexts: mfrMib.setDescription('This is the MIB used to control and monitor the multilink frame relay (MFR) function described in FRF.16. This was originally submitted to the Frame Relay Forum as contribution FRFTC 99-151 and then updated as FRFTC 99-193.')
class BundleLinkState(TextualConvention, Integer32):
    reference = 'FRF.16 Annex A'
    description = 'The possible states for a bundle link, as defined in Annex A of FRF.16.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("bundleLinkStateAddSent", 1), ("bundleLinkStateAddRx", 2), ("bundleLinkStateAddAckRx", 3), ("bundleLinkStateUp", 4), ("bundleLinkStateIdlePending", 5), ("bundleLinkStateIdle", 6), ("bundleLinkStateDown", 7), ("bundleLinkStateDownIdle", 8))

mfrMibObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1))
mfrMibTraps = MibIdentifier((1, 3, 6, 1, 3, 555, 2))
mfrMibConformance = MibIdentifier((1, 3, 6, 1, 3, 555, 3))
mfrMibScalarObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1, 1))
mfrMibBundleObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1, 2))
mfrMibBundleLinkObjects = MibIdentifier((1, 3, 6, 1, 3, 555, 1, 3))
mfrMibTrapsPrefix = MibIdentifier((1, 3, 6, 1, 3, 555, 2, 0))
mfrMibGroups = MibIdentifier((1, 3, 6, 1, 3, 555, 3, 1))
mfrMibCompliances = MibIdentifier((1, 3, 6, 1, 3, 555, 3, 2))
bundleMaxNumBundles = MibScalar((1, 3, 6, 1, 3, 555, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleMaxNumBundles.setStatus('current')
if mibBuilder.loadTexts: bundleMaxNumBundles.setDescription('This object is used to inform the manager of the maximum number of bundles supported by this device.')
bundleNextIndex = MibScalar((1, 3, 6, 1, 3, 555, 1, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bundleNextIndex.setReference('RFC 2494')
if mibBuilder.loadTexts: bundleNextIndex.setStatus('current')
if mibBuilder.loadTexts: bundleNextIndex.setDescription('This object is used to assist the manager in selecting a value for bundleIndex during row creation in the bundleTable. It can also be used to avoid race conditions with multiple managers trying to create rows in the table (see RFC 2494 [RFC2494] for one such alogrithm).')
bundleTable = MibTable((1, 3, 6, 1, 3, 555, 1, 2, 3), )
if mibBuilder.loadTexts: bundleTable.setStatus('current')
if mibBuilder.loadTexts: bundleTable.setDescription('The bundle configuration and status table. There is a one-to-one correspondence between a bundle and an interface represented in the ifTable. The manager can use the following entries in the ifTable: ifAdminStatus - the bundle admin status ifOperStatus - the bundle operational status ifSpeed - the current bandwidth of the bundle ifInErrors - packet (not fragment) errors etc.')
bundleEntry = MibTableRow((1, 3, 6, 1, 3, 555, 1, 2, 3, 1), ).setIndexNames((0, "FRF16-MFR-MIB-EXP", "bundleIndex"))
if mibBuilder.loadTexts: bundleEntry.setStatus('current')
if mibBuilder.loadTexts: bundleEntry.setDescription('An entry in the bundle table.')
bundleIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bundleIndex.setStatus('current')
if mibBuilder.loadTexts: bundleIndex.setDescription('The index into the table. While this corresponds to an entry in the ifTable, the value of bundleIndex need not match that of the ifIndex in the ifTable. A manager can use bundleNextIndex to select a unique bundleIndex for creating a new row.')
bundleIfIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleIfIndex.setStatus('current')
if mibBuilder.loadTexts: bundleIfIndex.setDescription('The value should match an entry in the interface table. The ifType should be set to frame-relay. For example: if the value of bundleIfIndex is 10, then a corresponding entry should be present in the ifTable with an index of 10.')
bundleRowStatus = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleRowStatus.setReference('RFC 1903')
if mibBuilder.loadTexts: bundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: bundleRowStatus.setDescription('The bundleRowStatus object allows create, change, and delete operations on bundle entries.')
bundleNearEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleNearEndName.setReference('FRF.16 section 3.4.1')
if mibBuilder.loadTexts: bundleNearEndName.setStatus('current')
if mibBuilder.loadTexts: bundleNearEndName.setDescription('The configured name of the bundle.')
bundleFragmentation = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleFragmentation.setStatus('current')
if mibBuilder.loadTexts: bundleFragmentation.setDescription('Controls whether the bundle performs/accepts fragmentation and re-assembly.')
bundleMaxFragSize = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 6), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleMaxFragSize.setStatus('current')
if mibBuilder.loadTexts: bundleMaxFragSize.setDescription('The maximum fragment size supported. Note that this is only valid if bundleFragmentation is set to enable(1). Otherwise, it should be reported as -1.')
bundleTimerHello = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleTimerHello.setReference('FRF.16 section 4.3.8.1')
if mibBuilder.loadTexts: bundleTimerHello.setStatus('current')
if mibBuilder.loadTexts: bundleTimerHello.setDescription('The configured MFR Hello Timer value (in seconds). The default value is 10.')
bundleTimerAck = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleTimerAck.setReference('FRF.16 section 4.3.8.2')
if mibBuilder.loadTexts: bundleTimerAck.setStatus('current')
if mibBuilder.loadTexts: bundleTimerAck.setDescription('The configured MFR T_ACK value (in seconds). The default value is 4.')
bundleCountMaxRetry = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleCountMaxRetry.setReference('FRF.16 section 4.3.8.3')
if mibBuilder.loadTexts: bundleCountMaxRetry.setStatus('current')
if mibBuilder.loadTexts: bundleCountMaxRetry.setDescription('The MFR N_MAX_RETRY value. The default value is 2.')
bundleActivationClass = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bundleActivationClassA", 1), ("bundleActivationClassB", 2), ("bundleActivationClassC", 3), ("bundleActivationClassD", 4))).clone('bundleActivationClassA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleActivationClass.setReference('FRF.16 section 4.2.2.1')
if mibBuilder.loadTexts: bundleActivationClass.setStatus('current')
if mibBuilder.loadTexts: bundleActivationClass.setDescription('Controls the conditions under which the bundle is activated.')
bundleThreshold = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleThreshold.setReference('FRF.16 section 4.2.2.1')
if mibBuilder.loadTexts: bundleThreshold.setStatus('current')
if mibBuilder.loadTexts: bundleThreshold.setDescription("Specifies the number of links that must be in operational 'up' state before the bundle will transition to an operational up/active state. If the number of operational 'up' links falls below this value, then the bundle will transition to an inactive state. Note - this is only valid when bundleActivationClass is set to bundleActivationClassC or to bundleActivationClassD.")
bundleMaxDiffDelay = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 12), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleMaxDiffDelay.setStatus('current')
if mibBuilder.loadTexts: bundleMaxDiffDelay.setDescription('The maximum delay difference between the bundle links. The unit of measure is milliseconds.')
bundleSeqNumSize = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seqNumSize12bit", 1), ("seqNumSize24bit", 2))).clone('seqNumSize12bit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleSeqNumSize.setReference('FRFTC/99-194')
if mibBuilder.loadTexts: bundleSeqNumSize.setStatus('current')
if mibBuilder.loadTexts: bundleSeqNumSize.setDescription('Controls whether the standard FRF.12 12-bit sequence number is used or the optional 24-bit sequence number.')
bundleMaxBundleLinks = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleMaxBundleLinks.setStatus('current')
if mibBuilder.loadTexts: bundleMaxBundleLinks.setDescription('The maximum number of bundle links supported for this bundle.')
bundleFarEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleFarEndName.setReference('FRF.16 section 3.4.1')
if mibBuilder.loadTexts: bundleFarEndName.setStatus('current')
if mibBuilder.loadTexts: bundleFarEndName.setDescription('Name of the bundle received from the far end.')
bundleResequencingErrors = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleResequencingErrors.setStatus('current')
if mibBuilder.loadTexts: bundleResequencingErrors.setDescription('A count of the number of resequncing errors. Each event may correspond to multiple lost frames. Example: Say sequence number 56, 59 and 60 is received for DLCI 100. It is decided by some means that sequence 57 and 58 is lost. This counter should then be incremented by ONE, even though two frames were lost.')
bundleIfIndexMappingTable = MibTable((1, 3, 6, 1, 3, 555, 1, 2, 4), )
if mibBuilder.loadTexts: bundleIfIndexMappingTable.setStatus('current')
if mibBuilder.loadTexts: bundleIfIndexMappingTable.setDescription('A table mapping the values of bundleIfIndex to the bundleIndex. This is required in order to find the bundleIndex given an ifIndex. The mapping of bundleIndex is provided by the bundleIfIndex entry in the bundleTable.')
bundleIfIndexMappingEntry = MibTableRow((1, 3, 6, 1, 3, 555, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bundleIfIndexMappingEntry.setStatus('current')
if mibBuilder.loadTexts: bundleIfIndexMappingEntry.setDescription('Each row describes one ifIndex to bundleIndex mapping.')
bundleIfIndexMappingIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 2, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleIfIndexMappingIndex.setStatus('current')
if mibBuilder.loadTexts: bundleIfIndexMappingIndex.setDescription('The bundleIndex of the given ifIndex.')
bundleLinkTable = MibTable((1, 3, 6, 1, 3, 555, 1, 3, 1), )
if mibBuilder.loadTexts: bundleLinkTable.setStatus('current')
if mibBuilder.loadTexts: bundleLinkTable.setDescription('The bundle link configuration and status table. There is a one-to-one correspondence between a bundle link and a physical interface represented in the ifTable. The ifIndex of the physical interface is used to index the bundle link table, and to create rows. The manager can use the following entries in the ifTable: ifAdminStatus - the bundle link admin status ifOperStatus - the bundle link operationl status ifSpeed - the bandwidth of the bundle link ifInErrors - frame/fragment errors etc.')
bundleLinkEntry = MibTableRow((1, 3, 6, 1, 3, 555, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bundleLinkEntry.setStatus('current')
if mibBuilder.loadTexts: bundleLinkEntry.setDescription('An entry in the bundle link table.')
bundleLinkRowStatus = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: bundleLinkRowStatus.setDescription('The bundleLinkRowStatus object allows create, change, and delete operations on bundleLink entries.')
bundleLinkConfigBundleIndex = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkConfigBundleIndex.setStatus('current')
if mibBuilder.loadTexts: bundleLinkConfigBundleIndex.setDescription('The bundleLinkConfigBundleIndex object allows the manager to control the bundle to which the bundle link is assigned. If no value were in this field, then the bundle would remain in NOT_READY rowStatus and be unable to go to active. With an appropriate bundleIndex in this field, then we could put the bundleLink row in NOT_IN_SERVICE or ACTIVE rowStatus.')
bundleLinkNearEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bundleLinkNearEndName.setStatus('current')
if mibBuilder.loadTexts: bundleLinkNearEndName.setDescription('The configured bundle link name that is sent to the far end.')
bundleLinkState = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 4), BundleLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkState.setReference('FRF.16 Annex A')
if mibBuilder.loadTexts: bundleLinkState.setStatus('current')
if mibBuilder.loadTexts: bundleLinkState.setDescription('Current bundle link state as defined by the MFR protocol described in Annex A of FRF.16.')
bundleLinkFarEndName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFarEndName.setReference('FRF.16 section 3.4.2')
if mibBuilder.loadTexts: bundleLinkFarEndName.setStatus('current')
if mibBuilder.loadTexts: bundleLinkFarEndName.setDescription('Name of bundle link received from far end.')
bundleLinkFarEndBundleName = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFarEndBundleName.setReference('FRF.16 section 3.4.1')
if mibBuilder.loadTexts: bundleLinkFarEndBundleName.setStatus('current')
if mibBuilder.loadTexts: bundleLinkFarEndBundleName.setDescription('Name of far end bundle for this link received from far end.')
bundleLinkDelay = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkDelay.setReference('FRF.16 section 3.4.4')
if mibBuilder.loadTexts: bundleLinkDelay.setStatus('current')
if mibBuilder.loadTexts: bundleLinkDelay.setDescription('Current round-trip delay for this bundle link.')
bundleLinkFramesControlTx = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFramesControlTx.setStatus('current')
if mibBuilder.loadTexts: bundleLinkFramesControlTx.setDescription('Number of MFR control frames sent.')
bundleLinkFramesControlRx = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFramesControlRx.setStatus('current')
if mibBuilder.loadTexts: bundleLinkFramesControlRx.setDescription('Number of valid MFR control frames received.')
bundleLinkFramesControlInvalid = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkFramesControlInvalid.setStatus('current')
if mibBuilder.loadTexts: bundleLinkFramesControlInvalid.setDescription('The number of invalid MFR control frames received.')
bundleLinkTimerExpiredCount = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkTimerExpiredCount.setStatus('current')
if mibBuilder.loadTexts: bundleLinkTimerExpiredCount.setDescription('Number of times the T_HELLO or T_ACK timers expired.')
bundleLinkLoopbackSuspected = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkLoopbackSuspected.setReference('FRF.16 section 4.3.7')
if mibBuilder.loadTexts: bundleLinkLoopbackSuspected.setStatus('current')
if mibBuilder.loadTexts: bundleLinkLoopbackSuspected.setDescription('The number of times a loopback has been suspected (based upon the use of magic numbers).')
bundleLinkUnexpectedSequence = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkUnexpectedSequence.setReference('FRF.16 section 4.2.3.2')
if mibBuilder.loadTexts: bundleLinkUnexpectedSequence.setStatus('current')
if mibBuilder.loadTexts: bundleLinkUnexpectedSequence.setDescription('The number of data MFR frames discarded because the sequence number of the frame for a DLCI was less than (delayed frame) or equal to (duplicate frame) the one expected for that DLCI. Example: Say frames with sequence numbers 56, 58, 59 is received for DLCI 100. While waiting for sequence number 57 another frame with sequence number 58 arrives. Frame 58 is discarded and the counter is incremented.')
bundleLinkMismatch = MibTableColumn((1, 3, 6, 1, 3, 555, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bundleLinkMismatch.setReference('FRF.16 section 4.3.2.4')
if mibBuilder.loadTexts: bundleLinkMismatch.setStatus('current')
if mibBuilder.loadTexts: bundleLinkMismatch.setDescription('The number of times that the unit has detected a mismatch between the near end and far end bundles.')
mfrMibTrapBundleLinkMismatch = NotificationType((1, 3, 6, 1, 3, 555, 2, 0, 1)).setObjects(("FRF16-MFR-MIB-EXP", "bundleNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndBundleName"))
if mibBuilder.loadTexts: mfrMibTrapBundleLinkMismatch.setStatus('current')
if mibBuilder.loadTexts: mfrMibTrapBundleLinkMismatch.setDescription('This trap indicates that a bundle link mismatch has been detected. The following objects are reported: - bundleNearEndName: configured name of near end bundle - bundleFarEndName: previously reported name of far end bundle - bundleLinkNearEndName: configured name of near end bundle - bundleLinkFarEndName: reported name of far end bundle - bundleLinkFarEndBundleName: currently reported name of far end bundle Note: that the configured items may have been configured automatically. Note: The bundleLinkMismatch counter is incremented when the trap is sent.')
if mibBuilder.loadTexts: mfrMibTrapBundleLinkMismatch.setReference('FRF.16 section 4.3.2.4')
mfrMibCompliance = ModuleCompliance((1, 3, 6, 1, 3, 555, 3, 2, 1)).setObjects(("FRF16-MFR-MIB-EXP", "mfrMibBundleGroup"), ("FRF16-MFR-MIB-EXP", "mfrMibBundleLinkGroup"), ("FRF16-MFR-MIB-EXP", "mfrMibTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibCompliance = mfrMibCompliance.setStatus('current')
if mibBuilder.loadTexts: mfrMibCompliance.setDescription('The compliance statement for equipment that implements the FRF16 MIB. All of the current groups are mandatory, but a number of objects may be read-only if the implementation does not allow configuration.')
mfrMibBundleGroup = ObjectGroup((1, 3, 6, 1, 3, 555, 3, 1, 1)).setObjects(("FRF16-MFR-MIB-EXP", "bundleMaxNumBundles"), ("FRF16-MFR-MIB-EXP", "bundleIfIndex"), ("FRF16-MFR-MIB-EXP", "bundleRowStatus"), ("FRF16-MFR-MIB-EXP", "bundleNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleFragmentation"), ("FRF16-MFR-MIB-EXP", "bundleMaxFragSize"), ("FRF16-MFR-MIB-EXP", "bundleTimerHello"), ("FRF16-MFR-MIB-EXP", "bundleTimerAck"), ("FRF16-MFR-MIB-EXP", "bundleCountMaxRetry"), ("FRF16-MFR-MIB-EXP", "bundleActivationClass"), ("FRF16-MFR-MIB-EXP", "bundleThreshold"), ("FRF16-MFR-MIB-EXP", "bundleMaxDiffDelay"), ("FRF16-MFR-MIB-EXP", "bundleMaxBundleLinks"), ("FRF16-MFR-MIB-EXP", "bundleSeqNumSize"), ("FRF16-MFR-MIB-EXP", "bundleFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleResequencingErrors"), ("FRF16-MFR-MIB-EXP", "bundleIfIndexMappingIndex"), ("FRF16-MFR-MIB-EXP", "bundleNextIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibBundleGroup = mfrMibBundleGroup.setStatus('current')
if mibBuilder.loadTexts: mfrMibBundleGroup.setDescription('Group of objects describing bundles.')
mfrMibBundleLinkGroup = ObjectGroup((1, 3, 6, 1, 3, 555, 3, 1, 2)).setObjects(("FRF16-MFR-MIB-EXP", "bundleLinkRowStatus"), ("FRF16-MFR-MIB-EXP", "bundleLinkConfigBundleIndex"), ("FRF16-MFR-MIB-EXP", "bundleLinkNearEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkState"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndName"), ("FRF16-MFR-MIB-EXP", "bundleLinkFarEndBundleName"), ("FRF16-MFR-MIB-EXP", "bundleLinkDelay"), ("FRF16-MFR-MIB-EXP", "bundleLinkFramesControlTx"), ("FRF16-MFR-MIB-EXP", "bundleLinkFramesControlRx"), ("FRF16-MFR-MIB-EXP", "bundleLinkFramesControlInvalid"), ("FRF16-MFR-MIB-EXP", "bundleLinkTimerExpiredCount"), ("FRF16-MFR-MIB-EXP", "bundleLinkLoopbackSuspected"), ("FRF16-MFR-MIB-EXP", "bundleLinkUnexpectedSequence"), ("FRF16-MFR-MIB-EXP", "bundleLinkMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibBundleLinkGroup = mfrMibBundleLinkGroup.setStatus('current')
if mibBuilder.loadTexts: mfrMibBundleLinkGroup.setDescription('Group of objects describing bundle links.')
mfrMibTrapGroup = NotificationGroup((1, 3, 6, 1, 3, 555, 3, 1, 3)).setObjects(("FRF16-MFR-MIB-EXP", "mfrMibTrapBundleLinkMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mfrMibTrapGroup = mfrMibTrapGroup.setStatus('current')
if mibBuilder.loadTexts: mfrMibTrapGroup.setDescription('Group of objects describing notifications (traps).')
mibBuilder.exportSymbols("FRF16-MFR-MIB-EXP", bundleLinkDelay=bundleLinkDelay, bundleNearEndName=bundleNearEndName, bundleFarEndName=bundleFarEndName, bundleIndex=bundleIndex, bundleThreshold=bundleThreshold, mfrMibBundleLinkObjects=mfrMibBundleLinkObjects, mfrMibCompliance=mfrMibCompliance, bundleResequencingErrors=bundleResequencingErrors, bundleLinkFramesControlRx=bundleLinkFramesControlRx, bundleTimerHello=bundleTimerHello, bundleIfIndex=bundleIfIndex, mfrMibTrapGroup=mfrMibTrapGroup, bundleLinkFarEndBundleName=bundleLinkFarEndBundleName, bundleMaxNumBundles=bundleMaxNumBundles, bundleIfIndexMappingIndex=bundleIfIndexMappingIndex, BundleLinkState=BundleLinkState, bundleMaxDiffDelay=bundleMaxDiffDelay, bundleLinkLoopbackSuspected=bundleLinkLoopbackSuspected, bundleCountMaxRetry=bundleCountMaxRetry, mfrMibCompliances=mfrMibCompliances, mfrMibGroups=mfrMibGroups, bundleLinkNearEndName=bundleLinkNearEndName, bundleFragmentation=bundleFragmentation, bundleLinkFramesControlInvalid=bundleLinkFramesControlInvalid, bundleMaxFragSize=bundleMaxFragSize, bundleSeqNumSize=bundleSeqNumSize, bundleIfIndexMappingEntry=bundleIfIndexMappingEntry, bundleRowStatus=bundleRowStatus, mfrMibScalarObjects=mfrMibScalarObjects, bundleLinkState=bundleLinkState, mfrMibBundleGroup=mfrMibBundleGroup, mfrMibConformance=mfrMibConformance, mfrMib=mfrMib, bundleEntry=bundleEntry, mfrMibTrapsPrefix=mfrMibTrapsPrefix, bundleLinkUnexpectedSequence=bundleLinkUnexpectedSequence, bundleLinkMismatch=bundleLinkMismatch, bundleNextIndex=bundleNextIndex, bundleLinkFramesControlTx=bundleLinkFramesControlTx, PYSNMP_MODULE_ID=mfrMib, bundleLinkFarEndName=bundleLinkFarEndName, bundleTable=bundleTable, bundleLinkRowStatus=bundleLinkRowStatus, bundleLinkTable=bundleLinkTable, mfrMibTraps=mfrMibTraps, bundleLinkTimerExpiredCount=bundleLinkTimerExpiredCount, bundleActivationClass=bundleActivationClass, bundleIfIndexMappingTable=bundleIfIndexMappingTable, bundleLinkConfigBundleIndex=bundleLinkConfigBundleIndex, mfrMibTrapBundleLinkMismatch=mfrMibTrapBundleLinkMismatch, mfrMibBundleLinkGroup=mfrMibBundleLinkGroup, bundleTimerAck=bundleTimerAck, mfrMibBundleObjects=mfrMibBundleObjects, bundleLinkEntry=bundleLinkEntry, bundleMaxBundleLinks=bundleMaxBundleLinks, mfrMibObjects=mfrMibObjects)
