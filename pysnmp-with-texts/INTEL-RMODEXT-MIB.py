#
# PySNMP MIB module INTEL-RMODEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-RMODEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
modulesext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "modulesext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, Unsigned32, IpAddress, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Counter64, Gauge32, TimeTicks, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Unsigned32", "IpAddress", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Counter64", "Gauge32", "TimeTicks", "MibIdentifier", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rmodext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 13, 1))
rmodextGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1))
rmodextGModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1), )
if mibBuilder.loadTexts: rmodextGModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleTable.setDescription('General extensions that applies to all hardware revisions.')
rmodextGModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1), ).setIndexNames((0, "INTEL-RMODEXT-MIB", "rmodextGModuleChassisIndex"), (0, "INTEL-RMODEXT-MIB", "rmodextGModuleIndex"))
if mibBuilder.loadTexts: rmodextGModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleEntry.setDescription('')
rmodextGModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleChassisIndex.setDescription('Chassis number in stack that contains the module. Same as moduleChassisIndex in INTEL-GEN-MIB.')
rmodextGModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleIndex.setDescription('Module number in the chassis. Same as moduleIndex in INTEL-GEN-MIB.')
rmodextGModuleHwEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleHwEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleHwEncryption.setDescription('Encryption support disabled: Hardware does not support encryption enabled: Hardware does not support encryption')
rmodextGModuleSwEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleSwEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleSwEncryption.setDescription('Encryption support disabled: Software does not support encryption enabled: Software does not support encryption')
rmodextGModuleSwState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testing", 1), ("noError", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleSwState.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleSwState.setDescription('Router status after cold reset')
rmodextGModuleRamFree = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleRamFree.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleRamFree.setDescription('Number of kilobytes free in RAM')
rmodextGModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleSwVersion.setDescription('Router software version number')
rmodextGModulePbaNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModulePbaNo.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModulePbaNo.setDescription('PBA number')
rmodextGModuleBootSectionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleBootSectionVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleBootSectionVersion.setDescription('Boot PROM version number')
rmodextGModuleMulti1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleMulti1.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleMulti1.setDescription('Multiple information object 1: - MaxMpLinks (2 bytes) - CompressionType (1 byte): sw(2), hw(3) - Max Compression Rate in kbps (4 bytes) (all values are returned in big-endian format)')
rmodextGModuleMulti2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 13, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmodextGModuleMulti2.setStatus('mandatory')
if mibBuilder.loadTexts: rmodextGModuleMulti2.setDescription('Multiple information object 2: Currently empty')
mibBuilder.exportSymbols("INTEL-RMODEXT-MIB", rmodextGModuleEntry=rmodextGModuleEntry, rmodext=rmodext, rmodextGModuleSwState=rmodextGModuleSwState, rmodextGModuleBootSectionVersion=rmodextGModuleBootSectionVersion, rmodextGModuleMulti2=rmodextGModuleMulti2, rmodextGeneral=rmodextGeneral, rmodextGModuleIndex=rmodextGModuleIndex, rmodextGModuleHwEncryption=rmodextGModuleHwEncryption, rmodextGModuleSwEncryption=rmodextGModuleSwEncryption, rmodextGModuleSwVersion=rmodextGModuleSwVersion, rmodextGModulePbaNo=rmodextGModulePbaNo, rmodextGModuleTable=rmodextGModuleTable, rmodextGModuleRamFree=rmodextGModuleRamFree, rmodextGModuleChassisIndex=rmodextGModuleChassisIndex, rmodextGModuleMulti1=rmodextGModuleMulti1)
