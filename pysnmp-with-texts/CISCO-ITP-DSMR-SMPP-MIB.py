#
# PySNMP MIB module CISCO-ITP-DSMR-SMPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-DSMR-SMPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
cgspInstNetwork, cgspEventSequenceNumber, cgspCLLICode = mibBuilder.importSymbols("CISCO-ITP-GSP-MIB", "cgspInstNetwork", "cgspEventSequenceNumber", "cgspCLLICode")
CmlrName, = mibBuilder.importSymbols("CISCO-ITP-MLR-MIB", "CmlrName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, ObjectIdentity, Unsigned32, NotificationType, Counter32, iso, ModuleIdentity, TimeTicks, MibIdentifier, IpAddress, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "ObjectIdentity", "Unsigned32", "NotificationType", "Counter32", "iso", "ModuleIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "Counter64", "Bits")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
ciscoItpDsmrSmppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 1301))
ciscoItpDsmrSmppMIB.setRevisions(('2005-05-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoItpDsmrSmppMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoItpDsmrSmppMIB.setLastUpdated('200505180000Z')
if mibBuilder.loadTexts: ciscoItpDsmrSmppMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoItpDsmrSmppMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoItpDsmrSmppMIB.setDescription('The MIB for providing information about Distributed Short Message Routing delivery using Short Message Peer-to-Peer protocol. Acronyms and Terms DSMR Distributed Short Message Routing SMPP Short Message Peer-to-Peer (protocol) SMS Short Message Service UCP Universal Computer Protocol. WRR Weighted Round Robin. A variation of the round robin algorithm that uses server weights to allow uneven distribution of traffic among a set of available servers. ********************************************')
ciscoItpDsmrSmppMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 1301, 0))
ciscoItpDsmrSmppMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1))
ciscoItpDsmrSmppMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 1301, 2))
class CdsmrSmppInactivityTimer(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values used to define Inactivity timer used by Short Message Peer-to-Peer session. The value of zero is reserved to indicate that an object has not been set to value and that the default value is to be used.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 9000000), )
class CdsmrSmppResponseTimer(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values used to define response timer ,in milliseconds, used by Short Message Peer-to-Peer session. The value of zero is reserved to indicate that an object has not been set to value and that the default value is to be used.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 10000), )
class CdsmrSmppSendWindow(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values used to define send window used by Short Message Peer-to-Peer session. The value of zero is reserved to indicate that an object has not been set to value and that the default value is to be used.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 100), )
class CdsmrSmppSessionInitTimer(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values used to define session initiation timer used to create Short Message Peer-to-Peer session. The value of zero is reserved to indicate that an object has not been set to value and that the default value is to be used.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(500, 120000), )
class CdsmrSmppBindType(TextualConvention, Integer32):
    description = "List of possible bind types. 'none' : Bind type not specified. 'any' : Allow receipt of any SMPP bind type, send transceiver binds 'receiver' : Receive or send SMPP receiver binds only 'transceiver': Receive or send SMPP transceiver binds only 'transmitter': Receive or send SMPP transmitter binds only"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("any", 2), ("receiver", 3), ("transceiver", 4), ("transmitter", 5))

class CdsmrSmppKeepaliveTimer(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values used to define keep alive timer used by Short Message Peer-to-Peer session. The value of zero is reserved to indicate that an object has not been set to value and that the default value is to be used.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(500, 120000), )
cdsmrSmppScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 0))
cdsmrSmppSessionStateNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 0, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsmrSmppSessionStateNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionStateNotifEnable.setDescription("A control to enable or disable notifications as follows: 'true' Indicates that the ciscoItpDsmrSmppSessionState notification should be generated.. 'false' Indicates that ciscoItpDsmrSmppSessionState notification generation is disabled.")
cdsmrSmppProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2), )
if mibBuilder.loadTexts: cdsmrSmppProfileTable.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileTable.setDescription('A table that is used to monitor specific information used to configure short message peer-to-peer protocol profile. Entries are added to this table via cdsmrSmppProfileRowStatus in accordance with the RowStatus convention.')
cdsmrSmppProfileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileName"))
if mibBuilder.loadTexts: cdsmrSmppProfileTableEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileTableEntry.setDescription('Each entry defines parameter that can be used to default values for sessions.')
cdsmrSmppProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 1), CmlrName())
if mibBuilder.loadTexts: cdsmrSmppProfileName.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileName.setDescription('A name used to define a collection of parameters for short message peer-to-peer protocol. A name that is used to identify a unique SMPP profile.')
cdsmrSmppProfileBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 2), CdsmrSmppBindType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileBindType.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileBindType.setDescription('Specifies allowed types of binds for session.')
cdsmrSmppProfileInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 3), CdsmrSmppInactivityTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileInactivityTimer.setDescription('This object defines the allowed values used to define inactivity timer used by Short Message Peer-to-Peer session. Indicates the maximum time lapse allowed time between transactions before destination is considered inactive. The value for this object should be two to three times the value specified for the cdsmrSmppProfileKeepaliveTimer object.')
cdsmrSmppProfileKeepaliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 4), CdsmrSmppKeepaliveTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileKeepaliveTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileKeepaliveTimer.setDescription('This object defines the allowed values used to define keep alive timer used by Short Message Peer-to-Peer session.')
cdsmrSmppProfileCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileCallingParty.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileCallingParty.setDescription('This object is used to indicate presence of optional calling party option.')
cdsmrSmppProfileResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 6), CdsmrSmppResponseTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileResponseTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileResponseTimer.setDescription('This object defines the allowed values used to define response timer used by Short Message Peer-to-Peer session. This is the amount of time to wait before retransmitting packet.')
cdsmrSmppProfileSendWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 7), CdsmrSmppSendWindow()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileSendWindow.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileSendWindow.setDescription('This object defines the allowed size of send window used by Short Message Peer-to-Peer session window.')
cdsmrSmppProfileSessionInitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 8), CdsmrSmppSessionInitTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileSessionInitTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileSessionInitTimer.setDescription('This object defines the allowed values used to define session initiation timer used to create Short Message Peer-to-Peer session. This specifies the maximum amount of time to wait for the session Bind to be received.')
cdsmrSmppProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppProfileRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cdsmrSmppProfileTable following the RowStatus textual convention.')
cdsmrSmppSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3), )
if mibBuilder.loadTexts: cdsmrSmppSessionTable.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionTable.setDescription('A table that is used to collection information on short message peer-to-peer protocol sessions. Entries are added to this table via cdsmrSmppSessionRowStatus in accordance with the RowStatus convention.')
cdsmrSmppSessionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionLocalPortNumber"))
if mibBuilder.loadTexts: cdsmrSmppSessionTableEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionTableEntry.setDescription('Each entry defines parameter and state information on short message peer-to-peer protocol sessions.')
cdsmrSmppSessionLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3, 1, 1), InetPortNumber())
if mibBuilder.loadTexts: cdsmrSmppSessionLocalPortNumber.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionLocalPortNumber.setDescription('Local port number used to establish short message peer-to-peer protocol.')
cdsmrSmppSessionLocalIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppSessionLocalIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionLocalIpAddrType.setDescription('This object contains the type of the local IP address used to create an session.')
cdsmrSmppSessionLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppSessionLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionLocalIpAddress.setDescription('This object contains the local IP address used to create the session with the partner of this session.')
cdsmrSmppSessionDynamicDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppSessionDynamicDest.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionDynamicDest.setDescription("Indicates whether dynamic destinations are allowed as follows. 'true' - dynamic destination are allowed. 'false' - dynamic destinations are not allowed.")
cdsmrSmppSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppSessionRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cdsmrSmppSessionTable following the RowStatus textual convention.')
cdsmrSmppDestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4), )
if mibBuilder.loadTexts: cdsmrSmppDestTable.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestTable.setDescription('A table that is used to define a collection of information on short message destinations. One or more destination is defined under each session using peer to peer protocol. Entries are added to this table via cdsmrSmppDestRowStatus in accordance with the RowStatus convention.')
cdsmrSmppDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionLocalPortNumber"), (0, "CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestName"))
if mibBuilder.loadTexts: cdsmrSmppDestTableEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestTableEntry.setDescription('Each entry defines parameter and state information on short message peer-to-peer protocol destinations.')
cdsmrSmppDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 1), CmlrName())
if mibBuilder.loadTexts: cdsmrSmppDestName.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestName.setDescription('A name used to uniquely identify a destination using short message peer-to-peer protocol.')
cdsmrSmppDestBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 2), CdsmrSmppBindType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestBindType.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestBindType.setDescription('Specifies allowed types of binds for session.')
cdsmrSmppDestInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 3), CdsmrSmppInactivityTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestInactivityTimer.setDescription('This object defines the allowed values used to define inactivity timer used by Short Message Peer-to-Peer session. Indicates the maximum time lapse allowed between transactions before destination is considered inactive.')
cdsmrSmppDestKeepaliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 4), CdsmrSmppKeepaliveTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestKeepaliveTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestKeepaliveTimer.setDescription('This object defines the allowed values used to define keep alive timer used by Short Message Peer-to-Peer session.')
cdsmrSmppDestCallingParty = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 5), TruthValue()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestCallingParty.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestCallingParty.setDescription('This textual convention is used to indicate presence of optional calling party option.')
cdsmrSmppDestResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 6), CdsmrSmppResponseTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestResponseTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestResponseTimer.setDescription('This object defines the allowed values used to define response timer used by Short Message Peer-to-Peer session. This is the amount of time to wait before retransmitting packet.')
cdsmrSmppDestSendWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 7), CdsmrSmppSendWindow()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestSendWindow.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestSendWindow.setDescription('This object defines the allowed size of send window used by Short Message Peer-to-Peer session.')
cdsmrSmppDestSessionInitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 8), CdsmrSmppSessionInitTimer()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestSessionInitTimer.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestSessionInitTimer.setDescription('This object defines the allowed values used to define session initiation timer used to create Short Message Peer-to-Peer session. This specifies the maximum amount of time to wait for the session Bind to be received.')
cdsmrSmppDestRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestRemotePortNumber.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestRemotePortNumber.setDescription('Remote port number used to establish short message peer-to-peer protocol session.')
cdsmrSmppDestRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 10), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestRemoteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestRemoteIpAddrType.setDescription('This object contains the type of the remote IP address used to create an session.')
cdsmrSmppDestRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestRemoteIpAddress.setDescription('This object contains the remote IP address used to create the session.')
cdsmrSmppDestProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 12), CmlrName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestProfileName.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestProfileName.setDescription('Specifies Profile from cdsmrSmppProfileTable table to define common default parameters for destination.')
cdsmrSmppDestState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("open", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmrSmppDestState.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestState.setDescription("Current state of destination. 'active' - Destination is available. 'inactive' - Destination is unvailable. 'open' - Device is listening on port for destination to establish connection.")
cdsmrSmppDestSentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 14), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmrSmppDestSentRequests.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestSentRequests.setDescription('Number of SMS requests sent to destination.')
cdsmrSmppDestRcvdRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 15), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmrSmppDestRcvdRequests.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestRcvdRequests.setDescription('Number of SMS requests received from destination.')
cdsmrSmppDestSentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 16), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmrSmppDestSentResponses.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestSentResponses.setDescription('Number of SMS responses sent to destination.')
cdsmrSmppDestRcvdResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 17), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmrSmppDestRcvdResponses.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestRcvdResponses.setDescription('Number of SMS responses received from destination.')
cdsmrSmppDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 1301, 1, 4, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmrSmppDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: cdsmrSmppDestRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cdsmrSmppDestTable following the RowStatus textual convention.')
ciscoItpDsmrSmppSessionState = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 1301, 0, 1)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestState"))
if mibBuilder.loadTexts: ciscoItpDsmrSmppSessionState.setStatus('current')
if mibBuilder.loadTexts: ciscoItpDsmrSmppSessionState.setDescription('This notification is generated whenever UCP destination changes states. This notification provides information on the availablity of the destination to receive and process packets using the SMPP protocol.')
ciscoItpDsmrSmppMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 1301, 2, 1))
ciscoItpDsmrSmppMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 1301, 2, 2))
ciscoItpDsmrSmppMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 1301, 2, 1, 1)).setObjects(("CISCO-ITP-DSMR-SMPP-MIB", "ciscoItpDsmrSmppGroup"), ("CISCO-ITP-DSMR-SMPP-MIB", "ciscoItpDsmrSmppNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpDsmrSmppMIBCompliance = ciscoItpDsmrSmppMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoItpDsmrSmppMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco CISCO-ITP-MLR-MIB')
ciscoItpDsmrSmppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 1301, 2, 2, 1)).setObjects(("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionStateNotifEnable"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileBindType"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileInactivityTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileKeepaliveTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileCallingParty"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileResponseTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileSendWindow"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileSessionInitTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppProfileRowStatus"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionLocalIpAddrType"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionLocalIpAddress"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionDynamicDest"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppSessionRowStatus"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestBindType"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestInactivityTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestKeepaliveTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestCallingParty"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestResponseTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestSendWindow"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestRemotePortNumber"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestSessionInitTimer"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestRemoteIpAddrType"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestRemoteIpAddress"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestProfileName"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestState"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestSentRequests"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestRcvdRequests"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestSentResponses"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestRcvdResponses"), ("CISCO-ITP-DSMR-SMPP-MIB", "cdsmrSmppDestRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpDsmrSmppGroup = ciscoItpDsmrSmppGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpDsmrSmppGroup.setDescription('A collection of objects providing information used to configure Short Message Peer-to-Peer Protocol.')
ciscoItpDsmrSmppNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 1301, 2, 2, 2)).setObjects(("CISCO-ITP-DSMR-SMPP-MIB", "ciscoItpDsmrSmppSessionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpDsmrSmppNotificationsGroup = ciscoItpDsmrSmppNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpDsmrSmppNotificationsGroup.setDescription('DSMR Short Message Peer-to-Peer Protocol notification objects.')
mibBuilder.exportSymbols("CISCO-ITP-DSMR-SMPP-MIB", cdsmrSmppDestSendWindow=cdsmrSmppDestSendWindow, cdsmrSmppProfileInactivityTimer=cdsmrSmppProfileInactivityTimer, cdsmrSmppSessionRowStatus=cdsmrSmppSessionRowStatus, CdsmrSmppKeepaliveTimer=CdsmrSmppKeepaliveTimer, cdsmrSmppSessionLocalIpAddrType=cdsmrSmppSessionLocalIpAddrType, CdsmrSmppInactivityTimer=CdsmrSmppInactivityTimer, cdsmrSmppProfileResponseTimer=cdsmrSmppProfileResponseTimer, cdsmrSmppDestCallingParty=cdsmrSmppDestCallingParty, CdsmrSmppBindType=CdsmrSmppBindType, cdsmrSmppDestTableEntry=cdsmrSmppDestTableEntry, cdsmrSmppDestResponseTimer=cdsmrSmppDestResponseTimer, cdsmrSmppSessionLocalIpAddress=cdsmrSmppSessionLocalIpAddress, ciscoItpDsmrSmppMIB=ciscoItpDsmrSmppMIB, cdsmrSmppProfileCallingParty=cdsmrSmppProfileCallingParty, ciscoItpDsmrSmppGroup=ciscoItpDsmrSmppGroup, cdsmrSmppProfileSessionInitTimer=cdsmrSmppProfileSessionInitTimer, cdsmrSmppDestSessionInitTimer=cdsmrSmppDestSessionInitTimer, ciscoItpDsmrSmppNotificationsGroup=ciscoItpDsmrSmppNotificationsGroup, cdsmrSmppProfileTable=cdsmrSmppProfileTable, cdsmrSmppDestBindType=cdsmrSmppDestBindType, cdsmrSmppDestRemoteIpAddrType=cdsmrSmppDestRemoteIpAddrType, ciscoItpDsmrSmppMIBCompliances=ciscoItpDsmrSmppMIBCompliances, cdsmrSmppDestKeepaliveTimer=cdsmrSmppDestKeepaliveTimer, cdsmrSmppDestRemoteIpAddress=cdsmrSmppDestRemoteIpAddress, cdsmrSmppDestSentRequests=cdsmrSmppDestSentRequests, cdsmrSmppDestRowStatus=cdsmrSmppDestRowStatus, cdsmrSmppDestProfileName=cdsmrSmppDestProfileName, ciscoItpDsmrSmppMIBCompliance=ciscoItpDsmrSmppMIBCompliance, cdsmrSmppSessionStateNotifEnable=cdsmrSmppSessionStateNotifEnable, ciscoItpDsmrSmppSessionState=ciscoItpDsmrSmppSessionState, cdsmrSmppProfileBindType=cdsmrSmppProfileBindType, cdsmrSmppProfileSendWindow=cdsmrSmppProfileSendWindow, cdsmrSmppDestRcvdResponses=cdsmrSmppDestRcvdResponses, cdsmrSmppDestSentResponses=cdsmrSmppDestSentResponses, CdsmrSmppSessionInitTimer=CdsmrSmppSessionInitTimer, CdsmrSmppResponseTimer=CdsmrSmppResponseTimer, cdsmrSmppProfileRowStatus=cdsmrSmppProfileRowStatus, cdsmrSmppDestRemotePortNumber=cdsmrSmppDestRemotePortNumber, cdsmrSmppProfileKeepaliveTimer=cdsmrSmppProfileKeepaliveTimer, cdsmrSmppDestRcvdRequests=cdsmrSmppDestRcvdRequests, ciscoItpDsmrSmppMIBGroups=ciscoItpDsmrSmppMIBGroups, cdsmrSmppSessionDynamicDest=cdsmrSmppSessionDynamicDest, cdsmrSmppDestTable=cdsmrSmppDestTable, cdsmrSmppProfileName=cdsmrSmppProfileName, cdsmrSmppScalars=cdsmrSmppScalars, ciscoItpDsmrSmppMIBObjects=ciscoItpDsmrSmppMIBObjects, CdsmrSmppSendWindow=CdsmrSmppSendWindow, cdsmrSmppDestState=cdsmrSmppDestState, cdsmrSmppDestName=cdsmrSmppDestName, PYSNMP_MODULE_ID=ciscoItpDsmrSmppMIB, cdsmrSmppSessionTable=cdsmrSmppSessionTable, cdsmrSmppProfileTableEntry=cdsmrSmppProfileTableEntry, cdsmrSmppSessionTableEntry=cdsmrSmppSessionTableEntry, cdsmrSmppDestInactivityTimer=cdsmrSmppDestInactivityTimer, ciscoItpDsmrSmppMIBConform=ciscoItpDsmrSmppMIBConform, ciscoItpDsmrSmppMIBNotifs=ciscoItpDsmrSmppMIBNotifs, cdsmrSmppSessionLocalPortNumber=cdsmrSmppSessionLocalPortNumber)
