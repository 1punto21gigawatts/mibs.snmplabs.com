#
# PySNMP MIB module CISCO-IPSEC-FLOW-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSEC-FLOW-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
cmgwIndex, = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, ModuleIdentity, Integer32, NotificationType, IpAddress, MibIdentifier, Counter32, Bits, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "ModuleIdentity", "Integer32", "NotificationType", "IpAddress", "MibIdentifier", "Counter32", "Bits", "iso", "Gauge32")
TimeStamp, TextualConvention, TimeInterval, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TimeInterval", "DisplayString", "TruthValue")
ciscoIpSecFlowMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 171))
ciscoIpSecFlowMonitorMIB.setRevisions(('2007-10-24 00:00', '2004-10-12 00:00', '2000-10-13 18:00', '2000-08-17 12:59',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setRevisionsDescriptions(('In the description of cipSecTunHistHcInDecompOctets, cipSecTunHcInOctets has been changed to cipSecTunHistHcInOctets. In the description of cipSecTunHistOutUncompOctets, cipSecTunOutOctets has been changed to cipSecTunHistOutOctets. In the description of cipSecTunHistHcOutUncompOctets, cipSecTunHcOutOctets has been changed to cipSecTunHistHcOutOctets. In the description of cipSecTunHistInDecompOctets, cipSecTunInOctets has been changed to cipSecTunHistInOctets.', 'Added two table for media gateway stats information: cikePhase1GWStatsTable (phase-1 IKE) cipSecPhase2GWStatsTable (phase-2 IPsec)', 'Changed cipSecSpiValue to Unsigned32. Changed Protocol ranges to start at 0 instead of 1. Removed comment(s) incorrectly indicating this MIB was CiscoExperiment.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setLastUpdated('200710240000Z')
if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setOrganization('Tivoli Systems and Cisco Systems')
if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setContactInfo('Tivoli Systems Research Triangle Park, NC Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ipsecurity@cisco.com')
if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setDescription('This is a MIB Module for monitoring the structures in IPSec-based Virtual Private Networks. The MIB has been designed to be adopted as an IETF standard. Hence Cisco-specific features of IPSec protocol are excluded from this MIB. Acronyms The following acronyms are used in this document: IPSec: Secure IP Protocol VPN: Virtual Private Network ISAKMP: Internet Security Association and Key Exchange Protocol IKE: Internet Key Exchange Protocol SA: Security Association MM: Main Mode - the process of setting up a Phase 1 SA to secure the exchanges required to setup Phase 2 SAs QM: Quick Mode - the process of setting up Phase 2 Security Associations using a Phase 1 SA. Overview of IPsec MIB The MIB contains six major groups of objects which are used to manage the IPSec Protocol. These groups include a Levels Group, a Phase-1 Group, a Phase-2 Group, a History Group, a Failure Group and a TRAP Control Group. The following table illustrates the structure of the IPSec MIB. The Phase 1 group models objects pertaining to IKE negotiations and tunnels. The Phase 2 group models objects pertaining to IPSec data tunnels. The History group is to aid applications that do trending analysis. The Failure group is to enable an operator to do troubleshooting and debugging of the VPN Router. Further, counters are supported to aid Intrusion Detection. In addition to the five major MIB Groups, there are a number of Notifications. The following table illustrates the name and description of the IPSec TRAPs. For a detailed discussion, please refer to the IETF draft draft-ietf-ipsec-flow-monitoring-mib-00.txt.')
class IPSIpAddress(TextualConvention, OctetString):
    description = 'An IP V4 or V6 Address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
class IkePeerType(TextualConvention, Integer32):
    description = 'The type of IPsec Phase-1 IKE peer identity. The IKE peer may be identified by: 1. an IP address, or 2. a host name.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipAddrPeer", 1), ("namePeer", 2))

class IkeNegoMode(TextualConvention, Integer32):
    description = 'The IPsec Phase-1 IKE negotiation mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("main", 1), ("aggressive", 2))

class IkeHashAlgo(TextualConvention, Integer32):
    description = 'The hash algorithm used in IPsec Phase-1 IKE negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("md5", 2), ("sha", 3))

class IkeAuthMethod(TextualConvention, Integer32):
    description = 'The authentication method used in IPsec Phase-1 IKE negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("preSharedKey", 2), ("rsaSig", 3), ("rsaEncrypt", 4), ("revPublicKey", 5))

class DiffHellmanGrp(TextualConvention, Integer32):
    description = 'The Diffie Hellman Group used in negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("dhGroup1", 2), ("dhGroup2", 3))

class KeyType(TextualConvention, Integer32):
    description = 'The type of key used by an IPsec Phase-2 Tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ike", 1), ("manual", 2))

class EncapMode(TextualConvention, Integer32):
    description = 'The encapsulation mode used by an IPsec Phase-2 Tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tunnel", 1), ("transport", 2))

class EncryptAlgo(TextualConvention, Integer32):
    description = 'The encryption algorithm used in negotiations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("des", 2), ("des3", 3))

class AuthAlgo(TextualConvention, Integer32):
    description = 'The authentication algorithm used by a security association of an IPsec Phase-2 Tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha", 3))

class CompAlgo(TextualConvention, Integer32):
    description = 'The compression algorithm used by a security association of an IPsec Phase-2 Tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("ldf", 2))

class EndPtType(TextualConvention, Integer32):
    description = 'The type of identity use to specify an IPsec End Point.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("singleIpAddr", 1), ("ipAddrRange", 2), ("ipSubnet", 3))

class TunnelStatus(TextualConvention, Integer32):
    description = 'The status of a Tunnel. Objects of this type may be used to bring the tunnel down by setting value of this object to destroy(2). Objects of this type cannot be used to create a Tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("destroy", 2))

class TrapStatus(TextualConvention, Integer32):
    description = 'The administrative status for sending a TRAP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

cipSecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1))
cipSecLevels = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 1))
cipSecPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2))
cipSecPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3))
cipSecHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4))
cipSecFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5))
cipSecTrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6))
cipSecMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecMibLevel.setStatus('current')
if mibBuilder.loadTexts: cipSecMibLevel.setDescription('The level of the IPsec MIB.')
cikeGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1))
cikeGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalActiveTunnels.setDescription('The number of currently active IPsec Phase-1 IKE Tunnels.')
cikeGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 2), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalPreviousTunnels.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalPreviousTunnels.setDescription('The total number of previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInOctets.setDescription('The total number of octets received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInPkts.setDescription('The total number of packets received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInDropPkts.setDescription('The total number of packets which were dropped during receive processing by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInNotifys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 6), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInNotifys.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInNotifys.setDescription('The total number of notifys received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 7), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInP2ExchgInvalids = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 8), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges which were received and found to be invalid by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 9), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges which were received and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 10), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association delete requests received by all currently and previously active and IPsec Phase-1 IKE Tunnels.')
cikeGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutOctets.setDescription('The total number of octets sent by all currently and previously active and IPsec Phase-1 IKE Tunnels.')
cikeGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutPkts.setDescription('The total number of packets sent by all currently and previously active and IPsec Phase-1 Tunnels.')
cikeGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutDropPkts.setDescription('The total number of packets which were dropped during send processing by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalOutNotifys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 14), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutNotifys.setDescription('The total number of notifys sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalOutP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 15), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges which were sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalOutP2ExchgInvalids = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 16), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges which were sent and found to be invalid by all currently and previously active IPsec Phase-1 Tunnels.')
cikeGlobalOutP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 17), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges which were sent and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalOutP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 18), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalOutP2SaDelRequests.setDescription('The total number of IPsec Phase-2 SA delete requests sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalInitTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 19), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInitTunnels.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInitTunnels.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were locally initiated.')
cikeGlobalInitTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 20), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInitTunnelFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalInitTunnelFails.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were locally initiated and failed to activate.')
cikeGlobalRespTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 21), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalRespTunnelFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalRespTunnelFails.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were remotely initiated and failed to activate.')
cikeGlobalSysCapFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 22), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalSysCapFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalSysCapFails.setDescription('The total number of system capacity failures which occurred during processing of all current and previously active IPsec Phase-1 IKE Tunnels.')
cikeGlobalAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalAuthFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalAuthFails.setDescription('The total number of authentications which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
cikeGlobalDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 24), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalDecryptFails.setDescription('The total number of decryptions which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
cikeGlobalHashValidFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalHashValidFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalHashValidFails.setDescription('The total number of hash validations which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
cikeGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 26), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalNoSaFails.setStatus('current')
if mibBuilder.loadTexts: cikeGlobalNoSaFails.setDescription('The total number of non-existent Security Association in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.')
cikePeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2), )
if mibBuilder.loadTexts: cikePeerTable.setStatus('current')
if mibBuilder.loadTexts: cikePeerTable.setDescription('The IPsec Phase-1 Internet Key Exchange Peer Table. There is one entry in this table for each IPsec Phase-1 IKE peer association which is currently associated with an active IPsec Phase-1 Tunnel. The IPsec Phase-1 IKE Tunnel associated with this IPsec Phase-1 IKE peer association may or may not be currently active.')
cikePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerIntIndex"))
if mibBuilder.loadTexts: cikePeerEntry.setStatus('current')
if mibBuilder.loadTexts: cikePeerEntry.setDescription('Each entry contains the attributes associated with an IPsec Phase-1 IKE peer association.')
cikePeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 1), IkePeerType())
if mibBuilder.loadTexts: cikePeerLocalType.setStatus('current')
if mibBuilder.loadTexts: cikePeerLocalType.setDescription('The type of local peer identity. The local peer may be identified by: 1. an IP address, or 2. a host name.')
cikePeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 2), DisplayString())
if mibBuilder.loadTexts: cikePeerLocalValue.setStatus('current')
if mibBuilder.loadTexts: cikePeerLocalValue.setDescription('The value of the local peer identity. If the local peer type is an IP Address, then this is the IP Address used to identify the local peer. If the local peer type is a host name, then this is the host name used to identify the local peer.')
cikePeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 3), IkePeerType())
if mibBuilder.loadTexts: cikePeerRemoteType.setStatus('current')
if mibBuilder.loadTexts: cikePeerRemoteType.setDescription('The type of remote peer identity. The remote peer may be identified by: 1. an IP address, or 2. a host name.')
cikePeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 4), DisplayString())
if mibBuilder.loadTexts: cikePeerRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cikePeerRemoteValue.setDescription('The value of the remote peer identity. If the remote peer type is an IP Address, then this is the IP Address used to identify the remote peer. If the remote peer type is a host name, then this is the host name used to identify the remote peer.')
cikePeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikePeerIntIndex.setStatus('current')
if mibBuilder.loadTexts: cikePeerIntIndex.setDescription('The internal index of the local-remote peer association. This internal index is used to uniquely identify multiple associations between the local and remote peer.')
cikePeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cikePeerLocalAddr.setDescription('The IP address of the local peer.')
cikePeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cikePeerRemoteAddr.setDescription('The IP address of the remote peer.')
cikePeerActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerActiveTime.setStatus('current')
if mibBuilder.loadTexts: cikePeerActiveTime.setDescription('The length of time that the peer association has existed in hundredths of a second.')
cikePeerActiveTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerActiveTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cikePeerActiveTunnelIndex.setDescription('The index of the active IPsec Phase-1 IKE Tunnel (cikeTunIndex in the cikeTunnelTable) for this peer association. If an IPsec Phase-1 IKE Tunnel is not currently active, then the value of this object will be zero.')
cikeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3), )
if mibBuilder.loadTexts: cikeTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cikeTunnelTable.setDescription('The IPsec Phase-1 Internet Key Exchange Tunnel Table. There is one entry in this table for each active IPsec Phase-1 IKE Tunnel.')
cikeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunIndex"))
if mibBuilder.loadTexts: cikeTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cikeTunnelEntry.setDescription('Each entry contains the attributes associated with an active IPsec Phase-1 IKE Tunnel.')
cikeTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikeTunIndex.setStatus('current')
if mibBuilder.loadTexts: cikeTunIndex.setDescription('The index of the IPsec Phase-1 IKE Tunnel Table. The value of the index is a number which begins at one and is incremented with each tunnel that is created. The value of this object will wrap at 2,147,483,647.')
cikeTunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 2), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalType.setStatus('current')
if mibBuilder.loadTexts: cikeTunLocalType.setDescription('The type of local peer identity. The local peer may be identified by: 1. an IP address, or 2. a host name.')
cikeTunLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalValue.setStatus('current')
if mibBuilder.loadTexts: cikeTunLocalValue.setDescription('The value of the local peer identity. If the local peer type is an IP Address, then this is the IP Address used to identify the local peer. If the local peer type is a host name, then this is the host name used to identify the local peer.')
cikeTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cikeTunLocalAddr.setDescription('The IP address of the local endpoint for the IPsec Phase-1 IKE Tunnel.')
cikeTunLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalName.setStatus('current')
if mibBuilder.loadTexts: cikeTunLocalName.setDescription('The DNS name of the local IP address for the IPsec Phase-1 IKE Tunnel. If the DNS name associated with the local tunnel endpoint is not known, then the value of this object will be a NULL string.')
cikeTunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 6), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteType.setStatus('current')
if mibBuilder.loadTexts: cikeTunRemoteType.setDescription('The type of remote peer identity. The remote peer may be identified by: 1. an IP address, or 2. a host name.')
cikeTunRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cikeTunRemoteValue.setDescription('The value of the remote peer identity. If the remote peer type is an IP Address, then this is the IP Address used to identify the remote peer. If the remote peer type is a host name, then this is the host name used to identify the remote peer.')
cikeTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cikeTunRemoteAddr.setDescription('The IP address of the remote endpoint for the IPsec Phase-1 IKE Tunnel.')
cikeTunRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteName.setStatus('current')
if mibBuilder.loadTexts: cikeTunRemoteName.setDescription('The DNS name of the remote IP address of IPsec Phase-1 IKE Tunnel. If the DNS name associated with the remote tunnel endpoint is not known, then the value of this object will be a NULL string.')
cikeTunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 10), IkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunNegoMode.setStatus('current')
if mibBuilder.loadTexts: cikeTunNegoMode.setDescription('The negotiation mode of the IPsec Phase-1 IKE Tunnel.')
cikeTunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 11), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: cikeTunDiffHellmanGrp.setDescription('The Diffie Hellman Group used in IPsec Phase-1 IKE negotiations.')
cikeTunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 12), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cikeTunEncryptAlgo.setDescription('The encryption algorithm used in IPsec Phase-1 IKE negotiations.')
cikeTunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 13), IkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHashAlgo.setStatus('current')
if mibBuilder.loadTexts: cikeTunHashAlgo.setDescription('The hash algorithm used in IPsec Phase-1 IKE negotiations.')
cikeTunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 14), IkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cikeTunAuthMethod.setDescription('The authentication method used in IPsec Phase-1 IKE negotiations.')
cikeTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLifeTime.setStatus('current')
if mibBuilder.loadTexts: cikeTunLifeTime.setDescription('The negotiated LifeTime of the IPsec Phase-1 IKE Tunnel in seconds.')
cikeTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 16), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunActiveTime.setStatus('current')
if mibBuilder.loadTexts: cikeTunActiveTime.setDescription('The length of time the IPsec Phase-1 IKE tunnel has been active in hundredths of seconds.')
cikeTunSaRefreshThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunSaRefreshThreshold.setStatus('current')
if mibBuilder.loadTexts: cikeTunSaRefreshThreshold.setDescription('The security association refresh threshold in seconds.')
cikeTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 18), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: cikeTunTotalRefreshes.setDescription('The total number of security associations refreshes performed.')
cikeTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 19), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInOctets.setStatus('current')
if mibBuilder.loadTexts: cikeTunInOctets.setDescription('The total number of octets received by this IPsec Phase-1 IKE Tunnel.')
cikeTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunInPkts.setDescription('The total number of packets received by this IPsec Phase-1 IKE Tunnel.')
cikeTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 21), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunInDropPkts.setDescription('The total number of packets dropped by this IPsec Phase-1 IKE Tunnel during receive processing.')
cikeTunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 22), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInNotifys.setStatus('current')
if mibBuilder.loadTexts: cikeTunInNotifys.setDescription('The total number of notifys received by this IPsec Phase-1 IKE Tunnel.')
cikeTunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 23), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikeTunInP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges received by this IPsec Phase-1 IKE Tunnel.')
cikeTunInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 24), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikeTunInP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges received and found to be invalid by this IPsec Phase-1 IKE Tunnel.')
cikeTunInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 25), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikeTunInP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges received and rejected by this IPsec Phase-1 Tunnel.')
cikeTunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 26), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikeTunInP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association delete requests received by this IPsec Phase-1 IKE Tunnel.')
cikeTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 27), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutOctets.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutOctets.setDescription('The total number of octets sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 28), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutPkts.setDescription('The total number of packets sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 29), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutDropPkts.setDescription('The total number of packets dropped by this IPsec Phase-1 IKE Tunnel during send processing.')
cikeTunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 30), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutNotifys.setDescription('The total number of notifys sent by this IPsec Phase-1 Tunnel.')
cikeTunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 31), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 32), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges sent and found to be invalid by this IPsec Phase-1 IKE Tunnel.')
cikeTunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 33), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges sent and rejected by this IPsec Phase-1 IKE Tunnel.')
cikeTunOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 34), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikeTunOutP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association delete requests sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 35), TunnelStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cikeTunStatus.setStatus('current')
if mibBuilder.loadTexts: cikeTunStatus.setDescription('The status of the MIB table row. This object can be used to bring the tunnel down by setting value of this object to destroy(2). This object cannot be used to create a MIB table row.')
cikePeerCorrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4), )
if mibBuilder.loadTexts: cikePeerCorrTable.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrTable.setDescription('The IPsec Phase-1 Internet Key Exchange Peer Association to IPsec Phase-2 Tunnel Correlation Table. There is one entry in this table for each active IPsec Phase-2 Tunnel.')
cikePeerCorrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrLocalType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrLocalValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrRemoteType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrRemoteValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrIntIndex"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrSeqNum"))
if mibBuilder.loadTexts: cikePeerCorrEntry.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrEntry.setDescription('Each entry contains the attributes of an IPsec Phase-1 IKE Peer Association to IPsec Phase-2 Tunnel Correlation.')
cikePeerCorrLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 1), IkePeerType())
if mibBuilder.loadTexts: cikePeerCorrLocalType.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrLocalType.setDescription('The type of local peer identity. The local peer may be identified by: 1. an IP address, or 2. a host name.')
cikePeerCorrLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 2), DisplayString())
if mibBuilder.loadTexts: cikePeerCorrLocalValue.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrLocalValue.setDescription('The value of the local peer identity. If the local peer type is an IP Address, then this is the IP Address used to identify the local peer. If the local peer type is a host name, then this is the host name used to identify the local peer.')
cikePeerCorrRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 3), IkePeerType())
if mibBuilder.loadTexts: cikePeerCorrRemoteType.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrRemoteType.setDescription('The type of remote peer identity. The remote peer may be identified by: 1. an IP address, or 2. a host name.')
cikePeerCorrRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 4), DisplayString())
if mibBuilder.loadTexts: cikePeerCorrRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrRemoteValue.setDescription('The value of the remote peer identity. If the remote peer type is an IP Address, then this is the IP Address used to identify the remote peer. If the remote peer type is a host name, then this is the host name used to identify the remote peer.')
cikePeerCorrIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikePeerCorrIntIndex.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrIntIndex.setDescription('The internal index of the local-remote peer association. This internal index is used to uniquely identify multiple associations between the local and remote peer.')
cikePeerCorrSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikePeerCorrSeqNum.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrSeqNum.setDescription('The sequence number of the local-remote peer association. This sequence number is used to uniquely identify multiple instances of an unique association between the local and remote peer.')
cikePeerCorrIpSecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerCorrIpSecTunIndex.setStatus('current')
if mibBuilder.loadTexts: cikePeerCorrIpSecTunIndex.setDescription('The index of the active IPsec Phase-2 Tunnel (cipSecTunIndex in the cipSecTunnelTable) for this IPsec Phase-1 IKE Peer Association.')
cikePhase1GWStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5), )
if mibBuilder.loadTexts: cikePhase1GWStatsTable.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWStatsTable.setDescription("Phase-1 IKE stats information is included in this table. Each entry is related to a specific gateway which is identified by 'cmgwIndex'.")
cikePhase1GWStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cikePhase1GWStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWStatsEntry.setDescription('Each entry contains the attributes of an Phase-1 IKE stats information for the related gateway. There is only one entry for each gateway. The entry is created when a gateway up and cannot be deleted.')
cikePhase1GWActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWActiveTunnels.setDescription('The number of currently active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWPreviousTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 2), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWPreviousTunnels.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWPreviousTunnels.setDescription('The total number of previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInOctets.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInOctets.setDescription('The total number of octets received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInPkts.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInPkts.setDescription('The total number of packets received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInDropPkts.setDescription('The total number of packets which were dropped during receive processing by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 6), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInNotifys.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInNotifys.setDescription('The total number of notifys received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 7), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges received by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 8), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges which were received and found to be invalid by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 9), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges which were received and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 10), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInP2SaDelRequests.setDescription("The total number of IPsec Phase-2 'Security Association' delete requests received by all currently and previously active and IPsec Phase-1 IKE Tunnels.")
cikePhase1GWOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutOctets.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutOctets.setDescription('The total number of octets sent by all currently and previously active and IPsec Phase-1 IKE Tunnels.')
cikePhase1GWOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutPkts.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutPkts.setDescription('The total number of packets sent by all currently and previously active and IPsec Phase-1 Tunnels.')
cikePhase1GWOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutDropPkts.setDescription('The total number of packets which were dropped during send processing by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 14), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutNotifys.setDescription('The total number of notifys sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 15), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges which were sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 16), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges which were sent and found to be invalid by all currently and previously active IPsec Phase-1 Tunnels.')
cikePhase1GWOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 17), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges which were sent and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 18), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWOutP2SaDelRequests.setDescription('The total number of IPsec Phase-2 SA delete requests sent by all currently and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWInitTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 19), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInitTunnels.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInitTunnels.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were locally initiated.')
cikePhase1GWInitTunnelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 20), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInitTunnelFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWInitTunnelFails.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were locally initiated and failed to activate.')
cikePhase1GWRespTunnelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 21), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWRespTunnelFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWRespTunnelFails.setDescription('The total number of IPsec Phase-1 IKE Tunnels which were remotely initiated and failed to activate.')
cikePhase1GWSysCapFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 22), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWSysCapFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWSysCapFails.setDescription('The total number of system capacity failures which occurred during processing of all current and previously active IPsec Phase-1 IKE Tunnels.')
cikePhase1GWAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWAuthFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWAuthFails.setDescription('The total number of authentications which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
cikePhase1GWDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 24), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWDecryptFails.setDescription('The total number of decryptions which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
cikePhase1GWHashValidFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWHashValidFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWHashValidFails.setDescription('The total number of hash validations which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.')
cikePhase1GWNoSaFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 26), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWNoSaFails.setStatus('current')
if mibBuilder.loadTexts: cikePhase1GWNoSaFails.setDescription("The total number of non-existent 'Security Association' failures occurred during processing of current and previous IPsec Phase-1 IKE Tunnels.")
cipSecGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1))
cipSecGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalActiveTunnels.setDescription('The total number of currently active IPsec Phase-2 Tunnels.')
cipSecGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 2), Counter32()).setUnits('Phase-2 Tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalPreviousTunnels.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalPreviousTunnels.setDescription('The total number of previously active IPsec Phase-2 Tunnels.')
cipSecGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInOctets.setDescription('The total number of octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE determining whether or not the packet should be decompressed. See also cipSecGlobalInOctWraps for the number of times this counter has wrapped.')
cipSecGlobalHcInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalHcInOctets.setDescription('A high capacity count of the total number of octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
cipSecGlobalInOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 5), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInOctWraps.setDescription('The number of times the global octets received counter (cipSecGlobalInOctets) has wrapped.')
cipSecGlobalInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 6), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInDecompOctets.setDescription('The total number of decompressed octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecGlobalInOctets. See also cipSecGlobalInDecompOctWraps for the number of times this counter has wrapped.')
cipSecGlobalHcInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalHcInDecompOctets.setDescription('A high capacity count of the total number of decompressed octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecGlobalHcInOctets.')
cipSecGlobalInDecompOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 8), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInDecompOctWraps.setDescription('The number of times the global decompressed octets received counter (cipSecGlobalInDecompOctets) has wrapped.')
cipSecGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInPkts.setDescription('The total number of packets received by all current and previous IPsec Phase-2 Tunnels.')
cipSecGlobalInDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDrops.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInDrops.setDescription('The total number of packets dropped during receive processing by all current and previous IPsec Phase-2 Tunnels. This count does NOT include packets dropped due to Anti-Replay processing.')
cipSecGlobalInReplayDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInReplayDrops.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInReplayDrops.setDescription('The total number of packets dropped during receive processing due to Anti-Replay processing by all current and previous IPsec Phase-2 Tunnels.')
cipSecGlobalInAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 12), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInAuths.setDescription("The total number of inbound authentication's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalInAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 13), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInAuthFails.setDescription("The total number of inbound authentication's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalInDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInDecrypts.setDescription("The total number of inbound decryption's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalInDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalInDecryptFails.setDescription("The total number of inbound decryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 16), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutOctets.setDescription('The total number of octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER determining whether or not the packet should be compressed. See also cipSecGlobalOutOctWraps for the number of times this counter has wrapped.')
cipSecGlobalHcOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalHcOutOctets.setDescription('A high capacity count of the total number of octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER determining whether or not the packet should be compressed.')
cipSecGlobalOutOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 18), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutOctWraps.setDescription('The number of times the global octets sent counter (cipSecGlobalOutOctets) has wrapped.')
cipSecGlobalOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 19), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutUncompOctets.setDescription('The total number of uncompressed octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecGlobalOutOctets. See also cipSecGlobalOutDecompOctWraps for the number of times this counter has wrapped.')
cipSecGlobalHcOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 20), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalHcOutUncompOctets.setDescription('A high capacity count of the total number of uncompressed octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecGlobalHcOutOctets.')
cipSecGlobalOutUncompOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 21), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutUncompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutUncompOctWraps.setDescription('The number of times the global uncompressed octets sent counter (cipSecGlobalOutUncompOctets) has wrapped.')
cipSecGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 22), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutPkts.setDescription('The total number of packets sent by all current and previous IPsec Phase-2 Tunnels.')
cipSecGlobalOutDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutDrops.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutDrops.setDescription('The total number of packets dropped during send processing by all current and previous IPsec Phase-2 Tunnels.')
cipSecGlobalOutAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 24), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutAuths.setDescription("The total number of outbound authentication's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalOutAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutAuthFails.setDescription("The total number of outbound authentication's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalOutEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 26), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutEncrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutEncrypts.setDescription("The total number of outbound encryption's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalOutEncryptFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 27), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutEncryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalOutEncryptFails.setDescription("The total number of outbound encryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecGlobalProtocolUseFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 28), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalProtocolUseFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalProtocolUseFails.setDescription('The total number of protocol use failures which occurred during processing of all current and previously active IPsec Phase-2 Tunnels.')
cipSecGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 29), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalNoSaFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalNoSaFails.setDescription('The total number of non-existent Security Association in failures which occurred during processing of all current and previous IPsec Phase-2 Tunnels.')
cipSecGlobalSysCapFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 30), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalSysCapFails.setStatus('current')
if mibBuilder.loadTexts: cipSecGlobalSysCapFails.setDescription('The total number of system capacity failures which occurred during processing of all current and previously active IPsec Phase-2 Tunnels.')
cipSecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2), )
if mibBuilder.loadTexts: cipSecTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cipSecTunnelTable.setDescription('The IPsec Phase-2 Tunnel Table. There is one entry in this table for each active IPsec Phase-2 Tunnel.')
cipSecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIndex"))
if mibBuilder.loadTexts: cipSecTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecTunnelEntry.setDescription('Each entry contains the attributes associated with an active IPsec Phase-2 Tunnel.')
cipSecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecTunIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecTunIndex.setDescription('The index of the IPsec Phase-2 Tunnel Table. The value of the index is a number which begins at one and is incremented with each tunnel that is created. The value of this object will wrap at 2,147,483,647.')
cipSecTunIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunIkeTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecTunIkeTunnelIndex.setDescription('The index of the associated IPsec Phase-1 IKE Tunnel. (cikeTunIndex in the cikeTunnelTable)')
cipSecTunIkeTunnelAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunIkeTunnelAlive.setStatus('current')
if mibBuilder.loadTexts: cipSecTunIkeTunnelAlive.setDescription('An indicator which specifies whether or not the IPsec Phase-1 IKE Tunnel currently exists.')
cipSecTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cipSecTunLocalAddr.setDescription('The IP address of the local endpoint for the IPsec Phase-2 Tunnel.')
cipSecTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cipSecTunRemoteAddr.setDescription('The IP address of the remote endpoint for the IPsec Phase-2 Tunnel.')
cipSecTunKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 6), KeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunKeyType.setStatus('current')
if mibBuilder.loadTexts: cipSecTunKeyType.setDescription('The type of key used by the IPsec Phase-2 Tunnel.')
cipSecTunEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 7), EncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunEncapMode.setStatus('current')
if mibBuilder.loadTexts: cipSecTunEncapMode.setDescription('The encapsulation mode used by the IPsec Phase-2 Tunnel.')
cipSecTunLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunLifeSize.setStatus('current')
if mibBuilder.loadTexts: cipSecTunLifeSize.setDescription('The negotiated LifeSize of the IPsec Phase-2 Tunnel in kilobytes.')
cipSecTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunLifeTime.setStatus('current')
if mibBuilder.loadTexts: cipSecTunLifeTime.setDescription('The negotiated LifeTime of the IPsec Phase-2 Tunnel in seconds.')
cipSecTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunActiveTime.setStatus('current')
if mibBuilder.loadTexts: cipSecTunActiveTime.setDescription('The length of time the IPsec Phase-2 Tunnel has been active in hundredths of seconds.')
cipSecTunSaLifeSizeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunSaLifeSizeThreshold.setStatus('current')
if mibBuilder.loadTexts: cipSecTunSaLifeSizeThreshold.setDescription('The security association LifeSize refresh threshold in kilobytes.')
cipSecTunSaLifeTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunSaLifeTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: cipSecTunSaLifeTimeThreshold.setDescription('The security association LifeTime refresh threshold in seconds.')
cipSecTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 13), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: cipSecTunTotalRefreshes.setDescription('The total number of security association refreshes performed.')
cipSecTunExpiredSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 14), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunExpiredSaInstances.setStatus('current')
if mibBuilder.loadTexts: cipSecTunExpiredSaInstances.setDescription('The total number of security associations which have expired.')
cipSecTunCurrentSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunCurrentSaInstances.setStatus('current')
if mibBuilder.loadTexts: cipSecTunCurrentSaInstances.setDescription('The number of security associations which are currently active or expiring.')
cipSecTunInSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 16), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInSaDiffHellmanGrp.setDescription('The Diffie Hellman Group used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 17), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInSaEncryptAlgo.setDescription('The encryption algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 18), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaAhAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInSaAhAuthAlgo.setDescription('The authentication algorithm used by the inbound authentication header (AH) security association of the IPsec Phase-2 Tunnel.')
cipSecTunInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 19), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaEspAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInSaEspAuthAlgo.setDescription('The authentication algorithm used by the inbound encapsulation security protocol (ESP) security association of the IPsec Phase-2 Tunnel.')
cipSecTunInSaDecompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 20), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaDecompAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInSaDecompAlgo.setDescription('The decompression algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunOutSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 21), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutSaDiffHellmanGrp.setDescription('The Diffie Hellman Group used by the outbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 22), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutSaEncryptAlgo.setDescription('The encryption algorithm used by the outbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 23), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaAhAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutSaAhAuthAlgo.setDescription('The authentication algorithm used by the outbound authentication header (AH) security association of the IPsec Phase-2 Tunnel.')
cipSecTunOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 24), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaEspAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutSaEspAuthAlgo.setDescription('The authentication algorithm used by the inbound encapsulation security protocol (ESP) security association of the IPsec Phase-2 Tunnel.')
cipSecTunOutSaCompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 25), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaCompAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutSaCompAlgo.setDescription('The compression algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 26), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInOctets.setDescription('The total number of octets received by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE determining whether or not the packet should be decompressed. See also cipSecTunInOctWraps for the number of times this counter has wrapped.')
cipSecTunHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 27), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHcInOctets.setDescription('A high capacity count of the total number of octets received by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
cipSecTunInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 28), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInOctWraps.setDescription('The number of times the octets received counter (cipSecTunInOctets) has wrapped.')
cipSecTunInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 29), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInDecompOctets.setDescription('The total number of decompressed octets received by this IPsec Phase-2 Tunnel. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecTunInOctets. See also cipSecTunInDecompOctWraps for the number of times this counter has wrapped.')
cipSecTunHcInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHcInDecompOctets.setDescription('A high capacity count of the total number of decompressed octets received by this IPsec Phase-2 Tunnel. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecTunHcInOctets.')
cipSecTunInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 31), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInDecompOctWraps.setDescription('The number of times the decompressed octets received counter (cipSecTunInDecompOctets) has wrapped.')
cipSecTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 32), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInPkts.setDescription('The total number of packets received by this IPsec Phase-2 Tunnel.')
cipSecTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 33), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInDropPkts.setDescription('The total number of packets dropped during receive processing by this IPsec Phase-2 Tunnel. This count does NOT include packets dropped due to Anti-Replay processing.')
cipSecTunInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 34), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInReplayDropPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInReplayDropPkts.setDescription('The total number of packets dropped during receive processing due to Anti-Replay processing by this IPsec Phase-2 Tunnel.')
cipSecTunInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 35), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInAuths.setDescription("The total number of inbound authentication's performed by this IPsec Phase-2 Tunnel.")
cipSecTunInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 36), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInAuthFails.setDescription("The total number of inbound authentication's which ended in failure by this IPsec Phase-2 Tunnel .")
cipSecTunInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 37), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInDecrypts.setDescription("The total number of inbound decryption's performed by this IPsec Phase-2 Tunnel.")
cipSecTunInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 38), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunInDecryptFails.setDescription("The total number of inbound decryption's which ended in failure by this IPsec Phase-2 Tunnel.")
cipSecTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 39), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutOctets.setDescription('The total number of octets sent by this IPsec Phase-2 Tunnel. This value is accumulated AFTER determining whether or not the packet should be compressed. See also cipSecTunOutOctWraps for the number of times this counter has wrapped.')
cipSecTunHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHcOutOctets.setDescription('A high capacity count of the total number of octets sent by this IPsec Phase-2 Tunnel. This value is accumulated AFTER determining whether or not the packet should be compressed.')
cipSecTunOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 41), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutOctWraps.setDescription('The number of times the out octets counter (cipSecTunOutOctets) has wrapped.')
cipSecTunOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 42), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutUncompOctets.setDescription('The total number of uncompressed octets sent by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecTunOutOctets. See also cipSecTunOutDecompOctWraps for the number of times this counter has wrapped.')
cipSecTunHcOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHcOutUncompOctets.setDescription('A high capacity count of the total number of uncompressed octets sent by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecTunHcOutOctets.')
cipSecTunOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 44), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutUncompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutUncompOctWraps.setDescription('The number of times the uncompressed octets sent counter (cipSecTunOutUncompOctets) has wrapped.')
cipSecTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 45), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutPkts.setDescription('The total number of packets sent by this IPsec Phase-2 Tunnel.')
cipSecTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 46), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutDropPkts.setDescription('The total number of packets dropped during send processing by this IPsec Phase-2 Tunnel.')
cipSecTunOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 47), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutAuths.setDescription("The total number of outbound authentication's performed by this IPsec Phase-2 Tunnel.")
cipSecTunOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 48), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutAuthFails.setDescription("The total number of outbound authentication's which ended in failure by this IPsec Phase-2 Tunnel.")
cipSecTunOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 49), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutEncrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutEncrypts.setDescription("The total number of outbound encryption's performed by this IPsec Phase-2 Tunnel.")
cipSecTunOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 50), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutEncryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunOutEncryptFails.setDescription("The total number of outbound encryption's which ended in failure by this IPsec Phase-2 Tunnel.")
cipSecTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 51), TunnelStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTunStatus.setStatus('current')
if mibBuilder.loadTexts: cipSecTunStatus.setDescription('The status of the MIB table row. This object can be used to bring the tunnel down by setting value of this object to destroy(2). When the value is set to destroy(2), the SA bundle is destroyed and this row is deleted from this table. When this MIB value is queried, the value of active(1) is always returned, if the instance exists. This object cannot be used to create a MIB table row.')
cipSecEndPtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3), )
if mibBuilder.loadTexts: cipSecEndPtTable.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtTable.setDescription('The IPsec Phase-2 Tunnel Endpoint Table. This table contains an entry for each active endpoint associated with an IPsec Phase-2 Tunnel.')
cipSecEndPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIndex"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtIndex"))
if mibBuilder.loadTexts: cipSecEndPtEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtEntry.setDescription('An IPsec Phase-2 Tunnel Endpoint entry.')
cipSecEndPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecEndPtIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtIndex.setDescription('The number of the Endpoint associated with the IPsec Phase-2 Tunnel Table. The value of this index is a number which begins at one and is incremented with each Endpoint associated with an IPsec Phase-2 Tunnel. The value of this object will wrap at 2,147,483,647.')
cipSecEndPtLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalName.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtLocalName.setDescription('The DNS name of the local Endpoint.')
cipSecEndPtLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 3), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalType.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtLocalType.setDescription('The type of identity for the local Endpoint. Possible values are: 1) a single IP address, or 2) an IP address range, or 3) an IP subnet.')
cipSecEndPtLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalAddr1.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtLocalAddr1.setDescription("The local Endpoint's first IP address specification. If the local Endpoint type is single IP address, then this is the value of the IP address. If the local Endpoint type is IP subnet, then this is the value of the subnet. If the local Endpoint type is IP address range, then this is the value of beginning IP address of the range.")
cipSecEndPtLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalAddr2.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtLocalAddr2.setDescription("The local Endpoint's second IP address specification. If the local Endpoint type is single IP address, then this is the value of the IP address. If the local Endpoint type is IP subnet, then this is the value of the subnet mask. If the local Endpoint type is IP address range, then this is the value of ending IP address of the range.")
cipSecEndPtLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalProtocol.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtLocalProtocol.setDescription("The protocol number of the local Endpoint's traffic.")
cipSecEndPtLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalPort.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtLocalPort.setDescription("The port number of the local Endpoint's traffic.")
cipSecEndPtRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteName.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtRemoteName.setDescription('The DNS name of the remote Endpoint.')
cipSecEndPtRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 9), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteType.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtRemoteType.setDescription('The type of identity for the remote Endpoint. Possible values are: 1) a single IP address, or 2) an IP address range, or 3) an IP subnet.')
cipSecEndPtRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 10), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteAddr1.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtRemoteAddr1.setDescription("The remote Endpoint's first IP address specification. If the remote Endpoint type is single IP address, then this is the value of the IP address. If the remote Endpoint type is IP subnet, then this is the value of the subnet. If the remote Endpoint type is IP address range, then this is the value of beginning IP address of the range.")
cipSecEndPtRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 11), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteAddr2.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtRemoteAddr2.setDescription("The remote Endpoint's second IP address specification. If the remote Endpoint type is single IP address, then this is the value of the IP address. If the remote Endpoint type is IP subnet, then this is the value of the subnet mask. If the remote Endpoint type is IP address range, then this is the value of ending IP address of the range.")
cipSecEndPtRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteProtocol.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtRemoteProtocol.setDescription("The protocol number of the remote Endpoint's traffic.")
cipSecEndPtRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemotePort.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtRemotePort.setDescription("The port number of the remote Endpoint's traffic.")
cipSecSpiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4), )
if mibBuilder.loadTexts: cipSecSpiTable.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiTable.setDescription('The IPsec Phase-2 Security Protection Index Table. This table contains an entry for each active and expiring security association.')
cipSecSpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIndex"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiIndex"))
if mibBuilder.loadTexts: cipSecSpiEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiEntry.setDescription('Each entry contains the attributes associated with active and expiring IPsec Phase-2 security associations.')
cipSecSpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecSpiIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiIndex.setDescription('The number of the SPI associated with the Phase-2 Tunnel Table. The value of this index is a number which begins at one and is incremented with each SPI associated with an IPsec Phase-2 Tunnel. The value of this object will wrap at 2,147,483,647.')
cipSecSpiDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiDirection.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiDirection.setDescription('The direction of the SPI.')
cipSecSpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiValue.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiValue.setDescription('The value of the SPI.')
cipSecSpiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2), ("ipcomp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiProtocol.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiProtocol.setDescription('The protocol of the SPI.')
cipSecSpiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiStatus.setStatus('current')
if mibBuilder.loadTexts: cipSecSpiStatus.setDescription('The status of the SPI.')
cipSecPhase2GWStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5), )
if mibBuilder.loadTexts: cipSecPhase2GWStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWStatsTable.setDescription("Phase-2 IPsec stats information is included in this table. Each entry is related to a specific gateway which is identified by 'cmgwIndex'")
cipSecPhase2GWStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cipSecPhase2GWStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWStatsEntry.setDescription('Each entry contains the attributes of an Phase-2 IPsec stats information for the related gateway. There is only one entry for each gateway. The entry is created when a gateway up and cannot be deleted.')
cipSecPhase2GWActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWActiveTunnels.setDescription('The total number of currently active IPsec Phase-2 Tunnels.')
cipSecPhase2GWPreviousTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 2), Counter32()).setUnits('Phase-2 Tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWPreviousTunnels.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWPreviousTunnels.setDescription('The total number of previously active IPsec Phase-2 Tunnels.')
cipSecPhase2GWInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInOctets.setDescription('The total number of octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE determining whether or not the packet should be decompressed. See also cipSecGlobalInOctWraps for the number of times this counter has wrapped.')
cipSecPhase2GWInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 4), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInOctWraps.setDescription('The number of times the global octets received counter (cipSecGlobalInOctets) has wrapped.')
cipSecPhase2GWInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInDecompOctets.setDescription('The total number of decompressed octets received by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecGlobalInOctets. See also cipSecGlobalInDecompOctWraps for the number of times this counter has wrapped.')
cipSecPhase2GWInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 6), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInDecompOctWraps.setDescription('The number of times the global decompressed octets received counter (cipSecGlobalInDecompOctets) has wrapped.')
cipSecPhase2GWInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInPkts.setDescription('The total number of packets received by all current and previous IPsec Phase-2 Tunnels.')
cipSecPhase2GWInDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDrops.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInDrops.setDescription('The total number of packets dropped during receive processing by all current and previous IPsec Phase-2 Tunnels. This count does NOT include packets dropped due to Anti-Replay processing.')
cipSecPhase2GWInReplayDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInReplayDrops.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInReplayDrops.setDescription('The total number of packets dropped during receive processing due to Anti-Replay processing by all current and previous IPsec Phase-2 Tunnels.')
cipSecPhase2GWInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 10), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInAuths.setDescription("The total number of inbound authentication's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 11), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInAuthFails.setDescription("The total number of inbound authentication's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInDecrypts.setDescription("The total number of inbound decryption's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWInDecryptFails.setDescription("The total number of inbound decryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 14), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutOctets.setDescription('The total number of octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated AFTER determining whether or not the packet should be compressed. See also cipSecGlobalOutOctWraps for the number of times this counter has wrapped.')
cipSecPhase2GWOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 15), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutOctWraps.setDescription('The number of times the global octets sent counter (cipSecGlobalOutOctets) has wrapped.')
cipSecPhase2GWOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 16), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutUncompOctets.setDescription('The total number of uncompressed octets sent by all current and previous IPsec Phase-2 Tunnels. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecGlobalOutOctets. See also cipSecGlobalOutDecompOctWraps for the number of times this counter has wrapped.')
cipSecPhase2GWOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 17), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutUncompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutUncompOctWraps.setDescription('The number of times the global uncompressed octets sent counter (cipSecGlobalOutUncompOctets) has wrapped.')
cipSecPhase2GWOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutPkts.setDescription('The total number of packets sent by all current and previous IPsec Phase-2 Tunnels.')
cipSecPhase2GWOutDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutDrops.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutDrops.setDescription('The total number of packets dropped during send processing by all current and previous IPsec Phase-2 Tunnels.')
cipSecPhase2GWOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 20), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutAuths.setDescription("The total number of outbound authentication's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 21), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutAuthFails.setDescription("The total number of outbound authentication's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 22), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutEncrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutEncrypts.setDescription("The total number of outbound encryption's performed by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutEncryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWOutEncryptFails.setDescription("The total number of outbound encryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.")
cipSecPhase2GWProtocolUseFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 24), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWProtocolUseFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWProtocolUseFails.setDescription('The total number of protocol use failures which occurred during processing of all current and previously active IPsec Phase-2 Tunnels.')
cipSecPhase2GWNoSaFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWNoSaFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWNoSaFails.setDescription('The total number of non-existent Security Association in failures which occurred during processing of all current and previous IPsec Phase-2 Tunnels.')
cipSecPhase2GWSysCapFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 26), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWSysCapFails.setStatus('current')
if mibBuilder.loadTexts: cipSecPhase2GWSysCapFails.setDescription('The total number of system capacity failures which occurred during processing of all current and previously active IPsec Phase-2 Tunnels.')
cipSecHistGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1))
cipSecHistPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2))
cipSecHistPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3))
cipSecHistGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1, 1))
cipSecHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecHistTableSize.setStatus('current')
if mibBuilder.loadTexts: cipSecHistTableSize.setDescription('The window size of the IPsec Phase-1 and Phase-2 History Tables. The IPsec Phase-1 and Phase-2 History Tables are implemented as a sliding window in which only the last n entries are maintained. This object is used specify the number of entries which will be maintained in the IPsec Phase-1 and Phase-2 History Tables. An implementation may choose suitable minimum and maximum values for this element based on the local policy and available resources. If an SNMP SET request specifies a value outside this window for this element, a BAD VALUE may be returned.')
cipSecHistCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("checkPoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecHistCheckPoint.setStatus('current')
if mibBuilder.loadTexts: cipSecHistCheckPoint.setDescription('The current state of check point processing. This object will return ready when the agent is ready to create on-demand history entries for active IPsec Tunnels or checkPoint when the agent is currently creating on-demand history entries for active IPsec Tunnels. By setting this value to checkPoint, the agent will create: a) an entry in the IPsec Phase-1 Tunnel History for each active IPsec Phase-1 Tunnel and b) an entry in the IPsec Phase-2 Tunnel History Table and an entry in the IPsec Phase-2 Tunnel EndPoint History Table for each active IPsec Phase-2 Tunnel.')
cikeTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1), )
if mibBuilder.loadTexts: cikeTunnelHistTable.setStatus('current')
if mibBuilder.loadTexts: cikeTunnelHistTable.setDescription('The IPsec Phase-1 Internet Key Exchange Tunnel History Table. This table is implemented as a sliding window in which only the last n entries are maintained. The maximum number of entries is specified by the cipSecHistTableSize object.')
cikeTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistIndex"))
if mibBuilder.loadTexts: cikeTunnelHistEntry.setStatus('current')
if mibBuilder.loadTexts: cikeTunnelHistEntry.setDescription('Each entry contains the attributes associated with a previously active IPsec Phase-1 IKE Tunnel.')
cikeTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikeTunHistIndex.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistIndex.setDescription('The index of the IPsec Phase-1 IKE Tunnel History Table. The value of the index is a number which begins at one and is incremented with each tunnel that ends. The value of this object will wrap at 2,147,483,647.')
cikeTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("localFailure", 6), ("checkPointReg", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistTermReason.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistTermReason.setDescription('The reason the IPsec Phase-1 IKE Tunnel was terminated. Possible reasons include: 1 = other 2 = normal termination 3 = operator request 4 = peer delete request was received 5 = contact with peer was lost 6 = local failure occurred. 7 = operator initiated check point request')
cikeTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistActiveIndex.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistActiveIndex.setDescription('The index of the previously active IPsec Phase-1 IKE Tunnel.')
cikeTunHistPeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 4), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerLocalType.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistPeerLocalType.setDescription('The type of local peer identity. The local peer may be identified by: 1. an IP address, or 2. a host name.')
cikeTunHistPeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerLocalValue.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistPeerLocalValue.setDescription('The value of the local peer identity. If the local peer type is an IP Address, then this is the IP Address used to identify the local peer. If the local peer type is a host name, then this is the host name used to identify the local peer.')
cikeTunHistPeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerIntIndex.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistPeerIntIndex.setDescription('The internal index of the local-remote peer association. This internal index is used to uniquely identify multiple associations between the local and remote peer.')
cikeTunHistPeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 7), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerRemoteType.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistPeerRemoteType.setDescription('The type of remote peer identity. The remote peer may be identified by: 1. an IP address, or 2. a host name.')
cikeTunHistPeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistPeerRemoteValue.setDescription('The value of the remote peer identity. If the remote peer type is an IP Address, then this is the IP Address used to identify the remote peer. If the remote peer type is a host name, then this is the host name used to identify the remote peer.')
cikeTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 9), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistLocalAddr.setDescription('The IP address of the local endpoint for the IPsec Phase-1 IKE Tunnel.')
cikeTunHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistLocalName.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistLocalName.setDescription('The DNS name of the local IP address for the IPsec Phase-1 IKE Tunnel. If the DNS name associated with the local tunnel endpoint is not known, then the value of this object will be a NULL string.')
cikeTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 11), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistRemoteAddr.setDescription('The IP address of the remote endpoint for the IPsec Phase-1 IKE Tunnel.')
cikeTunHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistRemoteName.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistRemoteName.setDescription('The DNS name of the remote IP address of IPsec Phase-1 IKE Tunnel. If the DNS name associated with the remote tunnel endpoint is not known, then the value of this object will be a NULL string.')
cikeTunHistNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 13), IkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistNegoMode.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistNegoMode.setDescription('The negotiation mode of the IPsec Phase-1 IKE Tunnel.')
cikeTunHistDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 14), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistDiffHellmanGrp.setDescription('The Diffie Hellman Group used in IPsec Phase-1 IKE negotiations.')
cikeTunHistEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 15), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistEncryptAlgo.setDescription('The encryption algorithm used in IPsec Phase-1 IKE negotiations.')
cikeTunHistHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 16), IkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistHashAlgo.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistHashAlgo.setDescription('The hash algorithm used in IPsec Phase-1 IKE negotiations.')
cikeTunHistAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 17), IkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistAuthMethod.setDescription('The authentication method used in IPsec Phase-1 IKE negotiations.')
cikeTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistLifeTime.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistLifeTime.setDescription('The negotiated LifeTime of the IPsec Phase-1 IKE Tunnel in seconds.')
cikeTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistStartTime.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistStartTime.setDescription('The value of sysUpTime in hundredths of seconds when the IPsec Phase-1 IKE tunnel was started.')
cikeTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 20), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistActiveTime.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistActiveTime.setDescription('The length of time the IPsec Phase-1 IKE tunnel was been active in hundredths of seconds.')
cikeTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 21), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistTotalRefreshes.setDescription('The total number of security associations refreshes performed.')
cikeTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 22), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistTotalSas.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistTotalSas.setDescription('The total number of security associations used during the life of the IPsec Phase-1 IKE Tunnel.')
cikeTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 23), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInOctets.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInOctets.setDescription('The total number of octets received by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 24), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInPkts.setDescription('The total number of packets received by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 25), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInDropPkts.setDescription('The total number of packets dropped by this IPsec Phase-1 IKE Tunnel during receive processing.')
cikeTunHistInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 26), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInNotifys.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInNotifys.setDescription('The total number of notifys received by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 27), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges received by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 28), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges received and found to be invalid by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 29), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges received and rejected by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 30), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistInP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association delete requests received by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 31), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutOctets.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutOctets.setDescription('The total number of octets sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 32), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutPkts.setDescription('The total number of packets sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 33), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutDropPkts.setDescription('The total number of packets dropped by this IPsec Phase-1 IKE Tunnel during send processing.')
cikeTunHistOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 34), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutNotifys.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutNotifys.setDescription('The total number of notifys sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 35), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutP2Exchgs.setDescription('The total number of IPsec Phase-2 exchanges sent by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 36), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutP2ExchgInvalids.setDescription('The total number of IPsec Phase-2 exchanges sent and found to be invalid by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 37), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutP2ExchgRejects.setDescription('The total number of IPsec Phase-2 exchanges sent and rejected by this IPsec Phase-1 IKE Tunnel.')
cikeTunHistOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 38), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cikeTunHistOutP2SaDelRequests.setDescription('The total number of IPsec Phase-2 security association delete requests sent by this IPsec Phase-1 IKE Tunnel.')
cipSecTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1), )
if mibBuilder.loadTexts: cipSecTunnelHistTable.setStatus('current')
if mibBuilder.loadTexts: cipSecTunnelHistTable.setDescription('The IPsec Phase-2 Tunnel History Table. This table is implemented as a sliding window in which only the last n entries are maintained. The maximum number of entries is specified by the cipSecHistTableSize object.')
cipSecTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistIndex"))
if mibBuilder.loadTexts: cipSecTunnelHistEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecTunnelHistEntry.setDescription('Each entry contains the attributes associated with a previously active IPsec Phase-2 Tunnel.')
cipSecTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecTunHistIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistIndex.setDescription('The index of the IPsec Phase-2 Tunnel History Table. The value of the index is a number which begins at one and is incremented with each tunnel that ends. The value of this object will wrap at 2,147,483,647.')
cipSecTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("seqNumRollOver", 6), ("checkPointReq", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistTermReason.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistTermReason.setDescription('The reason the IPsec Phase-2 Tunnel was terminated. Possible reasons include: 1 = other 2 = normal termination 3 = operator request 4 = peer delete request was received 5 = contact with peer was lost 6 = local failure occurred 7 = operator initiated check point request')
cipSecTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistActiveIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistActiveIndex.setDescription('The index of the previously active IPsec Phase-2 Tunnel.')
cipSecTunHistIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistIkeTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistIkeTunnelIndex.setDescription('The index of the associated IPsec Phase-1 Tunnel (cikeTunIndex in the cikeTunnelTable).')
cipSecTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistLocalAddr.setDescription('The IP address of the local endpoint for the IPsec Phase-2 Tunnel.')
cipSecTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistRemoteAddr.setDescription('The IP address of the remote endpoint for the IPsec Phase-2 Tunnel.')
cipSecTunHistKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 7), KeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistKeyType.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistKeyType.setDescription('The type of key used by the IPsec Phase-2 Tunnel.')
cipSecTunHistEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 8), EncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistEncapMode.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistEncapMode.setDescription('The encapsulation mode used by the IPsec Phase-2 Tunnel.')
cipSecTunHistLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistLifeSize.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistLifeSize.setDescription('The negotiated LifeSize of the IPsec Phase-2 Tunnel in kilobytes.')
cipSecTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistLifeTime.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistLifeTime.setDescription('The negotiated LifeTime of the IPsec Phase-2 Tunnel in seconds.')
cipSecTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistStartTime.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistStartTime.setDescription('The value of sysUpTime in hundredths of seconds when the IPsec Phase-2 Tunnel was started.')
cipSecTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistActiveTime.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistActiveTime.setDescription('The length of time the IPsec Phase-2 Tunnel has been active in hundredths of seconds.')
cipSecTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 13), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistTotalRefreshes.setDescription('The total number of security association refreshes performed.')
cipSecTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 14), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistTotalSas.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistTotalSas.setDescription('The total number of security associations used during the life of the IPsec Phase-2 Tunnel.')
cipSecTunHistInSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 15), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInSaDiffHellmanGrp.setDescription('The Diffie Hellman Group used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 16), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInSaEncryptAlgo.setDescription('The encryption algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 17), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaAhAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInSaAhAuthAlgo.setDescription('The authentication algorithm used by the inbound authentication header (AH) security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 18), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaEspAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInSaEspAuthAlgo.setDescription('The authentication algorithm used by the inbound encapsulation security protocol (ESP) security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistInSaDecompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 19), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaDecompAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInSaDecompAlgo.setDescription('The decompression algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistOutSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 20), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaDiffHellmanGrp.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutSaDiffHellmanGrp.setDescription('The Diffie Hellman Group used by the outbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 21), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaEncryptAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutSaEncryptAlgo.setDescription('The encryption algorithm used by the outbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 22), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaAhAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutSaAhAuthAlgo.setDescription('The authentication algorithm used by the outbound authentication header (AH) security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 23), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaEspAuthAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutSaEspAuthAlgo.setDescription('The authentication algorithm used by the inbound encapsulation security protocol (ESP) security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistOutSaCompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 24), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaCompAlgo.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutSaCompAlgo.setDescription('The compression algorithm used by the inbound security association of the IPsec Phase-2 Tunnel.')
cipSecTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 25), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInOctets.setDescription('The total number of octets received by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE determining whether or not the packet should be decompressed. See also cipSecTunInOctWraps for the number of times this counter has wrapped.')
cipSecTunHistHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcInOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistHcInOctets.setDescription('A high capacity count of the total number of octets received by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE determining whether or not the packet should be decompressed.')
cipSecTunHistInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 27), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInOctWraps.setDescription('The number of times the octets received counter (cipSecTunInOctets) has wrapped.')
cipSecTunHistInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 28), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInDecompOctets.setDescription('The total number of decompressed octets received by this IPsec Phase-2 Tunnel. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecTunHistInOctets. See also cipSecTunInDecompOctWraps for the number of times this counter has wrapped.')
cipSecTunHistHcInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcInDecompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistHcInDecompOctets.setDescription('A high capacity count of the total number of decompressed octets received by this IPsec Phase-2 Tunnel. This value is accumulated AFTER the packet is decompressed. If compression is not being used, this value will match the value of cipSecTunHistHcInOctets.')
cipSecTunHistInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 30), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInDecompOctWraps.setDescription('The number of times the decompressed octets received counter (cipSecTunInDecompOctets) has wrapped.')
cipSecTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 31), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInPkts.setDescription('The total number of packets received by this IPsec Phase-2 Tunnel.')
cipSecTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 32), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDropPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInDropPkts.setDescription('The total number of packets dropped during receive processing by this IPsec Phase-2 Tunnel. This count does NOT include packets dropped due to Anti-Replay processing.')
cipSecTunHistInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 33), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInReplayDropPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInReplayDropPkts.setDescription('The total number of packets dropped during receive processing due to Anti-Replay processing by this IPsec Phase-2 Tunnel.')
cipSecTunHistInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 34), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInAuths.setDescription("The total number of inbound authentication's performed by this IPsec Phase-2 Tunnel.")
cipSecTunHistInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 35), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInAuthFails.setDescription("The total number of inbound authentication's which ended in failure by this IPsec Phase-2 Tunnel .")
cipSecTunHistInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 36), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInDecrypts.setDescription("The total number of inbound decryption's performed by this IPsec Phase-2 Tunnel.")
cipSecTunHistInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 37), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistInDecryptFails.setDescription("The total number of inbound decryption's which ended in failure by this IPsec Phase-2 Tunnel.")
cipSecTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 38), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutOctets.setDescription('The total number of octets sent by this IPsec Phase-2 Tunnel. This value is accumulated AFTER determining whether or not the packet should be compressed. See also cipSecTunOutOctWraps for the number of times this counter has wrapped.')
cipSecTunHistHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcOutOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistHcOutOctets.setDescription('A high capacity count of the total number of octets sent by this IPsec Phase-2 Tunnel. This value is accumulated AFTER determining whether or not the packet should be compressed.')
cipSecTunHistOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 40), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutOctWraps.setDescription('The number of times the octets sent counter (cipSecTunOutOctets) has wrapped.')
cipSecTunHistOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 41), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutUncompOctets.setDescription('The total number of uncompressed octets sent by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecTunHistOutOctets. See also cipSecTunOutDecompOctWraps for the number of times this counter has wrapped.')
cipSecTunHistHcOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 42), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcOutUncompOctets.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistHcOutUncompOctets.setDescription('A high capacity count of the total number of uncompressed octets sent by this IPsec Phase-2 Tunnel. This value is accumulated BEFORE the packet is compressed. If compression is not being used, this value will match the value of cipSecTunHistHcOutOctets.')
cipSecTunHistOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 43), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutUncompOctWraps.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutUncompOctWraps.setDescription('The number of times the uncompressed octets sent counter (cipSecTunOutUncompOctets) has wrapped.')
cipSecTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 44), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutPkts.setDescription('The total number of packets sent by this IPsec Phase-2 Tunnel.')
cipSecTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 45), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutDropPkts.setDescription('The total number of packets dropped during send processing by this IPsec Phase-2 Tunnel.')
cipSecTunHistOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 46), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutAuths.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutAuths.setDescription("The total number of outbound authentication's performed by this IPsec Phase-2 Tunnel.")
cipSecTunHistOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 47), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutAuthFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutAuthFails.setDescription("The total number of outbound authentication's which ended in failure by this IPsec Phase-2 Tunnel.")
cipSecTunHistOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 48), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutEncrypts.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutEncrypts.setDescription("The total number of outbound encryption's performed by this IPsec Phase-2 Tunnel.")
cipSecTunHistOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 49), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutEncryptFails.setStatus('current')
if mibBuilder.loadTexts: cipSecTunHistOutEncryptFails.setDescription("The total number of outbound encryption's which ended in failure by this IPsec Phase-2 Tunnel.")
cipSecEndPtHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2), )
if mibBuilder.loadTexts: cipSecEndPtHistTable.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistTable.setDescription('The IPsec Phase-2 Tunnel Endpoint History Table. This table is implemented as a sliding window in which only the last n entries are maintained. The maximum number of entries is specified by the cipSecHistTableSize object.')
cipSecEndPtHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistIndex"))
if mibBuilder.loadTexts: cipSecEndPtHistEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistEntry.setDescription('Each entry contains the attributes associated with a previously active IPsec Phase-2 Tunnel Endpoint.')
cipSecEndPtHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecEndPtHistIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistIndex.setDescription('The number of the previously active Endpoint associated with a IPsec Phase-2 Tunnel Table. The value of this index is a number which begins at one and is incremented with each Endpoint associated with an IPsec Phase-2 Tunnel. The value of this object will wrap at 2,147,483,647.')
cipSecEndPtHistTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistTunIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistTunIndex.setDescription('The index of the previously active IPsec Phase-2 Tunnel Table.')
cipSecEndPtHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistActiveIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistActiveIndex.setDescription('The index of the previously active Endpoint.')
cipSecEndPtHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalName.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistLocalName.setDescription('The DNS name of the local Endpoint.')
cipSecEndPtHistLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 5), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalType.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistLocalType.setDescription('The type of identity for the local Endpoint. Possible values are: 1) a single IP address, or 2) an IP address range, or 3) an IP subnet.')
cipSecEndPtHistLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalAddr1.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistLocalAddr1.setDescription("The local Endpoint's first IP address specification. If the local Endpoint type is single IP address, then this is the value of the IP address. If the local Endpoint type is IP subnet, then this is the value of the subnet. If the local Endpoint type is IP address range, then this is the value of beginning IP address of the range.")
cipSecEndPtHistLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalAddr2.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistLocalAddr2.setDescription("The local Endpoint's second IP address specification. If the local Endpoint type is single IP address, then this is the value of the IP address. If the local Endpoint type is IP subnet, then this is the value of the subnet mask. If the local Endpoint type is IP address range, then this is the value of ending IP address of the range.")
cipSecEndPtHistLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalProtocol.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistLocalProtocol.setDescription("The protocol number of the local Endpoint's traffic.")
cipSecEndPtHistLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalPort.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistLocalPort.setDescription("The port number of the local Endpoint's traffic.")
cipSecEndPtHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteName.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistRemoteName.setDescription('The DNS name of the remote Endpoint.')
cipSecEndPtHistRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 11), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteType.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistRemoteType.setDescription('The type of identity for the remote Endpoint. Possible values are: 1) a single IP address, or 2) an IP address range, or 3) an IP subnet.')
cipSecEndPtHistRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 12), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteAddr1.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistRemoteAddr1.setDescription("The remote Endpoint's first IP address specification. If the remote Endpoint type is single IP address, then this is the value of the IP address. If the remote Endpoint type is IP subnet, then this is the value of the subnet. If the remote Endpoint type is IP address range, then this is the value of beginning IP address of the range.")
cipSecEndPtHistRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 13), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteAddr2.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistRemoteAddr2.setDescription("The remote Endpoint's second IP address specification. If the remote Endpoint type is single IP address, then this is the value of the IP address. If the remote Endpoint type is IP subnet, then this is the value of the subnet mask. If the remote Endpoint type is IP address range, then this is the value of ending IP address of the range.")
cipSecEndPtHistRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteProtocol.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistRemoteProtocol.setDescription("The protocol number of the remote Endpoint's traffic.")
cipSecEndPtHistRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemotePort.setStatus('current')
if mibBuilder.loadTexts: cipSecEndPtHistRemotePort.setDescription("The port number of the remote Endpoint's traffic.")
cipSecFailGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 1))
cipSecFailPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2))
cipSecFailPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3))
cipSecFailGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 1, 1))
cipSecFailTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecFailTableSize.setStatus('current')
if mibBuilder.loadTexts: cipSecFailTableSize.setDescription('The window size of the IPsec Phase-1 and Phase-2 Failure Tables. The IPsec Phase-1 and Phase-2 Failure Tables are implemented as a sliding window in which only the last n entries are maintained. This object is used specify the number of entries which will be maintained in the IPsec Phase-1 and Phase-2 Failure Tables. An implementation may choose suitable minimum and maximum values for this element based on the local policy and available resources. If an SNMP SET request specifies a value outside this window for this element, a BAD VALUE may be returned.')
cikeFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1), )
if mibBuilder.loadTexts: cikeFailTable.setStatus('current')
if mibBuilder.loadTexts: cikeFailTable.setDescription('The IPsec Phase-1 Failure Table. This table is implemented as a sliding window in which only the last n entries are maintained. The maximum number of entries is specified by the cipSecFailTableSize object.')
cikeFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailIndex"))
if mibBuilder.loadTexts: cikeFailEntry.setStatus('current')
if mibBuilder.loadTexts: cikeFailEntry.setDescription('Each entry contains the attributes associated with an IPsec Phase-1 failure.')
cikeFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikeFailIndex.setStatus('current')
if mibBuilder.loadTexts: cikeFailIndex.setDescription('The IPsec Phase-1 Failure Table index. The value of the index is a number which begins at one and is incremented with each IPsec Phase-1 failure. The value of this object will wrap at 2,147,483,647.')
cikeFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("peerDelRequest", 2), ("peerLost", 3), ("localFailure", 4), ("authFailure", 5), ("hashValidation", 6), ("encryptFailure", 7), ("internalError", 8), ("sysCapExceeded", 9), ("proposalFailure", 10), ("peerCertUnavailable", 11), ("peerCertNotValid", 12), ("localCertExpired", 13), ("crlFailure", 14), ("peerEncodingError", 15), ("nonExistentSa", 16), ("operRequest", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailReason.setStatus('current')
if mibBuilder.loadTexts: cikeFailReason.setDescription("The reason for the failure. Possible reasons include: 1 = other 2 = peer delete request was received 3 = contact with peer was lost 4 = local failure occurred 5 = authentication failure 6 = hash validation failure 7 = encryption failure 8 = internal error occurred 9 = system capacity failure 10 = proposal failure 11 = peer's certificate is unavailable 12 = peer's certificate was found invalid 13 = local certificate expired 14 = certificate revoke list (crl) failure 15 = peer encoding error 16 = non-existent security association 17 = operator requested termination.")
cikeFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailTime.setStatus('current')
if mibBuilder.loadTexts: cikeFailTime.setDescription('The value of sysUpTime in hundredths of seconds at the time of the failure.')
cikeFailLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 4), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailLocalType.setStatus('current')
if mibBuilder.loadTexts: cikeFailLocalType.setDescription('The type of local peer identity. The local peer may be identified by: 1. an IP address, or 2. a host name.')
cikeFailLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailLocalValue.setStatus('current')
if mibBuilder.loadTexts: cikeFailLocalValue.setDescription('The value of the local peer identity. If the local peer type is an IP Address, then this is the IP Address used to identify the local peer. If the local peer type is a host name, then this is the host name used to identify the local peer.')
cikeFailRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 6), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailRemoteType.setStatus('current')
if mibBuilder.loadTexts: cikeFailRemoteType.setDescription('The type of remote peer identity. The remote peer may be identified by: 1. an IP address, or 2. a host name.')
cikeFailRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailRemoteValue.setStatus('current')
if mibBuilder.loadTexts: cikeFailRemoteValue.setDescription('The value of the remote peer identity. If the remote peer type is an IP Address, then this is the IP Address used to identify the remote peer. If the remote peer type is a host name, then this is the host name used to identify the remote peer.')
cikeFailLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cikeFailLocalAddr.setDescription('The IP address of the local peer.')
cikeFailRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 9), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cikeFailRemoteAddr.setDescription('The IP address of the remote peer.')
cipSecFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1), )
if mibBuilder.loadTexts: cipSecFailTable.setStatus('current')
if mibBuilder.loadTexts: cipSecFailTable.setDescription('The IPsec Phase-2 Failure Table. This table is implemented as a sliding window in which only the last n entries are maintained. The maximum number of entries is specified by the cipSecFailTableSize object.')
cipSecFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailIndex"))
if mibBuilder.loadTexts: cipSecFailEntry.setStatus('current')
if mibBuilder.loadTexts: cipSecFailEntry.setDescription('Each entry contains the attributes associated with an IPsec Phase-1 failure.')
cipSecFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecFailIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecFailIndex.setDescription('The IPsec Phase-2 Failure Table index. The value of the index is a number which begins at one and is incremented with each IPsec Phase-1 failure. The value of this object will wrap at 2,147,483,647.')
cipSecFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("internalError", 2), ("peerEncodingError", 3), ("proposalFailure", 4), ("protocolUseFail", 5), ("nonExistentSa", 6), ("decryptFailure", 7), ("encryptFailure", 8), ("inAuthFailure", 9), ("outAuthFailure", 10), ("compression", 11), ("sysCapExceeded", 12), ("peerDelRequest", 13), ("peerLost", 14), ("seqNumRollOver", 15), ("operRequest", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailReason.setStatus('current')
if mibBuilder.loadTexts: cipSecFailReason.setDescription('The reason for the failure. Possible reasons include: 1 = other 2 = internal error occurred 3 = peer encoding error 4 = proposal failure 5 = protocol use failure 6 = non-existent security association 7 = decryption failure 8 = encryption failure 9 = inbound authentication failure 10 = outbound authentication failure 11 = compression failure 12 = system capacity failure 13 = peer delete request was received 14 = contact with peer was lost 15 = sequence number rolled over 16 = operator requested termination.')
cipSecFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailTime.setStatus('current')
if mibBuilder.loadTexts: cipSecFailTime.setDescription('The value of sysUpTime in hundredths of seconds at the time of the failure.')
cipSecFailTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cipSecFailTunnelIndex.setDescription('The Phase-2 Tunnel index (cipSecTunIndex).')
cipSecFailSaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailSaSpi.setStatus('current')
if mibBuilder.loadTexts: cipSecFailSaSpi.setDescription('The security association SPI value.')
cipSecFailPktSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailPktSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cipSecFailPktSrcAddr.setDescription("The packet's source IP address.")
cipSecFailPktDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailPktDstAddr.setStatus('current')
if mibBuilder.loadTexts: cipSecFailPktDstAddr.setDescription("The packet's destination IP address.")
cipSecTrapCntlIkeTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 1), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeTunnelStart.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIkeTunnelStart.setDescription('This object defines the administrative state of sending the IPsec IKE Phase-1 Tunnel Start TRAP')
cipSecTrapCntlIkeTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 2), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeTunnelStop.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIkeTunnelStop.setDescription('This object defines the administrative state of sending the IPsec IKE Phase-1 Tunnel Stop TRAP')
cipSecTrapCntlIkeSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 3), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeSysFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIkeSysFailure.setDescription('This object defines the administrative state of sending the IPsec IKE Phase-1 System Failure TRAP')
cipSecTrapCntlIkeCertCrlFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 4), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeCertCrlFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIkeCertCrlFailure.setDescription('This object defines the administrative state of sending the IPsec IKE Phase-1 Certificate/CRL Failure TRAP')
cipSecTrapCntlIkeProtocolFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 5), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeProtocolFail.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIkeProtocolFail.setDescription('This object defines the administrative state of sending the IPsec IKE Phase-1 Protocol Failure TRAP')
cipSecTrapCntlIkeNoSa = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 6), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeNoSa.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIkeNoSa.setDescription('This object defines the administrative state of sending the IPsec IKE Phase-1 No Security Association TRAP')
cipSecTrapCntlIpSecTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 7), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecTunnelStart.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecTunnelStart.setDescription('This object defines the administrative state of sending the IPsec Phase-2 Tunnel Start TRAP')
cipSecTrapCntlIpSecTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 8), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecTunnelStop.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecTunnelStop.setDescription('This object defines the administrative state of sending the IPsec Phase-2 Tunnel Stop TRAP')
cipSecTrapCntlIpSecSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 9), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecSysFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecSysFailure.setDescription('This object defines the administrative state of sending the IPsec Phase-2 System Failure TRAP')
cipSecTrapCntlIpSecSetUpFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 10), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecSetUpFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecSetUpFailure.setDescription('This object defines the administrative state of sending the IPsec Phase-2 Set Up Failure TRAP')
cipSecTrapCntlIpSecEarlyTunTerm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 11), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecEarlyTunTerm.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecEarlyTunTerm.setDescription('This object defines the administrative state of sending the IPsec Phase-2 Early Tunnel Termination TRAP')
cipSecTrapCntlIpSecProtocolFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 12), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecProtocolFail.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecProtocolFail.setDescription('This object defines the administrative state of sending the IPsec Phase-2 Protocol Failure TRAP')
cipSecTrapCntlIpSecNoSa = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 13), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecNoSa.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlIpSecNoSa.setDescription('This object defines the administrative state of sending the IPsec Phase-2 No Security Association TRAP')
cipSecMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 2))
cipSecMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0))
cikeTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 1)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLifeTime"))
if mibBuilder.loadTexts: cikeTunnelStart.setStatus('current')
if mibBuilder.loadTexts: cikeTunnelStart.setDescription('This notification is generated when an IPsec Phase-1 IKE Tunnel becomes active.')
cikeTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 2)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunActiveTime"))
if mibBuilder.loadTexts: cikeTunnelStop.setStatus('current')
if mibBuilder.loadTexts: cikeTunnelStop.setDescription('This notification is generated when an IPsec Phase-1 IKE Tunnel becomes inactive.')
cikeSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 3)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeSysFailure.setStatus('current')
if mibBuilder.loadTexts: cikeSysFailure.setDescription('This notification is generated when the processing for an IPsec Phase-1 IKE Tunnel experiences an internal or system capacity error.')
cikeCertCrlFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 4)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeCertCrlFailure.setStatus('current')
if mibBuilder.loadTexts: cikeCertCrlFailure.setDescription('This notification is generated when the processing for an IPsec Phase-1 IKE Tunnel experiences a Certificate or a Certificate Revoke List (CRL) related error.')
cikeProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 5)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: cikeProtocolFailure.setDescription('This notification is generated when the processing for an IPsec Phase-1 IKE Tunnel experiences a protocol related error.')
cikeNoSa = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 6)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeNoSa.setStatus('current')
if mibBuilder.loadTexts: cikeNoSa.setDescription('This notification is generated when the processing for an IPsec Phase-1 IKE Tunnel experiences a non-existent security association error.')
cipSecTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 7)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeSize"))
if mibBuilder.loadTexts: cipSecTunnelStart.setStatus('current')
if mibBuilder.loadTexts: cipSecTunnelStart.setDescription('This notification is generated when an IPsec Phase-2 Tunnel becomes active.')
cipSecTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 8)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"))
if mibBuilder.loadTexts: cipSecTunnelStop.setStatus('current')
if mibBuilder.loadTexts: cipSecTunnelStop.setDescription('This notification is generated when an IPsec Phase-2 Tunnel becomes inactive.')
cipSecSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 9)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"))
if mibBuilder.loadTexts: cipSecSysFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecSysFailure.setDescription('This notification is generated when the processing for an IPsec Phase-2 Tunnel experiences an internal or system capacity error.')
cipSecSetUpFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 10)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cipSecSetUpFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecSetUpFailure.setDescription('This notification is generated when the setup for an IPsec Phase-2 Tunnel fails.')
cipSecEarlyTunTerm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 11)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"))
if mibBuilder.loadTexts: cipSecEarlyTunTerm.setStatus('current')
if mibBuilder.loadTexts: cipSecEarlyTunTerm.setDescription('This notification is generated when an an IPsec Phase-2 Tunnel is terminated earily or before expected.')
cipSecProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 12)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"))
if mibBuilder.loadTexts: cipSecProtocolFailure.setStatus('current')
if mibBuilder.loadTexts: cipSecProtocolFailure.setDescription('This notification is generated when the processing for an IPsec Phase-2 Tunnel experiences a protocol related error.')
cipSecNoSa = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 13))
if mibBuilder.loadTexts: cipSecNoSa.setStatus('current')
if mibBuilder.loadTexts: cipSecNoSa.setDescription('This notification is generated when the processing for an IPsec Phase-2 Tunnel experiences a non-existent security association error.')
cipSecMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 3))
cipSecMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1))
cipSecMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 2))
cipSecMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 2, 1)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecLevelsGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseOneGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseTwoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecMIBCompliance = cipSecMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cipSecMIBCompliance.setDescription('The compliance statement for SNMP entities the IP Security Protocol. This has been replaced by cipSecMIBComplianceRev1.')
cipSecMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 2, 2)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecLevelsGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseOneGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseTwoGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGWStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecMIBComplianceRev1 = cipSecMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cipSecMIBComplianceRev1.setDescription('The compliance statement for SNMP entities the IP Security Protocol.')
cipSecLevelsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 1)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecMibLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecLevelsGroup = cipSecLevelsGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecLevelsGroup.setDescription('This group consists of a: 1) IPsec MIB Level')
cipSecPhaseOneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 2)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInitTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInitTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalRespTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalSysCapFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalHashValidFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerActiveTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunNegoMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHashAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunAuthMethod"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunSaRefreshThreshold"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunStatus"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrIpSecTunIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecPhaseOneGroup = cipSecPhaseOneGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecPhaseOneGroup.setDescription('This group consists of: 1) IPsec Phase-1 Global Objects 2) IPsec Phase-1 Peer Table 3) IPsec Phase-1 Tunnel Table 4) IPsec Phase-1 Correlation Table')
cipSecPhaseTwoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 3)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInReplayDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalProtocolUseFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalSysCapFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIkeTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIkeTunnelAlive"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunKeyType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunEncapMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunSaLifeSizeThreshold"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunSaLifeTimeThreshold"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunExpiredSaInstances"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunCurrentSaInstances"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaDecompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaCompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInReplayDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunStatus"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalPort"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemotePort"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiDirection"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecPhaseTwoGroup = cipSecPhaseTwoGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecPhaseTwoGroup.setDescription('This group consists of: 1) IPsec Phase-2 Global Statistics 2) IPsec Phase-2 Tunnel Table 3) IPsec Phase-2 Endpoint Table 4) IPsec Phase-2 Security Protection Index Table')
cipSecHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 4)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecHistTableSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecHistCheckPoint"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistTermReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistActiveIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerLocalValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerIntIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerRemoteValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistNegoMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistHashAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistAuthMethod"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistStartTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistTotalSas"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistTermReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistActiveIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistIkeTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistKeyType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistEncapMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistLifeSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistStartTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistTotalSas"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaDecompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaCompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInReplayDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistTunIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistActiveIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalPort"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemotePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecHistoryGroup = cipSecHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecHistoryGroup.setDescription('This group consists of: 1) IPsec History Global Objects 2) IPsec Phase-1 History Objects 3) IPsec Phase-2 History Objects')
cipSecFailuresGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 5)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailTableSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailLocalValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailRemoteValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailSaSpi"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailPktSrcAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailPktDstAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecFailuresGroup = cipSecFailuresGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecFailuresGroup.setDescription('This group consists of: 1) IPsec Failure Global Objects 2) IPsec Phase-1 Tunnel Failure Table 3) IPsec Phase-2 Tunnel Failure Table')
cipSecTrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 6)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeCertCrlFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeProtocolFail"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeNoSa"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecSetUpFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecEarlyTunTerm"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecProtocolFail"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecNoSa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecTrapCntlGroup = cipSecTrapCntlGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecTrapCntlGroup.setDescription('This group of objects controls the sending of IPsec TRAPs.')
cipSecNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 7)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeCertCrlFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeProtocolFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeNoSa"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSetUpFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEarlyTunTerm"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecProtocolFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecNoSa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecNotificationGroup = cipSecNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecNotificationGroup.setDescription('This group contains the notifications for the IPsec MIB.')
cipSecGWStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 8)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInitTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInitTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWRespTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWSysCapFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWHashValidFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInReplayDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWProtocolUseFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWSysCapFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecGWStatsGroup = cipSecGWStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cipSecGWStatsGroup.setDescription('')
mibBuilder.exportSymbols("CISCO-IPSEC-FLOW-MONITOR-MIB", cipSecTunInOctets=cipSecTunInOctets, cikeTunHistLocalAddr=cikeTunHistLocalAddr, cipSecTunOutSaAhAuthAlgo=cipSecTunOutSaAhAuthAlgo, cikePeerCorrIntIndex=cikePeerCorrIntIndex, cipSecEndPtRemoteName=cipSecEndPtRemoteName, cikeTunHistEncryptAlgo=cikeTunHistEncryptAlgo, IPSIpAddress=IPSIpAddress, cikeTunLocalValue=cikeTunLocalValue, cipSecTunLifeTime=cipSecTunLifeTime, cikePeerTable=cikePeerTable, cipSecEndPtHistLocalAddr2=cipSecEndPtHistLocalAddr2, cikeGlobalInDropPkts=cikeGlobalInDropPkts, cipSecTunInOctWraps=cipSecTunInOctWraps, cipSecTunHcOutOctets=cipSecTunHcOutOctets, cipSecTunnelStart=cipSecTunnelStart, cipSecTunHistOutAuths=cipSecTunHistOutAuths, cipSecTunOutDropPkts=cipSecTunOutDropPkts, cipSecPhase2GWProtocolUseFails=cipSecPhase2GWProtocolUseFails, cipSecSpiStatus=cipSecSpiStatus, cipSecTunHcInDecompOctets=cipSecTunHcInDecompOctets, cipSecEndPtHistLocalAddr1=cipSecEndPtHistLocalAddr1, cipSecEndPtHistRemoteName=cipSecEndPtHistRemoteName, cikeTunRemoteType=cikeTunRemoteType, cipSecEndPtRemoteAddr2=cipSecEndPtRemoteAddr2, cipSecEndPtTable=cipSecEndPtTable, cipSecTunOutSaEncryptAlgo=cipSecTunOutSaEncryptAlgo, cikeGlobalOutPkts=cikeGlobalOutPkts, cipSecTunEncapMode=cipSecTunEncapMode, cikeTunHistOutNotifys=cikeTunHistOutNotifys, IkeNegoMode=IkeNegoMode, cikeGlobalStats=cikeGlobalStats, cikePhase1GWInP2ExchgRejects=cikePhase1GWInP2ExchgRejects, cikeTunRemoteValue=cikeTunRemoteValue, cipSecSpiIndex=cipSecSpiIndex, cikePeerCorrSeqNum=cikePeerCorrSeqNum, cikePhase1GWOutP2ExchgInvalids=cikePhase1GWOutP2ExchgInvalids, cipSecFailReason=cipSecFailReason, cipSecTunInAuths=cipSecTunInAuths, cipSecEndPtRemotePort=cipSecEndPtRemotePort, cikeTunHistInOctets=cikeTunHistInOctets, cikeTunNegoMode=cikeTunNegoMode, cipSecHistoryGroup=cipSecHistoryGroup, cikeTunHistLifeTime=cikeTunHistLifeTime, cipSecGlobalOutOctets=cipSecGlobalOutOctets, cikeFailLocalValue=cikeFailLocalValue, cipSecTunHistOutSaEncryptAlgo=cipSecTunHistOutSaEncryptAlgo, cipSecTunHistInDecrypts=cipSecTunHistInDecrypts, cikePhase1GWOutP2SaDelRequests=cikePhase1GWOutP2SaDelRequests, cikeGlobalInP2Exchgs=cikeGlobalInP2Exchgs, cikeGlobalInitTunnels=cikeGlobalInitTunnels, cikeTunOutOctets=cikeTunOutOctets, cipSecTunHistInDecryptFails=cipSecTunHistInDecryptFails, cipSecPhase2GWActiveTunnels=cipSecPhase2GWActiveTunnels, cipSecGlobalHcOutOctets=cipSecGlobalHcOutOctets, cikeFailTime=cikeFailTime, cikeTunHistOutP2ExchgRejects=cikeTunHistOutP2ExchgRejects, cikePhase1GWInPkts=cikePhase1GWInPkts, cikeTunInPkts=cikeTunInPkts, cikeTunHistInPkts=cikeTunHistInPkts, cikeNoSa=cikeNoSa, cipSecTrapCntlIkeProtocolFail=cipSecTrapCntlIkeProtocolFail, cipSecTunInDecrypts=cipSecTunInDecrypts, cipSecTunHistInDropPkts=cipSecTunHistInDropPkts, cipSecSysFailure=cipSecSysFailure, cikeGlobalPreviousTunnels=cikeGlobalPreviousTunnels, cikeGlobalOutP2Exchgs=cikeGlobalOutP2Exchgs, cipSecSpiEntry=cipSecSpiEntry, cikePhase1GWOutNotifys=cikePhase1GWOutNotifys, cipSecTunInSaDecompAlgo=cipSecTunInSaDecompAlgo, cipSecSpiDirection=cipSecSpiDirection, cipSecFailPktSrcAddr=cipSecFailPktSrcAddr, cipSecTunHistInDecompOctets=cipSecTunHistInDecompOctets, cipSecGlobalOutOctWraps=cipSecGlobalOutOctWraps, cipSecTrapCntlIkeSysFailure=cipSecTrapCntlIkeSysFailure, cikePhase1GWInP2ExchgInvalids=cikePhase1GWInP2ExchgInvalids, cipSecPhase2GWOutPkts=cipSecPhase2GWOutPkts, cipSecFailTableSize=cipSecFailTableSize, cikeTunLifeTime=cikeTunLifeTime, cipSecSpiTable=cipSecSpiTable, cikeTunHistOutPkts=cikeTunHistOutPkts, cikePeerCorrLocalType=cikePeerCorrLocalType, cipSecTunHistOutEncrypts=cipSecTunHistOutEncrypts, cikePeerCorrEntry=cikePeerCorrEntry, cikeTunnelStop=cikeTunnelStop, cipSecLevelsGroup=cipSecLevelsGroup, cipSecGlobalPreviousTunnels=cipSecGlobalPreviousTunnels, cipSecTunOutPkts=cipSecTunOutPkts, cipSecPhase2GWInDecompOctets=cipSecPhase2GWInDecompOctets, cipSecTunHistLifeSize=cipSecTunHistLifeSize, cipSecPhaseTwo=cipSecPhaseTwo, cipSecTrapCntlIkeTunnelStart=cipSecTrapCntlIkeTunnelStart, EncapMode=EncapMode, cipSecEndPtLocalAddr2=cipSecEndPtLocalAddr2, cikeTunHistTermReason=cikeTunHistTermReason, cipSecTunInReplayDropPkts=cipSecTunInReplayDropPkts, cipSecMIBCompliances=cipSecMIBCompliances, cikeTunOutP2ExchgRejects=cikeTunOutP2ExchgRejects, cipSecTunnelStop=cipSecTunnelStop, cipSecMIBConformance=cipSecMIBConformance, cikePeerCorrRemoteType=cikePeerCorrRemoteType, cikeTunSaRefreshThreshold=cikeTunSaRefreshThreshold, cipSecHistCheckPoint=cipSecHistCheckPoint, cipSecNotificationGroup=cipSecNotificationGroup, cikeTunInP2Exchgs=cikeTunInP2Exchgs, cipSecPhase2GWOutEncrypts=cipSecPhase2GWOutEncrypts, cipSecTunOutSaEspAuthAlgo=cipSecTunOutSaEspAuthAlgo, IkePeerType=IkePeerType, cikePhase1GWInNotifys=cikePhase1GWInNotifys, cipSecTrapCntlIpSecSysFailure=cipSecTrapCntlIpSecSysFailure, cipSecTunHistInAuths=cipSecTunHistInAuths, cikePhase1GWInitTunnelFails=cikePhase1GWInitTunnelFails, cipSecGlobalOutDrops=cipSecGlobalOutDrops, cikeProtocolFailure=cikeProtocolFailure, cipSecTunHistInPkts=cipSecTunHistInPkts, cipSecGlobalOutEncryptFails=cipSecGlobalOutEncryptFails, cipSecGlobalHcInOctets=cipSecGlobalHcInOctets, cikeGlobalOutDropPkts=cikeGlobalOutDropPkts, cikePeerLocalAddr=cikePeerLocalAddr, cipSecFailGlobal=cipSecFailGlobal, cikeTunHistInP2ExchgRejects=cikeTunHistInP2ExchgRejects, cipSecGlobalOutAuthFails=cipSecGlobalOutAuthFails, cikeTunStatus=cikeTunStatus, ciscoIpSecFlowMonitorMIB=ciscoIpSecFlowMonitorMIB, cipSecSpiValue=cipSecSpiValue, cikeTunHistActiveIndex=cikeTunHistActiveIndex, cikeTunHistInP2Exchgs=cikeTunHistInP2Exchgs, cikeCertCrlFailure=cikeCertCrlFailure, CompAlgo=CompAlgo, cipSecGlobalStats=cipSecGlobalStats, cipSecEndPtRemoteType=cipSecEndPtRemoteType, cikePhase1GWHashValidFails=cikePhase1GWHashValidFails, cikeGlobalOutNotifys=cikeGlobalOutNotifys, cipSecTunHistOutSaDiffHellmanGrp=cipSecTunHistOutSaDiffHellmanGrp, cikePeerCorrTable=cikePeerCorrTable, cikePeerIntIndex=cikePeerIntIndex, cipSecTunHistOutOctets=cipSecTunHistOutOctets, cikeTunOutDropPkts=cikeTunOutDropPkts, cipSecTunHistEncapMode=cipSecTunHistEncapMode, cipSecTunHistActiveIndex=cipSecTunHistActiveIndex, TrapStatus=TrapStatus, cikeTunHistNegoMode=cikeTunHistNegoMode, cipSecPhase2GWStatsEntry=cipSecPhase2GWStatsEntry, cikePeerActiveTime=cikePeerActiveTime, cipSecEndPtHistLocalName=cipSecEndPtHistLocalName, cipSecTunHistInOctets=cipSecTunHistInOctets, cipSecGlobalInAuthFails=cipSecGlobalInAuthFails, cipSecTrapCntlIpSecNoSa=cipSecTrapCntlIpSecNoSa, cipSecTunTotalRefreshes=cipSecTunTotalRefreshes, cipSecTunHistOutSaEspAuthAlgo=cipSecTunHistOutSaEspAuthAlgo, cikeTunHistInNotifys=cikeTunHistInNotifys, cipSecTunInSaEncryptAlgo=cipSecTunInSaEncryptAlgo, cipSecTunHistInSaDecompAlgo=cipSecTunHistInSaDecompAlgo, cipSecTrapCntlIpSecProtocolFail=cipSecTrapCntlIpSecProtocolFail, cipSecGlobalInDrops=cipSecGlobalInDrops, cipSecPhase2GWOutAuths=cipSecPhase2GWOutAuths, cikeGlobalOutOctets=cikeGlobalOutOctets, cikeTunnelStart=cikeTunnelStart, cipSecPhase2GWInDecrypts=cipSecPhase2GWInDecrypts, cipSecMIBCompliance=cipSecMIBCompliance, cikeFailRemoteValue=cikeFailRemoteValue, cipSecGlobalInDecompOctets=cipSecGlobalInDecompOctets, cipSecTunHcOutUncompOctets=cipSecTunHcOutUncompOctets, cipSecTrapCntlIkeNoSa=cipSecTrapCntlIkeNoSa, cipSecGlobalInDecompOctWraps=cipSecGlobalInDecompOctWraps, cipSecTunHistLifeTime=cipSecTunHistLifeTime, cipSecTunOutOctets=cipSecTunOutOctets, cipSecMIBObjects=cipSecMIBObjects, cipSecPhase2GWNoSaFails=cipSecPhase2GWNoSaFails, PYSNMP_MODULE_ID=ciscoIpSecFlowMonitorMIB, cikeTunHistOutP2SaDelRequests=cikeTunHistOutP2SaDelRequests, TunnelStatus=TunnelStatus, cipSecTunKeyType=cipSecTunKeyType, cipSecEndPtHistTunIndex=cipSecEndPtHistTunIndex, cikeGlobalOutP2ExchgRejects=cikeGlobalOutP2ExchgRejects, cikeGlobalRespTunnelFails=cikeGlobalRespTunnelFails, cipSecTunActiveTime=cipSecTunActiveTime, cipSecProtocolFailure=cipSecProtocolFailure, cikeGlobalInP2ExchgRejects=cikeGlobalInP2ExchgRejects, cipSecTunHistInSaEspAuthAlgo=cipSecTunHistInSaEspAuthAlgo, cikeTunRemoteName=cikeTunRemoteName, cipSecPhase2GWOutAuthFails=cipSecPhase2GWOutAuthFails, cipSecGlobalOutAuths=cipSecGlobalOutAuths, cipSecTunLifeSize=cipSecTunLifeSize, cipSecTunIndex=cipSecTunIndex, cikeTunEncryptAlgo=cikeTunEncryptAlgo, cikeTunHistRemoteName=cikeTunHistRemoteName, cipSecFailPktDstAddr=cipSecFailPktDstAddr, cipSecEndPtIndex=cipSecEndPtIndex, cipSecTunHistRemoteAddr=cipSecTunHistRemoteAddr, cipSecTunHistIndex=cipSecTunHistIndex, cikeTunHistDiffHellmanGrp=cikeTunHistDiffHellmanGrp, cipSecEndPtHistLocalType=cipSecEndPtHistLocalType, cikePeerActiveTunnelIndex=cikePeerActiveTunnelIndex, cipSecTunHistHcOutUncompOctets=cipSecTunHistHcOutUncompOctets, cipSecFailSaSpi=cipSecFailSaSpi, cikeTunAuthMethod=cikeTunAuthMethod, cipSecGlobalHcOutUncompOctets=cipSecGlobalHcOutUncompOctets, cikePhase1GWOutP2Exchgs=cikePhase1GWOutP2Exchgs, cipSecFailGlobalCntl=cipSecFailGlobalCntl, cipSecPhase2GWInAuths=cipSecPhase2GWInAuths, cipSecTunHistStartTime=cipSecTunHistStartTime, cikeTunHistStartTime=cikeTunHistStartTime, cipSecGlobalInReplayDrops=cipSecGlobalInReplayDrops, cipSecGlobalActiveTunnels=cipSecGlobalActiveTunnels, cipSecTunIkeTunnelIndex=cipSecTunIkeTunnelIndex, cipSecTunOutEncrypts=cipSecTunOutEncrypts, cipSecTunSaLifeSizeThreshold=cipSecTunSaLifeSizeThreshold, EndPtType=EndPtType, cikePeerEntry=cikePeerEntry, cikeFailReason=cikeFailReason, cikeTunnelTable=cikeTunnelTable, cikeTunInP2SaDelRequests=cikeTunInP2SaDelRequests, cipSecTunHistTotalSas=cipSecTunHistTotalSas, cipSecTunHistTotalRefreshes=cipSecTunHistTotalRefreshes, cikeTunHistPeerRemoteType=cikeTunHistPeerRemoteType, cikeTunnelHistEntry=cikeTunnelHistEntry, cipSecTunOutUncompOctets=cipSecTunOutUncompOctets, cipSecGlobalInOctWraps=cipSecGlobalInOctWraps, cikeTunIndex=cikeTunIndex, cipSecGlobalInAuths=cipSecGlobalInAuths, cipSecEndPtHistRemoteAddr1=cipSecEndPtHistRemoteAddr1, cikeGlobalDecryptFails=cikeGlobalDecryptFails, cipSecTunHistInSaAhAuthAlgo=cipSecTunHistInSaAhAuthAlgo, cipSecTunHistHcInOctets=cipSecTunHistHcInOctets, cikeTunOutP2Exchgs=cikeTunOutP2Exchgs, cipSecTrapCntlIkeTunnelStop=cipSecTrapCntlIkeTunnelStop, cipSecFailTunnelIndex=cipSecFailTunnelIndex, cikeTunHistOutOctets=cikeTunHistOutOctets, cikeTunTotalRefreshes=cikeTunTotalRefreshes, cipSecTunOutSaCompAlgo=cipSecTunOutSaCompAlgo, cipSecEndPtHistLocalProtocol=cipSecEndPtHistLocalProtocol, cikeGlobalNoSaFails=cikeGlobalNoSaFails, cikePhase1GWInOctets=cikePhase1GWInOctets, cipSecGlobalInPkts=cipSecGlobalInPkts, cipSecPhase2GWSysCapFails=cipSecPhase2GWSysCapFails, cikePeerLocalValue=cikePeerLocalValue, cikePhase1GWDecryptFails=cikePhase1GWDecryptFails, cipSecEndPtHistRemoteType=cipSecEndPtHistRemoteType, cipSecFailPhaseTwo=cipSecFailPhaseTwo, cikeTunInP2ExchgInvalids=cikeTunInP2ExchgInvalids, cikeTunnelHistTable=cikeTunnelHistTable, cikeTunLocalAddr=cikeTunLocalAddr, cikeTunDiffHellmanGrp=cikeTunDiffHellmanGrp, cikePeerRemoteType=cikePeerRemoteType, cipSecFailuresGroup=cipSecFailuresGroup, cipSecEndPtLocalName=cipSecEndPtLocalName, cipSecTunHistOutAuthFails=cipSecTunHistOutAuthFails, cipSecTrapCntl=cipSecTrapCntl, cipSecPhase2GWInDecryptFails=cipSecPhase2GWInDecryptFails, cikePeerCorrLocalValue=cikePeerCorrLocalValue, cipSecTunSaLifeTimeThreshold=cipSecTunSaLifeTimeThreshold, cipSecFailPhaseOne=cipSecFailPhaseOne, cipSecPhase2GWInDrops=cipSecPhase2GWInDrops, cipSecPhase2GWPreviousTunnels=cipSecPhase2GWPreviousTunnels)
mibBuilder.exportSymbols("CISCO-IPSEC-FLOW-MONITOR-MIB", cipSecEndPtLocalType=cipSecEndPtLocalType, cikeGlobalInP2SaDelRequests=cikeGlobalInP2SaDelRequests, cikeTunHistTotalSas=cikeTunHistTotalSas, cipSecGWStatsGroup=cipSecGWStatsGroup, cikePeerRemoteAddr=cikePeerRemoteAddr, cipSecEndPtEntry=cipSecEndPtEntry, cikeTunRemoteAddr=cikeTunRemoteAddr, cikeTunHistPeerRemoteValue=cikeTunHistPeerRemoteValue, cikeTunHistOutDropPkts=cikeTunHistOutDropPkts, cipSecNoSa=cipSecNoSa, cipSecTunLocalAddr=cipSecTunLocalAddr, cipSecGlobalOutPkts=cipSecGlobalOutPkts, cipSecEndPtRemoteProtocol=cipSecEndPtRemoteProtocol, cikePhase1GWRespTunnelFails=cikePhase1GWRespTunnelFails, cipSecTunInDecryptFails=cipSecTunInDecryptFails, cipSecTunInDecompOctets=cipSecTunInDecompOctets, cikePhase1GWSysCapFails=cikePhase1GWSysCapFails, cikeTunHistRemoteAddr=cikeTunHistRemoteAddr, cipSecEndPtHistLocalPort=cipSecEndPtHistLocalPort, cikePhase1GWStatsEntry=cikePhase1GWStatsEntry, cipSecTunHistInOctWraps=cipSecTunHistInOctWraps, cikeGlobalOutP2SaDelRequests=cikeGlobalOutP2SaDelRequests, cipSecPhaseOneGroup=cipSecPhaseOneGroup, cipSecTunInSaDiffHellmanGrp=cipSecTunInSaDiffHellmanGrp, cipSecGlobalHcInDecompOctets=cipSecGlobalHcInDecompOctets, cipSecTunHistInDecompOctWraps=cipSecTunHistInDecompOctWraps, cikePhase1GWNoSaFails=cikePhase1GWNoSaFails, cipSecTunHistOutUncompOctWraps=cipSecTunHistOutUncompOctWraps, cikeGlobalHashValidFails=cikeGlobalHashValidFails, cipSecMIBNotifications=cipSecMIBNotifications, cipSecEndPtHistEntry=cipSecEndPtHistEntry, cipSecTunHistOutSaCompAlgo=cipSecTunHistOutSaCompAlgo, cipSecMIBComplianceRev1=cipSecMIBComplianceRev1, cipSecGlobalInDecrypts=cipSecGlobalInDecrypts, cikePhase1GWAuthFails=cikePhase1GWAuthFails, cipSecTunHistOutDropPkts=cipSecTunHistOutDropPkts, cipSecHistPhaseTwo=cipSecHistPhaseTwo, cikeGlobalOutP2ExchgInvalids=cikeGlobalOutP2ExchgInvalids, cikeGlobalActiveTunnels=cikeGlobalActiveTunnels, cikeGlobalInNotifys=cikeGlobalInNotifys, cikeGlobalInOctets=cikeGlobalInOctets, cikePhase1GWStatsTable=cikePhase1GWStatsTable, cipSecMIBNotificationPrefix=cipSecMIBNotificationPrefix, cipSecPhase2GWOutOctets=cipSecPhase2GWOutOctets, cikeGlobalInP2ExchgInvalids=cikeGlobalInP2ExchgInvalids, cipSecTrapCntlIpSecEarlyTunTerm=cipSecTrapCntlIpSecEarlyTunTerm, cipSecTunOutEncryptFails=cipSecTunOutEncryptFails, cipSecPhase2GWInOctWraps=cipSecPhase2GWInOctWraps, cipSecTunHistInSaEncryptAlgo=cipSecTunHistInSaEncryptAlgo, cipSecTunHistActiveTime=cipSecTunHistActiveTime, cipSecTrapCntlIpSecTunnelStop=cipSecTrapCntlIpSecTunnelStop, cikeTunHistPeerLocalType=cikeTunHistPeerLocalType, cikePhase1GWOutP2ExchgRejects=cikePhase1GWOutP2ExchgRejects, cikeTunOutP2ExchgInvalids=cikeTunOutP2ExchgInvalids, DiffHellmanGrp=DiffHellmanGrp, cipSecTunOutUncompOctWraps=cipSecTunOutUncompOctWraps, cipSecFailIndex=cipSecFailIndex, cipSecPhase2GWOutUncompOctets=cipSecPhase2GWOutUncompOctets, cipSecTunnelHistEntry=cipSecTunnelHistEntry, cikeSysFailure=cikeSysFailure, cipSecPhase2GWOutEncryptFails=cipSecPhase2GWOutEncryptFails, cipSecGlobalInDecryptFails=cipSecGlobalInDecryptFails, KeyType=KeyType, cipSecEndPtHistActiveIndex=cipSecEndPtHistActiveIndex, cipSecTunnelTable=cipSecTunnelTable, cipSecSetUpFailure=cipSecSetUpFailure, cipSecTunHistHcInDecompOctets=cipSecTunHistHcInDecompOctets, cipSecTunInDropPkts=cipSecTunInDropPkts, cipSecEndPtLocalPort=cipSecEndPtLocalPort, cipSecTunHistHcOutOctets=cipSecTunHistHcOutOctets, cipSecEndPtLocalProtocol=cipSecEndPtLocalProtocol, cipSecTunInSaAhAuthAlgo=cipSecTunInSaAhAuthAlgo, EncryptAlgo=EncryptAlgo, cipSecTunOutSaDiffHellmanGrp=cipSecTunOutSaDiffHellmanGrp, cipSecHistTableSize=cipSecHistTableSize, cikeFailLocalType=cikeFailLocalType, cikePhase1GWPreviousTunnels=cikePhase1GWPreviousTunnels, cipSecTunHistTermReason=cipSecTunHistTermReason, cikeFailLocalAddr=cikeFailLocalAddr, cipSecFailTime=cipSecFailTime, cipSecTunOutOctWraps=cipSecTunOutOctWraps, cipSecMIBGroups=cipSecMIBGroups, cikeGlobalAuthFails=cikeGlobalAuthFails, cipSecHistGlobal=cipSecHistGlobal, cikeTunHistInP2ExchgInvalids=cikeTunHistInP2ExchgInvalids, cipSecGlobalOutUncompOctWraps=cipSecGlobalOutUncompOctWraps, cikeGlobalInitTunnelFails=cikeGlobalInitTunnelFails, cipSecGlobalOutEncrypts=cipSecGlobalOutEncrypts, cikeTunHashAlgo=cikeTunHashAlgo, cipSecTunHcInOctets=cipSecTunHcInOctets, cikeTunHistHashAlgo=cikeTunHistHashAlgo, cipSecEndPtHistIndex=cipSecEndPtHistIndex, cipSecTunInAuthFails=cipSecTunInAuthFails, cipSecEndPtRemoteAddr1=cipSecEndPtRemoteAddr1, cipSecPhase2GWInOctets=cipSecPhase2GWInOctets, cipSecPhase2GWInDecompOctWraps=cipSecPhase2GWInDecompOctWraps, cikeTunInP2ExchgRejects=cikeTunInP2ExchgRejects, cikePhase1GWOutPkts=cikePhase1GWOutPkts, cipSecTunHistOutUncompOctets=cipSecTunHistOutUncompOctets, cipSecFailTable=cipSecFailTable, cipSecTunInPkts=cipSecTunInPkts, cipSecHistory=cipSecHistory, cikePhase1GWInP2Exchgs=cikePhase1GWInP2Exchgs, cipSecTrapCntlGroup=cipSecTrapCntlGroup, cikePhase1GWOutOctets=cikePhase1GWOutOctets, cipSecTunHistIkeTunnelIndex=cipSecTunHistIkeTunnelIndex, cipSecTunHistOutEncryptFails=cipSecTunHistOutEncryptFails, cipSecEndPtHistRemoteAddr2=cipSecEndPtHistRemoteAddr2, cikeTunLocalName=cikeTunLocalName, cipSecTunCurrentSaInstances=cipSecTunCurrentSaInstances, cipSecFailEntry=cipSecFailEntry, cipSecTunHistInAuthFails=cipSecTunHistInAuthFails, cipSecEndPtHistRemotePort=cipSecEndPtHistRemotePort, cikeFailEntry=cikeFailEntry, cikeTunActiveTime=cikeTunActiveTime, cikePhase1GWInP2SaDelRequests=cikePhase1GWInP2SaDelRequests, cipSecPhase2GWOutOctWraps=cipSecPhase2GWOutOctWraps, cipSecMibLevel=cipSecMibLevel, cikeTunHistTotalRefreshes=cikeTunHistTotalRefreshes, cipSecEarlyTunTerm=cipSecEarlyTunTerm, cipSecTunHistInSaDiffHellmanGrp=cipSecTunHistInSaDiffHellmanGrp, cikeTunHistInDropPkts=cikeTunHistInDropPkts, cikeGlobalInPkts=cikeGlobalInPkts, cipSecTunHistOutOctWraps=cipSecTunHistOutOctWraps, cikeTunInDropPkts=cikeTunInDropPkts, cikeTunOutPkts=cikeTunOutPkts, cipSecSpiProtocol=cipSecSpiProtocol, cipSecFailures=cipSecFailures, cikeTunOutP2SaDelRequests=cikeTunOutP2SaDelRequests, cikePhase1GWInDropPkts=cikePhase1GWInDropPkts, cikeTunOutNotifys=cikeTunOutNotifys, cikeTunHistInP2SaDelRequests=cikeTunHistInP2SaDelRequests, cikePeerCorrIpSecTunIndex=cikePeerCorrIpSecTunIndex, cikeTunInNotifys=cikeTunInNotifys, cipSecTunHistInReplayDropPkts=cipSecTunHistInReplayDropPkts, cipSecTunOutAuthFails=cipSecTunOutAuthFails, cikeTunHistOutP2ExchgInvalids=cikeTunHistOutP2ExchgInvalids, cipSecTunHistLocalAddr=cipSecTunHistLocalAddr, cipSecPhase2GWStatsTable=cipSecPhase2GWStatsTable, AuthAlgo=AuthAlgo, cipSecGlobalOutUncompOctets=cipSecGlobalOutUncompOctets, cikeFailIndex=cikeFailIndex, cipSecTunHistOutPkts=cipSecTunHistOutPkts, cikePeerRemoteValue=cikePeerRemoteValue, cikeTunInOctets=cikeTunInOctets, cipSecTunOutAuths=cipSecTunOutAuths, IkeAuthMethod=IkeAuthMethod, cipSecLevels=cipSecLevels, cikeTunHistPeerIntIndex=cikeTunHistPeerIntIndex, cipSecTrapCntlIkeCertCrlFailure=cipSecTrapCntlIkeCertCrlFailure, IkeHashAlgo=IkeHashAlgo, cipSecEndPtHistTable=cipSecEndPtHistTable, cikeTunHistLocalName=cikeTunHistLocalName, cipSecTunHistOutSaAhAuthAlgo=cipSecTunHistOutSaAhAuthAlgo, cipSecEndPtLocalAddr1=cipSecEndPtLocalAddr1, cipSecTunHistKeyType=cipSecTunHistKeyType, cipSecTunInSaEspAuthAlgo=cipSecTunInSaEspAuthAlgo, cikeTunHistAuthMethod=cikeTunHistAuthMethod, cipSecEndPtHistRemoteProtocol=cipSecEndPtHistRemoteProtocol, cipSecPhase2GWInReplayDrops=cipSecPhase2GWInReplayDrops, cikeGlobalSysCapFails=cikeGlobalSysCapFails, cipSecPhase2GWInPkts=cipSecPhase2GWInPkts, cikePeerCorrRemoteValue=cikePeerCorrRemoteValue, cikeTunHistIndex=cikeTunHistIndex, cipSecHistPhaseOne=cipSecHistPhaseOne, cikeTunHistActiveTime=cikeTunHistActiveTime, cipSecTunStatus=cipSecTunStatus, cipSecGlobalInOctets=cipSecGlobalInOctets, cikePhase1GWActiveTunnels=cikePhase1GWActiveTunnels, cipSecHistGlobalCntl=cipSecHistGlobalCntl, cikeTunLocalType=cikeTunLocalType, cipSecTunExpiredSaInstances=cipSecTunExpiredSaInstances, cikeTunHistPeerLocalValue=cikeTunHistPeerLocalValue, cikeFailRemoteAddr=cikeFailRemoteAddr, cipSecTrapCntlIpSecSetUpFailure=cipSecTrapCntlIpSecSetUpFailure, cipSecPhase2GWInAuthFails=cipSecPhase2GWInAuthFails, cikeFailTable=cikeFailTable, cipSecPhaseOne=cipSecPhaseOne, cipSecPhase2GWOutDrops=cipSecPhase2GWOutDrops, cikeFailRemoteType=cikeFailRemoteType, cipSecGlobalNoSaFails=cipSecGlobalNoSaFails, cipSecTunRemoteAddr=cipSecTunRemoteAddr, cipSecTunnelHistTable=cipSecTunnelHistTable, cipSecTrapCntlIpSecTunnelStart=cipSecTrapCntlIpSecTunnelStart, cikePeerLocalType=cikePeerLocalType, cipSecGlobalProtocolUseFails=cipSecGlobalProtocolUseFails, cikeTunnelEntry=cikeTunnelEntry, cikePhase1GWOutDropPkts=cikePhase1GWOutDropPkts, cipSecTunnelEntry=cipSecTunnelEntry, cipSecTunInDecompOctWraps=cipSecTunInDecompOctWraps, cipSecPhase2GWOutUncompOctWraps=cipSecPhase2GWOutUncompOctWraps, cipSecTunIkeTunnelAlive=cipSecTunIkeTunnelAlive, cipSecPhaseTwoGroup=cipSecPhaseTwoGroup, cikeTunHistOutP2Exchgs=cikeTunHistOutP2Exchgs, cikePhase1GWInitTunnels=cikePhase1GWInitTunnels, cipSecGlobalSysCapFails=cipSecGlobalSysCapFails)
