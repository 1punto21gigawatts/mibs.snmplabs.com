#
# PySNMP MIB module CISCO-LWAPP-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-WLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Counter64, NotificationType, iso, Counter32, Gauge32, TimeTicks, ObjectIdentity, MibIdentifier, IpAddress, Bits, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "NotificationType", "iso", "Counter32", "Gauge32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "IpAddress", "Bits", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TimeStamp, RowStatus, DisplayString, MacAddress, TruthValue, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "RowStatus", "DisplayString", "MacAddress", "TruthValue", "StorageType")
ciscoLwappWlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 512))
ciscoLwappWlanMIB.setRevisions(('2016-04-07 00:00', '2015-04-23 00:00', '2015-04-17 00:00', '2014-11-05 00:00', '2013-03-30 00:00', '2012-06-21 00:00', '2011-03-10 00:00', '2010-03-03 00:00', '2007-04-02 00:00', '2007-02-03 00:00', '2006-03-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappWlanMIB.setRevisionsDescriptions(('Added new tables ciscoLwappAPGroupsHyperlocationConfig to support Hyperlocation feature and ciscoLwappAPGroupsPortConfig to support AP Group LAN port configurations. Added new groups ciscoLwappWlanConfigGroupSup8, ciscoLwappWlanConfigGroupSup9. Added new compliance ciscoLwappWlanMIBComplianceRev8 which deprecates ciscoLwappWlanMIBComplianceRev7.', 'Added Default value to the cLWlanMulticastInterface object.', 'Added cLWlan11acMuMimoEnabled object to cLWlanConfigEntry. ciscoLwappWlanMIBComplianceRev6 is superceded by ciscoLwappWlanMIBComplianceRev7 Added new group ciscoLwappWlanConfigGroupSup6.', 'Added the cLWlanSelfAnchorEnabled to support the mobility self anchor. cLAPGroupsVlanMappingInterfaceName is superceded by cLAPGroupsVlanMappingInterfaceNameRev1. ciscoLwappAPGroupsVlanConfigGroup is superceded by ciscoLwappAPGroupsVlanConfigGroupSup2. ciscoLwappWlanMIBComplianceRev5 is superceded by ciscoLwappWlanMIBComplianceRev6 Added cLWlanUniversalAdmin object to cLWlanConfigEntry. Added new group ciscoLwappWlanConfigGroupSup5.', 'Added cLWlanFlexibleNetflowTable to support AVC feature. Added new object group CiscoLwappWlanConfigFlexibleNetflowGroup. Added new compliance ciscoLwappWlanMIBComplianceRev5 which deprecates ciscoLwappWlanMIBComplianceRev4.', 'Added the following objects WLAN QoS Config table, AP group Venue Table, ciscoLwappWlanQosConfigGroup ciscoLwappWlanConfigGroupSup4 ciscoLwappWlan11uConfigGroupsup2 ciscoLwappWlanHotSpot2ConfigGroupSup1 ciscoLwappAPGroupsVlanConfigGroupSup1 cLAPGroupsVenueConfigGroup cLAPGroupsMultipleVenueGroup ciscoLwappWlanConfigClientGroupSup2 WLAN IOS objects. - Added the following objects to cLWlan11uTable. cLWlan11uHessid, cLWlan11uNetworkAuthType, cLWlan11uOui, cLWlan11uOuiIsBeacon, cWlan11uOuiRowStatus, cLWlan11uOuiStorageType, cLWlan11uRealmName, cLWlan11uRealmRowStatus, cLWlan11uRealmEapMethod, cLWlan11uRealmEapRowStatus, cLWlan11uRealmEapAuthMethod, cLWlan11uRealmEapAuthParam, cLWlan11uRealmEapAuthRowStatus, cLWlan11uDomainName, cLWlan11uDomainRowStatus, cLWlan11u3gppCountryCode, cLWlan11u3gppNetworkCode, cLWlan11u3gppRowStatus, cLWlan11uIpAddressAvailIpv4, cLWlan11uIpAddressAvailIpv6 - Added the following OBJECT-GROUPs: ciscoLwappWlan11uConfigGroupsup1 ciscoLwappWlanServiceAdvertisementConfigGroup, ciscoLwappWlanHotSpot2ConfigGroup - Added new compliance ciscoLwappWlanMIBComplianceRev4 which deprecates ciscoLwappWlanMIBComplianceRev3.', 'Added the following objects to cLWlanConfigTable. cLWlanReAnchorRoamedVoiceClientsEnable, cLWlanMulticastInterfaceEnable, cLWlanMulticastInterface, cLWlanMulticastDirectEnable, cLWlanNACPostureSupport, cLWlanMaxClientsAccepted, cLWlanScanDeferPriority, cLWlanScanDeferTime, cLWlanLanSubType, cLWlanWebAuthOnMacFilterFailureEnabled, cLWlanStaticIpTunnelingEnabled. - Added new group ciscoLwappWlanConfigGroupSup3. - Added new compliance ciscoLwappWlanMIBComplianceRev3 which deprecates ciscoLwappWlanMIBComplianceRev2.', 'Added the following OBJECT-GROUPs: ciscoLwappWlan11uConfigGroup ciscoLwappAPGroupsVlanConfigGroup ciscoLwappWlanConfigGroupSup2 ciscoLwappWlanConfigClientGroupSup1', 'Added following object in cLWlanConfigClientTable cLWlanP2PBlocking', 'Added following objects in cLWlanConfigTable: cLWlanProfileName cLWlanSsid cLWlanDiagChan cLWlanStorageType Added following table: cLWlanConfigClientTable Added the following OBJECT-GROUPs: ciscoLwappWlanConfigGroupSup1 ciscoLwappWlanConfigClientGroup Added ciscoLwappWlanMIBComplianceRev1 MODULE-COMPLIANCE.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappWlanMIB.setLastUpdated('201504230000Z')
if mibBuilder.loadTexts: ciscoLwappWlanMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappWlanMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappWlanMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. This MIB helps to manage the WLANs on the controller. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected to. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the controllers. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Access Control List ( ACL ) A list of rules used to restrict the traffic reaching an interface or the CPU or WLAN. Each ACL is an ordered set of rules and actions. If a rule matches then the action for that rule is applied to the packet. 802.1x The IEEE ratified standard for enforcing port based access control. This was originally intended for use on wired LANs and later extended for use in 802.11 WLAN environments. This defines an architecture with three main parts - a supplicant (Ex. an 802.11 wireless client), an authenticator (the AP) and an authentication server(a Radius server). The authenticator passes messages back and forth between the supplicant and the authentication server to enable the supplicant get authenticated to the network. Temporal Key Integrity Protocol ( TKIP ) A security protocol defined to enhance the limitations of WEP. Message Integrity Check and per-packet keying on all WEP-encrypted frames are two significant enhancements provided by TKIP to WEP. Cisco Key Integrity Protocol ( CKIP ) A proprietary implementation similar to TKIP. CKIP implements key permutation for protecting the CKIP key against attacks. Other features of CKIP include expansion of encryption key to 16 bytes of length for key protection and MIC to ensure data integrity. Wired Equivalent Privacy ( WEP ) A security method defined by 802.11. WEP uses a symmetric key stream cipher called RC4 to encrypt the data packets. Wi-Fi Protected Access ( WPA ) Wi-Fi Protected Access (WPA and WPA2) are security systems created in response to several serious weaknesses found in Wired Equivalent Privacy (WEP). WPA implements the majority of the IEEE 802.11i standard, and was intended as an intermediate measure to take the place of WEP while 802.11i was prepared. WPA is designed to work with all wireless network interface cards, but not necessarily with first generation wireless access points. WLAN Layer 2 Security WLAN layer 2 (MAC) security defines the encryption and authentication approaches such as 802.1x, WPA, WPA2, CKIP and WEP. Delivery Traffic Indication Map ( DTIM ) DTIM is measured in beacon intervals and is the time period during which multicast/broadcast packets are sent to clients. This helps client to go in Power Saving mode and helps to save battery power. Network Admission Control (NAC) Cisco NAC uses the network infrastructure to enforce security policy compliance on all devices that seek to access network computing resources. With the Cisco NAC appliance, network administrators can authenticate, authorize, evaluate, and remediate wired, wireless, and remote users and their machines prior to network access. The Cisco NAC appliance identifies whether networked devices such as laptops, IP phones, or game consoles are compliant with network security policies, and repairs any vulnerabilities before it permits access to the network. Out of Band (OOB) Out-of-band deployments require user traffic to traverse through the NAC appliance only within authentication, posture assessment, and remediation. When a user is authenticated and passes all policy checks, the traffic is switched normally through the network and bypasses the NAC server. Band Select The 2.4 GHz band is congested and clients have to contend with numerous performance challenges. These consist of interference from Bluetooth, microwave ovens, cordless phones, etc.; protection mechanisms from 802.11b legacy clients; and co-channel interference from other access points due to 802.11bg?s limit of three non-overlapping channels. Allowing client Wi-Fi radios capable of dual band (2.4 and 5 GHz) operation move to the less congested 5 GHz radios would improve the overall performance of the network. The Band Select algorithm is based on probe response suppression on clients 2.4G radio. The feature is OFF by default and has to be manually switched ON globally for a WLC. It can be optionally over-ridden per-SSID to disallow it. Network Access Identifier ( NAI ) In order to provide roaming services, it is necessary to have a standardized method for identifying users. NAI is actually the user identity submitted by the client during network authentication. KTS (Key Telephone System) Key Telephone System is an alternative to a private branch exchange (PBX)phone system. A KTS is equipped with several buttons that allow a caller to directly select outgoing lines or incoming calls, and use intercom and conference facilities. HALO (Hyperlocation) Hyperlocation is a technique of calculating location using Angle of Arrival(AoA) tracks 802.11 OFDM clients (meaning 802.11a/g/n/ac clients) that are associated(connected) on the network and is able to do so with much higher accuracy than conventional Real Time Location Systems(RTLS) that rely on only RSSI (RF Signal Strength). PakRSSI (Packet Received Signal Strength Indicator) PakRSSI is a measurement of the power present in a received radio signal. POE (Power Over Ethernet) Power over Ethernet or PoE describes any of several standardized or ad-hoc systems which pass electrical power along with data on Ethernet cabling. This allows a single cable to provide both data connection and electrical power to devices such as wireless access points or IP cameras. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol [3] IEEE 802.11 - The original 1 Mbit/s and 2 Mbit/s, 2.4 GHz RF and IR standard.")
ciscoLwappWlanMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 0))
ciscoLwappWlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1))
ciscoLwappWlanMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 2))
ciscoLwappWlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1))
ciscoLwappAPGroupsVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2))
ciscoLwappWlan11uConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3))
ciscoLwappWlanServiceAdvertisementConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 4))
ciscoLwappWlanHotSpot2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5))
ciscoLwappAPGroupsHyperlocationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8))
ciscoLwappAPGroupsPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9))
cLWlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1), )
if mibBuilder.loadTexts: cLWlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigTable.setDescription("This table represents the WLAN configuration sent by the controller to the LWAPP APs for their operation. LWAPP APs exchange configuration messages with the controller and get the required configuration for their 802.11 related operations. As part of these messages, the WLAN configuration is pushed by the controller to the LWAPP APs. This table doesn't have any dependencies on other existing tables. By defining cLWlanIndex, the unique identifier for a WLAN, this table provides a common index structure for use in several other new tables that populate information on security related attributes like authentication, encryption, 802.11 parameters, Quality-of-Service attributes etc., that would relate to a particular WLAN. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLWlanRowStatus object.")
cLWlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigEntry.setDescription('Each entry in this table represents the WLAN configuration sent by the controller to LWAPP APs for use during their operations. entries can be added/deleted by explicit management actions by NMS or by user console')
cLWlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 517)))
if mibBuilder.loadTexts: cLWlanIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlanIndex.setDescription('This object uniquely identifies one instance of a WLAN on the controller. The value 513-517 indicates wired clients.')
cLWlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanRowStatus.setDescription("This is the status column for this row and used to create, modify and delete specific instances of rows in this table. This table supports modification of writable objects when the RowStatus is 'active'. The following objects are mandatory for successful creation of an entry: cLWlanProfileName cLWlanSsid.")
cLWlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanProfileName.setStatus('current')
if mibBuilder.loadTexts: cLWlanProfileName.setDescription("This object represents the profile name assigned to this WLAN. The name assigned to a WLAN has to be unique across all the WLANs on the controller. An administrator can assign a meaningful name that could later be used to refer a particular WLAN on the controller. This object cannot be modified when cLWlanRowStatus is 'active'.")
cLWlanSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanSsid.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsid.setDescription("This object represents the SSID assigned to this WLAN. The access points will broadcast this SSID on this WLAN. Different WLAN could use the same SSID as long as the layer 2 security is different. This object cannot be modified when cLWlanRowStatus is 'active'.")
cLWlanDiagChan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanDiagChan.setStatus('current')
if mibBuilder.loadTexts: cLWlanDiagChan.setDescription("This object is used to configure this WLAN as a diagnostic WLAN. A value of 'true' indicates that the WLAN can be used for diagnostic purposes. A value of 'false' indicates that the WLAN can not be used for diagnostic purposes.")
cLWlanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanStorageType.setStatus('current')
if mibBuilder.loadTexts: cLWlanStorageType.setDescription('This object represnts the storage type for this conceptual row.')
cLWlanIsWired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanIsWired.setStatus('current')
if mibBuilder.loadTexts: cLWlanIsWired.setDescription("This object is used to configure this WLAN as a wired or wireless WLAN. A value of 'true' indicates that this is a wired WLAN. A value of 'false' indicates that this is a wireless WLAN.")
cLWlanIngressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanIngressInterface.setStatus('current')
if mibBuilder.loadTexts: cLWlanIngressInterface.setDescription('This object represents the ingress interface attached to the wireless lan.')
cLWlanNACSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanNACSupport.setStatus('current')
if mibBuilder.loadTexts: cLWlanNACSupport.setDescription("This object is used to configure the NAC- Out Of Band(OOB) support for the WLAN. A value of 'true' indicates that the WLAN supports the NAC- Out Of Band(OOB) feature. A value of 'false' indicates that the WLAN does not support the NAC- Out Of Band(OOB) feature.")
cLWlanWepKeyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLWlanWepKeyChange.setStatus('current')
if mibBuilder.loadTexts: cLWlanWepKeyChange.setDescription('This object represents the time when the static WEP key was changed by the user.')
cLWlanChdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanChdEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanChdEnable.setDescription("This object indicates whether Coverage Hole Detection (CHD) is enabled on the controller. A value of 'true' indicates CHD is on and a value of 'false' indicates CHD is turned off for this WLAN.")
cLWlan802dot11anDTIM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('Beacon Intervals').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan802dot11anDTIM.setStatus('current')
if mibBuilder.loadTexts: cLWlan802dot11anDTIM.setDescription('This object represents DTIM configuration per WLAN for each 802.11 network. The DTIM value is measured in Beacon Intervals.')
cLWlan802dot11bgnDTIM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('Beacon Intervals').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan802dot11bgnDTIM.setStatus('current')
if mibBuilder.loadTexts: cLWlan802dot11bgnDTIM.setDescription('This object represents DTIM configuration per WLAN for each 802.11 network. The DTIM value is measured in Beacon Intervals.')
cLWlanLoadBalancingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanLoadBalancingEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanLoadBalancingEnable.setDescription("This object indicates whether Load Balancing is enabled on the controller for this WLAN . A value of 'true' indicates Load Balance is on and a value of 'false' indicates Load Balance is turned off for this WLAN.")
cLWlanBandSelectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanBandSelectEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanBandSelectEnable.setDescription("This object indicates whether Band Select is enabled on the controller for this WLAN. A value of 'true' indicates Band Select is on and a value of 'false' indicates Band Select is turned off for this WLAN.")
cLWlanPassiveClientEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanPassiveClientEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanPassiveClientEnable.setDescription("This object specifies whether passive client is enabled on the controller for this WLAN. A value of 'true' indicates passive client is on and a value of 'false' indicates passive client is turned off for this WLAN.")
cLWlanReAnchorRoamedVoiceClientsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanReAnchorRoamedVoiceClientsEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanReAnchorRoamedVoiceClientsEnable.setDescription("This object specifies whether the Roamed Voice Client Re-Anchoring feature is enabled on the controller for this WLAN. A value of 'true' indicates the roamed voice clients will get re-anchored. A value of 'false' indicates the roamed voice clients re-anchoring is turned off for this WLAN.")
cLWlanMulticastInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanMulticastInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanMulticastInterfaceEnable.setDescription("This object specifies whether multicast interface is enabled on the controller. A value of 'true' indicates that multicast interface feature is enabled and the interface represented by 'cLWlanMulticastInterface' would be used for the multicast traffic on this WLAN. A value of 'false' indicates that multicast interface feature is turned off for this WLAN.")
cLWlanMulticastInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 19), SnmpAdminString().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanMulticastInterface.setStatus('current')
if mibBuilder.loadTexts: cLWlanMulticastInterface.setDescription('This object specifies the interface, which would be used for the multicast traffic for all the clients that are associated to this WLAN.')
cLWlanMulticastDirectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanMulticastDirectEnable.setStatus('current')
if mibBuilder.loadTexts: cLWlanMulticastDirectEnable.setDescription("This object specifies whether multicast direct is enabled on the controller for this WLAN. A value of 'true' indicates multicast direct is ON. A value of 'false' indicates multicast direct is turned off for this WLAN.")
cLWlanNACPostureSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanNACPostureSupport.setStatus('current')
if mibBuilder.loadTexts: cLWlanNACPostureSupport.setDescription("This object is used to configure the NAC-Posture support for the WLAN. A value of 'true' indicates that the WLAN supports the NAC-Posture feature. A value of 'false' indicates that the WLAN does not support the NAC-Posture feature.")
cLWlanMaxClientsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanMaxClientsAccepted.setStatus('current')
if mibBuilder.loadTexts: cLWlanMaxClientsAccepted.setDescription('This object specifies the maximum number of client connection allowed for this WLAN. A value of 0 indicates that there is no limit on maximum allowed clients for this WLAN.')
cLWlanScanDeferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 23), Bits().clone(namedValues=NamedValues(("bit0", 0), ("bit1", 1), ("bit2", 2), ("bit3", 3), ("bit4", 4), ("bit5", 5), ("bit6", 6), ("bit7", 7))).clone(namedValues=NamedValues(("bit5", 5), ("bit6", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanScanDeferPriority.setStatus('current')
if mibBuilder.loadTexts: cLWlanScanDeferPriority.setDescription('This object specifies the priority of packets that defer the off-channel scan. This is used in off-channel scanning to improve performance for medical devices using Radio Resource Management. Each bit represents a packet type for which off-channel scanning needs to be deferred. bit0 - Best effort. bit1 - Background bit2 - Spare bit3 - Excellent effort bit4 - Controlled load bit5 - Video, less than 100-ms latency and jitter bit6 - Voice, less than 10-ms latency and jitter bit7 - Network control')
cLWlanScanDeferTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanScanDeferTime.setStatus('current')
if mibBuilder.loadTexts: cLWlanScanDeferTime.setDescription('This object specifies the minimum number of milliseconds that must elapse without the appearance of a specified packet before the access point radios begin an off-channel scan.')
cLWlanLanSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wirelessLan", 1), ("guestLan", 2), ("remoteLan", 3), ("other", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanLanSubType.setStatus('current')
if mibBuilder.loadTexts: cLWlanLanSubType.setDescription("This object specifies the sub-type of the LAN created. This has to be congruent with cLWlanIswired. If cLWlanIswired is set to 'true', allowed values are guestLan(2) and remoteLan(3). If cLWlanIswired is set to 'false', allowed value is wirelessLan(1). A value of other(4) will be returned if it doesnt match any values defined here. This value is not configurable.")
cLWlanWebAuthOnMacFilterFailureEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanWebAuthOnMacFilterFailureEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWlanWebAuthOnMacFilterFailureEnabled.setDescription("This object is used to configure the Web based authentication on Mac Filter failure support for the WLAN. A value of 'true' enables Web authentication on MAC filter failure for the WLAN. A value of 'false' disables Web authentication on MAC filter failure for the WLAN.")
cLWlanStaticIpTunnelingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanStaticIpTunnelingEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWlanStaticIpTunnelingEnabled.setDescription("This object is used to configure the Static IP Tunneling of clients feature support for the WLAN. A value of 'true' enables static IP Tunneling of client for the WLAN. A value of 'false' disables static IP Tunneling of client for the WLAN.")
cLWlanKtsCacSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanKtsCacSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWlanKtsCacSupportEnabled.setDescription("This object is used to configure the KTS CAC support for the WLAN. A value of 'true' enables the KTS based CAC support for this wlan. A value of 'false' disables the KTS based CAC support for this wlan.")
cLWlanWifiDirectPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("allow", 2), ("notAllow", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanWifiDirectPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanWifiDirectPolicyStatus.setDescription('This object is used to allow/disallow wi-fi direct clients to/from joining the infrastructure network. disable(1) - WFD is completely disabled. allow(2) - allow WFD clients disallow(3) - controller rejects association request from WFD clients only if it has P2P IE with concurrency enabled.')
cLWlanWebAuthIPv6AclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanWebAuthIPv6AclName.setStatus('current')
if mibBuilder.loadTexts: cLWlanWebAuthIPv6AclName.setDescription("This object represents the name of the Web Auth IPv6 ACL applied to this WLAN. If it is required to remove the ACL name for a WLAN, it should be set to 'none'. ACL's are applied in the following priority order - interfaces ACLs, WLAN ACLs, client ACLs.")
cLWlanHotSpot2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2Enabled.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2Enabled.setDescription("This object represents the hotSpot2 feature for this WLAN. A value of 'true' enables the HotSpot2 for this wlan. A value of 'false' disables the HotSpot2 for this wlan.")
cLWlanMaxClientsAllowedPerRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanMaxClientsAllowedPerRadio.setStatus('current')
if mibBuilder.loadTexts: cLWlanMaxClientsAllowedPerRadio.setDescription('This object represents the maximum allowed clients per AP radio for a WLAN.')
cLWlanDhcpDeviceProfiling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanDhcpDeviceProfiling.setStatus('current')
if mibBuilder.loadTexts: cLWlanDhcpDeviceProfiling.setDescription("This object specifies the status of DHCP Device Profiling feature for this WLAN. A value of 'true' enables DHCP Device Profiling on this wlan. A value of 'false' disables DHCP the Device Profiling on this wlan.")
cLWlanMacAuthOverDot1xEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanMacAuthOverDot1xEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWlanMacAuthOverDot1xEnabled.setDescription("This object specifies the configuration state of authentication failover to Dot1x for the WLAN. A value of 'true' enables mac auth or dot1x for the WLAN. A value of 'false' disables mac auth or dot1x for the WLAN.")
cLWlanUserTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 35), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanUserTimeout.setStatus('current')
if mibBuilder.loadTexts: cLWlanUserTimeout.setDescription('This object represents the timeout value of user for a WLAN.')
cLWlanUserIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 36), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanUserIdleThreshold.setStatus('current')
if mibBuilder.loadTexts: cLWlanUserIdleThreshold.setDescription('This object represents the user idle threshold value in bytes for a WLAN.')
cLWlanHttpDeviceProfiling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 37), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHttpDeviceProfiling.setStatus('current')
if mibBuilder.loadTexts: cLWlanHttpDeviceProfiling.setDescription("This object specifies the status of HTTP Device Profiling feature for this WLAN. A value of 'true' enables HTTP Device Profiling on this wlan. A value of 'false' disables the HTTP Device Profiling on this wlan.")
cLWlanHotSpotClearConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpotClearConfig.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpotClearConfig.setDescription("This object is used to clear all the configuration related to HotSpot feature at WLAN level. A value of 'enable' would clear the configuration. When queries for the current value, always 'disable' would be returned.")
cLWlanRadiusAuthFourthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRadiusAuthFourthServer.setStatus('current')
if mibBuilder.loadTexts: cLWlanRadiusAuthFourthServer.setDescription('This object specifies the Fourth Radius Authentication Server for this wlan.')
cLWlanRadiusAuthFifthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRadiusAuthFifthServer.setStatus('current')
if mibBuilder.loadTexts: cLWlanRadiusAuthFifthServer.setDescription('This object specifies the Fifth Radius Authentication Server for this wlan.')
cLWlanRadiusAuthSixthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRadiusAuthSixthServer.setStatus('current')
if mibBuilder.loadTexts: cLWlanRadiusAuthSixthServer.setDescription('This object specifies the Sixth Radius Authentication Server for this wlan.')
cLWlanRadiusAcctFourthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRadiusAcctFourthServer.setStatus('current')
if mibBuilder.loadTexts: cLWlanRadiusAcctFourthServer.setDescription('This object specifies the Fourth Radius Accounting Server for this wlan.')
cLWlanRadiusAcctFifthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRadiusAcctFifthServer.setStatus('current')
if mibBuilder.loadTexts: cLWlanRadiusAcctFifthServer.setDescription('This object specifies the Fifth Radius Accounting Server for this wlan.')
cLWlanRadiusAcctSixthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanRadiusAcctSixthServer.setStatus('current')
if mibBuilder.loadTexts: cLWlanRadiusAcctSixthServer.setDescription('This object specifies the Sixth Radius Accounting Server for this wlan.')
cLWlanSelfAnchorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 64), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanSelfAnchorEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWlanSelfAnchorEnabled.setDescription('This object specifies whether self anchoring is enabled for the wlan.')
cLWlanUniversalAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 65), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanUniversalAdmin.setStatus('current')
if mibBuilder.loadTexts: cLWlanUniversalAdmin.setDescription('This object allows universal admin mode. to be enabled on a 802.1X/WPA/WPA2 secured WLAN.')
cLWlan11acMuMimoEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 1, 1, 66), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11acMuMimoEnabled.setStatus('current')
if mibBuilder.loadTexts: cLWlan11acMuMimoEnabled.setDescription("This object is used to configure 11ac Mu Mimo mode for the WLAN. A value of 'true' enables Mu Mimo mode for the WLAN. A value of 'false' disables Mu Mimo mode for the WLAN.")
cLWlan11uTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1), )
if mibBuilder.loadTexts: cLWlan11uTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uTable.setDescription('This table represents the generic 802.11u configuration for a particular WLAN in a controller. This table has a one-to-one relationship with cLWlanConfigTable. There exist a row in this table corresponding to each row representing a WLAN in cLWlanConfigTable.')
cLWlan11uEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlan11uEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uEntry.setDescription('Each entry in this table represents the generic 802.11u configuration for a WLAN.')
cLWlan11uStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uStatus.setDescription("This object is used to configure the 802.11u support for this WLAN. A value of 'true' indicates that 802.11u support is enabled for this WLAN and a value of 'false' indicates that the support is disabled for this WLAN.")
cLWlan11uInternetAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uInternetAccess.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uInternetAccess.setDescription("This object is used to configure the internet access with respect to 802.11u feature for this WLAN. A value of 'true' indicates that internet access is enabled for this WLAN and a value of 'false' indicates that the internet access is disabled for this WLAN.")
cLWlan11uNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("invalid", 1), ("private", 2), ("privateWithGuestAccess", 3), ("chargeablePublicNetwork", 4), ("freePublicNetwork", 5), ("testOrEquipment", 6), ("wildcard", 7), ("personnalDeviceNetwork", 8), ("emgerencyServiceOnlyNetwork", 9), ("notConfigured", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uNetworkType.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uNetworkType.setDescription('This object indicates the network type with respect to 802.11u feature , for this WLAN. invalid (1) : Invalid network type. private(2) : Non-authorized users are not permitted on this network. privateWithGuestAccess(3) : Private network but guest accounts area available. chargeablePublicNetwork(4) : The network is accessible to anyone, however, access to the network requires payment. freePublicNetwork(5) : The network is accessible to anyone and no charges apply for the network use. testOrEquipment(6) : The network is used for test or experimental purposes only. wildcard(6) : Wildcard network type. personnalDeviceNetwork(8) : The network is accessible only by Personnal Device. emgerencyServiceOnlyNetwork(9) : Emergency Service network Type.')
cLWlan11uVenueGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unspecified", 1), ("assembly", 2), ("business", 3), ("educational", 4), ("factoryAndIndustrial", 5), ("institutional", 6), ("mercantile", 7), ("residential", 8), ("storage", 9), ("utilityAndMisc", 10), ("vehicular", 11), ("outdoor", 12))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uVenueGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cLWlan11uVenueGroup.setDescription('This object indicates the venue group with respect to 802.11u feature , for this WLAN.')
cLWlan11uVenueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unspecified", 1), ("assembly", 2), ("business", 3), ("educational", 4), ("factoryAndIndustrial", 5), ("institutional", 6), ("mercantile", 7), ("residential", 8), ("storage", 9), ("utilityAndMisc", 10), ("vehicular", 11), ("outdoor", 12))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uVenueType.setStatus('deprecated')
if mibBuilder.loadTexts: cLWlan11uVenueType.setDescription('This object indicates the venue type within a particular venue group, with respect to 802.11u feature , for this WLAN. The Venue group-Venue Type relationship is per the following table: Venue Group Venue Type Code Venue Description =========== =============== ================= 0 0 Unspecified 0 1-255 Reserved 1 0 Unspecified Assembly 1 1 Arena 1 2 Stadium 1 3 Passenger Terminal (e.g., airport, port, bus station, ferry terminal, train station) 1 4 Amphitheater 1 5 Amusement Park 1 6 Place of Worship 1 7 Convention Center 1 8 Library 1 9 Museum 1 10 Restaurant 1 11 Theater 1 12 Bar 1 13 Coffee Shop 1 14 Zoo or Aquarium 1 15 Emergency Coordination Center 1 16-255 Reserved 2 0 Unspecified Business 2 1 Doctor or Dentist office 2 2 Bank 2 3 Fire Station 2 4 Police Station 2 6 Post Office 2 7 Professional Office 2 8 Research and Development Facility 2 9 Attorney Office 2 10-255 Reserved 3 0 Unspecified Educational 3 1 School, Primary 3 2 School, Secondary 3 3 University or College 3 4-255 Reserved 4 0 Unspecified Factory and Industrial 4 1 Factory 4 2-255 Reserved 5 0 Unspecified Institutional 5 1 Hospital 5 2 Long-Term Care Facility (e.g., Nursing home, Hospice, etc.) 5 3 Alcohol and Drug Re-habilitation Center 5 4 Group Home 5 5 Prison or Jail 5 6-255 Reserved 6 0 Unspecified Mercantile 6 1 Retail Store 6 2 Grocery Market 6 3 Automotive Service Station 6 4-255 Reserved 7 0 Unspecified Residential 7 1 Hotel or Motel 7 2 Dormitory 7 3 Boarding House 7 4-255 Reserved 8 0-255 Reserved 9 0-255 Reserved 10 0 Unspecified Vehicular 10 1 Automobile or Truck 10 2 Airplane 10 3 Bus 10 4 Ferry 10 5 Ship or Boat 10 6 Train 10 7-255 Reserved 11 0 Unspecified Outdoor 11 1 Muni-mesh Network 11 2 City Park 11 3-255 Reserved')
cLWlan11uVenueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uVenueName.setStatus('deprecated')
if mibBuilder.loadTexts: cLWlan11uVenueName.setDescription('This is the venue name defined for this WLAN with respect to 802.11u feature.')
cLWlan11uHessid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uHessid.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uHessid.setDescription('This object is used to configure the Hessid for this WLAN.')
cLWlan11uNetworkAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("acceptance", 1), ("enrollment", 2), ("redirection", 3), ("dnsRedirection", 4), ("notConfigured", 5))).clone('notConfigured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uNetworkAuthType.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uNetworkAuthType.setDescription('This object is used to configure the NetworkAuthType for a WLAN')
cLWlan11uIpAddressAvailIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvailable", 1), ("public", 2), ("portRestricted", 3), ("singleNATPrivate", 4), ("doubleNATPrivate", 5), ("portRestrictedAndSingleNATPrivate", 6), ("portRestrictedAndDoubleNATPrivate", 7), ("unKnown", 8))).clone('notAvailable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uIpAddressAvailIpv4.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uIpAddressAvailIpv4.setDescription('This object represents the IPv4 Address Availability.')
cLWlan11uIpAddressAvailIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2), ("unKnown", 3))).clone('notAvailable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlan11uIpAddressAvailIpv6.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uIpAddressAvailIpv6.setDescription('This object represents the IPv6 Address Availability.')
cLWlan11uOuiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2), )
if mibBuilder.loadTexts: cLWlan11uOuiTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOuiTable.setDescription('This table represents the OUI (organizational unique identifier) configuration for a particular WLAN. OUIs are assigned by IEEE. A WLAN can have up to 32 OUIs defined. OUI configuration per WLAN is required for the 802.11u feature to work. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLWlan11uOuiRowStatus object.')
cLWlan11uOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiIndex"))
if mibBuilder.loadTexts: cLWlan11uOuiEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOuiEntry.setDescription('Each entry in this table represents the OUI (organizational unique identifier) configuration for a particular WLAN. OUIs are assigned by IEEE. A WLAN can have up to 32 OUIs defined. OUI configuration per WLAN is required for the 802.11u feature to work.')
cLWlan11uOuiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLWlan11uOuiIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOuiIndex.setDescription('This object uniquely identifies one instance of a OUI on a WLAN.Each WLAN can have up to 32 OUIs defined. Each OUI should be unique.')
cLWlan11uOui = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(6, 6), ValueSizeConstraint(10, 10), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uOui.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOui.setDescription('The OUI field is a public OUI assigned by the IEEE. Each OUI identifies a roaming consortium (group of SSPs with inter-SSP roaming agreement) or a single SSP.WLAN can have up to 32 OUIs defined. Each OUI defined for a WLAN should be unique. For example the value for Cisco is 004096.')
cLWlan11uOuiIsBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uOuiIsBeacon.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOuiIsBeacon.setDescription("This object is used to configure this particular OUI as one of the beacon OUIs. Beacon can carry at most 3 OUIs. User should be able to select 0-3 OUIs (from the already configured OUIs for this WLAN). A value of 'true' indicates that this OUI would be carried in beacon. A value of 'false' indicates that this OUI is not a beacon OUI.")
cLWlan11uOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uOuiRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOuiRowStatus.setDescription('Row Status for creation/deletion of a particular OUI entry in the table.')
cLWlan11uOuiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uOuiStorageType.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uOuiStorageType.setDescription('This object represnts the storage type for this conceptual row.')
cLWlan11uRealmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 3), )
if mibBuilder.loadTexts: cLWlan11uRealmTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmTable.setDescription('This table represents the realm (NAI) details per WLAN. In order to provide roaming services, it is necessary to have a standardized method for identifying users. NAI is the user identity submitted by the client during network authentication. Each realm entry should be unique.')
cLWlan11uRealmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmIndex"))
if mibBuilder.loadTexts: cLWlan11uRealmEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEntry.setDescription('Each entry in this table represents the realm (NAI) configuration for a particular WLAN.A WLAN can have up to 32 realm defined')
cLWlan11uRealmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: cLWlan11uRealmIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmIndex.setDescription('This object specifies, one instance of a realm EAP entry (NAI) on a WLAN. Each realm entry should be unique.')
cLWlan11uRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmName.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmName.setDescription("This object represents the NAI name. In order to provide roaming services, it is necessary to have a standardized method for identifying users. NAI is the user identity submitted by the client during network authentication. In roaming, the purpose of the NAI is to identify the user as well as to assist in the routing of the authentication request. Please note that the NAI may not necessarily be the same as the user's e-mail address or the user identity submitted in an application layer authentication.")
cLWlan11uRealmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmRowStatus.setDescription('Row Status for creation/deletion of a particular realm entry (NAI)from the table')
cLWlan11uRealmEapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 4), )
if mibBuilder.loadTexts: cLWlan11uRealmEapTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapTable.setDescription('This table represents the EAP method configured per realm for a particular WLAN. A realm can have up to 4 EAP method defined. The EAP method supported are LEAP,PEAP,EAP-FAST and EAP-TLS.')
cLWlan11uRealmEapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapIndex"))
if mibBuilder.loadTexts: cLWlan11uRealmEapEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapEntry.setDescription('Each entry in this table represents the EAP method configured per realm for a particular WLAN. A realm can have up to 4 EAP method defined. The EAP method supported are LEAP,PEAP,EAP-FAST and EAP-TLS.')
cLWlan11uRealmEapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cLWlan11uRealmEapIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapIndex.setDescription('This object uniquely identifies one instance of a EAP entry configured per a realm for a particular WLAN.')
cLWlan11uRealmEapMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("leap", 2), ("peap", 3), ("eapTls", 4), ("eapFast", 5), ("eapSim", 6), ("eapTtls", 7), ("eapAka", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmEapMethod.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapMethod.setDescription('This object represents the EAP method defined.')
cLWlan11uRealmEapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmEapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapRowStatus.setDescription('Row Status for creation/deletion of a particular EAP entry from the table')
cLWlan11uRealmEapAuthTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5), )
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthTable.setDescription('This table represents the authentication method details configured per EAP method for particular realm. There can be up to 10 authentication configuration entries per EAP method.')
cLWlan11uRealmEapAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapAuthIndex"))
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthEntry.setDescription('Each entry in this table represents the authentication method details configured per EAP method for particular realm. There can be up to 10 authentication configuration entries per EAP method.')
cLWlan11uRealmEapAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthIndex.setDescription('This object uniquely identifies one instance of a auth entry configured per a EAP for a particular WLAN.')
cLWlan11uRealmEapAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonEapInnerAuthType", 1), ("innerAuthEapType", 2), ("credentialType", 3), ("tunneledEapCredentialType", 4))).clone('nonEapInnerAuthType')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthMethod.setDescription('This object represents the authentication method defined.')
cLWlan11uRealmEapAuthParam = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("mschap", 4), ("mschapV2", 5), ("leap", 6), ("peap", 7), ("eapTls", 8), ("eapFast", 9), ("eapSim", 10), ("eapTtls", 11), ("eapAka", 12), ("sim", 13), ("usim", 14), ("nfcSecure", 15), ("hardwareToken", 16), ("softToken", 17), ("certificate", 18), ("usernamePassword", 19), ("reserved", 20), ("anonynous", 21), ("vendorSpecific", 22))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthParam.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthParam.setDescription('This object represents the authentication parameter defined for a particular authentication method. The Autentication Parameter and the Authentication Method relationship as follows Method Parameter Description =========== =============== ================= 1 1 Reserved 1 2 PAP 1 3 CHAP 1 4 MSCHAP 1 5 MSCHAPV2 2 6 LEAP 2 7 PEAP 2 8 EAP-TLS 2 9 EAP-FAST 2 10 EAP-SIM 2 11 EAP-TTLS 2 12 EAP-AKA 3 13 SIM 3 14 USIM 3 15 NFCSECURE 3 16 HARDWARE TOKEN 3 17 SOFT TOKEN 3 18 CERTIFICATE 3 19 USERNAME PASSWORD 3 20 RESERVED 3 21 Anonynous 3 22 Vendor Specific')
cLWlan11uRealmEapAuthCredentialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sim", 1), ("usim", 2), ("nfcSecure", 3), ("hardwareToken", 4), ("softToken", 5), ("certificate", 6), ("usernamePassword", 7), ("reserved", 8), ("anonynous", 9), ("vendorSpecific", 10))).clone('sim')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthCredentialType.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthCredentialType.setDescription('This is the credential type defined for a particular authentication method.')
cLWlan11uRealmEapAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uRealmEapAuthRowStatus.setDescription('Row Status for creation/deletion of a particular auth entry from the table')
cLWlan11uDomainTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 6), )
if mibBuilder.loadTexts: cLWlan11uDomainTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uDomainTable.setDescription('This table represents the Domain Entry configuration for a particular WLAN in a controller. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLWlan11uDomainRowStatus object')
cLWlan11uDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11uDomainIndex"))
if mibBuilder.loadTexts: cLWlan11uDomainEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uDomainEntry.setDescription('Each entry in this table represents the Domain configuration for a particular WLAN. A WLAN can have up to 10 domains defined.')
cLWlan11uDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cLWlan11uDomainIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uDomainIndex.setDescription('This object uniquely identifies one instance of a Domain on a WLAN.Each WLAN can have up to 10 Domains defined. Each Domain should be unique.')
cLWlan11uDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uDomainName.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uDomainName.setDescription('This object represents the domain name for this particular Index.')
cLWlan11uDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11uDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11uDomainRowStatus.setDescription('Row Status for creation/deletion of a particular Domain entry in the table.')
cLWlan11u3gppTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 7), )
if mibBuilder.loadTexts: cLWlan11u3gppTable.setStatus('current')
if mibBuilder.loadTexts: cLWlan11u3gppTable.setDescription('This table represents the 3gpp info configuration for a particular WLAN in a controller. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLWlan11u3gppRowStatus object')
cLWlan11u3gppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 7, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlan11u3gppIndex"))
if mibBuilder.loadTexts: cLWlan11u3gppEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlan11u3gppEntry.setDescription('Each entry in this table represents the Domain configuration for a particular WLAN. A WLAN can have up to 32 operator defined.')
cLWlan11u3gppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cLWlan11u3gppIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlan11u3gppIndex.setDescription('This object uniquely identifies one instance of a 3gpp on a WLAN.Each WLAN can have up to 32 3gpps defined. Each 3gpp should be unique.')
cLWlan11u3gppCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 7, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11u3gppCountryCode.setStatus('current')
if mibBuilder.loadTexts: cLWlan11u3gppCountryCode.setDescription('This is the Language defined for this 3gpp Index.')
cLWlan11u3gppNetworkCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 7, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11u3gppNetworkCode.setStatus('current')
if mibBuilder.loadTexts: cLWlan11u3gppNetworkCode.setDescription('This is the Language defined for this 3gpp Index.')
cLWlan11u3gppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 3, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlan11u3gppRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlan11u3gppRowStatus.setDescription('Row Status for creation/deletion of a particular 3gpp entry in the table.')
cLWlanServiceAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 4, 1), )
if mibBuilder.loadTexts: cLWlanServiceAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanServiceAdvertisementTable.setDescription('This table represents the generic service advertisement configuration for a particular WLAN in a controller. This table has a one-to-one relationship with cLWlanConfigTable. There exist a row in this table corresponding to each row representing a WLAN in cLWlanConfigTable.')
cLWlanServiceAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlanServiceAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanServiceAdvertisementEntry.setDescription('Each entry in this table represents the generic 802.11u configuration for a WLAN.')
cLWlanServiceAdvertisementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanServiceAdvertisementStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanServiceAdvertisementStatus.setDescription('This object represents the MSAP status for this WLAN. A value of true enables MSAP for this WLAN. A value of false disbales MSAP for this WLAN.')
cLWlanServiceAdvertisementMsapServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanServiceAdvertisementMsapServerIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlanServiceAdvertisementMsapServerIndex.setDescription('This object represents the Index for the MSAP Server.')
cLWlanHotSpot2OperatorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 1), )
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorTable.setDescription('This table represents the Operator configuration for a particular WLAN in a controller. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLWlanHotSpot2OperatorRowStatus object')
cLWlanHotSpot2OperatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2OperatorIndex"))
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorEntry.setDescription('Each entry in this table represents the Domain configuration for a particular WLAN. A WLAN can have up to 32 operator defined.')
cLWlanHotSpot2OperatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorIndex.setDescription('This object uniquely identifies one instance of a Operator on a WLAN.Each WLAN can have up to 32 Operators defined. Each Operator should be unique.')
cLWlanHotSpot2OperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorName.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorName.setDescription('This object represents the Operator name for this particular Index.')
cLWlanHotSpot2OperatorLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorLanguage.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorLanguage.setDescription('This is the Language defined for this Operator Index.')
cLWlanHotSpot2OperatorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2OperatorRowStatus.setDescription('Row Status for creation/deletion of a particular Operator entry in the table.')
cLWlanHotSpot2PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2), )
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigTable.setDescription('This object uniquely identifies one instance of Port-Protocol Configuration on a WLAN.Each WLAN can have up to 10 port configuration defined.Each configuration should be unique.')
cLWlanHotSpot2PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2PortConfigIndex"))
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigEntry.setDescription('Each entry in this table represents the Port-Protocol configuration for a particular WLAN. A WLAN can have up to 10 port configurations defined.')
cLWlanHotSpot2PortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigIndex.setDescription('This object uniquely identifies one instance of a Port Configuration on a WLAN.Each WLAN can have up to 32 Port Configurations defined.Each Port Configuration should be unique.')
cLWlanHotSpot2PortConfigIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17, 50))).clone(namedValues=NamedValues(("icmp", 1), ("ftp", 6), ("ikev2", 17), ("esp", 50)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigIpProtocol.setDescription('This object represents the Port Ip protocol for this index for a WLAN')
cLWlanHotSpot2PortConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 20, 22, 443, 500, 1723, 4500, 5060))).clone(namedValues=NamedValues(("icmp-esp", 0), ("ftp", 20), ("ssh", 22), ("ttls-vpn", 443), ("ikev2", 500), ("pptp-vpn", 1723), ("ipsec-nat", 4500), ("voip", 5060)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigPortNumber.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigPortNumber.setDescription('This object represents the Port Number for this index for a WLAN. This object indicates the Port Number with respect to an IP Protocol. The Protocol Port Number relationship is per the following table: IP Protocol Port Number Description =========== =============== ================= 1 0 ICMP 6 20 FTP 6 22 SSH 6 443 TLS 6 1723 PPTP-VPN 6 5060 VoIP 17 5060 VoIP 17 4500 IKEv 17 500 IKEv2 50 0 ESP')
cLWlanHotSpot2PortConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closed", 1), ("open", 2), ("unknown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigStatus.setDescription('This object represents the Port Status for this instance for a WLAN')
cLWlanHotSpot2PortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2PortConfigRowStatus.setDescription('Row Status for creation/deletion of a particular PortConfig entry in the table.')
cLWlanHotSpot2ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 3), )
if mibBuilder.loadTexts: cLWlanHotSpot2ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2ConfigTable.setDescription('This table represents the generic HotSpot2 configuration for a particular WLAN in a controller. This table has a one-to-one relationship with cLWlanConfigTable. There exist a row in this table corresponding to each row representing a WLAN in cLWlanConfigTable.')
cLWlanHotSpot2ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlanHotSpot2ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2ConfigEntry.setDescription('Each entry in this table represents the generic HotSpot2 configuration for a WLAN.')
cLWlanHotSpot2WanLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2), ("linkInTestState", 3), ("notConfigured", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanHotSpot2WanLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2WanLinkStatus.setDescription('This object represents the status of the link with respect to WAN metrics configuration.')
cLWlanHotSpot2WanSymLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("different", 1), ("same", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanHotSpot2WanSymLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2WanSymLinkStatus.setDescription("This object represents the symmetry of the link with respect to WAN metrics configuration. A value of 'different(1)' indicates that link speed is different in uplink and downlink(ex:ADSL). A value of 'same(2)' indicates that link speed is same in uplink and downlink(ex:DSL).")
cLWlanHotSpot2WanDownLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanHotSpot2WanDownLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2WanDownLinkSpeed.setDescription('This object represents the down link speed of WAN Backhaul in kbps.')
cLWlanHotSpot2WanUpLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanHotSpot2WanUpLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: cLWlanHotSpot2WanUpLinkSpeed.setDescription('This object represents the up link speed of WAN Backhaul in kbps.')
cLAPGroupsHyperlocationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1), )
if mibBuilder.loadTexts: cLAPGroupsHyperlocationConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsHyperlocationConfigTable.setDescription('A table for configuring Hyperlocation settings allowed for each AP Group. Each site can have a set of HALO and PakRSSI parameters associated with it.')
cLAPGroupsHyperlocationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"))
if mibBuilder.loadTexts: cLAPGroupsHyperlocationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsHyperlocationConfigEntry.setDescription('An entry in cLAPGroupsHyperlocationConfigEntry. cLAPGroupName is mandatory for creating an entry in CLAPGroupsHyperlocationConfigEntry .')
cLAPGroupsHyperlocationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsHyperlocationEnable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsHyperlocationEnable.setDescription("This object represents the state of Hyperlocation. A value of 'true' indicates that Hyperlocation is enabled. A value of 'false' indicates that Hyperlocation is disabled.")
cLAPGroupsPakRssiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1, 1, 2), Integer32().clone(-100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsPakRssiThreshold.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsPakRssiThreshold.setDescription('This object represents the threshold value for Packet RSSI location feature. Valid range is -100 dbm to -50 dbm.')
cLAPGroupsPakRssiThresholdTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsPakRssiThresholdTrigger.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsPakRssiThresholdTrigger.setDescription('This object represents the trigger threshold value for Packet RSSI location feature. Valid range is 1 dbm to 100 dbm.')
cLAPGroupsPakRssiNtpIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsPakRssiNtpIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsPakRssiNtpIpAddressType.setDescription('This object represents the NTP server IP address type for Packet RSSI location feature.')
cLAPGroupsPakRssiNtpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 8, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsPakRssiNtpAddress.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsPakRssiNtpAddress.setDescription('This object represents the NTP server IP address for Packet RSSI location feature.')
cLAPGroupsPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1), )
if mibBuilder.loadTexts: cLAPGroupsPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsPortConfigTable.setDescription('A table for configuring port settings allowed for each AP Group.')
cLAPGroupsPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"), (0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupsLANPortNumber"))
if mibBuilder.loadTexts: cLAPGroupsPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsPortConfigEntry.setDescription('An entry in cLAPGroupsPortConfigEntry. cLAPGroupName is mandatory for creating a entry in CLAPGroupsPortConfigEntry .')
cLAPGroupsLANPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLAPGroupsLANPortNumber.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsLANPortNumber.setDescription('This object uniquely identifies the LAN port number of an AP Group. Each AP Group can have up to 3 LAN ports.')
cLAPGroupsLANPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsLANPortStatus.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsLANPortStatus.setDescription("This object represents the LAN port state. A value of 'true' indicates that selected LAN Port is enabled. A value of 'false' indicates that LAN Port is disabled.")
cLAPGroupsLANPortPoeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notsupported", 0), ("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsLANPortPoeStatus.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsLANPortPoeStatus.setDescription("This object represents the LAN port POE state. A value of 'true' indicates that POE is enabled. A value of 'false' indicates that POE is disabled.")
cLAPGroupsLANPortRlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsLANPortRlanName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsLANPortRlanName.setDescription('This object represents the remote LAN name of the corresponding port.')
cLAPGroupsLANPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsLANPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsLANPortRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table. cLAPGroupName and cLAPGroupsLANPortNumber are mandatory for creating and deleting an entry.')
cLAPGroupsExtModuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 2), )
if mibBuilder.loadTexts: cLAPGroupsExtModuleConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsExtModuleConfigTable.setDescription('A table for configuring external module settings allowed for each AP Group. An entry in this table is created for each AP group.')
cLAPGroupsExtModuleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"))
if mibBuilder.loadTexts: cLAPGroupsExtModuleConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsExtModuleConfigEntry.setDescription('An entry in cLAPGroupsExtModuleConfigEntry. cLAPGroupName is mandatory for creating an entry in CLAPGroupsExtModuleConfigEntry .')
cLAPGroupsExtModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsExtModuleStatus.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsExtModuleStatus.setDescription("This object represents the external module state. A value of 'true' indicates that external module is enabled. A value of 'false' indicates that external module is disabled.")
cLAPGroupsExtModuleRlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 9, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsExtModuleRlanName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsExtModuleRlanName.setDescription('This object represents the remote lan name of the external module.')
cLAPGroupsVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1), )
if mibBuilder.loadTexts: cLAPGroupsVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVlanConfigTable.setDescription('A table for the WLAN-interface-mappings and WLAN-NAC settings allowed for each configured site. Each site can have a set of WLANs associated with it. Rows are added or deleted by explicit management actions initiated by the user from a network management station through the cLAPGroupsVlanConfigRowStatus object.')
cLAPGroupsVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlanProfileName"))
if mibBuilder.loadTexts: cLAPGroupsVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVlanConfigEntry.setDescription('An entry in cLAPGroupsVlanMappingTable. cLWlanProfileName is mandatory for creating a entry in cLWlanConfigEntry.')
cLAPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cLAPGroupName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupName.setDescription('This object uniquely identifies a AP group. The string is an unique name assigned to a site.')
cLAPGroupsVlanMappingInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsVlanMappingInterfaceName.setStatus('deprecated')
if mibBuilder.loadTexts: cLAPGroupsVlanMappingInterfaceName.setDescription("This object represents the interface to be used when a client connects to the 'cLWlanProfileName' WLAN on the AP. When an AP is associated with a site, and the site has an associated set of WLANs, then only those WLANs are beamed by the AP. cLAPGroupsVlanMappingInterfaceName object is superseded by cLAPGroupsVlanMappingInterfaceNameRev1.")
cLAPGroupNACSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupNACSupport.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupNACSupport.setDescription("This object is used to configure the NAC- Out Of Band(OOB) support for this AP groups VLAN. A value of 'true' indicates that the AP group supports the NAC- Out Of Band(OOB) feature. A value of 'false' indicates that the AP group does not support the NAC- Out Of Band(OOB) feature.")
cLAPGroupsVlanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsVlanConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVlanConfigRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table.')
cLAPGroupsVlanConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsVlanConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVlanConfigStorageType.setDescription('This object represnts the storage type for this conceptual row.')
cLAPGroupsWlanOrderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLAPGroupsWlanOrderIndex.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsWlanOrderIndex.setDescription('This object represnts the position of a wlan in each AP group. When a WLAN is added to an AP group, it will be placed in the lowest available slot in an array of size 16. This index will determine the order in which the WLAN is applied on an AP in that group.')
cLAPGroupsVlanMappingInterfaceNameRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsVlanMappingInterfaceNameRev1.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVlanMappingInterfaceNameRev1.setDescription("This object represents the interface to be used when a client connects to the 'cLWlanProfileName' WLAN on the AP. When an AP is associated with a site, and the site has an associated set of WLANs, then only those WLANs are beamed by the AP.")
cLAPGroupsVenueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2), )
if mibBuilder.loadTexts: cLAPGroupsVenueConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigTable.setDescription('A table for the configuring Venue details for a configured site.')
cLAPGroupsVenueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"))
if mibBuilder.loadTexts: cLAPGroupsVenueConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigEntry.setDescription('An entry in cLAPGroupsVlanMappingTable. cLWlanProfileName is mandatory for creating a entry in cLWlanConfigEntry.')
cLAPGroupsVenueConfigVenueGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unspecified", 1), ("assembly", 2), ("business", 3), ("educational", 4), ("factoryAndIndustrial", 5), ("institutional", 6), ("mercantile", 7), ("residential", 8), ("storage", 9), ("utilityAndMisc", 10), ("vehicular", 11), ("outdoor", 12))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsVenueConfigVenueGroup.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigVenueGroup.setDescription('This object indicates the venue group for this AP Group.')
cLAPGroupsVenueConfigVenueType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("unspecified", 1), ("unspecifiedAssembly", 2), ("arena", 3), ("stadium", 4), ("passengerTerminal", 5), ("amphitheater", 6), ("amusementPark", 7), ("placeOfWorship", 8), ("conventionCenter", 9), ("library", 10), ("museum", 11), ("restaurant", 12), ("theater", 13), ("bar", 14), ("coffeeShop", 15), ("zooOrAquarium", 16), ("emergencyCoordinationCenter", 17), ("unspecifiedBusiness", 18), ("doctorOrDentistOffice", 19), ("bank", 20), ("fireStation", 21), ("policeStation", 22), ("postOffice", 23), ("professionalOffice", 24), ("researchAndDevelopmentFacility", 25), ("attorneyOffice", 26), ("unspecifiedEducational", 27), ("schoolPrimary", 28), ("schoolSecondary", 29), ("universityOrCollege", 30), ("unspecifiedFactoryAndIndustrial", 31), ("factory", 32), ("unspecifiedInstitutional", 33), ("hospital", 34), ("longTermCareFacility", 35), ("alcoholAndDrugRehabilitationCenter", 36), ("groupHome", 37), ("prisonOrJail", 38), ("unspecifiedMercantile", 39), ("retailStore", 40), ("groceryMarket", 41), ("atomotiveServiceStation", 42), ("shoppingMall", 43), ("gasStation", 44), ("unspecifiedResidential", 45), ("privateResidence", 46), ("hotelOrMotel", 47), ("dormitory", 48), ("boardingHouse", 49), ("unspecifiedStorage", 50), ("unspecifiedUtility", 51), ("unspecifiedVehicular", 52), ("automobileOrTruck", 53), ("airplane", 54), ("bus", 55), ("ferry", 56), ("shipOrBoat", 57), ("train", 58), ("motorBike", 59), ("unspecifiedOutdoor", 60), ("muniMeshNetwork", 61), ("cityPark", 62), ("restArea", 63), ("trafficControl", 64), ("busStop", 65), ("kiosk", 66))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsVenueConfigVenueType.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigVenueType.setDescription('This object indicates the venue type within a particular venue group,for this AP Group. The Venue group-Venue Type relationship is per the following table: Venue Group Venue Type Code Venue Description =========== =============== ================= 0 0 Unspecified 0 1-255 Reserved 1 0 Unspecified Assembly 1 1 Arena 1 2 Stadium 1 3 Passenger Terminal (e.g., airport, port, bus station, ferry terminal, train station) 1 4 Amphitheater 1 5 Amusement Park 1 6 Place of Worship 1 7 Convention Center 1 8 Library 1 9 Museum 1 10 Restaurant 1 11 Theater 1 12 Bar 1 13 Coffee Shop 1 14 Zoo or Aquarium 1 15 Emergency Coordination Center 1 16-255 Reserved 2 0 Unspecified Business 2 1 Doctor or Dentist office 2 2 Bank 2 3 Fire Station 2 4 Police Station 2 6 Post Office 2 7 Professional Office 2 8 Research and Development Facility 2 9 Attorney Office 2 10-255 Reserved 3 0 Unspecified Educational 3 1 School, Primary 3 2 School, Secondary 3 3 University or College 3 4-255 Reserved 4 0 Unspecified Factory and Industrial Factory 4 2-255 Reserved 5 0 Unspecified Institutional 5 1 Hospital 5 2 Long-Term Care Facility (e.g., Nursing home, Hospice, etc.) 5 3 Alcohol and Drug Re-habilitation Center 5 4 Group Home 5 5 Prison or Jail 5 6-255 Reserved 6 0 Unspecified Mercantile 6 1 Retail Store 6 2 Grocery Market 6 3 Automotive Service Station 6 4-255 Reserved 7 0 Unspecified Residential 7 1 Hotel or Motel 7 2 Dormitory 7 3 Boarding House 7 4-255 Reserved 8 0-255 Reserved 9 0-255 Reserved 10 0 Unspecified Vehicular 10 1 Automobile or Truck 10 2 Airplane 10 3 Bus 10 4 Ferry 10 5 Ship or Boat 10 6 Train 10 7-255 Reserved 11 0 Unspecified Outdoor 11 1 Muni-mesh Network 11 2 City Park 11 3-255 Reserved')
cLAPGroupsVenueConfigVenueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 252))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsVenueConfigVenueName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigVenueName.setDescription('This is the venue name defined for this AP Group.')
cLAPGroupsVenueConfigLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsVenueConfigLanguage.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigLanguage.setDescription('This is the Language defined for this AP Group.')
cLAPGroupsOperatingClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 2, 1, 5), Bits().clone(namedValues=NamedValues(("class81", 0), ("class83", 1), ("class84", 2), ("class112", 3), ("class113", 4), ("class115", 5), ("class116", 6), ("class117", 7), ("class118", 8), ("class119", 9), ("class120", 10), ("class121", 11), ("class122", 12), ("class123", 13), ("class124", 14), ("class125", 15), ("class126", 16), ("class127", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroupsOperatingClass.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsOperatingClass.setDescription('This object specifies the the group of channels on the frequency band(s) the access network operates.')
cLAPGroupsMultipleVenueTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 3), )
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueTable.setDescription('Table for configuring multiple venues for a configured site.')
cLAPGroupsMultipleVenueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"), (0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueLanguage"))
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueEntry.setDescription('An entry in cLAPGroupsMultipleVenueTable. cLAPGroupsMultipleVenueLanguage is mandatory for creating a row in this table.')
cLAPGroupsMultipleVenueLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueLanguage.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueLanguage.setDescription('This is the Language defined for the particular venue name entry.')
cLAPGroupsMultipleVenueName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 252))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueName.setDescription('This is the one of the venue names defined for this AP Group.')
cLAPGroupsMultipleVenueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueRowStatus.setDescription('Row Status for creation/deletion of a particular venue entry in the table.')
cLWlanConfigClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 2), )
if mibBuilder.loadTexts: cLWlanConfigClientTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigClientTable.setDescription('This table represents the WLAN configuration for the 802.11 wireless clients that are associated with the APs that have joined this controller. The creation of a new row in cLWlanConfigTable, through an explicit network management action, results in creation of an entry in this table. Similarly, deletion of a row in cLWlanConfigTable through user action causes the deletion of corresponding row in this table. This table has an one-to-one relationship with cLWlanConfigTable. There exists an entry in this table for each corresponding entry in the cLWlanConfigTable.')
cLWlanConfigClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlanConfigClientEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigClientEntry.setDescription('Each entry represents a conceptual row in this table and provides the information about the clients associated on the WLAN, uniquely identified by the cLWlanIndex.')
cLWlanClientAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientAclName.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientAclName.setDescription("This object represents the name of the ACL applied to this WLAN. If it is required to remove the ACL name for a WLAN, it should be set to 'none'. ACL's are applied in the following priority order - interfaces ACLs, WLAN ACLs, client ACLs.")
cLWlanP2PBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("drop", 2), ("forwardUp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanP2PBlocking.setStatus('current')
if mibBuilder.loadTexts: cLWlanP2PBlocking.setDescription("This object represents per WLAN peer-to-peer blocking behavior on controller. Peer-to-peer blocking means traffic between two clients on same VLAN will not be bridged. disable : Peer-to-peer blocking is disabled and traffic is bridged locally within the controller. drop : The packet will be discarded. forwardUp : The packet will be forwarded on the upstream VLAN. The device 'north' of the controller can then make the decision about what to do with the packet.")
cLWlanClientIPv6AclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientIPv6AclName.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientIPv6AclName.setDescription("This object represents the name of the IPv6 ACL applied to this WLAN. If it is required to remove the ACL name for a WLAN, it should be set to 'none'. ACL's are applied in the following priority order - interfaces ACLs, WLAN ACLs, client ACLs.")
cLWlanConfigQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3), )
if mibBuilder.loadTexts: cLWlanConfigQosTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigQosTable.setDescription('This table represents the QoS configuration for the WLAN. The creation of a new row in cLWlanConfigTable, through an explicit network management action, results in creation of an entry in this table. Similarly, deletion of a row in cLWlanConfigTable through user action causes the deletion of corresponding row in this table. This table has an one-to-one relationship with cLWlanConfigTable. There exists an entry in this table for each corresponding entry in the cLWlanConfigTable.')
cLWlanConfigQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlanConfigQosEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigQosEntry.setDescription('Each entry represents a conceptual row in this table and provides the information about the QoS parameters on the WLAN, uniquely identified by the cLWlanIndex.')
cLWlanClientDSAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientDSAverageDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientDSAverageDataRate.setDescription('This object specifies Average Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanClientUSAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientUSAverageDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientUSAverageDataRate.setDescription('This object specifies Average Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanClientDSBurstDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientDSBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientDSBurstDataRate.setDescription('This object specifies Burst Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanClientUSBurstDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientUSBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientUSBurstDataRate.setDescription('This object specifies Burst Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanClientDSAvgRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientDSAvgRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientDSAvgRealTimeDataRate.setDescription('This object specifies average real time Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanClientUSAvgRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientUSAvgRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientUSAvgRealTimeDataRate.setDescription('This object specifies average real time Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanClientDSBurstRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientDSBurstRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientDSBurstRealTimeDataRate.setDescription('This object specifies burst real time Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanClientUSBurstRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanClientUSBurstRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanClientUSBurstRealTimeDataRate.setDescription('This object specifies burst real time Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidDSAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidDSAverageDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidDSAverageDataRate.setDescription('This object specifies Average Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidUSAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidUSAverageDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidUSAverageDataRate.setDescription('This object specifies Average Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidDSBurstDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidDSBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidDSBurstDataRate.setDescription('This object specifies Burst Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidUSBurstDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidUSBurstDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidUSBurstDataRate.setDescription('This object specifies Burst Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidDSAvgRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidDSAvgRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidDSAvgRealTimeDataRate.setDescription('This object specifies average real time Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidUSAvgRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidUSAvgRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidUSAvgRealTimeDataRate.setDescription('This object specifies average real time Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidDSBurstRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidDSBurstRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidDSBurstRealTimeDataRate.setDescription('This object specifies burst real time Data Rate per user on downstream. Value of 0 indicates the feature is disabled.')
cLWlanSsidUSBurstRealTimeDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanSsidUSBurstRealTimeDataRate.setStatus('current')
if mibBuilder.loadTexts: cLWlanSsidUSBurstRealTimeDataRate.setDescription('This object specifies burst real time Data Rate per user on upstream. Value of 0 indicates the feature is disabled.')
cLWlanConfigIosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4), )
if mibBuilder.loadTexts: cLWlanConfigIosTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigIosTable.setDescription('This table represents the WLAN configuration for IOS profiles configured on the switch. The creation of a new row in cLWlanConfigTable, through an explicit network management action, results in creation of an entry in this table. Similarly, deletion of a row in cLWlanConfigTable through user action causes the deletion of corresponding row in this table. This table has an one-to-one relationship with cLWlanConfigTable. There exists an entry in this table for each corresponding entry in the cLWlanConfigTable.')
cLWlanConfigIosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLWlanConfigIosEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanConfigIosEntry.setDescription('Each entry represents a conceptual row in this table and provides the information about the clients associated on the WLAN, uniquely identified by the cLWlanIndex.')
cLWlanIosAccountingMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosAccountingMethodListName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosAccountingMethodListName.setDescription('This object represents the method list name used for accounting on this WLAN.')
cLWlanIosAuthenticationMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosAuthenticationMethodListName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosAuthenticationMethodListName.setDescription('This object represents the method list name used for 802.1x authentication on this WLAN. This could be LDAP, RADIUS, LOCAL AUTH.')
cLWlanIosMacFilteringMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosMacFilteringMethodListName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosMacFilteringMethodListName.setDescription('This object represents the method list name used for mac filtering on this WLAN.')
cLWlanIosWebAuthMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosWebAuthMethodListName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosWebAuthMethodListName.setDescription('This object represents the method list name used for WEB AUTH on this WLAN.')
cLWlanIosQosUpStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosQosUpStreamProfileName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosQosUpStreamProfileName.setDescription('This object represents the profile name used for upstream QOS configuration on this WLAN.')
cLWlanIosQosDownStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosQosDownStreamProfileName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosQosDownStreamProfileName.setDescription('This object represents the profile name used for downstream QOS configuration on this WLAN.')
cLWlanIngressDHCPOption82Format = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Format.setStatus('current')
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Format.setDescription('This object represents the DHCP Option82 format for this WLAN.')
cLWlanIngressDHCPOption82Ascii = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Ascii.setStatus('current')
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Ascii.setDescription('This object represents the DHCP Option82 Ascii option for this WLAN.')
cLWlanIngressDHCPOption82Rid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Rid.setStatus('current')
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Rid.setDescription('This object represents the DHCP Option82 Rid option for this WLAN.')
cLWlanIngressDHCPOption82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Enable.setStatus('current')
if mibBuilder.loadTexts: cLWlanIngressDHCPOption82Enable.setDescription('This object represents the DHCP Option82 state for this WLAN.')
cLWlanIosScanDeferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosScanDeferPriority.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosScanDeferPriority.setDescription('This object specifies the priority of packets that defer the off-channel scan. This is used in off-channel scanning to improve performance for medical devices using Radio Resource Management. Each bit represents a packet type for which off-channel scanning needs to be deferred.')
cLWlanIosWebAuthParameterMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 12), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosWebAuthParameterMapName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosWebAuthParameterMapName.setDescription('This object represents the web auth parameter name on this WLAN.')
cLWlanIosQosClientUpStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosQosClientUpStreamProfileName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosQosClientUpStreamProfileName.setDescription('This object represents the profile name used for upstream QOS client configuration on this WLAN.')
cLWlanIosQosClientDownStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 4, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLWlanIosQosClientDownStreamProfileName.setStatus('current')
if mibBuilder.loadTexts: cLWlanIosQosClientDownStreamProfileName.setDescription('This object represents the profile name used for downstream QOS client configuration on this WLAN.')
cLWlanFlexibleNetflowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 5), )
if mibBuilder.loadTexts: cLWlanFlexibleNetflowTable.setStatus('current')
if mibBuilder.loadTexts: cLWlanFlexibleNetflowTable.setDescription('This table represents the flexible netflow policy details per WLAN for AVC. The creation of a new row in cLWlanFlexibleConfigTable, through an explicit network management action, results in creation of an entry in this table. Similarly, deletion of a row in cLWlanConfigTable through user action causes the deletion of corresponding rows in this table. For each wlan, there will be zero to many instances of flexible netflow policies.')
cLWlanFlexibleNetflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"), (0, "CISCO-LWAPP-WLAN-MIB", "cLWlanFlexibleNetflowPolicyTypeIndex"))
if mibBuilder.loadTexts: cLWlanFlexibleNetflowEntry.setStatus('current')
if mibBuilder.loadTexts: cLWlanFlexibleNetflowEntry.setDescription('Each entry represents a conceptual row in this table and provides the information about the flexible netflow policy types associated on the WLAN, uniquely identified by the cLWlanIndex and cLWlanFlexibleNetflowPolicyTypeIndex.')
cLWlanFlexibleNetflowPolicyTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("ipv4InputPolicy", 1), ("ipv4OutputPolicy", 2), ("ipv6InputPolicy", 3), ("ipv6OutputPolicy", 4), ("datalinkInputPolicy", 5), ("datalinkOutputPolicy", 6))))
if mibBuilder.loadTexts: cLWlanFlexibleNetflowPolicyTypeIndex.setStatus('current')
if mibBuilder.loadTexts: cLWlanFlexibleNetflowPolicyTypeIndex.setDescription('This object is used to set the netflow traffic direction for AVC. none(0) capture no traffic IPV4 Input Policy(1) - IPV4 input policy IPV4OutputPolicy(2) - IPV4 output policy IPV6InputPolicy(3) - IPV6 input policy IPV6OutputPolicy(4) - IPV6 output policy DatalinkInputPolicy(5) - Datalink input policy DatalinkOutputPolicy(6) - Datalink output policy.')
cLWlanFlexibleNetflowMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanFlexibleNetflowMonitorName.setStatus('current')
if mibBuilder.loadTexts: cLWlanFlexibleNetflowMonitorName.setDescription('This object represents the flexible netflow monitor name assigned to this WLAN.')
cLWlanFlexibleNetflowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 512, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLWlanFlexibleNetflowRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLWlanFlexibleNetflowRowStatus.setDescription('Row Status for creation/deletion of a particular flexible netflow policy entry from the table')
ciscoLwappWlanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1))
ciscoLwappWlanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2))
ciscoLwappWlanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 1)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBCompliance = ciscoLwappWlanMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 2)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev1 = ciscoLwappWlanMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 3)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev2 = ciscoLwappWlanMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 4)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev3 = ciscoLwappWlanMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev3.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 5)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup3"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanServiceAdvertisementConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanIosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanQosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup4"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev4 = ciscoLwappWlanMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev4.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 6)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup3"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanServiceAdvertisementConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanIosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanQosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup4"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigFlexibleNetflowGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev5 = ciscoLwappWlanMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev5.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 7)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup3"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanServiceAdvertisementConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanIosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanQosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup4"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigFlexibleNetflowGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev6 = ciscoLwappWlanMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev6.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 8)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup3"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanServiceAdvertisementConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanIosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanQosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup4"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigFlexibleNetflowGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup6"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev7 = ciscoLwappWlanMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev7.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 1, 9)).setObjects(("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup3"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanServiceAdvertisementConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanIosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanQosConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlan11uConfigGroupsup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup4"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanHotSpot2ConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup1"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigClientGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigFlexibleNetflowGroup"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappAPGroupsVlanConfigGroupSup2"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup6"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup7"), ("CISCO-LWAPP-WLAN-MIB", "ciscoLwappWlanConfigGroupSup8"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanMIBComplianceRev8 = ciscoLwappWlanMIBComplianceRev8.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanMIBComplianceRev8.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappWlanMIB module.')
ciscoLwappWlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 1)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroup = ciscoLwappWlanConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroup.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP. ciscoLwappWlanConfigGroup object is superseded by ciscoLwappWlanConfigGroupSup1.')
ciscoLwappWlanConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 2)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanProfileName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsid"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanDiagChan"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup1 = ciscoLwappWlanConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup1.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP.')
ciscoLwappWlanConfigClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 3)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanClientAclName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigClientGroup = ciscoLwappWlanConfigClientGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigClientGroup.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an 8021.11 clients.')
ciscoLwappWlan11uConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 4)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlan11uStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uInternetAccess"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uNetworkType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uVenueType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uVenueName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOui"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiIsBeacon"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlan11uConfigGroup = ciscoLwappWlan11uConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlan11uConfigGroup.setDescription('This collection of objects represents 802.11u related configuration of WLANs on the controller to be passed to an AP. ciscoLwappWlan11uConfigGroup object is superseded by ciscoLwappWlan11uConfigGroupsup1.')
ciscoLwappAPGroupsVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 5)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVlanMappingInterfaceName"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupNACSupport"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVlanConfigRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVlanConfigStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAPGroupsVlanConfigGroup = ciscoLwappAPGroupsVlanConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappAPGroupsVlanConfigGroup.setDescription('This collection of objects represent the configuration of AP Groups Vlan on the controller to be passed to an AP. ciscoLwappAPGroupsVlanConfigGroup object is superseded by ciscoLwappAPGroupsVlanConfigGroupSup2.')
ciscoLwappWlanConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 6)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanLoadBalancingEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanBandSelectEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanPassiveClientEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIsWired"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIngressInterface"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanNACSupport"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanWepKeyChange"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanChdEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan802dot11anDTIM"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan802dot11bgnDTIM"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup2 = ciscoLwappWlanConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup2.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP.')
ciscoLwappWlanConfigClientGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 7)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanP2PBlocking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigClientGroupSup1 = ciscoLwappWlanConfigClientGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigClientGroupSup1.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an 8021.11 clients.')
ciscoLwappWlanConfigGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 8)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanReAnchorRoamedVoiceClientsEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMulticastInterfaceEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMulticastInterface"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMulticastDirectEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanNACPostureSupport"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMaxClientsAccepted"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanScanDeferPriority"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanScanDeferTime"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanLanSubType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanWebAuthOnMacFilterFailureEnabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanStaticIpTunnelingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup3 = ciscoLwappWlanConfigGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup3.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP.')
ciscoLwappWlan11uConfigGroupsup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 9)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlan11uStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uInternetAccess"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uNetworkType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uHessid"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uNetworkAuthType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOui"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiIsBeacon"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uOuiStorageType"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapMethod"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapAuthMethod"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapAuthParam"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapAuthRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uDomainName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uDomainRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11u3gppCountryCode"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11u3gppNetworkCode"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11u3gppRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uIpAddressAvailIpv4"), ("CISCO-LWAPP-WLAN-MIB", "cLWlan11uIpAddressAvailIpv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlan11uConfigGroupsup1 = ciscoLwappWlan11uConfigGroupsup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlan11uConfigGroupsup1.setDescription('This collection of objects represents 802.11u related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappWlanServiceAdvertisementConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 10)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanServiceAdvertisementStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanServiceAdvertisementMsapServerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanServiceAdvertisementConfigGroup = ciscoLwappWlanServiceAdvertisementConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanServiceAdvertisementConfigGroup.setDescription('This collection of objects represents 802.11u related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappWlanHotSpot2ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 11)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2OperatorName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2OperatorLanguage"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2OperatorRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2PortConfigIpProtocol"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2PortConfigPortNumber"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2PortConfigStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2PortConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanHotSpot2ConfigGroup = ciscoLwappWlanHotSpot2ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanHotSpot2ConfigGroup.setDescription('This collection of objects represents 802.11u related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappWlanIosConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 12)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanIosAccountingMethodListName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosAuthenticationMethodListName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosMacFilteringMethodListName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosWebAuthMethodListName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosQosUpStreamProfileName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosQosDownStreamProfileName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIngressDHCPOption82Format"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIngressDHCPOption82Ascii"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIngressDHCPOption82Rid"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIngressDHCPOption82Enable"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosScanDeferPriority"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosWebAuthParameterMapName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosQosClientUpStreamProfileName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanIosQosClientDownStreamProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanIosConfigGroup = ciscoLwappWlanIosConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanIosConfigGroup.setDescription('This collection of objects represents IOS related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappWlanQosConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 13)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanClientDSAverageDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientUSAverageDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientDSBurstDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientUSBurstDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientDSAvgRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientUSAvgRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientDSBurstRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanClientUSBurstRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidDSAverageDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidUSAverageDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidDSBurstDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidUSBurstDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidDSAvgRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidUSAvgRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidDSBurstRealTimeDataRate"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSsidUSBurstRealTimeDataRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanQosConfigGroup = ciscoLwappWlanQosConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanQosConfigGroup.setDescription('This collection of objects represents QoS related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappWlanConfigGroupSup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 14)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanKtsCacSupportEnabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanWifiDirectPolicyStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanWebAuthIPv6AclName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2Enabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMaxClientsAllowedPerRadio"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanDhcpDeviceProfiling"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMacAuthOverDot1xEnabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanUserTimeout"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanUserIdleThreshold"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHttpDeviceProfiling"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpotClearConfig"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAuthFourthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAuthFifthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAuthSixthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAcctFourthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAcctFifthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAcctSixthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSelfAnchorEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup4 = ciscoLwappWlanConfigGroupSup4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup4.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP.This object is superceded by ciscoLwappWlanConfigGroupSup5. ciscoLwappWlanConfigGroupSup4 object is superseded by ciscoLwappWlanConfigGroupSup5.')
ciscoLwappWlan11uConfigGroupsup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 15)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlan11uRealmEapAuthCredentialType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlan11uConfigGroupsup2 = ciscoLwappWlan11uConfigGroupsup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlan11uConfigGroupsup2.setDescription('This collection of objects represents 802.11u related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappWlanHotSpot2ConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 16)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2WanLinkStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2WanSymLinkStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2WanDownLinkSpeed"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2WanUpLinkSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanHotSpot2ConfigGroupSup1 = ciscoLwappWlanHotSpot2ConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanHotSpot2ConfigGroupSup1.setDescription('This collection of objects represents 802.11u related configuration of WLANs on the controller to be passed to an AP.')
ciscoLwappAPGroupsVlanConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 17)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsWlanOrderIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAPGroupsVlanConfigGroupSup1 = ciscoLwappAPGroupsVlanConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappAPGroupsVlanConfigGroupSup1.setDescription('This collection of objects represent the configuration of AP Groups Vlan on the controller to be passed to an AP.')
cLAPGroupsVenueConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 18)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigVenueGroup"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigVenueType"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigVenueName"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVenueConfigLanguage"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsOperatingClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLAPGroupsVenueConfigGroup = cLAPGroupsVenueConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsVenueConfigGroup.setDescription('This collection of objects represent the configuration of Venue groups on the controller to be passed to an AP.')
cLAPGroupsMultipleVenueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 19)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueName"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsMultipleVenueRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLAPGroupsMultipleVenueGroup = cLAPGroupsMultipleVenueGroup.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsMultipleVenueGroup.setDescription('This collection of objects represent the configuration of Venue groups on the controller to be passed to an AP.')
ciscoLwappWlanConfigClientGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 20)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanClientIPv6AclName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigClientGroupSup2 = ciscoLwappWlanConfigClientGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigClientGroupSup2.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an 8021.11 clients.')
ciscoLwappWlanConfigFlexibleNetflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 21)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanFlexibleNetflowMonitorName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanFlexibleNetflowRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigFlexibleNetflowGroup = ciscoLwappWlanConfigFlexibleNetflowGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigFlexibleNetflowGroup.setDescription('This collection of objects represent the configuration of flexible netflow policy details per WLAN on the conroller to be passed to an AP.')
ciscoLwappWlanConfigGroupSup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 22)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlanKtsCacSupportEnabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanWifiDirectPolicyStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanWebAuthIPv6AclName"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpot2Enabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMaxClientsAllowedPerRadio"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanDhcpDeviceProfiling"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanMacAuthOverDot1xEnabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanUserTimeout"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanUserIdleThreshold"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHttpDeviceProfiling"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanHotSpotClearConfig"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAuthFourthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAuthFifthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAuthSixthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAcctFourthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAcctFifthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanRadiusAcctSixthServer"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanSelfAnchorEnabled"), ("CISCO-LWAPP-WLAN-MIB", "cLWlanUniversalAdmin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup5 = ciscoLwappWlanConfigGroupSup5.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup5.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP.')
ciscoLwappAPGroupsVlanConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 23)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupNACSupport"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVlanConfigRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVlanConfigStorageType"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsVlanMappingInterfaceNameRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAPGroupsVlanConfigGroupSup2 = ciscoLwappAPGroupsVlanConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappAPGroupsVlanConfigGroupSup2.setDescription('This collection of objects represent the configuration of AP Groups Vlan on the controller to be passed to an AP.')
ciscoLwappWlanConfigGroupSup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 24)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLWlan11acMuMimoEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup6 = ciscoLwappWlanConfigGroupSup6.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup6.setDescription('This collection of objects represent the configuration of WLANs on the controller to be passed to an LWAPP AP.')
ciscoLwappWlanConfigGroupSup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 25)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsHyperlocationEnable"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsPakRssiThreshold"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsPakRssiThresholdTrigger"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsPakRssiNtpIpAddressType"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsPakRssiNtpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup7 = ciscoLwappWlanConfigGroupSup7.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup7.setDescription('This collection of objects represent the configuration of AP Groups HyperLocation on the controller to be passed to an LWAPP AP.')
ciscoLwappWlanConfigGroupSup8 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 512, 2, 2, 26)).setObjects(("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsLANPortStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsLANPortPoeStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsLANPortRlanName"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsLANPortRowStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsExtModuleStatus"), ("CISCO-LWAPP-WLAN-MIB", "cLAPGroupsExtModuleRlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappWlanConfigGroupSup8 = ciscoLwappWlanConfigGroupSup8.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappWlanConfigGroupSup8.setDescription('This collection of objects represent the configuration of AP Groups LAN Port on the controller to be passed to an LWAPP AP.')
mibBuilder.exportSymbols("CISCO-LWAPP-WLAN-MIB", cLWlanNACPostureSupport=cLWlanNACPostureSupport, cLWlanSsidDSAvgRealTimeDataRate=cLWlanSsidDSAvgRealTimeDataRate, ciscoLwappWlanMIBComplianceRev3=ciscoLwappWlanMIBComplianceRev3, cLWlan11u3gppTable=cLWlan11u3gppTable, cLWlanClientDSBurstDataRate=cLWlanClientDSBurstDataRate, cLAPGroupsVlanConfigEntry=cLAPGroupsVlanConfigEntry, cLAPGroupsVlanConfigStorageType=cLAPGroupsVlanConfigStorageType, cLWlanIosAuthenticationMethodListName=cLWlanIosAuthenticationMethodListName, cLWlanWebAuthIPv6AclName=cLWlanWebAuthIPv6AclName, cLWlanIosWebAuthMethodListName=cLWlanIosWebAuthMethodListName, cLWlan11uOuiIsBeacon=cLWlan11uOuiIsBeacon, ciscoLwappWlan11uConfigGroup=ciscoLwappWlan11uConfigGroup, ciscoLwappWlan11uConfigGroupsup1=ciscoLwappWlan11uConfigGroupsup1, cLWlanHotSpot2OperatorEntry=cLWlanHotSpot2OperatorEntry, cLWlanHttpDeviceProfiling=cLWlanHttpDeviceProfiling, ciscoLwappWlanHotSpot2ConfigGroupSup1=ciscoLwappWlanHotSpot2ConfigGroupSup1, cLWlanServiceAdvertisementMsapServerIndex=cLWlanServiceAdvertisementMsapServerIndex, cLWlan11uRealmEapAuthEntry=cLWlan11uRealmEapAuthEntry, cLAPGroupsHyperlocationConfigTable=cLAPGroupsHyperlocationConfigTable, cLWlanClientUSAverageDataRate=cLWlanClientUSAverageDataRate, cLAPGroupName=cLAPGroupName, ciscoLwappWlan11uConfigGroupsup2=ciscoLwappWlan11uConfigGroupsup2, ciscoLwappWlanConfigGroupSup5=ciscoLwappWlanConfigGroupSup5, cLWlanClientAclName=cLWlanClientAclName, cLWlan11uRealmEapAuthMethod=cLWlan11uRealmEapAuthMethod, cLWlan11uVenueGroup=cLWlan11uVenueGroup, cLWlanP2PBlocking=cLWlanP2PBlocking, cLWlanClientUSAvgRealTimeDataRate=cLWlanClientUSAvgRealTimeDataRate, cLWlanIndex=cLWlanIndex, cLWlanClientDSBurstRealTimeDataRate=cLWlanClientDSBurstRealTimeDataRate, cLWlanScanDeferPriority=cLWlanScanDeferPriority, cLWlanHotSpot2ConfigTable=cLWlanHotSpot2ConfigTable, cLWlanRadiusAuthFourthServer=cLWlanRadiusAuthFourthServer, cLWlan11u3gppCountryCode=cLWlan11u3gppCountryCode, cLWlanFlexibleNetflowRowStatus=cLWlanFlexibleNetflowRowStatus, cLWlan11uEntry=cLWlan11uEntry, cLWlanIngressDHCPOption82Enable=cLWlanIngressDHCPOption82Enable, ciscoLwappWlanHotSpot2Config=ciscoLwappWlanHotSpot2Config, cLWlanScanDeferTime=cLWlanScanDeferTime, cLWlanMulticastInterface=cLWlanMulticastInterface, cLWlanRadiusAuthFifthServer=cLWlanRadiusAuthFifthServer, cLWlanRowStatus=cLWlanRowStatus, cLAPGroupsMultipleVenueTable=cLAPGroupsMultipleVenueTable, cLWlanConfigTable=cLWlanConfigTable, cLWlanIngressDHCPOption82Format=cLWlanIngressDHCPOption82Format, cLAPGroupsMultipleVenueGroup=cLAPGroupsMultipleVenueGroup, cLWlanRadiusAcctFifthServer=cLWlanRadiusAcctFifthServer, cLWlanPassiveClientEnable=cLWlanPassiveClientEnable, cLWlan11uNetworkAuthType=cLWlan11uNetworkAuthType, ciscoLwappWlanConfigGroupSup2=ciscoLwappWlanConfigGroupSup2, cLWlanConfigIosTable=cLWlanConfigIosTable, cLWlanIsWired=cLWlanIsWired, cLWlan11u3gppEntry=cLWlan11u3gppEntry, cLWlan11uRealmEapAuthIndex=cLWlan11uRealmEapAuthIndex, cLWlanConfigClientTable=cLWlanConfigClientTable, cLWlan11uRealmIndex=cLWlan11uRealmIndex, cLWlanUserTimeout=cLWlanUserTimeout, ciscoLwappWlanMIBComplianceRev1=ciscoLwappWlanMIBComplianceRev1, cLAPGroupsWlanOrderIndex=cLAPGroupsWlanOrderIndex, ciscoLwappWlanMIB=ciscoLwappWlanMIB, cLAPGroupsHyperlocationConfigEntry=cLAPGroupsHyperlocationConfigEntry, cLWlanConfigQosEntry=cLWlanConfigQosEntry, cLWlan11uRealmEapTable=cLWlan11uRealmEapTable, cLWlanSsidDSBurstDataRate=cLWlanSsidDSBurstDataRate, cLWlanIosScanDeferPriority=cLWlanIosScanDeferPriority, cLWlanHotSpot2WanDownLinkSpeed=cLWlanHotSpot2WanDownLinkSpeed, cLWlanIosWebAuthParameterMapName=cLWlanIosWebAuthParameterMapName, cLWlan802dot11anDTIM=cLWlan802dot11anDTIM, ciscoLwappAPGroupsHyperlocationConfig=ciscoLwappAPGroupsHyperlocationConfig, cLWlan11uRealmEapAuthCredentialType=cLWlan11uRealmEapAuthCredentialType, cLWlanServiceAdvertisementStatus=cLWlanServiceAdvertisementStatus, ciscoLwappAPGroupsVlanConfigGroupSup2=ciscoLwappAPGroupsVlanConfigGroupSup2, ciscoLwappAPGroupsVlanConfigGroup=ciscoLwappAPGroupsVlanConfigGroup, cLAPGroupsExtModuleConfigTable=cLAPGroupsExtModuleConfigTable, ciscoLwappAPGroupsPortConfig=ciscoLwappAPGroupsPortConfig, cLWlan11u3gppRowStatus=cLWlan11u3gppRowStatus, ciscoLwappAPGroupsVlanConfig=ciscoLwappAPGroupsVlanConfig, cLWlanBandSelectEnable=cLWlanBandSelectEnable, cLAPGroupsLANPortNumber=cLAPGroupsLANPortNumber, cLWlanRadiusAcctFourthServer=cLWlanRadiusAcctFourthServer, cLWlan11uStatus=cLWlan11uStatus, cLWlanDiagChan=cLWlanDiagChan, cLWlanMulticastInterfaceEnable=cLWlanMulticastInterfaceEnable, cLWlan11uOuiTable=cLWlan11uOuiTable, cLAPGroupsVenueConfigVenueType=cLAPGroupsVenueConfigVenueType, cLWlanIosQosUpStreamProfileName=cLWlanIosQosUpStreamProfileName, cLWlan11uDomainTable=cLWlan11uDomainTable, cLWlanFlexibleNetflowPolicyTypeIndex=cLWlanFlexibleNetflowPolicyTypeIndex, cLWlanHotSpot2OperatorLanguage=cLWlanHotSpot2OperatorLanguage, cLWlan11uRealmEapRowStatus=cLWlan11uRealmEapRowStatus, cLAPGroupsLANPortRowStatus=cLAPGroupsLANPortRowStatus, cLWlanReAnchorRoamedVoiceClientsEnable=cLWlanReAnchorRoamedVoiceClientsEnable, cLWlan11acMuMimoEnabled=cLWlan11acMuMimoEnabled, cLWlanLoadBalancingEnable=cLWlanLoadBalancingEnable, cLWlan11uRealmEapAuthRowStatus=cLWlan11uRealmEapAuthRowStatus, cLAPGroupsMultipleVenueLanguage=cLAPGroupsMultipleVenueLanguage, cLWlanSelfAnchorEnabled=cLWlanSelfAnchorEnabled, cLWlanFlexibleNetflowTable=cLWlanFlexibleNetflowTable, ciscoLwappWlanMIBNotifs=ciscoLwappWlanMIBNotifs, cLAPGroupsVlanMappingInterfaceName=cLAPGroupsVlanMappingInterfaceName, ciscoLwappWlanMIBComplianceRev4=ciscoLwappWlanMIBComplianceRev4, cLAPGroupsPakRssiThreshold=cLAPGroupsPakRssiThreshold, ciscoLwappWlanConfigGroupSup4=ciscoLwappWlanConfigGroupSup4, cLWlanSsidUSAvgRealTimeDataRate=cLWlanSsidUSAvgRealTimeDataRate, cLWlanHotSpot2ConfigEntry=cLWlanHotSpot2ConfigEntry, cLWlanFlexibleNetflowMonitorName=cLWlanFlexibleNetflowMonitorName, cLAPGroupsLANPortPoeStatus=cLAPGroupsLANPortPoeStatus, cLWlanStorageType=cLWlanStorageType, cLWlan11uRealmEntry=cLWlan11uRealmEntry, cLAPGroupsVenueConfigVenueGroup=cLAPGroupsVenueConfigVenueGroup, ciscoLwappWlanConfigClientGroup=ciscoLwappWlanConfigClientGroup, ciscoLwappWlanMIBComplianceRev6=ciscoLwappWlanMIBComplianceRev6, cLAPGroupsVenueConfigEntry=cLAPGroupsVenueConfigEntry, cLWlan11uOuiEntry=cLWlan11uOuiEntry, cLAPGroupsPortConfigTable=cLAPGroupsPortConfigTable, cLWlan11uVenueName=cLWlan11uVenueName, cLAPGroupsExtModuleStatus=cLAPGroupsExtModuleStatus, ciscoLwappWlanServiceAdvertisementConfig=ciscoLwappWlanServiceAdvertisementConfig, cLAPGroupsVlanMappingInterfaceNameRev1=cLAPGroupsVlanMappingInterfaceNameRev1, cLWlanStaticIpTunnelingEnabled=cLWlanStaticIpTunnelingEnabled, cLWlan11uRealmEapAuthParam=cLWlan11uRealmEapAuthParam, cLWlanWifiDirectPolicyStatus=cLWlanWifiDirectPolicyStatus, ciscoLwappWlanQosConfigGroup=ciscoLwappWlanQosConfigGroup, ciscoLwappWlanConfigGroupSup6=ciscoLwappWlanConfigGroupSup6, ciscoLwappWlanIosConfigGroup=ciscoLwappWlanIosConfigGroup, PYSNMP_MODULE_ID=ciscoLwappWlanMIB, ciscoLwappWlanConfig=ciscoLwappWlanConfig, cLWlanHotSpot2WanLinkStatus=cLWlanHotSpot2WanLinkStatus, cLAPGroupsVlanConfigRowStatus=cLAPGroupsVlanConfigRowStatus, cLAPGroupsVenueConfigTable=cLAPGroupsVenueConfigTable, cLWlan11uIpAddressAvailIpv4=cLWlan11uIpAddressAvailIpv4, cLWlanSsidUSAverageDataRate=cLWlanSsidUSAverageDataRate, cLWlanSsidUSBurstDataRate=cLWlanSsidUSBurstDataRate, cLWlan11uVenueType=cLWlan11uVenueType, cLWlanHotSpot2PortConfigPortNumber=cLWlanHotSpot2PortConfigPortNumber, cLWlanClientDSAverageDataRate=cLWlanClientDSAverageDataRate, cLWlanServiceAdvertisementTable=cLWlanServiceAdvertisementTable, cLAPGroupsLANPortStatus=cLAPGroupsLANPortStatus, cLWlan11u3gppNetworkCode=cLWlan11u3gppNetworkCode, cLWlanHotSpot2PortConfigIndex=cLWlanHotSpot2PortConfigIndex, cLWlanIngressInterface=cLWlanIngressInterface, cLWlan11uOuiRowStatus=cLWlan11uOuiRowStatus, cLWlan11uInternetAccess=cLWlan11uInternetAccess, cLWlanClientUSBurstRealTimeDataRate=cLWlanClientUSBurstRealTimeDataRate, cLAPGroupsExtModuleConfigEntry=cLAPGroupsExtModuleConfigEntry, cLAPGroupsPakRssiNtpAddress=cLAPGroupsPakRssiNtpAddress, cLWlan11uRealmEapEntry=cLWlan11uRealmEapEntry, cLAPGroupsPakRssiThresholdTrigger=cLAPGroupsPakRssiThresholdTrigger, ciscoLwappWlanHotSpot2ConfigGroup=ciscoLwappWlanHotSpot2ConfigGroup, ciscoLwappWlanMIBComplianceRev8=ciscoLwappWlanMIBComplianceRev8, cLAPGroupsOperatingClass=cLAPGroupsOperatingClass, cLAPGroupsLANPortRlanName=cLAPGroupsLANPortRlanName, cLWlanSsidDSAverageDataRate=cLWlanSsidDSAverageDataRate, cLWlanClientUSBurstDataRate=cLWlanClientUSBurstDataRate, ciscoLwappWlanConfigFlexibleNetflowGroup=ciscoLwappWlanConfigFlexibleNetflowGroup, cLWlanConfigClientEntry=cLWlanConfigClientEntry, cLWlanSsidUSBurstRealTimeDataRate=cLWlanSsidUSBurstRealTimeDataRate, cLWlanServiceAdvertisementEntry=cLWlanServiceAdvertisementEntry, cLWlan11uOuiIndex=cLWlan11uOuiIndex, cLWlan11uRealmName=cLWlan11uRealmName, cLWlanHotSpot2PortConfigRowStatus=cLWlanHotSpot2PortConfigRowStatus, cLAPGroupsVenueConfigLanguage=cLAPGroupsVenueConfigLanguage, cLWlan11uRealmEapIndex=cLWlan11uRealmEapIndex, cLWlanRadiusAcctSixthServer=cLWlanRadiusAcctSixthServer, ciscoLwappWlanMIBComplianceRev2=ciscoLwappWlanMIBComplianceRev2, cLWlanHotSpotClearConfig=cLWlanHotSpotClearConfig, ciscoLwappWlanServiceAdvertisementConfigGroup=ciscoLwappWlanServiceAdvertisementConfigGroup, cLWlanIngressDHCPOption82Rid=cLWlanIngressDHCPOption82Rid, cLWlanHotSpot2OperatorTable=cLWlanHotSpot2OperatorTable, cLWlanHotSpot2PortConfigTable=cLWlanHotSpot2PortConfigTable, cLWlanMacAuthOverDot1xEnabled=cLWlanMacAuthOverDot1xEnabled, cLAPGroupsExtModuleRlanName=cLAPGroupsExtModuleRlanName, cLWlan11uOuiStorageType=cLWlan11uOuiStorageType, ciscoLwappWlanMIBConform=ciscoLwappWlanMIBConform, cLWlanIosMacFilteringMethodListName=cLWlanIosMacFilteringMethodListName, cLWlanHotSpot2OperatorRowStatus=cLWlanHotSpot2OperatorRowStatus, cLWlanDhcpDeviceProfiling=cLWlanDhcpDeviceProfiling, cLWlan11uRealmEapAuthTable=cLWlan11uRealmEapAuthTable, cLWlan11u3gppIndex=cLWlan11u3gppIndex, cLWlanFlexibleNetflowEntry=cLWlanFlexibleNetflowEntry, cLWlanHotSpot2Enabled=cLWlanHotSpot2Enabled, cLWlanSsid=cLWlanSsid, cLWlanUniversalAdmin=cLWlanUniversalAdmin, cLWlan11uTable=cLWlan11uTable, ciscoLwappWlanConfigGroup=ciscoLwappWlanConfigGroup, cLWlanHotSpot2PortConfigEntry=cLWlanHotSpot2PortConfigEntry, cLAPGroupsMultipleVenueEntry=cLAPGroupsMultipleVenueEntry, cLAPGroupsPortConfigEntry=cLAPGroupsPortConfigEntry, cLAPGroupsMultipleVenueRowStatus=cLAPGroupsMultipleVenueRowStatus, ciscoLwappWlanMIBObjects=ciscoLwappWlanMIBObjects, cLWlanMulticastDirectEnable=cLWlanMulticastDirectEnable, cLWlanConfigIosEntry=cLWlanConfigIosEntry, cLWlanIosQosDownStreamProfileName=cLWlanIosQosDownStreamProfileName, cLWlanUserIdleThreshold=cLWlanUserIdleThreshold, cLWlan802dot11bgnDTIM=cLWlan802dot11bgnDTIM, cLWlanHotSpot2OperatorIndex=cLWlanHotSpot2OperatorIndex, ciscoLwappWlanConfigGroupSup8=ciscoLwappWlanConfigGroupSup8, cLWlanHotSpot2OperatorName=cLWlanHotSpot2OperatorName, cLAPGroupsMultipleVenueName=cLAPGroupsMultipleVenueName, cLWlan11uOui=cLWlan11uOui, ciscoLwappWlanConfigGroupSup3=ciscoLwappWlanConfigGroupSup3, cLAPGroupsVenueConfigVenueName=cLAPGroupsVenueConfigVenueName, cLWlan11uNetworkType=cLWlan11uNetworkType, ciscoLwappWlanConfigGroupSup7=ciscoLwappWlanConfigGroupSup7, cLWlan11uRealmTable=cLWlan11uRealmTable, cLAPGroupNACSupport=cLAPGroupNACSupport, cLWlanConfigQosTable=cLWlanConfigQosTable, ciscoLwappWlanMIBComplianceRev7=ciscoLwappWlanMIBComplianceRev7, cLWlan11uRealmEapMethod=cLWlan11uRealmEapMethod, cLWlanClientDSAvgRealTimeDataRate=cLWlanClientDSAvgRealTimeDataRate, ciscoLwappWlanMIBComplianceRev5=ciscoLwappWlanMIBComplianceRev5, cLAPGroupsHyperlocationEnable=cLAPGroupsHyperlocationEnable, cLWlanIosQosClientDownStreamProfileName=cLWlanIosQosClientDownStreamProfileName, cLWlanRadiusAuthSixthServer=cLWlanRadiusAuthSixthServer, cLWlanKtsCacSupportEnabled=cLWlanKtsCacSupportEnabled, ciscoLwappWlan11uConfig=ciscoLwappWlan11uConfig, cLWlanClientIPv6AclName=cLWlanClientIPv6AclName, cLWlan11uDomainIndex=cLWlan11uDomainIndex, cLAPGroupsPakRssiNtpIpAddressType=cLAPGroupsPakRssiNtpIpAddressType, cLWlan11uDomainRowStatus=cLWlan11uDomainRowStatus, cLWlan11uDomainEntry=cLWlan11uDomainEntry, cLWlanIngressDHCPOption82Ascii=cLWlanIngressDHCPOption82Ascii, ciscoLwappWlanConfigGroupSup1=ciscoLwappWlanConfigGroupSup1, cLWlanSsidDSBurstRealTimeDataRate=cLWlanSsidDSBurstRealTimeDataRate, cLWlan11uRealmRowStatus=cLWlan11uRealmRowStatus, ciscoLwappWlanMIBCompliance=ciscoLwappWlanMIBCompliance, cLWlanWebAuthOnMacFilterFailureEnabled=cLWlanWebAuthOnMacFilterFailureEnabled, cLWlanConfigEntry=cLWlanConfigEntry, cLWlanHotSpot2PortConfigIpProtocol=cLWlanHotSpot2PortConfigIpProtocol, cLWlan11uHessid=cLWlan11uHessid, cLWlanHotSpot2WanSymLinkStatus=cLWlanHotSpot2WanSymLinkStatus, cLWlan11uIpAddressAvailIpv6=cLWlan11uIpAddressAvailIpv6, cLWlanMaxClientsAccepted=cLWlanMaxClientsAccepted, cLAPGroupsVenueConfigGroup=cLAPGroupsVenueConfigGroup, cLWlanLanSubType=cLWlanLanSubType, ciscoLwappWlanMIBCompliances=ciscoLwappWlanMIBCompliances, cLWlan11uDomainName=cLWlan11uDomainName, ciscoLwappWlanMIBGroups=ciscoLwappWlanMIBGroups, cLWlanWepKeyChange=cLWlanWepKeyChange, cLWlanHotSpot2WanUpLinkSpeed=cLWlanHotSpot2WanUpLinkSpeed, cLWlanHotSpot2PortConfigStatus=cLWlanHotSpot2PortConfigStatus, ciscoLwappAPGroupsVlanConfigGroupSup1=ciscoLwappAPGroupsVlanConfigGroupSup1, cLWlanChdEnable=cLWlanChdEnable, ciscoLwappWlanConfigClientGroupSup2=ciscoLwappWlanConfigClientGroupSup2, cLAPGroupsVlanConfigTable=cLAPGroupsVlanConfigTable, cLWlanProfileName=cLWlanProfileName, ciscoLwappWlanConfigClientGroupSup1=ciscoLwappWlanConfigClientGroupSup1, cLWlanIosAccountingMethodListName=cLWlanIosAccountingMethodListName, cLWlanMaxClientsAllowedPerRadio=cLWlanMaxClientsAllowedPerRadio, cLWlanIosQosClientUpStreamProfileName=cLWlanIosQosClientUpStreamProfileName, cLWlanNACSupport=cLWlanNACSupport)
