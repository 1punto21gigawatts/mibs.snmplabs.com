#
# PySNMP MIB module HUAWEI-PIM-BSR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PIM-BSR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InetZoneIndex, InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetZoneIndex", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, TimeTicks, Bits, ModuleIdentity, Unsigned32, mib_2, Counter32, MibIdentifier, NotificationType, ObjectIdentity, Integer32, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "TimeTicks", "Bits", "ModuleIdentity", "Unsigned32", "mib-2", "Counter32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Integer32", "Counter64", "Gauge32")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
hwMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149))
hwPimBsrMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2))
hwPimBsrMib.setRevisions(('2007-04-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwPimBsrMib.setRevisionsDescriptions(('The initial revision of this Mib module.',))
if mibBuilder.loadTexts: hwPimBsrMib.setLastUpdated('200704160000Z')
if mibBuilder.loadTexts: hwPimBsrMib.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwPimBsrMib.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwPimBsrMib.setDescription('The Mib module for management of IP Multicast, including multicast routing, data forwarding, and data reception. Huawei Technologies co.,Ltd . Supplementary information may be available at: http://www.huawei.com')
hwPimBsrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1))
hwPimBsrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 2))
hwPimBsrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 2, 1))
hwPimBsrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 2, 2))
hwPimBsrElectedBsrRpSetTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2), )
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetTable.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetTable.setDescription('The (conceptual) table listing Bsr-specific information about PIM group mappings learned via C-RP advertisements or created locally using configurations. This table is maintained only on the Elected Bsr. An Elected Bsr uses this table to create Bootstrap Messages after applying a local policy to include some or all of the group mappings in this table.')
hwPimBsrElectedBsrRpSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1), ).setIndexNames((0, "HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrGrpMappingAddrType"), (0, "HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrGrpMappingGrpAddr"), (0, "HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrGrpMappingGrpPrefixLen"), (0, "HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrGrpMappingRPAddr"))
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetEntry.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetEntry.setDescription('An entry (conceptual row) in the hwPimBsrElectedBsrRpSetTable.')
hwPimBsrElectedBsrGrpMappingAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingAddrType.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingAddrType.setDescription('The Inet address type of the IP multicast group prefix.')
hwPimBsrElectedBsrGrpMappingGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingGrpAddr.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingGrpAddr.setDescription('The IP multicast group address which, when combined with hwPimBsrElectedBsrGrpMappingGrpAddr, gives the group prefix for this mapping. The InetAddressType is given by the hwPimBsrElectedBsrGrpMappingAddrType object. This address object is only significant up to hwPimBsrElectedBsrGrpMappingGrpAddr bits. The remainder of the address bits are zero. This is especially important for this field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry.')
hwPimBsrElectedBsrGrpMappingGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 4), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128)))
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingGrpPrefixLen.setDescription("The multicast group prefix length that, when combined with hwPimBsrElectedBsrGrpMappingGrpAddr, gives the group prefix for this mapping. The InetAddressType is given by the hwPimBsrElectedBsrGrpMappingAddrType object. If hwPimBsrElectedBsrGrpMappingAddrType is 'ipv4' or 'ipv4z', this object must be in the range 4..32. If hwPimBsrElectedBsrGrpMappingAddrType is 'ipv6' or 'ipv6z', this object must be in the range 8..128.")
hwPimBsrElectedBsrGrpMappingRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingRPAddr.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrGrpMappingRPAddr.setDescription('The IP address of the RP to be used for groups within this group prefix. The InetAddressType is given by the hwPimBsrElectedBsrGrpMappingAddrType object.')
hwPimBsrElectedBsrRpSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetPriority.setReference('I-D.ietf-pim-sm-Bsr section 4.1')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetPriority.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetPriority.setDescription('The priority for RP. Numerically higher values for this object indicate lower priorities, with the value zero denoting the highest priority.')
hwPimBsrElectedBsrRpSetHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetHoldtime.setReference('I-D.ietf-pim-sm-Bsr section 4.1')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetHoldtime.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetHoldtime.setDescription('The holdtime for RP')
hwPimBsrElectedBsrRpSetExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetExpiryTime.setDescription('The minimum time remaining before this entry will be aged out. The value zero indicates that this entry will never be aged out.')
hwPimBsrElectedBsrRpSetGrpBidir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetGrpBidir.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrElectedBsrRpSetGrpBidir.setDescription('If this object is TRUE, this group range with this RP is a BIDIR-PIM group range. If it is set to FALSE, it is a PIM-SM group range.')
hwPimBsrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 2, 1, 1)).setObjects(("HUAWEI-PIM-BSR-MIB", "hwPimBsrObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPimBsrCompliance = hwPimBsrCompliance.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrCompliance.setDescription('The compliance statement for PIM routers that implement the Bootstrap Router (Bsr) mechanism.')
hwPimBsrObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 2, 2, 2, 1)).setObjects(("HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrRpSetPriority"), ("HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrRpSetHoldtime"), ("HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrRpSetExpiryTime"), ("HUAWEI-PIM-BSR-MIB", "hwPimBsrElectedBsrRpSetGrpBidir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPimBsrObjectGroup = hwPimBsrObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPimBsrObjectGroup.setDescription('A collection of objects for managing the Bootstrap Router (Bsr) mechanism for PIM routers.')
mibBuilder.exportSymbols("HUAWEI-PIM-BSR-MIB", hwPimBsrElectedBsrRpSetPriority=hwPimBsrElectedBsrRpSetPriority, hwPimBsrCompliances=hwPimBsrCompliances, hwPimBsrElectedBsrGrpMappingRPAddr=hwPimBsrElectedBsrGrpMappingRPAddr, hwPimBsrElectedBsrGrpMappingAddrType=hwPimBsrElectedBsrGrpMappingAddrType, hwPimBsrGroups=hwPimBsrGroups, hwPimBsrObjects=hwPimBsrObjects, hwPimBsrCompliance=hwPimBsrCompliance, hwPimBsrElectedBsrGrpMappingGrpPrefixLen=hwPimBsrElectedBsrGrpMappingGrpPrefixLen, hwPimBsrElectedBsrRpSetEntry=hwPimBsrElectedBsrRpSetEntry, hwMcast=hwMcast, PYSNMP_MODULE_ID=hwPimBsrMib, hwPimBsrElectedBsrRpSetHoldtime=hwPimBsrElectedBsrRpSetHoldtime, hwPimBsrObjectGroup=hwPimBsrObjectGroup, hwPimBsrConformance=hwPimBsrConformance, hwPimBsrElectedBsrRpSetGrpBidir=hwPimBsrElectedBsrRpSetGrpBidir, hwPimBsrElectedBsrRpSetTable=hwPimBsrElectedBsrRpSetTable, hwPimBsrMib=hwPimBsrMib, hwPimBsrElectedBsrGrpMappingGrpAddr=hwPimBsrElectedBsrGrpMappingGrpAddr, hwPimBsrElectedBsrRpSetExpiryTime=hwPimBsrElectedBsrRpSetExpiryTime)
