#
# PySNMP MIB module CISCO-SNAPSHOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SNAPSHOT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoNetworkAddress, CiscoNetworkProtocol = mibBuilder.importSymbols("CISCO-TC", "CiscoNetworkAddress", "CiscoNetworkProtocol")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Counter64, ObjectIdentity, Bits, NotificationType, ModuleIdentity, IpAddress, Unsigned32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "ObjectIdentity", "Bits", "NotificationType", "ModuleIdentity", "IpAddress", "Unsigned32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
ciscoSnapshotMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 19))
ciscoSnapshotMIB.setRevisions(('1995-08-15 00:00', '1995-03-21 00:00', '1995-01-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSnapshotMIB.setRevisionsDescriptions(('Specify a correct (non-negative) range for an index object. Also, correct typo which caused syntax conflict.', 'Miscellaneous updates to the MIB and capabilities.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSnapshotMIB.setLastUpdated('9508150000Z')
if mibBuilder.loadTexts: ciscoSnapshotMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSnapshotMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSnapshotMIB.setDescription('Snapshot routing MIB')
ciscoSnapshotMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 19, 1))
ciscoSnapshotForceActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSnapshotForceActive.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotForceActive.setDescription('Forces the snapshot state to active for all entries of the ciscoSnapshotActivityTable whose ciscoSnapshotIfIndex value is specified as parameter. The interface associated with ciscoSnapshotIfIndex must be a client interface. Retrieval of this object will return the value of the ciscoSnapshotIfIndex that was last forced into the active state, or 0 if no interfaces have been forced into the active state since the router was reset')
ciscoSnapshotInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2), )
if mibBuilder.loadTexts: ciscoSnapshotInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotInterfaceTable.setDescription('A list of Snapshot Routing configuration entries.')
ciscoSnapshotInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1), ).setIndexNames((0, "CISCO-SNAPSHOT-MIB", "ciscoSnapshotIfIndex"))
if mibBuilder.loadTexts: ciscoSnapshotInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotInterfaceEntry.setDescription('A Snapshot Routing configuration entry. A management station wishing to create an entry should create the associated instance of the row status object. It should also modify, either in the same or in successive PDUs, the values for the other objects if the defaults are not appropriate. Once the appropriate instance of all the configuration objects have been created, either by an explicit SNMP set request or by default, the row status should be set to active to initiate the request. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo. In order to prevent inactive (notReady, or notInService) entries from clogging the table, entries will be aged out, but an entry will never be deleted within 5 minutes of creation.')
ciscoSnapshotIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ciscoSnapshotIfIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotIfIndex.setDescription('The interface to which this entry pertains.')
ciscoSnapshotClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoSnapshotClient.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotClient.setDescription('When true, this router is the client snapshot router on the interface. When false, this router is the server snapshot router on the interface.')
ciscoSnapshotDialer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoSnapshotDialer.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotDialer.setDescription('Indicates whether or not snapshot routing on this interface uses Dial-on-Demand routing.')
ciscoSnapshotActiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoSnapshotActiveInterval.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotActiveInterval.setDescription('The amount of time during which routes may be exchanged between the client and server routers.')
ciscoSnapshotQuietInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 100000)).clone(8)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoSnapshotQuietInterval.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotQuietInterval.setDescription('The amount of time during which routes are retained and frozen between active periods. An instance of this object may only be present if the value of the associated ciscoSnapshotClient object is true.')
ciscoSnapshotRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 6), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotRetryInterval.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotRetryInterval.setDescription('The amount of time to wait and retry a route exchange if an active period elapses with no routes being exchanged. For example, if an interface is down (or a DDR phone number is busy, or a DDR interface is unavailable) during the active interval, instead of waiting for the amount of time specified by ciscoSnapshotQuietTime to elapse before an attempt is made to exchange routing updates again, the attempt is made after the amount of time specified by this object has elapsed. This value is calculated automatically based on the ciscoSnapshotActiveInterval. An instance of this object may only be present if the value of the associated ciscoSnapshotClient object is true.')
ciscoSnapshotIfUpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goActive", 1), ("noAction", 2))).clone('goActive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoSnapshotIfUpAction.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotIfUpAction.setDescription("This object controls the action that takes place when the interface associated with this entry transitions to the `up' state while snapshot routing on the interface is in quiet mode. A value of goActive will cause the immediate transition to the active state. A value of noAction will cause no such transition. Instead, the transition to the active state will occur normally when the current quiet period has expired. Going active immediately incurs extra routing protocol overhead, but allows a fresh set of routing updates be exchanged each time the line is brought up. This is useful in a Dial-on-Demand routing environment. An instance of this object may only be present if the value of the associated ciscoSnapshotClient object is true.")
ciscoSnapshotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoSnapshotRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotRowStatus.setDescription('The status of this table entry. Once the entry status is set to active, the snapshot routing process will be enabled for this interface.')
ciscoSnapshotActivityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3), )
if mibBuilder.loadTexts: ciscoSnapshotActivityTable.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotActivityTable.setDescription('A list of snapshot routing activity entries.')
ciscoSnapshotActivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1), ).setIndexNames((0, "CISCO-SNAPSHOT-MIB", "ciscoSnapshotIfIndex"), (0, "CISCO-SNAPSHOT-MIB", "ciscoSnapshotActivityIndex"))
if mibBuilder.loadTexts: ciscoSnapshotActivityEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotActivityEntry.setDescription('A snapshot routing activity entry. Entries in this table are added for active row entries in the ciscoSnapshotInterfaceTable. If a row entry in the ciscoSnapshotInterfaceTable is set to notInService, or deleted, associated entries in this table will be deleted. Note that if the associated row in the ciscoSnapshotInterfaceTable is for a server router, entries in this table will only be present when the server is actively involved in snapshot routing updates.')
ciscoSnapshotActivityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ciscoSnapshotActivityIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotActivityIndex.setDescription('An index value that uniquely identifies a Snapshot Activity Entry on a given interface.')
ciscoSnapshotActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("quiet", 2), ("serverPostActive", 3), ("transitionToQuiet", 4), ("transitionToActive", 5), ("limbo", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotActivityState.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotActivityState.setDescription('The current state of snapshot routing for this entry. active means that routing information may be exchanged. quiet, only present on a client snapshot interface, means that routes are frozen, and that no routing information may be exchanged until the active state is reentered. serverPostActive, only present on a server snapshot interface, means that the active period has expired, but routing information will still be accepted from (but not sent to) the associated client router. transitionToQuiet, and transitionToActive, only present on a client, are temporary states entered after the active state, wherein any down to up transition of the interface will cause a move to the quiet or active state, respectively. limbo is a temporary state for activity blocks that are in the process of being created or destroyed.')
ciscoSnapshotActivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 3), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotActivityTimer.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotActivityTimer.setDescription('The amount of time remaining in the current state.')
ciscoSnapshotExchangeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 4), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotExchangeTimer.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotExchangeTimer.setDescription("The amount of time during the last active state, in which protocol exchanges occurred. The minimum time required to allow updates to be exchanged for a 'successfull update cycle' is the greater of 3 minutes, or 1/2 the active time. If the ciscoSnapshotExchangeTimer is less than this, the quiet state will use the retry interval to determine when next to go active. An instance of this object will only be present when the associated value of ciscoSnapshotClient is true for this interface.")
ciscoSnapshotDialerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotDialerMap.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotDialerMap.setDescription('Index of the dialer map entry associated with this snapshot activity record. A value of 0 indicates that no dialer map is associated with this entry. An instance of this object will only be present when the associated value of ciscoSnapshotDialer is true.')
ciscoSnapshotSourceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 6), CiscoNetworkProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotSourceProtocol.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotSourceProtocol.setDescription('The protocol of the host that initiated the snapshot routing activity associated with this record. An instance of this object will only be present when the associated value of ciscoSnapshotClient is false.')
ciscoSnapshotSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 7), CiscoNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotSourceAddress.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotSourceAddress.setDescription('The address of the host that initiated the snapshot routing activity associated with this record. An instance of this object will only be present when the associated value of ciscoSnapshotClient is false.')
ciscoSnapshotProtocolsExchanged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 19, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSnapshotProtocolsExchanged.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotProtocolsExchanged.setDescription('An array of bits that indicates whether or not routing information has been exchanged for all protocols. The most significant bit of the first octet represents the protocol associated with CiscoNetworkProtocol value of 0; the least significant bit of the first octet represents the protocol associated with CiscoNetworkProtocol value of 7; the most significant bit of the second octet represents the protocol associated with the CiscoNetworkProtocol value of 8; and so forth. Routing information for a given protocol has been exchanged if the associated bit is set. An instance of this object will only be present when the associated value of ciscoSnapshotClient is true.')
ciscoSnapshotMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 19, 2))
ciscoSnapshotMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 19, 2, 1))
ciscoSnapshotMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 19, 2, 2))
ciscoSnapshotMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 19, 2, 1, 1)).setObjects(("CISCO-SNAPSHOT-MIB", "ciscoSnapshotMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnapshotMIBCompliance = ciscoSnapshotMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Snapshot MIB')
ciscoSnapshotMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 19, 2, 2, 1)).setObjects(("CISCO-SNAPSHOT-MIB", "ciscoSnapshotForceActive"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotClient"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotDialer"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotActiveInterval"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotQuietInterval"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotRetryInterval"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotIfUpAction"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotRowStatus"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotActivityState"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotActivityTimer"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotExchangeTimer"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotDialerMap"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotSourceProtocol"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotSourceAddress"), ("CISCO-SNAPSHOT-MIB", "ciscoSnapshotProtocolsExchanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnapshotMIBGroup = ciscoSnapshotMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSnapshotMIBGroup.setDescription('A collection of objects providing snapshot routing ability to a Cisco agent.')
mibBuilder.exportSymbols("CISCO-SNAPSHOT-MIB", ciscoSnapshotForceActive=ciscoSnapshotForceActive, ciscoSnapshotMIB=ciscoSnapshotMIB, ciscoSnapshotActivityIndex=ciscoSnapshotActivityIndex, ciscoSnapshotDialer=ciscoSnapshotDialer, ciscoSnapshotMIBCompliance=ciscoSnapshotMIBCompliance, ciscoSnapshotMIBGroup=ciscoSnapshotMIBGroup, PYSNMP_MODULE_ID=ciscoSnapshotMIB, ciscoSnapshotProtocolsExchanged=ciscoSnapshotProtocolsExchanged, ciscoSnapshotDialerMap=ciscoSnapshotDialerMap, ciscoSnapshotSourceAddress=ciscoSnapshotSourceAddress, ciscoSnapshotActiveInterval=ciscoSnapshotActiveInterval, ciscoSnapshotActivityTable=ciscoSnapshotActivityTable, ciscoSnapshotExchangeTimer=ciscoSnapshotExchangeTimer, ciscoSnapshotIfUpAction=ciscoSnapshotIfUpAction, ciscoSnapshotMIBObjects=ciscoSnapshotMIBObjects, ciscoSnapshotIfIndex=ciscoSnapshotIfIndex, ciscoSnapshotMIBCompliances=ciscoSnapshotMIBCompliances, ciscoSnapshotRetryInterval=ciscoSnapshotRetryInterval, ciscoSnapshotMIBGroups=ciscoSnapshotMIBGroups, ciscoSnapshotSourceProtocol=ciscoSnapshotSourceProtocol, ciscoSnapshotActivityEntry=ciscoSnapshotActivityEntry, ciscoSnapshotQuietInterval=ciscoSnapshotQuietInterval, ciscoSnapshotInterfaceTable=ciscoSnapshotInterfaceTable, ciscoSnapshotClient=ciscoSnapshotClient, ciscoSnapshotActivityTimer=ciscoSnapshotActivityTimer, ciscoSnapshotActivityState=ciscoSnapshotActivityState, ciscoSnapshotMIBConformance=ciscoSnapshotMIBConformance, ciscoSnapshotRowStatus=ciscoSnapshotRowStatus, ciscoSnapshotInterfaceEntry=ciscoSnapshotInterfaceEntry)
