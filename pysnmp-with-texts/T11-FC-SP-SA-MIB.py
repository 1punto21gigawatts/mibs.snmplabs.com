#
# PySNMP MIB module T11-FC-SP-SA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/T11-FC-SP-SA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
FcAddressIdOrZero, fcmInstanceIndex = mibBuilder.importSymbols("FC-MGMT-MIB", "FcAddressIdOrZero", "fcmInstanceIndex")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, ObjectIdentity, Gauge32, iso, Bits, MibIdentifier, TimeTicks, Counter32, IpAddress, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Gauge32", "iso", "Bits", "MibIdentifier", "TimeTicks", "Counter32", "IpAddress", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Integer32", "NotificationType")
TimeStamp, RowStatus, StorageType, TextualConvention, DisplayString, AutonomousType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "StorageType", "TextualConvention", "DisplayString", "AutonomousType", "TruthValue")
T11FcSpTransforms, T11FcSpType, T11FcSpLifetimeLeftUnits, T11FcSpiIndex, T11FcSpLifetimeLeft, T11FcSpSecurityProtocolId, T11FcSaDirection, T11FcSpPrecedence, T11FcRoutingControl = mibBuilder.importSymbols("T11-FC-SP-TC-MIB", "T11FcSpTransforms", "T11FcSpType", "T11FcSpLifetimeLeftUnits", "T11FcSpiIndex", "T11FcSpLifetimeLeft", "T11FcSpSecurityProtocolId", "T11FcSaDirection", "T11FcSpPrecedence", "T11FcRoutingControl")
T11FabricIndex, = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")
t11FcSpSaMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 179))
t11FcSpSaMIB.setRevisions(('2008-08-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: t11FcSpSaMIB.setRevisionsDescriptions(('Initial version of this MIB module, published as RFC 5324.',))
if mibBuilder.loadTexts: t11FcSpSaMIB.setLastUpdated('200808200000Z')
if mibBuilder.loadTexts: t11FcSpSaMIB.setOrganization('This MIB module was developed through the coordinated effort of two organizations: T11 began the development and the IETF (in the IMSS Working Group) finished it.')
if mibBuilder.loadTexts: t11FcSpSaMIB.setContactInfo(' Claudio DeSanti Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134 USA EMail: cds@cisco.com Keith McCloghrie Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134 USA Email: kzm@cisco.com')
if mibBuilder.loadTexts: t11FcSpSaMIB.setDescription("This MIB module specifies the management information required to manage Security Associations established via Fibre Channel's FC-SP specification. The MIB module consists of six parts: - a per-Fabric table, t11FcSpSaIfTable, of capabilities, parameters, status information, and counters; the counters include non-transient aggregates of per-SA transient counters; - three tables, t11FcSpSaPropTable, t11FcSpSaTSelPropTable, and t11FcSpSaTransTable, specifying the proposals for an FC-SP entity acting as an SA_Initiator to present to the SA_Responder during the negotiation of Security Associations. The same information is also used by an FC-SP entity acting as an SA_Responder to decide what to accept during the negotiation of Security Associations. One of these tables, t11FcSpSaTransTable, is used not only for information about security transforms to propose and to accept, but also as agreed upon during the negotiation of Security Associations; - a table, t11FcSpSaTSelDrByTable, of Traffic Selectors having the security action of 'drop' or 'bypass' to be applied either to ingress traffic that is unprotected by FC-SP, or to all egress traffic; - four tables, t11FcSpSaPairTable, t11FcSpSaTSelNegInTable, t11FcSpSaTSelNegOutTable, and t11FcSpSaTSelSpiTable, containing information about active bidirectional pairs of Security Associations; in particular, t11FcSpSaPairTable has one row per active bidirectional SA pair, t11FcSpSaTSelNegInTable and t11FcSpSaTSelNegOutTable contain information on the Traffic Selectors negotiated on the SAs, and the t11FcSpSaTSelSpiTable is an alternate lookup table such that the Traffic Selector(s) in use on a particular Security Association can be quickly determined based on the (ingress) SPI value; - a table, t11FcSpSaControlTable, of control and other information concerning the generation of notifications for events related to FC-SP Security Associations; - one notification, t11FcSpSaNotifyAuthFailure, generated on the occurrence of an Authentication failure for a received FC-2 or CT_IU frame. Copyright (C) The IETF Trust (2008). This version of this MIB module is part of RFC 5324; see the RFC itself for full legal notices.")
t11FcSpSaMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 0))
t11FcSpSaMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 1))
t11FcSpSaMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 2))
t11FcSpSaBase = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 1, 1))
t11FcSpSaConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 1, 2))
t11FcSpSaActive = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 1, 3))
t11FcSpSaControl = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 1, 4))
t11FcSpSaIfTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 1, 1), )
if mibBuilder.loadTexts: t11FcSpSaIfTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfTable.setDescription('A table containing per-Fabric information related to FC-SP Security Associations.')
t11FcSpSaIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"))
if mibBuilder.loadTexts: t11FcSpSaIfEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfEntry.setDescription('Each entry contains information related to Security Associations on a particular Fabric, and managed as part of the Fibre Channel management instance identified by fcmInstanceIndex.')
t11FcSpSaIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: t11FcSpSaIfIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfIndex.setDescription("This object has a non-zero value to identify a particular interface, or the value zero to indicate that the information in this row applies to all (of the management instance's) interfaces to the particular Fabric. If any row has a non-zero value of t11FcSpSaIfIndex, then all rows for the same Fibre Channel management instance must also have a non-zero value of t11FcSpSaIfIndex and thereby be specific to a particular interface. As and when zero values of t11FcSpSaIfIndex are used in this table, then they must also be used in each other table that has t11FcSpSaIfIndex in its INDEX clause.")
t11FcSpSaIfFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 2), T11FabricIndex())
if mibBuilder.loadTexts: t11FcSpSaIfFabricIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfFabricIndex.setDescription('An index value that uniquely identifies a particular Fabric.')
t11FcSpSaIfEspHeaderCapab = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 3), T11FcSpTransforms()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfEspHeaderCapab.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, Appendix A.3.1, tables A.23, A.25.')
if mibBuilder.loadTexts: t11FcSpSaIfEspHeaderCapab.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfEspHeaderCapab.setDescription('A list of the standardized transforms supported by this entity on this interface for ESP_Header protection.')
t11FcSpSaIfCTAuthCapab = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 4), T11FcSpTransforms()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfCTAuthCapab.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, Appendix A.3.1, tables A.23, A.25.')
if mibBuilder.loadTexts: t11FcSpSaIfCTAuthCapab.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfCTAuthCapab.setDescription('A list of the standardized transforms supported by this entity on this interface for CT_Authentication protection.')
t11FcSpSaIfIKEv2Capab = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 5), T11FcSpTransforms()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfIKEv2Capab.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, Appendix A.3.1, tables A.23, A.24, A.25, A.26.')
if mibBuilder.loadTexts: t11FcSpSaIfIKEv2Capab.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfIKEv2Capab.setDescription('A list of the standardized transforms supported by this entity on this interface with IKEv2 protection.')
t11FcSpSaIfIkev2AuthCapab = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfIkev2AuthCapab.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.7.2, and table A.27.')
if mibBuilder.loadTexts: t11FcSpSaIfIkev2AuthCapab.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfIkev2AuthCapab.setDescription('An indication of whether the entity is capable of supporting the IKEv2-AUTH protocol on this interface, i.e., concatenation of Authentication and SA Management Transactions, such that an SA Management Transaction is used to perform both the authentication function and SA management.')
t11FcSpSaIfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 7), StorageType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaIfStorageType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfStorageType.setDescription("This object specifies the memory realization of information related to FC-SP Security Associations for interface(s) to a particular Fabric; specifically, for rows created and/or modified in these tables: t11FcSpSaPropTable t11FcSpSaTSelDrByTable t11FcSpSaControlTable and, for modified information contained in the same row as an instance of this object. Even if an instance of this object has the value 'permanent(4)', none of the information defined in this MIB module for interface(s) to the given Fabric need to be writable.")
t11FcSpSaIfReplayPrevention = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaIfReplayPrevention.setReference('- IP Encapsulating Security Payload (ESP), RFC 4303, December 2005, section 3.3.3.')
if mibBuilder.loadTexts: t11FcSpSaIfReplayPrevention.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfReplayPrevention.setDescription('This object indicates whether anti-replay protection is enabled for frame reception on this interface. Note that the replay-protection mechanism in FC-SP is conceptually similar to the corresponding mechanism in IPsec ESP.')
t11FcSpSaIfReplayWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaIfReplayWindowSize.setReference('- IP Encapsulating Security Payload (ESP), RFC 4303, December 2005, section 3.4.3.')
if mibBuilder.loadTexts: t11FcSpSaIfReplayWindowSize.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfReplayWindowSize.setDescription('The size of the replay window to be used when anti-replay protection is enabled for frame reception on this interface. Note that the replay-protection mechanism in FC-SP is conceptually similar to the corresponding mechanism in IPsec ESP.')
t11FcSpSaIfDeadPeerDetections = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfDeadPeerDetections.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 8.5.3.3.')
if mibBuilder.loadTexts: t11FcSpSaIfDeadPeerDetections.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfDeadPeerDetections.setDescription("The number of times that a dead peer condition has been detected on this interface. This counter has no discontinuities other than those that all Counter32's have when sysUpTime=0.")
t11FcSpSaIfTerminateAllSas = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("terminate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaIfTerminateAllSas.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfTerminateAllSas.setDescription("Setting this object to 'terminate' is a request to terminate all outstanding Security Associations on this interface. When read, the value of this object is always 'noop'. Setting this object to 'noop' has no effect.")
t11FcSpSaIfOutDrops = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfOutDrops.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfOutDrops.setDescription("The number of output frames that were dropped, instead of being transmitted on this interface, because they matched an active (at that time) Traffic Selector with an action of 'Drop'. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfOutBypasses = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfOutBypasses.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfOutBypasses.setDescription("The number of output frames that were transmitted unchanged by FC-SP on this interface because they matched an active (at that time) Traffic Selector with an action of 'Bypass'. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfOutProcesses = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfOutProcesses.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfOutProcesses.setDescription("The number of output frames that were protected by FC-SP before being transmitted on this interface because they matched an active (at that time) Traffic Selector with an action of 'Process'. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfOutUnMatcheds = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfOutUnMatcheds.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfOutUnMatcheds.setDescription("The number of frames that were transmitted unchanged by FC-SP on this interface because they did not match any Traffic Selector active at that time. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfInUnprotUnmtchDrops = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfInUnprotUnmtchDrops.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfInUnprotUnmtchDrops.setDescription("The number of frames received on this interface that were dropped because they were unprotected and did not match any Traffic Selector active at that time. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfInDetReplays = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfInDetReplays.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfInDetReplays.setDescription("The number of times that a replay has been detected on a Security Association that is currently active or was previously active on this interface. Note that a frame that is discarded because it is 'behind' the window, i.e., too old, is counted as a replay. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfInUnprotMtchDrops = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfInUnprotMtchDrops.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfInUnprotMtchDrops.setDescription("The number of times that a frame received on this interface was dropped because it matched with a Traffic Selector for a Security Association that was active at the time of receipt but the frame was not protected as negotiated for that Security Association. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfInBadXforms = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfInBadXforms.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfInBadXforms.setDescription("The number of times that a frame received on this interface was dropped because of a failure of one of the transforms negotiated for the Security Association on which it was received. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfInGoodXforms = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfInGoodXforms.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfInGoodXforms.setDescription("The number of frames received on this interface on a Security Association for which the transforms negotiated for that Security Association were successfully applied, and that matched a Traffic Selector for that Security Association. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaIfInProtUnmtchs = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaIfInProtUnmtchs.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaIfInProtUnmtchs.setDescription("The number of frames received on this interface that were dropped because they did not match any of the Traffic Selectors negotiated for the Security Association on which they were received, even though the Security Association's transforms were successfully applied. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaPropTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 2, 1), )
if mibBuilder.loadTexts: t11FcSpSaPropTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropTable.setDescription('A table of proposals for an FC-SP entity acting as an SA_Initiator to present to the SA_Responder during the negotiation of Security Associations. This information is also used by an FC-SP entity acting as an SA_Responder to decide what to accept during the negotiation of Security Associations.')
t11FcSpSaPropEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaPropIndex"))
if mibBuilder.loadTexts: t11FcSpSaPropEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropEntry.setDescription('Each entry contains information about one proposal for the FC-SP entity to present, or what to accept, during the negotiation of Security Associations on one or more interfaces (identified by t11FcSpSaIfIndex) to a particular Fabric (identified by t11FcSpSaIfFabricIndex), and managed as part of the Fibre Channel management instance identified by fcmInstanceIndex. The StorageType of a row in this table is specified by the instance of t11FcSpSaIfStorageType that is INDEX-ed by the same values of fcmInstanceIndex, t11FcSpSaIfIndex and t11FcSpSaIfFabricIndex.')
t11FcSpSaPropIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FcSpSaPropIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropIndex.setDescription('An index value that uniquely identifies a particular proposal for use on one or more interfaces to a Fabric.')
t11FcSpSaPropSecurityProt = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 2), T11FcSpSecurityProtocolId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaPropSecurityProt.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.3.2.2 and table 67.')
if mibBuilder.loadTexts: t11FcSpSaPropSecurityProt.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropSecurityProt.setDescription('The Security Protocol identifier for this proposal, i.e., whether the proposal is for traffic to be protected using ESP_Header or CT_Authentication.')
t11FcSpSaPropTSelListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaPropTSelListIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropTSelListIndex.setDescription("When the value of this object is non-zero, it points to the proposal's list of Traffic Selectors. The value must be non-zero in an active row of this table. The identified list is represented by all rows in the t11FcSpSaTSelPropTable for which t11FcSpSaTSelPropListIndex has the same value as this object (and with corresponding values of t11FcSpSaIfIndex and fcmInstanceIndex).")
t11FcSpSaPropTransListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaPropTransListIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropTransListIndex.setDescription("When the value of this object is non-zero, it points to the proposal's list of Transforms. The value must be non-zero in an active row of this table. The identified list is represented by all rows in the t11FcSpSaTransTable for which t11FcSpSaTransListIndex has the same value as this object (and with corresponding values of t11FcSpSaIfIndex and fcmInstanceIndex).")
t11FcSpSaPropAcceptAlgorithm = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("intersection", 1), ("union", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaPropAcceptAlgorithm.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropAcceptAlgorithm.setDescription("The algorithm by which an SA_Responder in an SA negotiation decides on which Traffic Selectors to specify in a response to an IKE_Create_Child_SA request. This algorithm is used when the Traffic Selectors specified by an SA_Initiator in an IKE_Create_Child_SA request overlap with this proposal's list of Traffic Selectors: intersection(1) - the SA_Responder specifies the largest subset of what the SA_Initiator proposed, which is also a subset of this proposal's Traffic Selectors. union(2) - the SA_Responder specifies the smallest superset of what the SA_Initiator proposed, which is also a superset of this proposal's Traffic Selectors. other(3) - the SA_Responder uses some other algorithm. ")
t11FcSpSaPropOutMatchSucceeds = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPropOutMatchSucceeds.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropOutMatchSucceeds.setDescription("The number of egress frames that have matched a Traffic Selector that was negotiated to select traffic for an SA based on this proposal being accepted. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaPropRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaPropRowStatus.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPropRowStatus.setDescription("The status of a row. Values of object instances within an active row can be modified at any time. The status cannot be set to 'active' unless and until the instances of t11FcSpSaPropTSelListIndex and t11FcSpSaPropTransListIndex in the row have been set to point to active rows in the t11FcSpSaTSelPropTable and t11FcSpSaTransTable tables, respectively. A row in this table is deleted if the active rows it points to are deleted.")
t11FcSpSaTSelPropTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 2, 2), )
if mibBuilder.loadTexts: t11FcSpSaTSelPropTable.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5. - Use of IKEv2 in FC-SP, RFC 4595, July 2006, section 4.4.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropTable.setDescription('A table containing information about Traffic Selectors to propose and/or to accept during the negotiation of Security Associations.')
t11FcSpSaTSelPropEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropListIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropPrecedence"))
if mibBuilder.loadTexts: t11FcSpSaTSelPropEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEntry.setDescription("Each entry contains information about one Traffic Selector within a list of Traffic Selectors to propose, or for use in determining what to accept during Security Association negotiation. One such list is configured for use on a Fabric by configuring the list's value of t11FcSpSaTSelPropListIndex as the value of an instance of t11FcSpSaPropTSelListIndex, for corresponding values of t11FcSpSaIfIndex and fcmInstanceIndex. Further, the proposing and accepting of Traffic Selectors is only done as a part of a proposal specified by a row of the t11FcSpSaPropTable, i.e., in combination with the proposing and accepting of security transforms as specified by the combination of t11FcSpSaPropTSelListIndex and t11FcSpSaPropTransListIndex in one row of the t11FcSpSaPropTable. The StorageType of a row in this table is specified by the instance of t11FcSpSaTSelPropStorageType in that row.")
t11FcSpSaTSelPropListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FcSpSaTSelPropListIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropListIndex.setDescription('An index value that identifies a particular list of Traffic Selectors.')
t11FcSpSaTSelPropPrecedence = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 2), T11FcSpPrecedence())
if mibBuilder.loadTexts: t11FcSpSaTSelPropPrecedence.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropPrecedence.setDescription('The precedence of this Traffic Selector. Each Traffic Selector within a particular list of Traffic Selectors must have a different precedence. If an egress frame matches multiple Traffic Selectors, it should be transmitted on the SA associated with the Traffic Selector having the numerically smallest precedence value.')
t11FcSpSaTSelPropDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 3), T11FcSaDirection().clone('egress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropDirection.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropDirection.setDescription('An indication of whether this Traffic Selector is to be proposed for ingress or egress traffic.')
t11FcSpSaTSelPropStartSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 4), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartSrcAddr.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartSrcAddr.setDescription('The numerically smallest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelPropEndSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 5), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="FFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndSrcAddr.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndSrcAddr.setDescription('The numerically largest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelPropStartDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 6), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartDstAddr.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartDstAddr.setDescription('The numerically smallest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelPropEndDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 7), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="FFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndDstAddr.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndDstAddr.setDescription('The numerically largest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelPropStartRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 8), T11FcRoutingControl().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartRCtl.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartRCtl.setDescription('The numerically smallest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelPropEndRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 9), T11FcRoutingControl().clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndRCtl.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndRCtl.setDescription('The numerically largest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelPropStartType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 10), T11FcSpType().clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartType.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStartType.setDescription("The numerically smallest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelPropEndType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 11), T11FcSpType().clone(hexValue="FFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndType.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.4.5.')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropEndType.setDescription("The numerically largest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelPropStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropStorageType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropStorageType.setDescription("This object specifies the memory realization of the information in this row. Even if an instance of this object has the value 'permanent(4)', none of the information in its row needs to be writable.")
t11FcSpSaTSelPropRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelPropRowStatus.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelPropRowStatus.setDescription('The status of this row. Values of object instances within the row can be modified at any time.')
t11FcSpSaTransTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 2, 3), )
if mibBuilder.loadTexts: t11FcSpSaTransTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransTable.setDescription('A table containing information about security transforms to propose, to accept and/or agreed upon during the negotiation of Security Associations.')
t11FcSpSaTransEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTransListIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTransIndex"))
if mibBuilder.loadTexts: t11FcSpSaTransEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransEntry.setDescription("Each entry contains information about one proposal within a list of security transforms to be proposed, to be accepted, or already agreed upon, for use on a pair of Security Associations on one or more interfaces (identified by t11FcSpSaIfIndex), managed as part of the Fibre Channel management instance identified by fcmInstanceIndex. One such list is configured to be proposed or accepted for use on a Fabric, by having the list's value of t11FcSpSaTransListIndex be the value of an instance of t11FcSpSaPropTransListIndex for that Fabric. Further, the proposing and accepting of security transforms is only done as a part of a proposal specified by a row of the t11FcSpSaPropTable, i.e., in combination with the proposing and accepting of Traffic Selectors as specified by the combination of t11FcSpSaPropTSelListIndex and t11FcSpSaPropTransListIndex in one row of the t11FcSpSaPropTable. The security (encryption and integrity) transform in use on an SA pair is indicated by having the pair's values of t11FcSpSaPairTransListIndex and t11FcSpSaPairTransIndex contain the values of t11FcSpSaTransListIndex and t11FcSpSaTransIndex for the transform's row in this table. The StorageType of a row in this table is specified by the instance of t11FcSpSaTransStorageType in that row.")
t11FcSpSaTransListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FcSpSaTransListIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransListIndex.setDescription('An index value that uniquely identifies a particular list of security transforms to be proposed, to be accepted, or already agreed upon.')
t11FcSpSaTransIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FcSpSaTransIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransIndex.setDescription('An index value that uniquely identifies one security transform within a list identified by t11FcSpSaTransListIndex.')
t11FcSpSaTransSecurityProt = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 3), T11FcSpSecurityProtocolId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTransSecurityProt.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.3.2.2 and table 67.')
if mibBuilder.loadTexts: t11FcSpSaTransSecurityProt.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransSecurityProt.setDescription('The Security Protocol identifier that indicates whether this transform is for traffic to be protected using ESP_Header or using CT_Authentication.')
t11FcSpSaTransEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 4), AutonomousType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTransEncryptAlg.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.3.2.3 and tables 69 & 70.')
if mibBuilder.loadTexts: t11FcSpSaTransEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransEncryptAlg.setDescription('The Encryption Algorithm for this transform.')
t11FcSpSaTransEncryptKeyLen = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTransEncryptKeyLen.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.3.2.5 and table 77.')
if mibBuilder.loadTexts: t11FcSpSaTransEncryptKeyLen.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransEncryptKeyLen.setDescription('The key length in bits to be used with an encryption algorithm that has a variable length key. This object is ignored when the corresponding instance of t11FcSpSaTransEncryptAlg specifies an algorithm with a fixed length key.')
t11FcSpSaTransIntegrityAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 6), AutonomousType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTransIntegrityAlg.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, section 6.3.2.3 and tables 69 & 72.')
if mibBuilder.loadTexts: t11FcSpSaTransIntegrityAlg.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransIntegrityAlg.setDescription('The Integrity Algorithm for this transform.')
t11FcSpSaTransStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTransStorageType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransStorageType.setDescription("This object specifies the memory realization of the information in this row. Even if an instance of this object has the value 'permanent(4)', none of the information in its row needs to be writable.")
t11FcSpSaTransRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTransRowStatus.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTransRowStatus.setDescription('The status of this row. When an instance of t11FcSpSaPairTransListIndex points to a row in this table, values of object instances in the row cannot be modified nor can the row be deleted. Otherwise, a row can be modified or deleted at any time.')
t11FcSpSaTSelDrByTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 2, 4), )
if mibBuilder.loadTexts: t11FcSpSaTSelDrByTable.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, sections 4.6, 4.7, and 6.4.5. - Use of IKEv2 in FC-SP, RFC 4595, July 2006, section 4.4.')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByTable.setDescription('A table containing Traffic Selectors to select which traffic is to be dropped or is to bypass further security processing.')
t11FcSpSaTSelDrByEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByDirection"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByPrecedence"))
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEntry.setDescription("Each entry represents one Traffic Selector having the security action of 'drop' or 'bypass', which is applied based on a precedence value, either to ingress traffic that is unprotected by FC-SP, or to all egress traffic on one or more interfaces (identified by t11FcSpSaIfIndex) to a particular Fabric (identified by t11FcSpSaIfFabricIndex), and managed as part of the Fibre Channel management instance identified by fcmInstanceIndex. The StorageType of a row in this table is specified by the instance of t11FcSpSaIfStorageType that is INDEX-ed by the same values of fcmInstanceIndex, t11FcSpSaIfIndex and t11FcSpSaIfFabricIndex.")
t11FcSpSaTSelDrByDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 1), T11FcSaDirection())
if mibBuilder.loadTexts: t11FcSpSaTSelDrByDirection.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByDirection.setDescription('An indication of whether this Traffic Selector is for ingress or egress traffic.')
t11FcSpSaTSelDrByPrecedence = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 2), T11FcSpPrecedence())
if mibBuilder.loadTexts: t11FcSpSaTSelDrByPrecedence.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByPrecedence.setDescription('The precedence of this Traffic Selector. If and when a frame is compared against multiple Traffic Selectors, and multiple of them have a match with the frame, the security action to be taken for the frame is that specified for the matching Traffic Selector having the numerically smallest precedence value.')
t11FcSpSaTSelDrByAction = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("bypass", 2))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByAction.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByAction.setDescription('The security action to be taken for a frame that matches this Traffic Selector.')
t11FcSpSaTSelDrByStartSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 4), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartSrcAddr.setDescription('The numerically smallest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelDrByEndSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 5), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="FFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndSrcAddr.setDescription('The numerically largest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelDrByStartDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 6), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartDstAddr.setDescription('The numerically smallest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelDrByEndDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 7), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="FFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndDstAddr.setDescription('The numerically largest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelDrByStartRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 8), T11FcRoutingControl().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartRCtl.setDescription('The numerically smallest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelDrByEndRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 9), T11FcRoutingControl().clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndRCtl.setDescription('The numerically largest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelDrByStartType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 10), T11FcSpType().clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByStartType.setDescription("The numerically smallest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelDrByEndType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 11), T11FcSpType().clone(hexValue="FFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByEndType.setDescription("The numerically largest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelDrByMatches = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByMatches.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByMatches.setDescription("The number of frames for which the action specified by the corresponding instance of t11FcSpSaTSelDrByAction was taken because of a match with this Traffic Selector. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaTSelDrByRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 2, 4, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FcSpSaTSelDrByRowStatus.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelDrByRowStatus.setDescription('The status of this row. Values of object instances within the row can be modified at any time.')
t11FcSpSaPairTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 3, 1), )
if mibBuilder.loadTexts: t11FcSpSaPairTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairTable.setDescription('A table containing information about active bidirectional pairs of Security Associations.')
t11FcSpSaPairEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaPairIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaPairInboundSpi"))
if mibBuilder.loadTexts: t11FcSpSaPairEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairEntry.setDescription('Each entry contains information about one active bidirectional pair of Security Associations on an interface to a particular Fabric (identified by t11FcSpSaIfFabricIndex), managed as part of the Fibre Channel management instance identified by fcmInstanceIndex.')
t11FcSpSaPairIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: t11FcSpSaPairIfIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairIfIndex.setDescription('This object identifies the interface to the particular Fabric on which this SA pair is active.')
t11FcSpSaPairInboundSpi = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 2), T11FcSpiIndex())
if mibBuilder.loadTexts: t11FcSpSaPairInboundSpi.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairInboundSpi.setDescription('The SPI value that is used to indicate that an incoming frame was received on the ingress SA of this SA pair.')
t11FcSpSaPairSecurityProt = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 3), T11FcSpSecurityProtocolId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairSecurityProt.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairSecurityProt.setDescription('The object indicates whether this SA uses ESP_Header to protect FC-2 frames, or CT_Authentication to protect Common Transport Information Units (CT_IUs).')
t11FcSpSaPairTransListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairTransListIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairTransListIndex.setDescription('The combination of this value and the value of the corresponding instance of t11FcSpSaPairTransIndex identify the row in the t11FcSpSaTransTable that contains the transforms that are in use on this SA pair.')
t11FcSpSaPairTransIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairTransIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairTransIndex.setDescription('The combination of this value and the value of the corresponding instance of t11FcSpSaPairTransListIndex identify the row in the t11FcSpSaTransTable that contains the transforms that are in use on this SA pair.')
t11FcSpSaPairLifetimeLeft = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 6), T11FcSpLifetimeLeft()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairLifetimeLeft.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairLifetimeLeft.setDescription('The remaining lifetime of this SA pair, given in the units specified by the value of the corresponding instance of t11FcSpSaPairLifetimeLeft.')
t11FcSpSaPairLifetimeLeftUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 7), T11FcSpLifetimeLeftUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairLifetimeLeftUnits.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairLifetimeLeftUnits.setDescription('The units in which the value of the corresponding instance of t11FcSpSaPairLifetimeLeft specifies the remaining lifetime of this SA pair.')
t11FcSpSaPairTerminate = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("terminate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaPairTerminate.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairTerminate.setDescription("Setting this object to 'terminate' is a request to terminate this pair of Security Associations. When read, the value of this object is always 'noop'. Setting this object to 'noop' has no effect.")
t11FcSpSaPairInProtUnMatchs = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairInProtUnMatchs.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairInProtUnMatchs.setDescription("The number of frames received on this SA for which the SA's transforms were successfully applied to the frame, but the frame was still dropped because it did not match any of the SA's ingress Traffic Selectors. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaPairInDetReplays = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairInDetReplays.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairInDetReplays.setDescription("The number of times that a replay has been detected on this Security Association. Note that a frame that is discarded because it is 'behind' the window, i.e., too old, is counted as a replay. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaPairInBadXforms = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairInBadXforms.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairInBadXforms.setDescription("The number of times that a received frame was dropped because one of the transforms negotiated for this Security Association failed. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaPairInGoodXforms = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaPairInGoodXforms.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaPairInGoodXforms.setDescription("The number of received frames for which the transforms negotiated for this Security Association, were successfully applied. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaTSelNegInTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 3, 2), )
if mibBuilder.loadTexts: t11FcSpSaTSelNegInTable.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, sections 4.6, 4.7, and 6.4.5. - Use of IKEv2 in FC-SP, RFC 4595, July 2006, section 4.4.')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInTable.setDescription('A table containing information about ingress Traffic Selectors that are in use on active Security Associations.')
t11FcSpSaTSelNegInEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaPairIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInIndex"))
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEntry.setDescription('Each entry contains information about one ingress Traffic Selector that is in use on an active Security Association on an interface (identified by t11FcSpSaPairIfIndex) to a particular Fabric (identified by t11FcSpSaIfFabricIndex), managed as part of the Fibre Channel management instance identified by fcmInstanceIndex.')
t11FcSpSaTSelNegInIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FcSpSaTSelNegInIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInIndex.setDescription('An index value to distinguish an ingress Traffic Selector from all others currently in use by Security Associations on the same interface to a particular Fabric.')
t11FcSpSaTSelNegInInboundSpi = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 2), T11FcSpiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInInboundSpi.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInInboundSpi.setDescription("The SPI of the ingress SA on which this Traffic Selector is in use. This value can be used to find the SA pair's row in the t11FcSpSaPairTable.")
t11FcSpSaTSelNegInStartSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 3), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartSrcAddr.setDescription('The numerically smallest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegInEndSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 4), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndSrcAddr.setDescription('The numerically largest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegInStartDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 5), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartDstAddr.setDescription('The numerically smallest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegInEndDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 6), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndDstAddr.setDescription('The numerically largest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegInStartRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 7), T11FcRoutingControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartRCtl.setDescription('The numerically smallest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegInEndRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 8), T11FcRoutingControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndRCtl.setDescription('The numerically largest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegInStartType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 9), T11FcSpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInStartType.setDescription("The numerically smallest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelNegInEndType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 10), T11FcSpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInEndType.setDescription("The numerically largest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelNegInUnpMtchDrops = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegInUnpMtchDrops.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegInUnpMtchDrops.setDescription("The number of times that a received frame was dropped because it matched with this Traffic Selector but the frame was not protected as negotiated for the Security Association identified by t11FcSpSaTSelNegInInboundSpi. This counter has no discontinuities other than those that all Counter64's have when sysUpTime=0.")
t11FcSpSaTSelNegOutTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 3, 3), )
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutTable.setReference('- ANSI INCITS 426-2007, T11/Project 1570-D, Fibre Channel - Security Protocols (FC-SP), February 2007, sections 4.6, 4.7, and 6.4.5. - Use of IKEv2 in FC-SP, RFC 4595, July 2006, section 4.4.')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutTable.setDescription('A table containing information about egress Traffic Selectors that are in use on active Security Associations.')
t11FcSpSaTSelNegOutEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaPairIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutPrecedence"))
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEntry.setDescription('Each entry contains information about one egress Traffic Selector that is in use on an active Security Association on an interface (identified by t11FcSpSaPairIfIndex) to a particular Fabric (identified by t11FcSpSaIfFabricIndex), managed as part of the Fibre Channel management instance identified by fcmInstanceIndex.')
t11FcSpSaTSelNegOutPrecedence = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 1), T11FcSpPrecedence())
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutPrecedence.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutPrecedence.setDescription('The precedence of this Traffic Selector. If and when a frame is compared against multiple Traffic Selectors, and multiple of them have a match with the frame, the security action to be taken for the frame is that specified for the matching Traffic Selector having the numerically smallest precedence value.')
t11FcSpSaTSelNegOutInboundSpi = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 2), T11FcSpiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutInboundSpi.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutInboundSpi.setDescription("The SPI of the ingress SA of the SA pair for which this Traffic Selector is in use on the egress SA. This value can be used to find the SA pair's row in the t11FcSpSaPairTable.")
t11FcSpSaTSelNegOutStartSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 3), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartSrcAddr.setDescription('The numerically smallest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegOutEndSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 4), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndSrcAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndSrcAddr.setDescription('The numerically largest 24-bit value of a source address (S_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegOutStartDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 5), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartDstAddr.setDescription('The numerically smallest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegOutEndDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 6), FcAddressIdOrZero().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndDstAddr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndDstAddr.setDescription('The numerically largest 24-bit value of a destination address (D_ID) of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegOutStartRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 7), T11FcRoutingControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartRCtl.setDescription('The numerically smallest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegOutEndRCtl = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 8), T11FcRoutingControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndRCtl.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndRCtl.setDescription('The numerically largest 8-bit value contained within a Routing Control (R_CTL) field of a frame that will match with this Traffic Selector.')
t11FcSpSaTSelNegOutStartType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 9), T11FcSpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutStartType.setDescription("The numerically smallest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelNegOutEndType = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 3, 1, 10), T11FcSpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndType.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelNegOutEndType.setDescription("The numerically largest of a range of possible 'type' values of frames that will match with this Traffic Selector.")
t11FcSpSaTSelSpiTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 3, 4), )
if mibBuilder.loadTexts: t11FcSpSaTSelSpiTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelSpiTable.setDescription('A table identifying the Traffic Selectors in use on particular Security Associations, INDEX-ed by their (ingress) SPI values.')
t11FcSpSaTSelSpiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 3, 4, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaPairIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelSpiInboundSpi"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaTSelSpiTrafSelIndex"))
if mibBuilder.loadTexts: t11FcSpSaTSelSpiEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelSpiEntry.setDescription('Each entry identifies one Traffic Selector in use on an SA pair on the interface (identified by t11FcSpSaPairIfIndex) to a particular Fabric (identified by t11FcSpSaIfFabricIndex), and managed as part of the Fibre Channel management instance identified by fcmInstanceIndex.')
t11FcSpSaTSelSpiInboundSpi = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 4, 1, 1), T11FcSpiIndex())
if mibBuilder.loadTexts: t11FcSpSaTSelSpiInboundSpi.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelSpiInboundSpi.setDescription('An SPI value that identifies the ingress Security Association of a particular SA pair.')
t11FcSpSaTSelSpiTrafSelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FcSpSaTSelSpiTrafSelIndex.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelSpiTrafSelIndex.setDescription('An index value that distinguishes between the (potentially multiple) Traffic Selectors in use on this Security Association pair.')
t11FcSpSaTSelSpiDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 4, 1, 3), T11FcSaDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelSpiDirection.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelSpiDirection.setDescription('This object indicates whether this Traffic Selector is being used for ingress or for egress traffic.')
t11FcSpSaTSelSpiTrafSelPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaTSelSpiTrafSelPtr.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaTSelSpiTrafSelPtr.setDescription("This object contains a pointer into another table that can be used to obtain more information about this Traffic Selector. If the corresponding instance of t11FcSpSaTSelSpiDirection has the value 'egress', then this object contains the value of t11FcSpSaTSelNegOutPrecedence in the row of t11FcSpSaTSelNegOutTable, which contains more information. If the corresponding instance of t11FcSpSaTSelSpiDirection has the value 'ingress', then this object contains the value of t11FcSpSaTSelNegInIndex that identifies the row in t11FcSpSaTSelNegInTable containing more information.")
t11FcSpSaControlTable = MibTable((1, 3, 6, 1, 2, 1, 179, 1, 4, 1), )
if mibBuilder.loadTexts: t11FcSpSaControlTable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlTable.setDescription('A table of control and other information concerning the generation of notifications for events related to FC-SP Security Associations.')
t11FcSpSaControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfIndex"), (0, "T11-FC-SP-SA-MIB", "t11FcSpSaIfFabricIndex"))
if mibBuilder.loadTexts: t11FcSpSaControlEntry.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlEntry.setDescription('Each entry identifies information for the one or more interfaces (identified by t11FcSpSaIfIndex) to a particular Fabric (identified by t11FcSpSaIfFabricIndex), and managed as part of the Fibre Channel management instance identified by fcmInstanceIndex. The StorageType of a row in this table is specified by the instance of t11FcSpSaIfStorageType that is INDEX-ed by the same values of fcmInstanceIndex, t11FcSpSaIfIndex, and t11FcSpSaIfFabricIndex.')
t11FcSpSaControlAuthFailEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaControlAuthFailEnable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlAuthFailEnable.setDescription('This object specifies whether a t11FcSpSaNotifyAuthFailure notification should be generated for the first occurrence of an Authentication failure within a time window for this Fabric.')
t11FcSpSaControlInboundSpi = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 2), T11FcSpiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlInboundSpi.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlInboundSpi.setDescription('The SPI value of the ingress Security Association on which was received the last frame for which a t11FcSpSaNotifyAuthFailure was generated. If no t11FcSpSaNotifyAuthFailure notifications have been generated, the value of this object is zero.')
t11FcSpSaControlSource = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 3), FcAddressIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlSource.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlSource.setDescription('The S_ID contained in the last frame for which a t11FcSpSaNotifyAuthFailure was generated. If no t11FcSpSaNotifyAuthFailure notifications have been generated, the value of this object is the zero-length string.')
t11FcSpSaControlDestination = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 4), FcAddressIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlDestination.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlDestination.setDescription('The D_ID contained in the last frame for which a t11FcSpSaNotifyAuthFailure was generated. If no t11FcSpSaNotifyAuthFailure notifications have been generated, the value of this object is the zero-length string.')
t11FcSpSaControlFrame = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlFrame.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlFrame.setDescription('The binary content of the last frame for which a t11FcSpSaNotifyAuthFailure was generated. If more than 256 bytes of the frame are available, then this object contains the first 256 bytes. If less than 256 bytes of the frame are available, then this object contains the first N bytes, where N is greater or equal to zero. If no t11FcSpSaNotifyAuthFailure notifications have been generated, the value of this object is the zero-length string.')
t11FcSpSaControlElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlElapsed.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlElapsed.setDescription('The elapsed time since the last generation of a t11FcSpSaNotifyAuthFailure notification on the same Fabric, or the value of sysUpTime if no t11FcSpSaNotifyAuthFailure notifications have been generated since the last restart.')
t11FcSpSaControlSuppressed = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlSuppressed.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlSuppressed.setDescription('The number of occurrences of an Authentication failure on a Fabric that were suppressed because they occurred on the same Fabric within the same time window as a previous Authentication failure for which a t11FcSpSaNotifyAuthFailure notification was generated. The value of this object is reset to zero on a restart of the network management subsystem, and whenever a t11FcSpSaNotifyAuthFailure notification is generated. In the event that the value of this object reaches its maximum value, it remains at that value until it is reset on the generation of the next t11FcSpSaNotifyAuthFailure notification.')
t11FcSpSaControlWindow = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaControlWindow.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlWindow.setDescription('The length of a time window that begins when a t11FcSpSaNotifyAuthFailure notification is generated for any Security Association on a particular Fabric. For the duration of the time window, further Authentication failures occurring for the same Security Association are counted but no t11FcSpSaNotifyAuthFailure notification is generated. When this object is modified before the end of a time window, that time window is immediately terminated, i.e., the next Authentication failure on the relevant Fabric after the modification will cause a new time window to begin with the new length.')
t11FcSpSaControlMaxNotifs = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 9), Unsigned32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaControlMaxNotifs.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlMaxNotifs.setDescription('The maximum number of t11FcSpSaNotifyAuthFailure notifications to be generated per Fabric within a t11FcSpSaControlWindow time window. Subsequent Authentication failures occurring on the same Fabric in the same time window are counted, but no t11FcSpSaNotifyAuthFailure notification is generated. When this object is modified before the end of a time window, that time window is immediately terminated, i.e., the next Authentication failure on the relevant Fabric after the modification will cause a new time window to begin with the new length.')
t11FcSpSaControlLifeExcdEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdEnable.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdEnable.setDescription('This object specifies whether t11FcSpSaNotifyLifeExceeded notifications should be generated for this Fabric.')
t11FcSpSaControlLifeExcdSpi = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 11), T11FcSpiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdSpi.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdSpi.setDescription('The SPI of the SA that was most recently terminated because its lifetime (in seconds or in passed bytes) was exceeded. Such terminations include those due to a failed attempt to renew an SA after its lifetime was exceeded.')
t11FcSpSaControlLifeExcdDir = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 12), T11FcSaDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdDir.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdDir.setDescription('The direction of frame transmission on the SA that was most recently terminated because its lifetime (in seconds or in passed bytes) was exceeded.')
t11FcSpSaControlLifeExcdTime = MibTableColumn((1, 3, 6, 1, 2, 1, 179, 1, 4, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdTime.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaControlLifeExcdTime.setDescription('The time of the most recent termination of an SA due to its lifetime (in seconds or in passed bytes) being exceeded. Such terminations include those due to a failed attempt to renew an SA after its lifetime was exceeded.')
t11FcSpSaNotifyAuthFailure = NotificationType((1, 3, 6, 1, 2, 1, 179, 0, 1)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaControlInboundSpi"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlSource"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlDestination"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlFrame"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlElapsed"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlSuppressed"))
if mibBuilder.loadTexts: t11FcSpSaNotifyAuthFailure.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaNotifyAuthFailure.setDescription("When this notification is generated, it indicates the occurrence of an Authentication failure for a received FC-2 or CT_IU frame. The t11FcSpSaControlInboundSpi, t11FcSpSaControlSource, and t11FcSpSaControlDestination objects in the varbindlist are the frame's SPI, source and destination addresses, respectively. t11FcSpSaControlFrame provides the (beginning of the) frame's content if such is available. This notification is generated only for the first occurrence of an Authentication failure on a Fabric within a time window. Subsequent occurrences of an Authentication Failure on the same Fabric within the same time window are counted but suppressed. The value of t11FcSpSaControlElapsed contains (a lower bound on) the elapsed time since the last generation of this notification for the same Fabric. The value of t11FcSpSaControlSuppressed contains the number of generations which were suppressed in the time window after that last generation, or zero if unknown.")
t11FcSpSaNotifyLifeExceeded = NotificationType((1, 3, 6, 1, 2, 1, 179, 0, 2)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaControlLifeExcdSpi"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlLifeExcdDir"))
if mibBuilder.loadTexts: t11FcSpSaNotifyLifeExceeded.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaNotifyLifeExceeded.setDescription('This notification is generated when the lifetime (in seconds or in passed bytes) of an SA is exceeded, and the SA is either immediately terminated or is terminated because an attempt to renew the SA fails. The values of t11FcSpSaControlLifeExcdSpi and t11FcSpSaControlLifeExcdDir contain the SPI and direction of the terminated SA.')
t11FcSpSaMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 2, 1))
t11FcSpSaMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 179, 2, 2))
t11FcSpSaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 179, 2, 1, 1)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaCapabilityGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaParamStatusGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaSummaryCountGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaProposalGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaDropBypassGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaActiveGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaNotifInfoGroup"), ("T11-FC-SP-SA-MIB", "t11FcSpSaNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaMIBCompliance = t11FcSpSaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaMIBCompliance.setDescription('The compliance statement for entities that implement FC-SP Security Associations.')
t11FcSpSaCapabilityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 1)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaIfEspHeaderCapab"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfCTAuthCapab"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfIKEv2Capab"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfIkev2AuthCapab"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaCapabilityGroup = t11FcSpSaCapabilityGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaCapabilityGroup.setDescription('A collection of objects containing information related to capabilities of FC-SP entities.')
t11FcSpSaParamStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 2)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaIfStorageType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfReplayPrevention"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfReplayWindowSize"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfDeadPeerDetections"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfTerminateAllSas"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaParamStatusGroup = t11FcSpSaParamStatusGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaParamStatusGroup.setDescription('A collection of objects containing parameters and status information related to FC-SP entities.')
t11FcSpSaSummaryCountGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 3)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaIfOutDrops"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfOutBypasses"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfOutProcesses"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfOutUnMatcheds"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfInUnprotUnmtchDrops"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfInDetReplays"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfInUnprotMtchDrops"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfInBadXforms"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfInGoodXforms"), ("T11-FC-SP-SA-MIB", "t11FcSpSaIfInProtUnmtchs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaSummaryCountGroup = t11FcSpSaSummaryCountGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaSummaryCountGroup.setDescription('A collection of objects containing summary counters for FC-SP Security Associations.')
t11FcSpSaProposalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 4)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaPropSecurityProt"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPropTSelListIndex"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPropTransListIndex"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPropAcceptAlgorithm"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPropOutMatchSucceeds"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPropRowStatus"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropDirection"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropStartSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropEndSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropStartDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropEndDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropStartRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropEndRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropStartType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropEndType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropStorageType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelPropRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaProposalGroup = t11FcSpSaProposalGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaProposalGroup.setDescription('A collection of objects containing information related to making and accepting proposals for FC-SP Security Associations.')
t11FcSpSaDropBypassGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 5)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByAction"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByStartSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByEndSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByStartDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByEndDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByStartRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByEndRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByStartType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByEndType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByMatches"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelDrByRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaDropBypassGroup = t11FcSpSaDropBypassGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaDropBypassGroup.setDescription('A collection of objects containing information about Traffic Selectors of traffic to drop or bypass for FC-SP Security.')
t11FcSpSaActiveGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 6)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaPairSecurityProt"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairTransListIndex"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairTransIndex"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairLifetimeLeft"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairLifetimeLeftUnits"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairTerminate"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairInProtUnMatchs"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairInDetReplays"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairInBadXforms"), ("T11-FC-SP-SA-MIB", "t11FcSpSaPairInGoodXforms"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTransSecurityProt"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTransEncryptAlg"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTransEncryptKeyLen"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTransIntegrityAlg"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTransStorageType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTransRowStatus"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInInboundSpi"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInStartSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInEndSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInStartDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInEndDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInStartRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInEndRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInStartType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInEndType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegInUnpMtchDrops"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutInboundSpi"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutStartSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutEndSrcAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutStartDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutEndDstAddr"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutStartRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutEndRCtl"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutStartType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelNegOutEndType"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelSpiDirection"), ("T11-FC-SP-SA-MIB", "t11FcSpSaTSelSpiTrafSelPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaActiveGroup = t11FcSpSaActiveGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaActiveGroup.setDescription('A collection of objects containing information related to currently active FC-SP Security Associations.')
t11FcSpSaNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 7)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaControlAuthFailEnable"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlInboundSpi"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlSource"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlDestination"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlFrame"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlElapsed"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlSuppressed"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlWindow"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlMaxNotifs"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlLifeExcdEnable"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlLifeExcdSpi"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlLifeExcdDir"), ("T11-FC-SP-SA-MIB", "t11FcSpSaControlLifeExcdTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaNotifInfoGroup = t11FcSpSaNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaNotifInfoGroup.setDescription('A collection of objects containing information related to notifications of events concerning FC-SP Security Associations.')
t11FcSpSaNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 179, 2, 2, 8)).setObjects(("T11-FC-SP-SA-MIB", "t11FcSpSaNotifyAuthFailure"), ("T11-FC-SP-SA-MIB", "t11FcSpSaNotifyLifeExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FcSpSaNotificationGroup = t11FcSpSaNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: t11FcSpSaNotificationGroup.setDescription('A collection of notifications of events concerning FC-SP Security Associations.')
mibBuilder.exportSymbols("T11-FC-SP-SA-MIB", t11FcSpSaControlSource=t11FcSpSaControlSource, t11FcSpSaControlInboundSpi=t11FcSpSaControlInboundSpi, t11FcSpSaPropAcceptAlgorithm=t11FcSpSaPropAcceptAlgorithm, t11FcSpSaPropRowStatus=t11FcSpSaPropRowStatus, t11FcSpSaTSelDrByTable=t11FcSpSaTSelDrByTable, t11FcSpSaActiveGroup=t11FcSpSaActiveGroup, t11FcSpSaTSelNegOutPrecedence=t11FcSpSaTSelNegOutPrecedence, t11FcSpSaControlAuthFailEnable=t11FcSpSaControlAuthFailEnable, t11FcSpSaTSelNegInIndex=t11FcSpSaTSelNegInIndex, t11FcSpSaPropSecurityProt=t11FcSpSaPropSecurityProt, t11FcSpSaTSelNegInUnpMtchDrops=t11FcSpSaTSelNegInUnpMtchDrops, t11FcSpSaTSelPropDirection=t11FcSpSaTSelPropDirection, t11FcSpSaControlLifeExcdTime=t11FcSpSaControlLifeExcdTime, t11FcSpSaIfCTAuthCapab=t11FcSpSaIfCTAuthCapab, t11FcSpSaPairInGoodXforms=t11FcSpSaPairInGoodXforms, t11FcSpSaTSelNegOutInboundSpi=t11FcSpSaTSelNegOutInboundSpi, t11FcSpSaIfReplayPrevention=t11FcSpSaIfReplayPrevention, t11FcSpSaTSelSpiEntry=t11FcSpSaTSelSpiEntry, t11FcSpSaTSelPropEndDstAddr=t11FcSpSaTSelPropEndDstAddr, t11FcSpSaTSelDrByEndSrcAddr=t11FcSpSaTSelDrByEndSrcAddr, t11FcSpSaPairTerminate=t11FcSpSaPairTerminate, t11FcSpSaIfOutDrops=t11FcSpSaIfOutDrops, t11FcSpSaTSelNegInEndSrcAddr=t11FcSpSaTSelNegInEndSrcAddr, t11FcSpSaTSelNegOutEntry=t11FcSpSaTSelNegOutEntry, t11FcSpSaTSelNegOutEndDstAddr=t11FcSpSaTSelNegOutEndDstAddr, t11FcSpSaIfIndex=t11FcSpSaIfIndex, t11FcSpSaTSelDrByEndDstAddr=t11FcSpSaTSelDrByEndDstAddr, t11FcSpSaTSelDrByEndType=t11FcSpSaTSelDrByEndType, PYSNMP_MODULE_ID=t11FcSpSaMIB, t11FcSpSaTSelDrByEndRCtl=t11FcSpSaTSelDrByEndRCtl, t11FcSpSaMIBConformance=t11FcSpSaMIBConformance, t11FcSpSaControlFrame=t11FcSpSaControlFrame, t11FcSpSaPairInboundSpi=t11FcSpSaPairInboundSpi, t11FcSpSaIfInDetReplays=t11FcSpSaIfInDetReplays, t11FcSpSaIfEntry=t11FcSpSaIfEntry, t11FcSpSaTSelNegInEndDstAddr=t11FcSpSaTSelNegInEndDstAddr, t11FcSpSaTSelNegOutTable=t11FcSpSaTSelNegOutTable, t11FcSpSaTransEncryptAlg=t11FcSpSaTransEncryptAlg, t11FcSpSaIfOutUnMatcheds=t11FcSpSaIfOutUnMatcheds, t11FcSpSaPairLifetimeLeftUnits=t11FcSpSaPairLifetimeLeftUnits, t11FcSpSaTSelNegOutStartSrcAddr=t11FcSpSaTSelNegOutStartSrcAddr, t11FcSpSaControlTable=t11FcSpSaControlTable, t11FcSpSaCapabilityGroup=t11FcSpSaCapabilityGroup, t11FcSpSaTransSecurityProt=t11FcSpSaTransSecurityProt, t11FcSpSaTSelNegInInboundSpi=t11FcSpSaTSelNegInInboundSpi, t11FcSpSaControlWindow=t11FcSpSaControlWindow, t11FcSpSaActive=t11FcSpSaActive, t11FcSpSaTSelDrByStartType=t11FcSpSaTSelDrByStartType, t11FcSpSaTSelSpiTable=t11FcSpSaTSelSpiTable, t11FcSpSaPropTSelListIndex=t11FcSpSaPropTSelListIndex, t11FcSpSaPairInBadXforms=t11FcSpSaPairInBadXforms, t11FcSpSaPropIndex=t11FcSpSaPropIndex, t11FcSpSaTSelNegOutEndSrcAddr=t11FcSpSaTSelNegOutEndSrcAddr, t11FcSpSaPairEntry=t11FcSpSaPairEntry, t11FcSpSaIfStorageType=t11FcSpSaIfStorageType, t11FcSpSaPairTransIndex=t11FcSpSaPairTransIndex, t11FcSpSaTSelNegInStartSrcAddr=t11FcSpSaTSelNegInStartSrcAddr, t11FcSpSaIfOutBypasses=t11FcSpSaIfOutBypasses, t11FcSpSaNotificationGroup=t11FcSpSaNotificationGroup, t11FcSpSaControlElapsed=t11FcSpSaControlElapsed, t11FcSpSaTSelDrByStartSrcAddr=t11FcSpSaTSelDrByStartSrcAddr, t11FcSpSaPairIfIndex=t11FcSpSaPairIfIndex, t11FcSpSaTransRowStatus=t11FcSpSaTransRowStatus, t11FcSpSaIfOutProcesses=t11FcSpSaIfOutProcesses, t11FcSpSaTransTable=t11FcSpSaTransTable, t11FcSpSaTSelDrByMatches=t11FcSpSaTSelDrByMatches, t11FcSpSaTransEncryptKeyLen=t11FcSpSaTransEncryptKeyLen, t11FcSpSaTSelNegInStartRCtl=t11FcSpSaTSelNegInStartRCtl, t11FcSpSaIfTerminateAllSas=t11FcSpSaIfTerminateAllSas, t11FcSpSaTSelDrByDirection=t11FcSpSaTSelDrByDirection, t11FcSpSaIfInUnprotMtchDrops=t11FcSpSaIfInUnprotMtchDrops, t11FcSpSaTransListIndex=t11FcSpSaTransListIndex, t11FcSpSaTSelDrByPrecedence=t11FcSpSaTSelDrByPrecedence, t11FcSpSaPropEntry=t11FcSpSaPropEntry, t11FcSpSaTSelDrByStartDstAddr=t11FcSpSaTSelDrByStartDstAddr, t11FcSpSaTSelSpiDirection=t11FcSpSaTSelSpiDirection, t11FcSpSaTSelDrByAction=t11FcSpSaTSelDrByAction, t11FcSpSaTSelNegOutEndRCtl=t11FcSpSaTSelNegOutEndRCtl, t11FcSpSaIfFabricIndex=t11FcSpSaIfFabricIndex, t11FcSpSaTransEntry=t11FcSpSaTransEntry, t11FcSpSaMIBCompliance=t11FcSpSaMIBCompliance, t11FcSpSaPropTransListIndex=t11FcSpSaPropTransListIndex, t11FcSpSaTSelNegInStartType=t11FcSpSaTSelNegInStartType, t11FcSpSaProposalGroup=t11FcSpSaProposalGroup, t11FcSpSaTSelPropStartDstAddr=t11FcSpSaTSelPropStartDstAddr, t11FcSpSaBase=t11FcSpSaBase, t11FcSpSaTSelNegInEndRCtl=t11FcSpSaTSelNegInEndRCtl, t11FcSpSaTSelNegOutEndType=t11FcSpSaTSelNegOutEndType, t11FcSpSaNotifyLifeExceeded=t11FcSpSaNotifyLifeExceeded, t11FcSpSaTSelSpiTrafSelPtr=t11FcSpSaTSelSpiTrafSelPtr, t11FcSpSaMIBNotifications=t11FcSpSaMIBNotifications, t11FcSpSaTSelPropEndType=t11FcSpSaTSelPropEndType, t11FcSpSaTSelNegOutStartDstAddr=t11FcSpSaTSelNegOutStartDstAddr, t11FcSpSaPairTransListIndex=t11FcSpSaPairTransListIndex, t11FcSpSaDropBypassGroup=t11FcSpSaDropBypassGroup, t11FcSpSaIfIKEv2Capab=t11FcSpSaIfIKEv2Capab, t11FcSpSaTSelPropStartType=t11FcSpSaTSelPropStartType, t11FcSpSaNotifyAuthFailure=t11FcSpSaNotifyAuthFailure, t11FcSpSaTSelPropRowStatus=t11FcSpSaTSelPropRowStatus, t11FcSpSaTSelPropStorageType=t11FcSpSaTSelPropStorageType, t11FcSpSaPairSecurityProt=t11FcSpSaPairSecurityProt, t11FcSpSaTSelNegInEndType=t11FcSpSaTSelNegInEndType, t11FcSpSaIfInGoodXforms=t11FcSpSaIfInGoodXforms, t11FcSpSaTSelPropStartRCtl=t11FcSpSaTSelPropStartRCtl, t11FcSpSaControlLifeExcdEnable=t11FcSpSaControlLifeExcdEnable, t11FcSpSaIfDeadPeerDetections=t11FcSpSaIfDeadPeerDetections, t11FcSpSaPropTable=t11FcSpSaPropTable, t11FcSpSaIfTable=t11FcSpSaIfTable, t11FcSpSaParamStatusGroup=t11FcSpSaParamStatusGroup, t11FcSpSaMIBObjects=t11FcSpSaMIBObjects, t11FcSpSaTSelDrByEntry=t11FcSpSaTSelDrByEntry, t11FcSpSaPairInDetReplays=t11FcSpSaPairInDetReplays, t11FcSpSaControlEntry=t11FcSpSaControlEntry, t11FcSpSaTSelPropEntry=t11FcSpSaTSelPropEntry, t11FcSpSaTSelPropEndRCtl=t11FcSpSaTSelPropEndRCtl, t11FcSpSaTSelNegInTable=t11FcSpSaTSelNegInTable, t11FcSpSaTransIndex=t11FcSpSaTransIndex, t11FcSpSaControlSuppressed=t11FcSpSaControlSuppressed, t11FcSpSaIfReplayWindowSize=t11FcSpSaIfReplayWindowSize, t11FcSpSaTSelDrByStartRCtl=t11FcSpSaTSelDrByStartRCtl, t11FcSpSaPairInProtUnMatchs=t11FcSpSaPairInProtUnMatchs, t11FcSpSaMIBGroups=t11FcSpSaMIBGroups, t11FcSpSaTSelPropEndSrcAddr=t11FcSpSaTSelPropEndSrcAddr, t11FcSpSaIfInProtUnmtchs=t11FcSpSaIfInProtUnmtchs, t11FcSpSaIfIkev2AuthCapab=t11FcSpSaIfIkev2AuthCapab, t11FcSpSaTSelPropStartSrcAddr=t11FcSpSaTSelPropStartSrcAddr, t11FcSpSaControlLifeExcdSpi=t11FcSpSaControlLifeExcdSpi, t11FcSpSaTSelNegInEntry=t11FcSpSaTSelNegInEntry, t11FcSpSaTransIntegrityAlg=t11FcSpSaTransIntegrityAlg, t11FcSpSaIfEspHeaderCapab=t11FcSpSaIfEspHeaderCapab, t11FcSpSaTSelNegOutStartRCtl=t11FcSpSaTSelNegOutStartRCtl, t11FcSpSaControlMaxNotifs=t11FcSpSaControlMaxNotifs, t11FcSpSaTSelSpiTrafSelIndex=t11FcSpSaTSelSpiTrafSelIndex, t11FcSpSaPairLifetimeLeft=t11FcSpSaPairLifetimeLeft, t11FcSpSaTSelNegOutStartType=t11FcSpSaTSelNegOutStartType, t11FcSpSaControlLifeExcdDir=t11FcSpSaControlLifeExcdDir, t11FcSpSaNotifInfoGroup=t11FcSpSaNotifInfoGroup, t11FcSpSaTSelSpiInboundSpi=t11FcSpSaTSelSpiInboundSpi, t11FcSpSaTSelNegInStartDstAddr=t11FcSpSaTSelNegInStartDstAddr, t11FcSpSaTSelPropTable=t11FcSpSaTSelPropTable, t11FcSpSaControl=t11FcSpSaControl, t11FcSpSaIfInUnprotUnmtchDrops=t11FcSpSaIfInUnprotUnmtchDrops, t11FcSpSaControlDestination=t11FcSpSaControlDestination, t11FcSpSaIfInBadXforms=t11FcSpSaIfInBadXforms, t11FcSpSaTransStorageType=t11FcSpSaTransStorageType, t11FcSpSaTSelPropPrecedence=t11FcSpSaTSelPropPrecedence, t11FcSpSaConfig=t11FcSpSaConfig, t11FcSpSaPairTable=t11FcSpSaPairTable, t11FcSpSaSummaryCountGroup=t11FcSpSaSummaryCountGroup, t11FcSpSaMIBCompliances=t11FcSpSaMIBCompliances, t11FcSpSaTSelPropListIndex=t11FcSpSaTSelPropListIndex, t11FcSpSaTSelDrByRowStatus=t11FcSpSaTSelDrByRowStatus, t11FcSpSaMIB=t11FcSpSaMIB, t11FcSpSaPropOutMatchSucceeds=t11FcSpSaPropOutMatchSucceeds)
