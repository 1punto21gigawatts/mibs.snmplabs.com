#
# PySNMP MIB module MICOM-NAC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-NAC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, MibIdentifier, ObjectIdentity, Counter64, Unsigned32, Counter32, IpAddress, ModuleIdentity, TimeTicks, Bits, NotificationType, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "MibIdentifier", "ObjectIdentity", "Counter64", "Unsigned32", "Counter32", "IpAddress", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_nac = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 15)).setLabel("micom-nac")
nac_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1)).setLabel("nac-configuration")
nac_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2)).setLabel("nac-statistics")
nacCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1))
nacCfgAddressResolutionTriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCfgAddressResolutionTriesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nacCfgAddressResolutionTriesNumber.setDescription('NAME = NumberOfAddressResolutionRetries; DESC = The number of times an address resolution \\ request is sent to the server to get DNA \\ address; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacCfgAddressResolutionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCfgAddressResolutionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nacCfgAddressResolutionTimeout.setDescription('NAME = AddressResolutionTimeout; DESC = The time in milliseconds after which an \\ address resolution request will be resent \\ in case the previous one is not answered; HELP = Setting a very low value in a heavily \\ loaded IP network would result in \\ transmissions of multiple requests \\ further increasing the network load. \\ It is recommended to tune this value \\ by considering the IP netwrok load and \\ performance; CAPABILITIES = NET_CFG, VPN_CFG;')
nacCfgCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("flush", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCfgCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nacCfgCacheStatus.setDescription('NAME = AddressCachingFunctionality; DESC = Ability to enable or disable Caching of \\ previously resolved Addresses and to \\ remove previously resolved addresses \\ from the cache.; HELP = It is recommended that caching be enabled as \\ it helps relieve the load on the server \\ reduces network traffic and speeds up \\ address resolution and hence call-setup. \\ Flushing of cache is recommended if the \\ network configuration has changed resulting \\ in changes in the DNA and/or DNs, rendering \\ the previously cached resolutions incorrect; CAPABILITIES = NET_CFG, VPN_CFG;')
nacCfgNumberOfCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacCfgNumberOfCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nacCfgNumberOfCacheEntries.setDescription("NAME = CacheSize; DESC = Max number of Address Resolutions to be \\ cached in memory; HELP = If this value is very high the \\ free memory space on the unit will be \\ reduced which may affect the unit's performance \\ A too low value would cause the unit to \\ frequently consult the server if diverse \\ numbers are dialed, beating the purpose of \\ having a local cache. The optimum value \\ will depend on the network size and the \\ number of frequently dialed DNs. It is \\ recommended to start with the minimum value \\ (100) and tune it to the optimum value \\ by observing the performance; CAPABILITIES = NET_CFG, VPN_CFG;")
nacCfgCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nacCfgCounterReset.setStatus('obsolete')
if mibBuilder.loadTexts: nacCfgCounterReset.setDescription('NAME = CounterReset; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Setting this to reset will clear out \\ the counters for Statistics for the \\ Address Client.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacCfgCustomerId = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacCfgCustomerId.setStatus('mandatory')
if mibBuilder.loadTexts: nacCfgCustomerId.setDescription('NAME = CustomerId; DESC = An unique number allocated to a Customer \\ thereby allowing a single server to serve \\ more than one customer; HELP = The Customer Id helps to identify all units \\ belonging to a particular Customer. If a \\ server is shared by many customers, the \\ server uses the Id to firewall the voice \\ networks of one customer from the others; CAPABILITIES = NET_CFG, VPN_CFG;')
nacCacheTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2), )
if mibBuilder.loadTexts: nacCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheTable.setDescription('NAME = DNA cache table; DESC = DNA cache table; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1), ).setIndexNames((0, "MICOM-NAC-MIB", "nacCacheEgressString"))
if mibBuilder.loadTexts: nacCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheEntry.setDescription('NAME = Entry of DNA cache table; DESC = Entry of DNA cache table; HELP = ; CAPABILITIES = ;')
nacCacheEgressString = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCacheEgressString.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheEgressString.setDescription('NAME = EgressDialString; DESC = EgressDialString associated with a voice channel.\\ For software releases prior to 3.0, the \\ string range was restricted to (SIZE(1..25)).; HELP = EgressDialString represents the rule which helps \\ in associating dialed digits to a voice channel. \\ The string allows digits and wild cards; CAPABILITIES = ;')
nacCacheServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCacheServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheServerIpAddress.setDescription('NAME = ServerIpAddress; DESC = Network Address of server which resolved this entry.; HELP = Value of this object is valid only when \\ EntryType is learned. It is unique to a given server and helps \\ in tracking the address resolution to the server; CAPABILITIES = ;')
nacCacheDnaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCacheDnaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheDnaAddress.setDescription('NAME = DNAAddress; DESC = DNA address of the unit to which this voice information \\ belongs; HELP = ; CAPABILITIES = ;')
nacCacheEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learnt", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacCacheEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheEntryType.setDescription('NAME = CacheEntryType; DESC = Indicates whether the entry was provisioned \\ (static) by user or was previously resolved \\ by a server (learned); HELP = If no server is available \\ entries must be provisioned \\ for voice networking; CAPABILITIES = ;')
nacCacheNumberOfHits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacCacheNumberOfHits.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheNumberOfHits.setDescription('NAME = CacheEntryUsage; DESC = The number of times this entry was used to \\ by this unit for resolving dialed digits; HELP = This value is useful in identifying \\ frequently dialed numbers; CAPABILITIES = ;')
nacCacheEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacCacheEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nacCacheEntryStatus.setDescription('NAME = StaticEntryInsertionDeletion; DESC = For software releases prior to 3.0 \\ this object only supports add and delete \\ with an access of write-only. Used to insert \\ or remove a static address resolution entry; HELP = ; CAPABILITIES = ;')
nacServerTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3), )
if mibBuilder.loadTexts: nacServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerTable.setDescription('NAME = ServerTable; DESC = List of servers this unit can use to \\ request an address resolution from; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1), ).setIndexNames((0, "MICOM-NAC-MIB", "nacServerIpAddress"))
if mibBuilder.loadTexts: nacServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerEntry.setDescription('NAME = ServerEntry; DESC = A server this unit can use to \\ request an address resolution from; HELP = ; CAPABILITIES = ;')
nacServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerIpAddress.setDescription('NAME = ServerIpAddress; DESC = Network address of server which resolved this \\ address.; HELP = It is unique for a given server and \\ is used by this unit to reach the server; CAPABILITIES = ;')
nacServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerName.setDescription('NAME = ServerName; DESC = A user supplied name of a server; HELP = Useful in \\ identifying a server; CAPABILITIES = ;')
nacServerAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("transition", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerAvailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerAvailStatus.setDescription('NAME = ServerAvailablity; DESC = Availability of the server for address resolution; HELP = A server is said to be available if this \\ unit has been successfully communicating \\ the said server. \\ A server is said to be in transistion if \\ this unit is in the process of establishing \\ full communication with the said server. \\ A server is said to be notAvailable if this \\ unit is temporarily lost communication with \\ the said server; CAPABILITIES = ;')
nacServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerStatus.setDescription('NAME = ServerStatus; DESC = Ability to insert, disable or delete a server; HELP = Setting the value to enable results in insertion \\ of server for address resolution \\ Setting the value to disable will refrain this \\ unit from using the said server for address \\ resolution. This may be done if the server is \\ known to be temporarily out of service. \\ Setting the value to delete will remove the \\ entry from the table; CAPABILITIES = ;')
nacServerHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 180)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacServerHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerHelloTime.setDescription("NAME = HelloTimeInterval; DESC = The interval of time in seconds between transmission \\ of two consecutive Hello messages to the server; HELP = The interval of time in seconds between transmission \\ of two consecutive Hello messages to the server. \\ If the server doesnot see a HELLO message within \\ a specified period it will purge it's database \\ of all entries belonging to this unit. \\ It is recommended that this value be such that \\ this unit will transmit atleast two HELLO packets \\ within the server's timeout period. \\ Having a very low value will result in large \\ number of HELLO packets, increasing traffic. \\ The value should be tuned based on the IP traffic \\ and the timeout value provisioned in the server; CAPABILITIES = ;")
nacServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nacServerType.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerType.setDescription('NAME = ServerType; DESC = Type of NAS to which this information is assigned.; HELP = A primary Server is the preferred server which \\ will be first consulted for address resolution. \\ A secondary server is used as an alternative \\ if the primary is not responding. \\ All servers have to be marked secondary if \\ round-robin load sharing is desired between servers; CAPABILITIES = ;')
nacServerRegistrationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerRegistrationCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerRegistrationCount.setDescription('NAME = ServerRegistrationCount; DESC = The number of times this server has acknowledged \\ a registration change; HELP = ; CAPABILITIES = ;')
nacServerHello1Count = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerHello1Count.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerHello1Count.setDescription('NAME = ServerHello1Count; DESC = The number of keep alive hellos sent to this server; HELP = ; CAPABILITIES = ;')
nacServerHello2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerHello2Count.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerHello2Count.setDescription('NAME = ServerHello2Count; DESC = The number of hellos indicating a change in \\ registration table to this server; HELP = ; CAPABILITIES = ;')
nacServerHello3Count = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerHello3Count.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerHello3Count.setDescription('NAME = ServerHello3Count; DESC = The number of hellos sent that request a response.\\ Used to revive a notAvailable server; HELP = ; CAPABILITIES = ;')
nacServerRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerRequestCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerRequestCount.setDescription('NAME = ServerRequestCount; DESC = The number of DN-DNA requests to this \\ server since start up; HELP = ; CAPABILITIES = ;')
nacServerResolvedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerResolvedCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerResolvedCount.setDescription("NAME = ServerResolvedCount; DESC = The number of DN-DNA's resolved by this \\ server since start up; HELP = ; CAPABILITIES = ;")
nacServerNoNumberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerNoNumberCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerNoNumberCount.setDescription('NAME = ServerNoNumberCount; DESC = The number of DN-DNA requests with phone number \\ not found in server since start up; HELP = ; CAPABILITIES = ;')
nacServerTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacServerTimeoutCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacServerTimeoutCount.setDescription('NAME = ServerTimeoutCount; DESC = The number of entries resent due to timeouts \\ since start up. HELP = ; CAPABILITIES = ;')
nvmNacCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 4))
nvmNacCfgAddressResolutionTriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacCfgAddressResolutionTriesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCfgAddressResolutionTriesNumber.setDescription('NAME = NumberOfAddressResolutionRetries; DESC = The number of times an address resolution \\ request is sent to the server to get DNA \\ address on the next reset; HELP = This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmNacCfgAddressResolutionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacCfgAddressResolutionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCfgAddressResolutionTimeout.setDescription('NAME = AddressResolutionTimeout; DESC = The time in milliseconds after which an \\ address resolution request will be resent \\ in case the previous one is not answer.; HELP = Setting a very low value in a heavily \\ loaded IP network would result in \\ transmissions of multiple requests \\ furthur increasing the network load. \\ It is recommended to tune this value \\ by considering the IP netwrok load and \\ performance. \\ This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmNacCfgCacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacCfgCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCfgCacheStatus.setDescription('NAME = AddressCachingFunctionality; DESC = Ability to enable or disable caching of \\ previously resolved Addresses. \\ HELP = It is recommended that caching be enabled as \\ it helps relieve the load on the server \\ reduces network traffic and speeds up \\ address resolution and hence call-setup. \\ This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmNacCfgNumberOfCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmNacCfgNumberOfCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCfgNumberOfCacheEntries.setDescription("NAME = CacheSize; DESC = Max number of Address Resolutions to be \\ cached in memory.; HELP = If this value is very high the \\ free memory space on the unit will be \\ reduced which may affect the unit's performance \\ A too low value would cause the unit to \\ frequently consult the server if diverse \\ numbers are dialed, beating the purpose of \\ having a local cache. The optimum value \\ will depend on the network size and the \\ number of frequently dialed DNs. It is \\ recommended to start with the minimum value \\ (100) and tune it to the optimum value \\ by observing the performance. \\ This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = NET_CFG, VPN_CFG;")
nvmNacCfgCustomerId = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmNacCfgCustomerId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCfgCustomerId.setDescription('NAME = CustomerId; DESC = An unique number allocated to a Customer \\ thereby allowing a single server to serve \\ more than one customer.; HELP = The Customer Id helps to identify all units \\ belonging to a particular Customer. If a \\ server is shared by many customers, the \\ server uses the Id to firewall the voice \\ networks of one customer from the others; This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmNacCacheTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 5), )
if mibBuilder.loadTexts: nvmNacCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCacheTable.setDescription('NAME = DNA cache table; DESC = DNA cache table; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmNacCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 5, 1), ).setIndexNames((0, "MICOM-NAC-MIB", "nvmNacCacheEgressNumber"))
if mibBuilder.loadTexts: nvmNacCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCacheEntry.setDescription('NAME = Entry of DNA cache table; DESC = Entry of DNA cache table; HELP = ; CAPABILITIES = ;')
nvmNacCacheEgressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacCacheEgressNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCacheEgressNumber.setDescription('NAME = EgressDialString; DESC = EgressDialString associated with a voice channel.; HELP = EgressDialString represents the rule which helps \\ in associating dialed digits to a voice channel. \\ The string allows digits and wild cards. \\ This is the value this unit will \\ use next time the unit is reset or rebooted \\ For software releases prior to 3.0, the \\ string range was restricted to (SIZE(1..25)).; CAPABILITIES = ;')
nvmNacCacheServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacCacheServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCacheServerIpAddress.setDescription('NAME = ServerIpAddress; DESC = Network Address of server which resolved this entry. \\ HELP = It is unique to a given server and helps \\ in tracking the address resolution to the server. \\ This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = ;')
nvmNacCacheDnaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacCacheDnaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacCacheDnaAddress.setDescription('NAME = DNAAddress; DESC = DNA address of the unit to which this voice \\ belongs.; HELP = ; CAPABILITIES = ;')
nvmNacServerTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6), )
if mibBuilder.loadTexts: nvmNacServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerTable.setDescription('NAME = ServerTable; DESC = List of servers this unit can use to \\ request address resolution from; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmNacServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6, 1), ).setIndexNames((0, "MICOM-NAC-MIB", "nvmNacServerIpAddress"))
if mibBuilder.loadTexts: nvmNacServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerEntry.setDescription('NAME = ServerEntry; DESC = A server this unit can use to \\ request address resolution from; HELP = ; CAPABILITIES = ;')
nvmNacServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerIpAddress.setDescription('NAME = ServerIpAddress; DESC = Network Address of server.; HELP = It is unique to a given server and \\ is used by this unit to communicate with the server.; CAPABILITIES = ;')
nvmNacServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerName.setDescription('NAME = ServerName; DESC = A user supplied name of a server.; HELP = ; CAPABILITIES = ;')
nvmNacServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerStatus.setDescription('NAME = ServerStatus; DESC = Ability to enable, disable a server.; HELP = A value of enable means this \\ server will be used for address resolution \\ A value of disable will refrain this \\ unit from using the said server for address \\ resolution. This may be done if the server is \\ known to be temporarily out of service. \\ This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = ;')
nvmNacServerHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacServerHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerHelloTime.setDescription("NAME = HelloTimeInterval; DESC = The interval of time in seconds between transmission \\ of two consecutive Hello messages to the server.; HELP = If the server does not see a HELLO message within \\ a specified period it will purge it's database \\ of all entries belonging to this unit. \\ It is recommended that this value be such that \\ this unit will transmit atleast two HELLO packets \\ within the server's timeout period. \\ Having a very low value will result in large \\ number of HELLO packets, increasing traffic. \\ The value should be tuned based on the IP traffic \\ and the timeout value provisioned in the server. \\ This is the value this unit will \\ use next time the unit is reset or rebooted; CAPABILITIES = ;")
nvmNacServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmNacServerType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmNacServerType.setDescription('NAME = ServerType; DESC = The NAS server type to which this information is assigned; HELP = A primary Server is the preferred server which \\ will be first consulted for address resolution. \\ A secondary server is used as an alternative \\ if the primary is not responding. \\ All servers have to be marked secondary if \\ round-robin load sharing is desired between servers.; CAPABILITIES = ;')
nacStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1))
nacStatisticsCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsCacheCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsCacheCount.setDescription('NAME = StatCacheCount; DESC = Total number of entries currently in cache. \\ Includes learned and static entries. (Not \\ cleared by nacCfgCounterZero); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsStaticCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsStaticCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsStaticCount.setDescription('NAME = StatStaticCount; DESC = Number of static entries currently in cache. \\ (Not cleared by nacCfgCounterZero); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsRequestAllCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsRequestAllCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsRequestAllCount.setDescription('NAME = StatRequestAllCount; DESC = Total DN-DNA requests received from voice; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsLocalResolvedCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsLocalResolvedCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsLocalResolvedCount.setDescription('NAME = StatLocalResolvedCount; DESC = Total DN-DNA requests resolved out of local cache; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsPurgeCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsPurgeCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsPurgeCount.setDescription('NAME = StatPurgeCount; DESC = Total purge requests received from voice; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsVoiceRegCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsVoiceRegCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsVoiceRegCount.setDescription('NAME = StatVoiceRegCount; DESC = Total re-register requests received from voice; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsDNAChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsDNAChangeCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsDNAChangeCount.setDescription('NAME = StatDNAChangeCount; DESC = Total DNA changes (learnt or provisioned) \\ received from driver; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsServerCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsServerCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsServerCount.setDescription('NAME = StatServerCount; DESC = Total number of servers configured to \\ resolve addresses. (not cleared by \\ nacCfgCounterZero); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsServerRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsServerRequestCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsServerRequestCount.setDescription('NAME = StatServerRequestCount; DESC = Total DN-DNA requests made to all servers; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsServerResolvedCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsServerResolvedCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsServerResolvedCount.setDescription('NAME = StatServerResolvedCount; DESC = Total DN-DNA requests resolved by all servers; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsServerNoNumberCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsServerNoNumberCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsServerNoNumberCount.setDescription('NAME = StatServerNoNumberCount; DESC = Total DN-DNA requests resolved with phone \\ number not found in server; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsTimeoutCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsTimeoutCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsTimeoutCount.setDescription('NAME = StatTimeoutCount; DESC = Total DN-DNA requests timed out; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsHello1Count = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsHello1Count.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsHello1Count.setDescription('NAME = StatHello1Count; DESC = Total hello keep alives to all servers; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsHello2Count = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsHello2Count.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsHello2Count.setDescription('NAME = ; DESC = Total hello, registration has changed, sent to\\ all servers; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsHello3Count = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsHello3Count.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsHello3Count.setDescription('NAME = ; DESC = Total hello, are you there, sent to solicit \\ response from all servers; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nacStatisticsRegistrationCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 15, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nacStatisticsRegistrationCount.setStatus('mandatory')
if mibBuilder.loadTexts: nacStatisticsRegistrationCount.setDescription('NAME = ; DESC = Total registration acknowledged count from all servers; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmAlarmNacFailedToLocateNAS = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 15) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcmAlarmNacFailedToLocateNAS.setDescription('NAME = ServerUnreachable; DESC = This unit is unable to communicate with the server\\ Severity Level: MAJOR.; HELP = The server could not be reached by this MPA. \\ This could indicate a problem with the IP \\ network, or the server is temporarily out-of-service. \\ Or the remote unit may not be provisioned as \\ a server. \\ Doing a ping to the server will help determine \\ reachability to it over the IP network;')
mcmAlarmNacNASIsDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 15) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-NAC-MIB", "nacServerIpAddress"))
if mibBuilder.loadTexts: mcmAlarmNacNASIsDown.setDescription('NAME = ServerCommunicationLost; DESC = This unit is now unable to communicate with a \\ previously available server.\\ Severity Level: MAJOR.; HELP = Communication is lost with a previously available server \\ This could indicate a problem with the IP \\ network, or the server is temporarily out-of-service. \\ Hence it can no longer be used for address resolution. \\ Doing a ping to the server will help determine \\ reachability to it over the IP network. This MPA will \\ periodically attempt to re-establish \\ communication with the server;')
mcmAlarmNacNASIsUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 15) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-NAC-MIB", "nacServerIpAddress"))
if mibBuilder.loadTexts: mcmAlarmNacNASIsUp.setDescription('NAME = ServerCommunicationRestored; DESC = This unit is now able to communicate with a \\ server with which it had previously lost communication\\ Severity Level: INFORMATIVE.; HELP = Communication is restored with a previously non-responsive server. \\ It will henceforth be used for address resolution.;')
mibBuilder.exportSymbols("MICOM-NAC-MIB", nvmNacCfgAddressResolutionTriesNumber=nvmNacCfgAddressResolutionTriesNumber, nacCacheNumberOfHits=nacCacheNumberOfHits, nvmNacServerIpAddress=nvmNacServerIpAddress, nacStatisticsGroup=nacStatisticsGroup, nacStatisticsServerRequestCount=nacStatisticsServerRequestCount, nvmNacServerHelloTime=nvmNacServerHelloTime, nacServerName=nacServerName, nacCacheDnaAddress=nacCacheDnaAddress, nacServerHello1Count=nacServerHello1Count, nacStatisticsVoiceRegCount=nacStatisticsVoiceRegCount, micom_nac=micom_nac, nacServerTable=nacServerTable, nacServerHelloTime=nacServerHelloTime, nacStatisticsDNAChangeCount=nacStatisticsDNAChangeCount, nacStatisticsServerCount=nacStatisticsServerCount, nacCacheEgressString=nacCacheEgressString, nacCacheEntryStatus=nacCacheEntryStatus, nacStatisticsHello1Count=nacStatisticsHello1Count, mcmAlarmNacFailedToLocateNAS=mcmAlarmNacFailedToLocateNAS, nvmNacServerType=nvmNacServerType, nacStatisticsStaticCount=nacStatisticsStaticCount, nacStatisticsRequestAllCount=nacStatisticsRequestAllCount, nacCfgGroup=nacCfgGroup, nacCacheEntryType=nacCacheEntryType, nacServerIpAddress=nacServerIpAddress, nacCfgCustomerId=nacCfgCustomerId, nacServerAvailStatus=nacServerAvailStatus, nvmNacCfgCacheStatus=nvmNacCfgCacheStatus, nvmNacCacheEgressNumber=nvmNacCacheEgressNumber, nacServerType=nacServerType, nacCfgAddressResolutionTriesNumber=nacCfgAddressResolutionTriesNumber, nacStatisticsHello3Count=nacStatisticsHello3Count, nacServerHello3Count=nacServerHello3Count, nvmNacCacheServerIpAddress=nvmNacCacheServerIpAddress, nacServerTimeoutCount=nacServerTimeoutCount, nacStatisticsRegistrationCount=nacStatisticsRegistrationCount, nacServerStatus=nacServerStatus, nacStatisticsServerNoNumberCount=nacStatisticsServerNoNumberCount, nacCfgCounterReset=nacCfgCounterReset, nacServerRegistrationCount=nacServerRegistrationCount, nacServerHello2Count=nacServerHello2Count, nvmNacCfgCustomerId=nvmNacCfgCustomerId, nvmNacServerName=nvmNacServerName, nvmNacCacheEntry=nvmNacCacheEntry, nacCfgCacheStatus=nacCfgCacheStatus, nacCacheTable=nacCacheTable, nacServerRequestCount=nacServerRequestCount, nacServerNoNumberCount=nacServerNoNumberCount, nvmNacCacheTable=nvmNacCacheTable, nvmNacServerStatus=nvmNacServerStatus, nacCacheEntry=nacCacheEntry, nvmNacCfgAddressResolutionTimeout=nvmNacCfgAddressResolutionTimeout, nacServerResolvedCount=nacServerResolvedCount, mcmAlarmNacNASIsDown=mcmAlarmNacNASIsDown, nvmNacServerEntry=nvmNacServerEntry, nacCfgNumberOfCacheEntries=nacCfgNumberOfCacheEntries, mcmAlarmNacNASIsUp=mcmAlarmNacNASIsUp, nvmNacCfgGroup=nvmNacCfgGroup, nacCacheServerIpAddress=nacCacheServerIpAddress, nvmNacCacheDnaAddress=nvmNacCacheDnaAddress, nvmNacServerTable=nvmNacServerTable, nacStatisticsPurgeCount=nacStatisticsPurgeCount, nacStatisticsHello2Count=nacStatisticsHello2Count, nacCfgAddressResolutionTimeout=nacCfgAddressResolutionTimeout, nacServerEntry=nacServerEntry, nacStatisticsServerResolvedCount=nacStatisticsServerResolvedCount, nacStatisticsLocalResolvedCount=nacStatisticsLocalResolvedCount, nvmNacCfgNumberOfCacheEntries=nvmNacCfgNumberOfCacheEntries, nacStatisticsTimeoutCount=nacStatisticsTimeoutCount, nacStatisticsCacheCount=nacStatisticsCacheCount, nac_statistics=nac_statistics, nac_configuration=nac_configuration)
