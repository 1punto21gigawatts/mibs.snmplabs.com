#
# PySNMP MIB module ALVARION-USAGE-INFORMATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALVARION-USAGE-INFORMATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alvarionMgmtV2, = mibBuilder.importSymbols("ALVARION-SMI", "alvarionMgmtV2")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Bits, ObjectIdentity, IpAddress, Counter64, TimeTicks, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Integer32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "ObjectIdentity", "IpAddress", "Counter64", "TimeTicks", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Integer32", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alvarionUsageInformationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21))
if mibBuilder.loadTexts: alvarionUsageInformationMIB.setLastUpdated('200710310000Z')
if mibBuilder.loadTexts: alvarionUsageInformationMIB.setOrganization('Alvarion Ltd.')
if mibBuilder.loadTexts: alvarionUsageInformationMIB.setContactInfo('Alvarion Ltd. Postal: 21a HaBarzel St. P.O. Box 13139 Tel-Aviv 69710 Israel Phone: +972 3 645 6262')
if mibBuilder.loadTexts: alvarionUsageInformationMIB.setDescription('Alvarion Usage Information MIB.')
alvarionUsageInformationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1))
coUsageInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1))
coUsInfoUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoUpTime.setStatus('current')
if mibBuilder.loadTexts: coUsInfoUpTime.setDescription('Elapsed time after the device boot up.')
coUsInfoLoadAverage1Min = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoLoadAverage1Min.setStatus('current')
if mibBuilder.loadTexts: coUsInfoLoadAverage1Min.setDescription('Average number of processes running during the last minute.')
coUsInfoLoadAverage5Min = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoLoadAverage5Min.setStatus('current')
if mibBuilder.loadTexts: coUsInfoLoadAverage5Min.setDescription('Average number of processes running during the last 5 minutes.')
coUsInfoLoadAverage15Min = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoLoadAverage15Min.setStatus('current')
if mibBuilder.loadTexts: coUsInfoLoadAverage15Min.setDescription('Average number of processes running during the last 15 minutes.')
coUsInfoCpuUseNow = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 5), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoCpuUseNow.setStatus('current')
if mibBuilder.loadTexts: coUsInfoCpuUseNow.setDescription('Current CPU usage.')
coUsInfoCpuUse5Sec = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 6), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoCpuUse5Sec.setStatus('current')
if mibBuilder.loadTexts: coUsInfoCpuUse5Sec.setDescription('Average CPU usage during the last 5 seconds.')
coUsInfoCpuUse10Sec = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 7), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoCpuUse10Sec.setStatus('current')
if mibBuilder.loadTexts: coUsInfoCpuUse10Sec.setDescription('Average CPU usage during the last 10 seconds.')
coUsInfoCpuUse20Sec = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 8), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoCpuUse20Sec.setStatus('current')
if mibBuilder.loadTexts: coUsInfoCpuUse20Sec.setDescription('Average CPU usage during the last 20 seconds.')
coUsInfoRamTotal = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 9), Unsigned32()).setUnits('Kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoRamTotal.setStatus('current')
if mibBuilder.loadTexts: coUsInfoRamTotal.setDescription('Total system RAM.')
coUsInfoRamFree = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 10), Unsigned32()).setUnits('Kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoRamFree.setStatus('current')
if mibBuilder.loadTexts: coUsInfoRamFree.setDescription('Available system RAM.')
coUsInfoRamBuffer = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 11), Unsigned32()).setUnits('Kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoRamBuffer.setStatus('current')
if mibBuilder.loadTexts: coUsInfoRamBuffer.setDescription('Memory used by the buffers.')
coUsInfoRamCached = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 12), Unsigned32()).setUnits('Kb').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoRamCached.setStatus('current')
if mibBuilder.loadTexts: coUsInfoRamCached.setDescription('Memory used by the system cache.')
coUsInfoStorageUsePermanent = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 13), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoStorageUsePermanent.setStatus('current')
if mibBuilder.loadTexts: coUsInfoStorageUsePermanent.setDescription('Percentage of permanent storage that is in use.')
coUsInfoStorageUseTemporary = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 1, 1, 14), Unsigned32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coUsInfoStorageUseTemporary.setStatus('current')
if mibBuilder.loadTexts: coUsInfoStorageUseTemporary.setDescription('Percentage of temporary storage that is in use.')
alvarionUsageInformationMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 2))
alvarionUsageInformationMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 2, 0))
alvarionUsageInformationMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 3))
alvarionUsageInformationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 3, 1))
alvarionUsageInformationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 3, 2))
alvarionUsageInformationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 3, 1, 1)).setObjects(("ALVARION-USAGE-INFORMATION-MIB", "alvarionUsageInformationMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionUsageInformationMIBCompliance = alvarionUsageInformationMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alvarionUsageInformationMIBCompliance.setDescription('The compliance statement for the Usage Information MIB.')
alvarionUsageInformationMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 21, 3, 2, 1)).setObjects(("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoUpTime"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoLoadAverage1Min"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoLoadAverage5Min"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoLoadAverage15Min"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoCpuUseNow"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoCpuUse5Sec"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoCpuUse10Sec"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoCpuUse20Sec"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoRamTotal"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoRamFree"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoRamBuffer"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoRamCached"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoStorageUsePermanent"), ("ALVARION-USAGE-INFORMATION-MIB", "coUsInfoStorageUseTemporary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionUsageInformationMIBGroup = alvarionUsageInformationMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionUsageInformationMIBGroup.setDescription('A collection of objects for CPU and memory usage.')
mibBuilder.exportSymbols("ALVARION-USAGE-INFORMATION-MIB", coUsInfoRamCached=coUsInfoRamCached, PYSNMP_MODULE_ID=alvarionUsageInformationMIB, coUsInfoCpuUseNow=coUsInfoCpuUseNow, alvarionUsageInformationMIBNotifications=alvarionUsageInformationMIBNotifications, coUsInfoLoadAverage15Min=coUsInfoLoadAverage15Min, alvarionUsageInformationMIBNotificationPrefix=alvarionUsageInformationMIBNotificationPrefix, coUsageInformationGroup=coUsageInformationGroup, coUsInfoCpuUse5Sec=coUsInfoCpuUse5Sec, alvarionUsageInformationMIBCompliances=alvarionUsageInformationMIBCompliances, alvarionUsageInformationMIBGroup=alvarionUsageInformationMIBGroup, coUsInfoStorageUsePermanent=coUsInfoStorageUsePermanent, coUsInfoRamBuffer=coUsInfoRamBuffer, alvarionUsageInformationMIBObjects=alvarionUsageInformationMIBObjects, alvarionUsageInformationMIBCompliance=alvarionUsageInformationMIBCompliance, coUsInfoCpuUse20Sec=coUsInfoCpuUse20Sec, coUsInfoRamFree=coUsInfoRamFree, alvarionUsageInformationMIBGroups=alvarionUsageInformationMIBGroups, coUsInfoRamTotal=coUsInfoRamTotal, alvarionUsageInformationMIBConformance=alvarionUsageInformationMIBConformance, coUsInfoStorageUseTemporary=coUsInfoStorageUseTemporary, coUsInfoUpTime=coUsInfoUpTime, alvarionUsageInformationMIB=alvarionUsageInformationMIB, coUsInfoLoadAverage1Min=coUsInfoLoadAverage1Min, coUsInfoCpuUse10Sec=coUsInfoCpuUse10Sec, coUsInfoLoadAverage5Min=coUsInfoLoadAverage5Min)
