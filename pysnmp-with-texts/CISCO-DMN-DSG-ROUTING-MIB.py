#
# PySNMP MIB module CISCO-DMN-DSG-ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-ROUTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, NotificationType, ModuleIdentity, iso, Bits, TimeTicks, Counter64, Gauge32, MibIdentifier, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ModuleIdentity", "iso", "Bits", "TimeTicks", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ciscoDSGRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40))
ciscoDSGRouting.setRevisions(('2012-05-14 15:00', '2012-03-07 07:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGRouting.setRevisionsDescriptions(('V01.00.01 2012-05-14 Updated to adopt RowStatus.', 'V01.00.00 2012-03-07 Initial Version.',))
if mibBuilder.loadTexts: ciscoDSGRouting.setLastUpdated('201205141500Z')
if mibBuilder.loadTexts: ciscoDSGRouting.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGRouting.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGRouting.setDescription('Cisco Routing MIB.')
multicastRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 1), )
if mibBuilder.loadTexts: multicastRouteTable.setStatus('current')
if mibBuilder.loadTexts: multicastRouteTable.setDescription('Multicast Route Table.')
multicastRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-ROUTING-MIB", "multicastRouteIndex"))
if mibBuilder.loadTexts: multicastRouteEntry.setStatus('current')
if mibBuilder.loadTexts: multicastRouteEntry.setDescription('Entry for Multicast Route table.')
multicastRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastRouteIndex.setStatus('current')
if mibBuilder.loadTexts: multicastRouteIndex.setDescription('Multicast Route Index.')
multicastRouteV4IPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastRouteV4IPAddr.setStatus('current')
if mibBuilder.loadTexts: multicastRouteV4IPAddr.setDescription('Destination IP Address.')
multicastRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: multicastRouteRowStatus.setDescription('To be used for creating and deleting rows in this table.')
staticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2), )
if mibBuilder.loadTexts: staticRouteTable.setStatus('current')
if mibBuilder.loadTexts: staticRouteTable.setDescription('Static Route Table.')
staticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-ROUTING-MIB", "staticRouteIndex"))
if mibBuilder.loadTexts: staticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: staticRouteEntry.setDescription('Entry for Static Route table.')
staticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRouteIndex.setStatus('current')
if mibBuilder.loadTexts: staticRouteIndex.setDescription('Static Route Index.')
staticRouteV4IPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteV4IPAddr.setStatus('current')
if mibBuilder.loadTexts: staticRouteV4IPAddr.setDescription('Destination IP Address.')
staticRouteV4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteV4Mask.setStatus('current')
if mibBuilder.loadTexts: staticRouteV4Mask.setDescription('Destination Network Mask')
staticRouteV4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteV4Gateway.setStatus('current')
if mibBuilder.loadTexts: staticRouteV4Gateway.setDescription('Gateway IP Address.')
staticRoutePort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutePort1Enable.setStatus('current')
if mibBuilder.loadTexts: staticRoutePort1Enable.setDescription('Applicable for Port 1.')
staticRoutePort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutePort2Enable.setStatus('current')
if mibBuilder.loadTexts: staticRoutePort2Enable.setDescription('Applicable for Port 2.')
staticRoutePort3Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutePort3Enable.setStatus('current')
if mibBuilder.loadTexts: staticRoutePort3Enable.setDescription('Applicable for Port 3.')
staticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: staticRouteRowStatus.setDescription('To be used for creating and deleting rows in this table.')
unicastRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3), )
if mibBuilder.loadTexts: unicastRoutesTable.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesTable.setDescription('Unicast Route Table.')
unicastRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1), ).setIndexNames((0, "CISCO-DMN-DSG-ROUTING-MIB", "unicastRoutesIndex"))
if mibBuilder.loadTexts: unicastRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesEntry.setDescription('Entry for Unicast Route table.')
unicastRoutesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesIndex.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesIndex.setDescription('Unicast Route Index.')
unicastRoutesPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesPortID.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesPortID.setDescription('Port ID.')
unicastRoutesV4IPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesV4IPAddr.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesV4IPAddr.setDescription('Destination IP Address.')
unicastRoutesV4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesV4Mask.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesV4Mask.setDescription('Destination IP Address.')
unicastRoutesV4Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesV4Gateway.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesV4Gateway.setDescription('Destination IP Gateway.')
unicastRoutesMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesMTU.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesMTU.setDescription('MTU.')
unicastRoutesTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesTTL.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesTTL.setDescription('TTL (ms).')
unicastRoutesGWOrHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gateway", 1), ("host", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesGWOrHost.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesGWOrHost.setDescription('Gateway or Host.')
unicastRoutesType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 40, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unicastRoutesType.setStatus('current')
if mibBuilder.loadTexts: unicastRoutesType.setDescription('Route Type.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-ROUTING-MIB", multicastRouteRowStatus=multicastRouteRowStatus, staticRouteRowStatus=staticRouteRowStatus, unicastRoutesIndex=unicastRoutesIndex, staticRoutePort2Enable=staticRoutePort2Enable, PYSNMP_MODULE_ID=ciscoDSGRouting, unicastRoutesV4Mask=unicastRoutesV4Mask, staticRouteEntry=staticRouteEntry, unicastRoutesPortID=unicastRoutesPortID, unicastRoutesType=unicastRoutesType, ciscoDSGRouting=ciscoDSGRouting, staticRouteTable=staticRouteTable, multicastRouteV4IPAddr=multicastRouteV4IPAddr, staticRoutePort3Enable=staticRoutePort3Enable, unicastRoutesMTU=unicastRoutesMTU, unicastRoutesEntry=unicastRoutesEntry, unicastRoutesV4IPAddr=unicastRoutesV4IPAddr, staticRouteV4Gateway=staticRouteV4Gateway, unicastRoutesTTL=unicastRoutesTTL, staticRouteV4IPAddr=staticRouteV4IPAddr, multicastRouteTable=multicastRouteTable, unicastRoutesGWOrHost=unicastRoutesGWOrHost, staticRouteIndex=staticRouteIndex, multicastRouteIndex=multicastRouteIndex, unicastRoutesTable=unicastRoutesTable, staticRouteV4Mask=staticRouteV4Mask, multicastRouteEntry=multicastRouteEntry, unicastRoutesV4Gateway=unicastRoutesV4Gateway, staticRoutePort1Enable=staticRoutePort1Enable)
