#
# PySNMP MIB module OPTIX-SONET-PER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPTIX-SONET-PER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
optixCommonSonet, = mibBuilder.importSymbols("OPTIX-OID-MIB", "optixCommonSonet")
PerformanceEventType, LocationType, DirectionType, MOD2Type, ValidflagType = mibBuilder.importSymbols("OPTIX-SONET-TC-MIB", "PerformanceEventType", "LocationType", "DirectionType", "MOD2Type", "ValidflagType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, ModuleIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, IpAddress, Integer32, Counter64, NotificationType, Gauge32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "IpAddress", "Integer32", "Counter64", "NotificationType", "Gauge32", "MibIdentifier", "ObjectIdentity")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
optixSonetPerformance = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20))
optixSonetPerformance.setRevisions(('2006-02-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: optixSonetPerformance.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: optixSonetPerformance.setLastUpdated('200602250000Z')
if mibBuilder.loadTexts: optixSonetPerformance.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: optixSonetPerformance.setContactInfo('R&D Building Huawei Technologies Co., Ltd. Bantian, Longgang District Shenzhen, P. R. China http://www.huawei.com Zip:518129 E-mail:support@huawei.com')
if mibBuilder.loadTexts: optixSonetPerformance.setDescription('Description.')
pmData = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10))
per15mCurDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10), )
if mibBuilder.loadTexts: per15mCurDataTable.setStatus('current')
if mibBuilder.loadTexts: per15mCurDataTable.setDescription('instructs an NE to send its current set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
per15mCurDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1), ).setIndexNames((0, "OPTIX-SONET-PER-MIB", "pm15mCurDataMOD2"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataSlot"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataPort"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataPath"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataVT"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataName"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataLocation"), (0, "OPTIX-SONET-PER-MIB", "pm15mCurDataDirection"))
if mibBuilder.loadTexts: per15mCurDataEntry.setStatus('current')
if mibBuilder.loadTexts: per15mCurDataEntry.setDescription('instructs an NE to send its current set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
pm15mCurDataMOD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 1), MOD2Type()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataMOD2.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataMOD2.setDescription('Signal mode.')
pm15mCurDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataSlot.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataSlot.setDescription('Slot number. This will indicate what is the slot of the object which raised this PM data. If not relevant to the PM data, will be zero.')
pm15mCurDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataPort.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataPort.setDescription('Port number. This will indicate what is the Port of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm15mCurDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataPath.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataPath.setDescription('Path number. This will indicate what is the Path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm15mCurDataVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataVT.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataVT.setDescription('VT path number. This will indicate what is the VT path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm15mCurDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 6), PerformanceEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataName.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataName.setDescription('Indicates the type of monitored parameter for which a value is retrieved.')
pm15mCurDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 7), LocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataLocation.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataLocation.setDescription('Indicates the location. Only NEND(Near end)|FEND(Far end)|ALL will be represented here.')
pm15mCurDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 8), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataDirection.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataDirection.setDescription('specifies the direction of monitoring. Only RCV(Receive direction)|TRMT(Transmit direction)|ALL will be represented here.')
pm15mCurDataMonVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataMonVal.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataMonVal.setDescription('Measured value.')
pm15mCurDataVldty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 10), ValidflagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataVldty.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataVldty.setDescription('It indicates whether the information for the specified time period was accumulated over the entire time period or some portion of it. Only INVALID|VALID will be represented here.')
pm15mCurDataStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 10, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mCurDataStartTime.setStatus('current')
if mibBuilder.loadTexts: pm15mCurDataStartTime.setDescription('The beginning date and time of the PM period.')
per15mHisDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20), )
if mibBuilder.loadTexts: per15mHisDataTable.setStatus('current')
if mibBuilder.loadTexts: per15mHisDataTable.setDescription('instructs an NE to send its history set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
per15mHisDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1), ).setIndexNames((0, "OPTIX-SONET-PER-MIB", "pm15mHisDataMOD2"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataSlot"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataPort"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataPath"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataVT"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataName"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataLocation"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataDirection"), (0, "OPTIX-SONET-PER-MIB", "pm15mHisDataInterval"))
if mibBuilder.loadTexts: per15mHisDataEntry.setStatus('current')
if mibBuilder.loadTexts: per15mHisDataEntry.setDescription('instructs an NE to send its history set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
pm15mHisDataMOD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 1), MOD2Type()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataMOD2.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataMOD2.setDescription('Signal mode.')
pm15mHisDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataSlot.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataSlot.setDescription('Slot number. This will indicate what is the slot of the object which raised this PM data. If not relevant to the PM data, will be zero.')
pm15mHisDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataPort.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataPort.setDescription('Port number. This will indicate what is the Port of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm15mHisDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataPath.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataPath.setDescription('Path number. This will indicate what is the Path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm15mHisDataVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataVT.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataVT.setDescription('VT path number. This will indicate what is the VT path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm15mHisDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 6), PerformanceEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataName.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataName.setDescription('Indicates the type of monitored parameter for which a value is retrieved.')
pm15mHisDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 7), LocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataLocation.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataLocation.setDescription('Indicates the location. Only NEND(Near end)|FEND(Far end)|ALL will be represented here.')
pm15mHisDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 8), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataDirection.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataDirection.setDescription('Specifies the direction of monitoring. Only RCV(Receive direction)|TRMT(Transmit direction)|ALL will be represented here.')
pm15mHisDataInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataInterval.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataInterval.setDescription('The period number.')
pm15mHisDataMonVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataMonVal.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataMonVal.setDescription('Measured value.')
pm15mHisDataVldty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 11), ValidflagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataVldty.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataVldty.setDescription('It indicates whether the information for the specified time period was accumulated over the entire time period or some portion of it. Only INVALID|VALID will be represented here.')
pm15mHisDataStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 20, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm15mHisDataStartTime.setStatus('current')
if mibBuilder.loadTexts: pm15mHisDataStartTime.setDescription('The beginning date and time of the PM period.')
per1dayCurDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30), )
if mibBuilder.loadTexts: per1dayCurDataTable.setStatus('current')
if mibBuilder.loadTexts: per1dayCurDataTable.setDescription('instructs an NE to send its current set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
per1dayCurDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1), ).setIndexNames((0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataMOD2"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataSlot"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataPort"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataPath"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataVT"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataName"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataLocation"), (0, "OPTIX-SONET-PER-MIB", "pm1dayCurDataDirection"))
if mibBuilder.loadTexts: per1dayCurDataEntry.setStatus('current')
if mibBuilder.loadTexts: per1dayCurDataEntry.setDescription('instructs an NE to send its current set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
pm1dayCurDataMOD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 1), MOD2Type()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataMOD2.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataMOD2.setDescription('Signal mode.')
pm1dayCurDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataSlot.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataSlot.setDescription('Slot number. This will indicate what is the slot of the object which raised this PM data. If not relevant to the PM data, will be zero.')
pm1dayCurDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataPort.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataPort.setDescription('Port number. This will indicate what is the Port of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm1dayCurDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataPath.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataPath.setDescription('Path number. This will indicate what is the Path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm1dayCurDataVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataVT.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataVT.setDescription('VT path number. This will indicate what is the VT path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm1dayCurDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 6), PerformanceEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataName.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataName.setDescription('Indicates the type of monitored parameter for which a value is retrieved.')
pm1dayCurDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 7), LocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataLocation.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataLocation.setDescription('Indicates the location. Only NEND(Near end)|FEND(Far end)|ALL will be represented here.')
pm1dayCurDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 8), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataDirection.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataDirection.setDescription('Specifies the direction of monitoring. Only RCV(Receive direction)|TRMT(Transmit direction)|ALL will be represented here.')
pm1dayCurDataMonVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataMonVal.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataMonVal.setDescription('measured value.')
pm1dayCurDataVldty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 10), ValidflagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataVldty.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataVldty.setDescription('It indicates whether the information for the specified time period was accumulated over the entire time period or some portion of it. Only INVALID|VALID will be represented here.')
pm1dayCurDataStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 30, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayCurDataStartTime.setStatus('current')
if mibBuilder.loadTexts: pm1dayCurDataStartTime.setDescription('The beginning date and time of the PM period.')
per1dayHisDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40), )
if mibBuilder.loadTexts: per1dayHisDataTable.setStatus('current')
if mibBuilder.loadTexts: per1dayHisDataTable.setDescription('instructs an NE to send its history set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
per1dayHisDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1), ).setIndexNames((0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataMOD2"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataSlot"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataPort"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataPath"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataVT"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataName"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataLocation"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataDirection"), (0, "OPTIX-SONET-PER-MIB", "pm1dayHisDataInterval"))
if mibBuilder.loadTexts: per1dayHisDataEntry.setStatus('current')
if mibBuilder.loadTexts: per1dayHisDataEntry.setDescription('instructs an NE to send its history set of PM data associated with one or more equipment units, facilities, links, or signaling links within the NE.')
pm1dayHisDataMOD2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 1), MOD2Type()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataMOD2.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataMOD2.setDescription('Signal mode.')
pm1dayHisDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataSlot.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataSlot.setDescription('Slot number. This will indicate what is the slot of the object which raised this PM data. If not relevant to the PM data, will be zero.')
pm1dayHisDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataPort.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataPort.setDescription('Port number. This will indicate what is the Port of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm1dayHisDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataPath.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataPath.setDescription('Path number. This will indicate what is the Path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm1dayHisDataVT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataVT.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataVT.setDescription('VT path number. This will indicate what is the VT path of the object which raised this PM data. If not relevant to the PM data, will be zero. ')
pm1dayHisDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 6), PerformanceEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataName.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataName.setDescription('Indicates the type of monitored parameter for which a value is retrieved.')
pm1dayHisDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 7), LocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataLocation.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataLocation.setDescription('Indicates the location. Only NEND(Near end)|FEND(Far end)|ALL will be represented here.')
pm1dayHisDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 8), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataDirection.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataDirection.setDescription('Specifies the direction of monitoring. Only RCV(Receive direction)|TRMT(Transmit direction)|ALL will be represented here.')
pm1dayHisDataInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataInterval.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataInterval.setDescription('The period number.')
pm1dayHisDataMonVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataMonVal.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataMonVal.setDescription('Measured value.')
pm1dayHisDataVldty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 11), ValidflagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataVldty.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataVldty.setDescription('It indicates whether the information for the specified time period was accumulated over the entire time period or some portion of it. Only INVALID|VALID will be represented here.')
pm1dayHisDataStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 10, 40, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pm1dayHisDataStartTime.setStatus('current')
if mibBuilder.loadTexts: pm1dayHisDataStartTime.setDescription('The beginning date and time of the PM period.')
optixSonetPmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 20))
optixSonetPmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 20, 1))
optixSonetPmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 20, 1, 1)).setObjects(("OPTIX-SONET-PER-MIB", "pm15mCurDataMOD2"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataSlot"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataPort"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataPath"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataVT"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataName"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataLocation"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataDirection"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataMonVal"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataVldty"), ("OPTIX-SONET-PER-MIB", "pm15mCurDataStartTime"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataMOD2"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataSlot"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataPort"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataPath"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataVT"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataName"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataLocation"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataDirection"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataInterval"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataMonVal"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataVldty"), ("OPTIX-SONET-PER-MIB", "pm15mHisDataStartTime"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataMOD2"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataSlot"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataPort"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataPath"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataVT"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataName"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataLocation"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataDirection"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataMonVal"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataVldty"), ("OPTIX-SONET-PER-MIB", "pm1dayCurDataStartTime"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataMOD2"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataSlot"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataPort"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataPath"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataVT"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataName"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataLocation"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataDirection"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataInterval"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataMonVal"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataVldty"), ("OPTIX-SONET-PER-MIB", "pm1dayHisDataStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optixSonetPmObjectGroup = optixSonetPmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: optixSonetPmObjectGroup.setDescription('Enter the description of the created OBJECT-GROUP.')
optixSonetPmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 20, 2))
optixSonetPmBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 2, 25, 3, 20, 20, 20, 2, 1)).setObjects(("OPTIX-SONET-PER-MIB", "optixSonetPmObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optixSonetPmBasicCompliance = optixSonetPmBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: optixSonetPmBasicCompliance.setDescription('Enter the description of the created MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("OPTIX-SONET-PER-MIB", pm1dayCurDataDirection=pm1dayCurDataDirection, pm15mCurDataMonVal=pm15mCurDataMonVal, pm15mHisDataVldty=pm15mHisDataVldty, pm15mCurDataSlot=pm15mCurDataSlot, pm15mHisDataPath=pm15mHisDataPath, optixSonetPmGroups=optixSonetPmGroups, per1dayCurDataEntry=per1dayCurDataEntry, pm15mHisDataMonVal=pm15mHisDataMonVal, pm15mCurDataMOD2=pm15mCurDataMOD2, pm15mHisDataLocation=pm15mHisDataLocation, per1dayCurDataTable=per1dayCurDataTable, pm15mCurDataPath=pm15mCurDataPath, pm1dayHisDataVldty=pm1dayHisDataVldty, PYSNMP_MODULE_ID=optixSonetPerformance, optixSonetPerformance=optixSonetPerformance, pm15mCurDataLocation=pm15mCurDataLocation, pm1dayHisDataStartTime=pm1dayHisDataStartTime, pm15mHisDataPort=pm15mHisDataPort, pm15mHisDataMOD2=pm15mHisDataMOD2, pm1dayHisDataDirection=pm1dayHisDataDirection, pm1dayHisDataVT=pm1dayHisDataVT, pm1dayCurDataPath=pm1dayCurDataPath, optixSonetPmObjectGroup=optixSonetPmObjectGroup, per15mCurDataEntry=per15mCurDataEntry, pm1dayCurDataMOD2=pm1dayCurDataMOD2, pm1dayCurDataName=pm1dayCurDataName, pm1dayCurDataLocation=pm1dayCurDataLocation, pmData=pmData, per15mHisDataTable=per15mHisDataTable, pm15mHisDataInterval=pm15mHisDataInterval, pm1dayCurDataPort=pm1dayCurDataPort, pm1dayCurDataVldty=pm1dayCurDataVldty, pm1dayCurDataStartTime=pm1dayCurDataStartTime, per1dayHisDataEntry=per1dayHisDataEntry, pm15mCurDataDirection=pm15mCurDataDirection, pm15mHisDataSlot=pm15mHisDataSlot, pm1dayCurDataSlot=pm1dayCurDataSlot, pm1dayHisDataSlot=pm1dayHisDataSlot, pm15mCurDataName=pm15mCurDataName, pm15mCurDataStartTime=pm15mCurDataStartTime, pm1dayHisDataMOD2=pm1dayHisDataMOD2, pm1dayHisDataName=pm1dayHisDataName, pm15mCurDataVT=pm15mCurDataVT, pm15mCurDataVldty=pm15mCurDataVldty, pm1dayHisDataPath=pm1dayHisDataPath, optixSonetPmCompliances=optixSonetPmCompliances, optixSonetPmConformance=optixSonetPmConformance, per1dayHisDataTable=per1dayHisDataTable, pm15mHisDataDirection=pm15mHisDataDirection, pm1dayCurDataMonVal=pm1dayCurDataMonVal, per15mCurDataTable=per15mCurDataTable, pm15mHisDataStartTime=pm15mHisDataStartTime, pm15mCurDataPort=pm15mCurDataPort, optixSonetPmBasicCompliance=optixSonetPmBasicCompliance, pm15mHisDataName=pm15mHisDataName, pm1dayHisDataPort=pm1dayHisDataPort, pm15mHisDataVT=pm15mHisDataVT, pm1dayHisDataLocation=pm1dayHisDataLocation, pm1dayHisDataInterval=pm1dayHisDataInterval, per15mHisDataEntry=per15mHisDataEntry, pm1dayHisDataMonVal=pm1dayHisDataMonVal, pm1dayCurDataVT=pm1dayCurDataVT)
