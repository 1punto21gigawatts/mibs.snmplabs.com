#
# PySNMP MIB module NETSCREEN-VR-BGP4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-VR-BGP4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
netscreenVR, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
netscreenTrapType, netscreenTrapDesc = mibBuilder.importSymbols("NETSCREEN-TRAP-MIB", "netscreenTrapType", "netscreenTrapDesc")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, iso, NotificationType, IpAddress, Counter32, Gauge32, Unsigned32, Counter64, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "iso", "NotificationType", "IpAddress", "Counter32", "Gauge32", "Unsigned32", "Counter64", "Bits", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nsVrBgp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 6))
if mibBuilder.loadTexts: nsVrBgp.setLastUpdated('200506202022Z')
if mibBuilder.loadTexts: nsVrBgp.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: nsVrBgp.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: nsVrBgp.setDescription('The MIB module for NS-BGP-4.')
nsVrBgpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 6, 1), )
if mibBuilder.loadTexts: nsVrBgpInfoTable.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpInfoTable.setDescription("BGP info table. This table contains, one entry per VR, information about the BGP's Version, LocalAs and Identifier.")
nsVrBgpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 6, 1, 1), ).setIndexNames((0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgpInfoVRID"))
if mibBuilder.loadTexts: nsVrBgpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpInfoEntry.setDescription("Entry containing information about the BGP's Version, LocalAs and Identifier")
nsVrBgpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpInfoVersion.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpInfoVersion.setDescription('Vector of supported BGP protocol version numbers. Each peer negotiates the version from this vector. Versions are identified via the string of bits contained within this object. The first octet contains bits 0 to 7, the second octet contains bits 8 to 15, and so on, with the most significant bit referring to the lowest bit number in the octet (e.g., the MSB of the first octet refers to bit 0). If a bit, i, is present and set, then the version (i+1) of the BGP is supported.')
nsVrBgpInfoLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpInfoLocalAs.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpInfoLocalAs.setDescription('The local autonomous system number.')
nsVrBgpInfoIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpInfoIdentifier.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpInfoIdentifier.setDescription('The BGP Identifier of local system.')
nsVrBgpInfoVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpInfoVRID.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpInfoVRID.setDescription('Virtual Router ID. VRID range for system created VRs: [1-1024] and for user created VRs: [1025-2048]')
nsVrBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3), )
if mibBuilder.loadTexts: nsVrBgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerTable.setDescription('BGP peer table. This table contains, one entry per BGP peer, information about the connections with BGP peers.')
nsVrBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1), ).setIndexNames((0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgpPeerVRID"), (0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgpPeerRemoteAddr"))
if mibBuilder.loadTexts: nsVrBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerEntry.setDescription('Entry containing information about the connection with a BGP peer.')
nsVrBgpPeerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerIdentifier.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerIdentifier.setDescription("The BGP Identifier of this entry's BGP peer.")
nsVrBgpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerState.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerState.setDescription('The BGP peer connection state.')
nsVrBgpPeerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerAdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Stop Event to be generated. This parameter can be used to restart BGP peer connections. Care should be used in providing write access to this object without adequate authentication.")
nsVrBgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerNegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerNegotiatedVersion.setDescription('The negotiated version of BGP running between the two peers.')
nsVrBgpPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerLocalAddr.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerLocalAddr.setDescription("The local IP address of this entry's BGP connection.")
nsVrBgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerLocalPort.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerLocalPort.setDescription('The local port for the TCP connection between the BGP peers.')
nsVrBgpPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
nsVrBgpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerRemotePort.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerRemotePort.setDescription('The remote port for the TCP connection between the BGP peers. Note that the objects nsVrBgpPeerLocalAddr, nsVrBgpPeerLocalPort, nsVrBgpPeerRemoteAddr and nsVrBgpPeerRemotePort provide the appropriate reference to the standard MIB TCP connection table.')
nsVrBgpPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerRemoteAs.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerRemoteAs.setDescription('The remote autonomous system number.')
nsVrBgpPeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerInUpdates.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerInUpdates.setDescription('The number of BGP UPDATE messages received on this connection. This object should be initialized to zero (0) when the connection is established.')
nsVrBgpPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerOutUpdates.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerOutUpdates.setDescription('The number of BGP UPDATE messages transmitted on this connection. This object should be initialized to zero (0) when the connection is established.')
nsVrBgpPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerInTotalMessages.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerInTotalMessages.setDescription('The total number of messages received from the remote peer on this connection. This object should be initialized to zero when the connection is established.')
nsVrBgpPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerOutTotalMessages.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerOutTotalMessages.setDescription('The total number of messages transmitted to the remote peer on this connection. This object should be initialized to zero when the connection is established.')
nsVrBgpPeerLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerLastError.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerLastError.setDescription('The last error code and subcode seen by this peer on this connection. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
nsVrBgpPeerFsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerFsmEstablishedTransitions.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerFsmEstablishedTransitions.setDescription('The total number of times the BGP FSM transitioned into the established state.')
nsVrBgpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerFsmEstablishedTime.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerFsmEstablishedTime.setDescription('This timer indicates how long (in seconds) this peer has been in the Established state or how long since this peer was last in the Established state. It is set to zero when a new peer is configured or the router is booted.')
nsVrBgpPeerConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerConnectRetryInterval.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerConnectRetryInterval.setDescription('Time interval in seconds for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
nsVrBgpPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerHoldTime.setDescription('Time interval in seconds for the Hold Timer established with the peer. The value of this object is calculated by this BGP speaker by using the smaller of the value in nsVrBgpPeerHoldTimeConfigured and the Hold Time received in the OPEN message. This value must be at lease three seconds if it is not zero (0) in which case the Hold Timer has not been established with the peer, or, the value of nsVrBgpPeerHoldTimeConfigured is zero (0).')
nsVrBgpPeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerKeepAlive.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerKeepAlive.setDescription('Time interval in seconds for the KeepAlive timer established with the peer. The value of this object is calculated by this BGP speaker such that, when compared with nsVrBgpPeerHoldTime, it has the same proportion as what nsVrBgpPeerKeepAliveConfigured has when compared with nsVrBgpPeerHoldTimeConfigured. If the value of this object is zero (0), it indicates that the KeepAlive timer has not been established with the peer, or, the value of nsVrBgpPeerKeepAliveConfigured is zero (0).')
nsVrBgpPeerHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerHoldTimeConfigured.setDescription('Time interval in seconds for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (nsVrBgpPeerHoldTime) with the peer. This value must not be less than three seconds if it is not zero (0) in which case the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
nsVrBgpPeerKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerKeepAliveConfigured.setDescription("Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages' frequency relative to the value specified in nsVrBgpPeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by nsVrBgpPeerKeepAlive. A reasonable maximum value for this timer would be configured to be one third of that of nsVrBgpPeerHoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.")
nsVrBgpPeerMinASOriginationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerMinASOriginationInterval.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerMinASOriginationInterval.setDescription('Time interval in seconds for the MinASOriginationInterval timer. The suggested value for this timer is 15 seconds.')
nsVrBgpPeerMinRouteAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerMinRouteAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerMinRouteAdvertisementInterval.setDescription('Time interval in seconds for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds.')
nsVrBgpPeerInUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerInUpdateElapsedTime.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerInUpdateElapsedTime.setDescription('Elapsed time in seconds since the last BGP UPDATE message was received from the peer. Each time nsVrBgpPeerInUpdates is incremented, the value of this object is set to zero (0).')
nsVrBgpPeerVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgpPeerVRID.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpPeerVRID.setDescription('Virtual Router ID. VRID range for system created VRs: [1-1024] and for user created VRs: [1025-2048]')
nsVrBgp4PathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6), )
if mibBuilder.loadTexts: nsVrBgp4PathAttrTable.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrTable.setDescription('The BGP-4 Received Path Attribute Table contains information about paths to destination networks received from all BGP4 peers.')
nsVrBgp4PathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1), ).setIndexNames((0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgp4PathAttrVRID"), (0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgp4PathAttrIpAddrPrefix"), (0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgp4PathAttrIpAddrPrefixLen"), (0, "NETSCREEN-VR-BGP4-MIB", "nsVrBgp4PathAttrPeer"))
if mibBuilder.loadTexts: nsVrBgp4PathAttrEntry.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrEntry.setDescription('Information about a path to a network.')
nsVrBgp4PathAttrPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrPeer.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrPeer.setDescription('The IP address of the peer where the path information was learned.')
nsVrBgp4PathAttrIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrIpAddrPrefixLen.setDescription('Length in bits of the IP address prefix in the Network Layer Reachability Information field.')
nsVrBgp4PathAttrIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrIpAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrIpAddrPrefix.setDescription('An IP address prefix in the Network Layer Reachability Information field. This object is an IP address containing the prefix with length specified by nsVrBgp4PathAttrIpAddrPrefixLen. Any bits beyond the length specified by nsVrBgp4PathAttrIpAddrPrefixLen are zeroed.')
nsVrBgp4PathAttrOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrOrigin.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrOrigin.setDescription('The ultimate origin of the path information.')
nsVrBgp4PathAttrASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrASPathSegment.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrASPathSegment.setDescription('The sequence of AS path segments. Each AS path segment is represented by a triple <type, length, value>. The type is a 1-octet field which has two possible values: 1 AS_SET: unordered set of ASs a route in the UPDATE message has traversed 2 AS_SEQUENCE: ordered set of ASs a route in the UPDATE message has traversed. The length is a 1-octet field containing the number of ASs in the value field. The value field contains one or more AS numbers, each AS is represented in the octet string as a pair of octets according to the following algorithm: first-byte-of-pair = ASNumber / 256; second-byte-of-pair = ASNumber & 255;')
nsVrBgp4PathAttrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrNextHop.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrNextHop.setDescription('The address of the border router that should be used for the destination network.')
nsVrBgp4PathAttrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrMultiExitDisc.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrMultiExitDisc.setDescription('This metric is used to discriminate between multiple exit points to an adjacent autonomous system. A value of -1 indicates the absence of this attribute.')
nsVrBgp4PathAttrLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrLocalPref.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrLocalPref.setDescription("The originating BGP4 speaker's degree of preference for an advertised route. A value of -1 indicates the absence of this attribute.")
nsVrBgp4PathAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRrouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrAtomicAggregate.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrAtomicAggregate.setDescription('Whether or not the local system has selected a less specific route without selecting a more specific route.')
nsVrBgp4PathAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrAggregatorAS.setDescription('The AS number of the last BGP4 speaker that performed route aggregation. A value of zero (0) indicates the absence of this attribute.')
nsVrBgp4PathAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrAggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrAggregatorAddr.setDescription('The IP address of the last BGP4 speaker that performed route aggregation. A value of 0.0.0.0 indicates the absence of this attribute.')
nsVrBgp4PathAttrCalcLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrCalcLocalPref.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrCalcLocalPref.setDescription('The degree of preference calculated by the receiving BGP4 speaker for an advertised route. A value of -1 indicates the absence of this attribute.')
nsVrBgp4PathAttrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrBest.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrBest.setDescription('An indication of whether or not this route was chosen as the best BGP4 route.')
nsVrBgp4PathAttrUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrUnknown.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrUnknown.setDescription('One or more path attributes not understood by this BGP4 speaker. Size zero (0) indicates the absence of such attribute(s). Octets beyond the maximum size, if any, are not recorded by this object.')
nsVrBgp4PathAttrVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 6, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVrBgp4PathAttrVRID.setStatus('current')
if mibBuilder.loadTexts: nsVrBgp4PathAttrVRID.setDescription('Virtual Router ID. VRID range for system created VRs: [1-1024] and for user created VRs: [1025-2048]')
nsVrBgpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 18, 6, 7))
nsVrBgpEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3224, 18, 6, 7, 1)).setObjects(("NETSCREEN-VR-BGP4-MIB", "nsVrBgp4PathAttrVRID"), ("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ("NETSCREEN-VR-BGP4-MIB", "nsVrBgpPeerIdentifier"), ("NETSCREEN-VR-BGP4-MIB", "nsVrBgpPeerLastError"), ("NETSCREEN-VR-BGP4-MIB", "nsVrBgpPeerState"))
if mibBuilder.loadTexts: nsVrBgpEstablished.setStatus('current')
if mibBuilder.loadTexts: nsVrBgpEstablished.setDescription('The BGP Established event is generated when the BGP FSM enters the ESTABLISHED state.')
mibBuilder.exportSymbols("NETSCREEN-VR-BGP4-MIB", nsVrBgp4PathAttrBest=nsVrBgp4PathAttrBest, nsVrBgp4PathAttrUnknown=nsVrBgp4PathAttrUnknown, nsVrBgp=nsVrBgp, nsVrBgpPeerRemotePort=nsVrBgpPeerRemotePort, nsVrBgpPeerMinRouteAdvertisementInterval=nsVrBgpPeerMinRouteAdvertisementInterval, nsVrBgp4PathAttrOrigin=nsVrBgp4PathAttrOrigin, nsVrBgp4PathAttrCalcLocalPref=nsVrBgp4PathAttrCalcLocalPref, nsVrBgp4PathAttrAggregatorAddr=nsVrBgp4PathAttrAggregatorAddr, nsVrBgpInfoTable=nsVrBgpInfoTable, nsVrBgpPeerState=nsVrBgpPeerState, nsVrBgpPeerRemoteAddr=nsVrBgpPeerRemoteAddr, nsVrBgp4PathAttrIpAddrPrefixLen=nsVrBgp4PathAttrIpAddrPrefixLen, nsVrBgp4PathAttrAtomicAggregate=nsVrBgp4PathAttrAtomicAggregate, nsVrBgp4PathAttrPeer=nsVrBgp4PathAttrPeer, nsVrBgpPeerConnectRetryInterval=nsVrBgpPeerConnectRetryInterval, nsVrBgpPeerHoldTime=nsVrBgpPeerHoldTime, nsVrBgpPeerEntry=nsVrBgpPeerEntry, nsVrBgp4PathAttrMultiExitDisc=nsVrBgp4PathAttrMultiExitDisc, nsVrBgpPeerAdminStatus=nsVrBgpPeerAdminStatus, nsVrBgp4PathAttrASPathSegment=nsVrBgp4PathAttrASPathSegment, nsVrBgpPeerOutUpdates=nsVrBgpPeerOutUpdates, nsVrBgp4PathAttrLocalPref=nsVrBgp4PathAttrLocalPref, nsVrBgp4PathAttrVRID=nsVrBgp4PathAttrVRID, nsVrBgpPeerFsmEstablishedTime=nsVrBgpPeerFsmEstablishedTime, nsVrBgp4PathAttrIpAddrPrefix=nsVrBgp4PathAttrIpAddrPrefix, nsVrBgp4PathAttrEntry=nsVrBgp4PathAttrEntry, nsVrBgpTraps=nsVrBgpTraps, nsVrBgpEstablished=nsVrBgpEstablished, nsVrBgpPeerTable=nsVrBgpPeerTable, nsVrBgpPeerRemoteAs=nsVrBgpPeerRemoteAs, nsVrBgpPeerKeepAliveConfigured=nsVrBgpPeerKeepAliveConfigured, nsVrBgpPeerMinASOriginationInterval=nsVrBgpPeerMinASOriginationInterval, nsVrBgpPeerOutTotalMessages=nsVrBgpPeerOutTotalMessages, nsVrBgpInfoVersion=nsVrBgpInfoVersion, nsVrBgpPeerInUpdates=nsVrBgpPeerInUpdates, nsVrBgpPeerKeepAlive=nsVrBgpPeerKeepAlive, nsVrBgpPeerLastError=nsVrBgpPeerLastError, nsVrBgpPeerInUpdateElapsedTime=nsVrBgpPeerInUpdateElapsedTime, nsVrBgpPeerFsmEstablishedTransitions=nsVrBgpPeerFsmEstablishedTransitions, nsVrBgpPeerIdentifier=nsVrBgpPeerIdentifier, nsVrBgpPeerVRID=nsVrBgpPeerVRID, nsVrBgpPeerLocalAddr=nsVrBgpPeerLocalAddr, nsVrBgpPeerInTotalMessages=nsVrBgpPeerInTotalMessages, nsVrBgpPeerHoldTimeConfigured=nsVrBgpPeerHoldTimeConfigured, PYSNMP_MODULE_ID=nsVrBgp, nsVrBgpInfoVRID=nsVrBgpInfoVRID, nsVrBgpPeerNegotiatedVersion=nsVrBgpPeerNegotiatedVersion, nsVrBgp4PathAttrTable=nsVrBgp4PathAttrTable, nsVrBgpInfoLocalAs=nsVrBgpInfoLocalAs, nsVrBgpInfoIdentifier=nsVrBgpInfoIdentifier, nsVrBgpPeerLocalPort=nsVrBgpPeerLocalPort, nsVrBgpInfoEntry=nsVrBgpInfoEntry, nsVrBgp4PathAttrNextHop=nsVrBgp4PathAttrNextHop, nsVrBgp4PathAttrAggregatorAS=nsVrBgp4PathAttrAggregatorAS)
