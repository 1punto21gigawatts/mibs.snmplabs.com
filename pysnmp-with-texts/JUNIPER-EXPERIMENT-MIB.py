#
# PySNMP MIB module JUNIPER-EXPERIMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-EXPERIMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:37:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
juniperMIB, = mibBuilder.importSymbols("JUNIPER-SMI", "juniperMIB")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Counter32, Integer32, iso, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Gauge32, Bits, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Counter32", "Integer32", "iso", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Gauge32", "Bits", "ObjectIdentity", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxExperiment = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5))
jnxExperiment.setRevisions(('2003-04-17 01:00', '2005-09-01 00:00', '2007-01-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxExperiment.setRevisionsDescriptions(('Initial revision', 'Added jnxLdapExperiment branch', 'Added jnxExampleMibRoot branch',))
if mibBuilder.loadTexts: jnxExperiment.setLastUpdated('200701080000Z')
if mibBuilder.loadTexts: jnxExperiment.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxExperiment.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxExperiment.setDescription('The object identifiers for experimental MIBs for the Juniper Networks, Inc. products. This is the top-level object identifier registry for SNMP modules containing experimental MIB definitions. Experimental MIBs are defined as: 1) IETF work-in-process MIBs which have not been assigned a permanent object identifier by the IANA. 2) Juniper work-in-process MIBs that have not achieved final production quality or field experience. NOTE: Support for MIBs under the this OID subtree is temporary and changes to objects may occur without notice.')
jnxBgpM2Experiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 1))
if mibBuilder.loadTexts: jnxBgpM2Experiment.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2Experiment.setDescription('The object identifier used to anchor the experimental IETF draft for the BGPv2 MIB.')
if mibBuilder.loadTexts: jnxBgpM2Experiment.setReference('IETF Inter-Domain Routing Working Group documents: draft-ietf-idr-bgp4-mibv2-03.txt')
jnxLdapExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 2))
if mibBuilder.loadTexts: jnxLdapExperiment.setStatus('current')
if mibBuilder.loadTexts: jnxLdapExperiment.setDescription('The object identifier used to anchor mibs for the internal juniper ldap applications.')
jnxBfdExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 3))
if mibBuilder.loadTexts: jnxBfdExperiment.setStatus('current')
if mibBuilder.loadTexts: jnxBfdExperiment.setDescription('The object identifier used to anchor the experimental IETF draft for the BFD MIB.')
jnxOspfv3Experiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 4))
if mibBuilder.loadTexts: jnxOspfv3Experiment.setStatus('current')
if mibBuilder.loadTexts: jnxOspfv3Experiment.setDescription('The object identifier used to anchor the experimental IETF draft for the OSPFv3 MIB.')
jnxExampleMibRoot = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 5))
if mibBuilder.loadTexts: jnxExampleMibRoot.setStatus('current')
if mibBuilder.loadTexts: jnxExampleMibRoot.setDescription('This branch anchors mibs used for private, internal sample implementations.')
jnxInternalMibRoot = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 6))
if mibBuilder.loadTexts: jnxInternalMibRoot.setStatus('current')
if mibBuilder.loadTexts: jnxInternalMibRoot.setDescription('This branch is reserved for internal use.')
jnxP2mpExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 7))
if mibBuilder.loadTexts: jnxP2mpExperiment.setStatus('current')
if mibBuilder.loadTexts: jnxP2mpExperiment.setDescription('The object identifier used to anchor the experimental IETF draft for the P2MP MIB.')
jnxL2L3VpnMcastExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 11))
if mibBuilder.loadTexts: jnxL2L3VpnMcastExperiment.setStatus('current')
if mibBuilder.loadTexts: jnxL2L3VpnMcastExperiment.setDescription('This branch anchors the experimental IETF draft for L2L3VpnMcast MIB.')
jnxMvpnExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 12))
if mibBuilder.loadTexts: jnxMvpnExperiment.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnExperiment.setDescription('This branch anchors the experimental IETF draft for Multicast VPN MIB.')
mibBuilder.exportSymbols("JUNIPER-EXPERIMENT-MIB", jnxMvpnExperiment=jnxMvpnExperiment, jnxLdapExperiment=jnxLdapExperiment, PYSNMP_MODULE_ID=jnxExperiment, jnxBgpM2Experiment=jnxBgpM2Experiment, jnxExampleMibRoot=jnxExampleMibRoot, jnxP2mpExperiment=jnxP2mpExperiment, jnxOspfv3Experiment=jnxOspfv3Experiment, jnxInternalMibRoot=jnxInternalMibRoot, jnxBfdExperiment=jnxBfdExperiment, jnxL2L3VpnMcastExperiment=jnxL2L3VpnMcastExperiment, jnxExperiment=jnxExperiment)
