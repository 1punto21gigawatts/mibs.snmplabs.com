#
# PySNMP MIB module JETNEXUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JETNEXUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
enterprises, ObjectIdentity, iso, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Unsigned32, NotificationType, Integer32, Counter64, Counter32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "ObjectIdentity", "iso", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Unsigned32", "NotificationType", "Integer32", "Counter64", "Counter32", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jetnexusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 38370))
jetnexusMIB.setRevisions(('2014-10-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jetnexusMIB.setRevisionsDescriptions(('Standard compliance',))
if mibBuilder.loadTexts: jetnexusMIB.setLastUpdated('201410180000Z')
if mibBuilder.loadTexts: jetnexusMIB.setOrganization('jetNEXUS')
if mibBuilder.loadTexts: jetnexusMIB.setContactInfo('info@jetnexus.com')
if mibBuilder.loadTexts: jetnexusMIB.setDescription('TODO ')
jetnexusData = MibIdentifier((1, 3, 6, 1, 4, 1, 38370, 1))
jetnexusGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 38370, 1, 1))
jetnexusOverallInputBytes = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusOverallInputBytes.setStatus('current')
if mibBuilder.loadTexts: jetnexusOverallInputBytes.setDescription('from jetnexus shared memory')
jetnexusOverallOutputBytes = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusOverallOutputBytes.setStatus('current')
if mibBuilder.loadTexts: jetnexusOverallOutputBytes.setDescription('from jetnexus shared memory')
jetnexusCompressedInputBytes = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusCompressedInputBytes.setStatus('current')
if mibBuilder.loadTexts: jetnexusCompressedInputBytes.setDescription('from jetnexus shared memory')
jetnexusCompressedOutputBytes = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusCompressedOutputBytes.setStatus('current')
if mibBuilder.loadTexts: jetnexusCompressedOutputBytes.setDescription('from jetnexus shared memory')
jetnexusVersionInfo = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusVersionInfo.setStatus('current')
if mibBuilder.loadTexts: jetnexusVersionInfo.setDescription('from jetnexus shared memory')
jetnexusTotalClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusTotalClientConnections.setStatus('current')
if mibBuilder.loadTexts: jetnexusTotalClientConnections.setDescription('from jetnexus shared memory')
jetnexusCpuPercent = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusCpuPercent.setStatus('current')
if mibBuilder.loadTexts: jetnexusCpuPercent.setDescription('from jetnexus shared memory')
jetnexusDiskFreePercent = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusDiskFreePercent.setStatus('current')
if mibBuilder.loadTexts: jetnexusDiskFreePercent.setDescription('from jetnexus shared memory')
jetnexusMemoryPercent = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusMemoryPercent.setStatus('current')
if mibBuilder.loadTexts: jetnexusMemoryPercent.setDescription('from jetnexus shared memory')
jetnexusCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 38370, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jetnexusCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: jetnexusCurrentConnections.setDescription('from jetnexus shared memory')
jnvirtualserviceTable = MibTable((1, 3, 6, 1, 4, 1, 38370, 1, 2), )
if mibBuilder.loadTexts: jnvirtualserviceTable.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceTable.setDescription('Virtual Service info from Shared memory')
jnvirtualserviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1), ).setIndexNames((0, "JETNEXUS-MIB", "jnvirtualserviceIndexVirtualService"))
if mibBuilder.loadTexts: jnvirtualserviceEntry.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceEntry.setDescription('Virtual Service data')
jnvirtualserviceIndexVirtualService = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: jnvirtualserviceIndexVirtualService.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceIndexVirtualService.setDescription('Virtual Service data')
jnvirtualserviceVSAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceVSAddrPort.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceVSAddrPort.setDescription('Virtual Service data')
jnvirtualserviceOverallInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceOverallInputBytes.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceOverallInputBytes.setDescription('Virtual Service data')
jnvirtualserviceOverallOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceOverallOutputBytes.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceOverallOutputBytes.setDescription('Virtual Service data')
jnvirtualserviceCacheBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceCacheBytes.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceCacheBytes.setDescription('Virtual Service data')
jnvirtualserviceCompressionPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceCompressionPercent.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceCompressionPercent.setDescription('Virtual Service data')
jnvirtualservicePresentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualservicePresentClientConnections.setStatus('current')
if mibBuilder.loadTexts: jnvirtualservicePresentClientConnections.setDescription('Virtual Service data')
jnvirtualserviceHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceHitCount.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceHitCount.setDescription('Virtual Service data')
jnvirtualserviceCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceCacheHits.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceCacheHits.setDescription('Virtual Service data')
jnvirtualserviceCacheHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceCacheHitsPercent.setDescription('Virtual Service data')
jnvirtualserviceVSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnvirtualserviceVSStatus.setStatus('current')
if mibBuilder.loadTexts: jnvirtualserviceVSStatus.setDescription('Virtual Service data')
jnrealserverTable = MibTable((1, 3, 6, 1, 4, 1, 38370, 1, 3), )
if mibBuilder.loadTexts: jnrealserverTable.setStatus('current')
if mibBuilder.loadTexts: jnrealserverTable.setDescription('Real server data')
jnrealserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1), ).setIndexNames((0, "JETNEXUS-MIB", "jnrealserverIndexVirtualService"), (0, "JETNEXUS-MIB", "jnrealserverIndexRealServer"))
if mibBuilder.loadTexts: jnrealserverEntry.setStatus('current')
if mibBuilder.loadTexts: jnrealserverEntry.setDescription('Real server data')
jnrealserverIndexVirtualService = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: jnrealserverIndexVirtualService.setStatus('current')
if mibBuilder.loadTexts: jnrealserverIndexVirtualService.setDescription('Real server data')
jnrealserverIndexRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: jnrealserverIndexRealServer.setStatus('current')
if mibBuilder.loadTexts: jnrealserverIndexRealServer.setDescription('Real server data')
jnrealserverVSAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverVSAddrPort.setStatus('current')
if mibBuilder.loadTexts: jnrealserverVSAddrPort.setDescription('Real server data')
jnrealserverRSAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverRSAddrPort.setStatus('current')
if mibBuilder.loadTexts: jnrealserverRSAddrPort.setDescription('Real server data')
jnrealserverOverallInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverOverallInputBytes.setStatus('current')
if mibBuilder.loadTexts: jnrealserverOverallInputBytes.setDescription('Real server data')
jnrealserverOverallOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverOverallOutputBytes.setStatus('current')
if mibBuilder.loadTexts: jnrealserverOverallOutputBytes.setDescription('Real server data')
jnrealserverCompressionPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverCompressionPercent.setStatus('current')
if mibBuilder.loadTexts: jnrealserverCompressionPercent.setDescription('Real server data')
jnrealserverPresentClientConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverPresentClientConnections.setStatus('current')
if mibBuilder.loadTexts: jnrealserverPresentClientConnections.setDescription('Real server data')
jnrealserverPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverPoolUsage.setStatus('current')
if mibBuilder.loadTexts: jnrealserverPoolUsage.setDescription('Real server data')
jnrealserverHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverHitCount.setStatus('current')
if mibBuilder.loadTexts: jnrealserverHitCount.setDescription('Real server data')
jnrealserverRSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 38370, 1, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnrealserverRSStatus.setStatus('current')
if mibBuilder.loadTexts: jnrealserverRSStatus.setDescription('Real server data')
jetnexusConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 38370, 2))
jetnexusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 38370, 2, 1))
jetnexusCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 38370, 2, 1, 1)).setObjects(("JETNEXUS-MIB", "jetnexusOverallInputBytes"), ("JETNEXUS-MIB", "jetnexusOverallOutputBytes"), ("JETNEXUS-MIB", "jetnexusCompressedInputBytes"), ("JETNEXUS-MIB", "jetnexusCompressedOutputBytes"), ("JETNEXUS-MIB", "jetnexusVersionInfo"), ("JETNEXUS-MIB", "jetnexusTotalClientConnections"), ("JETNEXUS-MIB", "jetnexusCpuPercent"), ("JETNEXUS-MIB", "jetnexusDiskFreePercent"), ("JETNEXUS-MIB", "jetnexusMemoryPercent"), ("JETNEXUS-MIB", "jetnexusCurrentConnections"), ("JETNEXUS-MIB", "jnvirtualserviceVSAddrPort"), ("JETNEXUS-MIB", "jnvirtualserviceOverallInputBytes"), ("JETNEXUS-MIB", "jnvirtualserviceOverallOutputBytes"), ("JETNEXUS-MIB", "jnvirtualserviceCacheBytes"), ("JETNEXUS-MIB", "jnvirtualserviceCompressionPercent"), ("JETNEXUS-MIB", "jnvirtualservicePresentClientConnections"), ("JETNEXUS-MIB", "jnvirtualserviceHitCount"), ("JETNEXUS-MIB", "jnvirtualserviceCacheHits"), ("JETNEXUS-MIB", "jnvirtualserviceCacheHitsPercent"), ("JETNEXUS-MIB", "jnvirtualserviceVSStatus"), ("JETNEXUS-MIB", "jnrealserverVSAddrPort"), ("JETNEXUS-MIB", "jnrealserverRSAddrPort"), ("JETNEXUS-MIB", "jnrealserverOverallInputBytes"), ("JETNEXUS-MIB", "jnrealserverOverallOutputBytes"), ("JETNEXUS-MIB", "jnrealserverCompressionPercent"), ("JETNEXUS-MIB", "jnrealserverPresentClientConnections"), ("JETNEXUS-MIB", "jnrealserverPoolUsage"), ("JETNEXUS-MIB", "jnrealserverHitCount"), ("JETNEXUS-MIB", "jnrealserverRSStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jetnexusCurrentGroup = jetnexusCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: jetnexusCurrentGroup.setDescription('The objects relating to the MIB module registered by jetNEXUS.')
jetnexusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 38370, 2, 2))
jetnexusBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 38370, 2, 2, 1)).setObjects(("JETNEXUS-MIB", "jetnexusCurrentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jetnexusBasicCompliance = jetnexusBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: jetnexusBasicCompliance.setDescription('jetNEXUS MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("JETNEXUS-MIB", jnrealserverPoolUsage=jnrealserverPoolUsage, jnvirtualserviceHitCount=jnvirtualserviceHitCount, jnvirtualserviceCacheHitsPercent=jnvirtualserviceCacheHitsPercent, jetnexusConformance=jetnexusConformance, jnvirtualserviceVSStatus=jnvirtualserviceVSStatus, jetnexusGlobal=jetnexusGlobal, jnrealserverIndexVirtualService=jnrealserverIndexVirtualService, jnvirtualserviceOverallInputBytes=jnvirtualserviceOverallInputBytes, jnvirtualserviceCacheBytes=jnvirtualserviceCacheBytes, jnrealserverVSAddrPort=jnrealserverVSAddrPort, jnvirtualserviceCompressionPercent=jnvirtualserviceCompressionPercent, PYSNMP_MODULE_ID=jetnexusMIB, jnrealserverTable=jnrealserverTable, jnrealserverIndexRealServer=jnrealserverIndexRealServer, jnvirtualserviceEntry=jnvirtualserviceEntry, jnrealserverHitCount=jnrealserverHitCount, jetnexusCpuPercent=jetnexusCpuPercent, jetnexusCurrentConnections=jetnexusCurrentConnections, jetnexusVersionInfo=jetnexusVersionInfo, jnvirtualserviceCacheHits=jnvirtualserviceCacheHits, jetnexusGroups=jetnexusGroups, jnrealserverPresentClientConnections=jnrealserverPresentClientConnections, jnvirtualserviceVSAddrPort=jnvirtualserviceVSAddrPort, jetnexusCompliances=jetnexusCompliances, jetnexusOverallInputBytes=jetnexusOverallInputBytes, jetnexusMIB=jetnexusMIB, jetnexusMemoryPercent=jetnexusMemoryPercent, jnvirtualservicePresentClientConnections=jnvirtualservicePresentClientConnections, jnrealserverRSStatus=jnrealserverRSStatus, jetnexusCurrentGroup=jetnexusCurrentGroup, jnrealserverOverallInputBytes=jnrealserverOverallInputBytes, jetnexusDiskFreePercent=jetnexusDiskFreePercent, jnrealserverRSAddrPort=jnrealserverRSAddrPort, jetnexusTotalClientConnections=jetnexusTotalClientConnections, jnvirtualserviceTable=jnvirtualserviceTable, jetnexusOverallOutputBytes=jetnexusOverallOutputBytes, jnvirtualserviceOverallOutputBytes=jnvirtualserviceOverallOutputBytes, jetnexusData=jetnexusData, jetnexusCompressedOutputBytes=jetnexusCompressedOutputBytes, jetnexusBasicCompliance=jetnexusBasicCompliance, jnrealserverOverallOutputBytes=jnrealserverOverallOutputBytes, jnrealserverCompressionPercent=jnrealserverCompressionPercent, jnvirtualserviceIndexVirtualService=jnvirtualserviceIndexVirtualService, jetnexusCompressedInputBytes=jetnexusCompressedInputBytes, jnrealserverEntry=jnrealserverEntry)
