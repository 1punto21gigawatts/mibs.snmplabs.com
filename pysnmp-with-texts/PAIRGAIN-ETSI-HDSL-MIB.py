#
# PySNMP MIB module PAIRGAIN-ETSI-HDSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAIRGAIN-ETSI-HDSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
pgainHDSL, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainHDSL")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, ModuleIdentity, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Unsigned32, ObjectIdentity, IpAddress, MibIdentifier, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "ModuleIdentity", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Unsigned32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Byte(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Short(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PgTimeStamp(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PgAlarmSeverityMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("minor", 2), ("major", 3), ("notAvailable", 4))

class PgAlarmSeverityProtectionSwitchMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("disable", 1), ("minor", 2), ("major", 3), ("protectionSwitchMajor", 4), ("notAvailable", 5))

class PgBERThreshold(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

hdslSpan15mPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 1), )
if mibBuilder.loadTexts: hdslSpan15mPerformanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan15mPerformanceTable.setDescription('This table provides the 15-minute performance history monitoring of the last 24 hours for all HDSL spans Errored Seconds (ES), Severely Errored Seconds (SES) and Unavailable Seconds (UAS).')
hdslSpan15mPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpan15mSlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpan15mSpanId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpan15mHistoryId"))
if mibBuilder.loadTexts: hdslSpan15mPerformanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan15mPerformanceEntry.setDescription('Entries of the HDSL span 15-min performance table ')
hdslSpan15mSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpan15mSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan15mSlotId.setDescription('Identifies the HDSL line occupied in the chassis. The slots are numbered 1 through 16 from left to right.')
hdslSpan15mSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpan15mSpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan15mSpanId.setDescription('Identifies the span of the HDSL line we are monitoring. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - span between LTU and REG is identified as 1. span between REG and NTU is identified as 2. 2 REGs - span between LTU and REG #1 is identified as 1. span between REG #1 and REG #2 is identified as 2. span between REG #2 and NTU is identified as 3. ')
hdslSpan15mHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpan15mHistoryId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan15mHistoryId.setDescription('Identify the history ID within the 96 15-minute performance history. ')
hdsl15mESLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 4), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mESLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mESLoopANet.setDescription("HDSL 15-min ES count on Loop A's Network side of the span.")
hdsl15mESLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 5), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mESLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mESLoopBNet.setDescription("HDSL 15-min ES count on Loop B's Network side of the span.")
hdsl15mUASLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 6), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mUASLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mUASLoopANet.setDescription("HDSL 15-min UAS count on Loop A's Network side of the span.")
hdsl15mUASLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 7), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mUASLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mUASLoopBNet.setDescription("HDSL 15-min UAS count on Loop B's Network side of the span.")
hdsl15mSESLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 8), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mSESLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mSESLoopANet.setDescription("HDSL 15-min SES count on Loop A's Network side of the span.")
hdsl15mSESLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 9), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mSESLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mSESLoopBNet.setDescription("HDSL 15-min SES count on Loop B's Network side of the span.")
hdsl15mESLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 10), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mESLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mESLoopACust.setDescription("HDSL 15-min ES count on Loop A's Customer side of the span.")
hdsl15mESLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 11), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mESLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mESLoopBCust.setDescription("HDSL 15-min ES count on Loop B's Customer side of the span.")
hdsl15mUASLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 12), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mUASLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mUASLoopACust.setDescription("HDSL 15-min UAS count on Loop A's Customer side of the span.")
hdsl15mUASLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 13), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mUASLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mUASLoopBCust.setDescription("HDSL 15-min UAS count on Loop B's Customer side of the span.")
hdsl15mSESLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 14), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mSESLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mSESLoopACust.setDescription("HDSL 15-min SES count on Loop A's customer side of the span.")
hdsl15mSESLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 1, 1, 15), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl15mSESLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl15mSESLoopBCust.setDescription("HDSL 15-min SES count on Loop B's customer side of the span.")
hdslSpan24hPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 2), )
if mibBuilder.loadTexts: hdslSpan24hPerformanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan24hPerformanceTable.setDescription('This table provides 24-hour performance history monitoring of the last 7 days for all HDSL spans Errored Seconds (ES), Severely Errored Seconds (SES) and Unavailable Seconds (UAS).')
hdslSpan24hPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpan24hSlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpan24hSpanId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpan24hHistoryId"))
if mibBuilder.loadTexts: hdslSpan24hPerformanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan24hPerformanceEntry.setDescription('Entries of the HDSL span 24-hour performance table ')
hdslSpan24hSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpan24hSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan24hSlotId.setDescription('Identifies the HDSL line occupied in the chassis. The slots are numbered 1 through 16 from left to right.')
hdslSpan24hSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpan24hSpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan24hSpanId.setDescription('Identifies the span of the HDSL line we are monitoring. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - span between LTU and REG is identified as 1. span between REG and NTU is identified as 2. 2 REGs - span between LTU and REG #1 is identified as 1. span between REG #1 and REG #2 is identified as 2. span between REG #2 and NTU is identified as 3. ')
hdslSpan24hHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpan24hHistoryId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpan24hHistoryId.setDescription('Identify the history ID within the 7 24-hour performance history. ')
hdsl24hESLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hESLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hESLoopANet.setDescription("HDSL 24-hour ES count on Loop A's Network side of the span.")
hdsl24hESLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hESLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hESLoopBNet.setDescription("HDSL 24-hour ES count on Loop B's Network side of the span.")
hdsl24hUASLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hUASLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hUASLoopANet.setDescription("HDSL 24-hour UAS count on Loop A's Network side of the span.")
hdsl24hUASLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hUASLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hUASLoopBNet.setDescription("HDSL 24-hour UAS count on Loop B's Network side of the span.")
hdsl24hSESLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hSESLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hSESLoopANet.setDescription("HDSL 24-hour SES count on Loop A's Network side of the span.")
hdsl24hSESLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hSESLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hSESLoopBNet.setDescription("HDSL 24-hour SES count on Loop B's Network side of the span.")
hdsl24hESLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hESLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hESLoopACust.setDescription("HDSL 24-hour ES count on Loop A's Customer side of the span.")
hdsl24hESLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hESLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hESLoopBCust.setDescription("HDSL 24-hour ES count on Loop B's Customer side of the span.")
hdsl24hUASLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hUASLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hUASLoopACust.setDescription("HDSL 24-hour UAS count on Loop A's Customer side of the span.")
hdsl24hUASLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hUASLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hUASLoopBCust.setDescription("HDSL 24-hour UAS count on Loop B's Customer side of the span.")
hdsl24hSESLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hSESLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hSESLoopACust.setDescription("HDSL 24-hour SES count on Loop A's Customer side of the span.")
hdsl24hSESLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdsl24hSESLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdsl24hSESLoopBCust.setDescription("HDSL 24-hour SES count on Loop B's Customer side of the span.")
hdslSpanCurr24hPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 3), )
if mibBuilder.loadTexts: hdslSpanCurr24hPerformanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanCurr24hPerformanceTable.setDescription('This table provides the current 24-hour performance history monitoring for all HDSL spans Errored Seconds (ES), Severely Errored Seconds (SES) and Unavailable Seconds (UAS).')
hdslSpanCurr24hPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanCurr24hSlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanCurr24hSpanId"))
if mibBuilder.loadTexts: hdslSpanCurr24hPerformanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanCurr24hPerformanceEntry.setDescription('Entries of the HDSL span Current 24-hour PM counts table ')
hdslSpanCurr24hSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanCurr24hSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanCurr24hSlotId.setDescription('Identifies the HDSL line occupied in the chassis. The slots are numbered 1 through 16 from left to right.')
hdslSpanCurr24hSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanCurr24hSpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanCurr24hSpanId.setDescription('Identifies the span of the HDSL line we are monitoring. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - span between LTU and REG is identified as 1. span between REG and NTU is identified as 2. 2 REGs - span between LTU and REG #1 is identified as 1. span between REG #1 and REG #2 is identified as 2. span between REG #2 and NTU is identified as 3. ')
hdslCurr24hESLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hESLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hESLoopANet.setDescription("HDSL Current 24-hour ES count on Loop A's Network side of the span.")
hdslCurr24hESLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hESLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hESLoopBNet.setDescription("HDSL 24-hour ES count on Loop B's Network side of the span.")
hdslCurr24hUASLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hUASLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hUASLoopANet.setDescription("HDSL 24-hour UAS count on Loop A's Network side of the span.")
hdslCurr24hUASLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hUASLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hUASLoopBNet.setDescription("HDSL 24-hour UAS count on Loop B's Network side of the span.")
hdslCurr24hSESLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hSESLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hSESLoopANet.setDescription("HDSL 24-hour SES count on Loop A's Network side of the span.")
hdslCurr24hSESLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hSESLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hSESLoopBNet.setDescription("HDSL 24-hour SES count on Loop B's Network side of the span.")
hdslCurr24hESLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hESLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hESLoopACust.setDescription("HDSL 24-hour ES count on Loop A's Customer side of the span.")
hdslCurr24hESLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hESLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hESLoopBCust.setDescription("HDSL 24-hour ES count on Loop B's Customer side of the span.")
hdslCurr24hUASLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hUASLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hUASLoopACust.setDescription("HDSL 24-hour UAS count on Loop A's Customer side of the span.")
hdslCurr24hUASLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hUASLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hUASLoopBCust.setDescription("HDSL 24-hour UAS count on Loop B's Customer side of the span.")
hdslCurr24hSESLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hSESLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hSESLoopACust.setDescription("HDSL 24-hour SES count on Loop A's Customer side of the span.")
hdslCurr24hSESLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslCurr24hSESLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslCurr24hSESLoopBCust.setDescription("HDSL 24-hour SES count on Loop B's Customer side of the span.")
hdslSpanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 4), )
if mibBuilder.loadTexts: hdslSpanStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanStatisticsTable.setDescription('This table lists statistics for margin, pulse attenuation and state of the loop for all spans of the HDSL loop. ')
hdslSpanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslStatisticsSlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslStatisticsSpanId"))
if mibBuilder.loadTexts: hdslSpanStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanStatisticsEntry.setDescription('Entries of the HDSL span statistics table ')
hdslStatisticsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslStatisticsSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslStatisticsSlotId.setDescription('Identifies the HDSL line occupied in the chassis. The slots are numbered 1 through 16 from left to right.')
hdslStatisticsSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslStatisticsSpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslStatisticsSpanId.setDescription('Identifies the span of the HDSL line we are monitoring. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - span between LTU and REG is identified as 1. span between REG and NTU is identified as 2. 2 REGs - span between LTU and REG #1 is identified as 1. span between REG #1 and REG #2 is identified as 2. span between REG #2 and NTU is identified as 3. ')
hdslLoopPairState = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 3), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLoopPairState.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLoopPairState.setDescription('Current state on the HDSL loop of span: 0 - loop pair is normal 1 - loop pair is exchanged. ')
hdslLoopATipRingReversal = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 4), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLoopATipRingReversal.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLoopATipRingReversal.setDescription('Current TIP/RING state on the HDSL loop A of span: 0 - TIP/RING on loop A is not reversed. 1 - TIP/RING on loop A is reversed. ')
hdslLoopBTipRingReversal = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 5), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLoopBTipRingReversal.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLoopBTipRingReversal.setDescription('Current TIP/RING state on the HDSL loop B of span: 0 - TIP/RING on loop B is not reversed. 1 - TIP/RING on loop B is reversed. ')
hdslLoopAUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 6), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLoopAUpState.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLoopAUpState.setDescription('Current loop state on loop A of the span: 0 - loop is up. 1 - loop is acquiring/converging. 2 - loop is signaling. ')
hdslLoopBUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 7), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLoopBUpState.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLoopBUpState.setDescription('Current loop state on loop B of the span: 0 - loop is up. 1 - loop is acquiring/converging. 2 - loop is signaling. ')
hdslMarginLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 8), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLoopANet.setDescription("Current Margin on Loop A's Network side of the span.")
hdslMarginHighLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 9), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginHighLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginHighLoopANet.setDescription("Highest Margin on Loop A's Network side of the span.")
hdslMarginLowLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 10), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLowLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLowLoopANet.setDescription("Lowest Margin on Loop A's Network side of the span.")
hdslMarginLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 11), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLoopBNet.setDescription("Current Margin on Loop B's Network side of the span.")
hdslMarginHighLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 12), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginHighLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginHighLoopBNet.setDescription("Highest Margin on Loop B's Network side of the span.")
hdslMarginLowLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 13), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLowLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLowLoopBNet.setDescription("Lowest Margin on Loop B's Network side of the span.")
hdslPulseAttenuationLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 14), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPulseAttenuationLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPulseAttenuationLoopANet.setDescription("Pulse Attenuation on Loop A's Network side of the span.")
hdslPulseAttenuationLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 15), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPulseAttenuationLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPulseAttenuationLoopBNet.setDescription("Pulse Attenuation on Loop B's Network side of the span.")
hdslMarginLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 16), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLoopACust.setDescription("Current Margin on Loop A's Customer side of the span.")
hdslMarginHighLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 17), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginHighLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginHighLoopACust.setDescription("Highest Margin on Loop A's Customer side of the span.")
hdslMarginLowLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 18), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLowLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLowLoopACust.setDescription("Lowest Margin on Loop A's Customer side of the span.")
hdslMarginLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 19), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLoopBCust.setDescription("Current Margin on Loop B's Customer side of the span.")
hdslMarginHighLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 20), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginHighLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginHighLoopBCust.setDescription("Highest Margin on Loop B's Customer side of the span.")
hdslMarginLowLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 21), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginLowLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginLowLoopBCust.setDescription("Lowest Margin on Loop B's Customer side of the span.")
hdslPulseAttenuationLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 22), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPulseAttenuationLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPulseAttenuationLoopACust.setDescription("Pulse Attenuation on Loop A's Customer side of the span.")
hdslPulseAttenuationLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 4, 1, 23), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPulseAttenuationLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPulseAttenuationLoopBCust.setDescription("Pulse Attenuation on Loop B's Customer side of the span.")
hdslSpanAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 5), )
if mibBuilder.loadTexts: hdslSpanAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmTable.setDescription('This table provides the HDSL alarms indication on both loops of the HDSL spans. ')
hdslSpanAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanAlarmSlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanAlarmSpanId"))
if mibBuilder.loadTexts: hdslSpanAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmEntry.setDescription('Entries of the HDSL span alarm table ')
hdslSpanAlarmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanAlarmSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmSlotId.setDescription('Identifies the HDSL line occupied in the chassis. The slots are numbered 1 through 16 from left to right.')
hdslSpanAlarmSpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanAlarmSpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmSpanId.setDescription('Identifies the span of the HDSL line we are monitoring. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - span between LTU and REG is identified as 1. span between REG and NTU is identified as 2. 2 REGs - span between LTU and REG #1 is identified as 1. span between REG #1 and REG #2 is identified as 2. span between REG #2 and NTU is identified as 3. ')
hdslMarginAlarmLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 3), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmLoopANet.setDescription("Margin Threshold Exceeded on loop A's Network side of the span.")
hdslMarginAlarmLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 4), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmLoopBNet.setDescription("Margin Threshold Exceeded on loop B's Network side of the span.")
hdslESAlarmLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 5), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmLoopANet.setDescription("Errored Seconds threshold exceeded on loop A's Network side of the span. ")
hdslESAlarmLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 6), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmLoopBNet.setDescription("Errored Seconds threshold exceeded on loop B's Network side of the span.")
hdslUASAlarmLoopANet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 7), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmLoopANet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmLoopANet.setDescription("Unavailable Seconds threshold exceeded on loop A's Network side of the span. ")
hdslUASAlarmLoopBNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 8), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmLoopBNet.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmLoopBNet.setDescription("Unavailable Seconds threshold exceeded on loop B's Network side of the span. ")
hdslMarginAlarmLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 9), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmLoopACust.setDescription("Margin Threshold Exceeded on loop A's Customer side of the span. ")
hdslMarginAlarmLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 10), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmLoopBCust.setDescription("Margin Threshold Exceeded on loop B's Customer side of the span. ")
hdslESAlarmLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 11), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmLoopACust.setDescription("Errored Seconds Exceeded on loop A's Customer side of the span.")
hdslESAlarmLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 12), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmLoopBCust.setDescription("Errored Seconds Exceeded on loop B's Customer side of the span.")
hdslUASAlarmLoopACust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 13), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmLoopACust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmLoopACust.setDescription("Unavailable Seconds threshold exceeded on loop A's customer side of the span. ")
hdslUASAlarmLoopBCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 14), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmLoopBCust.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmLoopBCust.setDescription("Unavailable Seconds threshold exceeded on loop B's customer side of the span. ")
hdslLOSWAlarmLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 15), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmLoopA.setDescription("Loss of Sync Word (LOSW) occurred on loop A's Network side of the HDSL loop. ")
hdslLOSWAlarmLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 16), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmLoopB.setDescription("Loss of Sync Word (LOSW) occurred on loop B's Network side of the HDSL loop. ")
hdslPFOAlarmLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 17), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmLoopA.setDescription("Power Feed Open (PFO) on loop A's Network side of the HDSL loop. ")
hdslPFOAlarmLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 18), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmLoopB.setDescription("Power Feed Open (PFO) on loop B's Network side of the HDSL loop. ")
hdslPFSAlarmLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 19), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmLoopA.setDescription("Power Feed Short (PFS) on loop A's Network side of the HDSL loop. ")
hdslPFSAlarmLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 20), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmLoopB.setDescription("Power Feed Short (PFS) on loop B's Network side of the HDSL loop. ")
hdslBERAlarmLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 21), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmLoopA.setDescription("Bit Error Rate (BER) on loop A's Network side of the HDSL loop. ")
hdslBERAlarmLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 5, 1, 22), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmLoopB.setDescription("Bit Error Rate (BER) on loop B's Network side of the HDSL loop. ")
hdslSpanAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 6), )
if mibBuilder.loadTexts: hdslSpanAlarmHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmHistoryTable.setDescription('This table provides the HDSL alarms history on both loops of the HDSL spans.')
hdslSpanAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanAlarmHistorySlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanAlarmHistorySpanId"))
if mibBuilder.loadTexts: hdslSpanAlarmHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmHistoryEntry.setDescription('Entries of the HDSL span Alarm History table ')
hdslSpanAlarmHistorySlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanAlarmHistorySlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmHistorySlotId.setDescription('Identifies the HDSL line occupied in the chassis. The slots are numbered 1 through 16 from left to right.')
hdslSpanAlarmHistorySpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanAlarmHistorySpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmHistorySpanId.setDescription('Identifies the span of the HDSL line we are monitoring. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - Span between LTU and REG is identified as 1. Span between REG and NTU is identified as 2. 2 REGs - Span between LTU and REG #1 is identified as 1. Span between REG #1 and REG #2 is identified as 2. Span between REG #2 and NTU is identified as 3. ')
hdslMarginAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 3), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmFirstLoopA.setDescription('Date and time Margin threshold exceeded alarm first occurred on Loop A of a span')
hdslMarginAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 4), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmLastLoopA.setDescription('Date and time Margin threshold exceeded alarm last occurred on Loop A of a span')
hdslMarginAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmCountLoopA.setDescription('The number of times the Margin threshold exceeded alarm has occurred on Loop A of a span.')
hdslMarginAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 6), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmFirstLoopB.setDescription('Date and time Margin threshold exceeded alarm first occurred on Loop B of a span')
hdslMarginAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 7), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmLastLoopB.setDescription('Date and time Margin threshold exceeded alarm last occurred on Loop B of a span')
hdslMarginAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslMarginAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslMarginAlarmCountLoopB.setDescription('The number of times the Margin threshold exceeded alarm has occurred on Loop B of a span.')
hdslESAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 9), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmFirstLoopA.setDescription('Date and time Errored Seconds threshold exceeded alarm first occurred on Loop A of a span')
hdslESAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 10), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmLastLoopA.setDescription('Date and time Errored Seconds threshold exceeded alarm last occurred on Loop A of a span')
hdslESAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmCountLoopA.setDescription('The number of times the Errored Seconds threshold exceeded alarm has occurred on Loop A of a span.')
hdslESAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 12), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmFirstLoopB.setDescription('Date and time Errored Seconds threshold exceeded alarm first occurred on Loop B of a span')
hdslESAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 13), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmLastLoopB.setDescription('Date and time Errored Seconds threshold exceeded alarm last occurred on Loop B of a span')
hdslESAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslESAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslESAlarmCountLoopB.setDescription('The number of times the Errored Seconds threshold exceeded alarm has occurred on Loop B of a span.')
hdslUASAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 15), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmFirstLoopA.setDescription('Date and time Unavailable Seconds threshold exceeded alarm first occurred on Loop A of a span')
hdslUASAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 16), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmLastLoopA.setDescription('Date and time Unavailable Seconds threshold exceeded alarm last occurred on Loop A of a span')
hdslUASAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmCountLoopA.setDescription('The number of times the Unavailable Seconds threshold exceeded alarm has occurred on Loop A of a span.')
hdslUASAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 18), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmFirstLoopB.setDescription('Date and time Unavailable Seconds threshold exceeded alarm first occurred on Loop B of a span')
hdslUASAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 19), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmLastLoopB.setDescription('Date and time Unavailable Seconds threshold exceeded alarm last occurred on Loop B of a span')
hdslUASAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslUASAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslUASAlarmCountLoopB.setDescription('The number of times the Unavailable Seconds threshold exceeded alarm has occurred on Loop B of a span.')
hdslLOSWAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 21), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmFirstLoopA.setDescription('Date and time the Loss of Sync Word alarm first occurred on Loop A of a span')
hdslLOSWAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 22), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmLastLoopA.setDescription('Date and time the Loss of Sync Word alarm last occurred on Loop A of a span')
hdslLOSWAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmCountLoopA.setDescription('The number of times the Loss of Sync Word alarm has occurred on Loop A of a span.')
hdslLOSWAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 24), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmFirstLoopB.setDescription('Date and time the Loss of Sync Word alarm first occurred on Loop B of a span')
hdslLOSWAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 25), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmLastLoopB.setDescription('Date and time the Loss of Sync Word alarm last occurred on Loop B of a span')
hdslLOSWAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslLOSWAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslLOSWAlarmCountLoopB.setDescription('The number of times the Loss of Sync Word alarm has occurred on Loop B of a span.')
hdslPFOAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 27), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmFirstLoopA.setDescription('Date and time the Power Feed Open alarm first occurred on Loop A of a span')
hdslPFOAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 28), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmLastLoopA.setDescription('Date and time the Power Feed Open alarm last occurred on Loop A of a span')
hdslPFOAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmCountLoopA.setDescription('The number of times the Power Feed Open alarm has occurred on Loop A of a span.')
hdslPFOAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 30), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmFirstLoopB.setDescription('Date and time the Power Feed Open alarm first occurred on Loop B of a span')
hdslPFOAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 31), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmLastLoopB.setDescription('Date and time the Power Feed Open alarm last occurred on Loop B of a span')
hdslPFOAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFOAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFOAlarmCountLoopB.setDescription('The number of times the Power Feed Open alarm has occurred on Loop B of a span.')
hdslPFSAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 33), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmFirstLoopA.setDescription('Date and time the Power Feed Short alarm first occurred on Loop A of a span')
hdslPFSAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 34), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmLastLoopA.setDescription('Date and time the Power Feed Short alarm last occurred on Loop A of a span')
hdslPFSAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmCountLoopA.setDescription('The number of times the Power Feed Short alarm has occurred on Loop A of a span.')
hdslPFSAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 36), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmFirstLoopB.setDescription('Date and time the Power Feed Short alarm first occurred on Loop B of a span')
hdslPFSAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 37), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmLastLoopB.setDescription('Date and time the Power Feed Short alarm last occurred on Loop B of a span')
hdslPFSAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslPFSAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslPFSAlarmCountLoopB.setDescription('The number of times the Power Feed Short alarm has occurred on Loop B of a span.')
hdslBERAlarmFirstLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 39), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmFirstLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmFirstLoopA.setDescription('Date and time the BER threshold exceeded alarm first occurred on Loop A of a span')
hdslBERAlarmLastLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 40), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmLastLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmLastLoopA.setDescription('Date and time the BER threshold exceeded alarm last occurred on Loop A of a span')
hdslBERAlarmCountLoopA = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmCountLoopA.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmCountLoopA.setDescription('The number of times the BER threshold exceeded alarm has occurred on Loop A of a span.')
hdslBERAlarmFirstLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 42), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmFirstLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmFirstLoopB.setDescription('Date and time the BER threshold exceeded alarm first occurred on Loop B of a span')
hdslBERAlarmLastLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 43), PgTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmLastLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmLastLoopB.setDescription('Date and time the BER threshold exceeded alarm last occurred on Loop B of a span')
hdslBERAlarmCountLoopB = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslBERAlarmCountLoopB.setStatus('mandatory')
if mibBuilder.loadTexts: hdslBERAlarmCountLoopB.setDescription('The number of times the BER threshold exceeded alarm has occurred on Loop B of a span.')
hdslSpanAlarmSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 7, 7), )
if mibBuilder.loadTexts: hdslSpanAlarmSeverityTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmSeverityTable.setDescription('The HDSL span alarm severity table provides severity settings for HDSL alarms reporting and threshold settings for Errored Second(ES), Margin(MAR), Unavailable Seconds(UAS) and Bit Error Rate(BER).')
hdslSpanAlarmSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1), ).setIndexNames((0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanAlarmSeveritySlotId"), (0, "PAIRGAIN-ETSI-HDSL-MIB", "hdslSpanAlarmSeveritySpanId"))
if mibBuilder.loadTexts: hdslSpanAlarmSeverityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmSeverityEntry.setDescription('Entry in the hdslSpanAlarmSeverityTable')
hdslSpanAlarmSeveritySlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanAlarmSeveritySlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmSeveritySlotId.setDescription('The slot number of the HDSL loop whose alarm severity or threshold we are setting. The slots are numbered 1 through 16 from left to right.')
hdslSpanAlarmSeveritySpanId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslSpanAlarmSeveritySpanId.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanAlarmSeveritySpanId.setDescription('The span number of the HDSL loop whose alarm severity or threshold we are setting. Depending on the number of regenerator(s) (REGs) present in an HDSL loop, a span will be numbered as follows: 0 REG - only 1 span. 1 REG - span between LTU and REG is identified as 1. span between REG and NTU is identified as 2. 2 REGs - span between LTU and REG #1 is identified as 1. span between REG #1 and REG #2 is identified as 2. span between REG #2 and NTU is identified as 3. ')
hdslSpanLOSWAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 3), PgAlarmSeverityProtectionSwitchMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanLOSWAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanLOSWAlarmSetting.setDescription('Sets the severity for Loss of Sync Word alarm.')
hdslSpanPFOAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 4), PgAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanPFOAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanPFOAlarmSetting.setDescription('Sets the severity for Power Feed Open alarm.')
hdslSpanPFSAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 5), PgAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanPFSAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanPFSAlarmSetting.setDescription('Sets the severity for Power Feed Short alarm.')
hdslSpanMarginThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 6), Byte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanMarginThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanMarginThreshold.setDescription('Sets the HDSL Margin threshold value.')
hdslSpanMarginAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 7), PgAlarmSeverityProtectionSwitchMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanMarginAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanMarginAlarmSetting.setDescription('Sets the severity for Margin threshold exceeded alarm.')
hdslSpanESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 8), Byte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanESThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanESThreshold.setDescription('Sets the HDSL Errored Seconds threshold value.')
hdslSpanESAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 9), PgAlarmSeverityProtectionSwitchMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanESAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanESAlarmSetting.setDescription('Sets the severity for Errored Seconds threshold exceeded alarm.')
hdslSpanUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 10), Byte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanUASThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanUASThreshold.setDescription('Sets the HDSL Unavailable Seconds threshold value.')
hdslSpanUASAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 11), PgAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanUASAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanUASAlarmSetting.setDescription('Sets the severity for UAS threshold exceeded alarm.')
hdslSpanBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 12), PgBERThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanBERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanBERThreshold.setDescription('Sets the HDSL BER threshold value.')
hdslSpanBERAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 7, 7, 1, 13), PgAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslSpanBERAlarmSetting.setStatus('mandatory')
if mibBuilder.loadTexts: hdslSpanBERAlarmSetting.setDescription('Sets the severity for HDSL BER threshold exceeded alarm.')
mibBuilder.exportSymbols("PAIRGAIN-ETSI-HDSL-MIB", hdsl15mUASLoopBCust=hdsl15mUASLoopBCust, hdslCurr24hSESLoopBNet=hdslCurr24hSESLoopBNet, hdslESAlarmLoopBCust=hdslESAlarmLoopBCust, hdslPFOAlarmLoopA=hdslPFOAlarmLoopA, PgAlarmSeverityProtectionSwitchMode=PgAlarmSeverityProtectionSwitchMode, hdslSpanBERAlarmSetting=hdslSpanBERAlarmSetting, hdslSpanAlarmHistoryEntry=hdslSpanAlarmHistoryEntry, hdslSpan15mSpanId=hdslSpan15mSpanId, hdslPFSAlarmFirstLoopA=hdslPFSAlarmFirstLoopA, hdsl24hESLoopBCust=hdsl24hESLoopBCust, hdslPFOAlarmLoopB=hdslPFOAlarmLoopB, hdslPFSAlarmLoopA=hdslPFSAlarmLoopA, hdslPFOAlarmCountLoopB=hdslPFOAlarmCountLoopB, hdsl24hSESLoopACust=hdsl24hSESLoopACust, hdslSpanMarginThreshold=hdslSpanMarginThreshold, hdslMarginLowLoopBNet=hdslMarginLowLoopBNet, hdslPulseAttenuationLoopANet=hdslPulseAttenuationLoopANet, hdslSpan15mHistoryId=hdslSpan15mHistoryId, hdslCurr24hUASLoopANet=hdslCurr24hUASLoopANet, hdslSpanAlarmSeveritySpanId=hdslSpanAlarmSeveritySpanId, hdslMarginLoopACust=hdslMarginLoopACust, hdsl24hSESLoopANet=hdsl24hSESLoopANet, hdslStatisticsSpanId=hdslStatisticsSpanId, hdslSpanBERThreshold=hdslSpanBERThreshold, hdslSpan15mPerformanceEntry=hdslSpan15mPerformanceEntry, hdsl15mSESLoopACust=hdsl15mSESLoopACust, hdslBERAlarmLastLoopA=hdslBERAlarmLastLoopA, hdslBERAlarmCountLoopB=hdslBERAlarmCountLoopB, hdslMarginHighLoopBNet=hdslMarginHighLoopBNet, hdslMarginHighLoopBCust=hdslMarginHighLoopBCust, hdslCurr24hESLoopBNet=hdslCurr24hESLoopBNet, hdslUASAlarmLoopANet=hdslUASAlarmLoopANet, Byte=Byte, hdsl24hSESLoopBNet=hdsl24hSESLoopBNet, hdslCurr24hSESLoopBCust=hdslCurr24hSESLoopBCust, hdslBERAlarmFirstLoopB=hdslBERAlarmFirstLoopB, hdsl24hSESLoopBCust=hdsl24hSESLoopBCust, hdslESAlarmLastLoopA=hdslESAlarmLastLoopA, hdsl15mUASLoopANet=hdsl15mUASLoopANet, hdsl15mESLoopBNet=hdsl15mESLoopBNet, hdslLoopBUpState=hdslLoopBUpState, hdslPFOAlarmFirstLoopB=hdslPFOAlarmFirstLoopB, hdslMarginHighLoopACust=hdslMarginHighLoopACust, hdsl24hESLoopACust=hdsl24hESLoopACust, PgTimeStamp=PgTimeStamp, hdslMarginAlarmCountLoopB=hdslMarginAlarmCountLoopB, hdslLOSWAlarmFirstLoopA=hdslLOSWAlarmFirstLoopA, hdslSpanCurr24hSlotId=hdslSpanCurr24hSlotId, hdslMarginHighLoopANet=hdslMarginHighLoopANet, hdslUASAlarmCountLoopB=hdslUASAlarmCountLoopB, hdslPFSAlarmLoopB=hdslPFSAlarmLoopB, hdslSpanAlarmSlotId=hdslSpanAlarmSlotId, hdslUASAlarmLoopBCust=hdslUASAlarmLoopBCust, hdslMarginAlarmLastLoopA=hdslMarginAlarmLastLoopA, hdslSpanCurr24hPerformanceEntry=hdslSpanCurr24hPerformanceEntry, hdslPFSAlarmCountLoopA=hdslPFSAlarmCountLoopA, hdslCurr24hSESLoopANet=hdslCurr24hSESLoopANet, hdslLOSWAlarmCountLoopB=hdslLOSWAlarmCountLoopB, hdslSpanStatisticsTable=hdslSpanStatisticsTable, hdslCurr24hUASLoopACust=hdslCurr24hUASLoopACust, hdslBERAlarmLastLoopB=hdslBERAlarmLastLoopB, hdslUASAlarmLoopACust=hdslUASAlarmLoopACust, hdslLoopPairState=hdslLoopPairState, hdslSpan24hSpanId=hdslSpan24hSpanId, hdsl15mESLoopACust=hdsl15mESLoopACust, hdslCurr24hESLoopANet=hdslCurr24hESLoopANet, hdslMarginLowLoopACust=hdslMarginLowLoopACust, hdslSpan15mSlotId=hdslSpan15mSlotId, hdslCurr24hESLoopBCust=hdslCurr24hESLoopBCust, hdslLoopBTipRingReversal=hdslLoopBTipRingReversal, hdslSpanESAlarmSetting=hdslSpanESAlarmSetting, hdslLOSWAlarmLoopA=hdslLOSWAlarmLoopA, hdslUASAlarmFirstLoopB=hdslUASAlarmFirstLoopB, hdsl15mSESLoopBCust=hdsl15mSESLoopBCust, hdslSpanPFOAlarmSetting=hdslSpanPFOAlarmSetting, hdslLoopAUpState=hdslLoopAUpState, hdslMarginAlarmLoopBCust=hdslMarginAlarmLoopBCust, hdslSpanAlarmHistorySpanId=hdslSpanAlarmHistorySpanId, hdslCurr24hUASLoopBCust=hdslCurr24hUASLoopBCust, hdslPulseAttenuationLoopBCust=hdslPulseAttenuationLoopBCust, hdslESAlarmCountLoopB=hdslESAlarmCountLoopB, hdslUASAlarmFirstLoopA=hdslUASAlarmFirstLoopA, PgAlarmSeverityMode=PgAlarmSeverityMode, hdsl24hUASLoopANet=hdsl24hUASLoopANet, hdslMarginAlarmFirstLoopB=hdslMarginAlarmFirstLoopB, hdslPFSAlarmLastLoopA=hdslPFSAlarmLastLoopA, hdslPulseAttenuationLoopACust=hdslPulseAttenuationLoopACust, hdslMarginLoopBNet=hdslMarginLoopBNet, hdslSpanAlarmHistorySlotId=hdslSpanAlarmHistorySlotId, hdslMarginAlarmFirstLoopA=hdslMarginAlarmFirstLoopA, hdslSpanAlarmEntry=hdslSpanAlarmEntry, hdslSpanMarginAlarmSetting=hdslSpanMarginAlarmSetting, hdslESAlarmLoopANet=hdslESAlarmLoopANet, hdslSpanESThreshold=hdslSpanESThreshold, hdslSpanAlarmSeveritySlotId=hdslSpanAlarmSeveritySlotId, hdslESAlarmLastLoopB=hdslESAlarmLastLoopB, hdslBERAlarmLoopB=hdslBERAlarmLoopB, hdsl15mSESLoopBNet=hdsl15mSESLoopBNet, hdslPFOAlarmLastLoopB=hdslPFOAlarmLastLoopB, hdslMarginAlarmLoopBNet=hdslMarginAlarmLoopBNet, hdslUASAlarmCountLoopA=hdslUASAlarmCountLoopA, hdsl24hUASLoopACust=hdsl24hUASLoopACust, hdslCurr24hSESLoopACust=hdslCurr24hSESLoopACust, hdslUASAlarmLastLoopA=hdslUASAlarmLastLoopA, hdslMarginLoopANet=hdslMarginLoopANet, hdslPFSAlarmLastLoopB=hdslPFSAlarmLastLoopB, hdslPFSAlarmCountLoopB=hdslPFSAlarmCountLoopB, hdslSpanUASAlarmSetting=hdslSpanUASAlarmSetting, hdslSpanCurr24hPerformanceTable=hdslSpanCurr24hPerformanceTable, hdslPFOAlarmCountLoopA=hdslPFOAlarmCountLoopA, hdslSpanCurr24hSpanId=hdslSpanCurr24hSpanId, hdslBERAlarmLoopA=hdslBERAlarmLoopA, hdslSpanAlarmHistoryTable=hdslSpanAlarmHistoryTable, hdslMarginAlarmCountLoopA=hdslMarginAlarmCountLoopA, hdslUASAlarmLastLoopB=hdslUASAlarmLastLoopB, hdslSpan15mPerformanceTable=hdslSpan15mPerformanceTable, hdsl15mUASLoopACust=hdsl15mUASLoopACust, hdslMarginLowLoopANet=hdslMarginLowLoopANet, hdslESAlarmLoopBNet=hdslESAlarmLoopBNet, hdslSpan24hPerformanceTable=hdslSpan24hPerformanceTable, hdslSpanLOSWAlarmSetting=hdslSpanLOSWAlarmSetting, hdslBERAlarmFirstLoopA=hdslBERAlarmFirstLoopA, hdslPFSAlarmFirstLoopB=hdslPFSAlarmFirstLoopB, hdslLOSWAlarmLoopB=hdslLOSWAlarmLoopB, hdslBERAlarmCountLoopA=hdslBERAlarmCountLoopA, PgBERThreshold=PgBERThreshold, hdslPFOAlarmFirstLoopA=hdslPFOAlarmFirstLoopA, hdslPulseAttenuationLoopBNet=hdslPulseAttenuationLoopBNet, hdsl15mESLoopANet=hdsl15mESLoopANet, hdslESAlarmLoopACust=hdslESAlarmLoopACust, hdslESAlarmFirstLoopB=hdslESAlarmFirstLoopB, hdsl24hUASLoopBCust=hdsl24hUASLoopBCust, hdslSpanAlarmSpanId=hdslSpanAlarmSpanId, hdslStatisticsSlotId=hdslStatisticsSlotId, hdslLoopATipRingReversal=hdslLoopATipRingReversal, hdslMarginAlarmLoopANet=hdslMarginAlarmLoopANet, hdslMarginLowLoopBCust=hdslMarginLowLoopBCust, hdslSpanAlarmSeverityEntry=hdslSpanAlarmSeverityEntry, hdslSpan24hHistoryId=hdslSpan24hHistoryId, hdslLOSWAlarmLastLoopA=hdslLOSWAlarmLastLoopA, hdslPFOAlarmLastLoopA=hdslPFOAlarmLastLoopA, hdslESAlarmCountLoopA=hdslESAlarmCountLoopA, hdsl15mUASLoopBNet=hdsl15mUASLoopBNet, hdsl24hESLoopANet=hdsl24hESLoopANet, hdsl15mESLoopBCust=hdsl15mESLoopBCust, hdsl24hESLoopBNet=hdsl24hESLoopBNet, hdslMarginAlarmLastLoopB=hdslMarginAlarmLastLoopB, hdslSpan24hSlotId=hdslSpan24hSlotId, hdslLOSWAlarmFirstLoopB=hdslLOSWAlarmFirstLoopB, hdslCurr24hESLoopACust=hdslCurr24hESLoopACust, hdsl24hUASLoopBNet=hdsl24hUASLoopBNet, hdslCurr24hUASLoopBNet=hdslCurr24hUASLoopBNet, hdslSpan24hPerformanceEntry=hdslSpan24hPerformanceEntry, hdslSpanAlarmSeverityTable=hdslSpanAlarmSeverityTable, hdslLOSWAlarmCountLoopA=hdslLOSWAlarmCountLoopA, hdslSpanStatisticsEntry=hdslSpanStatisticsEntry, hdslSpanPFSAlarmSetting=hdslSpanPFSAlarmSetting, hdslMarginAlarmLoopACust=hdslMarginAlarmLoopACust, hdslSpanAlarmTable=hdslSpanAlarmTable, hdslLOSWAlarmLastLoopB=hdslLOSWAlarmLastLoopB, Short=Short, hdslSpanUASThreshold=hdslSpanUASThreshold, hdsl15mSESLoopANet=hdsl15mSESLoopANet, hdslMarginLoopBCust=hdslMarginLoopBCust, hdslESAlarmFirstLoopA=hdslESAlarmFirstLoopA, hdslUASAlarmLoopBNet=hdslUASAlarmLoopBNet)
