#
# PySNMP MIB module TRANGOP5830S-RU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRANGOP5830S-RU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, Counter64, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, TimeTicks, enterprises, Unsigned32, Counter32, Integer32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Counter64", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "TimeTicks", "enterprises", "Unsigned32", "Counter32", "Integer32", "iso", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

trango = MibIdentifier((1, 3, 6, 1, 4, 1, 5454))
tbw = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1))
p5830sru = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24))
rusys = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1))
rurf = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2))
mibinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 5))
ruversion = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 1))
ruswitches = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 8))
rutraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 9))
ruipconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 13))
rurftable = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4))
ruism = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 5))
ruunii = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 6))
ruversionHW = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruversionHW.setStatus('mandatory')
if mibBuilder.loadTexts: ruversionHW.setDescription('Hardware version.')
ruversionFW = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruversionFW.setStatus('mandatory')
if mibBuilder.loadTexts: ruversionFW.setDescription('Main firmware version. Format: <code version>H<hardware version>D<date>.')
ruversionFPGA = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruversionFPGA.setStatus('mandatory')
if mibBuilder.loadTexts: ruversionFPGA.setDescription('FPGA firmware version.')
ruversionFWChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruversionFWChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: ruversionFWChecksum.setDescription('Remote unit firmware checksum.')
ruversionFPGAChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruversionFPGAChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: ruversionFPGAChecksum.setDescription('Remote unit FPGA checksum.')
rusysDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rusysDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: rusysDeviceId.setDescription('Remote unit device Id. Each remote unit in a cluster shall have unique ID.')
rusysDefOpMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 0))).clone(namedValues=NamedValues(("on", 16), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rusysDefOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: rusysDefOpMode.setDescription('The operation mode (on or off) the remote unit is on after reboot/power cycle.')
rusysCurOpMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 0))).clone(namedValues=NamedValues(("on", 16), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rusysCurOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: rusysCurOpMode.setDescription("Remote unit's current operation mode.")
rusysActivateOpmode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rusysActivateOpmode.setStatus('mandatory')
if mibBuilder.loadTexts: rusysActivateOpmode.setDescription('Engage remote unit to on operation mode.')
rusysReadCommStr = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rusysReadCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: rusysReadCommStr.setDescription('SNMP agent read community string. It is used for authenticcation purpose.')
rusysWriteCommStr = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rusysWriteCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: rusysWriteCommStr.setDescription('SNMP agent write community string. It is used for authentication purpose.')
ruswitchesBlockBroadcastMulticast = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("passed", 0), ("blocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruswitchesBlockBroadcastMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: ruswitchesBlockBroadcastMulticast.setDescription('This switch enables or disables the blocking of Ethernet control packet except ICMP and ARP to reduce the amount of uneccessary overhead introduced to the wireless link.')
ruswitchesHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruswitchesHTTPD.setStatus('mandatory')
if mibBuilder.loadTexts: ruswitchesHTTPD.setDescription('When it is turned on, then the remote unit is accessible for configuring via web browser (e.g. IE or Nescape).')
ruswitchesAutoScanMasterSignal = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruswitchesAutoScanMasterSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ruswitchesAutoScanMasterSignal.setDescription('This switch enables or disables the auto scan master unit signal operation on the remote unit only.')
rutrafficEthInOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rutrafficEthInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: rutrafficEthInOctets.setDescription("Number of octets of remote unit's payload received on Ethernet port.")
rutrafficEthOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rutrafficEthOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: rutrafficEthOutOctets.setDescription("Number of octets of remote unit's payload transmitted on Ethernet port.")
rutrafficRfInOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rutrafficRfInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: rutrafficRfInOctets.setDescription("Number of octets of remote unit's payload received from RF port.")
rutrafficRfOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rutrafficRfOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: rutrafficRfOutOctets.setDescription("Number of octets of remote unit's payload transmitted to RF port.")
rusysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rusysTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: rusysTemperature.setDescription('Current remote unit temperature value (in Celsius).')
rusysUpdateFlashAndActivate = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rusysUpdateFlashAndActivate.setStatus('mandatory')
if mibBuilder.loadTexts: rusysUpdateFlashAndActivate.setDescription('Save system setting values to Flash and activate the settings.')
rusysReboot = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rusysReboot.setStatus('mandatory')
if mibBuilder.loadTexts: rusysReboot.setDescription('Reboot the remote unit.')
ruipconfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 13, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruipconfigIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ruipconfigIpAddress.setDescription('New IP address. It will be saved to non-volatile memory and activated in 5 secs.')
ruipconfigSubnet = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruipconfigSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ruipconfigSubnet.setDescription('New Subnet mask. It will be saved to non-volatile memory and activated in 5 secs.')
ruipconfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 1, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruipconfigDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ruipconfigDefaultGateway.setDescription('New Default gateway. It will be saved to non-volatile memory and activated in 5 secs.')
rurfRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rurfRSSI.setStatus('mandatory')
if mibBuilder.loadTexts: rurfRSSI.setDescription('Remote unit RSSI (in dBm).')
rurftableChannel1 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel1.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel1.setDescription('RF channel 1 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel2 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel2.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel2.setDescription('RF channel 2 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel3 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel3.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel3.setDescription('RF channel 3 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel4 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel4.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel4.setDescription('RF channel 4 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel5 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel5.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel5.setDescription('RF channel 5 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel6 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel6.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel6.setDescription('RF channel 6 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel7 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel7.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel7.setDescription('RF channel 7 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel8 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel8.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel8.setDescription('RF channel 8 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel9 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel9.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel9.setDescription('RF channel 9 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel10 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel10.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel10.setDescription('RF channel 10 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel11 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel11.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel11.setDescription('RF channel 11 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel12 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel12.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel12.setDescription('RF channel 12 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel13 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel13.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel13.setDescription('RF channel 13 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel14 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel14.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel14.setDescription('RF channel 14 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel15 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel15.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel15.setDescription('RF channel 15 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel16 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel16.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel16.setDescription('RF channel 16 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel17 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel17.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel17.setDescription('RF channel 17 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel18 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel18.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel18.setDescription('RF channel 18 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel19 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel19.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel19.setDescription('RF channel 19 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel20 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel20.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel20.setDescription('RF channel 20 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel21 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel21.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel21.setDescription('RF channel 21 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel22 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel22.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel22.setDescription('RF channel 22 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel23 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel23.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel23.setDescription('RF channel 23 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel24 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel24.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel24.setDescription('RF channel 24 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel25 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel25.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel25.setDescription('RF channel 25 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel26 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel26.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel26.setDescription('RF channel 26 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel27 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel27.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel27.setDescription('RF channel 27 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel28 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel28.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel28.setDescription('RF channel 28 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel29 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel29.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel29.setDescription('RF channel 29 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
rurftableChannel30 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rurftableChannel30.setStatus('mandatory')
if mibBuilder.loadTexts: rurftableChannel30.setDescription('RF channel 30 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the remote unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
ruismTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruismTxPowerMax.setStatus('mandatory')
if mibBuilder.loadTexts: ruismTxPowerMax.setDescription('The maximum ISM Tx power value can be set (in dBm).')
ruismTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruismTxPowerMin.setStatus('mandatory')
if mibBuilder.loadTexts: ruismTxPowerMin.setDescription('The minimum ISM Tx power value can be set (in dBm).')
ruismTxPower = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruismTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: ruismTxPower.setDescription('ISM RF tx power (in dBm). It specifies the power output of the radio, excluding the antenna gain. Check parameters remoteismTxPowerMax and remoteismTxPowerMin for power setting range.')
ruismRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-90, -90), ValueRangeConstraint(-85, -85), ValueRangeConstraint(-80, -80), ValueRangeConstraint(-75, -75), ValueRangeConstraint(-70, -70), ValueRangeConstraint(-65, -65), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruismRxThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ruismRxThreshold.setDescription("ISM RF rx threshold (in dBm). It specifies the receiver sensitivity of the remote. By default, the radio's sensitivity is -82dBm. The higher the threshold is, the less sensitive the radio will be. In M5800S, the value -90 represents the rfrxthreshold is disabled.")
ruuniiTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruuniiTxPowerMax.setStatus('mandatory')
if mibBuilder.loadTexts: ruuniiTxPowerMax.setDescription('This object is only applicable to M5830S/P5830S radio. The maximum UNII Tx power value can be set (in dBm).')
ruuniiTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruuniiTxPowerMin.setStatus('mandatory')
if mibBuilder.loadTexts: ruuniiTxPowerMin.setDescription('This object is only applicable to M5830S/P5830S radio. The minimum UNII Tx power value can be set (in dBm).')
ruuniiTxPower = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruuniiTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: ruuniiTxPower.setDescription('This object is only applicable to M5830S/P5830S radio. UNII RF tx power (in dBm). It specifies the power output of the radio, excluding the antenna gain. Check parameters apuniiTxPowerMax and apuniiTxPowerMin for power setting range.')
ruuniiRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-90, -90), ValueRangeConstraint(-85, -85), ValueRangeConstraint(-80, -80), ValueRangeConstraint(-75, -75), ValueRangeConstraint(-70, -70), ValueRangeConstraint(-65, -65), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruuniiRxThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ruuniiRxThreshold.setDescription('This object is only applicable to M5830S/P5830S radio. UNII RF rx threshold (in dBm). It specifies the receiver sensitivity of the master unit.')
mibinfoVersion = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 24, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibinfoVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibinfoVersion.setDescription('Trango remote unit MIB Version.')
mibBuilder.exportSymbols("TRANGOP5830S-RU-MIB", rurftableChannel30=rurftableChannel30, ruismTxPowerMax=ruismTxPowerMax, rutraffic=rutraffic, rurftableChannel6=rurftableChannel6, rurftableChannel14=rurftableChannel14, ruipconfigSubnet=ruipconfigSubnet, mibinfoVersion=mibinfoVersion, ruversion=ruversion, ruswitchesHTTPD=ruswitchesHTTPD, rusysReadCommStr=rusysReadCommStr, rurfRSSI=rurfRSSI, ruipconfig=ruipconfig, ruismRxThreshold=ruismRxThreshold, ruswitchesBlockBroadcastMulticast=ruswitchesBlockBroadcastMulticast, rurftableChannel4=rurftableChannel4, ruuniiTxPowerMax=ruuniiTxPowerMax, rurftableChannel17=rurftableChannel17, ruuniiRxThreshold=ruuniiRxThreshold, rurftableChannel8=rurftableChannel8, ruswitchesAutoScanMasterSignal=ruswitchesAutoScanMasterSignal, rurftableChannel9=rurftableChannel9, rurftableChannel23=rurftableChannel23, rurftableChannel10=rurftableChannel10, rusysActivateOpmode=rusysActivateOpmode, rurftableChannel7=rurftableChannel7, rurf=rurf, rurftableChannel19=rurftableChannel19, ruism=ruism, ruversionFW=ruversionFW, ruismTxPowerMin=ruismTxPowerMin, ruunii=ruunii, rurftableChannel15=rurftableChannel15, trango=trango, ruuniiTxPowerMin=ruuniiTxPowerMin, DisplayString=DisplayString, rutrafficEthInOctets=rutrafficEthInOctets, rutrafficRfInOctets=rutrafficRfInOctets, rutrafficEthOutOctets=rutrafficEthOutOctets, rurftableChannel25=rurftableChannel25, mibinfo=mibinfo, ruipconfigIpAddress=ruipconfigIpAddress, rurftableChannel21=rurftableChannel21, ruismTxPower=ruismTxPower, rurftableChannel2=rurftableChannel2, rurftableChannel22=rurftableChannel22, rusysDefOpMode=rusysDefOpMode, tbw=tbw, ruversionFWChecksum=ruversionFWChecksum, rutrafficRfOutOctets=rutrafficRfOutOctets, ruswitches=ruswitches, rusysWriteCommStr=rusysWriteCommStr, rurftableChannel28=rurftableChannel28, rurftableChannel24=rurftableChannel24, rurftableChannel1=rurftableChannel1, rusysTemperature=rusysTemperature, p5830sru=p5830sru, rusysCurOpMode=rusysCurOpMode, rusysUpdateFlashAndActivate=rusysUpdateFlashAndActivate, rurftableChannel11=rurftableChannel11, ruipconfigDefaultGateway=ruipconfigDefaultGateway, rurftableChannel3=rurftableChannel3, rurftableChannel27=rurftableChannel27, rusys=rusys, rurftableChannel5=rurftableChannel5, ruversionHW=ruversionHW, rurftableChannel20=rurftableChannel20, ruversionFPGA=ruversionFPGA, rurftableChannel13=rurftableChannel13, rurftableChannel26=rurftableChannel26, rurftable=rurftable, rurftableChannel29=rurftableChannel29, rurftableChannel12=rurftableChannel12, ruuniiTxPower=ruuniiTxPower, rurftableChannel18=rurftableChannel18, rusysDeviceId=rusysDeviceId, ruversionFPGAChecksum=ruversionFPGAChecksum, rusysReboot=rusysReboot, rurftableChannel16=rurftableChannel16)
