#
# PySNMP MIB module REDSTONE-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsName, = mibBuilder.importSymbols("REDSTONE-TC", "RsName")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, ModuleIdentity, NotificationType, ObjectIdentity, MibIdentifier, Counter32, iso, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "ModuleIdentity", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter32", "iso", "Bits", "TimeTicks")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
rsAaaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 20))
rsAaaMIB.setRevisions(('1999-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsAaaMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: rsAaaMIB.setLastUpdated('9906010000Z')
if mibBuilder.loadTexts: rsAaaMIB.setOrganization('Redstone Communications Inc.')
if mibBuilder.loadTexts: rsAaaMIB.setContactInfo(' Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1-978-692-1999 Email: mib@redstonecom.com ')
if mibBuilder.loadTexts: rsAaaMIB.setDescription('The AAA MIB for the Redstone Communications Inc. enterprise.')
class RsAaaDomainName(DisplayString):
    description = 'The name of an internet domain.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 63)

rsAaaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1))
rsAaaAssignment = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1))
rsAaaAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 2))
rsAaaAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3))
rsAaaAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4))
rsAaaAssignGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 1))
rsAaaAssignBrasLicense = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAssignBrasLicense.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignBrasLicense.setDescription('The license string that determines the system-wide maximum number of remote user connections allowed. A zero-length string (no license) prohibits remote user connections.')
rsAaaAssignBrasLicensedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAaaAssignBrasLicensedUsers.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignBrasLicensedUsers.setDescription('The system-wide maximum number of remote user connections allowed by the currently configured license string.')
rsAaaAssignDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2))
rsAaaAssignDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1), )
if mibBuilder.loadTexts: rsAaaAssignDomainTable.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignDomainTable.setDescription("The entries in this table specify the assignment of a remote access user to a virtual router, based on the user's domain.")
rsAaaAssignDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1), ).setIndexNames((1, "REDSTONE-AAA-MIB", "rsAaaAssignDomainName"))
if mibBuilder.loadTexts: rsAaaAssignDomainEntry.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignDomainEntry.setDescription('A specification of the virtual router to which users on a specified domain should be assigned.')
rsAaaAssignDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 1), RsAaaDomainName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAaaAssignDomainName.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignDomainName.setDescription('The domain name uniquely identifying this entry.')
rsAaaAssignDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAaaAssignDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignDomainRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET.")
rsAaaAssignDomainRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 3), RsName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAaaAssignDomainRouterName.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignDomainRouterName.setDescription('The name of the virtual router to which remote access users within this domain are assigned.')
rsAaaAssignDomainLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAaaAssignDomainLoopback.setStatus('current')
if mibBuilder.loadTexts: rsAaaAssignDomainLoopback.setDescription("The number of the loopback interface, associated with the specified virtual router, whose IP address is used as the source address when transmitting IP packets on unnumbered remote access user links. For example, if the associated loopback interface for this domain/router was configured via the console as 'loopback 2', this object would contain the integer value 2. A value of -1 indicates the loopback interface is unspecified.")
rsAaaAuthGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 2, 1))
rsAaaAcctGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3, 1))
rsAaaAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 64800), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAcctInterval.setStatus('current')
if mibBuilder.loadTexts: rsAaaAcctInterval.setDescription('The interval that must elapse between generation of accounting reports, ranging from 10 minutes to 18 hours, or disabled if set to zero.')
rsAaaAcctDupServerRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3, 1, 2), RsName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAcctDupServerRouterName.setStatus('current')
if mibBuilder.loadTexts: rsAaaAcctDupServerRouterName.setDescription('The name of another router on this system to which accounting reports should be sent, in addition to or instead of sending accounting reports to the accounting service (if any) configured on the current router (i.e. the router context within which this object instance exists). A zero-length name disables this mechanism.')
rsAaaAddrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 1))
rsAaaAddrPoolDefault = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("local", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrPoolDefault.setStatus('current')
if mibBuilder.loadTexts: rsAaaAddrPoolDefault.setDescription("Identifies the default source of IP address allocation for remote access links: none No address source is specified. local Use the local address pool named 'default'.")
rsAaaAddrNameServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2))
rsAaaAddrDns = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 1))
rsAaaAddrWins = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 2))
rsAaaAddrDnsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrDnsPrimary.setStatus('current')
if mibBuilder.loadTexts: rsAaaAddrDnsPrimary.setDescription('The IP address of the primary DNS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
rsAaaAddrDnsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrDnsSecondary.setStatus('current')
if mibBuilder.loadTexts: rsAaaAddrDnsSecondary.setDescription('The IP address of the secondary DNS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
rsAaaAddrWinsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrWinsPrimary.setStatus('current')
if mibBuilder.loadTexts: rsAaaAddrWinsPrimary.setDescription('The IP address of the primary WINS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
rsAaaAddrWinsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrWinsSecondary.setStatus('current')
if mibBuilder.loadTexts: rsAaaAddrWinsSecondary.setDescription('The IP address of the secondary WINS server to be used by remote access clients. A value of 0.0.0.0 indicates no server is configured.')
rsAaaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4))
rsAaaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 1))
rsAaaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 2))
rsAaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 1, 1)).setObjects(("REDSTONE-AAA-MIB", "rsAaaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAaaCompliance = rsAaaCompliance.setStatus('current')
if mibBuilder.loadTexts: rsAaaCompliance.setDescription('The compliance statement for systems supporting DNS.')
rsAaaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 2, 1)).setObjects(("REDSTONE-AAA-MIB", "rsAaaAssignBrasLicense"), ("REDSTONE-AAA-MIB", "rsAaaAssignBrasLicensedUsers"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainName"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainRowStatus"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainRouterName"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainLoopback"), ("REDSTONE-AAA-MIB", "rsAaaAcctInterval"), ("REDSTONE-AAA-MIB", "rsAaaAcctDupServerRouterName"), ("REDSTONE-AAA-MIB", "rsAaaAddrPoolDefault"), ("REDSTONE-AAA-MIB", "rsAaaAddrDnsPrimary"), ("REDSTONE-AAA-MIB", "rsAaaAddrDnsSecondary"), ("REDSTONE-AAA-MIB", "rsAaaAddrWinsPrimary"), ("REDSTONE-AAA-MIB", "rsAaaAddrWinsSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAaaGroup = rsAaaGroup.setStatus('current')
if mibBuilder.loadTexts: rsAaaGroup.setDescription('The basic collection of objects providing management of AAA functionality in a Redstone product.')
mibBuilder.exportSymbols("REDSTONE-AAA-MIB", rsAaaAssignBrasLicensedUsers=rsAaaAssignBrasLicensedUsers, rsAaaAssignDomain=rsAaaAssignDomain, rsAaaAddrWinsPrimary=rsAaaAddrWinsPrimary, rsAaaAccounting=rsAaaAccounting, rsAaaAddress=rsAaaAddress, rsAaaAddrDnsSecondary=rsAaaAddrDnsSecondary, rsAaaAuthentication=rsAaaAuthentication, rsAaaAcctDupServerRouterName=rsAaaAcctDupServerRouterName, rsAaaAssignDomainTable=rsAaaAssignDomainTable, rsAaaAddrPoolDefault=rsAaaAddrPoolDefault, PYSNMP_MODULE_ID=rsAaaMIB, rsAaaAddrDnsPrimary=rsAaaAddrDnsPrimary, RsAaaDomainName=RsAaaDomainName, rsAaaAddrWins=rsAaaAddrWins, rsAaaCompliance=rsAaaCompliance, rsAaaAssignBrasLicense=rsAaaAssignBrasLicense, rsAaaGroup=rsAaaGroup, rsAaaAddrWinsSecondary=rsAaaAddrWinsSecondary, rsAaaAcctGeneral=rsAaaAcctGeneral, rsAaaAssignGeneral=rsAaaAssignGeneral, rsAaaMIBCompliances=rsAaaMIBCompliances, rsAaaAddrGeneral=rsAaaAddrGeneral, rsAaaAssignment=rsAaaAssignment, rsAaaAssignDomainRowStatus=rsAaaAssignDomainRowStatus, rsAaaAddrNameServer=rsAaaAddrNameServer, rsAaaMIBGroups=rsAaaMIBGroups, rsAaaObjects=rsAaaObjects, rsAaaMIBConformance=rsAaaMIBConformance, rsAaaAssignDomainLoopback=rsAaaAssignDomainLoopback, rsAaaMIB=rsAaaMIB, rsAaaAssignDomainRouterName=rsAaaAssignDomainRouterName, rsAaaAcctInterval=rsAaaAcctInterval, rsAaaAssignDomainName=rsAaaAssignDomainName, rsAaaAddrDns=rsAaaAddrDns, rsAaaAuthGeneral=rsAaaAuthGeneral, rsAaaAssignDomainEntry=rsAaaAssignDomainEntry)
