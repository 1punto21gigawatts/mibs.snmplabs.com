#
# PySNMP MIB module WWP-LEOS-TRAFFIC-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-TRAFFIC-PROFILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, Counter64, Integer32, iso, Bits, TimeTicks, IpAddress, Unsigned32, Gauge32, ObjectIdentity, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Counter64", "Integer32", "iso", "Bits", "TimeTicks", "IpAddress", "Unsigned32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
wwpModulesLeos, wwpModules = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos", "wwpModules")
wwpLeosTrafficProfileMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27))
wwpLeosTrafficProfileMIB.setRevisions(('2011-07-07 00:00', '2011-03-27 17:00', '2009-08-25 17:00', '2008-11-14 17:00', '2008-07-28 17:00', '2008-06-28 17:00', '2008-06-16 17:00', '2008-06-13 17:00', '2008-06-04 17:00', '2008-05-21 17:00', '2008-05-15 17:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosTrafficProfileMIB.setRevisionsDescriptions(('Added classifier mode under the wwpLeosTrafficProfilePortEntry. Added wwpLeosTrafficProfileStdUntaggedState under WwpLeosTrafficProfileStdEntry', 'Added modes hierarchicalVlan(12), hierarchicalPort(13) to wwpLeosTrafficProfileMode under wwpLeosTrafficProfilePortEntry. Added wwpLeosTrafficProfileStdDefaultProfile, wwpLeosTrafficProfileStdDrop, wwpLeosTrafficProfileStdParentIndex, wwpLeosTrafficProfileStdChildMode under wwpLeosTrafficProfileStdTable', 'Added modes stdVlanDot1dPri, stdVlanIpp, stdDscp to wwpLeosTrafficProfileMode under wwpLeosTrafficProfilePortEntry. Added objects wwpLeosTrafficProfileStdCbs, wwpLeosTrafficProfileEbs, wwpLeosTrafficProfileStdDscpRemarkPolicy, wwpLeosTrafficProfileStdFixedDscp to wwpLeosTrafficProfileStdEntryTable', 'Added wwpLeosTrafficProfileMeterPoolTable under wwpLeosTrafficProfile wwpLeosTrafficProfileStdIndx mib object value has been changed from 1..32 to 1..64 Added wwpLeosTrafficProfileMeterPool mib object under wwpLeosTrafficProfilePortEntry.', 'Added additional trafficPorfileMode stdDscp. Profile Index changed for following mib object from 1 through 8 to 1 through 32 wwpLeosTrafficProfileStdIndx, wwpLeosTrafficProfileStdDot1dTpProfile, wwpLeosTrafficProfileStdIpPrecToProfile, wwpLeosTrafficProfileStdPhbToProfile. Added new wwpLeosTrafficProfileStdDscpTable. Added new wwpLeosTrafficProfileStdVlanTable.', 'added value in cascaded enumerations for deprecated values', 'added entries related to tos-stamping', 'changed description of entries relating to cascaded profiling', 'deprecated all entries related to cascaded traffic profiling.', 'Added Total Statistics.', 'The MIB module for the WWP leos traffic profiling specific information.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosTrafficProfileMIB.setLastUpdated('201107070000Z')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMIB.setDescription('Added objects wwpLeosTrafficProfileStdHCAcceptedBytes and wwpLeosTrafficProfileStdHCDroppedBytes.')
wwpLeosTrafficProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1))
wwpLeosTrafficProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1))
wwpLeosTrafficProfileNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 2))
wwpLeosTrafficProfileNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 2, 0))
wwpLeosTrafficProfileMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 3))
wwpLeosTrafficProfileMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 3, 1))
wwpLeosTrafficProfileMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 3, 2))
wwpLeosTrafficProfileGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 1))
wwpLeosTrafficProfileGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileGlobalState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileGlobalState.setDescription("Setting this object to 'enabled' will enable traffic profile globally. Setting this object to 'disabled' will disable traffic profile globally.")
wwpLeosTrafficProfileGlobalMeterProvisioningState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pir", 1), ("eir", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileGlobalMeterProvisioningState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileGlobalMeterProvisioningState.setDescription("Setting this object to 'pir' will allow meters to be provisioned in pir. Setting this object to 'eir' will allow meters to be provisioned in eir.")
wwpLeosTrafficProfilePortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosTrafficProfilePortTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfilePortTable.setDescription('A table of traffic profile port entries.')
wwpLeosTrafficProfilePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"))
if mibBuilder.loadTexts: wwpLeosTrafficProfilePortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfilePortEntry.setDescription('A traffic profile entry in the wwpLeosTrafficProfilePortTable.')
wwpLeosTrafficProfilePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfilePort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfilePort.setDescription('This object specifies the port number also used as index in the table.')
wwpLeosTrafficProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileAdminState.setDescription("Setting this object to 'enabled' will administratively enable traffic profiling on the given port. Setting this object to 'disabled' will administratively disable traffic profiling on the given port.")
wwpLeosTrafficProfileOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileOperState.setDescription('This object specifies operational state of the traffic profiling for a given port on the device.')
wwpLeosTrafficProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("cascadedDot1dPri", 1), ("cascadedDscp", 2), ("cascadedIpPrec", 3), ("stdDot1", 4), ("stdDiffServ", 5), ("stdIpPrec", 6), ("stdVlan", 7), ("stdDscp", 8), ("stdVlanDot1DPri", 9), ("stdVlanIpp", 10), ("stdVlanDscp", 11), ("hierarchicalVlan", 12), ("hierarchicalPort", 13), ("none", 14), ("advanced", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMode.setDescription('This object specifies the mode of traffic profiling for a given port.')
wwpLeosTrafficProfileNonConformCascadedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 0), ("profile1", 1), ("profile2", 2), ("profile3", 3), ("deprecated", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileNonConformCascadedProfile.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileNonConformCascadedProfile.setDescription('This object specifies that the device should map non-conformance traffic ingressing on a given port to cascaded profile specified by wwpLeosTrafficProfileNonConformCascadedProfile. This object will become effective only if device is running in cascaded profile mode. This object will be set to drop if using on a device that does not have cascaded-profiling')
wwpLeosTrafficProfileNonConformStdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileNonConformStdProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileNonConformStdProfile.setDescription('This object specifies that the device should map non-conformance traffic ingressing on a given port to standard profile specified by wwpLeosTrafficProfileNonConformStdProfile. This object will become effective only if device is running in standard profile mode.')
wwpLeosTrafficProfileArpCascadedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("bypass", 0), ("profile1", 1), ("profile2", 2), ("profile3", 3), ("deprecated", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileArpCascadedProfile.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileArpCascadedProfile.setDescription('This object specifies that the device should map ARP frames ingressing on a given port to cascaded profile specified by wwpLeosTrafficProfileArpCascadedProfile. This object will be set to bypass if using on a device that does not have cascaded-profiling.')
wwpLeosTrafficProfileArpStdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileArpStdProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileArpStdProfile.setDescription('This object specifies that the device should map ARP frames ingressing on a given port to standard profile specified by wwpLeosTrafficProfileArpStdProfile. This object will become effective only if device is running in standard profile mode.')
wwpLeosTrafficProfileMeterPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPool.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPool.setDescription('This object specifies the Meter Pool Index for a port.')
wwpLeosTrafficProfileClassifierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("narrow", 1), ("wide", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileClassifierMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileClassifierMode.setDescription("This object specifies how narrow or wide we classify traffic to a port's meters.")
wwpLeosTrafficProfileCascadedTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTable.setDescription('A table of cascaded traffic profile entries. To create an entry in this table the following criteria must be met. - All indexes must be specified. - wwpLeosTrafficProfileCascadedCir must be specified - if wwpLeosTrafficProfileCascadedPir is not specified or is specified and is < wwpLeosTrafficProfileCascadedCir then device will make wwpLeosTrafficProfileCascadedPir = wwpLeosTrafficProfileCascadedCir - wwpLeosTrafficProfileCascadedStatus must be set to createandgo')
wwpLeosTrafficProfileCascadedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileCascadedIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedEntry.setDescription('A cascaded traffic profile entry in the wwpLeosTrafficProfileCascadedTable.')
wwpLeosTrafficProfileCascadedIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedIndx.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedIndx.setDescription('This object is used as index in the table and it represents profile index which can be 1 or 2 or 3.')
wwpLeosTrafficProfileCascadedCir = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 3, 1, 2), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedCir.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedCir.setDescription('This object specifies the cir associated with a given cascaded traffic profile. Units are kbps.')
wwpLeosTrafficProfileCascadedPir = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 3, 1, 3), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedPir.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedPir.setDescription('This object specifies the pir associated with a given cascaded traffic profile. Units are kbps.')
wwpLeosTrafficProfileCascadedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedStatus.setDescription("Setting this object to 'createandgo' along with wwpLeosTrafficProfileCascadedCir and wwpLeosTrafficProfileCascadedPir will result in creating an cascaded traffic profile entry. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTrafficProfileStdTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTable.setDescription('A table of Std traffic profile entries. To create entry in this table following criteria must be met. - All indexes must be specified. - wwpLeosTrafficProfileStdCir must be specified - if wwpLeosTrafficProfileStdPir is not specified or is specified and is < wwpLeosTrafficProfileStdCir then device will make wwpLeosTrafficProfileStdPir = wwpLeosTrafficProfileStdCir - wwpLeosTrafficProfileStdStatus must be set to createandgo')
wwpLeosTrafficProfileStdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdEntry.setDescription('A standard traffic profile entry in the wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIndx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIndx.setDescription('This object is used as index in the table and it represents profile index which can be 1 through 64.')
wwpLeosTrafficProfileStdCir = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 2), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdCir.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdCir.setDescription('This object specifies the cir associated with a given standard traffic profile.')
wwpLeosTrafficProfileStdPir = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 3), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPir.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPir.setDescription('This object specifies the pir associated with a given standard traffic profile.')
wwpLeosTrafficProfileStdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdName.setDescription('The name associated with this profile. This must be unique per port. The name does not have to be set on create. However, when updating the name, it must have some value - zero-string not support.')
wwpLeosTrafficProfileStdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatus.setDescription("Setting this object to 'createandgo' along with wwpLeosTrafficProfileStdCir and or wwpLeosTrafficProfileStdPir will result in creating an standard traffic profile entry. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTrafficProfileStdVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlan.setDescription('This object specifies the VLAN associated with a profile.')
wwpLeosTrafficProfileStdCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 7), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdCbs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdCbs.setDescription('This object specifies the Commited burst size associated with a given standard traffic profile.')
wwpLeosTrafficProfileStdEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 8), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdEbs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdEbs.setDescription('This object specifies the Excess burst size associated with a given standard traffic profile.')
wwpLeosTrafficProfileStdDscpRemarkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leave", 1), ("fixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpRemarkPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpRemarkPolicy.setDescription("Leave => Don't remark the frame. Fixed => Remark the DSCP of a frame with the fixed-dscp value for IP frames which classify to the Traffic Profile")
wwpLeosTrafficProfileStdFixedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdFixedDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdFixedDscp.setDescription("Fixed DSCP value to use for frames classifying to a Traffic Profile when the dscp-remark-policy id 'Fixed")
wwpLeosTrafficProfileStdUnsetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("unset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdUnsetVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdUnsetVlan.setDescription('Setting This object to unset(1) unsets the VLAN associated with a profile. This object returns a value of none(0) on get.')
wwpLeosTrafficProfileStdDefaultProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDefaultProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDefaultProfile.setDescription('Setting this object to true(1) during createAndGo(4) will create Tier-1 default profile.')
wwpLeosTrafficeProfileStdDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficeProfileStdDrop.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficeProfileStdDrop.setDescription('Setting this value to true causes metering to cease and all traffic to drop.')
wwpLeosTrafficProfileStdParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdParentIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdParentIndex.setDescription('This mib object is set when creating Child traffic profile to specify the parent index')
wwpLeosTrafficProfileStdChildMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("dot1dPri", 1), ("ipprec", 2), ("dscp", 3), ("vlan", 4), ("vlanCos", 5), ("none", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdChildMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdChildMode.setDescription('When the port mode is hierarchical-vlan, then the valid child-modes are dot1dPri, ipprec, dscp. When the port mode is hierarchical-port then the valid childModes is dot1dPri, ipprec, dscp and vlan(4).')
wwpLeosTrafficProfileStdStatsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatsMonitor.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatsMonitor.setDescription('To disable stats collection, set this object to off(2). To enable stats collection, set this object to on(1).')
wwpLeosTrafficProfileStdUntaggedState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdUntaggedState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdUntaggedState.setDescription('To enable this profile to match untagged traffic set this to on(1). To disable, set to off(2)')
wwpLeosTrafficProfileStdVs = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVs.setDescription('The virtual-switch name associated with this profile. The virtual-switch name must exist before using it as a profile classifier.')
wwpLeosTrafficProfileStdRemarkColorPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leave", 1), ("yellowRemarkToGreen", 2), ("greenRemarkToYellow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdRemarkColorPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdRemarkColorPolicy.setDescription("This sets the profile's color remarking policy at the meter output.")
wwpLeosTrafficProfileStdRemarkRcosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("leave", 1), ("remarkGreen", 2), ("remarkYellow", 3), ("remarkBoth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdRemarkRcosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdRemarkRcosPolicy.setDescription("This sets the profile's rcos remarking policy based on meter color.")
wwpLeosTrafficProfileStdYellowRemarkRcos = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdYellowRemarkRcos.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdYellowRemarkRcos.setDescription("This sets the profile's rcos remarking policy based on meter color.")
wwpLeosTrafficProfileStdGreenRemarkRcos = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdGreenRemarkRcos.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdGreenRemarkRcos.setDescription("This sets the profile's rcos remarking policy based on meter color.")
wwpLeosTrafficProfileStdIngressColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIngressColorAware.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIngressColorAware.setDescription("This sets the profile's meter ingress color awareness.")
wwpLeosTrafficProfileStdEir = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 4, 1, 24), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdEir.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdEir.setDescription('This object specifies the eir associated with a given standard traffic profile. Sets/Gets on this are only valid when the global meter-provisioning mode is set to eir. All other times it will be ignored and return 0')
wwpLeosTrafficProfileStdDot1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dTable.setDescription("A table of Std dot1d traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdDot1dStatus to 'createandgo'. - set wwpLeosTrafficProfileStdDot1dToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdDot1dStatus to destroy.")
wwpLeosTrafficProfileStdDot1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdDot1d"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dEntry.setDescription('A standard dot1d traffic profile entry in the wwpLeosTrafficProfileStdDot1dTable.')
wwpLeosTrafficProfileStdDot1d = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1d.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1d.setDescription('This object specifies the dot1d priority for the associated standard profile entry in the wwpLeosTrafficProfileStdDot1dTable table.')
wwpLeosTrafficProfileStdDot1dToProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dToProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dToProfile.setDescription('This object specifies the profile to which wwpLeosTrafficProfileStdDot1d must be mapped to.')
wwpLeosTrafficProfileStdDot1dStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDot1dStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdDot1dStatus to 'createandgo'. - set wwpLeosTrafficProfileStdDot1dToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdDot1dStatus to destroy.")
wwpLeosTrafficProfileStdIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecTable.setDescription("A table of standard ip precedence traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdIpPrecStatus to 'createandgo'. - set wwpLeosTrafficProfileStdIpPrecToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdIpPrecStatus to destroy.")
wwpLeosTrafficProfileStdIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIpPrec"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecEntry.setDescription('A standard ip precedence traffic profile entry in the wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrec.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrec.setDescription('This object specifies the ip precedence for the associated standard profile entry in wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdIpPrecToProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecToProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecToProfile.setDescription('This object specifies the profile to which wwpLeosTrafficProfileStdIpPrec must be mapped to.')
wwpLeosTrafficProfileStdIpPrecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdIpPrecStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdIpPrecStatus to 'createandgo'. - set wwpLeosTrafficProfileStdIpPrecToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdIpPrecStatus to destroy.")
wwpLeosTrafficProfileStdPhbTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbTable.setDescription("A table of standard phb traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdPhbStatus to 'createandgo'. - set wwpLeosTrafficProfileStdPhbToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdPhbStatus to destroy.")
wwpLeosTrafficProfileStdPhbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdPhb"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbEntry.setDescription('A standard Phb traffic profile entry in the wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdPhb = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("cs0", 1), ("cs1", 2), ("cs2", 3), ("cs3", 4), ("cs4", 5), ("cs5", 6), ("cs6", 7), ("cs7", 8), ("af1", 9), ("af2", 10), ("af3", 11), ("af4", 12), ("ef", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhb.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhb.setDescription('This object specifies the diff-serv values for the associated standard profile entry in wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdPhbToProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbToProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbToProfile.setDescription('This object specifies the profile to which wwpLeosTrafficProfileStdPhb must be mapped to.')
wwpLeosTrafficProfileStdPhbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdPhbStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdPhbStatus to 'createandgo'. - set wwpLeosTrafficProfileStdPhbToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdPhbStatus to destroy.")
wwpLeosTrafficProfileCascadedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedStatsTable.setDescription('A table of cascaded profile stats.')
wwpLeosTrafficProfileCascadedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileCascadedIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedStatsEntry.setDescription('A cascaded traffic profile entry in the wwpLeosTrafficProfileCascadedStatsTable.')
wwpLeosTrafficProfileCascadedAcceptedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedAcceptedBytesHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedAcceptedBytesHi.setDescription('This object specifies the higher bytes of accepted frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedAcceptedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedAcceptedBytesLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedAcceptedBytesLo.setDescription('This object specifies the lower bytes of accepted frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedDroppedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedDroppedBytesHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedDroppedBytesHi.setDescription('This object specifies the higher bytes of dropped frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedDroppedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedDroppedBytesLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedDroppedBytesLo.setDescription('This object specifies the lower bytes of dropped frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedRemarkedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedRemarkedBytesHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedRemarkedBytesHi.setDescription('This object specifies the higher bytes of remarked frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedRemarkedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedRemarkedBytesLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedRemarkedBytesLo.setDescription('This object specifies the lower bytes of remarked frames of given cascaded profile.')
wwpLeosTrafficProfileStdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatsTable.setDescription('A table of standard profile stats.')
wwpLeosTrafficProfileStdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdStatsEntry.setDescription('The entry in wwpLeosTrafficProfileStdStatsTable.')
wwpLeosTrafficProfileStdAcceptedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdAcceptedBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdAcceptedBytesHi.setDescription('This object specifies the higher bytes of accepted frames of given standard profile.')
wwpLeosTrafficProfileStdAcceptedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdAcceptedBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdAcceptedBytesLo.setDescription('This object specifies the lower bytes of accepted frames of given standard profile.')
wwpLeosTrafficProfileStdDroppedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDroppedBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDroppedBytesHi.setDescription('This object specifies the higher bytes of dropped frames of given standard profile.')
wwpLeosTrafficProfileStdDroppedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDroppedBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDroppedBytesLo.setDescription('This object specifies the higher bytes of dropped frames of given standard profile.')
wwpLeosTrafficProfileStdHCAcceptedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCAcceptedBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCAcceptedBytes.setDescription('This object specifies the bytes of accepted frame data by a given standard profile.')
wwpLeosTrafficProfileStdHCDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCDroppedBytes.setDescription('This object specifies the bytes of dropped frame data by a given standard profile.')
wwpLeosTrafficProfileStdHCAcceptedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCAcceptedPackets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCAcceptedPackets.setDescription('This object specifies the number of packets passed by a standard profile')
wwpLeosTrafficProfileStdHCDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdHCDroppedPackets.setDescription('This object specifies the number of packets dropped by a standard profile')
wwpLeosTrafficProfileCascadedGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalTable.setDescription('A table of global attributes used by cascaded traffic profile table. To create entry in this table following criteria must be met. - All indexes must be specified. - wwpLeosTrafficProfileCascadedGlobalDot1d,wwpLeosTrafficProfileCascadedGlobalIpPrec and wwpLeosTrafficProfileCascadedGlobalDscp may be specified. - wwpLeosTrafficProfileCascadedGlobalName may be specified. - wwpLeosTrafficProfileCascadedGlobalStatus must be set to createandgo')
wwpLeosTrafficProfileCascadedGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileCascadedIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalEntry.setDescription('A global cascaded traffic profile entry in the wwpLeosTrafficProfileCascadedGlobalTable.')
wwpLeosTrafficProfileCascadedGlobalDot1d = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalDot1d.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalDot1d.setDescription("This specifies the dot1d priority for a given cascaded traffic profile. If this object returns -1 then it means the value was not set by user and thus doesn't care.")
wwpLeosTrafficProfileCascadedGlobalIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalIpPrec.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalIpPrec.setDescription("This specifies the ip precedence value for a given cascaded traffic profile. If this object returns -1 then it means the value was not set by user and thus doesn't care.")
wwpLeosTrafficProfileCascadedGlobalDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalDscp.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalDscp.setDescription("This specifies the dscp value for a given cascaded traffic profile. If this object returns -1 then it means the value was not set by user and thus doesn't care.")
wwpLeosTrafficProfileCascadedGlobalName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalName.setDescription('The name associated with this profile. This must be unique name per profile. The name does not have to be set on create. However, when updating the name, it must have some value - zero-string not support.')
wwpLeosTrafficProfileCascadedGlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedGlobalStatus.setDescription("Setting this object to 'createandgo' will result in creating an global cascaded traffic profile entry. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTrafficProfileCascadedTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalStatsTable.setDescription('A table of cascaded profile stats.')
wwpLeosTrafficProfileCascadedTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileCascadedIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalStatsEntry.setDescription('A cascaded traffic profile entry in the wwpLeosTrafficProfileCascadedTotalStatsTable.')
wwpLeosTrafficProfileCascadedTotalAcceptedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalAcceptedBytesHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalAcceptedBytesHi.setDescription('This object specifies the higher bytes of accepted frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedTotalAcceptedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalAcceptedBytesLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalAcceptedBytesLo.setDescription('This object specifies the lower bytes of accepted frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedTotalDroppedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalDroppedBytesHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalDroppedBytesHi.setDescription('This object specifies the higher bytes of dropped frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedTotalDroppedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalDroppedBytesLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalDroppedBytesLo.setDescription('This object specifies the lower bytes of dropped frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedTotalRemarkedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalRemarkedBytesHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalRemarkedBytesHi.setDescription('This object specifies the higher bytes of remarked frames of given cascaded profile.')
wwpLeosTrafficProfileCascadedTotalRemarkedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalRemarkedBytesLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTrafficProfileCascadedTotalRemarkedBytesLo.setDescription('This object specifies the lower bytes of remarked frames of given cascaded profile.')
wwpLeosTrafficProfileStdTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 12), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalStatsTable.setDescription('A table of standard profile stats.')
wwpLeosTrafficProfileStdTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 12, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalStatsEntry.setDescription('The entry in wwpLeosTrafficProfileStdTotalStatsTable.')
wwpLeosTrafficProfileStdTotalAcceptedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalAcceptedBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalAcceptedBytesHi.setDescription('This object specifies the higher bytes of accepted frames of given standard profile.')
wwpLeosTrafficProfileStdTotalAcceptedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalAcceptedBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalAcceptedBytesLo.setDescription('This object specifies the lower bytes of accepted frames of given standard profile.')
wwpLeosTrafficProfileStdTotalDroppedBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalDroppedBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalDroppedBytesHi.setDescription('This object specifies the higher bytes of dropped frames of given standard profile.')
wwpLeosTrafficProfileStdTotalDroppedBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalDroppedBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdTotalDroppedBytesLo.setDescription('This object specifies the higher bytes of dropped frames of given standard profile.')
wwpLeosTrafficProfileStdVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 14), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanTable.setDescription("A table of Std Vlan Traffic Profile Entries. To create entry in the table following criteria must be met -- set wwpLeosTrafficProfileStdVlanStatus to 'createandgo'. -- set wwpLeosTrafficProfileStdVlan to valid profile. To delete entry set wwpLeosTrafficProfileStdVlanStatus to destroy.")
wwpLeosTrafficProfileStdVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 14, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdVlanIndex"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanEntry.setDescription('A standard Dscp traffic profile entry in the wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIndex.setDescription('This object specifies the Vlan for the associated standard profile entry in wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdVlanToProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanToProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanToProfile.setDescription('This object specifies the profile to which wwpLeosTrafficProfileStdVlan must be mapped to.')
wwpLeosTrafficProfileStdVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdVlanStatus to 'createandgo'. - set wwpLeosTrafficProfileStdVlanToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdVlanStatus to destroy.")
wwpLeosTrafficProfileStdDscpTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 15), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpTable.setDescription("A table of standard Dscp traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdDscpStatus to 'createandgo'. - set wwpLeosTrafficProfileStdDscpToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdDscpStatus to destroy.")
wwpLeosTrafficProfileStdDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 15, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdDscp"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpEntry.setDescription('A standard Dscp traffic profile entry in the wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscp.setDescription('This object specifies the Dscp for the associated standard profile entry in wwpLeosTrafficProfileStdTable.')
wwpLeosTrafficProfileStdDscpToProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpToProfile.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpToProfile.setDescription('This object specifies the profile to which wwpLeosTrafficProfileStdDscp must be mapped to.')
wwpLeosTrafficProfileStdDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdDscpStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdDscpStatus to 'createandgo'. - set wwpLeosTrafficProfileStdDscpToProfile to valid profile. To delete entry set wwpLeosTrafficProfileStdDscpStatus to destroy.")
wwpLeosTrafficProfileMeterPoolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolTable.setDescription(' A Table of Meter Pool')
wwpLeosTrafficProfileMeterPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileMeterPoolIndex"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolEntry.setDescription(' A Meter Pool Entry in wwpLeosTrafficProfileMeterPoolTable')
wwpLeosTrafficProfileMeterPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolIndex.setDescription(' A Meter Pool Index')
wwpLeosTrafficProfileMeterPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolName.setDescription('A Meter Pool Name')
wwpLeosTrafficProfileMeterPoolNumOfMeters = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolNumOfMeters.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolNumOfMeters.setDescription('Number of Meters for a pool')
wwpLeosTrafficProfileMeterPoolMetersUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolMetersUsed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolMetersUsed.setDescription('Number of Used Meters in a Pool')
wwpLeosTrafficProfileMeterPoolNumOfStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolNumOfStats.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolNumOfStats.setDescription('Number of Stats Counters for a pool')
wwpLeosTrafficProfileMeterPoolStatsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolStatsUsed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolStatsUsed.setDescription('Number of Used Stats Counters in a Pool')
wwpLeosTrafficProfileMeterPoolNumOfClassifiers = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolNumOfClassifiers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolNumOfClassifiers.setDescription('Number of Classifiers for a pool')
wwpLeosTrafficProfileMeterPoolClassifiersUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolClassifiersUsed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileMeterPoolClassifiersUsed.setDescription('Number of Used Classifiers in a Pool')
wwpLeosTrafficProfileTosStampTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 20), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampTable.setDescription('A table of TosStamps entries.')
wwpLeosTrafficProfileTosStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 20, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampEntry.setDescription('The entry in wwpLeosTrafficProfileTosStampTable.')
wwpLeosTrafficProfileTosStampState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampState.setDescription('This object specifies the state of the TOS Stamp on a port')
wwpLeosTrafficProfileTosStampValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileTosStampValue.setDescription('This object specifies the Value of the TOS Stamp. For IP prec left shift the value by 3 bits.')
wwpLeosTrafficProfileIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpDscpTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpDscpTable.setDescription('A table of IpDscp entries.')
wwpLeosTrafficProfileIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpDscpEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpDscpEntry.setDescription('The entry in wwpLeosTrafficProfileIpDscpTable.')
wwpLeosTrafficProfileIpp0Cs0State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp0Cs0State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp0Cs0State.setDescription('This object specifies the state of the Ipp0 or cs0 enable disable on a port')
wwpLeosTrafficProfileIpp1Cs1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp1Cs1State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp1Cs1State.setDescription('This object specifies the state of the Ipp1 or cs1 enable disable on a port')
wwpLeosTrafficProfileIpp2Cs2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp2Cs2State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp2Cs2State.setDescription('This object specifies the state of the Ipp0 or cs0 enable disable on a port')
wwpLeosTrafficProfileIpp3Cs3State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp3Cs3State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp3Cs3State.setDescription('This object specifies the state of the Ipp3 or cs3 enable disable on a port')
wwpLeosTrafficProfileIpp4Cs4State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp4Cs4State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp4Cs4State.setDescription('This object specifies the state of the Ipp4 or cs4 enable disable on a port')
wwpLeosTrafficProfileIpp5Cs5State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp5Cs5State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp5Cs5State.setDescription('This object specifies the state of the Ipp5 or cs5 enable disable on a port')
wwpLeosTrafficProfileIpp6Cs6State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp6Cs6State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp6Cs6State.setDescription('This object specifies the state of the Ipp6 or cs6 enable disable on a port')
wwpLeosTrafficProfileIpp7Cs7State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp7Cs7State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileIpp7Cs7State.setDescription('This object specifies the state of the Ipp7 or cs7 enable disable on a port')
wwpLeosTrafficProfileAf1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf1State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf1State.setDescription('This object specifies the state of the Af1 enable disable on a port')
wwpLeosTrafficProfileAf2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf2State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf2State.setDescription('This object specifies the state of the Af2 enable disable on a port')
wwpLeosTrafficProfileAf3State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf3State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf3State.setDescription('This object specifies the state of the Af3 enable disable on a port')
wwpLeosTrafficProfileAf4State = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf4State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileAf4State.setDescription('This object specifies the state of the Af4 enable disable on a port')
wwpLeosTrafficProfileEfState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTrafficProfileEfState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileEfState.setDescription('This object specifies the state of the Ef enable disable on a port')
wwpLeosTrafficProfileStdVlanDot1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 40), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDot1dTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDot1dTable.setDescription("A table of Std Vlan dot1d traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdDot1dStatus to 'createandgo'. To delete entry set wwpLeosTrafficProfileStdDot1dStatus to destroy.")
wwpLeosTrafficProfileStdVlanDot1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 40, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdDot1d"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDot1dEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDot1dEntry.setDescription('A standard dot1d traffic profile entry in the wwpLeosTrafficProfileStdDot1dTable.')
wwpLeosTrafficProfileStdVlanDot1dStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 40, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDot1dStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDot1dStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdDot1dStatus to 'createandgo'. To delete entry set wwpLeosTrafficProfileStdDot1dStatus to destroy.")
wwpLeosTrafficProfileStdVlanIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 41), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIpPrecTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIpPrecTable.setDescription("A table of Std Vlan-Ip prec traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdVlanIpPrecStatus to 'createandgo'. To delete entry set wwpLeosTrafficProfileStdVlanIpPrecStatus to destroy.")
wwpLeosTrafficProfileStdVlanIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 41, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIpPrec"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIpPrecEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIpPrecEntry.setDescription('A standard vlan-Ip prec traffic profile entry in the wwpLeosTrafficProfileStdVlanIpPrecTable.')
wwpLeosTrafficProfileStdVlanIpPrecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 41, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIpPrecStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanIpPrecStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdVlanIpPrecStatus to 'createandgo'. To delete entry set wwpLeosTrafficProfileStdVlanIpPrecStatus to destroy.")
wwpLeosTrafficProfileStdVlanDscpTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 42), )
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDscpTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDscpTable.setDescription("A table of Std Vlan-dscp traffic profile entries. To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdVlanDscpStatus to 'createandgo'. To delete entry set wwpLeosTrafficProfileStdVlanDscpStatus to destroy.")
wwpLeosTrafficProfileStdVlanDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 42, 1), ).setIndexNames((0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfilePort"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdDscp"), (0, "WWP-LEOS-TRAFFIC-PROFILE-MIB", "wwpLeosTrafficProfileStdIndx"))
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDscpEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDscpEntry.setDescription('A standard vlan-dscp traffic profile entry in the wwpLeosTrafficProfileStdVlanDscpTable.')
wwpLeosTrafficProfileStdVlanDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 27, 1, 1, 42, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDscpStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTrafficProfileStdVlanDscpStatus.setDescription("To create entry in the table following criteria must be met - set wwpLeosTrafficProfileStdVlanDscpStatus to 'createandgo'. To delete entry set wwpLeosTrafficProfileStdVlanDscpStatus to destroy.")
mibBuilder.exportSymbols("WWP-LEOS-TRAFFIC-PROFILE-MIB", wwpLeosTrafficProfileStdTotalDroppedBytesLo=wwpLeosTrafficProfileStdTotalDroppedBytesLo, wwpLeosTrafficProfileStdTotalStatsEntry=wwpLeosTrafficProfileStdTotalStatsEntry, wwpLeosTrafficProfileGlobalAttrs=wwpLeosTrafficProfileGlobalAttrs, wwpLeosTrafficProfileIpp5Cs5State=wwpLeosTrafficProfileIpp5Cs5State, wwpLeosTrafficProfileStdEir=wwpLeosTrafficProfileStdEir, wwpLeosTrafficProfileStdDscpEntry=wwpLeosTrafficProfileStdDscpEntry, wwpLeosTrafficProfileCascadedTotalAcceptedBytesHi=wwpLeosTrafficProfileCascadedTotalAcceptedBytesHi, wwpLeosTrafficProfileMeterPoolEntry=wwpLeosTrafficProfileMeterPoolEntry, wwpLeosTrafficProfileStdHCDroppedBytes=wwpLeosTrafficProfileStdHCDroppedBytes, wwpLeosTrafficProfileMeterPoolIndex=wwpLeosTrafficProfileMeterPoolIndex, wwpLeosTrafficProfileCascadedGlobalEntry=wwpLeosTrafficProfileCascadedGlobalEntry, wwpLeosTrafficProfileStdIpPrecEntry=wwpLeosTrafficProfileStdIpPrecEntry, wwpLeosTrafficProfileMeterPoolNumOfClassifiers=wwpLeosTrafficProfileMeterPoolNumOfClassifiers, wwpLeosTrafficProfileStdDot1dToProfile=wwpLeosTrafficProfileStdDot1dToProfile, wwpLeosTrafficProfileIpp7Cs7State=wwpLeosTrafficProfileIpp7Cs7State, wwpLeosTrafficProfileMIBConformance=wwpLeosTrafficProfileMIBConformance, wwpLeosTrafficProfileStdStatsEntry=wwpLeosTrafficProfileStdStatsEntry, wwpLeosTrafficProfileStdVlanDscpTable=wwpLeosTrafficProfileStdVlanDscpTable, wwpLeosTrafficProfileGlobalMeterProvisioningState=wwpLeosTrafficProfileGlobalMeterProvisioningState, wwpLeosTrafficProfileStdPhbEntry=wwpLeosTrafficProfileStdPhbEntry, wwpLeosTrafficProfileStdUnsetVlan=wwpLeosTrafficProfileStdUnsetVlan, wwpLeosTrafficProfileCascadedTotalStatsTable=wwpLeosTrafficProfileCascadedTotalStatsTable, wwpLeosTrafficProfileIpp3Cs3State=wwpLeosTrafficProfileIpp3Cs3State, wwpLeosTrafficProfileStdPhb=wwpLeosTrafficProfileStdPhb, wwpLeosTrafficProfileStdGreenRemarkRcos=wwpLeosTrafficProfileStdGreenRemarkRcos, wwpLeosTrafficProfileTosStampEntry=wwpLeosTrafficProfileTosStampEntry, wwpLeosTrafficProfileCascadedGlobalIpPrec=wwpLeosTrafficProfileCascadedGlobalIpPrec, wwpLeosTrafficProfileStdIngressColorAware=wwpLeosTrafficProfileStdIngressColorAware, wwpLeosTrafficProfileStdHCDroppedPackets=wwpLeosTrafficProfileStdHCDroppedPackets, wwpLeosTrafficProfileStdDscpStatus=wwpLeosTrafficProfileStdDscpStatus, wwpLeosTrafficProfileStdEbs=wwpLeosTrafficProfileStdEbs, wwpLeosTrafficProfileStdDscpToProfile=wwpLeosTrafficProfileStdDscpToProfile, wwpLeosTrafficProfileCascadedIndx=wwpLeosTrafficProfileCascadedIndx, wwpLeosTrafficProfileNotifications=wwpLeosTrafficProfileNotifications, wwpLeosTrafficProfileStdDot1dStatus=wwpLeosTrafficProfileStdDot1dStatus, wwpLeosTrafficProfileStdStatus=wwpLeosTrafficProfileStdStatus, wwpLeosTrafficProfileCascadedTotalDroppedBytesHi=wwpLeosTrafficProfileCascadedTotalDroppedBytesHi, wwpLeosTrafficProfileArpStdProfile=wwpLeosTrafficProfileArpStdProfile, wwpLeosTrafficProfileClassifierMode=wwpLeosTrafficProfileClassifierMode, wwpLeosTrafficProfileStdVlanDot1dTable=wwpLeosTrafficProfileStdVlanDot1dTable, wwpLeosTrafficProfileMeterPoolMetersUsed=wwpLeosTrafficProfileMeterPoolMetersUsed, wwpLeosTrafficProfileMIBGroups=wwpLeosTrafficProfileMIBGroups, wwpLeosTrafficProfileStdDroppedBytesHi=wwpLeosTrafficProfileStdDroppedBytesHi, wwpLeosTrafficProfileCascadedGlobalDot1d=wwpLeosTrafficProfileCascadedGlobalDot1d, wwpLeosTrafficProfileStdIpPrecStatus=wwpLeosTrafficProfileStdIpPrecStatus, wwpLeosTrafficProfileCascadedGlobalStatus=wwpLeosTrafficProfileCascadedGlobalStatus, wwpLeosTrafficProfileIpDscpEntry=wwpLeosTrafficProfileIpDscpEntry, wwpLeosTrafficProfileMeterPool=wwpLeosTrafficProfileMeterPool, wwpLeosTrafficProfileStdIpPrecToProfile=wwpLeosTrafficProfileStdIpPrecToProfile, wwpLeosTrafficProfileCascadedTotalRemarkedBytesLo=wwpLeosTrafficProfileCascadedTotalRemarkedBytesLo, wwpLeosTrafficProfileAf2State=wwpLeosTrafficProfileAf2State, wwpLeosTrafficProfileCascadedPir=wwpLeosTrafficProfileCascadedPir, wwpLeosTrafficProfileMeterPoolTable=wwpLeosTrafficProfileMeterPoolTable, wwpLeosTrafficProfileStdTable=wwpLeosTrafficProfileStdTable, wwpLeosTrafficProfileIpp4Cs4State=wwpLeosTrafficProfileIpp4Cs4State, wwpLeosTrafficProfileIpp1Cs1State=wwpLeosTrafficProfileIpp1Cs1State, wwpLeosTrafficProfileTosStampState=wwpLeosTrafficProfileTosStampState, wwpLeosTrafficProfileStdVlanToProfile=wwpLeosTrafficProfileStdVlanToProfile, wwpLeosTrafficProfileAf1State=wwpLeosTrafficProfileAf1State, wwpLeosTrafficProfileStdHCAcceptedBytes=wwpLeosTrafficProfileStdHCAcceptedBytes, wwpLeosTrafficProfileCascadedCir=wwpLeosTrafficProfileCascadedCir, wwpLeosTrafficProfileStdVlanDscpStatus=wwpLeosTrafficProfileStdVlanDscpStatus, wwpLeosTrafficProfileCascadedTotalStatsEntry=wwpLeosTrafficProfileCascadedTotalStatsEntry, wwpLeosTrafficProfileCascadedGlobalTable=wwpLeosTrafficProfileCascadedGlobalTable, wwpLeosTrafficProfileStdVlanIndex=wwpLeosTrafficProfileStdVlanIndex, wwpLeosTrafficProfileStdTotalStatsTable=wwpLeosTrafficProfileStdTotalStatsTable, wwpLeosTrafficProfileStdVlanTable=wwpLeosTrafficProfileStdVlanTable, wwpLeosTrafficProfileStdDscpTable=wwpLeosTrafficProfileStdDscpTable, wwpLeosTrafficProfileCascadedRemarkedBytesHi=wwpLeosTrafficProfileCascadedRemarkedBytesHi, wwpLeosTrafficProfileCascadedEntry=wwpLeosTrafficProfileCascadedEntry, wwpLeosTrafficProfile=wwpLeosTrafficProfile, wwpLeosTrafficProfileStdVlanIpPrecTable=wwpLeosTrafficProfileStdVlanIpPrecTable, wwpLeosTrafficProfileStdEntry=wwpLeosTrafficProfileStdEntry, wwpLeosTrafficProfilePortTable=wwpLeosTrafficProfilePortTable, wwpLeosTrafficProfileStdDot1d=wwpLeosTrafficProfileStdDot1d, wwpLeosTrafficProfileStdStatsTable=wwpLeosTrafficProfileStdStatsTable, wwpLeosTrafficProfileCascadedRemarkedBytesLo=wwpLeosTrafficProfileCascadedRemarkedBytesLo, wwpLeosTrafficProfileMeterPoolClassifiersUsed=wwpLeosTrafficProfileMeterPoolClassifiersUsed, wwpLeosTrafficProfileObjects=wwpLeosTrafficProfileObjects, wwpLeosTrafficProfileCascadedAcceptedBytesLo=wwpLeosTrafficProfileCascadedAcceptedBytesLo, wwpLeosTrafficProfileStdAcceptedBytesLo=wwpLeosTrafficProfileStdAcceptedBytesLo, wwpLeosTrafficProfileStdUntaggedState=wwpLeosTrafficProfileStdUntaggedState, wwpLeosTrafficProfileCascadedStatsTable=wwpLeosTrafficProfileCascadedStatsTable, wwpLeosTrafficProfileStdDot1dEntry=wwpLeosTrafficProfileStdDot1dEntry, wwpLeosTrafficProfileStdTotalAcceptedBytesHi=wwpLeosTrafficProfileStdTotalAcceptedBytesHi, wwpLeosTrafficProfileTosStampTable=wwpLeosTrafficProfileTosStampTable, wwpLeosTrafficProfileMIB=wwpLeosTrafficProfileMIB, wwpLeosTrafficProfileAdminState=wwpLeosTrafficProfileAdminState, wwpLeosTrafficeProfileStdDrop=wwpLeosTrafficeProfileStdDrop, wwpLeosTrafficProfileMeterPoolNumOfStats=wwpLeosTrafficProfileMeterPoolNumOfStats, wwpLeosTrafficProfileStdPhbStatus=wwpLeosTrafficProfileStdPhbStatus, wwpLeosTrafficProfileNonConformCascadedProfile=wwpLeosTrafficProfileNonConformCascadedProfile, wwpLeosTrafficProfileStdVlan=wwpLeosTrafficProfileStdVlan, wwpLeosTrafficProfileTosStampValue=wwpLeosTrafficProfileTosStampValue, wwpLeosTrafficProfileAf3State=wwpLeosTrafficProfileAf3State, wwpLeosTrafficProfileCascadedGlobalDscp=wwpLeosTrafficProfileCascadedGlobalDscp, wwpLeosTrafficProfileEfState=wwpLeosTrafficProfileEfState, wwpLeosTrafficProfileStdPhbTable=wwpLeosTrafficProfileStdPhbTable, wwpLeosTrafficProfileGlobalState=wwpLeosTrafficProfileGlobalState, wwpLeosTrafficProfileMeterPoolName=wwpLeosTrafficProfileMeterPoolName, wwpLeosTrafficProfileCascadedDroppedBytesLo=wwpLeosTrafficProfileCascadedDroppedBytesLo, wwpLeosTrafficProfileStdIpPrecTable=wwpLeosTrafficProfileStdIpPrecTable, wwpLeosTrafficProfileCascadedGlobalName=wwpLeosTrafficProfileCascadedGlobalName, wwpLeosTrafficProfileArpCascadedProfile=wwpLeosTrafficProfileArpCascadedProfile, wwpLeosTrafficProfilePort=wwpLeosTrafficProfilePort, wwpLeosTrafficProfileCascadedTotalAcceptedBytesLo=wwpLeosTrafficProfileCascadedTotalAcceptedBytesLo, wwpLeosTrafficProfileNotificationPrefix=wwpLeosTrafficProfileNotificationPrefix, wwpLeosTrafficProfileStdRemarkRcosPolicy=wwpLeosTrafficProfileStdRemarkRcosPolicy, wwpLeosTrafficProfileStdPir=wwpLeosTrafficProfileStdPir, wwpLeosTrafficProfileCascadedTotalDroppedBytesLo=wwpLeosTrafficProfileCascadedTotalDroppedBytesLo, wwpLeosTrafficProfileStdVlanIpPrecEntry=wwpLeosTrafficProfileStdVlanIpPrecEntry, wwpLeosTrafficProfileCascadedDroppedBytesHi=wwpLeosTrafficProfileCascadedDroppedBytesHi, wwpLeosTrafficProfileStdDefaultProfile=wwpLeosTrafficProfileStdDefaultProfile, wwpLeosTrafficProfileStdVlanStatus=wwpLeosTrafficProfileStdVlanStatus, wwpLeosTrafficProfileStdVlanIpPrecStatus=wwpLeosTrafficProfileStdVlanIpPrecStatus, wwpLeosTrafficProfileStdFixedDscp=wwpLeosTrafficProfileStdFixedDscp, wwpLeosTrafficProfileStdTotalDroppedBytesHi=wwpLeosTrafficProfileStdTotalDroppedBytesHi, wwpLeosTrafficProfileMeterPoolStatsUsed=wwpLeosTrafficProfileMeterPoolStatsUsed, wwpLeosTrafficProfileStdCbs=wwpLeosTrafficProfileStdCbs, wwpLeosTrafficProfileCascadedStatsEntry=wwpLeosTrafficProfileCascadedStatsEntry, wwpLeosTrafficProfileStdAcceptedBytesHi=wwpLeosTrafficProfileStdAcceptedBytesHi, wwpLeosTrafficProfileStdVlanDscpEntry=wwpLeosTrafficProfileStdVlanDscpEntry, wwpLeosTrafficProfileStdParentIndex=wwpLeosTrafficProfileStdParentIndex, wwpLeosTrafficProfileNonConformStdProfile=wwpLeosTrafficProfileNonConformStdProfile, wwpLeosTrafficProfileStdCir=wwpLeosTrafficProfileStdCir, wwpLeosTrafficProfileStdDot1dTable=wwpLeosTrafficProfileStdDot1dTable, wwpLeosTrafficProfileStdChildMode=wwpLeosTrafficProfileStdChildMode, wwpLeosTrafficProfileMIBCompliances=wwpLeosTrafficProfileMIBCompliances, wwpLeosTrafficProfileOperState=wwpLeosTrafficProfileOperState, wwpLeosTrafficProfileCascadedAcceptedBytesHi=wwpLeosTrafficProfileCascadedAcceptedBytesHi, wwpLeosTrafficProfileStdTotalAcceptedBytesLo=wwpLeosTrafficProfileStdTotalAcceptedBytesLo, wwpLeosTrafficProfileIpp2Cs2State=wwpLeosTrafficProfileIpp2Cs2State, wwpLeosTrafficProfileStdDroppedBytesLo=wwpLeosTrafficProfileStdDroppedBytesLo, wwpLeosTrafficProfileStdDscpRemarkPolicy=wwpLeosTrafficProfileStdDscpRemarkPolicy, wwpLeosTrafficProfileIpp6Cs6State=wwpLeosTrafficProfileIpp6Cs6State, wwpLeosTrafficProfilePortEntry=wwpLeosTrafficProfilePortEntry, wwpLeosTrafficProfileStdIndx=wwpLeosTrafficProfileStdIndx, PYSNMP_MODULE_ID=wwpLeosTrafficProfileMIB, wwpLeosTrafficProfileStdIpPrec=wwpLeosTrafficProfileStdIpPrec, wwpLeosTrafficProfileCascadedTable=wwpLeosTrafficProfileCascadedTable, wwpLeosTrafficProfileStdStatsMonitor=wwpLeosTrafficProfileStdStatsMonitor, wwpLeosTrafficProfileIpDscpTable=wwpLeosTrafficProfileIpDscpTable, wwpLeosTrafficProfileAf4State=wwpLeosTrafficProfileAf4State, wwpLeosTrafficProfileCascadedTotalRemarkedBytesHi=wwpLeosTrafficProfileCascadedTotalRemarkedBytesHi, wwpLeosTrafficProfileStdPhbToProfile=wwpLeosTrafficProfileStdPhbToProfile, wwpLeosTrafficProfileStdRemarkColorPolicy=wwpLeosTrafficProfileStdRemarkColorPolicy, wwpLeosTrafficProfileIpp0Cs0State=wwpLeosTrafficProfileIpp0Cs0State, wwpLeosTrafficProfileStdVs=wwpLeosTrafficProfileStdVs, wwpLeosTrafficProfileStdHCAcceptedPackets=wwpLeosTrafficProfileStdHCAcceptedPackets, wwpLeosTrafficProfileStdName=wwpLeosTrafficProfileStdName, wwpLeosTrafficProfileStdDscp=wwpLeosTrafficProfileStdDscp, wwpLeosTrafficProfileMeterPoolNumOfMeters=wwpLeosTrafficProfileMeterPoolNumOfMeters, wwpLeosTrafficProfileStdVlanEntry=wwpLeosTrafficProfileStdVlanEntry, wwpLeosTrafficProfileStdVlanDot1dEntry=wwpLeosTrafficProfileStdVlanDot1dEntry, wwpLeosTrafficProfileStdVlanDot1dStatus=wwpLeosTrafficProfileStdVlanDot1dStatus, wwpLeosTrafficProfileStdYellowRemarkRcos=wwpLeosTrafficProfileStdYellowRemarkRcos, wwpLeosTrafficProfileMode=wwpLeosTrafficProfileMode, wwpLeosTrafficProfileCascadedStatus=wwpLeosTrafficProfileCascadedStatus)
