#
# PySNMP MIB module WWP-LEOS-RSVPTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-RSVPTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Gauge32, iso, MibIdentifier, IpAddress, ModuleIdentity, NotificationType, Counter64, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Gauge32", "iso", "MibIdentifier", "IpAddress", "ModuleIdentity", "NotificationType", "Counter64", "Integer32", "Unsigned32")
MacAddress, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosRsvpteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30))
wwpLeosRsvpteMIB.setRevisions(('2011-07-06 00:00', '2005-08-08 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosRsvpteMIB.setRevisionsDescriptions(('This MIB module is for the RSVP-TE configuration for MPLS tunnels', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosRsvpteMIB.setLastUpdated('201107060000Z')
if mibBuilder.loadTexts: wwpLeosRsvpteMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosRsvpteMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosRsvpteMIB.setDescription(' Added new objects wwpLeosRsvpteIfHelloInterval,wwpLeosRsvpteIfHelloTolerance, wwpLeosRsvpteIfAdvertisedLabel.')
class AdvertisedLabel(TextualConvention, Integer32):
    description = 'Advertised Label'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 99))
    namedValues = NamedValues(("implicitnull", 1), ("nonreserved", 99))

wwpLeosRsvpteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1))
wwpLeosRsvpteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1))
wwpLeosRsvpte = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2))
wwpLeosRsvpteAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteAdminStatus.setDescription('The desired administrative state of RSVP-TE.')
wwpLeosRsvpteOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("goingDown", 4), ("actFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteOperStatus.setDescription('The current operational state of RSVP-TE.')
wwpLeosRsvpteRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 65)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteRetryInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRetryInterval.setDescription('The persistent tunnel retry interval. This is the interval between the first failure of a persistent tunnel and the first attempt to re-establish the tunnel. This cannot be changed while admin status is enable or oper status is up')
wwpLeosRsvpteRetryInfiniteState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteRetryInfiniteState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRetryInfiniteState.setDescription('The persistent tunnel retry infinity. This is the State which when on will trigger RSVP-TE to try to restore the tunnels infinite times. This object can only be set if RSVP-TE is globally disabled.')
wwpLeosRsvpteRetryMax = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRetryMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRetryMax.setDescription("The maximum number of retry attempts that will be made before a persistent tunnel is deemed inoperable. Once in this state, a management agent should set mplsTunnelAdminStatus to 'up' to attempt to reestablish the tunnel. This field is not used when wwpLeosRsvpteRetryInfiniteState is on ")
wwpLeosRsvpteRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 6), Integer32().clone(30000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRefreshInterval.setDescription('This RSVP-TE value, R, which is used to set the average interval between refresh path and resv messages.')
wwpLeosRsvpteRefreshMultiple = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRefreshMultiple.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRefreshMultiple.setDescription('The RSVP-TE value, K, which is the number of unresponded Path or Resv refresh attempts which must be made, spaced by the refresh interval before the state is deemed to have timed out.')
wwpLeosRsvpteRfrshSlewDenom = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRfrshSlewDenom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRfrshSlewDenom.setDescription('The denominator of the fraction, SlewMax, which is the maximum allowable increase in the refresh interval, R, to prevent state timeout while changing R. R is increased by this fraction until it reaches the new desired value.')
wwpLeosRsvpteRfrshSlewNumerator = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRfrshSlewNumerator.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRfrshSlewNumerator.setDescription('The numerator of the fraction, SlewMax, which is the maximum allowable increase in the refresh interval, R, to prevent state timeout while changing R. R is increased by this fraction until it reaches the new desired value.')
wwpLeosRsvpteBlockadeMultiple = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214783647)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteBlockadeMultiple.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteBlockadeMultiple.setDescription('The RSVP-TE value, Kb, which is the number of refresh timeout periods after which blockade state is deleted.')
wwpLeosRsvpteLSPSetupPriority = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteLSPSetupPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteLSPSetupPriority.setDescription('The setup priority to apply to LSPs which are not signalling this parameter. 0 represents the highest priority, 7 the lowest. The value of this object must be numerically more or equal (so lower or equal priority) than the value of the holding priority object.')
wwpLeosRsvpteLSPHoldingPriority = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteLSPHoldingPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteLSPHoldingPriority.setDescription('The holding priority to apply to LSPs which are not signalling this parameter. 0 represents the highest priority, 7 the lowest. The value of this object must be numerically less or equal (so higher or equal priority) than the value of the holding priority object.')
wwpLeosRsvpteUseHopByHop = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteUseHopByHop.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteUseHopByHop.setDescription('A flag to indicate that RSVP-TE should use the hop by hop addressing scheme for PATH and PATH-TEAR messages it sends. If set then the IP addresses used in the IP header of PATH messages forwarded by RSVP-TE set source as the local outgoing interface IP address, and destination as the next hop router IP address.')
wwpLeosRsvpteRestartCapable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRestartCapable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRestartCapable.setDescription('A flag to indicate whether the local node should advertise itself as restart capable.')
wwpLeosRsvpteRestartTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 15), Unsigned32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRestartTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRestartTime.setDescription('The time in milliseconds that the local node takes to restart RSVP-TE and the communication channel used for RSVP-TE communication. This is advertised to neighbors in the Restart_Cap object in Hello messages. Only used if wwpLeosRsvpteRestartCapable is set to true.')
wwpLeosRsvpteRecoveryTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 16), Unsigned32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteRecoveryTime.setDescription('The period of time in milliseconds that the local node would like neighbors to take to resyncronize RSVP-TE and MPLS forwarding information after the re-establishment of Hello connectivity. This is advertised to neighbors in the Restart_Cap object in Hello messages. A value of zero indicates that the node does not support resynchronization following failure of the local node. A value of 0xFFFFFFFF indicates an infinite recovery time. Only used if wwpLeosRsvpteRestartCapable is set to true.')
wwpLeosRsvpteMinPeerRestart = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteMinPeerRestart.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteMinPeerRestart.setDescription('The mininum period of time in milliseconds that RSVP-TE should wait for a restart capable neighbor to regain Hello connectivity before invoking procedures related to communication loss. RSVP-TE will wait for the maximum of this time and the restart_time advertised in the RESTART_CAP object in Hello messages from the neighbor.')
wwpLeosRsvpteIfTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosRsvpteIfTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfTable.setDescription('A table of interfaces that RSVP-TE can be enabled on.')
wwpLeosRsvpteIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-RSVPTE-MIB", "wwpLeosRsvpteIfIndex"))
if mibBuilder.loadTexts: wwpLeosRsvpteIfEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfEntry.setDescription('WWP Descr.')
wwpLeosRsvpteIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteIfName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfName.setDescription('Interface Name')
wwpLeosRsvpteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: wwpLeosRsvpteIfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfIndex.setDescription('Interface Index')
wwpLeosRsvpteIfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfIpAddr.setDescription('Interface IP Address')
wwpLeosRsvpteIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 9216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteIfMtu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfMtu.setDescription('RSVP-TE Interface MTU')
wwpLeosRsvpteIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfAdminStatus.setDescription('Desired RSVP-TE status on this Interface')
wwpLeosRsvpteIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRsvpteIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfOperStatus.setDescription('RSVP-TE Operational Status on this Interface')
wwpLeosRsvpteIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfHelloInterval.setDescription('RSVP-TE hello message interval. ')
wwpLeosRsvpteIfHelloTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteIfHelloTolerance.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfHelloTolerance.setDescription('RSVP-TE hello tolerance defines number of hello interval which may pass without receiving a successful Hello message from a partner before the Hello session times out.')
wwpLeosRsvpteIfAdvertisedLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 30, 1, 2, 1, 1, 9), AdvertisedLabel().clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRsvpteIfAdvertisedLabel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRsvpteIfAdvertisedLabel.setDescription('This attribute decides what kind of a Label will be advertised by RSVP-TE for a Label Request received on this L3 Interface')
mibBuilder.exportSymbols("WWP-LEOS-RSVPTE-MIB", wwpLeosRsvpteUseHopByHop=wwpLeosRsvpteUseHopByHop, wwpLeosRsvpteLSPHoldingPriority=wwpLeosRsvpteLSPHoldingPriority, wwpLeosRsvpteOperStatus=wwpLeosRsvpteOperStatus, wwpLeosRsvpteObjects=wwpLeosRsvpteObjects, wwpLeosRsvpteIfAdminStatus=wwpLeosRsvpteIfAdminStatus, wwpLeosRsvpteIfMtu=wwpLeosRsvpteIfMtu, wwpLeosRsvpteMIBObjects=wwpLeosRsvpteMIBObjects, wwpLeosRsvpteRfrshSlewNumerator=wwpLeosRsvpteRfrshSlewNumerator, wwpLeosRsvpteIfName=wwpLeosRsvpteIfName, wwpLeosRsvpteIfAdvertisedLabel=wwpLeosRsvpteIfAdvertisedLabel, wwpLeosRsvpteRecoveryTime=wwpLeosRsvpteRecoveryTime, wwpLeosRsvpteRestartTime=wwpLeosRsvpteRestartTime, wwpLeosRsvpteMIB=wwpLeosRsvpteMIB, wwpLeosRsvpteRefreshInterval=wwpLeosRsvpteRefreshInterval, wwpLeosRsvpteIfIndex=wwpLeosRsvpteIfIndex, wwpLeosRsvpteIfIpAddr=wwpLeosRsvpteIfIpAddr, wwpLeosRsvpteIfTable=wwpLeosRsvpteIfTable, wwpLeosRsvpteRetryInfiniteState=wwpLeosRsvpteRetryInfiniteState, wwpLeosRsvpteRestartCapable=wwpLeosRsvpteRestartCapable, wwpLeosRsvpteRfrshSlewDenom=wwpLeosRsvpteRfrshSlewDenom, wwpLeosRsvpteRetryMax=wwpLeosRsvpteRetryMax, wwpLeosRsvpteIfHelloInterval=wwpLeosRsvpteIfHelloInterval, wwpLeosRsvpteIfHelloTolerance=wwpLeosRsvpteIfHelloTolerance, wwpLeosRsvpteMinPeerRestart=wwpLeosRsvpteMinPeerRestart, PYSNMP_MODULE_ID=wwpLeosRsvpteMIB, wwpLeosRsvpteLSPSetupPriority=wwpLeosRsvpteLSPSetupPriority, wwpLeosRsvpteRefreshMultiple=wwpLeosRsvpteRefreshMultiple, AdvertisedLabel=AdvertisedLabel, wwpLeosRsvpte=wwpLeosRsvpte, wwpLeosRsvpteIfEntry=wwpLeosRsvpteIfEntry, wwpLeosRsvpteBlockadeMultiple=wwpLeosRsvpteBlockadeMultiple, wwpLeosRsvpteAdminStatus=wwpLeosRsvpteAdminStatus, wwpLeosRsvpteRetryInterval=wwpLeosRsvpteRetryInterval, wwpLeosRsvpteIfOperStatus=wwpLeosRsvpteIfOperStatus)
