#
# PySNMP MIB module EATON-EPDU-MA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EATON-EPDU-MA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
pduAgent, = mibBuilder.importSymbols("EATON-OIDS", "pduAgent")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Gauge32, Counter64, iso, IpAddress, Integer32, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, TimeTicks, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Counter64", "iso", "IpAddress", "Integer32", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "TimeTicks", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
eatonEpduMa = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 6, 6, 6))
eatonEpduMa.setRevisions(('2008-11-12 00:00', '2008-03-14 00:00', '2007-02-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eatonEpduMa.setRevisionsDescriptions(('Modified MIB to import pduAgent from EATON-OIDS. Imported Unsigned32 from SNMPv2-SMI. Renamed MIB name from PDU-MIB to EATON-EPDU-MA-MIB. Renamed MIB file name from Ma ePDU.mib to EATON-EPDU-MA-MIB. Cleanup syntax.', 'Modified MIB in effort to better support HP Openview and other SNMP managers.', 'Updated version for remote access to pdu.',))
if mibBuilder.loadTexts: eatonEpduMa.setLastUpdated('200811120000Z')
if mibBuilder.loadTexts: eatonEpduMa.setOrganization('Eaton Corporation')
if mibBuilder.loadTexts: eatonEpduMa.setContactInfo(' Author: Eaton Corporation postal: Eaton Corporation Coventry, West Midlands, CV6 6NY UK Technical Resource Center phone numbers United States: 1.800.843.9433 or 919.870.3028 Canada: 1.800.461.9166 ext. 260 All other countries: Call your local service representative.')
if mibBuilder.loadTexts: eatonEpduMa.setDescription('The MIB module for Eaton ePDUs (Enclosed Power Distribution Units) -Managed Model.')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9))
info = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3))
unitReadings = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2))
class MilliAmps(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with current sensors. If the underlying hardware sensor indicates 1 amp, then the SNMP agent will report a value of 1000 milliamps. The value is scaled in this manner as a way to deal with floating point types that SNMP does not currently support.'
    status = 'current'
    displayHint = 'd milliamps'

class MilliVolts(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with voltage sensors. If the underlying hardware sensor indicates 1 volts, then the SNMP agent will report a value of 1000 millivolts. The value is scaled in this manner as a way to deal with floating point types that SNMP does not currently support.'
    status = 'current'
    displayHint = 'd millivolts'

class Watts(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with active power sensors. If the underlying hardware sensor indicates 1 watt, then the SNMP agent will report a value of 1 watt. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd watt'

class VoltAmps(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with apparent power sensors. If the underlying hardware sensor indicates 1 volt-amp, then the SNMP agent will report a value of 1 volt-amp. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd volt-amp'

class DegreesCelsius(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with temperature sensors. If the underlying hardware sensor indicates 1 degree Celsius, then the SNMP agent will report a value of 1 degree Celsius. No scaling is performed for this type.'
    status = 'current'
    displayHint = 'd degree Celsius'

class RelativeHumidity(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with humidity sensors. Relative humidity is expressed as percentage and is defined as the ratio of the partial pressure of water vapor in a gaseous mixture of air and water vapor to the saturated vapor pressure of water at a given temperature.'
    status = 'current'
    displayHint = 'd %'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class PowerFactorPercentage(TextualConvention, Unsigned32):
    description = 'Data type for reporting sensor readings and thresholds associated with power factor sensors. The power factor of an AC power system is defined as the ratio of the real or active power to the apparent power and is a number between 0 and 1. A PowerFactorPercentage value is calculated by taking this ratio and multiplying by 100. The power factor is used to indicate how efficiently a particular load is utilizing energy.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The current firmware version')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number.')
ipAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
if mibBuilder.loadTexts: ipAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option.')
netmask = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
if mibBuilder.loadTexts: netmask.setDescription('The current Netmask. A value of 0.0.0.0 indicates an error or an unset option.')
gateway = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('current')
if mibBuilder.loadTexts: gateway.setDescription('The current Gateway. A value of 0.0.0.0 indicates an error or an unset option.')
mac = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mac.setStatus('current')
if mibBuilder.loadTexts: mac.setDescription('The current MAC address.')
hardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRev.setStatus('current')
if mibBuilder.loadTexts: hardwareRev.setDescription('The hardware revision number.')
userName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The login of a user.')
objectName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectName.setStatus('current')
if mibBuilder.loadTexts: objectName.setDescription('The model type of the device')
objectInstance = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: objectInstance.setStatus('current')
if mibBuilder.loadTexts: objectInstance.setDescription('The device name')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: targetUser.setStatus('current')
if mibBuilder.loadTexts: targetUser.setDescription('The user record being operated on')
groupName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: groupName.setStatus('current')
if mibBuilder.loadTexts: groupName.setDescription('The group record being operated on')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
if mibBuilder.loadTexts: imageVersion.setDescription('The version of the Upgrade image')
sensorDescr = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sensorDescr.setStatus('current')
if mibBuilder.loadTexts: sensorDescr.setDescription('Sensor description indicating which sensor experienced a threshold exceeded event. When applicable the description will indicate the sensor number.')
thresholdDescr = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdDescr.setStatus('current')
if mibBuilder.loadTexts: thresholdDescr.setDescription('Threshold description indicating which configured threshold has been triggered (or cleared).')
thresholdSeverity = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdSeverity.setStatus('current')
if mibBuilder.loadTexts: thresholdSeverity.setDescription('String (Warning, Critical, etc...) indicating the severity of the threshold which has been triggered (or cleared).')
thresholdEventType = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: thresholdEventType.setStatus('current')
if mibBuilder.loadTexts: thresholdEventType.setDescription('String (triggered, cleared) indicating if the threshold event indicates that a configured threshold has been triggered or cleared.')
status = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('The success status of an operation')
slaveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveIpAddress.setStatus('current')
if mibBuilder.loadTexts: slaveIpAddress.setDescription('In a shepherding configuration, this is the IP address of slave PDU. A value of 0.0.0.0 indicates an error or an unset option.')
outletCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
if mibBuilder.loadTexts: outletCount.setDescription('The number of outlets (regardless of their current state) present on this pdu.')
outletTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2), )
if mibBuilder.loadTexts: outletTable.setStatus('current')
if mibBuilder.loadTexts: outletTable.setDescription('A list of outlet entries. The number of entries is given by the value of outletCount.')
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1), ).setIndexNames((0, "EATON-EPDU-MA-MIB", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setStatus('current')
if mibBuilder.loadTexts: outletEntry.setDescription('An outlet entry containing objects at the for a particular outlet.')
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: outletIndex.setStatus('current')
if mibBuilder.loadTexts: outletIndex.setDescription('A unique value for each outlet. Its value ranges between 1 and the value of outletCount.')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
if mibBuilder.loadTexts: outletLabel.setDescription('A textual string containing information about the outlet.')
outletOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("error", -1), ("off", 0), ("on", 1), ("cycling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletOperationalState.setStatus('current')
if mibBuilder.loadTexts: outletOperationalState.setDescription('A value for each outlet which describes the operational state of the outlet. It is also used to set the operational state of the outlet')
outletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 4), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCurrent.setStatus('current')
if mibBuilder.loadTexts: outletCurrent.setDescription('A unique value for the current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 5), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletMaxCurrent.setStatus('current')
if mibBuilder.loadTexts: outletMaxCurrent.setDescription('A unique value for the max. current sensor attached to the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 6), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletVoltage.setStatus('current')
if mibBuilder.loadTexts: outletVoltage.setDescription('A unique value for the voltage sensor attached to the outlet.This value is reported in millivolts (1/1000th of a volt)')
outletActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 7), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletActivePower.setStatus('current')
if mibBuilder.loadTexts: outletActivePower.setDescription('A unique value for the active power sensor attached to the outlet. This value is reported in Watts.')
outletApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 8), VoltAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletApparentPower.setStatus('current')
if mibBuilder.loadTexts: outletApparentPower.setDescription('A unique value for the apparent power sensor attached to the outlet. This value is reported in Volt-Amps')
outletPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 9), PowerFactorPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerFactor.setStatus('current')
if mibBuilder.loadTexts: outletPowerFactor.setDescription('A unique value for the power factor of the outlet. The reading represents a percentage in the range of 0% to 100%.')
outletCurrentUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 21), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: outletCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) current threshold for the outlet. This value is reported in milliamps (1/1000th of an amp)')
outletCurrentUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 2, 2, 1, 23), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: outletCurrentUpperCritical.setDescription('The value of the upper critical current threshold for the outlet. This value is reported in milliamps (1/1000th of an amp)')
unitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 1), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrent.setStatus('current')
if mibBuilder.loadTexts: unitCurrent.setDescription("The value for the unit's current sensor in millamps.")
unitVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 2), MilliVolts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitVoltage.setStatus('current')
if mibBuilder.loadTexts: unitVoltage.setDescription("The value for the unit's voltage sensor in millivolts.")
unitActivePower = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 3), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitActivePower.setStatus('current')
if mibBuilder.loadTexts: unitActivePower.setDescription("The value for the unit's voltage sensor in volt-amps.")
unitApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 4), Watts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitApparentPower.setStatus('current')
if mibBuilder.loadTexts: unitApparentPower.setDescription("The value for the unit's voltage sensor in volt-amps.")
unitCpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 5), DegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCpuTemp.setStatus('current')
if mibBuilder.loadTexts: unitCpuTemp.setDescription("The value for the unit's CPU temperature sensor in degrees Celsius.")
unitCircuitBreak0State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unavailable", -1), ("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak0State.setStatus('current')
if mibBuilder.loadTexts: unitCircuitBreak0State.setDescription("The value for the unit's circuit breaker state sensor 0.")
unitCircuitBreak1State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unavailable", -1), ("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak1State.setStatus('current')
if mibBuilder.loadTexts: unitCircuitBreak1State.setDescription("The value for the unit's circuit breaker state sensor 1.")
unitCircuitBreak2State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unavailable", -1), ("ok", 0), ("tripped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak2State.setStatus('current')
if mibBuilder.loadTexts: unitCircuitBreak2State.setDescription("The value for the unit's circuit breaker state sensor 2.")
unitCircuitBreak0Current = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 40), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak0Current.setStatus('current')
if mibBuilder.loadTexts: unitCircuitBreak0Current.setDescription("The value for the unit's circuit breaker current sensor 0.")
unitCircuitBreak1Current = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 41), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak1Current.setStatus('current')
if mibBuilder.loadTexts: unitCircuitBreak1Current.setDescription("The value for the unit's circuit breaker current sensor 1.")
unitCircuitBreak2Current = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 42), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCircuitBreak2Current.setStatus('current')
if mibBuilder.loadTexts: unitCircuitBreak2Current.setDescription("The value for the unit's circuit breaker current sensor 2.")
unitVoltageLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 60), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerWarning.setStatus('current')
if mibBuilder.loadTexts: unitVoltageLowerWarning.setDescription('The value of the lower warning (non-critical) unit level voltage threshold.')
unitVoltageLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 61), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageLowerCritical.setStatus('current')
if mibBuilder.loadTexts: unitVoltageLowerCritical.setDescription('The value of the lower critical unit level voltage threshold.')
unitVoltageUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 62), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperWarning.setStatus('current')
if mibBuilder.loadTexts: unitVoltageUpperWarning.setDescription('The value of the upper warning (non-critical) unit level voltage threshold.')
unitVoltageUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 63), MilliVolts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitVoltageUpperCritical.setStatus('current')
if mibBuilder.loadTexts: unitVoltageUpperCritical.setDescription('The value of the upper critical unit level voltage threshold.')
unitCurrentUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 70), MilliAmps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitCurrentUpperWarning.setStatus('current')
if mibBuilder.loadTexts: unitCurrentUpperWarning.setDescription('The value of the upper warning (non-critical) unit level current threshold.')
unitCurrentUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 71), MilliAmps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitCurrentUpperCritical.setStatus('current')
if mibBuilder.loadTexts: unitCurrentUpperCritical.setDescription('The value of the upper critical unit level current threshold. NOTE: This particular threshold is NOT settable ')
unitTempLowerWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 80), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerWarning.setStatus('current')
if mibBuilder.loadTexts: unitTempLowerWarning.setDescription('The value of the lower warning (non-critical) unit level temperature threshold.')
unitTempLowerCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 81), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempLowerCritical.setStatus('current')
if mibBuilder.loadTexts: unitTempLowerCritical.setDescription('The value of the lower critical unit level temperature threshold.')
unitTempUpperWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 82), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperWarning.setStatus('current')
if mibBuilder.loadTexts: unitTempUpperWarning.setDescription('The value of the upper warning (non-critical) unit level temperature threshold.')
unitTempUpperCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 1, 3, 1, 83), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTempUpperCritical.setStatus('current')
if mibBuilder.loadTexts: unitTempUpperCritical.setDescription('The value of the upper critical unit level temperature threshold.')
tempSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorCount.setStatus('current')
if mibBuilder.loadTexts: tempSensorCount.setDescription('The number of external temperature sensors (regardless of their current state) present on this pdu.')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempSensorTable.setDescription('A list of temperature sensor entries. The number of entries is given by the value of tempSensorCount.')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1), ).setIndexNames((0, "EATON-EPDU-MA-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempSensorEntry.setDescription('An entry containing sensor reading and threshold settings for a particular temperature sensor.')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: tempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: tempSensorIndex.setDescription('A unique value for each temperature sensor. Its value ranges between 1 and tempSensorCount.')
tempSensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensorLabel.setStatus('current')
if mibBuilder.loadTexts: tempSensorLabel.setDescription('A settable human-readable label for the external temperature sensor. One possible use for this label is to convey sensor location.')
temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 3), DegreesCelsius()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('current')
if mibBuilder.loadTexts: temperature.setDescription('The value of the external temperature sensor reported in degrees celsius.')
tempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 4), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerWarning.setStatus('current')
if mibBuilder.loadTexts: tempLowerWarning.setDescription('The value of the lower warning (non-critical) threshold.')
tempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 5), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperWarning.setStatus('current')
if mibBuilder.loadTexts: tempUpperWarning.setDescription('The value of the upper warning (non-critical) threshold.')
tempLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 6), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerCritical.setStatus('current')
if mibBuilder.loadTexts: tempLowerCritical.setDescription('The value of the lower critical threshold.')
tempUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 7), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperCritical.setStatus('current')
if mibBuilder.loadTexts: tempUpperCritical.setDescription('The value of the upper critical threshold.')
tempLowerWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 8), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerWarningReset.setStatus('current')
if mibBuilder.loadTexts: tempLowerWarningReset.setDescription('The value of the lower warning (non-critical) reset/hysteresis value.')
tempUpperWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 9), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperWarningReset.setStatus('current')
if mibBuilder.loadTexts: tempUpperWarningReset.setDescription('The value of the upper warning (non-critical) reset/hysteresis value.')
tempLowerCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 10), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowerCriticalReset.setStatus('current')
if mibBuilder.loadTexts: tempLowerCriticalReset.setDescription('The value of the lower critical reset/hysteresis value.')
tempUpperCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 2, 1, 11), DegreesCelsius()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempUpperCriticalReset.setStatus('current')
if mibBuilder.loadTexts: tempUpperCriticalReset.setDescription('The value of the upper critical reset/hysteresis value.')
humiditySensorCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humiditySensorCount.setStatus('current')
if mibBuilder.loadTexts: humiditySensorCount.setDescription('The number of external humidity sensors (regardless of their current state) present on this pdu.')
humiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4), )
if mibBuilder.loadTexts: humiditySensorTable.setStatus('current')
if mibBuilder.loadTexts: humiditySensorTable.setDescription('A list of humidity sensor entries. The number of entries is given by the value of humiditySensorCount.')
humiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1), ).setIndexNames((0, "EATON-EPDU-MA-MIB", "humiditySensorIndex"))
if mibBuilder.loadTexts: humiditySensorEntry.setStatus('current')
if mibBuilder.loadTexts: humiditySensorEntry.setDescription('An entry containing sensor reading and threshold settings for a particular humidity sensor.')
humiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: humiditySensorIndex.setStatus('current')
if mibBuilder.loadTexts: humiditySensorIndex.setDescription('A unique value for each humidity sensor. Its value ranges between 1 and humiditySensorCount.')
humiditySensorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humiditySensorLabel.setStatus('current')
if mibBuilder.loadTexts: humiditySensorLabel.setDescription('A settable human-readable label for the external humidity sensor. One possible use for this label is to convey sensor location.')
humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 3), RelativeHumidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidity.setStatus('current')
if mibBuilder.loadTexts: humidity.setDescription('The value of the external humidity sensor reported as relative humidity (a percentage).')
humidityLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 4), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerWarning.setStatus('current')
if mibBuilder.loadTexts: humidityLowerWarning.setDescription('The value of the lower warning (non-critical) threshold.')
humidityUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 5), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperWarning.setStatus('current')
if mibBuilder.loadTexts: humidityUpperWarning.setDescription('The value of the upper warning (non-critical) threshold.')
humidityLowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 6), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerCritical.setStatus('current')
if mibBuilder.loadTexts: humidityLowerCritical.setDescription('The value of the lower critical threshold.')
humidityUpperCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 7), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperCritical.setStatus('current')
if mibBuilder.loadTexts: humidityUpperCritical.setDescription('The value of the upper critical threshold.')
humidityLowerWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 8), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerWarningReset.setStatus('current')
if mibBuilder.loadTexts: humidityLowerWarningReset.setDescription('The value of the lower warning (non-critical) reset/hysteresis value.')
humidityUpperWarningReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 9), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperWarningReset.setStatus('current')
if mibBuilder.loadTexts: humidityUpperWarningReset.setDescription('The value of the upper warning (non-critical) reset/hysteresis value.')
humidityLowerCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 10), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowerCriticalReset.setStatus('current')
if mibBuilder.loadTexts: humidityLowerCriticalReset.setDescription('The value of the lower critical reset/hysteresis value.')
humidityUpperCriticalReset = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 2, 4, 1, 11), RelativeHumidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityUpperCriticalReset.setStatus('current')
if mibBuilder.loadTexts: humidityUpperCriticalReset.setDescription('The value of the upper critical reset/hysteresis value.')
rebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 1)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"))
if mibBuilder.loadTexts: rebootStarted.setStatus('current')
if mibBuilder.loadTexts: rebootStarted.setDescription('The reboot process has started')
rebootCompleted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 2)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"))
if mibBuilder.loadTexts: rebootCompleted.setStatus('current')
if mibBuilder.loadTexts: rebootCompleted.setDescription('The reboot process is complete')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 3)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
if mibBuilder.loadTexts: userLogin.setDescription('A user logged in')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 4)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
if mibBuilder.loadTexts: userLogout.setDescription('A user logged out')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 5)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailure.setDescription('A user authentication attempt failed')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 8)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userSessionTimeout.setDescription('A user timed out from the device')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 11)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "targetUser"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
if mibBuilder.loadTexts: userAdded.setDescription('A user was added to the system')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 12)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "targetUser"))
if mibBuilder.loadTexts: userModified.setStatus('current')
if mibBuilder.loadTexts: userModified.setDescription('A user account was modified')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 13)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "targetUser"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
if mibBuilder.loadTexts: userDeleted.setDescription('A user was deleted from the system')
groupAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 14)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "groupName"))
if mibBuilder.loadTexts: groupAdded.setStatus('current')
if mibBuilder.loadTexts: groupAdded.setDescription('A group was added to the system')
groupModified = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 15)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "groupName"))
if mibBuilder.loadTexts: groupModified.setStatus('current')
if mibBuilder.loadTexts: groupModified.setDescription('A group was modified')
groupDeleted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 16)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "groupName"))
if mibBuilder.loadTexts: groupDeleted.setStatus('current')
if mibBuilder.loadTexts: groupDeleted.setDescription('A group was deleted from the system')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 20)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"), ("EATON-EPDU-MA-MIB", "imageVersion"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateStarted.setDescription('The device update has started')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 22)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
if mibBuilder.loadTexts: userBlocked.setDescription('A blocked user tried to log in')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 23)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"), ("EATON-EPDU-MA-MIB", "outletLabel"), ("EATON-EPDU-MA-MIB", "outletOperationalState"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
if mibBuilder.loadTexts: powerControl.setDescription('An outlet has been switched')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 24)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "targetUser"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: userPasswordChanged.setDescription('A user password was changed')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 28)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "status"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
if mibBuilder.loadTexts: passwordSettingsChanged.setDescription('Strong password settings changed ')
firmwareFileDiscarded = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 36)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"))
if mibBuilder.loadTexts: firmwareFileDiscarded.setStatus('current')
if mibBuilder.loadTexts: firmwareFileDiscarded.setDescription('A firmware file discarded ')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 38)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareValidationFailed.setDescription('A firmware validation failed ')
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 39)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "ipAddress"))
if mibBuilder.loadTexts: securityViolation.setStatus('current')
if mibBuilder.loadTexts: securityViolation.setDescription('Security violation.')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 41)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "userName"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
if mibBuilder.loadTexts: logFileCleared.setDescription('The log file has been cleared.')
thresholdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 45)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "ipAddress"), ("EATON-EPDU-MA-MIB", "sensorDescr"), ("EATON-EPDU-MA-MIB", "thresholdDescr"), ("EATON-EPDU-MA-MIB", "thresholdSeverity"), ("EATON-EPDU-MA-MIB", "thresholdEventType"))
if mibBuilder.loadTexts: thresholdAlarm.setStatus('current')
if mibBuilder.loadTexts: thresholdAlarm.setDescription("Configured sensor theshold event. The 'thresholdType' variable will indicate whether or not the threshold triggered or cleared")
outletGroupingConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 0, 50)).setObjects(("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "ipAddress"), ("EATON-EPDU-MA-MIB", "slaveIpAddress"))
if mibBuilder.loadTexts: outletGroupingConnectivityLost.setStatus('current')
if mibBuilder.loadTexts: outletGroupingConnectivityLost.setDescription('Master PDU lost contact with the slave PDU in an outlet grouping configuration.')
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 1, 1)).setObjects(("EATON-EPDU-MA-MIB", "infoGroup"), ("EATON-EPDU-MA-MIB", "outletsGroup"), ("EATON-EPDU-MA-MIB", "unitSensorsGroup"), ("EATON-EPDU-MA-MIB", "externalTemperatureGroup"), ("EATON-EPDU-MA-MIB", "externalHumidityGroup"), ("EATON-EPDU-MA-MIB", "trapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
if mibBuilder.loadTexts: compliance.setDescription('The requirements for conformance to the PDU-MIB.')
infoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 1)).setObjects(("EATON-EPDU-MA-MIB", "firmwareVersion"), ("EATON-EPDU-MA-MIB", "serialNumber"), ("EATON-EPDU-MA-MIB", "ipAddress"), ("EATON-EPDU-MA-MIB", "netmask"), ("EATON-EPDU-MA-MIB", "gateway"), ("EATON-EPDU-MA-MIB", "mac"), ("EATON-EPDU-MA-MIB", "hardwareRev"), ("EATON-EPDU-MA-MIB", "userName"), ("EATON-EPDU-MA-MIB", "objectName"), ("EATON-EPDU-MA-MIB", "objectInstance"), ("EATON-EPDU-MA-MIB", "targetUser"), ("EATON-EPDU-MA-MIB", "groupName"), ("EATON-EPDU-MA-MIB", "imageVersion"), ("EATON-EPDU-MA-MIB", "sensorDescr"), ("EATON-EPDU-MA-MIB", "thresholdDescr"), ("EATON-EPDU-MA-MIB", "thresholdSeverity"), ("EATON-EPDU-MA-MIB", "thresholdEventType"), ("EATON-EPDU-MA-MIB", "status"), ("EATON-EPDU-MA-MIB", "slaveIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    infoGroup = infoGroup.setStatus('current')
if mibBuilder.loadTexts: infoGroup.setDescription('A collection of objects providing basic information about the pdu.')
outletsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 2)).setObjects(("EATON-EPDU-MA-MIB", "outletCount"), ("EATON-EPDU-MA-MIB", "outletLabel"), ("EATON-EPDU-MA-MIB", "outletOperationalState"), ("EATON-EPDU-MA-MIB", "outletCurrent"), ("EATON-EPDU-MA-MIB", "outletMaxCurrent"), ("EATON-EPDU-MA-MIB", "outletVoltage"), ("EATON-EPDU-MA-MIB", "outletActivePower"), ("EATON-EPDU-MA-MIB", "outletApparentPower"), ("EATON-EPDU-MA-MIB", "outletPowerFactor"), ("EATON-EPDU-MA-MIB", "outletCurrentUpperWarning"), ("EATON-EPDU-MA-MIB", "outletCurrentUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    outletsGroup = outletsGroup.setStatus('current')
if mibBuilder.loadTexts: outletsGroup.setDescription('A collection of objects providing basic information about the outlets, including sensor readings.')
unitSensorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 4)).setObjects(("EATON-EPDU-MA-MIB", "unitCurrent"), ("EATON-EPDU-MA-MIB", "unitVoltage"), ("EATON-EPDU-MA-MIB", "unitActivePower"), ("EATON-EPDU-MA-MIB", "unitApparentPower"), ("EATON-EPDU-MA-MIB", "unitCpuTemp"), ("EATON-EPDU-MA-MIB", "unitCircuitBreak0State"), ("EATON-EPDU-MA-MIB", "unitCircuitBreak1State"), ("EATON-EPDU-MA-MIB", "unitCircuitBreak2State"), ("EATON-EPDU-MA-MIB", "unitCircuitBreak0Current"), ("EATON-EPDU-MA-MIB", "unitCircuitBreak1Current"), ("EATON-EPDU-MA-MIB", "unitCircuitBreak2Current"), ("EATON-EPDU-MA-MIB", "unitVoltageLowerWarning"), ("EATON-EPDU-MA-MIB", "unitVoltageUpperWarning"), ("EATON-EPDU-MA-MIB", "unitVoltageLowerCritical"), ("EATON-EPDU-MA-MIB", "unitVoltageUpperCritical"), ("EATON-EPDU-MA-MIB", "unitCurrentUpperWarning"), ("EATON-EPDU-MA-MIB", "unitCurrentUpperCritical"), ("EATON-EPDU-MA-MIB", "unitTempLowerWarning"), ("EATON-EPDU-MA-MIB", "unitTempUpperWarning"), ("EATON-EPDU-MA-MIB", "unitTempLowerCritical"), ("EATON-EPDU-MA-MIB", "unitTempUpperCritical"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    unitSensorsGroup = unitSensorsGroup.setStatus('current')
if mibBuilder.loadTexts: unitSensorsGroup.setDescription('A collection of objects providing unit level sensor readings.')
externalTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 6)).setObjects(("EATON-EPDU-MA-MIB", "tempSensorCount"), ("EATON-EPDU-MA-MIB", "tempSensorLabel"), ("EATON-EPDU-MA-MIB", "temperature"), ("EATON-EPDU-MA-MIB", "tempLowerWarning"), ("EATON-EPDU-MA-MIB", "tempUpperWarning"), ("EATON-EPDU-MA-MIB", "tempLowerCritical"), ("EATON-EPDU-MA-MIB", "tempUpperCritical"), ("EATON-EPDU-MA-MIB", "tempLowerWarningReset"), ("EATON-EPDU-MA-MIB", "tempUpperWarningReset"), ("EATON-EPDU-MA-MIB", "tempLowerCriticalReset"), ("EATON-EPDU-MA-MIB", "tempUpperCriticalReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalTemperatureGroup = externalTemperatureGroup.setStatus('current')
if mibBuilder.loadTexts: externalTemperatureGroup.setDescription('A collection of objects providing external temperature sensor readings and threshold settings.')
externalHumidityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 7)).setObjects(("EATON-EPDU-MA-MIB", "humiditySensorCount"), ("EATON-EPDU-MA-MIB", "humiditySensorLabel"), ("EATON-EPDU-MA-MIB", "humidity"), ("EATON-EPDU-MA-MIB", "humidityLowerWarning"), ("EATON-EPDU-MA-MIB", "humidityUpperWarning"), ("EATON-EPDU-MA-MIB", "humidityLowerCritical"), ("EATON-EPDU-MA-MIB", "humidityUpperCritical"), ("EATON-EPDU-MA-MIB", "humidityLowerWarningReset"), ("EATON-EPDU-MA-MIB", "humidityUpperWarningReset"), ("EATON-EPDU-MA-MIB", "humidityLowerCriticalReset"), ("EATON-EPDU-MA-MIB", "humidityUpperCriticalReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    externalHumidityGroup = externalHumidityGroup.setStatus('current')
if mibBuilder.loadTexts: externalHumidityGroup.setDescription('A collection of objects providing external humidity sensor readings and threshold settings.')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 534, 6, 6, 6, 9, 2, 9)).setObjects(("EATON-EPDU-MA-MIB", "rebootStarted"), ("EATON-EPDU-MA-MIB", "rebootCompleted"), ("EATON-EPDU-MA-MIB", "userLogin"), ("EATON-EPDU-MA-MIB", "userLogout"), ("EATON-EPDU-MA-MIB", "userAuthenticationFailure"), ("EATON-EPDU-MA-MIB", "userSessionTimeout"), ("EATON-EPDU-MA-MIB", "userAdded"), ("EATON-EPDU-MA-MIB", "userModified"), ("EATON-EPDU-MA-MIB", "userDeleted"), ("EATON-EPDU-MA-MIB", "groupAdded"), ("EATON-EPDU-MA-MIB", "groupModified"), ("EATON-EPDU-MA-MIB", "groupDeleted"), ("EATON-EPDU-MA-MIB", "deviceUpdateStarted"), ("EATON-EPDU-MA-MIB", "userBlocked"), ("EATON-EPDU-MA-MIB", "powerControl"), ("EATON-EPDU-MA-MIB", "userPasswordChanged"), ("EATON-EPDU-MA-MIB", "passwordSettingsChanged"), ("EATON-EPDU-MA-MIB", "firmwareFileDiscarded"), ("EATON-EPDU-MA-MIB", "firmwareValidationFailed"), ("EATON-EPDU-MA-MIB", "securityViolation"), ("EATON-EPDU-MA-MIB", "logFileCleared"), ("EATON-EPDU-MA-MIB", "thresholdAlarm"), ("EATON-EPDU-MA-MIB", "outletGroupingConnectivityLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
if mibBuilder.loadTexts: trapsGroup.setDescription('A collection of traps.')
mibBuilder.exportSymbols("EATON-EPDU-MA-MIB", userLogin=userLogin, outletCurrentUpperWarning=outletCurrentUpperWarning, conformance=conformance, userSessionTimeout=userSessionTimeout, outletIndex=outletIndex, groupAdded=groupAdded, DegreesCelsius=DegreesCelsius, temperature=temperature, userModified=userModified, externalHumidityGroup=externalHumidityGroup, firmwareVersion=firmwareVersion, humiditySensorEntry=humiditySensorEntry, unitVoltage=unitVoltage, userName=userName, thresholdEventType=thresholdEventType, outlets=outlets, unitApparentPower=unitApparentPower, userAuthenticationFailure=userAuthenticationFailure, PowerFactorPercentage=PowerFactorPercentage, objectName=objectName, unitCircuitBreak0Current=unitCircuitBreak0Current, compliance=compliance, tempUpperWarningReset=tempUpperWarningReset, humiditySensorTable=humiditySensorTable, MilliAmps=MilliAmps, firmwareValidationFailed=firmwareValidationFailed, groupName=groupName, humidityUpperCritical=humidityUpperCritical, powerControl=powerControl, unitVoltageLowerWarning=unitVoltageLowerWarning, humidityUpperWarningReset=humidityUpperWarningReset, humidityUpperWarning=humidityUpperWarning, passwordSettingsChanged=passwordSettingsChanged, eatonEpduMa=eatonEpduMa, outletActivePower=outletActivePower, imageVersion=imageVersion, outletLabel=outletLabel, externalTemperatureGroup=externalTemperatureGroup, unitTempUpperWarning=unitTempUpperWarning, status=status, ipAddress=ipAddress, PYSNMP_MODULE_ID=eatonEpduMa, tempSensorLabel=tempSensorLabel, gateway=gateway, unitReadings=unitReadings, humiditySensorLabel=humiditySensorLabel, humiditySensorCount=humiditySensorCount, humidity=humidity, traps=traps, rebootStarted=rebootStarted, userAdded=userAdded, thresholdDescr=thresholdDescr, unitCurrent=unitCurrent, infoGroup=infoGroup, securityViolation=securityViolation, outletsGroup=outletsGroup, Watts=Watts, hardwareRev=hardwareRev, VoltAmps=VoltAmps, unitCircuitBreak0State=unitCircuitBreak0State, firmwareFileDiscarded=firmwareFileDiscarded, outletCurrentUpperCritical=outletCurrentUpperCritical, unitTempLowerWarning=unitTempLowerWarning, outletCurrent=outletCurrent, outletGroupingConnectivityLost=outletGroupingConnectivityLost, unitCircuitBreak1Current=unitCircuitBreak1Current, unitActivePower=unitActivePower, compliances=compliances, unitSensorsGroup=unitSensorsGroup, serialNumber=serialNumber, outletOperationalState=outletOperationalState, humidityUpperCriticalReset=humidityUpperCriticalReset, groupModified=groupModified, outletTable=outletTable, humiditySensorIndex=humiditySensorIndex, humidityLowerCritical=humidityLowerCritical, info=info, thresholdAlarm=thresholdAlarm, trapsGroup=trapsGroup, tempSensorIndex=tempSensorIndex, unitTempLowerCritical=unitTempLowerCritical, unitCircuitBreak2Current=unitCircuitBreak2Current, unitCircuitBreak2State=unitCircuitBreak2State, outletPowerFactor=outletPowerFactor, outletVoltage=outletVoltage, humidityLowerWarning=humidityLowerWarning, logFileCleared=logFileCleared, tempUpperCritical=tempUpperCritical, tempSensorTable=tempSensorTable, objectInstance=objectInstance, tempLowerCritical=tempLowerCritical, outletEntry=outletEntry, sensorDescr=sensorDescr, unitCpuTemp=unitCpuTemp, targetUser=targetUser, tempSensorCount=tempSensorCount, unitVoltageUpperCritical=unitVoltageUpperCritical, unitCircuitBreak1State=unitCircuitBreak1State, userBlocked=userBlocked, humidityLowerCriticalReset=humidityLowerCriticalReset, rebootCompleted=rebootCompleted, userPasswordChanged=userPasswordChanged, environmental=environmental, slaveIpAddress=slaveIpAddress, unitVoltageUpperWarning=unitVoltageUpperWarning, unitCurrentUpperWarning=unitCurrentUpperWarning, tempLowerCriticalReset=tempLowerCriticalReset, RelativeHumidity=RelativeHumidity, tempUpperWarning=tempUpperWarning, groups=groups, outletApparentPower=outletApparentPower, netmask=netmask, unit=unit, outletCount=outletCount, groupDeleted=groupDeleted, unitCurrentUpperCritical=unitCurrentUpperCritical, tempLowerWarning=tempLowerWarning, deviceUpdateStarted=deviceUpdateStarted, userDeleted=userDeleted, tempSensorEntry=tempSensorEntry, thresholdSeverity=thresholdSeverity, unitVoltageLowerCritical=unitVoltageLowerCritical, mac=mac, board=board, outletMaxCurrent=outletMaxCurrent, tempLowerWarningReset=tempLowerWarningReset, tempUpperCriticalReset=tempUpperCriticalReset, humidityLowerWarningReset=humidityLowerWarningReset, unitTempUpperCritical=unitTempUpperCritical, MilliVolts=MilliVolts, userLogout=userLogout)
