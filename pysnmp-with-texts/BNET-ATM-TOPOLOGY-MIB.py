#
# PySNMP MIB module BNET-ATM-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BNET-ATM-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
VpiInteger, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "VpiInteger")
s5AtmTop, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5AtmTop")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, MibIdentifier, NotificationType, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Bits, ModuleIdentity, Counter32, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "MibIdentifier", "NotificationType", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Bits", "ModuleIdentity", "Counter32", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bnetAtmTopGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1))
bnetAtmTopLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2))
bnetAtmTopGblStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("topOn", 1), ("topOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnetAtmTopGblStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopGblStatus.setDescription('Indicates if the agent is participating in ATM topology discovery. The values are: topOn(1)....topology is on topOff(2)...topology is off When the value is topOff(2) the status of bnetAtmTopLinkTable entries is undefined and the topolgy discovery is disabled for the entire device. When the value is topOn(1) the status of the topology discovery of a given port is defined by the bnetAtmTopLinksPeerStatus in the bnetAtmTopLinkTable. The agent must save the setting of this object in nonvolatile memory (i.e., save across reboots).')
bnetAtmTopGblLstChg = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblLstChg.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopGblLstChg.setDescription('The value of sysUpTime the last time an entry in the bnetAtmTopLinkTable was added, deleted, or modified. If bnetAtmTopLinkTable has not changed since cold/warm start of the agent, then the value is zero.')
bnetAtmTopGblCurNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblCurNum.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopGblCurNum.setDescription('The current number of entries in the bnetAtmTopLinkTable.')
bnetAtmTopGblCurMibVer = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblCurMibVer.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopGblCurMibVer.setDescription('The current version of the ATM Topology mib. This object is provided by agent so NMS can distinguish variations in the mib as they occur in the future.')
bnetAtmTopGblOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("topOn", 1), ("topOff", 2), ("topUnavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopGblOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopGblOperStatus.setDescription('Indicates if the agent is participating in ATM topology discovery. The values are: topOn(1)....topology is on topOff(2)...topology is off When the value is topOff(2) the status of bnetAtmTopLinkTable entries is undefined and the topolgy discovery is disabled for the entire device. When the value is topOn(1) the status of the topology discovery of a given port is defined by the bnetAtmTopLinksPeerStatus in the bnetAtmTopLinkTable. The agent must save the setting of this object in nonvolatile memory (i.e., save across reboots). When status is topUnavailable(3), this implies that ilmi is not configured on this switch at all.')
bnetAtmTopLinksTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1), )
if mibBuilder.loadTexts: bnetAtmTopLinksTable.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksTable.setDescription('A table of all physical and virtual links attached to this switch. This table is built by aggregating information from all ILMI or PNNI entities in the switch and adding local port information.')
bnetAtmTopLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1), ).setIndexNames((0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksSlotNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksPortNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksLcnIndx"))
if mibBuilder.loadTexts: bnetAtmTopLinksEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksEntry.setDescription('A row in the ATM topology table. Entries in the table can not be created or deleted via SNMP.')
bnetAtmTopLinksSlotNumIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksSlotNumIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksSlotNumIndx.setDescription('Our slot number.')
bnetAtmTopLinksPortNumIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPortNumIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksPortNumIndx.setDescription('Our port number.')
bnetAtmTopLinksLcnIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 3), VpiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksLcnIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksLcnIndx.setDescription(' Logical Channel Number, This will give the VP, when the ILMI entity uses the VP signalling. This allows to have multiple NNI or UNI links on a single port.')
bnetAtmTopLinksTopoState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("notParticipating", 2), ("participating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksTopoState.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksTopoState.setDescription('The current state of link from topology point of view. Possible values: unavailable(1) - third party device or older version of Bay device notParticipating(2) - peer has set TopoOff participating(3) - actively providing topo info. ')
bnetAtmTopLinksPeerSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksPeerSlotNum.setDescription("The peer's slot number.")
bnetAtmTopLinksPeerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksPeerPortNum.setDescription("The peer's port number.")
bnetAtmTopLinksPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksPeerIpAddr.setDescription("The peer's IP address.")
bnetAtmTopLinksPeerChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksPeerChassisType.setDescription('The chassis type of the device that sent the topology message. This number is the leaf of the s5 ChassisType OID registered in s5reg*.mib.')
bnetAtmTopLinksPeerChassisSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksPeerChassisSubType.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksPeerChassisSubType.setDescription('Any relavant additional information of the chassis of the peer Bay device. This is an integer field which could be used as backplane type or any information for stackable devices etc.')
bnetAtmTopLinksEosSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksEosSize.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksEosSize.setDescription('The current size of a row in the table bnetAtmTopLinksEosTable. This allows applications to be able to break apart rows in the table.')
bnetAtmTopLinksEosTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 3), )
if mibBuilder.loadTexts: bnetAtmTopLinksEosTable.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksEosTable.setDescription("A table of encoded octet strings of entries in table bnetAtmTopLinksTable. The number of entries is determined by packing of 'rows' from bnetAtmTopLinksTable.")
bnetAtmTopLinksEosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 3, 1), ).setIndexNames((0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksSlotNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksPortNumIndx"), (0, "BNET-ATM-TOPOLOGY-MIB", "bnetAtmTopLinksLcnIndx"))
if mibBuilder.loadTexts: bnetAtmTopLinksEosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksEosEntry.setDescription('A row in the table of encoded octet strings for table bnetAtmTopLinksTable. Instance returned in Response PDU: On GETs: instance specified is the instance returned. On GET-NEXTs: instance returned is the instance of the last record contained in the octet string. Entries in the table can not be created or deleted via SNMP.')
bnetAtmTopLinksEos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmTopLinksEos.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmTopLinksEos.setDescription("An encoded octet string. On reads it contains an integral number of 'rows' from table bnetAtmTopLinksTable. All 'rows' are the same size which is defined by object bnetAtmTopLinksEosSize.")
mibBuilder.exportSymbols("BNET-ATM-TOPOLOGY-MIB", bnetAtmTopGblStatus=bnetAtmTopGblStatus, bnetAtmTopLinksTable=bnetAtmTopLinksTable, bnetAtmTopLinksPeerPortNum=bnetAtmTopLinksPeerPortNum, bnetAtmTopGblOperStatus=bnetAtmTopGblOperStatus, bnetAtmTopLinksEosEntry=bnetAtmTopLinksEosEntry, bnetAtmTopLinksPeerSlotNum=bnetAtmTopLinksPeerSlotNum, bnetAtmTopGbl=bnetAtmTopGbl, bnetAtmTopGblLstChg=bnetAtmTopGblLstChg, bnetAtmTopLinks=bnetAtmTopLinks, bnetAtmTopLinksSlotNumIndx=bnetAtmTopLinksSlotNumIndx, bnetAtmTopLinksPeerIpAddr=bnetAtmTopLinksPeerIpAddr, bnetAtmTopLinksEosSize=bnetAtmTopLinksEosSize, bnetAtmTopLinksEos=bnetAtmTopLinksEos, bnetAtmTopLinksEosTable=bnetAtmTopLinksEosTable, bnetAtmTopLinksEntry=bnetAtmTopLinksEntry, bnetAtmTopLinksPeerChassisSubType=bnetAtmTopLinksPeerChassisSubType, bnetAtmTopGblCurNum=bnetAtmTopGblCurNum, bnetAtmTopLinksPortNumIndx=bnetAtmTopLinksPortNumIndx, bnetAtmTopLinksLcnIndx=bnetAtmTopLinksLcnIndx, bnetAtmTopLinksPeerChassisType=bnetAtmTopLinksPeerChassisType, bnetAtmTopLinksTopoState=bnetAtmTopLinksTopoState, bnetAtmTopGblCurMibVer=bnetAtmTopGblCurMibVer)
