#
# PySNMP MIB module HPN-ICF-AAL5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-AAL5-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hpnicfAAL5, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfAAL5")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, Bits, NotificationType, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "NotificationType", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpnicfAAL5MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1))
hpnicfAAL5MIB.setRevisions(('2004-11-04 13:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfAAL5MIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpnicfAAL5MIB.setLastUpdated('200411041350Z')
if mibBuilder.loadTexts: hpnicfAAL5MIB.setOrganization('')
if mibBuilder.loadTexts: hpnicfAAL5MIB.setContactInfo('')
if mibBuilder.loadTexts: hpnicfAAL5MIB.setDescription('This MIB file provides AAL5 specific information that are excluded by RFC 1695 ')
hpnicfAal5MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1))
hpnicfAal5MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 0))
hpnicfAal5VccTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfAal5VccTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccTable.setDescription('This table extends AAL5 VCC performance parameters which definded in aal5VccEntry of RFC1695.')
hpnicfAal5VccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-AAL5-MIB", "hpnicfAal5VccVpi"), (0, "HPN-ICF-AAL5-MIB", "hpnicfAal5VccVci"))
if mibBuilder.loadTexts: hpnicfAal5VccEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccEntry.setDescription('This list contains the additional AAL5 VCC performance parameters which are not definded in aal5VccEntry of RFC1695.')
hpnicfAal5VccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: hpnicfAal5VccVpi.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccVpi.setDescription('The VPI value of the AAL5 VCC.')
hpnicfAal5VccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfAal5VccVci.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccVci.setDescription('The VCI value of the AAL5 VCC.')
hpnicfAal5VccInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAal5VccInPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccInPkts.setDescription('The number of AAL5 CPCS PDUs received.')
hpnicfAal5VccOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAal5VccOutPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccOutPkts.setDescription('The number of AAL5 CPCS PDUs transmitted.')
hpnicfAal5VccInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAal5VccInOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccInOctets.setDescription('The number of AAL5 CPCS PDU octets received.')
hpnicfAal5VccOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAal5VccOutOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccOutOctets.setDescription('The number of AAL5 CPCS PDU octets transmitted.')
hpnicfAal5VccState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAal5VccState.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccState.setDescription("Indicates whether the particular virtual circuit is operational. 'Active' indicates the particular virtual circuit is operational. 'Inactive' indicates the circuit is temporarily disabled. 'Invalid' indicates the circuit is deleted")
hpnicfAal5VccStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 0, 1)).setObjects(("HPN-ICF-AAL5-MIB", "hpnicfAal5VccState"))
if mibBuilder.loadTexts: hpnicfAal5VccStateChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5VccStateChange.setDescription('The status of AAL5 VCC.')
hpnicfAal5MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 3))
hpnicfAal5MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 3, 1))
hpnicfAal5MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 3, 2))
hpnicfAal5MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 3, 1, 1)).setObjects(("HPN-ICF-AAL5-MIB", "hpnicfAal5MIBGroup"), ("HPN-ICF-AAL5-MIB", "hpnicfAal5NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAal5MIBCompliance = hpnicfAal5MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5MIBCompliance.setDescription('The compliance statement.')
hpnicfAal5MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 3, 2, 1)).setObjects(("HPN-ICF-AAL5-MIB", "hpnicfAal5VccInPkts"), ("HPN-ICF-AAL5-MIB", "hpnicfAal5VccOutPkts"), ("HPN-ICF-AAL5-MIB", "hpnicfAal5VccInOctets"), ("HPN-ICF-AAL5-MIB", "hpnicfAal5VccOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAal5MIBGroup = hpnicfAal5MIBGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5MIBGroup.setDescription('A collection of objects.')
hpnicfAal5NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 21, 1, 3, 2, 2)).setObjects(("HPN-ICF-AAL5-MIB", "hpnicfAal5VccStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAal5NotificationGroup = hpnicfAal5NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfAal5NotificationGroup.setDescription('Traps which may be used to enhance event driven management of the interface.')
mibBuilder.exportSymbols("HPN-ICF-AAL5-MIB", hpnicfAal5VccEntry=hpnicfAal5VccEntry, hpnicfAal5VccState=hpnicfAal5VccState, hpnicfAal5MIBGroups=hpnicfAal5MIBGroups, hpnicfAal5MIBGroup=hpnicfAal5MIBGroup, hpnicfAAL5MIB=hpnicfAAL5MIB, hpnicfAal5VccInPkts=hpnicfAal5VccInPkts, hpnicfAal5VccOutOctets=hpnicfAal5VccOutOctets, hpnicfAal5NotificationGroup=hpnicfAal5NotificationGroup, hpnicfAal5MIBCompliances=hpnicfAal5MIBCompliances, hpnicfAal5VccVci=hpnicfAal5VccVci, hpnicfAal5VccOutPkts=hpnicfAal5VccOutPkts, hpnicfAal5VccInOctets=hpnicfAal5VccInOctets, hpnicfAal5VccStateChange=hpnicfAal5VccStateChange, hpnicfAal5MIBObjects=hpnicfAal5MIBObjects, hpnicfAal5MIBCompliance=hpnicfAal5MIBCompliance, hpnicfAal5MIBTraps=hpnicfAal5MIBTraps, hpnicfAal5MIBConformance=hpnicfAal5MIBConformance, hpnicfAal5VccTable=hpnicfAal5VccTable, PYSNMP_MODULE_ID=hpnicfAAL5MIB, hpnicfAal5VccVpi=hpnicfAal5VccVpi)
