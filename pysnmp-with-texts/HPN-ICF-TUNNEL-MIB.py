#
# PySNMP MIB module HPN-ICF-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
IPv6FlowLabelOrAny, = mibBuilder.importSymbols("IPV6-FLOW-LABEL-MIB", "IPv6FlowLabelOrAny")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, TimeTicks, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, Bits, NotificationType, Gauge32, MibIdentifier, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "TimeTicks", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "Bits", "NotificationType", "Gauge32", "MibIdentifier", "ModuleIdentity", "Unsigned32")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
hpnicfTunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53))
hpnicfTunnel.setRevisions(('2013-02-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfTunnel.setRevisionsDescriptions(('The initial revision of this MIB module. ',))
if mibBuilder.loadTexts: hpnicfTunnel.setLastUpdated('201302280000Z')
if mibBuilder.loadTexts: hpnicfTunnel.setOrganization('')
if mibBuilder.loadTexts: hpnicfTunnel.setContactInfo('')
if mibBuilder.loadTexts: hpnicfTunnel.setDescription('This MIB contains objects to Manage configuration and Monitor tunnel. ')
class HpnicfTunnelType(TextualConvention, Integer32):
    description = 'Tunnel type definition. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("direct", 2), ("gre", 3), ("minimal", 4), ("l2tp", 5), ("pptp", 6), ("l2f", 7), ("udp", 8), ("atmp", 9), ("msdp", 10), ("sixToFour", 11), ("sixOverFour", 12), ("isatap", 13), ("teredo", 14), ("tunnelModeReserve", 35), ("tunnelModeIPv4Gre", 36), ("tunnelModeIPv6Gre", 37), ("tunnelModeIPv4IPv4", 38), ("tunnelModeIPv4IPv6Config", 39), ("tunnelModeIPv4IPv6Auto", 40), ("tunnelModeIPv4IPv66to4", 41), ("tunnelModeIPv4IPv6Isatap", 42), ("tunnelModeIPv6IPv4", 43), ("tunnelModeIPv6IPv6", 44), ("tunnelModeIPv4UdpDVPN", 45), ("tunnelModeIPv4GreDVPN", 46), ("tunnelModeIPv6UdpDVPN", 47), ("tunnelModeIPv6GreDVPN", 48), ("tunnelModeCrLsp", 49), ("tunnelModeMax", 50), ("tunnelModeIPv4UdpVxlan", 51), ("tunnelModeIPv6UdpVxlan", 52), ("tunnelModeIPv4NVGRE", 53), ("tunnelModeIPv6NVGRE", 54))

hpnicfTunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1))
hpnicfTunnelTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1))
hpnicfTunnelIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfTunnelIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfTable.setDescription('The (conceptual) table containing information on configured tunnels. ')
hpnicfTunnelIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfTunnelIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfEntry.setDescription('An entry (conceptual row) containing the information on a particular configured tunnel. ')
hpnicfTunnelIfEncapsMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 3), HpnicfTunnelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsMethod.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsMethod.setDescription('The encapsulation method used by the tunnel. ')
hpnicfTunnelIfHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfHopLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfHopLimit.setDescription("The IPv4 TTL or IPv6 Hop Limit to use in the outer IP header. A value of 0 indicates that the value is copied from the payload's header. ")
hpnicfTunnelIfSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipsec", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfSecurity.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfSecurity.setDescription('The method used by the tunnel to secure the outer IP header. The value ipsec indicates that IPsec is used between the tunnel endpoints for authentication or encryption or both. More specific security-related information may be available in a MIB module for the security protocol in use. ')
hpnicfTunnelIfTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfTOS.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfTOS.setDescription("The method used to set the high 6 bits (the differentiated services codepoint) of the IPv4 TOS or IPv6 Traffic Class in the outer IP header. A value of -1 indicates that the bits are copied from the payload's header. A value of -2 indicates that a traffic conditioner is invoked and more information may be available in a traffic conditioner MIB module. A value between 0 and 63 inclusive indicates that the bit field is set to the indicated value. ")
hpnicfTunnelIfFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 7), IPv6FlowLabelOrAny()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfFlowLabel.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfFlowLabel.setDescription('The method used to set the IPv6 Flow Label value. This object need not be present in rows where hpnicfTunnelIfAddressType indicates the tunnel is not over IPv6. A value of -1 indicates that a traffic conditioner is invoked and more information may be available in a traffic conditioner MIB. Any other value indicates that the Flow Label field is set to the indicated value. ')
hpnicfTunnelIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfAddressType.setDescription('The type of address in the corresponding hpnicfTunnelIfLocalInetAddress and hpnicfTunnelIfRemoteInetAddress objects. ')
hpnicfTunnelIfLocalInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfLocalInetAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfLocalInetAddress.setDescription('The address of the local endpoint of the tunnel (i.e., the source address used in the outer IP header). If the address is unknown, the value is 0.0.0.0 for IPv4 or :: for IPv6. The type of this object is given by hpnicfTunnelIfAddressType. ')
hpnicfTunnelIfRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelIfRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfRemoteInetAddress.setDescription('The address of the remote endpoint of the tunnel (i.e., the destination address used in the outer IP header). If the address is unknown or the tunnel is not a point-to-point link (e.g., if it is a 6to4 tunnel), the value is 0.0.0.0 for tunnels over IPv4 or :: for tunnels over IPv6. The type of this object is given by hpnicfTunnelIfAddressType. ')
hpnicfTunnelIfEncapsLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsLimit.setReference('RFC 2473, section 4.1.1 ')
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelIfEncapsLimit.setDescription('The maximum number of additional encapsulations permitted for packets undergoing encapsulation at this node. A value of -1 indicates that no limit is present (except as a result of the packet size). ')
hpnicfTunnelInetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicfTunnelInetConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigTable.setDescription('The (conceptual) table containing information on configured tunnels. This table can be used to map a set of tunnel endpoints to the associated ifIndex value. It can also be used for row creation. Note that every row in the hpnicfTunnelIfTable with a fixed destination address should have a corresponding row in the hpnicfTunnelInetConfigTable, regardless of whether it was created via SNMP. ')
hpnicfTunnelInetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelInetConfigSlot"), (0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelInetConfigSubSlot"), (0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelInetConfigTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigEntry.setDescription('An entry (conceptual row) containing the information on a particular configured tunnel. ')
hpnicfTunnelInetConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigSlot.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigSlot.setDescription('Slot number. hpnicfTunnelInetConfigSlot, hpnicfTunnelInetConfigSubSlot and hpnicfTunnelInetConfigTunnNum describe a tunnel interface. For Example, interface tunnel 0/0/25 would be configured as: hpnicfTunnelInetConfigSlot 0 hpnicfTunnelInetConfigSubSlot 0 hpnicfTunnelInetConfigTunnNum 25 ')
hpnicfTunnelInetConfigSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigSubSlot.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigSubSlot.setDescription("Sub slot number. As described in hpnicfTunnelInetConfigSlot's description. ")
hpnicfTunnelInetConfigTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfTunnelInetConfigTunnNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigTunnNum.setDescription("Tunnel number. As described in hpnicfTunnelInetConfigSlot's description. ")
hpnicfTunnelInetConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelInetConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigIfIndex.setDescription('If the value of hpnicfTunnelInetConfigStatus for this row is active, then this object contains the value of ifIndex corresponding to the tunnel interface. A value of 0 is not legal in the active state, and means that the interface index has not yet been assigned. ')
hpnicfTunnelInetConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelInetConfigStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelInetConfigStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table. The agent need not support setting this object to createAndWait or notInService since there are no other writable objects in this table, and writable objects in rows of corresponding tables such as the hpnicfTunnelIfTable may be modified while this row is active. To create a row in this table, the management station should set hpnicfTunnelInetConfigSlot, hpnicfTunnelInetConfigSubSlot, hpnicfTunnelInetConfigTunnNum, and set hpnicfTunnelInetConfigStatus to createAndGo. Creating a row in this table will cause an interface index to be assigned by the agent in an implementation-dependent manner, and corresponding rows will be instantiated in the ifTable and the hpnicfTunnelIfTable. The status of this row will become active as soon as the agent assigns the interface index, regardless of whether the interface is operationally up. Deleting a row in this table will likewise delete the corresponding row in the ifTable and in the hpnicfTunnelIfTable. ')
hpnicfTunnelEviTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4), )
if mibBuilder.loadTexts: hpnicfTunnelEviTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviTable.setDescription('The (conceptual) table containing information on configured EVI-Tunnel. ')
hpnicfTunnelEviEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEviTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelEviEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviEntry.setDescription('An entry (conceptual row) containing the information on a particular configured EVI-Tunnel. ')
hpnicfTunnelEviTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelEviTunnNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviTunnNum.setDescription('Tunnel number. An identifier used to distinguish between multiple tunnels. ')
hpnicfTunnelEviIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviIfIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization. ")
hpnicfTunnelEviStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table. The agent need not support setting this object to createAndWait or notInService since there are no other writable objects in this table, and writable objects in rows of corresponding tables such as the hpnicfTunnelEviTable may be modified while this row is active. Creating a row in this table will cause an interface index to be assigned by the agent in an implementation-dependent manner, and corresponding rows will be instantiated in the ifTable. The status of this row will become active as soon as the agent assigns the interface index, regardless of whether the interface is operationally up. Deleting a row in this table will likewise delete the corresponding row in the ifTable. ')
hpnicfTunnelEviAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviAddressType.setDescription('The type of address in the corresponding hpnicfTunnelEviLocalAddr objects. Can not be modified after creation. ')
hpnicfTunnelEviLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviLocalAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLocalAddr.setDescription('The address of the local endpoint of the tunnel (i.e., the source address used in the outer IP header). The type of this object is given by hpnicfTunnelEviAddressType. ')
hpnicfTunnelEviNetworkID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviNetworkID.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviNetworkID.setDescription('The method used to assign a network ID to an EVI-Tunnel interface. Assign the same network ID to the EVI-Tunnel interfaces of all edge devices in an EVI network. A value of 0 indicates that no network ID is assigned to any EVI-Tunnel interface. ')
hpnicfTunnelEviKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviKeepaliveInterval.setDescription('The method used to assign the keepalive interval. ')
hpnicfTunnelEviKeepaliveTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelEviKeepaliveTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviKeepaliveTimes.setDescription('The method used to assign the keepalive maximum number of consecutive keepalive failures that are allowed. ')
hpnicfTunnelEviLinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5), )
if mibBuilder.loadTexts: hpnicfTunnelEviLinkTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLinkTable.setDescription('The (conceptual) table containing information on configured EVI-Link. ')
hpnicfTunnelEviLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEviTunnNum"), (0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEviLinkNum"))
if mibBuilder.loadTexts: hpnicfTunnelEviLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLinkEntry.setDescription('An entry (conceptual row) containing the information on a particular configured EVI-Link. ')
hpnicfTunnelEviLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelEviLinkNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLinkNum.setDescription('EVI-Link number. ')
hpnicfTunnelEviLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLinkIfIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization. ")
hpnicfTunnelEviLinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviLinkAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLinkAddressType.setDescription('The type of address in the corresponding hpnicfTunnelEviLinkRemoteAddr objects. Can not be modified after creation. ')
hpnicfTunnelEviLinkRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelEviLinkRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEviLinkRemoteAddr.setDescription('The address of the remote endpoint of the tunnel (i.e., the destination address used in the outer IP header). ')
hpnicfTunnelGreTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6), )
if mibBuilder.loadTexts: hpnicfTunnelGreTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreTable.setDescription('The (conceptual) table containing information on configured Gre-Tunnel. ')
hpnicfTunnelGreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelGreTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelGreEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreEntry.setDescription('An entry (conceptual row) containing the information on a particular configured Gre-Tunnel. ')
hpnicfTunnelGreTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelGreTunnNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreTunnNum.setDescription('Tunnel number. An identifier used to distinguish between multiple tunnels. ')
hpnicfTunnelGreTunnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelGreTunnIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreTunnIfIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization. ")
hpnicfTunnelGreAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreAddressType.setDescription('The type of address in the corresponding hpnicfTunnelGreLocalAddr and hpnicfTunnelGreRemoteAddr objects. ')
hpnicfTunnelGreLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreLocalAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreLocalAddr.setDescription('The address of the local endpoint of the tunnel (i.e., the source address used in the outer IP header). ')
hpnicfTunnelGreRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreRemoteAddr.setDescription('The address of the remote endpoint of the tunnel (i.e., the destination address used in the outer IP header). ')
hpnicfTunnelGreKeepaliveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveEnabled.setDescription('This MIB object specifies whether or not keepalive is used. A value of true indicates that keepalive SHOULD be used. When keepalive is not be used, the value of hpnicfTunnelGreKeepaliveInterval and hpnicfTunnelGreKeepaliveTimes MUST be zero. ')
hpnicfTunnelGreKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveInterval.setDescription('The method used to assign the keepalive interval. The value is zero when keepalive is not used. The valid value is from 1 to 32767, when keepalive is used. ')
hpnicfTunnelGreKeepaliveTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreKeepaliveTimes.setDescription('The method used to assign the keepalive maximum number of consecutive keepalive failures that are allowed. The value is zero when keepalive is not used. The valid value is from 1 to 255, when keepalive is used. ')
hpnicfTunnelGreSlbgGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreSlbgGroupNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreSlbgGroupNum.setDescription('The method used to assign the service-loopback-group. ')
hpnicfTunnelGreTunnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 6, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelGreTunnStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelGreTunnStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table. The agent need not support setting this object to createAndWait or notInService since there are no other writable objects in this table, and writable objects in rows of corresponding tables such as the hpnicfTunnelGreTable may be modified while this row is active. Creating a row in this table will cause an interface index to be assigned by the agent in an implementation-dependent manner, and corresponding rows will be instantiated in the ifTable. The status of this row will become active as soon as the agent assigns the interface index, regardless of whether the interface is operationally up. Deleting a row in this table will likewise delete the corresponding row in the ifTable. ')
hpnicfTunnelVxlanIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7), )
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfTable.setDescription('The (conceptual) table containing information on configured Vxlan-Tunnel. ')
hpnicfTunnelVxlanIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelVxlanIfTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfEntry.setDescription('An entry (conceptual row) containing the information on a particular configured Vxlan-Tunnel. ')
hpnicfTunnelVxlanIfTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfTunnNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfTunnNum.setDescription('Tunnel number. An identifier used to distinguish between multiple tunnels. ')
hpnicfTunnelVxlanTunnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelVxlanTunnIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanTunnIfIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization. ")
hpnicfTunnelVxlanIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfAddressType.setDescription('The type of address in the corresponding hpnicfTunnelVxlanIfLocalAddr and hpnicfTunnelVxlanIfRemoteAddr objects. ')
hpnicfTunnelVxlanIfLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfLocalAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfLocalAddr.setDescription('The address of the local endpoint of the tunnel (i.e., the source address used in the outer IP header). ')
hpnicfTunnelVxlanIfRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfRemoteAddr.setDescription('The address of the remote endpoint of the tunnel (i.e., the destination address used in the outer IP header). ')
hpnicfTunnelVxlanIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanIfStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table. The agent need not support setting this object to createAndWait or notInService since there are no other writable objects in this table, and writable objects in rows of corresponding tables such as the hpnicfTunnelVxlanIfTable may be modified while this row is active. Creating a row in this table will cause an interface index to be assigned by the agent in an implementation-dependent manner, and corresponding rows will be instantiated in the ifTable. The status of this row will become active as soon as the agent assigns the interface index, regardless of whether the interface is operationally up. Deleting a row in this table will likewise delete the corresponding row in the ifTable. ')
hpnicfTunnelVxlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8))
hpnicfTunnelVxlanUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelVxlanUdpPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanUdpPort.setDescription('The UDP port number for Vxlan Tunnels.')
hpnicfTunnelVxlanDropWrongCksmPkt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelVxlanDropWrongCksmPkt.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanDropWrongCksmPkt.setDescription('Whether or not dropping invalid UDP chesksum Vxlan packet.')
hpnicfTunnelVxlanDropVlanTagPkt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfTunnelVxlanDropVlanTagPkt.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelVxlanDropVlanTagPkt.setDescription('Whether or not dropping Vxlan packet with inner VLAN tag.')
hpnicfTunnelAvailableIDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 9))
hpnicfTunnelAvailableID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelAvailableID.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelAvailableID.setDescription('The available tunnel ID. A value of -1 indicates that there is no available tunnel ID.')
hpnicfTunnelTotalNumTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10), )
if mibBuilder.loadTexts: hpnicfTunnelTotalNumTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelTotalNumTable.setDescription('Total number of a particular method tunnel.')
hpnicfTunnelTotalNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelEncapsMethod"))
if mibBuilder.loadTexts: hpnicfTunnelTotalNumEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelTotalNumEntry.setDescription('Total number of a particular method tunnel.')
hpnicfTunnelEncapsMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10, 1, 1), HpnicfTunnelType())
if mibBuilder.loadTexts: hpnicfTunnelEncapsMethod.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelEncapsMethod.setDescription('The encapsulation method used by the tunnel.')
hpnicfTunnelTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelTotalNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelTotalNum.setDescription('Total number of a particular method tunnel. ')
hpnicfTunnelNvgreIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11), )
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfTable.setDescription('The (conceptual) table containing information on configured Nvgre-Tunnel. ')
hpnicfTunnelNvgreIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1), ).setIndexNames((0, "HPN-ICF-TUNNEL-MIB", "hpnicfTunnelNvgreIfTunnNum"))
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfEntry.setDescription('An entry (conceptual row) containing the information on a particular configured Nvgre-Tunnel. ')
hpnicfTunnelNvgreIfTunnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfTunnNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfTunnNum.setDescription('Tunnel number. An identifier used to distinguish between multiple tunnels. ')
hpnicfTunnelNvgreTunnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfTunnelNvgreTunnIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreTunnIfIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization. ")
hpnicfTunnelNvgreIfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfAddressType.setDescription('The type of address in the corresponding hpnicfTunnelNvgreIfLocalAddr and hpnicfTunnelNvgreIfRemoteAddr objects. ')
hpnicfTunnelNvgreIfLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfLocalAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfLocalAddr.setDescription('The address of the local endpoint of the tunnel (i.e., the source address used in the outer IP header). ')
hpnicfTunnelNvgreIfRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfRemoteAddr.setDescription('The address of the remote endpoint of the tunnel (i.e., the destination address used in the outer IP header). ')
hpnicfTunnelNvgreIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 53, 1, 1, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfTunnelNvgreIfStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table. The agent need not support setting this object to createAndWait or notInService since there are no other writable objects in this table, and writable objects in rows of corresponding tables such as the hpnicfTunnelNvgreIfTable may be modified while this row is active. Creating a row in this table will cause an interface index to be assigned by the agent in an implementation-dependent manner, and corresponding rows will be instantiated in the ifTable. The status of this row will become active as soon as the agent assigns the interface index, regardless of whether the interface is operationally up. Deleting a row in this table will likewise delete the corresponding row in the ifTable. ')
mibBuilder.exportSymbols("HPN-ICF-TUNNEL-MIB", hpnicfTunnelTables=hpnicfTunnelTables, hpnicfTunnelGreTable=hpnicfTunnelGreTable, hpnicfTunnelNvgreIfEntry=hpnicfTunnelNvgreIfEntry, hpnicfTunnelNvgreIfAddressType=hpnicfTunnelNvgreIfAddressType, hpnicfTunnelVxlanIfTunnNum=hpnicfTunnelVxlanIfTunnNum, hpnicfTunnelEviTunnNum=hpnicfTunnelEviTunnNum, hpnicfTunnelVxlanTunnIfIndex=hpnicfTunnelVxlanTunnIfIndex, hpnicfTunnelGreAddressType=hpnicfTunnelGreAddressType, hpnicfTunnelInetConfigIfIndex=hpnicfTunnelInetConfigIfIndex, hpnicfTunnelEviLinkRemoteAddr=hpnicfTunnelEviLinkRemoteAddr, hpnicfTunnelIfLocalInetAddress=hpnicfTunnelIfLocalInetAddress, hpnicfTunnelNvgreIfTunnNum=hpnicfTunnelNvgreIfTunnNum, hpnicfTunnelVxlanIfTable=hpnicfTunnelVxlanIfTable, hpnicfTunnelNvgreIfLocalAddr=hpnicfTunnelNvgreIfLocalAddr, hpnicfTunnelGreKeepaliveInterval=hpnicfTunnelGreKeepaliveInterval, hpnicfTunnelVxlanIfStatus=hpnicfTunnelVxlanIfStatus, hpnicfTunnelVxlanIfRemoteAddr=hpnicfTunnelVxlanIfRemoteAddr, hpnicfTunnelIfFlowLabel=hpnicfTunnelIfFlowLabel, hpnicfTunnelTotalNum=hpnicfTunnelTotalNum, HpnicfTunnelType=HpnicfTunnelType, hpnicfTunnelInetConfigStatus=hpnicfTunnelInetConfigStatus, hpnicfTunnelAvailableIDGroup=hpnicfTunnelAvailableIDGroup, hpnicfTunnelNvgreIfStatus=hpnicfTunnelNvgreIfStatus, hpnicfTunnelTotalNumTable=hpnicfTunnelTotalNumTable, hpnicfTunnelEviTable=hpnicfTunnelEviTable, hpnicfTunnelEviEntry=hpnicfTunnelEviEntry, hpnicfTunnelVxlanIfLocalAddr=hpnicfTunnelVxlanIfLocalAddr, hpnicfTunnelIfTable=hpnicfTunnelIfTable, hpnicfTunnelNvgreIfRemoteAddr=hpnicfTunnelNvgreIfRemoteAddr, hpnicfTunnelGreTunnNum=hpnicfTunnelGreTunnNum, hpnicfTunnel=hpnicfTunnel, hpnicfTunnelVxlanDropVlanTagPkt=hpnicfTunnelVxlanDropVlanTagPkt, hpnicfTunnelNvgreIfTable=hpnicfTunnelNvgreIfTable, hpnicfTunnelVxlanDropWrongCksmPkt=hpnicfTunnelVxlanDropWrongCksmPkt, hpnicfTunnelGreSlbgGroupNum=hpnicfTunnelGreSlbgGroupNum, PYSNMP_MODULE_ID=hpnicfTunnel, hpnicfTunnelNvgreTunnIfIndex=hpnicfTunnelNvgreTunnIfIndex, hpnicfTunnelMIBObjects=hpnicfTunnelMIBObjects, hpnicfTunnelEviAddressType=hpnicfTunnelEviAddressType, hpnicfTunnelIfRemoteInetAddress=hpnicfTunnelIfRemoteInetAddress, hpnicfTunnelEviLinkAddressType=hpnicfTunnelEviLinkAddressType, hpnicfTunnelGreKeepaliveTimes=hpnicfTunnelGreKeepaliveTimes, hpnicfTunnelVxlanUdpPort=hpnicfTunnelVxlanUdpPort, hpnicfTunnelAvailableID=hpnicfTunnelAvailableID, hpnicfTunnelIfEntry=hpnicfTunnelIfEntry, hpnicfTunnelEviKeepaliveTimes=hpnicfTunnelEviKeepaliveTimes, hpnicfTunnelGreTunnStatus=hpnicfTunnelGreTunnStatus, hpnicfTunnelInetConfigSlot=hpnicfTunnelInetConfigSlot, hpnicfTunnelEviLinkTable=hpnicfTunnelEviLinkTable, hpnicfTunnelEviLocalAddr=hpnicfTunnelEviLocalAddr, hpnicfTunnelEviLinkEntry=hpnicfTunnelEviLinkEntry, hpnicfTunnelInetConfigTable=hpnicfTunnelInetConfigTable, hpnicfTunnelInetConfigEntry=hpnicfTunnelInetConfigEntry, hpnicfTunnelIfTOS=hpnicfTunnelIfTOS, hpnicfTunnelIfEncapsLimit=hpnicfTunnelIfEncapsLimit, hpnicfTunnelVxlanIfEntry=hpnicfTunnelVxlanIfEntry, hpnicfTunnelGreLocalAddr=hpnicfTunnelGreLocalAddr, hpnicfTunnelEviLinkIfIndex=hpnicfTunnelEviLinkIfIndex, hpnicfTunnelVxlanIfAddressType=hpnicfTunnelVxlanIfAddressType, hpnicfTunnelGreTunnIfIndex=hpnicfTunnelGreTunnIfIndex, hpnicfTunnelEviKeepaliveInterval=hpnicfTunnelEviKeepaliveInterval, hpnicfTunnelInetConfigTunnNum=hpnicfTunnelInetConfigTunnNum, hpnicfTunnelInetConfigSubSlot=hpnicfTunnelInetConfigSubSlot, hpnicfTunnelIfAddressType=hpnicfTunnelIfAddressType, hpnicfTunnelEviIfIndex=hpnicfTunnelEviIfIndex, hpnicfTunnelGreRemoteAddr=hpnicfTunnelGreRemoteAddr, hpnicfTunnelGreEntry=hpnicfTunnelGreEntry, hpnicfTunnelEncapsMethod=hpnicfTunnelEncapsMethod, hpnicfTunnelEviNetworkID=hpnicfTunnelEviNetworkID, hpnicfTunnelGreKeepaliveEnabled=hpnicfTunnelGreKeepaliveEnabled, hpnicfTunnelEviLinkNum=hpnicfTunnelEviLinkNum, hpnicfTunnelIfEncapsMethod=hpnicfTunnelIfEncapsMethod, hpnicfTunnelVxlanConfigGroup=hpnicfTunnelVxlanConfigGroup, hpnicfTunnelIfHopLimit=hpnicfTunnelIfHopLimit, hpnicfTunnelEviStatus=hpnicfTunnelEviStatus, hpnicfTunnelTotalNumEntry=hpnicfTunnelTotalNumEntry, hpnicfTunnelIfSecurity=hpnicfTunnelIfSecurity)
