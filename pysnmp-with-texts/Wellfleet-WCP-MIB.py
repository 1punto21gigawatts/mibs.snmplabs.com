#
# PySNMP MIB module Wellfleet-WCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-WCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, ModuleIdentity, ObjectIdentity, Gauge32, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, TimeTicks, Unsigned32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ModuleIdentity", "ObjectIdentity", "Gauge32", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "TimeTicks", "Unsigned32", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfCompressionGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfCompressionGroup")
wfWcpLineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1), )
if mibBuilder.loadTexts: wfWcpLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineTable.setDescription('The line table contains line entries.')
wfWcpLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfWcpLineLineNumber"), (0, "Wellfleet-WCP-MIB", "wfWcpLineLLIndex"))
if mibBuilder.loadTexts: wfWcpLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineEntry.setDescription('The components of the instance ID of a line entry.')
wfWcpLineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineDelete.setDescription('Indicates whether the instance have been created or deleted.')
wfWcpLineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineDisable.setDescription('Indicates whether the instance have been enabled or disabled.')
wfWcpLineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpLineLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineLineNumber.setDescription('instance ID.')
wfWcpLineLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpLineLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineLLIndex.setDescription('instance ID.')
wfWcpLineCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpc", 1), ("ppc", 2))).clone('cpc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineCompressionMode.setDescription('line is relatively noisy.')
wfWcpLineHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k32", 1), ("k8", 2))).clone('k32')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineHistorySize.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineHistorySize.setDescription('line.')
wfWcpLineBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("verylarge", 1), ("large", 2), ("normal", 3), ("none", 4))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineBufferSize.setDescription('used.')
wfWcpLineEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2))).clone('software')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineEngineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineEngineType.setDescription('Indicates whether to use hardware or software compression')
wfWcpLineSearchDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineSearchDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineSearchDepth.setDescription('This attribute is only relevant for HW Compression VCs configured for CPC, 8K history. It indicates the Search Depth configured for this line. Increasing this attribute may allow the user to achieve better Compression ratios. This however could occur at the expense of throughput (i.e. you may get better compression ratios, but lower throughput). Note that this value may be set to 0, if the user wishes to run their Line in High Speed mode.')
wfWcpLineFallbackCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("softwarecpc", 1), ("hardwareppc", 2), ("none", 3))).clone('softwarecpc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineFallbackCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineFallbackCompressionMode.setDescription('This attribute is only relevant for HW Compression VCs configured for CPC. It indicates what Compression Mode the user wants All VCs on a line to use, when any VC on that line is unable to register for HW Compression due to a lack of physical HW Context memory (Note that only HW CPC contexts can fail registration in this way).')
wfWcpLineClientCompressorRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineClientCompressorRingSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineClientCompressorRingSize.setDescription('Specifies the client compressor ring size for clients of this line. The default value is ZERO which will cause the hardware compression to assign the hard coded default value.')
wfWcpLineClientDecompressorRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineClientDecompressorRingSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLineClientDecompressorRingSize.setDescription('Specifies the client decompressor ring size for clients of this line. The default value is ZERO which will cause the hardware compression to assign the hard coded default value.')
wfWcpCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2), )
if mibBuilder.loadTexts: wfWcpCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitTable.setDescription('The circuit table contains circuit entries.')
wfWcpCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfWcpCircuitId"))
if mibBuilder.loadTexts: wfWcpCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitEntry.setDescription('The components of the instance ID of a circuit entry.')
wfWcpCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitDelete.setDescription('Indicates whether the instance have been created or deleted.')
wfWcpCircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitDisable.setDescription('Indicates whether the instance have been enabled or disabled.')
wfWcpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitId.setDescription('Indicates the circuit ID of this entry.')
wfWcpCircuitCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpc", 1), ("ppc", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitCompressionMode.setDescription('suitable when the line is relatively noisy.')
wfWcpCircuitHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("k32", 1), ("k8", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitHistorySize.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitHistorySize.setDescription('circuit.')
wfWcpCircuitEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitEngineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitEngineType.setDescription('Indicates whether to use hardware or software compression')
wfWcpCircuitSearchDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitSearchDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitSearchDepth.setDescription('This attribute is only relevant for HW Compression VCs configured for CPC, 8K history. It indicates the Search Depth configured for this circuit. Increasing this attribute may allow the user to achieve better Compression ratios. This however could occur at the expense of throughput (i.e. you may get better compression ratios, but lower throughput). Note that this value may be set to 0, if the user wishes to run this circuit in High Speed mode. Note that the default value of 256 is actually used to indicate that that this attribute should be inherited from wfWcpLineEntry MIB & is not a valid search depth value. Valid Search Depth values lie within the 1..255 range.')
wfWcpCircuitCompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpCircuitCompressorOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitCompressorOutBytes.setDescription('Indicates the number of bytes produced by the compressor.')
wfWcpCircuitDecompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpCircuitDecompressorOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpCircuitDecompressorOutBytes.setDescription('Indicates the number of bytes produced by the decompressor.')
wfWcpVcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3), )
if mibBuilder.loadTexts: wfWcpVcTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTable.setDescription('The VC table contains VC entries')
wfWcpVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfWcpVcLineNumber"), (0, "Wellfleet-WCP-MIB", "wfWcpVcLLIndex"), (0, "Wellfleet-WCP-MIB", "wfWcpVcCircuitId"), (0, "Wellfleet-WCP-MIB", "wfWcpVcId"))
if mibBuilder.loadTexts: wfWcpVcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcEntry.setDescription('The components of the instance ID of a VC entry.')
wfWcpVcCompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2), ("disconnected", 3), ("init", 4), ("nak", 5))).clone('disconnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressorState.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcCompressorState.setDescription('Indicates the VC compressor state of the WCP logical connection.')
wfWcpVcDecompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2), ("disconnected", 3), ("init", 4), ("rexmit", 5), ("reset", 6), ("connecting", 7), ("disconnecting", 8))).clone('disconnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDecompressorState.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcDecompressorState.setDescription('Indicates the VC decompressor state of the WCP logical connection.')
wfWcpVcLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcLineNumber.setDescription('instance ID.')
wfWcpVcLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcLLIndex.setDescription('instance ID.')
wfWcpVcCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcCircuitId.setDescription('ID.')
wfWcpVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcId.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcId.setDescription('Indicates the ID of this VC entry. This is part of the instance ID.')
wfWcpVcCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpc", 1), ("ppc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcCompressionMode.setDescription('line is relatively noisy.')
wfWcpVcHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k32", 1), ("k8", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcHistorySize.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcHistorySize.setDescription('VC. HIGH will allow the highest compression ratio to be realized.')
wfWcpVcCompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressorInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcCompressorInBytes.setDescription('Indicates the number of bytes submitted to the compressor.')
wfWcpVcCompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressorOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcCompressorOutBytes.setDescription('Indicates the number of bytes produced by the compressor.')
wfWcpVcDecompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDecompressorInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcDecompressorInBytes.setDescription('Indicates the number of bytes submitted to the decompressor.')
wfWcpVcDecompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDecompressorOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcDecompressorOutBytes.setDescription('Indicates the number of bytes produced by the decompressor.')
wfWcpVcTxCPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxCPCPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTxCPCPackets.setDescription('Indicates the number of continuous mode packets sent.')
wfWcpVcRxCPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxCPCPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRxCPCPackets.setDescription('Indicates the number of continuous mode packets received.')
wfWcpVcTxPPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxPPCPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTxPPCPackets.setDescription('Indicates the number of PPC mode packets sent.')
wfWcpVcRxPPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxPPCPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRxPPCPackets.setDescription('Indicates the number of PPC mode packets Received.')
wfWcpVcTxAntiExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxAntiExpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTxAntiExpPackets.setDescription('Indicates the number of anti-expanded packets sent.')
wfWcpVcRxAntiExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxAntiExpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRxAntiExpPackets.setDescription('Indicates the number of anti-expanded packets received.')
wfWcpVcTxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTxResetReqs.setDescription('Indicates the number of reset request sent.')
wfWcpVcRxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRxResetReqs.setDescription('Indicates the number of reset request received.')
wfWcpVcTxRexmitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxRexmitReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTxRexmitReqs.setDescription('Indicates the number of re-transmit request sent.')
wfWcpVcRxRexmitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxRexmitReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRxRexmitReqs.setDescription('Indicates the number of re-transmit request received.')
wfWcpVcTxRexmitNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxRexmitNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcTxRexmitNaks.setDescription('Indicates the number of re-transmit Nak sent.')
wfWcpVcRxRexmitNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxRexmitNaks.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRxRexmitNaks.setDescription('Indicates the number of re-transmit Nak received.')
wfWcpVcDataOutOfSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDataOutOfSeqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcDataOutOfSeqs.setDescription('Indicates the number of times that a data indication is out of sequence.')
wfWcpVcRexmitOutOfSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRexmitOutOfSeqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRexmitOutOfSeqs.setDescription('Indicates the number of times that a re-transmit Ack is out of sequence.')
wfWcpVcRexmitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRexmitTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcRexmitTimeouts.setDescription('Indicates the number of re-transmit timeout.')
wfWcpVcExceededKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcExceededKs.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcExceededKs.setDescription('Indicates the number of times that K is exceeded.')
wfWcpVcInvalidOpCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcInvalidOpCodes.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcInvalidOpCodes.setDescription('Indicates the number of packets received with invalid op code.')
wfWcpVcEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcEngineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcEngineType.setDescription('Indicates whether hardware or software compression is used')
wfWcpVcSearchDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcSearchDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpVcSearchDepth.setDescription('This attribute is only relevant for HW Compression VCs configured for CPC, 8K history. It indicates the Search Depth configured for this VC. Increasing this attribute may allow the user to achieve better Compression ratios. This however could occur at the expense of throughput (i.e. you may get better compression ratios, but lower throughput). Note that this value may be 0, if the user wishes to run their VC in High Speed Mode.')
wfHwCompTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4), )
if mibBuilder.loadTexts: wfHwCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompTable.setDescription('The HW Compression Table contains compression entries.')
wfHwCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfHwCompSlot"), (0, "Wellfleet-WCP-MIB", "wfHwCompModule"), (0, "Wellfleet-WCP-MIB", "wfHwCompEngineNumber"))
if mibBuilder.loadTexts: wfHwCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompEntry.setDescription('Slot number used as instance identifier.')
wfHwCompState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompState.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompState.setDescription('Driver state variable.')
wfHwCompSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompSlot.setDescription('Slot number -- gotten from the instance ID.')
wfHwCompModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompModule.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompModule.setDescription('Module # -- gotten from the instance ID.')
wfHwCompEngineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompEngineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompEngineNumber.setDescription('Compression Engine #. Gotten from the instance ID.')
wfHwCompCompressionHistoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionHistoryTotal.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionHistoryTotal.setDescription('The amount of memory allocated for Compression History.')
wfHwCompCompressionHashTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionHashTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionHashTblSize.setDescription('The amount of memory allocated for Compression Hash Tables. These Hash Tables are used to do lookups in Compression History memory.')
wfHwCompDecompressionHistoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionHistoryTotal.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionHistoryTotal.setDescription('The amount of memory allocated for Decompression History.')
wfHwComp8kContextsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kContextsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp8kContextsTotal.setDescription("This indicates the maximum number of 8KB Context Control Blocks (CCBs) (i.e. VC's) we can support with this memory configuration. This is assuming ALL VC's using Variable Search Depth Mode, 8KB history size. This equals wfHwCompCompressionHistoryTotal divided by 8KB.")
wfHwComp32kContextsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp32kContextsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp32kContextsTotal.setDescription("This indicates the maximum number of 32KB Context Control Blocks (CCBs) (i.e. VC's) we can support with this memory configuration. This is assuming ALL VC's using High Speed, Single Search Mode, 32KB history size. This equals wfHwCompCompressionHistoryTotal divided by 32KB.")
wfHwComp8kCpcContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kCpcContextsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp8kCpcContextsInUse.setDescription("This indicates the current number of 8KB CPC (Continuous Packet Compression) Mode VC's using Hardware Compression services.")
wfHwComp8kPpcContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kPpcContextsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp8kPpcContextsInUse.setDescription("This indicates the number of PPC (Per Packet Compression) Mode VC's allocated for HW Compression. This value ALWAYS equates to 1, as 1 PPC Context is ALWAYS reserved as a resource for any VC doing HW Compression to use. All VC's configured to run in PPC Mode share this context. This context is also used when a VC enters Transient PPC Compression Mode, which occurs when frames are dropped or errors occur on the physical link.")
wfHwComp32kContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp32kContextsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp32kContextsInUse.setDescription("This indicates the current number of 32KB Context Control Blocks (CCBs) (i.e. VC's) using Hardware Compression services.")
wfHwComp8kContextsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kContextsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp8kContextsAvailable.setDescription("This indicates the number of 'usable' 8k Context Control Blocks available. Note that this will get reduced (by 4) when a user configures a VC for 32KB History Size (i.e. High Speed, Single Search Mode).")
wfHwComp32kContextsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp32kContextsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwComp32kContextsAvailable.setDescription("This indicates the number of 'usable' 32k Context Control Blocks available. This means that this/these number of pages of Compression Memory currently have NO Context Control Block (i.e.VC) associated with them.")
wfHwCompCpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCpcContextsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCpcContextsRegistered.setDescription("This indicates the number of VC's which have registered for HW Compression and are using Continuous Packet Compression (CPC) mode. Anytime a VC/Context successfully registers with HW Compression using this mode, a HW context has been dedicated to that VC.")
wfHwCompPpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompPpcContextsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompPpcContextsRegistered.setDescription("This indicates the number of VC's which have registered for HW Compression and are using Packet by Packet Compression (PPC) mode. All VCs/Contexts which register using PPC mode, share 1 HW Context which has been dedicated for use by PPC Vcs.")
wfHwCompCompressionTotalRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionTotalRingSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionTotalRingSize.setDescription('This indicates the total number of Descriptor ring entries available for HW Compression.')
wfHwCompDecompressionTotalRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionTotalRingSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionTotalRingSize.setDescription('This indicates the total number of Descriptor ring entries available for HW Decompression.')
wfHwCompCompressionCurrentQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionCurrentQueued.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionCurrentQueued.setDescription('This is a snapshot of the current number of entries outstanding on the HW Compression Ring.')
wfHwCompDecompressionCurrentQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionCurrentQueued.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionCurrentQueued.setDescription('This is a snapshot of the current number of entries outstanding on the HW Decompression Ring.')
wfHwCompCompressionQHiWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionQHiWatermark.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionQHiWatermark.setDescription('This indicates the largest number of frames ever outstanding on the HW Compression Ring since this Compression Engine started providing HW Compression services.')
wfHwCompDecompressionQHiWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionQHiWatermark.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionQHiWatermark.setDescription('This indicates the largest number of frames ever outstanding on the HW Decompression Ring since this Compression Engine started providing HW Compression services.')
wfHwCompCompressionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionPkts.setDescription('The # of pkts successfully compressed.')
wfHwCompDecompressionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionPkts.setDescription('The # of pkts successfully decompressed.')
wfHwCompTxExpandedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompTxExpandedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompTxExpandedPkts.setDescription('The # of pkts given to the Compressor which actually expanded instead of compressing.')
wfHwCompTxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompTxNonCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompTxNonCompressedPkts.setDescription('This indicates a temporary Buffer Starvation condition. When we cannot get a buffer to Compress into, this stat gets incremented & the original UnCompressed frame is sent.')
wfHwCompRxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompRxNonCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompRxNonCompressedPkts.setDescription('The # of pkts received across the link which happened to come across the link uncompressed. This can be either because the pkt was an Expanded pkt at the remote end or for some reason the sending device could not compress this particular pkt due to resource issues.')
wfHwCompRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompRxDroppedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompRxDroppedPkts.setDescription('This indicates a temporary Buffer Starvation condition. When we cannot get a buffer to Decompress into, this stat gets incremented & the received Compressed data frame is run through the Decompressor in order to update the Decompressors histories and then dropped.')
wfHwCompRxLcbMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompRxLcbMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompRxLcbMismatches.setDescription('This indicates a frame was dropped between the remote end and this end. Line errors such as CRC Errors cause this. Buffer starvation in this router can also cause this.')
wfHwCompCompressionRingOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionRingOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionRingOverflows.setDescription('Number of frames dropped due to Compression Descriptor Ring full condition.')
wfHwCompDecompressionRingOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionRingOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionRingOverflows.setDescription('Number of frames dropped due to Decompression Descriptor Ring full condition.')
wfHwCompCompressionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionErrors.setDescription('Indicates the total # of Compression Errors detected on this module.')
wfHwCompDecompressionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionErrors.setDescription('Indicates the total # of Decompression Errors detected on this module.')
wfHwCompCompressionSrcPktLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionSrcPktLenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionSrcPktLenErrors.setDescription('A zero length source packet was received by the Compressor or Decompressor.')
wfHwCompCompressionCcbFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionCcbFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionCcbFormatErrors.setDescription('The format of the specified Context Control Block (CCB) was detected to be in error.')
wfHwCompCompressionDescFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionDescFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionDescFormatErrors.setDescription('The format of the current descriptor is in error.')
wfHwCompCompressionInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompCompressionInternalErrors.setDescription('The Compressor or Decompressor took an internal error when processing this descriptor.')
wfHwCompDecompressionSrcPktLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionSrcPktLenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionSrcPktLenErrors.setDescription('A zero length source packet was received by the Compressor or Decompressor.')
wfHwCompDecompressionCcbFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionCcbFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionCcbFormatErrors.setDescription('The format of the specified Context Control Block (CCB) was detected to be in error.')
wfHwCompDecompressionDescFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionDescFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionDescFormatErrors.setDescription('The format of the current descriptor is in error.')
wfHwCompDecompressionInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompDecompressionInternalErrors.setDescription('The Compressor or Decompressor took an internal error when processing this descriptor.')
wfHwCompChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("magna", 1), ("itcs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompChipType.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompChipType.setDescription('Compression Chip Type: MAGNALINK or ITCS')
wfHwCompMsaCpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaCpcContextsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaCpcContextsRegistered.setDescription("The number of MSA VC's which have registered for HW Compression and are using Continuous Packet Compression (CPC) mode. Anytime an MSA VC/Context successfully registers with HW Compression using this mode, a HW context has been dedicated to that VC.")
wfHwCompMsaPpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaPpcContextsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaPpcContextsRegistered.setDescription("The number of MSA VC's which have registered for HW Compression and are using Packet by Packet Compression (PPC) mode. All MSA VCs/Contexts which register using PPC mode, share 1 HW Context which has been dedicated for use by PPC Vcs.")
wfHwCompMsa8KContextsGuaranteed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsa8KContextsGuaranteed.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsa8KContextsGuaranteed.setDescription('The number of 8K MSA contexts reserved with a particular memory carving. Calculated as number of pages guaranteed for MSA times 4, where 4 is the maximum number of 8K MSA contexts per page.')
wfHwCompStacContextsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacContextsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacContextsTotal.setDescription('The maximum number of STAC CCBs that can be supported for a particular memory carving.')
wfHwCompStacCpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacCpcContextsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacCpcContextsRegistered.setDescription("This indicates the number of STAC VC's which have registered for HW Compression and are using Continuous Packet Compression (CPC) mode. Anytime a STAC VC/Context successfully registers with HW Compression using this mode, a HW context has been dedicated to that VC.")
wfHwCompStacPpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacPpcContextsRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacPpcContextsRegistered.setDescription("The number of STAC VC's which have registered for HW Compression and are using Packet by Packet Compression (PPC) mode. All STAC VCs/Contexts which register using PPC mode, share 1 HW Context which has been dedicated for use by PPC Vcs.")
wfHwCompStacPpcContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacPpcContextsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacPpcContextsInUse.setDescription('The number of STAC contexts allocated for PPC. Equals 1 if STAC is enabled, 0 if it is disabled.')
wfHwCompStacContextsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacContextsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacContextsAvailable.setDescription("The number of 'usable' STAC context control blocks available.")
wfHwCompStacContextsGuaranteed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacContextsGuaranteed.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacContextsGuaranteed.setDescription('The number of STAC contexts reserved with a particular memory carving. Calculated as number of pages guaranteed for STAC times 8, where 8 is the maximum number of STAC contexts per page.')
wfHwCompMsaCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaCompressedPkts.setDescription('The # of pkts successfully compressed using MSA compression algorithm.')
wfHwCompStacCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacCompressedPkts.setDescription('The # of pkts successfully compressed using STAC compression algorithm.')
wfHwCompMsaDecompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaDecompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaDecompressedPkts.setDescription('The # of pkts successfully decompressed using MSA compression algorithm.')
wfHwCompStacDecompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacDecompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacDecompressedPkts.setDescription('The # of pkts successfully decompressed using STAC compression algorithm.')
wfHwCompMsaTxExpandedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaTxExpandedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaTxExpandedPkts.setDescription('The # of pkts given to the Compressor which actually expanded instead of compressing using MSA compression algorithm.')
wfHwCompStacTxExpandedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacTxExpandedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacTxExpandedPkts.setDescription('The # of pkts given to the Compressor which actually expanded instead of compressing using STAC compression algorithm.')
wfHwCompMsaTxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaTxNonCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaTxNonCompressedPkts.setDescription('This indicates a temporary Buffer Starvation condition. When we cannot get a buffer to Compress into, this stat gets incremented & the original UnCompressed frame is sent.')
wfHwCompStacTxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacTxNonCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacTxNonCompressedPkts.setDescription('This indicates a temporary Buffer Starvation condition. When we cannot get a buffer to Compress into, this stat gets incremented & the original UnCompressed frame is sent.')
wfHwCompMsaRxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaRxNonCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompMsaRxNonCompressedPkts.setDescription('The # of pkts received across the link which happened to come across the link uncompressed. This can be either because the pkt was an Expanded pkt at the remote end or for some reason the sending device could not compress this particular pkt due to resource issues.')
wfHwCompStacRxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacRxNonCompressedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompStacRxNonCompressedPkts.setDescription('The # of pkts received across the link which happened to come across the link uncompressed. This can be either because the pkt was an Expanded pkt at the remote end or for some reason the sending device could not compress this particular pkt due to resource issues.')
wfStacCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6), )
if mibBuilder.loadTexts: wfStacCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitTable.setDescription('The circuit table contains circuit entries.')
wfStacCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfStacCircuitId"))
if mibBuilder.loadTexts: wfStacCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitEntry.setDescription('The components of the instance ID of a circuit entry.')
wfStacCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitDelete.setDescription('Indication to delete this Stac LZS/PPP interface')
wfStacCircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitDisable.setDescription('Used to enable and disable compression.')
wfStacCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitId.setDescription('Indicates the circuit ID of this entry.')
wfStacCircuitEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("inherit", 3), ("none", 4))).clone('software')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitEngineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitEngineType.setDescription('Indicates whether to use hardware or software compression')
wfStacCircuitCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("mode0", 1), ("mode3", 4))).clone('mode3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitCompressionMode.setDescription('Indicates the check mode. See RFC 1974.')
wfStacCircuitCompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitCompressorState.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitCompressorState.setDescription('Indicates the compressor state of this circuit entry.')
wfStacCircuitDecompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2), ("reset", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitDecompressorState.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitDecompressorState.setDescription('Indicates the decompressor state of this circuit entry.')
wfStacCircuitFallBackCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("softwarecpc", 1), ("none", 2))).clone('softwarecpc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitFallBackCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitFallBackCompressionMode.setDescription('This attribute is only relevant when any the circuit on that line is unable to register for HW Compression due to a lack of physical HW Context memory (Note that only HW CPC contexts can fail registration in this way).')
wfStacCircuitCompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitCompressorInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitCompressorInBytes.setDescription('Indicates the number of bytes submitted to the compressor.')
wfStacCircuitCompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitCompressorOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitCompressorOutBytes.setDescription('Indicates the number of bytes produced by the compressor.')
wfStacCircuitDecompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitDecompressorInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitDecompressorInBytes.setDescription('Indicates the number of bytes submitted to the decompressor.')
wfStacCircuitDecompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitDecompressorOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitDecompressorOutBytes.setDescription('Indicates the number of bytes produced by the decompressor.')
wfStacCircuitTxMode0Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxMode0Packets.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitTxMode0Packets.setDescription('Indicates the number of mode 0 packets sent.')
wfStacCircuitRxMode0Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxMode0Packets.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitRxMode0Packets.setDescription('Indicates the number of mode 0 packets received.')
wfStacCircuitTxMode3Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxMode3Packets.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitTxMode3Packets.setDescription('Indicates the number of mode 3 packets sent.')
wfStacCircuitRxMode3Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxMode3Packets.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitRxMode3Packets.setDescription('Indicates the number of mode 3 packets received.')
wfStacCircuitTxExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxExpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitTxExpPackets.setDescription('Indicates the number of expanded packets sent.')
wfStacCircuitRxExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxExpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitRxExpPackets.setDescription('Indicates the number of expanded packets received.')
wfStacCircuitTxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitTxResetReqs.setDescription('Indicates the number of reset requests sent.')
wfStacCircuitRxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacCircuitRxResetReqs.setDescription('Indicates the number of reset requests received.')
mibBuilder.exportSymbols("Wellfleet-WCP-MIB", wfWcpVcCircuitId=wfWcpVcCircuitId, wfHwCompCompressionErrors=wfHwCompCompressionErrors, wfWcpLineBufferSize=wfWcpLineBufferSize, wfHwCompRxNonCompressedPkts=wfHwCompRxNonCompressedPkts, wfHwCompDecompressionQHiWatermark=wfHwCompDecompressionQHiWatermark, wfHwCompEngineNumber=wfHwCompEngineNumber, wfStacCircuitCompressorState=wfStacCircuitCompressorState, wfHwCompCompressionHashTblSize=wfHwCompCompressionHashTblSize, wfHwCompCompressionQHiWatermark=wfHwCompCompressionQHiWatermark, wfWcpLineDisable=wfWcpLineDisable, wfHwCompTxNonCompressedPkts=wfHwCompTxNonCompressedPkts, wfStacCircuitDecompressorState=wfStacCircuitDecompressorState, wfHwCompMsaPpcContextsRegistered=wfHwCompMsaPpcContextsRegistered, wfWcpCircuitEntry=wfWcpCircuitEntry, wfHwCompEntry=wfHwCompEntry, wfStacCircuitTable=wfStacCircuitTable, wfWcpLineHistorySize=wfWcpLineHistorySize, wfHwCompRxLcbMismatches=wfHwCompRxLcbMismatches, wfHwCompStacCpcContextsRegistered=wfHwCompStacCpcContextsRegistered, wfHwCompStacTxNonCompressedPkts=wfHwCompStacTxNonCompressedPkts, wfWcpVcCompressorInBytes=wfWcpVcCompressorInBytes, wfWcpCircuitEngineType=wfWcpCircuitEngineType, wfStacCircuitCompressorOutBytes=wfStacCircuitCompressorOutBytes, wfHwCompCpcContextsRegistered=wfHwCompCpcContextsRegistered, wfHwCompTable=wfHwCompTable, wfHwCompStacRxNonCompressedPkts=wfHwCompStacRxNonCompressedPkts, wfHwComp32kContextsAvailable=wfHwComp32kContextsAvailable, wfWcpVcRxPPCPackets=wfWcpVcRxPPCPackets, wfWcpVcLineNumber=wfWcpVcLineNumber, wfWcpVcDecompressorInBytes=wfWcpVcDecompressorInBytes, wfWcpCircuitDisable=wfWcpCircuitDisable, wfWcpVcTxResetReqs=wfWcpVcTxResetReqs, wfWcpVcTable=wfWcpVcTable, wfStacCircuitRxResetReqs=wfStacCircuitRxResetReqs, wfStacCircuitTxExpPackets=wfStacCircuitTxExpPackets, wfStacCircuitDelete=wfStacCircuitDelete, wfWcpVcInvalidOpCodes=wfWcpVcInvalidOpCodes, wfHwCompStacCompressedPkts=wfHwCompStacCompressedPkts, wfWcpVcDecompressorOutBytes=wfWcpVcDecompressorOutBytes, wfWcpVcRexmitOutOfSeqs=wfWcpVcRexmitOutOfSeqs, wfStacCircuitDisable=wfStacCircuitDisable, wfHwCompModule=wfHwCompModule, wfWcpVcTxRexmitNaks=wfWcpVcTxRexmitNaks, wfHwCompMsa8KContextsGuaranteed=wfHwCompMsa8KContextsGuaranteed, wfHwCompMsaTxExpandedPkts=wfHwCompMsaTxExpandedPkts, wfWcpVcRxRexmitNaks=wfWcpVcRxRexmitNaks, wfHwCompDecompressionSrcPktLenErrors=wfHwCompDecompressionSrcPktLenErrors, wfWcpVcDecompressorState=wfWcpVcDecompressorState, wfStacCircuitCompressionMode=wfStacCircuitCompressionMode, wfStacCircuitTxResetReqs=wfStacCircuitTxResetReqs, wfWcpVcEntry=wfWcpVcEntry, wfWcpCircuitDecompressorOutBytes=wfWcpCircuitDecompressorOutBytes, wfHwCompTxExpandedPkts=wfHwCompTxExpandedPkts, wfHwComp8kContextsTotal=wfHwComp8kContextsTotal, wfWcpLineLLIndex=wfWcpLineLLIndex, wfHwCompChipType=wfHwCompChipType, wfWcpLineFallbackCompressionMode=wfWcpLineFallbackCompressionMode, wfHwCompDecompressionHistoryTotal=wfHwCompDecompressionHistoryTotal, wfHwCompDecompressionErrors=wfHwCompDecompressionErrors, wfWcpVcCompressionMode=wfWcpVcCompressionMode, wfHwComp8kContextsAvailable=wfHwComp8kContextsAvailable, wfHwCompMsaDecompressedPkts=wfHwCompMsaDecompressedPkts, wfWcpVcTxRexmitReqs=wfWcpVcTxRexmitReqs, wfWcpVcHistorySize=wfWcpVcHistorySize, wfWcpLineDelete=wfWcpLineDelete, wfWcpVcEngineType=wfWcpVcEngineType, wfHwCompCompressionDescFormatErrors=wfHwCompCompressionDescFormatErrors, wfWcpCircuitSearchDepth=wfWcpCircuitSearchDepth, wfHwComp32kContextsTotal=wfHwComp32kContextsTotal, wfStacCircuitEngineType=wfStacCircuitEngineType, wfWcpVcRxResetReqs=wfWcpVcRxResetReqs, wfHwCompDecompressionDescFormatErrors=wfHwCompDecompressionDescFormatErrors, wfHwCompCompressionSrcPktLenErrors=wfHwCompCompressionSrcPktLenErrors, wfWcpLineTable=wfWcpLineTable, wfHwCompState=wfHwCompState, wfHwCompStacPpcContextsInUse=wfHwCompStacPpcContextsInUse, wfWcpCircuitCompressorOutBytes=wfWcpCircuitCompressorOutBytes, wfWcpVcRxCPCPackets=wfWcpVcRxCPCPackets, wfHwCompPpcContextsRegistered=wfHwCompPpcContextsRegistered, wfHwCompDecompressionPkts=wfHwCompDecompressionPkts, wfWcpVcRxRexmitReqs=wfWcpVcRxRexmitReqs, wfStacCircuitTxMode0Packets=wfStacCircuitTxMode0Packets, wfWcpVcLLIndex=wfWcpVcLLIndex, wfStacCircuitDecompressorInBytes=wfStacCircuitDecompressorInBytes, wfStacCircuitRxMode0Packets=wfStacCircuitRxMode0Packets, wfStacCircuitTxMode3Packets=wfStacCircuitTxMode3Packets, wfWcpVcTxCPCPackets=wfWcpVcTxCPCPackets, wfHwCompDecompressionTotalRingSize=wfHwCompDecompressionTotalRingSize, wfWcpLineClientDecompressorRingSize=wfWcpLineClientDecompressorRingSize, wfHwCompMsaRxNonCompressedPkts=wfHwCompMsaRxNonCompressedPkts, wfHwCompStacDecompressedPkts=wfHwCompStacDecompressedPkts, wfStacCircuitRxExpPackets=wfStacCircuitRxExpPackets, wfWcpLineCompressionMode=wfWcpLineCompressionMode, wfHwCompCompressionCurrentQueued=wfHwCompCompressionCurrentQueued, wfWcpLineSearchDepth=wfWcpLineSearchDepth, wfHwCompCompressionHistoryTotal=wfHwCompCompressionHistoryTotal, wfWcpVcCompressorState=wfWcpVcCompressorState, wfHwCompCompressionInternalErrors=wfHwCompCompressionInternalErrors, wfHwCompDecompressionInternalErrors=wfHwCompDecompressionInternalErrors, wfHwCompDecompressionCurrentQueued=wfHwCompDecompressionCurrentQueued, wfWcpCircuitTable=wfWcpCircuitTable, wfHwCompStacContextsGuaranteed=wfHwCompStacContextsGuaranteed, wfHwCompStacContextsAvailable=wfHwCompStacContextsAvailable, wfWcpVcRexmitTimeouts=wfWcpVcRexmitTimeouts, wfWcpCircuitHistorySize=wfWcpCircuitHistorySize, wfStacCircuitRxMode3Packets=wfStacCircuitRxMode3Packets, wfHwCompSlot=wfHwCompSlot, wfWcpCircuitDelete=wfWcpCircuitDelete, wfStacCircuitCompressorInBytes=wfStacCircuitCompressorInBytes, wfHwComp32kContextsInUse=wfHwComp32kContextsInUse, wfStacCircuitFallBackCompressionMode=wfStacCircuitFallBackCompressionMode, wfWcpVcExceededKs=wfWcpVcExceededKs, wfHwCompCompressionPkts=wfHwCompCompressionPkts, wfWcpLineEntry=wfWcpLineEntry, wfHwCompCompressionCcbFormatErrors=wfHwCompCompressionCcbFormatErrors, wfHwCompMsaCompressedPkts=wfHwCompMsaCompressedPkts, wfHwCompStacPpcContextsRegistered=wfHwCompStacPpcContextsRegistered, wfWcpVcRxAntiExpPackets=wfWcpVcRxAntiExpPackets, wfWcpLineLineNumber=wfWcpLineLineNumber, wfWcpCircuitId=wfWcpCircuitId, wfHwCompDecompressionCcbFormatErrors=wfHwCompDecompressionCcbFormatErrors, wfHwComp8kPpcContextsInUse=wfHwComp8kPpcContextsInUse, wfWcpLineEngineType=wfWcpLineEngineType, wfHwCompStacContextsTotal=wfHwCompStacContextsTotal, wfWcpVcDataOutOfSeqs=wfWcpVcDataOutOfSeqs, wfWcpLineClientCompressorRingSize=wfWcpLineClientCompressorRingSize, wfWcpVcSearchDepth=wfWcpVcSearchDepth, wfHwCompCompressionRingOverflows=wfHwCompCompressionRingOverflows, wfHwCompDecompressionRingOverflows=wfHwCompDecompressionRingOverflows, wfHwCompMsaCpcContextsRegistered=wfHwCompMsaCpcContextsRegistered, wfStacCircuitEntry=wfStacCircuitEntry, wfHwCompCompressionTotalRingSize=wfHwCompCompressionTotalRingSize, wfHwCompStacTxExpandedPkts=wfHwCompStacTxExpandedPkts, wfWcpVcCompressorOutBytes=wfWcpVcCompressorOutBytes, wfHwComp8kCpcContextsInUse=wfHwComp8kCpcContextsInUse, wfWcpVcId=wfWcpVcId, wfWcpVcTxAntiExpPackets=wfWcpVcTxAntiExpPackets, wfStacCircuitId=wfStacCircuitId, wfWcpCircuitCompressionMode=wfWcpCircuitCompressionMode, wfWcpVcTxPPCPackets=wfWcpVcTxPPCPackets, wfStacCircuitDecompressorOutBytes=wfStacCircuitDecompressorOutBytes, wfHwCompRxDroppedPkts=wfHwCompRxDroppedPkts, wfHwCompMsaTxNonCompressedPkts=wfHwCompMsaTxNonCompressedPkts)
