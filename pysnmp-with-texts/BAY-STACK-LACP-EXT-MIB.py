#
# PySNMP MIB module BAY-STACK-LACP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-LACP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, ModuleIdentity, Bits, Integer32, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "ModuleIdentity", "Bits", "Integer32", "IpAddress", "Counter32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackLacpExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 7))
bayStackLacpExtMib.setRevisions(('2005-11-14 00:00', '2004-06-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackLacpExtMib.setRevisionsDescriptions(('v2: Added bsleDot3adCompatibilityMode.', 'v1: Initial version.',))
if mibBuilder.loadTexts: bayStackLacpExtMib.setLastUpdated('200511140000Z')
if mibBuilder.loadTexts: bayStackLacpExtMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: bayStackLacpExtMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: bayStackLacpExtMib.setDescription("BayStack LACP Extension MIB Copyright 2004 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bsleNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 7, 0))
bsleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 7, 1))
bsleScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 7, 1, 1))
bsleDot3adCompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("advanced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsleDot3adCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: bsleDot3adCompatibilityMode.setDescription('The compatibility mode. This determines behaviour when an LACP-enabled port is connected to a non-LACP partner, or when an LACP active trunk port is removed from the trunk configuration.')
bsleDot3adAggPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 7, 2), )
if mibBuilder.loadTexts: bsleDot3adAggPortExtTable.setStatus('current')
if mibBuilder.loadTexts: bsleDot3adAggPortExtTable.setDescription('This table extends the dot3adAggPortTable.')
bsleDot3adAggPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1), ).setIndexNames((0, "BAY-STACK-LACP-EXT-MIB", "bsleDot3adAggPortExtIndex"))
if mibBuilder.loadTexts: bsleDot3adAggPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: bsleDot3adAggPortExtEntry.setDescription('An entry that extends dot3adAggPortEntry.')
bsleDot3adAggPortExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsleDot3adAggPortExtIndex.setStatus('current')
if mibBuilder.loadTexts: bsleDot3adAggPortExtIndex.setDescription('This object is equal to the value of dot3adAggPortIndex of the entry in the dot3adAggPortTable extended by this entry.')
bsleDot3adAggPortExtAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsleDot3adAggPortExtAdminEnabled.setStatus('current')
if mibBuilder.loadTexts: bsleDot3adAggPortExtAdminEnabled.setDescription('The current administrative setting for the port. A value of true(1) means the port is set to participate in LACP. A value of false(2) means the port is set to not participate in LACP.')
bsleDot3adAggPortExtOperEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 7, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsleDot3adAggPortExtOperEnabled.setStatus('current')
if mibBuilder.loadTexts: bsleDot3adAggPortExtOperEnabled.setDescription('The current operational state for the port. A value of true(1) means the port is participating in LACP. A value of false(2) means the port is not participating in LACP.')
mibBuilder.exportSymbols("BAY-STACK-LACP-EXT-MIB", bsleDot3adAggPortExtIndex=bsleDot3adAggPortExtIndex, bsleDot3adAggPortExtOperEnabled=bsleDot3adAggPortExtOperEnabled, bsleScalars=bsleScalars, PYSNMP_MODULE_ID=bayStackLacpExtMib, bsleDot3adAggPortExtEntry=bsleDot3adAggPortExtEntry, bsleNotifications=bsleNotifications, bayStackLacpExtMib=bayStackLacpExtMib, bsleDot3adAggPortExtTable=bsleDot3adAggPortExtTable, bsleObjects=bsleObjects, bsleDot3adAggPortExtAdminEnabled=bsleDot3adAggPortExtAdminEnabled, bsleDot3adCompatibilityMode=bsleDot3adCompatibilityMode)
