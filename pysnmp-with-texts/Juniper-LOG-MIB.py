#
# PySNMP MIB module Juniper-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:03:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniLogSeverity, = mibBuilder.importSymbols("Juniper-TC", "JuniLogSeverity")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, ModuleIdentity, Unsigned32, Integer32, Bits, Counter32, Counter64, iso, TimeTicks, Gauge32, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Unsigned32", "Integer32", "Bits", "Counter32", "Counter64", "iso", "TimeTicks", "Gauge32", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, RowStatus, TextualConvention, DateAndTime, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DateAndTime", "DisplayString", "TimeStamp")
juniLogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28))
juniLogMIB.setRevisions(('2002-09-16 21:44', '2001-03-16 19:02', '2000-03-27 05:00', '1999-11-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniLogMIB.setRevisionsDescriptions(('Replaced Unisphere names with Juniper names.', 'Make it SMIv2 conformant.', 'Replace single syslog destination with table of syslog destinations, and add syslog facility as an attribute for syslogs.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniLogMIB.setLastUpdated('200209162144Z')
if mibBuilder.loadTexts: juniLogMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniLogMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniLogMIB.setDescription('The Logging Facility MIB for the Juniper Networks enterprise.')
class JuniLogCatName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'The name of a log category. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class JuniLogVerbosity(TextualConvention, Integer32):
    description = 'The log verbosity level. Not all event types offer medium- or high-verbosity levels of detail.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("low", 0), ("medium", 1), ("high", 2))

class JuniLogSyslogFacility(TextualConvention, Integer32):
    description = 'The syslog daemon facility id.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("local0", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7))

juniLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1))
juniLogDestinations = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1))
juniLogCategories = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2))
juniLogMessages = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3))
juniLogDestSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1))
juniLogDestConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 2))
juniLogDestNvFile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 3))
juniLogDestSyslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 1), JuniLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogDestSyslogSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: juniLogDestSyslogSeverity.setDescription("The minimum severity level of messages sent to the SYSLOG server. A value of 'off' indicates no log messages are sent to this destination.")
juniLogDestSyslogAddress = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogDestSyslogAddress.setStatus('obsolete')
if mibBuilder.loadTexts: juniLogDestSyslogAddress.setDescription('The IP address of the SYSLOG server to which log messages are to be sent. A value of 0.0.0.0 indicates no server address is configured.')
juniLogSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 3), )
if mibBuilder.loadTexts: juniLogSyslogTable.setStatus('current')
if mibBuilder.loadTexts: juniLogSyslogTable.setDescription('A table describing the characteristics of each syslog destination.')
juniLogSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 3, 1), ).setIndexNames((0, "Juniper-LOG-MIB", "juniLogSyslogIpAddress"))
if mibBuilder.loadTexts: juniLogSyslogEntry.setStatus('current')
if mibBuilder.loadTexts: juniLogSyslogEntry.setDescription('An entry describingthe characteristics of a syslog destination.')
juniLogSyslogIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: juniLogSyslogIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniLogSyslogIpAddress.setDescription('The IP address of this syslog destination. This value must be a unicast IP address.')
juniLogSyslogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniLogSyslogRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniLogSyslogRowStatus.setDescription("Controls creation/deletion of entries in this table. Only 'createAndGo' and 'destroy' are supported.")
juniLogSyslogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 3, 1, 3), JuniLogSeverity().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniLogSyslogSeverity.setStatus('current')
if mibBuilder.loadTexts: juniLogSyslogSeverity.setDescription("The severity level for this syslog destination. Setting this value to 'off' suppresses log messages from being sent to this syslog destination.")
juniLogSyslogFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 1, 3, 1, 4), JuniLogSyslogFacility().clone('local7')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniLogSyslogFacility.setStatus('current')
if mibBuilder.loadTexts: juniLogSyslogFacility.setDescription('The facility id attached to messages sent to this syslog destination.')
juniLogDestConsoleSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 2, 1), JuniLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogDestConsoleSeverity.setStatus('current')
if mibBuilder.loadTexts: juniLogDestConsoleSeverity.setDescription("The minimum severity level of messages sent to the console. A value of 'off' indicates no log messages are sent to this destination.")
juniLogDestNvFileSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 1, 3, 1), JuniLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogDestNvFileSeverity.setStatus('current')
if mibBuilder.loadTexts: juniLogDestNvFileSeverity.setDescription("The minimum severity level of messages sent to the nonvolatile log file. A value of 'off' indicates no log messages are to be sent to this destination.")
juniLogCatScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 1))
juniLogCatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2), )
if mibBuilder.loadTexts: juniLogCatTable.setStatus('current')
if mibBuilder.loadTexts: juniLogCatTable.setDescription('A table describing the characteristics of each log category.')
juniLogCatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1), ).setIndexNames((0, "Juniper-LOG-MIB", "juniLogCatIndex"))
if mibBuilder.loadTexts: juniLogCatEntry.setStatus('current')
if mibBuilder.loadTexts: juniLogCatEntry.setDescription('An entry describing the characteristics of a log category.')
juniLogCatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: juniLogCatIndex.setStatus('current')
if mibBuilder.loadTexts: juniLogCatIndex.setDescription('An integer index uniquely associated with a log. Index values do not necessarily persist across system reboots. Following reboot, mappings of (reboot-invariant) log category names to log index values is available in the juniLogCatNameTable.')
juniLogCatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 2), JuniLogCatName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogCatName.setStatus('current')
if mibBuilder.loadTexts: juniLogCatName.setDescription('The name of this log category.')
juniLogCatDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogCatDescr.setStatus('current')
if mibBuilder.loadTexts: juniLogCatDescr.setDescription('A description of the functionality for which events are recorded by this log category.')
juniLogCatEngineering = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogCatEngineering.setStatus('current')
if mibBuilder.loadTexts: juniLogCatEngineering.setDescription('An indication of whether this log is intended mainly for engineering development and debug purposes.')
juniLogCatDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogCatDiscards.setStatus('current')
if mibBuilder.loadTexts: juniLogCatDiscards.setDescription('The number of messages generated by this log category that were discarded because of resource limitations.')
juniLogCatSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 6), JuniLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogCatSeverity.setStatus('current')
if mibBuilder.loadTexts: juniLogCatSeverity.setDescription("The severity level for this log category. The value 'off' disables recording of this log category's messages. For other severity level values, only messages at or above this severity level will be logged in juniLogMsgTable.")
juniLogCatVerbosity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 2, 1, 7), JuniLogVerbosity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogCatVerbosity.setStatus('current')
if mibBuilder.loadTexts: juniLogCatVerbosity.setDescription('The verbosity level for this log category. Supplementary information may be available for certain event types. This object controls whether that additional information, if available for a given event, is recorded.')
juniLogCatNameTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 3), )
if mibBuilder.loadTexts: juniLogCatNameTable.setStatus('current')
if mibBuilder.loadTexts: juniLogCatNameTable.setDescription("A table mapping each log category's name to its index.")
juniLogCatNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 3, 1), ).setIndexNames((1, "Juniper-LOG-MIB", "juniLogCatNameName"))
if mibBuilder.loadTexts: juniLogCatNameEntry.setStatus('current')
if mibBuilder.loadTexts: juniLogCatNameEntry.setDescription("An entry mapping a log category's name to its index.")
juniLogCatNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 3, 1, 1), JuniLogCatName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogCatNameName.setStatus('current')
if mibBuilder.loadTexts: juniLogCatNameName.setDescription('The name of the log category.')
juniLogCatNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogCatNameIndex.setStatus('current')
if mibBuilder.loadTexts: juniLogCatNameIndex.setDescription('The log index associated with this log category.')
juniLogMsgScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 1))
juniLogMsgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 1, 1), Integer32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgCapacity.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgCapacity.setDescription('The maximum capacity, in number of log messages, of the juniLogMsgTable.')
juniLogMsgLastSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgLastSeqNumber.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgLastSeqNumber.setDescription("The sequence number of the most recent juniLogMsgTable entry. By monitoring this object's rate of change in relation to the juniLogMsgTable capacity, a management client can determine whether it is polling juniLogMsgTable frequently enough to avoid missing log messages.")
juniLogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2), )
if mibBuilder.loadTexts: juniLogMsgTable.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgTable.setDescription('A table of log messages generated by this device.')
juniLogMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1), ).setIndexNames((0, "Juniper-LOG-MIB", "juniLogMsgSysUpTimeStamp"), (0, "Juniper-LOG-MIB", "juniLogMsgSequenceNumber"))
if mibBuilder.loadTexts: juniLogMsgEntry.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgEntry.setDescription('A log message generated by this device.')
juniLogMsgSysUpTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 1), TimeStamp())
if mibBuilder.loadTexts: juniLogMsgSysUpTimeStamp.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgSysUpTimeStamp.setDescription('The value of sysUpTime when this log message was recorded.')
juniLogMsgSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniLogMsgSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgSequenceNumber.setDescription('A sequence number that uniquely identifies this entry. Sequence numbers are assigned consecutively beginning with 1. More recent entries have higher sequence numbers.')
juniLogMsgCatName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 3), JuniLogCatName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgCatName.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgCatName.setDescription('Name of the log category that contributed this message.')
juniLogMsgCatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgCatIndex.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgCatIndex.setDescription('Index of the log category that contributed this message.')
juniLogMsgSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 5), JuniLogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgSeverity.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgSeverity.setDescription('The severity of the message.')
juniLogMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgText.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgText.setDescription("The text of the log message. Truncation of log message text is indicated by n asterisk character ('*') in the last octet of a maximum-size string.")
juniLogMsgDateAndTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 1, 3, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniLogMsgDateAndTimeStamp.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgDateAndTimeStamp.setDescription('The date and time this message was generated.')
juniLogTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 2))
juniLogMsgThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniLogMsgThreshold.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgThreshold.setDescription('Number of log messages which, when added to juniLogMsgTable, cause a juniLogMsgThresholdTrap to be generated. This value is expressed as a percentage of the capacity of juniLogMsgTable. A value of zero disables trap generation.')
juniLogTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 0))
juniLogMsgThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 0, 1)).setObjects(("Juniper-LOG-MIB", "juniLogMsgCapacity"), ("Juniper-LOG-MIB", "juniLogMsgLastSeqNumber"), ("Juniper-LOG-MIB", "juniLogMsgThreshold"))
if mibBuilder.loadTexts: juniLogMsgThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: juniLogMsgThresholdTrap.setDescription('This trap is generated to report that an incremental number of log messages (described by the value of juniLogMsgThreshold) have been added to juniLogMsgTable.')
juniLogMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4))
juniLogMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 1))
juniLogMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 2))
juniLogCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 1, 1)).setObjects(("Juniper-LOG-MIB", "juniLogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniLogCompliance = juniLogCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniLogCompliance.setDescription('Obsolete compliance statement for entities which implement the Juniper Networks Log MIB. This statement became obsolete when support for multiple SYSLOGs was added.')
juniLogCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 1, 2)).setObjects(("Juniper-LOG-MIB", "juniLogGroup2"), ("Juniper-LOG-MIB", "juniLogTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniLogCompliance2 = juniLogCompliance2.setStatus('current')
if mibBuilder.loadTexts: juniLogCompliance2.setDescription('The compliance statement for entities which implement the Juniper Networks Log MIB, including support for multiple SYSLOG destinations.')
juniLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 2, 1)).setObjects(("Juniper-LOG-MIB", "juniLogDestSyslogSeverity"), ("Juniper-LOG-MIB", "juniLogDestSyslogAddress"), ("Juniper-LOG-MIB", "juniLogDestConsoleSeverity"), ("Juniper-LOG-MIB", "juniLogDestNvFileSeverity"), ("Juniper-LOG-MIB", "juniLogCatName"), ("Juniper-LOG-MIB", "juniLogCatDescr"), ("Juniper-LOG-MIB", "juniLogCatEngineering"), ("Juniper-LOG-MIB", "juniLogCatDiscards"), ("Juniper-LOG-MIB", "juniLogCatSeverity"), ("Juniper-LOG-MIB", "juniLogCatVerbosity"), ("Juniper-LOG-MIB", "juniLogCatNameName"), ("Juniper-LOG-MIB", "juniLogCatNameIndex"), ("Juniper-LOG-MIB", "juniLogMsgCapacity"), ("Juniper-LOG-MIB", "juniLogMsgLastSeqNumber"), ("Juniper-LOG-MIB", "juniLogMsgCatName"), ("Juniper-LOG-MIB", "juniLogMsgCatIndex"), ("Juniper-LOG-MIB", "juniLogMsgSeverity"), ("Juniper-LOG-MIB", "juniLogMsgText"), ("Juniper-LOG-MIB", "juniLogMsgDateAndTimeStamp"), ("Juniper-LOG-MIB", "juniLogMsgThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniLogGroup = juniLogGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniLogGroup.setDescription('Obsolete collection of objects providing management of Juniper Networks logging capabilities. This group became obsolete when support for multiple SYSLOGs was added.')
juniLogGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 2, 2)).setObjects(("Juniper-LOG-MIB", "juniLogSyslogRowStatus"), ("Juniper-LOG-MIB", "juniLogSyslogSeverity"), ("Juniper-LOG-MIB", "juniLogSyslogFacility"), ("Juniper-LOG-MIB", "juniLogDestConsoleSeverity"), ("Juniper-LOG-MIB", "juniLogDestNvFileSeverity"), ("Juniper-LOG-MIB", "juniLogCatName"), ("Juniper-LOG-MIB", "juniLogCatDescr"), ("Juniper-LOG-MIB", "juniLogCatEngineering"), ("Juniper-LOG-MIB", "juniLogCatDiscards"), ("Juniper-LOG-MIB", "juniLogCatSeverity"), ("Juniper-LOG-MIB", "juniLogCatVerbosity"), ("Juniper-LOG-MIB", "juniLogCatNameName"), ("Juniper-LOG-MIB", "juniLogCatNameIndex"), ("Juniper-LOG-MIB", "juniLogMsgCapacity"), ("Juniper-LOG-MIB", "juniLogMsgLastSeqNumber"), ("Juniper-LOG-MIB", "juniLogMsgCatName"), ("Juniper-LOG-MIB", "juniLogMsgCatIndex"), ("Juniper-LOG-MIB", "juniLogMsgSeverity"), ("Juniper-LOG-MIB", "juniLogMsgText"), ("Juniper-LOG-MIB", "juniLogMsgDateAndTimeStamp"), ("Juniper-LOG-MIB", "juniLogMsgThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniLogGroup2 = juniLogGroup2.setStatus('current')
if mibBuilder.loadTexts: juniLogGroup2.setDescription('A collection of objects providing management of Juniper Networks logging capabilities, including support for multiple SYSLOG destinations.')
juniLogTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 28, 4, 2, 3)).setObjects(("Juniper-LOG-MIB", "juniLogMsgThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniLogTrapGroup = juniLogTrapGroup.setStatus('current')
if mibBuilder.loadTexts: juniLogTrapGroup.setDescription('A management notification pertaining to logging operations.')
mibBuilder.exportSymbols("Juniper-LOG-MIB", juniLogDestNvFileSeverity=juniLogDestNvFileSeverity, juniLogCatIndex=juniLogCatIndex, juniLogMsgCatName=juniLogMsgCatName, juniLogCompliance=juniLogCompliance, juniLogMsgScalars=juniLogMsgScalars, JuniLogCatName=JuniLogCatName, JuniLogSyslogFacility=JuniLogSyslogFacility, juniLogMsgSeverity=juniLogMsgSeverity, juniLogMsgText=juniLogMsgText, juniLogTrapPrefix=juniLogTrapPrefix, juniLogSyslogTable=juniLogSyslogTable, juniLogCatNameIndex=juniLogCatNameIndex, juniLogMessages=juniLogMessages, juniLogCompliance2=juniLogCompliance2, juniLogCatNameTable=juniLogCatNameTable, JuniLogVerbosity=JuniLogVerbosity, juniLogDestNvFile=juniLogDestNvFile, juniLogCatEntry=juniLogCatEntry, juniLogCatDescr=juniLogCatDescr, juniLogMsgCatIndex=juniLogMsgCatIndex, juniLogTrapControl=juniLogTrapControl, juniLogMsgThresholdTrap=juniLogMsgThresholdTrap, juniLogDestConsoleSeverity=juniLogDestConsoleSeverity, juniLogCatNameEntry=juniLogCatNameEntry, juniLogMsgEntry=juniLogMsgEntry, juniLogCategories=juniLogCategories, juniLogCatEngineering=juniLogCatEngineering, juniLogDestConsole=juniLogDestConsole, juniLogObjects=juniLogObjects, juniLogMIBGroups=juniLogMIBGroups, juniLogMsgSequenceNumber=juniLogMsgSequenceNumber, juniLogGroup=juniLogGroup, juniLogTrapGroup=juniLogTrapGroup, juniLogCatVerbosity=juniLogCatVerbosity, juniLogCatNameName=juniLogCatNameName, juniLogCatSeverity=juniLogCatSeverity, juniLogMsgLastSeqNumber=juniLogMsgLastSeqNumber, juniLogSyslogSeverity=juniLogSyslogSeverity, PYSNMP_MODULE_ID=juniLogMIB, juniLogDestSyslog=juniLogDestSyslog, juniLogGroup2=juniLogGroup2, juniLogDestinations=juniLogDestinations, juniLogSyslogRowStatus=juniLogSyslogRowStatus, juniLogCatTable=juniLogCatTable, juniLogCatName=juniLogCatName, juniLogMsgDateAndTimeStamp=juniLogMsgDateAndTimeStamp, juniLogMIBCompliances=juniLogMIBCompliances, juniLogDestSyslogAddress=juniLogDestSyslogAddress, juniLogSyslogEntry=juniLogSyslogEntry, juniLogMIB=juniLogMIB, juniLogCatScalars=juniLogCatScalars, juniLogMIBConformance=juniLogMIBConformance, juniLogSyslogIpAddress=juniLogSyslogIpAddress, juniLogCatDiscards=juniLogCatDiscards, juniLogMsgTable=juniLogMsgTable, juniLogMsgThreshold=juniLogMsgThreshold, juniLogSyslogFacility=juniLogSyslogFacility, juniLogMsgCapacity=juniLogMsgCapacity, juniLogMsgSysUpTimeStamp=juniLogMsgSysUpTimeStamp, juniLogDestSyslogSeverity=juniLogDestSyslogSeverity)
