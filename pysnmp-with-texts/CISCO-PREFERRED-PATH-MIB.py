#
# PySNMP MIB module CISCO-PREFERRED-PATH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PREFERRED-PATH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, FcAddressId = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex", "FcAddressId")
notifyVsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "notifyVsanIndex")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Bits, NotificationType, ModuleIdentity, Integer32, IpAddress, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, ObjectIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "NotificationType", "ModuleIdentity", "Integer32", "IpAddress", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "ObjectIdentity", "Counter32", "TimeTicks")
RowStatus, TruthValue, DisplayString, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "StorageType", "TextualConvention")
ciscoPrefPathMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 592))
ciscoPrefPathMIB.setRevisions(('2006-10-26 14:44',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPrefPathMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPrefPathMIB.setLastUpdated('200610261444Z')
if mibBuilder.loadTexts: ciscoPrefPathMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoPrefPathMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoPrefPathMIB.setDescription('The MIB module for the management of preferred path. This MIB enables managers to configure and monitor Preferred Path parameters. Preferred path provides a method of routing traffic over the selected paths, not necessarily the preferred shortest path as chosen by routing protocols such as FSPF. This kind of control allows users to choose shortest paths based on characteristics, such as frames received on a selected interface or frames with selected source FC-ID. This feature allows users to ensure paths seperation between switches for different traffic between a host and a target. Glossary: FC-ID - Fibre Channel Identifier. VSAN - Virtual Storage Area Network. fcroute - Fibre Channel route to host or target. FSPF - Fibre Shortest Path First. IVR - Inter-VSAN Routing.')
ciscoPrefPathMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 0))
ciscoPrefPathMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 1))
ciscoPrefPathMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 2))
ciscoPrefPathConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1))
ciscoPrefPathInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2))
class CiscoPrefPathFcAddrMask(TextualConvention, Integer32):
    description = 'A mask to be associated with an FC-ID. full - Represents a mask for the full FC-ID (0xFFFFFF). domainArea - Represents a mask only for domain and area fields of the FC-ID (0xFFFF00). domain - Represents a mask only for the domain field of the FC-ID. (0xFF0000). noMask - No masking.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("full", 1), ("domainArea", 2), ("domain", 3), ("noMask", 4))

class CiscoPrefPathStatus(TextualConvention, Integer32):
    description = 'A status of preferred path route map match and set entries. unknown - Unknown or undefined (error) state. active - Indicates that the entry is active. pending - Indicates that the entry is pending. Next fcroute-map or route activation will put the state to active. deleted - State indicating that the active entry was deleted. Next activation will remove the entry. changed - State indicating that the active entry was changed or modified. Next activation will apply the changes and move the state to active.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("active", 2), ("pending", 3), ("deleted", 4), ("changed", 5))

class CiscoPrefPathIvrNextHopVsanId(TextualConvention, Unsigned32):
    description = 'IVR next hop VSAN ID. The value of zero means no IVR next hop VSAN is available.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4093)

class CiscoPrefPathPreferenceLevel(TextualConvention, Unsigned32):
    description = 'Metric or cost of the preferred path.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 255)

cPrefPathRouteMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1), )
if mibBuilder.loadTexts: cPrefPathRouteMapTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapTable.setDescription("This table allows users to configure and monitor the preferred path fcroute-map parameters on all the VSANs configured on the local switch. A fcroute-map can be created per VSAN. For each fcroute-map users can create multiple routes which are identified by a route ID. Within each route there can be multiple flows which are configured using the cPrefPathRouteMapMatchTable table and the corresponding outgoing interface for a route can be configured using the cPrefPathRouteMapSetTable table. This table is the top-level table which is used to configure the fcroute-map indexed by VSAN ID and a route within a fcroute-map indexed by the route ID of the route. Entries in this table are created and deleted using the cPrefPathRouteMapRowStatus object. To create a row in this table, a manager must set the cPrefPathRouteMapRowStatus object to 'createAndGo' or 'createAndWait'. This will create a route within a fcroute-map. There is no need to configure instances of other corresponding columns - cPrefPathRouteMapIntfPrefStrict, cPrefPathRouteMapRouteActive, cPrefPathRouteMapActive in order to make the newly created row to active. To delete a row in this table, a manager must set the cPrefPathRouteMapRowStatus object to 'destroy'. This will delete a route within a fcroute-map.")
cPrefPathRouteMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteIndex"))
if mibBuilder.loadTexts: cPrefPathRouteMapEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapEntry.setDescription('A conceptual row in the cPrefPathRouteMapTable. There is an entry in this table for each route within a fcroute-map.')
cPrefPathRouteMapVsanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 1), VsanIndex())
if mibBuilder.loadTexts: cPrefPathRouteMapVsanIndex.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapVsanIndex.setDescription('The VSAN ID of this fcroute-map.')
cPrefPathRouteMapRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: cPrefPathRouteMapRouteIndex.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapRouteIndex.setDescription('An arbitrary integer value which identifies a route in this fcroute-map.')
cPrefPathRouteMapIntfPrefStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRouteMapIntfPrefStrict.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapIntfPrefStrict.setDescription("This object allows to change the way the preferred path selection logic would select the preferred path. Setting this object to 'true' will make the preferred path to select the outgoing interface strictly based on the preference set using the cPrefPathRMapSetIntfPref. When this object is set to 'false', then the preferred path selection logic will perform selection only when the current outgoing interface goes down.")
cPrefPathRouteMapRouteActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRouteMapRouteActive.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapRouteActive.setDescription("This object allows to activate/de-activate the route within a fcroute-map. If value of this object is set to 'true', then route will be activated. If set to 'false', then the route will be de-activated. After the route is activated, any incremental updates or changes made to the match or set criteria would require this object to be set to 'true' again (re-activation).")
cPrefPathRouteMapActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRouteMapActive.setStatus('deprecated')
if mibBuilder.loadTexts: cPrefPathRouteMapActive.setDescription("This object allows to activate/de-activate all the routes within a fcroute-map. If value of this object is set to 'true', then all the routes within this fcroute-map will be activated. If set to 'false', then all routes within this fcroute-map will be de-activated. After the fcroute-map is activated, any incremental updates or changes made to the match or set criteria would require this object to be set to 'true' again (re-activation).")
cPrefPathRouteMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 6), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRouteMapStorageType.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
cPrefPathRouteMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRouteMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapRowStatus.setDescription('The status of this conceptual row. There is no need to configure instances of other corresponding columnar objects in order to make the newly created row to active. Instances of all other corresponding columns can be modified for an active row.')
cPrefPathRouteMapGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 2), )
if mibBuilder.loadTexts: cPrefPathRouteMapGlobalTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapGlobalTable.setDescription('This table allows users to configure and monitor the preferred path fcroute-map global parameters. Entries in this table are automatically created when the first route in a fcroute-map is created using the cPrefPathRouteMapTable table. An entry is deleted automatically from this table if either: - The last route in a fcroute-map is removed using the cPrefPathRouteMapTable table. or - The corresponding VSAN is deleted using the vsanTable table (Defined in CISCO-VSAN-MIB).')
cPrefPathRouteMapGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"))
if mibBuilder.loadTexts: cPrefPathRouteMapGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapGlobalEntry.setDescription('A row in the cPrefPathRouteMapGlobalTable table. There is an entry in this table for each fcroute-map created.')
cPrefPathRouteMapGlobalActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("partial", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cPrefPathRouteMapGlobalActive.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapGlobalActive.setDescription("This object allows to activate/de-activate all the routes within a fcroute-map. This object is read-write for the values of 'all' and 'none', but cannot be set to 'partial'. If this object is set to 'all', then all the routes within this fcroute-map will be activated. If this object is set to 'none', then all routes within this fcroute-map will be de-activated. The value of 'partial' indicates that not all of the routes within this fcroute-map are active. This happens when some of the routes within this fcroute-map is de-activated by using cPrefPathRouteMapRouteActive object. After the fcroute-map is activated, any incremental updates or changes made to the match or set criteria would require this object to be set to 'all' again (re-activation).")
cPrefPathRouteMapMatchTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3), )
if mibBuilder.loadTexts: cPrefPathRouteMapMatchTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapMatchTable.setDescription("This table allows to configure and monitor the match criteria for a route within a fcroute-map created using the cPrefPathRouteMapTable table. Each match criteria allows user to classify a traffic flow based on the the incoming frame's source FC-ID and destination FC-ID match. Each entry in this table is indexed by the - cPrefPathRouteMapVsanIndex - cPrefPathRouteMapRouteIndex - cPrefPathRMapMatchSrcAddr - cPrefPathRMapMatchSrcAddrMask - cPrefPathRMapMatchSrcIntf - cPrefPathRMapMatchDstAddr - cPrefPathRMapMatchDstAddrMask Note that any changes or updates made to the match criteria would require the corresponding route or the corresponding fcroute-map to be activated again. Entries in this table are created and deleted using the cPrefPathRMapMatchRowStatus object. To create a row in this table, a manager must set the cPrefPathRMapMatchRowStatus object to 'createAndGo' or 'createAndWait'. This will create a match criteria for a route within a fcroute-map. To delete a row in this table, a manager must set the cPrefPathRMapMatchRowStatus object to 'destroy'. This table is dependent on cPrefPathRouteMapTable table. The association between this table and cPrefPathRouteMapTable table is through the common indices - cPrefPathRouteMapRouteIndex and cPrefPathRouteMapVsanIndex. All the entries in this table with the indices - cPrefPathRouteMapVsanIndex and cPrefPathRouteMapRouteIndex is in fact the match criteria or the flows associated with the route within a fcroute-map for a VSAN, which are created and activated using the cPrefPathRouteMapTable table. When the row corresponding to indices - cPrefPathRouteMapVsanIndex and cPrefPathRouteMapRouteIndex in the cPrefPathRouteMapTable is destroyed then all the rows in this table with those indices will be destroyed.")
cPrefPathRouteMapMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchSrcAddr"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchSrcAddrMask"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchSrcIntf"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchDstAddr"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchDstAddrMask"))
if mibBuilder.loadTexts: cPrefPathRouteMapMatchEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapMatchEntry.setDescription('An entry (conceptual row) in this table. There is an entry in this table for each match criteria of a route within a fcroute-map.')
cPrefPathRMapMatchSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1, 1), FcAddressId())
if mibBuilder.loadTexts: cPrefPathRMapMatchSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchSrcAddr.setDescription('The FC-ID which need to be matched with source address in a frame for the flow classification.')
cPrefPathRMapMatchSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1, 2), CiscoPrefPathFcAddrMask())
if mibBuilder.loadTexts: cPrefPathRMapMatchSrcAddrMask.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchSrcAddrMask.setDescription('This object represents the mask associated with the source address represented by cPrefPathRMapMatchSrcAddr. The value of this object is meaningful only if the corresponding instance of cPrefPathRMapMatchSrcAddr contains a valid FC-ID.')
cPrefPathRMapMatchSrcIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1, 3), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cPrefPathRMapMatchSrcIntf.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchSrcIntf.setDescription('This object represents an interface on the local device on which a frame should arrive for flow classification. The value of 0 indicates that source interface match is not selected.')
cPrefPathRMapMatchDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1, 4), FcAddressId())
if mibBuilder.loadTexts: cPrefPathRMapMatchDstAddr.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchDstAddr.setDescription('The FC-ID which need to be matched with destination address in a frame for flow classification.')
cPrefPathRMapMatchDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1, 5), CiscoPrefPathFcAddrMask())
if mibBuilder.loadTexts: cPrefPathRMapMatchDstAddrMask.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchDstAddrMask.setDescription('This object represents the mask associated with the destination address represented by cPrefPathRMapMatchDstAddr. The value of this object is meaningful only if the corresponding instance of cPrefPathRMapMatchDstAddr contains a valid FC-ID.')
cPrefPathRMapMatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRMapMatchRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchRowStatus.setDescription('The status of this conceptual row. There is no need to configure instances of other corresponding columnar objects in order to make the newly created row to active. Instances of all other corresponding columns can be modified for an active row.')
cPrefPathRouteMapSetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 4), )
if mibBuilder.loadTexts: cPrefPathRouteMapSetTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetTable.setDescription("This table allows to configure and monitor the set criteria for a route within a fcroute-map created using the cPrefPathRouteMapTable table. Each set criteria allows user to setup an action on the classified or matched traffic flow created using the cPrefPathRouteMapMatchTable table. Each set criteria allows user to setup an outgoing interface, and associate it with a preference level. Preference level indicates the priority of the interface during the selection in case multiple outgoing interfaces are configured. Match criteria configured using the cPrefPathRouteMapMatchTable table for a route within a fcroute-map and the set criteria (this table) configured for the same route within a fcroute-map go together as (match, set) pair. Which means that those matched traffic flows will be forwarded or routed via the interface selected based on the preference level in the set criteria (this table). Each entry in this table is indexed by the - cPrefPathRouteMapVsanIndex - cPrefPathRouteMapRouteIndex - cPrefPathRMapSetIntfPref Note any changes or updates made to the set criteria would require the corresponding route or the corresponding fcroute-map to be activated again. Entries in this table are created and deleted using the cPrefPathRMapSetRowStatus object. To create a row in this table, a manager must set the cPrefPathRMapSetRowStatus object to 'createAndGo' or 'createAndWait'. This will create a set criteria for a route within a fcroute-map. It is required to configure instances of cPrefPathRMapSetIntf column before or concurrently in order to make the newly created row to active. To delete a row in this table, a manager must set the cPrefPathRMapSetRowStatus object to 'destroy'. This table is dependent on cPrefPathRouteMapTable table. The association between this table and the cPrefPathRouteMapTable table is through the common indices - cPrefPathRouteMapVsanIndex and cPrefPathRouteMapVsanIndex. All the entries in this table with the indices - cPrefPathRouteMapVsanIndex and cPrefPathRouteMapRouteIndex is in fact the set criteria associated with the route within a fcroute-map, which are created and activated in the cPrefPathRouteMapTable Table. When the row corresponding to indices - cPrefPathRouteMapVsanIndex and cPrefPathRouteMapRouteIndex in the cPrefPathRouteMapTable is destroyed then all the rows in this table with those indices will be destroyed.")
cPrefPathRouteMapSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetIntfPref"))
if mibBuilder.loadTexts: cPrefPathRouteMapSetEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetEntry.setDescription('An entry (conceptual row) in this table. There is an entry in this table for each set criteria of a route within a fcroute-map.')
cPrefPathRMapSetIntfPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 4, 1, 1), CiscoPrefPathPreferenceLevel())
if mibBuilder.loadTexts: cPrefPathRMapSetIntfPref.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSetIntfPref.setDescription('Preference level, which indicates the metric or cost, associated with the cPrefPathRMapSetIntf outgoing interface. The lower the number the higher the preference.')
cPrefPathRMapSetIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRMapSetIntf.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSetIntf.setDescription('This object represents an interface on the local device on which the matched or classified frame will be forwarded.')
cPrefPathRMapSetIvrNextHopVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 4, 1, 3), CiscoPrefPathIvrNextHopVsanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRMapSetIvrNextHopVsanId.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSetIvrNextHopVsanId.setDescription('This object represents the IVR next hop VSAN ID.')
cPrefPathRMapSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPrefPathRMapSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSetRowStatus.setDescription('The status of this conceptual row. It is required to configure instances of cPrefPathRMapSetIntf column before or concurrently in order to make the newly created row to active. Instances of all other corresponding columns can be modified for an active row.')
cPrefPathRouteMapInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 1), )
if mibBuilder.loadTexts: cPrefPathRouteMapInfoTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapInfoTable.setDescription("This table contains information of the 'preferred path' that is currently active and selected for a route within a fcroute-map. The 'preferred path' is the selected preference level, and its associated interface which will be the outgoing interface for traffic that are classified using the match criteria in that particular indexed fcroute-map route. Each entry in this table is indexed by - cPrefPathRouteMapVsanIndex - cPrefPathRouteMapRouteIndex For each route in a fcroute-map, preferred path selects a preference level (the lower the number the higher the preference) per VSAN based on link status of interface associated with the preference level. This table contains the information of the selected preference level.")
cPrefPathRouteMapInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteIndex"))
if mibBuilder.loadTexts: cPrefPathRouteMapInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapInfoEntry.setDescription('An entry which contains information about the preferred path of a route within a fcroute-map.')
cPrefPathRMapSelectedPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 1, 1, 1), CiscoPrefPathPreferenceLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRMapSelectedPref.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSelectedPref.setDescription('The selected preference level.')
cPrefPathRMapSelectedIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRMapSelectedIntf.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSelectedIntf.setDescription('This object represents an interface on the local device which is selected to forward the classified or matched flow.')
cPrefPathRMapSelIvrNextHopVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 1, 1, 3), CiscoPrefPathIvrNextHopVsanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRMapSelIvrNextHopVsanId.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapSelIvrNextHopVsanId.setDescription('This object represents the IVR next hop VSAN ID.')
cPrefPathRouteMapMatchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 2), )
if mibBuilder.loadTexts: cPrefPathRouteMapMatchInfoTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapMatchInfoTable.setDescription('This table allows to monitor the status of the the match criteria of the route within a fcroute-map that are activated using the cPrefPathRouteMapGlobalActive or cPrefPathRouteMapRouteActive objects. Each match criteria entry in this table is indexed by - cPrefPathRouteMapVsanIndex - cPrefPathRouteMapRouteIndex - cPrefPathRMapMatchSrcAddr - cPrefPathRMapMatchSrcAddrMask - cPrefPathRMapMatchSrcIntf - cPrefPathRMapMatchDstAddr - cPrefPathRMapMatchDstAddrMask')
cPrefPathRouteMapMatchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchSrcAddr"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchSrcAddrMask"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchSrcIntf"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchDstAddr"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchDstAddrMask"))
if mibBuilder.loadTexts: cPrefPathRouteMapMatchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapMatchInfoEntry.setDescription("An entry which contains information about the match criteria of an 'active' route within a fcroute-map.")
cPrefPathRMapMatchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 2, 1, 1), CiscoPrefPathStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRMapMatchStatus.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRMapMatchStatus.setDescription('The status of the indexed match entry.')
cPrefPathRouteMapSetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 3), )
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoTable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoTable.setDescription('This table allows to monitor the status of the the set criteria of the route within a fcroute-map that are activated using the cPrefPathRouteMapGlobalActive or cPrefPathRouteMapRouteActive objects. Each entry in this table is indexed by - cPrefPathRouteMapVsanIndex - cPrefPathRouteMapRouteIndex - cPrefPathRMapSetIntfPref.')
cPrefPathRouteMapSetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapVsanIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteIndex"), (0, "CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetIntfPref"))
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoEntry.setDescription("An entry which contains information about the set criteria of an 'active' route within a fcroute-map.")
cPrefPathRouteMapSetInfoIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoIntf.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoIntf.setDescription('This object represents an interface on the local device on which the matched or classified frame will be forwarded.')
cPrefPathRouteMapSetInfoIvrNextHopVId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 3, 1, 2), CiscoPrefPathIvrNextHopVsanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoIvrNextHopVId.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetInfoIvrNextHopVId.setDescription('This object represents the IVR next hop VSAN ID.')
cPrefPathRouteMapSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 2, 3, 1, 3), CiscoPrefPathStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPrefPathRouteMapSetStatus.setStatus('current')
if mibBuilder.loadTexts: cPrefPathRouteMapSetStatus.setDescription('The status of the indexed set entry.')
cPrefPathHwFailureNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 592, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cPrefPathHwFailureNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cPrefPathHwFailureNotifEnable.setDescription("This variable indicates whether the system produces the ciscoPrefPathHWFailureNotify. A 'false' value for this object will prevent ciscoPrefPathHWFailureNotify notification being generated by the device.")
ciscoPrefPathHWFailureNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 592, 0, 1)).setObjects(("CISCO-VSAN-MIB", "notifyVsanIndex"))
if mibBuilder.loadTexts: ciscoPrefPathHWFailureNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoPrefPathHWFailureNotify.setDescription('This notification is generated whenever the local device encounters some hardware failures during programming of local preferred path configuration.')
ciscoPrefPathMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 1))
ciscoPrefPathMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 2))
ciscoPrefPathMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 1, 1)).setObjects(("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathConfigGroup"), ("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathInfoGroup"), ("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathNotifyGroup"), ("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathNotifyConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathMIBCompliance = ciscoPrefPathMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPrefPathMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-PREFERRED-PATH-MIB.')
ciscoPrefPathMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 1, 2)).setObjects(("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathConfigGroupRev1"), ("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathInfoGroup"), ("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathNotifyGroup"), ("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathNotifyConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathMIBComplianceRev1 = ciscoPrefPathMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoPrefPathMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-PREFERRED-PATH-MIB.')
ciscoPrefPathConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 2, 1)).setObjects(("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetIntf"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetIvrNextHopVsanId"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapIntfPrefStrict"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteActive"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapActive"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapStorageType"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRowStatus"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchRowStatus"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathConfigGroup = ciscoPrefPathConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPrefPathConfigGroup.setDescription('A collection of objects for configuring and displaying Preferred Path parameters.')
ciscoPrefPathInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 2, 2)).setObjects(("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSelectedPref"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSelectedIntf"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSelIvrNextHopVsanId"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchStatus"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapSetInfoIntf"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapSetInfoIvrNextHopVId"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapSetStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathInfoGroup = ciscoPrefPathInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPrefPathInfoGroup.setDescription('A collection of objects for providing information for preferred path notifications.')
ciscoPrefPathNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 2, 3)).setObjects(("CISCO-PREFERRED-PATH-MIB", "ciscoPrefPathHWFailureNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathNotifyGroup = ciscoPrefPathNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPrefPathNotifyGroup.setDescription('A collection of notifications for monitoring failure in configuring Preferred Path parameters on the local device.')
ciscoPrefPathNotifyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 2, 4)).setObjects(("CISCO-PREFERRED-PATH-MIB", "cPrefPathHwFailureNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathNotifyConfigGroup = ciscoPrefPathNotifyConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPrefPathNotifyConfigGroup.setDescription('A collection of objects for displaying and configuring preferred path notifications.')
ciscoPrefPathConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 592, 2, 2, 5)).setObjects(("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapGlobalActive"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetIntf"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetIvrNextHopVsanId"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapIntfPrefStrict"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRouteActive"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapStorageType"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRouteMapRowStatus"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapMatchRowStatus"), ("CISCO-PREFERRED-PATH-MIB", "cPrefPathRMapSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPrefPathConfigGroupRev1 = ciscoPrefPathConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoPrefPathConfigGroupRev1.setDescription('A collection of objects for configuring and displaying Preferred Path parameters.')
mibBuilder.exportSymbols("CISCO-PREFERRED-PATH-MIB", cPrefPathRouteMapTable=cPrefPathRouteMapTable, ciscoPrefPathMIBComplianceRev1=ciscoPrefPathMIBComplianceRev1, cPrefPathRouteMapSetEntry=cPrefPathRouteMapSetEntry, CiscoPrefPathStatus=CiscoPrefPathStatus, ciscoPrefPathInfoGroup=ciscoPrefPathInfoGroup, cPrefPathRouteMapVsanIndex=cPrefPathRouteMapVsanIndex, cPrefPathRMapMatchSrcIntf=cPrefPathRMapMatchSrcIntf, cPrefPathRMapSetIvrNextHopVsanId=cPrefPathRMapSetIvrNextHopVsanId, cPrefPathRouteMapActive=cPrefPathRouteMapActive, cPrefPathRouteMapGlobalActive=cPrefPathRouteMapGlobalActive, cPrefPathRouteMapSetStatus=cPrefPathRouteMapSetStatus, ciscoPrefPathHWFailureNotify=ciscoPrefPathHWFailureNotify, cPrefPathRouteMapEntry=cPrefPathRouteMapEntry, cPrefPathHwFailureNotifEnable=cPrefPathHwFailureNotifEnable, CiscoPrefPathFcAddrMask=CiscoPrefPathFcAddrMask, cPrefPathRouteMapStorageType=cPrefPathRouteMapStorageType, cPrefPathRouteMapGlobalEntry=cPrefPathRouteMapGlobalEntry, cPrefPathRMapMatchSrcAddrMask=cPrefPathRMapMatchSrcAddrMask, cPrefPathRouteMapMatchInfoTable=cPrefPathRouteMapMatchInfoTable, ciscoPrefPathInformation=ciscoPrefPathInformation, ciscoPrefPathMIBNotifs=ciscoPrefPathMIBNotifs, cPrefPathRouteMapSetInfoTable=cPrefPathRouteMapSetInfoTable, ciscoPrefPathMIBObjects=ciscoPrefPathMIBObjects, cPrefPathRMapSetIntfPref=cPrefPathRMapSetIntfPref, ciscoPrefPathMIBConform=ciscoPrefPathMIBConform, cPrefPathRMapSelIvrNextHopVsanId=cPrefPathRMapSelIvrNextHopVsanId, cPrefPathRouteMapSetInfoIntf=cPrefPathRouteMapSetInfoIntf, cPrefPathRouteMapInfoEntry=cPrefPathRouteMapInfoEntry, cPrefPathRMapSelectedPref=cPrefPathRMapSelectedPref, cPrefPathRouteMapRouteIndex=cPrefPathRouteMapRouteIndex, ciscoPrefPathMIBGroups=ciscoPrefPathMIBGroups, cPrefPathRouteMapIntfPrefStrict=cPrefPathRouteMapIntfPrefStrict, ciscoPrefPathConfiguration=ciscoPrefPathConfiguration, cPrefPathRouteMapSetInfoEntry=cPrefPathRouteMapSetInfoEntry, cPrefPathRMapMatchDstAddrMask=cPrefPathRMapMatchDstAddrMask, ciscoPrefPathConfigGroup=ciscoPrefPathConfigGroup, CiscoPrefPathIvrNextHopVsanId=CiscoPrefPathIvrNextHopVsanId, cPrefPathRMapMatchDstAddr=cPrefPathRMapMatchDstAddr, cPrefPathRouteMapMatchTable=cPrefPathRouteMapMatchTable, cPrefPathRouteMapMatchInfoEntry=cPrefPathRouteMapMatchInfoEntry, CiscoPrefPathPreferenceLevel=CiscoPrefPathPreferenceLevel, ciscoPrefPathNotifyConfigGroup=ciscoPrefPathNotifyConfigGroup, cPrefPathRouteMapGlobalTable=cPrefPathRouteMapGlobalTable, ciscoPrefPathMIBCompliances=ciscoPrefPathMIBCompliances, PYSNMP_MODULE_ID=ciscoPrefPathMIB, cPrefPathRouteMapSetInfoIvrNextHopVId=cPrefPathRouteMapSetInfoIvrNextHopVId, ciscoPrefPathMIBCompliance=ciscoPrefPathMIBCompliance, cPrefPathRMapSetIntf=cPrefPathRMapSetIntf, cPrefPathRouteMapSetTable=cPrefPathRouteMapSetTable, cPrefPathRouteMapInfoTable=cPrefPathRouteMapInfoTable, cPrefPathRMapMatchSrcAddr=cPrefPathRMapMatchSrcAddr, cPrefPathRMapSetRowStatus=cPrefPathRMapSetRowStatus, cPrefPathRMapSelectedIntf=cPrefPathRMapSelectedIntf, cPrefPathRouteMapRouteActive=cPrefPathRouteMapRouteActive, cPrefPathRouteMapRowStatus=cPrefPathRouteMapRowStatus, cPrefPathRouteMapMatchEntry=cPrefPathRouteMapMatchEntry, ciscoPrefPathMIB=ciscoPrefPathMIB, cPrefPathRMapMatchStatus=cPrefPathRMapMatchStatus, ciscoPrefPathNotifyGroup=ciscoPrefPathNotifyGroup, ciscoPrefPathConfigGroupRev1=ciscoPrefPathConfigGroupRev1, cPrefPathRMapMatchRowStatus=cPrefPathRMapMatchRowStatus)
