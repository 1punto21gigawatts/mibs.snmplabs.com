#
# PySNMP MIB module HPN-ICF-COMMON-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-COMMON-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpnicf, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicf")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, TimeTicks, IpAddress, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Gauge32, ObjectIdentity, ModuleIdentity, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Counter32", "Integer32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
hpnicfSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6))
hpnicfSystem.setRevisions(('2004-06-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfSystem.setRevisionsDescriptions(('Initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfSystem.setLastUpdated('201206060000Z')
if mibBuilder.loadTexts: hpnicfSystem.setOrganization('')
if mibBuilder.loadTexts: hpnicfSystem.setContactInfo('')
if mibBuilder.loadTexts: hpnicfSystem.setDescription('This file describes common MIB objects implemented by both Routers and Switches.')
hpnicfWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfWriteConfig.setStatus('current')
if mibBuilder.loadTexts: hpnicfWriteConfig.setDescription('Write config to router.')
hpnicfStartFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfStartFtpServer.setStatus('current')
if mibBuilder.loadTexts: hpnicfStartFtpServer.setDescription('Decide whether start ftp-server.enable(1) indicates to start ftp-server; disable(2) indicates to stop ftp-server.')
hpnicfReboot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfReboot.setStatus('current')
if mibBuilder.loadTexts: hpnicfReboot.setDescription("normal:do nothing. reboot :reboot the router. 'normal' will be returned when getting.")
hpnicfSystemNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8))
hpnicfWriteSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8, 1))
if mibBuilder.loadTexts: hpnicfWriteSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfWriteSuccessTrap.setDescription('Send a trap about write success.')
hpnicfWriteFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8, 2))
if mibBuilder.loadTexts: hpnicfWriteFailureTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfWriteFailureTrap.setDescription('Send a trap about write failure.')
hpnicfRebootSendTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8, 3))
if mibBuilder.loadTexts: hpnicfRebootSendTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfRebootSendTrap.setDescription("If a user restarts the device with command 'reboot', this trap will be sent two seconds before the device reboots.")
hpnicfSysColdStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8, 4)).setObjects(("HPN-ICF-COMMON-SYSTEM-MIB", "hpnicfSysFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfSysColdStartTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysColdStartTrap.setDescription('System cold start trap.')
hpnicfSysWarmStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8, 5)).setObjects(("HPN-ICF-COMMON-SYSTEM-MIB", "hpnicfSysFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfSysWarmStartTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysWarmStartTrap.setDescription('System warm start trap.')
hpnicfSysLoghostUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 8, 6)).setObjects(("HPN-ICF-COMMON-SYSTEM-MIB", "hpnicfSysLoghostIndex"), ("HPN-ICF-COMMON-SYSTEM-MIB", "hpnicfSysLoghostIpaddressType"), ("HPN-ICF-COMMON-SYSTEM-MIB", "hpnicfSysLoghostIpaddress"), ("HPN-ICF-COMMON-SYSTEM-MIB", "hpnicfSysLoghostTrapVpnName"))
if mibBuilder.loadTexts: hpnicfSysLoghostUnreachableTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysLoghostUnreachableTrap.setDescription('This notification will be sent when a loghost becomes unreachable.')
hpnicfSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfSoftwareVersion.setDescription('Software version.')
hpnicfSysBootType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("coldStart", 1), ("warmStart", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSysBootType.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysBootType.setDescription('Boot type of the system, indicates whether the last device reboot was by CLI (warm start) or power off (cold start).')
hpnicfSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11))
hpnicfSysStatisticPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysStatisticPeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysStatisticPeriod.setDescription('Statistic period. The device collects statistics within the period.')
hpnicfSysSamplePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysSamplePeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysSamplePeriod.setDescription('Sampling period. The device takes samples periodically for statistics collection.')
hpnicfSysTrapResendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysTrapResendPeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysTrapResendPeriod.setDescription('Trap resending period. If the value is zero, the trap will not be re-sent.')
hpnicfSysTrapCollectionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysTrapCollectionPeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysTrapCollectionPeriod.setDescription('Trap collecting period. If the value is zero, the trap will not be re-sent.')
hpnicfSysSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSysSnmpPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysSnmpPort.setDescription('UDP port for SNMP protocol entity to receive messages except Trap-PDU.')
hpnicfSysSnmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSysSnmpTrapPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysSnmpTrapPort.setDescription('UDP port for Trap-PDU to receive messages.')
hpnicfSysNetID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysNetID.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysNetID.setDescription('System Net ID.')
hpnicfSysLastSampleTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSysLastSampleTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysLastSampleTime.setDescription('Last sampling time of the system.')
hpnicfSysTrapSendNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysTrapSendNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysTrapSendNum.setDescription('Maximum number of times for sending a trap. If the value is zero, a trap will be sent at an interval continually.')
hpnicfSysFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 10), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSysFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysFirstTrapTime.setDescription('Time when the first trap is sent.')
hpnicfSysBannerMOTD = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 11, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSysBannerMOTD.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysBannerMOTD.setDescription('An administratively configured message that is displayed to the user when the user logs in to the device through the console port or Web interface.')
hpnicfSystemNotificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 12))
hpnicfSysLoghostIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 12, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSysLoghostIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysLoghostIndex.setDescription('Index of loghost.')
hpnicfSysLoghostIpaddressType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 12, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSysLoghostIpaddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysLoghostIpaddressType.setDescription('IP address type of the loghost.')
hpnicfSysLoghostIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 12, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSysLoghostIpaddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysLoghostIpaddress.setDescription('IP address of the loghost.')
hpnicfSysLoghostTrapVpnName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 6, 12, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSysLoghostTrapVpnName.setStatus('current')
if mibBuilder.loadTexts: hpnicfSysLoghostTrapVpnName.setDescription('VPN name of the loghost.')
mibBuilder.exportSymbols("HPN-ICF-COMMON-SYSTEM-MIB", hpnicfSysSamplePeriod=hpnicfSysSamplePeriod, hpnicfSysLoghostTrapVpnName=hpnicfSysLoghostTrapVpnName, hpnicfSysBootType=hpnicfSysBootType, hpnicfReboot=hpnicfReboot, hpnicfSysLoghostUnreachableTrap=hpnicfSysLoghostUnreachableTrap, hpnicfSysTrapResendPeriod=hpnicfSysTrapResendPeriod, hpnicfStartFtpServer=hpnicfStartFtpServer, hpnicfWriteConfig=hpnicfWriteConfig, hpnicfSysLoghostIndex=hpnicfSysLoghostIndex, hpnicfSysStatisticPeriod=hpnicfSysStatisticPeriod, hpnicfRebootSendTrap=hpnicfRebootSendTrap, hpnicfSysSnmpPort=hpnicfSysSnmpPort, hpnicfSysLastSampleTime=hpnicfSysLastSampleTime, hpnicfSystemInfo=hpnicfSystemInfo, hpnicfWriteSuccessTrap=hpnicfWriteSuccessTrap, hpnicfSysLoghostIpaddress=hpnicfSysLoghostIpaddress, hpnicfSysTrapCollectionPeriod=hpnicfSysTrapCollectionPeriod, hpnicfSystem=hpnicfSystem, hpnicfSysFirstTrapTime=hpnicfSysFirstTrapTime, PYSNMP_MODULE_ID=hpnicfSystem, hpnicfSysTrapSendNum=hpnicfSysTrapSendNum, hpnicfSoftwareVersion=hpnicfSoftwareVersion, hpnicfSysBannerMOTD=hpnicfSysBannerMOTD, hpnicfSystemNotification=hpnicfSystemNotification, hpnicfSysNetID=hpnicfSysNetID, hpnicfSysWarmStartTrap=hpnicfSysWarmStartTrap, hpnicfSysLoghostIpaddressType=hpnicfSysLoghostIpaddressType, hpnicfSystemNotificationInfo=hpnicfSystemNotificationInfo, hpnicfSysColdStartTrap=hpnicfSysColdStartTrap, hpnicfSysSnmpTrapPort=hpnicfSysSnmpTrapPort, hpnicfWriteFailureTrap=hpnicfWriteFailureTrap)
