#
# PySNMP MIB module HUAWEI-PORTAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PORTAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
huaweiMgmt, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Counter64, Counter32, NotificationType, Bits, TimeTicks, MibIdentifier, Gauge32, ObjectIdentity, iso, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Counter64", "Counter32", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "Gauge32", "ObjectIdentity", "iso", "IpAddress", "Integer32")
DisplayString, MacAddress, TextualConvention, TruthValue, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TruthValue", "DateAndTime", "RowStatus")
hwPortal = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 4))
if mibBuilder.loadTexts: hwPortal.setLastUpdated('200303280900Z')
if mibBuilder.loadTexts: hwPortal.setOrganization('Huawei Technologies Co., Ltd. ')
if mibBuilder.loadTexts: hwPortal.setContactInfo(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwPortal.setDescription('The MIB contains objects of module PORTAL.')
hwPortalMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1))
hwPortalConfigPara = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1))
hwPortalConfigVersionSupport = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigVersionSupport.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigVersionSupport.setDescription(' The version of supported protocol.')
hwPortalConfigTextInfoSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigTextInfoSwitch.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigTextInfoSwitch.setDescription("Changed to transparent transmission information. The source of transparent transmission information, 'true' means transparent transmission the information of PORTAL server, 'false' means no transparent transmission the information of PORTAL server, the default is no transparent transmission. ")
hwPortalConfigServerUdpReceivePort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigServerUdpReceivePort.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigServerUdpReceivePort.setDescription('The receiving UDP port of server. ')
hwPortalConfigServerUdpSendPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigServerUdpSendPort.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigServerUdpSendPort.setDescription('The sending UDP port of server. ')
hwPortalConfigTrapUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(50100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigTrapUdpPort.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigTrapUdpPort.setDescription('The trap sending UDP port of server, used to send the message that user has been forced to leave. ')
hwPortalConfigSourecIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 1, 6), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigSourecIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSourecIfIndex.setDescription('The source interface of sending PORTAL packet. ')
hwPortalPacketStatisticsPara = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2))
hwPortalStatisticsBeginTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalStatisticsBeginTime.setStatus('current')
if mibBuilder.loadTexts: hwPortalStatisticsBeginTime.setDescription('The time of system startup time, statistics of start time. When clear the statistics data, it will be reset. If power off, the data would not be saved. ')
hwPortalPacketStatisticsAuthenticatorError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsAuthenticatorError.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsAuthenticatorError.setDescription('The total packet number of validate failure. ')
hwPortalPacketStatisticsAccessReqError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessReqError.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessReqError.setDescription(' The total number of access request error packet.')
hwPortalPacketStatisticsLogoutReqError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutReqError.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutReqError.setDescription(' The total number of logout request error packet.')
hwPortalPacketStatisticsInquiryReqError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryReqError.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryReqError.setDescription('The total number of inquiry request error packet. ')
hwPortalPacketStatisticsLoginConfirmError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginConfirmError.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginConfirmError.setDescription('The total number of login confirm error packet. ')
hwPortalPacketStatisticsAccessReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessReqReceived.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessReqReceived.setDescription('The total number of received access request packet. ')
hwPortalPacketStatisticsLoginReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginReqReceived.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginReqReceived.setDescription('The total number of received login request packet. ')
hwPortalPacketStatisticsLogoutReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutReqReceived.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutReqReceived.setDescription('The total number of received logout request packet. ')
hwPortalPacketStatisticsInquiryReqReceived = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryReqReceived.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryReqReceived.setDescription('The total number of received inquiry request packet. ')
hwPortalPacketStatisticsLoginConfirmReceived = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginConfirmReceived.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginConfirmReceived.setDescription('The total number of received login confirm packet. ')
hwPortalPacketStatisticsAccessACKFailed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessACKFailed.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessACKFailed.setDescription('The total number of access ack failure packet. ')
hwPortalPacketStatisticsLoginACKFailed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginACKFailed.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginACKFailed.setDescription('The total number of login ack failure packet. ')
hwPortalPacketStatisticsLogoutACKFailed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutACKFailed.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutACKFailed.setDescription('The total number of logout ack failure packet. ')
hwPortalPacketStatisticsInquiryACKFailed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryACKFailed.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryACKFailed.setDescription('The total number of inquiry ack failure packet. ')
hwPortalPacketStatisticsAccessAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessAckSent.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsAccessAckSent.setDescription('The total number of sending access ack packet. ')
hwPortalPacketStatisticsLoginAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginAckSent.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLoginAckSent.setDescription('The total number of sending login ack packet. ')
hwPortalPacketStatisticsLogoutAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutAckSent.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsLogoutAckSent.setDescription('The total number of sending logout ack packet. ')
hwPortalPacketStatisticsInquiryAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryAckSent.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsInquiryAckSent.setDescription('The total number of sending inquiry ack packet. ')
hwPortalConfigSecretKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3), )
if mibBuilder.loadTexts: hwPortalConfigSecretKeyTable.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyTable.setDescription('The shared secret key table, realizing the config of shared secret key. ')
hwPortalConfigSecretKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerIpAddress"))
if mibBuilder.loadTexts: hwPortalConfigSecretKeyEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyEntry.setDescription('The entry of shared secret key table. ')
hwPortalConfigPortalServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpAddress.setDescription('The IP address of PORTAL server. ')
hwPortalConfigPortalServerIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpMask.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpMask.setDescription('The IP mask of PORTAL server. ')
hwPortalConfigSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigSecretKey.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKey.setDescription('The secret key of PORTAL server. ')
hwPortalConfigPortalServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigPortalServerPort.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerPort.setDescription('The port of PORTAL server.')
hwPortalConfigPortalServerNasip = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigPortalServerNasip.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerNasip.setDescription('Whether transport the NAS IP address. ')
hwPortalConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigStatus.setDescription('The row status.')
hwPortalServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 4), )
if mibBuilder.loadTexts: hwPortalServerTable.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerTable.setDescription('The statistics table of PORTAL server, used to inquire total number of every access user on PORTAL server. ')
hwPortalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 4, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-PORTAL-MIB", "hwPortalServerIpAddress"))
if mibBuilder.loadTexts: hwPortalServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerEntry.setDescription('The entry of statistics table of PORTAL server.')
hwPortalServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerIpAddress.setDescription('The IP address of PORTAL server.')
hwPortalServerUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalServerUserNum.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerUserNum.setDescription(' The total number of access users on PORTAL server. ')
hwPortalUserTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5), )
if mibBuilder.loadTexts: hwPortalUserTable.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserTable.setDescription(' The PORTAL user table, used to inquire the attribute of PORTAL users. ')
hwPortalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1), ).setIndexNames((0, "HUAWEI-PORTAL-MIB", "hwPortalUserMACAddress"))
if mibBuilder.loadTexts: hwPortalUserEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserEntry.setDescription('The entry of PORTAL user table.')
hwPortalUserMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserMACAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserMACAddress.setDescription(' The MAC address of users. ')
hwPortalUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserIpAddress.setDescription(' The IP address of users. ')
hwPortalUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserPort.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserPort.setDescription(' The port number of users. ')
hwPortalUserUpFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserUpFlow.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserUpFlow.setDescription(' The upstream flow, unit is bytes. ')
hwPortalUserDownFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserDownFlow.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserDownFlow.setDescription(' The downstream flow, unit is bytes. ')
hwPortalUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserName.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserName.setDescription(' The username. ')
hwPortalUserLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserLoginTime.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserLoginTime.setDescription(' The login time of user. ')
hwPortalUserServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalUserServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserServerIpAddress.setDescription('The IP address of PORTAL server.')
hwPortalConfigSecretKeyTableV2 = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6), )
if mibBuilder.loadTexts: hwPortalConfigSecretKeyTableV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyTableV2.setDescription('The shared secret key table, realizing the config of shared secret key. ')
hwPortalConfigSecretKeyEntryV2 = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1), ).setIndexNames((0, "HUAWEI-PORTAL-MIB", "hwPortalVrfNameV2"), (0, "HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerIpAddressV2"))
if mibBuilder.loadTexts: hwPortalConfigSecretKeyEntryV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyEntryV2.setDescription('The entry of shared secret key table.(V2)')
hwPortalConfigPortalServerIpAddressV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpAddressV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpAddressV2.setDescription('The IP address of PORTAL server.(V2) ')
hwPortalConfigPortalServerIpMaskV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpMaskV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerIpMaskV2.setDescription('The IP mask of PORTAL server.(V2) ')
hwPortalConfigSecretKeyV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigSecretKeyV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyV2.setDescription('The secret key of PORTAL server.(V2)')
hwPortalConfigPortalServerPortV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigPortalServerPortV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerPortV2.setDescription('The port of PORTAL server.(V2)')
hwPortalConfigPortalServerNasipV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigPortalServerNasipV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigPortalServerNasipV2.setDescription('Whether transport the NAS IP address.(V2)')
hwPortalConfigStatusV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortalConfigStatusV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigStatusV2.setDescription('The row status.(V2)')
hwPortalVrfNameV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalVrfNameV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalVrfNameV2.setDescription('VPN instance name of portal server (V2)')
hwPortalServerTableV2 = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 7), )
if mibBuilder.loadTexts: hwPortalServerTableV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerTableV2.setDescription('The statistics table of PORTAL server, used to inquire total number of every access user on PORTAL server.(V2)')
hwPortalServerEntryV2 = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 7, 1), ).setIndexNames((0, "HUAWEI-PORTAL-MIB", "hwPortalVrfNameV2"), (0, "HUAWEI-PORTAL-MIB", "hwPortalServerIpAddressV2"))
if mibBuilder.loadTexts: hwPortalServerEntryV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerEntryV2.setDescription('The entry of statistics table of PORTAL server.(V2)')
hwPortalServerIpAddressV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalServerIpAddressV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerIpAddressV2.setDescription('The IP address of PORTAL server.(V2)')
hwPortalServerUserNumV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortalServerUserNumV2.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerUserNumV2.setDescription('The total number of access users on PORTAL server.(V2)')
hwPortalConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3))
hwPortalCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 1))
hwPortalCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 1, 1)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalConfigParaObjectGroup"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsParaObjectGroup"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigSecretKeyObjectGroup"), ("HUAWEI-PORTAL-MIB", "hwPortalServerObjectGroup"), ("HUAWEI-PORTAL-MIB", "hwPortalUserObjectGroup"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigSecretKeyV2ObjectGroup"), ("HUAWEI-PORTAL-MIB", "hwPortalServerV2ObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalCompliance = hwPortalCompliance.setStatus('current')
if mibBuilder.loadTexts: hwPortalCompliance.setDescription('The compliance statement for systems supporting the this module.')
hwPortalObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2))
hwPortalConfigParaObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 1)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalConfigVersionSupport"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigTextInfoSwitch"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigServerUdpReceivePort"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigServerUdpSendPort"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigTrapUdpPort"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigSourecIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalConfigParaObjectGroup = hwPortalConfigParaObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigParaObjectGroup.setDescription('The config parameter group.')
hwPortalPacketStatisticsParaObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 2)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalStatisticsBeginTime"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsAuthenticatorError"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsAccessReqError"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLogoutReqError"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsInquiryReqError"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLoginConfirmError"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsAccessReqReceived"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLoginReqReceived"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLogoutReqReceived"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsInquiryReqReceived"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLoginConfirmReceived"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsAccessACKFailed"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLoginACKFailed"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLogoutACKFailed"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsInquiryACKFailed"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsAccessAckSent"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLoginAckSent"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsLogoutAckSent"), ("HUAWEI-PORTAL-MIB", "hwPortalPacketStatisticsInquiryAckSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalPacketStatisticsParaObjectGroup = hwPortalPacketStatisticsParaObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalPacketStatisticsParaObjectGroup.setDescription('The pachet statistics parameter group.')
hwPortalConfigSecretKeyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 3)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerIpAddress"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerIpMask"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigSecretKey"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerPort"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerNasip"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalConfigSecretKeyObjectGroup = hwPortalConfigSecretKeyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyObjectGroup.setDescription('The config secret key group.')
hwPortalServerObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 4)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalServerIpAddress"), ("HUAWEI-PORTAL-MIB", "hwPortalServerUserNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalServerObjectGroup = hwPortalServerObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerObjectGroup.setDescription('The PORTAL server group.')
hwPortalUserObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 5)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalUserMACAddress"), ("HUAWEI-PORTAL-MIB", "hwPortalUserIpAddress"), ("HUAWEI-PORTAL-MIB", "hwPortalUserPort"), ("HUAWEI-PORTAL-MIB", "hwPortalUserUpFlow"), ("HUAWEI-PORTAL-MIB", "hwPortalUserDownFlow"), ("HUAWEI-PORTAL-MIB", "hwPortalUserName"), ("HUAWEI-PORTAL-MIB", "hwPortalUserLoginTime"), ("HUAWEI-PORTAL-MIB", "hwPortalUserServerIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalUserObjectGroup = hwPortalUserObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalUserObjectGroup.setDescription('The PORTAL user group.')
hwPortalConfigSecretKeyV2ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 6)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerIpAddressV2"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerIpMaskV2"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigSecretKeyV2"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerPortV2"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigPortalServerNasipV2"), ("HUAWEI-PORTAL-MIB", "hwPortalConfigStatusV2"), ("HUAWEI-PORTAL-MIB", "hwPortalVrfNameV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalConfigSecretKeyV2ObjectGroup = hwPortalConfigSecretKeyV2ObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalConfigSecretKeyV2ObjectGroup.setDescription('The config secret key group.(V2)')
hwPortalServerV2ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 4, 3, 2, 7)).setObjects(("HUAWEI-PORTAL-MIB", "hwPortalServerIpAddressV2"), ("HUAWEI-PORTAL-MIB", "hwPortalServerUserNumV2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortalServerV2ObjectGroup = hwPortalServerV2ObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortalServerV2ObjectGroup.setDescription('The PORTAL server group.(V2)')
mibBuilder.exportSymbols("HUAWEI-PORTAL-MIB", hwPortalPacketStatisticsInquiryReqError=hwPortalPacketStatisticsInquiryReqError, hwPortalServerV2ObjectGroup=hwPortalServerV2ObjectGroup, hwPortalPacketStatisticsPara=hwPortalPacketStatisticsPara, hwPortalPacketStatisticsLoginConfirmReceived=hwPortalPacketStatisticsLoginConfirmReceived, hwPortalConfigTextInfoSwitch=hwPortalConfigTextInfoSwitch, hwPortalServerUserNum=hwPortalServerUserNum, hwPortalUserLoginTime=hwPortalUserLoginTime, hwPortalVrfNameV2=hwPortalVrfNameV2, hwPortalPacketStatisticsAccessReqReceived=hwPortalPacketStatisticsAccessReqReceived, hwPortalConfigVersionSupport=hwPortalConfigVersionSupport, hwPortalServerEntryV2=hwPortalServerEntryV2, hwPortalServerIpAddressV2=hwPortalServerIpAddressV2, hwPortalConfigStatus=hwPortalConfigStatus, hwPortalPacketStatisticsLoginACKFailed=hwPortalPacketStatisticsLoginACKFailed, hwPortalServerIpAddress=hwPortalServerIpAddress, hwPortalServerUserNumV2=hwPortalServerUserNumV2, hwPortalConfigSourecIfIndex=hwPortalConfigSourecIfIndex, hwPortalConfigSecretKeyEntry=hwPortalConfigSecretKeyEntry, hwPortalUserPort=hwPortalUserPort, hwPortalConfigPortalServerNasip=hwPortalConfigPortalServerNasip, hwPortalUserUpFlow=hwPortalUserUpFlow, hwPortalObjectGroups=hwPortalObjectGroups, hwPortalConfigPara=hwPortalConfigPara, hwPortalConfigPortalServerPort=hwPortalConfigPortalServerPort, hwPortalUserIpAddress=hwPortalUserIpAddress, hwPortalUserDownFlow=hwPortalUserDownFlow, hwPortalConfigTrapUdpPort=hwPortalConfigTrapUdpPort, hwPortalStatisticsBeginTime=hwPortalStatisticsBeginTime, hwPortalConfigSecretKeyV2=hwPortalConfigSecretKeyV2, hwPortalPacketStatisticsParaObjectGroup=hwPortalPacketStatisticsParaObjectGroup, hwPortalConformance=hwPortalConformance, hwPortalPacketStatisticsLogoutReqReceived=hwPortalPacketStatisticsLogoutReqReceived, hwPortalConfigServerUdpSendPort=hwPortalConfigServerUdpSendPort, hwPortalServerEntry=hwPortalServerEntry, hwPortalConfigStatusV2=hwPortalConfigStatusV2, hwPortalCompliance=hwPortalCompliance, hwPortalConfigSecretKeyEntryV2=hwPortalConfigSecretKeyEntryV2, hwPortalPacketStatisticsLogoutAckSent=hwPortalPacketStatisticsLogoutAckSent, hwPortalConfigSecretKey=hwPortalConfigSecretKey, hwPortalConfigPortalServerPortV2=hwPortalConfigPortalServerPortV2, hwPortalServerTableV2=hwPortalServerTableV2, hwPortalServerTable=hwPortalServerTable, PYSNMP_MODULE_ID=hwPortal, hwPortalConfigPortalServerIpMaskV2=hwPortalConfigPortalServerIpMaskV2, hwPortalPacketStatisticsAuthenticatorError=hwPortalPacketStatisticsAuthenticatorError, hwPortalConfigSecretKeyTable=hwPortalConfigSecretKeyTable, hwPortalPacketStatisticsLoginConfirmError=hwPortalPacketStatisticsLoginConfirmError, hwPortalUserMACAddress=hwPortalUserMACAddress, hwPortalUserObjectGroup=hwPortalUserObjectGroup, hwPortalPacketStatisticsInquiryReqReceived=hwPortalPacketStatisticsInquiryReqReceived, hwPortalConfigPortalServerNasipV2=hwPortalConfigPortalServerNasipV2, hwPortalPacketStatisticsLogoutACKFailed=hwPortalPacketStatisticsLogoutACKFailed, hwPortalPacketStatisticsAccessACKFailed=hwPortalPacketStatisticsAccessACKFailed, hwPortalConfigPortalServerIpAddressV2=hwPortalConfigPortalServerIpAddressV2, hwPortalCompliances=hwPortalCompliances, hwPortalPacketStatisticsLogoutReqError=hwPortalPacketStatisticsLogoutReqError, hwPortalUserTable=hwPortalUserTable, hwPortalConfigSecretKeyV2ObjectGroup=hwPortalConfigSecretKeyV2ObjectGroup, hwPortalServerObjectGroup=hwPortalServerObjectGroup, hwPortalPacketStatisticsInquiryAckSent=hwPortalPacketStatisticsInquiryAckSent, hwPortalPacketStatisticsLoginReqReceived=hwPortalPacketStatisticsLoginReqReceived, hwPortalConfigParaObjectGroup=hwPortalConfigParaObjectGroup, hwPortalUserServerIpAddress=hwPortalUserServerIpAddress, hwPortalConfigSecretKeyObjectGroup=hwPortalConfigSecretKeyObjectGroup, hwPortalPacketStatisticsInquiryACKFailed=hwPortalPacketStatisticsInquiryACKFailed, hwPortalPacketStatisticsAccessAckSent=hwPortalPacketStatisticsAccessAckSent, hwPortalUserName=hwPortalUserName, hwPortalConfigPortalServerIpMask=hwPortalConfigPortalServerIpMask, hwPortalMibObjects=hwPortalMibObjects, hwPortalPacketStatisticsAccessReqError=hwPortalPacketStatisticsAccessReqError, hwPortalConfigPortalServerIpAddress=hwPortalConfigPortalServerIpAddress, hwPortalConfigServerUdpReceivePort=hwPortalConfigServerUdpReceivePort, hwPortalConfigSecretKeyTableV2=hwPortalConfigSecretKeyTableV2, hwPortal=hwPortal, hwPortalUserEntry=hwPortalUserEntry, hwPortalPacketStatisticsLoginAckSent=hwPortalPacketStatisticsLoginAckSent)
