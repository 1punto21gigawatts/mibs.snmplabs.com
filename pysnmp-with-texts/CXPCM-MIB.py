#
# PySNMP MIB module CXPCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXPCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
SapIndex, cxPCM = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "cxPCM")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, IpAddress, Integer32, TimeTicks, Bits, ObjectIdentity, NotificationType, MibIdentifier, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "IpAddress", "Integer32", "TimeTicks", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class ChannelIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 31)

pcmSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40), )
if mibBuilder.loadTexts: pcmSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapTable.setDescription('A table containing configuration, controls, status and statistics information about each PCM module layer service access point.')
pcmSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1), ).setIndexNames((0, "CXPCM-MIB", "pcmSapLinkNumber"), (0, "CXPCM-MIB", "pcmSapChannelNumber"))
if mibBuilder.loadTexts: pcmSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapEntry.setDescription('The parameters for a specific service access point.')
pcmSapLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapLinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapLinkNumber.setDescription('Indicates the link number associated with this SAP. Range of Values: 1-2 for DI600 (port) Default Value: none')
pcmSapChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 2), ChannelIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapChannelNumber.setDescription('Indicates the B channel associated with this SAP. Range of Values: 1-24 for T1 1-31 for E1 Default Value: none')
pcmSapChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapChannelState.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapChannelState.setDescription('Indicates the current state of a voice configured B channel associated to this SAP. Options: down (1): A voice call is not established on this B channel. unbound (2): A voice call is established on this B channel. Default Value: none')
pcmSapRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapRxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapRxPacket.setDescription('Indicates the total number of error-free PCM voice packets received by the link since statistics were last reset. Range of Values: 0-4, 294, 967, 295 Default Value: none')
pcmSapTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapTxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapTxPacket.setDescription('Indicates the total number of PCM voice packets successfully transmitted by the link since statistics were last reset. Range of Values: 0-4, 294, 967, 295 Default Value: none')
pcmSapTxDesync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapTxDesync.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapTxDesync.setDescription('Indicates the number of silence PCM voice packets sent when the voice application has no packet to send. Range of Values: 0-4, 294, 967, 295 Default Value: none')
pcmSapTxNotReady = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapTxNotReady.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapTxNotReady.setDescription('Indicates the number of reinitialization of this B channel due to a transmitter malfunction. Range of Values: 0-4, 294, 967, 295 Default Value: none')
pcmSapRxBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapRxBusy.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapRxBusy.setDescription('Indicates the number of times that the receiver FIFO has been full. Range of Values: 0-4, 294, 967, 295 Default Value: none')
pcmSapTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 40, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmSapTxUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: pcmSapTxUnderrun.setDescription('Indicates the number of times that the transmitter FIFO has been full. Range of Values: 0-4, 294, 967, 295 Default Value: none')
pcmDebugTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 60), )
if mibBuilder.loadTexts: pcmDebugTable.setStatus('mandatory')
if mibBuilder.loadTexts: pcmDebugTable.setDescription('A table containing controls about each PCM module layer service access point.')
pcmDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 60, 1), ).setIndexNames((0, "CXPCM-MIB", "pcmDebugLinkNumber"))
if mibBuilder.loadTexts: pcmDebugEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pcmDebugEntry.setDescription('The parameters for a specific service access point.')
pcmDebugLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 60, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcmDebugLinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pcmDebugLinkNumber.setDescription('Indicates the link number associated with this SAP. Range of Values: 1-2 for DI600 (port) Default Value: none')
pcmDebugLoopInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 63, 60, 1, 80), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pcmDebugLoopInfo.setStatus('mandatory')
if mibBuilder.loadTexts: pcmDebugLoopInfo.setDescription('This object displays the statistics relative to this PCM control block. When pcmSapDebugInfo is set to 1, it does nothing, 2 displays the link information concerning the looping informations and timings while 3 clears these statistics.')
mibBuilder.exportSymbols("CXPCM-MIB", pcmSapTable=pcmSapTable, pcmSapRxPacket=pcmSapRxPacket, pcmSapTxNotReady=pcmSapTxNotReady, pcmSapTxUnderrun=pcmSapTxUnderrun, pcmDebugTable=pcmDebugTable, pcmSapTxPacket=pcmSapTxPacket, pcmSapChannelNumber=pcmSapChannelNumber, pcmDebugEntry=pcmDebugEntry, pcmDebugLinkNumber=pcmDebugLinkNumber, ChannelIndex=ChannelIndex, pcmSapChannelState=pcmSapChannelState, pcmSapTxDesync=pcmSapTxDesync, pcmSapLinkNumber=pcmSapLinkNumber, pcmSapRxBusy=pcmSapRxBusy, pcmSapEntry=pcmSapEntry, pcmDebugLoopInfo=pcmDebugLoopInfo)
