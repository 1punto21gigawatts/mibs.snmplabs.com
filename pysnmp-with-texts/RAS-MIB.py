#
# PySNMP MIB module RAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
MmTAddressTag, MmGlobalIdentifier, MmCallType, MmAliasTag, MmGatekeeperID, MmH225Crv, MmEndpointID, mmH323Root, MmAliasAddress = mibBuilder.importSymbols("MULTI-MEDIA-MIB-TC", "MmTAddressTag", "MmGlobalIdentifier", "MmCallType", "MmAliasTag", "MmGatekeeperID", "MmH225Crv", "MmEndpointID", "mmH323Root", "MmAliasAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, ObjectIdentity, MibIdentifier, Bits, TimeTicks, Counter32, Gauge32, NotificationType, IpAddress, Integer32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Bits", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "IpAddress", "Integer32", "Counter64", "iso")
DateAndTime, TruthValue, RowStatus, DisplayString, TextualConvention, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "RowStatus", "DisplayString", "TextualConvention", "TAddress")
ras = ModuleIdentity((0, 0, 8, 341, 1, 1, 2))
if mibBuilder.loadTexts: ras.setLastUpdated('9812162253Z')
if mibBuilder.loadTexts: ras.setOrganization('ITU-T')
if mibBuilder.loadTexts: ras.setContactInfo(' ITU-T SG 16 ')
if mibBuilder.loadTexts: ras.setDescription('RAS MIB')
rasConfiguration = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 1))
rasRegistration = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 2))
rasAdmission = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 3))
rasStats = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 4))
rasEvents = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 5, 0))
rasConfigurationTable = MibTable((0, 0, 8, 341, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: rasConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationTable.setDescription('This table contains information about ras configuration parameters. It is a list of ras configuration parameters entries. The number of entries equals to the number of configuration parameters.')
rasConfigurationTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rasConfigurationTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationTableEntry.setDescription('It contains objects that describe the ras configuration parameters.')
rasConfigurationGatekeeperIdentifier = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 1, 1, 1, 1), MmGatekeeperID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasConfigurationGatekeeperIdentifier.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationGatekeeperIdentifier.setDescription('String that identifies gatekeeper. For a gatekeeper, this string identifies the gatekeeper. In an endpoint, the field is the desired gatekeeper or NULLString that identifies gatekeeper.')
rasConfigurationTimer = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 1, 1, 1, 2), Integer32().clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasConfigurationTimer.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationTimer.setDescription('The amount of time that the timer is set to in seconds. This is the maximum time that the endpoint will wait for the responce.')
rasConfigurationMaxNumberOfRetries = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 1, 1, 1, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasConfigurationMaxNumberOfRetries.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationMaxNumberOfRetries.setDescription('The maximum number of times the message shall be resent.')
rasConfigurationGatekeeperDiscoveryAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 1, 1, 1, 4), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasConfigurationGatekeeperDiscoveryAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationGatekeeperDiscoveryAddressTag.setDescription('The transport address tag of the gatekeeper.')
rasConfigurationGatekeeperDiscoveryAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 1, 1, 1, 5), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasConfigurationGatekeeperDiscoveryAddress.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationGatekeeperDiscoveryAddress.setDescription('The gatekeeper transport address that allow for manual discovery.')
rasRegistrationTable = MibTable((0, 0, 8, 341, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: rasRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationTable.setDescription('This table contains information about endpoints that are registered with the Gatekeeper. It is a list of registered entities entries. The number of entries equals to the number of registered endpoints.')
rasRegistrationTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddressTag"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddress"), (0, "RAS-MIB", "rasRegistrationSrcRasAddressTag"), (0, "RAS-MIB", "rasRegistrationSrcRasAddress"))
if mibBuilder.loadTexts: rasRegistrationTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationTableEntry.setDescription('It contains objects that describe the registered endpoint.')
rasRegistrationCallSignallingAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 1), MmTAddressTag())
if mibBuilder.loadTexts: rasRegistrationCallSignallingAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationCallSignallingAddressTag.setDescription('The transport address tag of the endpoint.')
rasRegistrationCallSignallingAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 2), TAddress())
if mibBuilder.loadTexts: rasRegistrationCallSignallingAddress.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationCallSignallingAddress.setDescription('The endpoint call signalling address.')
rasRegistrationSrcRasAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 3), MmTAddressTag())
if mibBuilder.loadTexts: rasRegistrationSrcRasAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationSrcRasAddressTag.setDescription('The ras address tag of the calling endpoint.')
rasRegistrationSrcRasAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 4), TAddress())
if mibBuilder.loadTexts: rasRegistrationSrcRasAddress.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationSrcRasAddress.setDescription('The ras address of the calling endpoint.')
rasRegistrationIsGatekeeper = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationIsGatekeeper.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationIsGatekeeper.setDescription('This value identifies the endpoint being a gatekeeper.')
rasRegistrationGatekeeperId = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 6), MmGatekeeperID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationGatekeeperId.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationGatekeeperId.setDescription('The identifier of the gatekeeper that this endpoint is registered with.')
rasRegistrationEndpointId = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 7), MmEndpointID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationEndpointId.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationEndpointId.setDescription('The endpoint identifier.')
rasRegistrationEncryption = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationEncryption.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationEncryption.setDescription('This value indicates that the endpoint is using encryption.')
rasRegistrationWillSupplyUUIE = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationWillSupplyUUIE.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationWillSupplyUUIE.setDescription('This value indicates that the endpoint will supply Q.931 message info in IRR messages if requested by the gatekeeper.')
rasRegistrationIntegrityCheckValue = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationIntegrityCheckValue.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationIntegrityCheckValue.setDescription('The value indicates that the endpoint will supply the integrity check value.')
rasRegistrationTableNumberOfAliases = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationTableNumberOfAliases.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationTableNumberOfAliases.setDescription('The number of alias addresses for the endpoint.')
rasRegistrationTableRowStatus = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rasRegistrationTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationTableRowStatus.setDescription('The row status of the entry. This object is required to create or delete rows remotely by a manager. ')
rasRegistrationEndpointType = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationEndpointType.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationEndpointType.setDescription('Terminal type represents the type of H.323 terminal: 50 - terminal without MC 60 - gateway without MC 70 - terminal with MC but without MP 80 - gateway with MC but without MP 120 - gatekeeper with MC but without MP 160 - MCU with MC but without MP 90 - gateway with MC and Data MP 130 - gatekeeper with MC and Data MP 170 - MCU with MC and Data MP 100 - gateway containing MC with Data and audio MP 140 - gatekeeper containing MC with Data and audio MP 180 - MCU containing MC with Data and audio MP 110 - gateway containing MC with Data, Audio and Video MP 150 - gatekeeper containing MC with Data, Audio and Video MP 190 - MCU containing MC with Data, Audio and Video MP 240 - entity with active MC . ')
rasRegistrationPregrantedARQ = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationPregrantedARQ.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationPregrantedARQ.setDescription('This value indicates if pregranted ARQ exists.')
rasRegistrationIsregisteredByRRQ = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationIsregisteredByRRQ.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationIsregisteredByRRQ.setDescription('This value indicates if this endpoint was registered dynamically - True or statically - False.')
rasRegistrationAliasTable = MibTable((0, 0, 8, 341, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: rasRegistrationAliasTable.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAliasTable.setDescription("This table contains information about registered endpoint's aliases. It is a list alias entries. The number of entries equals to the sum of all aliases for all registered endpoints.")
rasRegistrationAliasTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddressTag"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddress"), (0, "RAS-MIB", "rasRegistrationAliasTableIndex"))
if mibBuilder.loadTexts: rasRegistrationAliasTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAliasTableEntry.setDescription('It contains an alias that corresponds to a registered endpoint.')
rasRegistrationAliasTableIndex = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rasRegistrationAliasTableIndex.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAliasTableIndex.setDescription('An arbitrary index to this table. This index is one for the first alias for every given ras address. It is incremented by one for each subsequent alias of the same ras address. The last index for a particular ras address is equal to the number of aliases for that endpoint.')
rasRegistrationAliasTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 2, 1, 2), MmAliasTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationAliasTag.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAliasTag.setDescription('The alias tag of the registred endpoint.')
rasRegistrationAlias = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 2, 1, 3), MmAliasAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationAlias.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAlias.setDescription('The alias of the registred endpoint.')
rasRegistrationRasAddressTable = MibTable((0, 0, 8, 341, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: rasRegistrationRasAddressTable.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationRasAddressTable.setDescription("This table contains information about registered endpoint's additional ras addresses. It is a list ras address entries. The number of entries equals to the sum of all ras addresses for all registered endpoints.")
rasRegistrationRasAddressTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddressTag"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddress"), (0, "RAS-MIB", "rasRegistrationRasAddressTableIndex"))
if mibBuilder.loadTexts: rasRegistrationRasAddressTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationRasAddressTableEntry.setDescription('It contains a ras address that corresponds to the registered endpoint call signaling address.')
rasRegistrationRasAddressTableIndex = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rasRegistrationRasAddressTableIndex.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationRasAddressTableIndex.setDescription('An arbitrary index to this table. This index is one for the first alias for every given ras address. It is incremented by one for each subsequent alias of the same ras address. The last index for a particular ras address is equal to the number of aliases for that endpoint.')
rasRegistrationAdditionalSrcRasAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 3, 1, 2), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationAdditionalSrcRasAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAdditionalSrcRasAddressTag.setDescription('The transport address tag of the endpoint.')
rasRegistrationAdditionalSrcRasAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 3, 1, 3), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationAdditionalSrcRasAddress.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAdditionalSrcRasAddress.setDescription('The transport address of the endpoint.')
rasRegistrationCallSignalingAddressTable = MibTable((0, 0, 8, 341, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: rasRegistrationCallSignalingAddressTable.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationCallSignalingAddressTable.setDescription("This table contains information about registered endpoint's additional call signaling adresses. It is a list of call signaling address entries. The number of entries equals to the sum of all call signaling addresses for all registered endpoints.")
rasRegistrationCallSignalingAddressTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddressTag"), (0, "RAS-MIB", "rasRegistrationCallSignallingAddress"), (0, "RAS-MIB", "rasRegistrationCallSignalingAddressTableIndex"))
if mibBuilder.loadTexts: rasRegistrationCallSignalingAddressTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationCallSignalingAddressTableEntry.setDescription('It contains a call signaling address that corresponds to the registered endpoint.')
rasRegistrationCallSignalingAddressTableIndex = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rasRegistrationCallSignalingAddressTableIndex.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationCallSignalingAddressTableIndex.setDescription('An arbitrary index to this table. This index is one for the first alias for every given ras address. It is incremented by one for each subsequent alias of the same ras address. The last index for a particular ras address is equal to the number of aliases for that endpoint.')
rasRegistrationAdditionalCallSignalingAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 4, 1, 2), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationAdditionalCallSignalingAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAdditionalCallSignalingAddressTag.setDescription('The transport address tag of the endpoint.')
rasRegistrationAdditionalCallSignalingAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 2, 4, 1, 3), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasRegistrationAdditionalCallSignalingAddress.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationAdditionalCallSignalingAddress.setDescription('The endpoint call signalling address.')
rasAdmissionTable = MibTable((0, 0, 8, 341, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: rasAdmissionTable.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionTable.setDescription('This table contains information about entities that have been admitted by the gatekeeper. It is a list of admitted endpoints. The number of entries equals to the number of admitted endpoints.')
rasAdmissionTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RAS-MIB", "rasAdmissionSrcCallSignallingAddress"), (0, "RAS-MIB", "rasAdmissionRasAddress"), (0, "RAS-MIB", "rasAdmissionCallIdentifier"))
if mibBuilder.loadTexts: rasAdmissionTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionTableEntry.setDescription('It contains objects that describe endpoints that are admitted by the gatekeeper. ')
rasAdmissionSrcCallSignallingAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 1), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionSrcCallSignallingAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSrcCallSignallingAddressTag.setDescription('The transport address tag of the endpoint.')
rasAdmissionSrcCallSignallingAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 2), TAddress())
if mibBuilder.loadTexts: rasAdmissionSrcCallSignallingAddress.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSrcCallSignallingAddress.setDescription('The call signalling address of the caller.')
rasAdmissionDestCallSignallingAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 3), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionDestCallSignallingAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionDestCallSignallingAddressTag.setDescription('The transport address tag of the endpoint.')
rasAdmissionDestCallSignallingAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 4), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionDestCallSignallingAddress.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionDestCallSignallingAddress.setDescription('The call signalling address of the callee.')
rasAdmissionCallIdentifier = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 5), MmGlobalIdentifier())
if mibBuilder.loadTexts: rasAdmissionCallIdentifier.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionCallIdentifier.setDescription('Call identifier.')
rasAdmissionConferenceId = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 6), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionConferenceId.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionConferenceId.setDescription('Conference identifier.')
rasAdmissionRasAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 7), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionRasAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionRasAddressTag.setDescription('The transport address tag of the endpoint.')
rasAdmissionRasAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 8), TAddress())
if mibBuilder.loadTexts: rasAdmissionRasAddress.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionRasAddress.setDescription('The call signalling address of the caller.')
rasAdmissionCRV = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 9), MmH225Crv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionCRV.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionCRV.setDescription('Call reference value of the caller. ')
rasAdmissionIsGatekeeper = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionIsGatekeeper.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionIsGatekeeper.setDescription('This value identifies the endpoint being a gatekeeper.')
rasAdmissionSrcAliasAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 11), MmAliasTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionSrcAliasAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSrcAliasAddressTag.setDescription('The alias address tag of the calling endpoint.')
rasAdmissionSrcAliasAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 12), MmAliasAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionSrcAliasAddress.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSrcAliasAddress.setDescription('The call alias address of the caller.')
rasAdmissionDestAliasAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 13), MmAliasTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionDestAliasAddressTag.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionDestAliasAddressTag.setDescription('The alias address tag of the called endpoint.')
rasAdmissionDestAliasAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 14), MmAliasAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionDestAliasAddress.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionDestAliasAddress.setDescription('The alias address of the callee.')
rasAdmissionAnswerCallIndicator = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caller", 1), ("callee", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionAnswerCallIndicator.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionAnswerCallIndicator.setDescription('Caller/callee. ')
rasAdmissionTime = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionTime.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionTime.setDescription('Thetime of the admission.')
rasAdmissionEndpointId = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 17), MmEndpointID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionEndpointId.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionEndpointId.setDescription('Endpoint identifier.')
rasAdmissionBandwidth = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionBandwidth.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionBandwidth.setDescription('The allowed maximum bandwidth for the call; may be less than requested by the endpoint. ')
rasAdmissionIRRFrequency = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionIRRFrequency.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionIRRFrequency.setDescription('The time interval in seconds in which the endpoint shall send IRRs to the gatekeeper while on a call. ')
rasAdmissionCallType = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 20), MmCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionCallType.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionCallType.setDescription('Using this value, gatekeeper can attempt to determine real bandwidth usage. ')
rasAdmissionCallModel = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("gatekeeperRouted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionCallModel.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionCallModel.setDescription('This value of gatekeeper indicates that call signaling is being passed via the gatekeeper, while direct indicates that the endpoint-to-endpoint call mode is in use. ')
rasAdmissionSrcHandlesBandwidth = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionSrcHandlesBandwidth.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSrcHandlesBandwidth.setDescription('This value indicates that the caller reserves its own bandwidth. ')
rasAdmissionDestHandlesBandwidth = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionDestHandlesBandwidth.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionDestHandlesBandwidth.setDescription('This value indicates that the calee reserves its own bandwidth. ')
rasAdmissionSecurity = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionSecurity.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSecurity.setDescription('This value indicates that the endpoint is using security. ')
rasAdmissionSrcWillSupplyUUIE = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionSrcWillSupplyUUIE.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionSrcWillSupplyUUIE.setDescription('This value indicates that the caller will supply Q.931 message info in IRR messages if requested by the gatekeeper ')
rasAdmissionDestWillSupplyUUIE = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasAdmissionDestWillSupplyUUIE.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionDestWillSupplyUUIE.setDescription('This value indicates that the callee will supply Q.931 message info in IRR messages if requested by the gatekeeper ')
rasAdmissionTableRowStatus = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rasAdmissionTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionTableRowStatus.setDescription('The row status of the entry. This object is required to create or delete rows remotely by a manager. ')
rasStatsTable = MibTable((0, 0, 8, 341, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: rasStatsTable.setStatus('current')
if mibBuilder.loadTexts: rasStatsTable.setDescription('This table contains information about ras statistics variables. It is a list of ras statistics variables entries. The number of entries equals to the number of statistics variables.')
rasStatsTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rasStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: rasStatsTableEntry.setDescription('It contains objects that describe the ras statistics variables.')
rasStatsGatekeeperConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsGatekeeperConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsGatekeeperConfirms.setDescription('The number of granting permission to register messages sent by or received from a gatekeeper.')
rasStatsGatekeeperRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsGatekeeperRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsGatekeeperRejects.setDescription('The number of declining permission to register messages sent by or received from a gatekeeper.')
rasStatsRegistrationConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsRegistrationConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsRegistrationConfirms.setDescription('The number of registration confirm messages sent by or received from a gatekeeper.')
rasStatsRegistrationRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsRegistrationRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsRegistrationRejects.setDescription('The number of registration reject messages sent by or received from a gatekeeper.')
rasStatsUnregistrationConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsUnregistrationConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsUnregistrationConfirms.setDescription('The number of unregistration confirmation messages received.')
rasStatsUnregistrationRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsUnregistrationRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsUnregistrationRejects.setDescription('The number of unregistration reject messages received.')
rasStatsAdmissionConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsAdmissionConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsAdmissionConfirms.setDescription('The number of admission request messages sent by or received from a gatekeeper.')
rasStatsAdmissionRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsAdmissionRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsAdmissionRejects.setDescription('The number of admission reject messages sent by or received from a gatekeeper.')
rasStatsBandwidthConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsBandwidthConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsBandwidthConfirms.setDescription('The number of bandwidth confirm messages received from a gatekeeper.')
rasStatsBandwidthRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsBandwidthRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsBandwidthRejects.setDescription('The number of bandwidth reject messages sent by or received from a gatekeeper.')
rasStatsDisengageConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsDisengageConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsDisengageConfirms.setDescription('The number of disengage confirm messages received from a gatekeeper.')
rasStatsDisengageRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsDisengageRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsDisengageRejects.setDescription('The number of disengage reject messages sent by a gatekeeper.')
rasStatsLocationConfirms = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsLocationConfirms.setStatus('current')
if mibBuilder.loadTexts: rasStatsLocationConfirms.setDescription('The number of location confirm messages sent by or received from a gatekeeper.')
rasStatsLocationRejects = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsLocationRejects.setStatus('current')
if mibBuilder.loadTexts: rasStatsLocationRejects.setDescription('The number of location reject messages sent by or received from a gatekeeper.')
rasStatsInfoRequests = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsInfoRequests.setStatus('current')
if mibBuilder.loadTexts: rasStatsInfoRequests.setDescription('The number of info request messages sent by a gatekeeper.')
rasStatsInfoRequestResponses = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsInfoRequestResponses.setStatus('current')
if mibBuilder.loadTexts: rasStatsInfoRequestResponses.setDescription('The number of info request response messages sent by endpoint or received by a gatekeeper.')
rasStatsnonStandardMessages = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsnonStandardMessages.setStatus('current')
if mibBuilder.loadTexts: rasStatsnonStandardMessages.setDescription('The number of non standard messages received/sent.')
rasStatsUnknownMessages = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsUnknownMessages.setStatus('current')
if mibBuilder.loadTexts: rasStatsUnknownMessages.setDescription('The number of unknown messages received.')
rasStatsRequestInProgress = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsRequestInProgress.setStatus('current')
if mibBuilder.loadTexts: rasStatsRequestInProgress.setDescription('The number of request in progress messages received.')
rasStatsResourceAvailabilityIndicator = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsResourceAvailabilityIndicator.setStatus('current')
if mibBuilder.loadTexts: rasStatsResourceAvailabilityIndicator.setDescription('The number of resource availability indicator messages sent by the endpoint.')
rasStatsResourceAvailabilityConfirm = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsResourceAvailabilityConfirm.setStatus('current')
if mibBuilder.loadTexts: rasStatsResourceAvailabilityConfirm.setDescription('The number of availability confirm messages received.')
rasStatsRegisteredEndpointsNo = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsRegisteredEndpointsNo.setStatus('current')
if mibBuilder.loadTexts: rasStatsRegisteredEndpointsNo.setDescription('The number of registered endpoints.')
rasStatsAdmittedEndpointsNo = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsAdmittedEndpointsNo.setStatus('current')
if mibBuilder.loadTexts: rasStatsAdmittedEndpointsNo.setDescription('The number of admitted endpoints.')
rasStatsINAKs = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsINAKs.setStatus('current')
if mibBuilder.loadTexts: rasStatsINAKs.setDescription('The number of INAK massages received and sent by the endpoint.')
rasStatsIACKs = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsIACKs.setStatus('current')
if mibBuilder.loadTexts: rasStatsIACKs.setDescription('The number of IACKs massages received and sent by the endpoint.')
rasStatsGkRoutedCalls = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsGkRoutedCalls.setStatus('current')
if mibBuilder.loadTexts: rasStatsGkRoutedCalls.setDescription('The number of calls that are routed through Gatekeeper.')
rasStatsResourceAvailabilityIndications = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsResourceAvailabilityIndications.setStatus('current')
if mibBuilder.loadTexts: rasStatsResourceAvailabilityIndications.setDescription('The number of RAI massages received and sent by the endpoint.')
rasStatsResourceAvailabilityConfirmations = MibTableColumn((0, 0, 8, 341, 1, 1, 2, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatsResourceAvailabilityConfirmations.setStatus('current')
if mibBuilder.loadTexts: rasStatsResourceAvailabilityConfirmations.setDescription('The number of RAC massages received and sent by the endpoint.')
lastArjReason = MibScalar((0, 0, 8, 341, 1, 1, 2, 5, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("calledPartyNotRegistered", 1), ("invalidPermission", 2), ("requestDenied", 3), ("undefinedReason", 4), ("callerNotRegistered", 5), ("routeCallToGatekeeper", 6), ("invalidEndpointIdentifier", 7), ("resourceUnavailable", 8), ("securityDenial", 9), ("qosControlNotSupported", 10), ("incompleteAddress", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastArjReason.setStatus('current')
if mibBuilder.loadTexts: lastArjReason.setDescription('This value identifies the reason for the admission reject.')
lastArjRasAddressTag = MibScalar((0, 0, 8, 341, 1, 1, 2, 5, 0, 2), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastArjRasAddressTag.setStatus('current')
if mibBuilder.loadTexts: lastArjRasAddressTag.setDescription('The transport address tag of the endpoint.')
lastArjRasAddress = MibScalar((0, 0, 8, 341, 1, 1, 2, 5, 0, 3), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastArjRasAddress.setStatus('current')
if mibBuilder.loadTexts: lastArjRasAddress.setDescription('The ras address of the endpoint.')
admissionReject = NotificationType((0, 0, 8, 341, 1, 1, 2, 5, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("RAS-MIB", "lastArjReason"), ("RAS-MIB", "lastArjRasAddressTag"), ("RAS-MIB", "lastArjRasAddress"))
if mibBuilder.loadTexts: admissionReject.setStatus('current')
if mibBuilder.loadTexts: admissionReject.setDescription('This message will be sent on generation and reception of admissionReject for the following reasons: 1 - calledPartyNotRegistered 2 - invalidPermission 3 - requestDenied 4 - undefinedReason 5 - callerNotRegistered 6 - routeCallToGatekeeper 7 - invalidEndpointIdentifier 8 - resourceUnavailable 9 - securityDenial 10 - qosControlNotSupported 11 - incompleteAddress ')
rasMIBConformance = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 6))
rasMIBGroups = MibIdentifier((0, 0, 8, 341, 1, 1, 2, 6, 1))
rasConfigurationGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 2, 6, 1, 1)).setObjects(("RAS-MIB", "rasConfigurationTimer"), ("RAS-MIB", "rasConfigurationMaxNumberOfRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rasConfigurationGroup = rasConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: rasConfigurationGroup.setDescription('.')
rasRegistrationGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 2, 6, 1, 2)).setObjects(("RAS-MIB", "rasRegistrationIsGatekeeper"), ("RAS-MIB", "rasRegistrationGatekeeperId"), ("RAS-MIB", "rasRegistrationEndpointId"), ("RAS-MIB", "rasRegistrationEncryption"), ("RAS-MIB", "rasRegistrationWillSupplyUUIE"), ("RAS-MIB", "rasRegistrationIntegrityCheckValue"), ("RAS-MIB", "rasRegistrationTableNumberOfAliases"), ("RAS-MIB", "rasRegistrationEndpointType"), ("RAS-MIB", "rasRegistrationPregrantedARQ"), ("RAS-MIB", "rasRegistrationAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rasRegistrationGroup = rasRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: rasRegistrationGroup.setDescription('.')
rasAdmissionGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 2, 6, 1, 3)).setObjects(("RAS-MIB", "rasAdmissionConferenceId"), ("RAS-MIB", "rasAdmissionRasAddressTag"), ("RAS-MIB", "rasAdmissionCRV"), ("RAS-MIB", "rasAdmissionIsGatekeeper"), ("RAS-MIB", "rasAdmissionSrcCallSignallingAddressTag"), ("RAS-MIB", "rasAdmissionDestCallSignallingAddressTag"), ("RAS-MIB", "rasAdmissionDestCallSignallingAddress"), ("RAS-MIB", "rasAdmissionSrcAliasAddressTag"), ("RAS-MIB", "rasAdmissionSrcAliasAddress"), ("RAS-MIB", "rasAdmissionDestAliasAddressTag"), ("RAS-MIB", "rasAdmissionDestAliasAddress"), ("RAS-MIB", "rasAdmissionAnswerCallIndicator"), ("RAS-MIB", "rasAdmissionTime"), ("RAS-MIB", "rasAdmissionEndpointId"), ("RAS-MIB", "rasAdmissionBandwidth"), ("RAS-MIB", "rasAdmissionIRRFrequency"), ("RAS-MIB", "rasAdmissionCallType"), ("RAS-MIB", "rasAdmissionCallModel"), ("RAS-MIB", "rasAdmissionSrcHandlesBandwidth"), ("RAS-MIB", "rasAdmissionDestHandlesBandwidth"), ("RAS-MIB", "rasAdmissionSecurity"), ("RAS-MIB", "rasAdmissionSrcWillSupplyUUIE"), ("RAS-MIB", "rasAdmissionDestWillSupplyUUIE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rasAdmissionGroup = rasAdmissionGroup.setStatus('current')
if mibBuilder.loadTexts: rasAdmissionGroup.setDescription('.')
rasStatsGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 2, 6, 1, 4)).setObjects(("RAS-MIB", "rasStatsGatekeeperConfirms"), ("RAS-MIB", "rasStatsGatekeeperRejects"), ("RAS-MIB", "rasStatsRegistrationConfirms"), ("RAS-MIB", "rasStatsRegistrationRejects"), ("RAS-MIB", "rasStatsUnregistrationConfirms"), ("RAS-MIB", "rasStatsUnregistrationRejects"), ("RAS-MIB", "rasStatsAdmissionConfirms"), ("RAS-MIB", "rasStatsAdmissionRejects"), ("RAS-MIB", "rasStatsBandwidthConfirms"), ("RAS-MIB", "rasStatsBandwidthRejects"), ("RAS-MIB", "rasStatsDisengageConfirms"), ("RAS-MIB", "rasStatsDisengageRejects"), ("RAS-MIB", "rasStatsLocationConfirms"), ("RAS-MIB", "rasStatsLocationRejects"), ("RAS-MIB", "rasStatsInfoRequests"), ("RAS-MIB", "rasStatsInfoRequestResponses"), ("RAS-MIB", "rasStatsnonStandardMessages"), ("RAS-MIB", "rasStatsUnknownMessages"), ("RAS-MIB", "rasStatsRequestInProgress"), ("RAS-MIB", "rasStatsResourceAvailabilityIndicator"), ("RAS-MIB", "rasStatsResourceAvailabilityConfirm"), ("RAS-MIB", "rasStatsRegisteredEndpointsNo"), ("RAS-MIB", "rasStatsAdmittedEndpointsNo"), ("RAS-MIB", "rasStatsINAKs"), ("RAS-MIB", "rasStatsIACKs"), ("RAS-MIB", "rasStatsGkRoutedCalls"), ("RAS-MIB", "rasStatsResourceAvailabilityIndications"), ("RAS-MIB", "rasStatsResourceAvailabilityConfirmations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rasStatsGroup = rasStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rasStatsGroup.setDescription('.')
rasEventsGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 2, 6, 1, 5)).setObjects(("RAS-MIB", "lastArjReason"), ("RAS-MIB", "lastArjRasAddressTag"), ("RAS-MIB", "lastArjRasAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rasEventsGroup = rasEventsGroup.setStatus('current')
if mibBuilder.loadTexts: rasEventsGroup.setDescription('.')
rasMIBCompliance = ModuleCompliance((0, 0, 8, 341, 1, 1, 2, 6, 2)).setObjects(("RAS-MIB", "rasRegistrationGroup"), ("RAS-MIB", "rasAdmissionGroup"), ("RAS-MIB", "rasStatsGroup"), ("RAS-MIB", "rasEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rasMIBCompliance = rasMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rasMIBCompliance.setDescription('The set of objects required for compliance.')
mibBuilder.exportSymbols("RAS-MIB", rasRegistrationSrcRasAddress=rasRegistrationSrcRasAddress, rasAdmissionDestCallSignallingAddressTag=rasAdmissionDestCallSignallingAddressTag, ras=ras, rasRegistrationCallSignallingAddressTag=rasRegistrationCallSignallingAddressTag, rasStatsINAKs=rasStatsINAKs, rasStatsnonStandardMessages=rasStatsnonStandardMessages, rasAdmissionSrcWillSupplyUUIE=rasAdmissionSrcWillSupplyUUIE, rasAdmissionSrcAliasAddress=rasAdmissionSrcAliasAddress, rasRegistrationGroup=rasRegistrationGroup, rasStatsDisengageConfirms=rasStatsDisengageConfirms, rasAdmissionTime=rasAdmissionTime, rasAdmissionRasAddressTag=rasAdmissionRasAddressTag, rasStatsInfoRequests=rasStatsInfoRequests, rasConfigurationMaxNumberOfRetries=rasConfigurationMaxNumberOfRetries, rasRegistrationAdditionalCallSignalingAddress=rasRegistrationAdditionalCallSignalingAddress, rasRegistrationEncryption=rasRegistrationEncryption, rasAdmissionSrcCallSignallingAddressTag=rasAdmissionSrcCallSignallingAddressTag, rasRegistrationEndpointId=rasRegistrationEndpointId, rasRegistrationCallSignallingAddress=rasRegistrationCallSignallingAddress, rasAdmissionSecurity=rasAdmissionSecurity, rasAdmissionDestAliasAddress=rasAdmissionDestAliasAddress, rasRegistrationAliasTag=rasRegistrationAliasTag, rasRegistrationAlias=rasRegistrationAlias, rasRegistrationTableEntry=rasRegistrationTableEntry, rasStatsResourceAvailabilityIndicator=rasStatsResourceAvailabilityIndicator, rasAdmissionDestCallSignallingAddress=rasAdmissionDestCallSignallingAddress, rasRegistrationEndpointType=rasRegistrationEndpointType, rasAdmissionTableRowStatus=rasAdmissionTableRowStatus, rasRegistrationRasAddressTable=rasRegistrationRasAddressTable, rasRegistrationAdditionalCallSignalingAddressTag=rasRegistrationAdditionalCallSignalingAddressTag, rasRegistrationIsGatekeeper=rasRegistrationIsGatekeeper, rasAdmissionSrcHandlesBandwidth=rasAdmissionSrcHandlesBandwidth, rasRegistrationGatekeeperId=rasRegistrationGatekeeperId, rasStatsRegistrationConfirms=rasStatsRegistrationConfirms, rasRegistrationRasAddressTableIndex=rasRegistrationRasAddressTableIndex, rasAdmissionCallType=rasAdmissionCallType, rasAdmissionCallModel=rasAdmissionCallModel, rasStatsResourceAvailabilityIndications=rasStatsResourceAvailabilityIndications, rasRegistrationWillSupplyUUIE=rasRegistrationWillSupplyUUIE, rasConfigurationTableEntry=rasConfigurationTableEntry, rasRegistrationIsregisteredByRRQ=rasRegistrationIsregisteredByRRQ, rasConfigurationGroup=rasConfigurationGroup, rasMIBGroups=rasMIBGroups, rasAdmissionDestAliasAddressTag=rasAdmissionDestAliasAddressTag, lastArjRasAddressTag=lastArjRasAddressTag, rasAdmissionSrcAliasAddressTag=rasAdmissionSrcAliasAddressTag, rasRegistrationCallSignalingAddressTableEntry=rasRegistrationCallSignalingAddressTableEntry, rasStatsLocationRejects=rasStatsLocationRejects, rasStatsBandwidthRejects=rasStatsBandwidthRejects, rasConfigurationGatekeeperDiscoveryAddressTag=rasConfigurationGatekeeperDiscoveryAddressTag, rasStats=rasStats, rasAdmissionIsGatekeeper=rasAdmissionIsGatekeeper, rasAdmissionRasAddress=rasAdmissionRasAddress, rasAdmissionCallIdentifier=rasAdmissionCallIdentifier, rasAdmissionCRV=rasAdmissionCRV, rasAdmissionDestWillSupplyUUIE=rasAdmissionDestWillSupplyUUIE, rasAdmissionBandwidth=rasAdmissionBandwidth, rasRegistrationAdditionalSrcRasAddressTag=rasRegistrationAdditionalSrcRasAddressTag, rasAdmissionEndpointId=rasAdmissionEndpointId, rasAdmissionGroup=rasAdmissionGroup, PYSNMP_MODULE_ID=ras, rasStatsRequestInProgress=rasStatsRequestInProgress, rasRegistrationAdditionalSrcRasAddress=rasRegistrationAdditionalSrcRasAddress, rasAdmission=rasAdmission, rasStatsBandwidthConfirms=rasStatsBandwidthConfirms, rasConfigurationGatekeeperIdentifier=rasConfigurationGatekeeperIdentifier, rasRegistrationAliasTableEntry=rasRegistrationAliasTableEntry, rasStatsLocationConfirms=rasStatsLocationConfirms, rasStatsUnregistrationConfirms=rasStatsUnregistrationConfirms, rasStatsUnregistrationRejects=rasStatsUnregistrationRejects, rasEventsGroup=rasEventsGroup, rasStatsResourceAvailabilityConfirm=rasStatsResourceAvailabilityConfirm, rasAdmissionAnswerCallIndicator=rasAdmissionAnswerCallIndicator, rasEvents=rasEvents, rasRegistrationIntegrityCheckValue=rasRegistrationIntegrityCheckValue, rasStatsTableEntry=rasStatsTableEntry, rasRegistrationCallSignalingAddressTable=rasRegistrationCallSignalingAddressTable, rasStatsResourceAvailabilityConfirmations=rasStatsResourceAvailabilityConfirmations, rasStatsGkRoutedCalls=rasStatsGkRoutedCalls, rasAdmissionTable=rasAdmissionTable, rasRegistrationAliasTable=rasRegistrationAliasTable, rasRegistrationTableNumberOfAliases=rasRegistrationTableNumberOfAliases, rasStatsIACKs=rasStatsIACKs, admissionReject=admissionReject, rasStatsGatekeeperRejects=rasStatsGatekeeperRejects, rasRegistrationTable=rasRegistrationTable, rasAdmissionIRRFrequency=rasAdmissionIRRFrequency, rasStatsDisengageRejects=rasStatsDisengageRejects, rasMIBConformance=rasMIBConformance, rasStatsAdmissionConfirms=rasStatsAdmissionConfirms, rasConfigurationGatekeeperDiscoveryAddress=rasConfigurationGatekeeperDiscoveryAddress, rasMIBCompliance=rasMIBCompliance, rasStatsInfoRequestResponses=rasStatsInfoRequestResponses, rasRegistrationAliasTableIndex=rasRegistrationAliasTableIndex, rasRegistrationRasAddressTableEntry=rasRegistrationRasAddressTableEntry, rasAdmissionSrcCallSignallingAddress=rasAdmissionSrcCallSignallingAddress, rasStatsTable=rasStatsTable, rasStatsUnknownMessages=rasStatsUnknownMessages, lastArjReason=lastArjReason, rasAdmissionTableEntry=rasAdmissionTableEntry, rasRegistrationTableRowStatus=rasRegistrationTableRowStatus, rasStatsRegisteredEndpointsNo=rasStatsRegisteredEndpointsNo, rasStatsGatekeeperConfirms=rasStatsGatekeeperConfirms, rasConfigurationTable=rasConfigurationTable, rasAdmissionConferenceId=rasAdmissionConferenceId, rasRegistrationSrcRasAddressTag=rasRegistrationSrcRasAddressTag, rasRegistration=rasRegistration, rasAdmissionDestHandlesBandwidth=rasAdmissionDestHandlesBandwidth, rasConfiguration=rasConfiguration, rasRegistrationPregrantedARQ=rasRegistrationPregrantedARQ, rasConfigurationTimer=rasConfigurationTimer, rasStatsGroup=rasStatsGroup, lastArjRasAddress=lastArjRasAddress, rasStatsAdmissionRejects=rasStatsAdmissionRejects, rasStatsRegistrationRejects=rasStatsRegistrationRejects, rasStatsAdmittedEndpointsNo=rasStatsAdmittedEndpointsNo, rasRegistrationCallSignalingAddressTableIndex=rasRegistrationCallSignalingAddressTableIndex)
