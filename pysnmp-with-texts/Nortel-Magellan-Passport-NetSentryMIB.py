#
# PySNMP MIB module Nortel-Magellan-Passport-NetSentryMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-NetSentryMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
StorageType, Counter32, RowStatus, DisplayString, Integer32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "StorageType", "Counter32", "RowStatus", "DisplayString", "Integer32")
AsciiStringIndex, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiStringIndex", "AsciiString", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
vr, vrIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-VirtualRouterMIB", "vr", "vrIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Counter64, ModuleIdentity, IpAddress, iso, NotificationType, ObjectIdentity, Gauge32, Bits, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Counter64", "ModuleIdentity", "IpAddress", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "Bits", "TimeTicks", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netSentryMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31))
vrNs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4))
vrNsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 1), )
if mibBuilder.loadTexts: vrNsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsRowStatusTable.setDescription('This entry controls the addition and deletion of vrNs components.')
vrNsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"))
if mibBuilder.loadTexts: vrNsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsRowStatusEntry.setDescription('A single entry in the table represents a single vrNs component.')
vrNsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNs components. These components can be added and deleted.')
vrNsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsStorageType.setDescription('This variable represents the storage type value for the vrNs tables.')
vrNsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrNsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIndex.setDescription('This variable represents the index for the vrNs tables.')
vrNsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 100), )
if mibBuilder.loadTexts: vrNsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsProvTable.setDescription('This contains the global NetSentry control flags.')
vrNsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"))
if mibBuilder.loadTexts: vrNsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsProvEntry.setDescription('An entry in the vrNsProvTable.')
vrNsDropConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 100, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsDropConditions.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDropConditions.setDescription('This attribute controls under what circumstances NetSentry drops packets. It is possible for NetSentry to drop packets when: There is no memory to contain statistics for this packet (statsNoMem), it is for whatever reason impossible to clone, copy, or log a copy of the packet via the clone_to copy_to or log_to actions respectively (cantCloneTo, cantCopyTo and cantLogTo), and if the packet encounters a filter which is provisioned at a filter point within a protocol component, but not defined in any of the files defined by File components within NetSentry (this is a Null filter). Description of bits: statsNoMem(0) cantCloneTo(1) cantLogTo(2) cantCopyTo(3) cantMacCloneTo(4) nullFilter(5)')
vrNsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101), )
if mibBuilder.loadTexts: vrNsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsStatsTable.setDescription('This contains the global NetSentry (in particular, non-protocol specific) statistics.')
vrNsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"))
if mibBuilder.loadTexts: vrNsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsStatsEntry.setDescription('An entry in the vrNsStatsTable.')
vrNsPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsPacketsProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsPacketsProcessed.setDescription('This attribute counts the total number of packets processed through NetSentry. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsPacketsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsPacketsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsPacketsFailed.setDescription('This attribute counts the total number of packets processed through NetSentry which ended with a fail disposition. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsStatsNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsStatsNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsStatsNoMem.setDescription('This attribute counts the total number of packets processed through NetSentry for which statistic should have been gathered, but for which statistics were not gathered due to a failure to allocate memory. Such packets may or may not be dropped according to the values provisioned in dropConditions under the NetSentry component. If this attribute is being incremented, the system is suffering from memory shortfalls, and some operator action is advised. Perhaps memory allocations should be re-provisioned, NetSentry statistics gathering should be reduced, or NetSentry statistics tables should be cleared to temporarily free memory. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsHsaOkayFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsHsaOkayFailed.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsHsaOkayFailed.setDescription('This attribute counts the total number of packets processed through NetSentry which encountered, and did not match, an hsa_okay pattern. Such packets are likely to be generated from misconfigured hosts. Some operator action to track down these hosts is advised. This counter will wrap around to zero should it ever exceed its maximum value, 4294967295.')
vrNsDepthExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDepthExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDepthExceeded.setDescription('This attribute counts the total number of times a NetSentry filter was executed which referenced too many layers of indirect filters. If this count is non-zero, the filter definitions the unit is using are incorrect, and some operator action to track down the erroneous filter definitions is advised. Filters will not be behaving correctly if this counter is increasing, and security could be compromised. This count should always be zero, and it will wrap around to zero should it ever exceed its maximum value of 4294967295.')
vrNsDroppedStatsNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDroppedStatsNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDroppedStatsNoMem.setDescription('This counts the total number of packets that were actually dropped due to an inability to allocate memory to hold statistics for the packet. Such a packet must have had a NetSentry statistics gathering action applied to it, in order for the attempt to gather statistics to be made, and the dropConditions attribute must include the statsNoMem value.')
vrNsDroppedCantCloneTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDroppedCantCloneTo.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDroppedCantCloneTo.setDescription('This counts the total number of packets that were dropped due to the failure of a clone_to action applied to the packet. This counter will only increment if the dropConditions attribute includes the cantCloneTo value.')
vrNsDroppedCantLogTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDroppedCantLogTo.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDroppedCantLogTo.setDescription('This counts the total number of packets that were dropped due to the failure of a log_to action applied to the packet. This counter will only increment if the dropConditions attribute includes the cantLogTo value.')
vrNsDroppedCantCopyTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDroppedCantCopyTo.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDroppedCantCopyTo.setDescription('This counts the total number of packets that were dropped due to the failure of a copy_to action applied to the packet. This counter will only increment if the dropConditions attribute includes the cantCopyTo value.')
vrNsDroppedNullFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 101, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDroppedNullFilter.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDroppedNullFilter.setDescription('This counts the total number of packets that were dropped because the packet passed through a filter point into which was provisioned a filter which was never defined in a file loaded into NetSentry. Such filter points have atached to the the so-call Null Filter, which will either succeed or fail all packets passing through it, depending on whether or not the dropConditions attribute includes the nullFilter value.')
vrNsFile = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2))
vrNsFileRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 1), )
if mibBuilder.loadTexts: vrNsFileRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsFile components.')
vrNsFileRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsFileIndex"))
if mibBuilder.loadTexts: vrNsFileRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileRowStatusEntry.setDescription('A single entry in the table represents a single vrNsFile component.')
vrNsFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsFileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsFile components. These components can be added and deleted.')
vrNsFileComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFileComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsFileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFileStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileStorageType.setDescription('This variable represents the storage type value for the vrNsFile tables.')
vrNsFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: vrNsFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileIndex.setDescription('This variable represents the index for the vrNsFile tables.')
vrNsFileOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 10), )
if mibBuilder.loadTexts: vrNsFileOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileOperTable.setDescription('This holds hold a single compiler error message.')
vrNsFileOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsFileIndex"))
if mibBuilder.loadTexts: vrNsFileOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileOperEntry.setDescription('An entry in the vrNsFileOperTable.')
vrNsFileCompilerErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)).clone(hexValue="4e6f204572726f72")).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFileCompilerErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFileCompilerErrorMsg.setDescription('This attribute contains a single string holding the compiler error which caused the compile to fail. In the event that the file is recompiled (using the RELoad verb), the value of this will change, to reflect the new error, if any was encountered, or no error, if the compile was successful.')
vrNsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3))
vrNsEngineRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3, 1), )
if mibBuilder.loadTexts: vrNsEngineRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsEngineRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsEngine components.')
vrNsEngineRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsEngineIndex"))
if mibBuilder.loadTexts: vrNsEngineRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsEngineRowStatusEntry.setDescription('A single entry in the table represents a single vrNsEngine component.')
vrNsEngineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsEngineRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsEngineRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsEngine components. These components can be added and deleted.')
vrNsEngineComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsEngineComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsEngineComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsEngineStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsEngineStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsEngineStorageType.setDescription('This variable represents the storage type value for the vrNsEngine tables.')
vrNsEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: vrNsEngineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsEngineIndex.setDescription('This variable represents the index for the vrNsEngine tables.')
vrNsIPStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4))
vrNsIPStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 1), )
if mibBuilder.loadTexts: vrNsIPStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsIPStats components.')
vrNsIPStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsIndex"))
if mibBuilder.loadTexts: vrNsIPStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsRowStatusEntry.setDescription('A single entry in the table represents a single vrNsIPStats component.')
vrNsIPStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsIPStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsIPStats components. These components can be added and deleted.')
vrNsIPStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsIPStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsStorageType.setDescription('This variable represents the storage type value for the vrNsIPStats tables.')
vrNsIPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrNsIPStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsIndex.setDescription('This variable represents the index for the vrNsIPStats tables.')
vrNsIPStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2))
vrNsIPStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1), )
if mibBuilder.loadTexts: vrNsIPStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrNsIPStatsAddrStat components.')
vrNsIPStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsIPStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single vrNsIPStatsAddrStat component.')
vrNsIPStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsIPStatsAddrStat components. These components cannot be added nor deleted.')
vrNsIPStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsIPStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the vrNsIPStatsAddrStat tables.')
vrNsIPStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsIPStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the vrNsIPStatsAddrStat tables.')
vrNsIPStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsIPStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the vrNsIPStatsAddrStat tables.')
vrNsIPStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 10), )
if mibBuilder.loadTexts: vrNsIPStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
vrNsIPStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsIPStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatStatsEntry.setDescription('An entry in the vrNsIPStatsAddrStatStatsTable.')
vrNsIPStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 4, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPXStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5))
vrNsIPXStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 1), )
if mibBuilder.loadTexts: vrNsIPXStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsIPXStats components.')
vrNsIPXStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsIndex"))
if mibBuilder.loadTexts: vrNsIPXStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsRowStatusEntry.setDescription('A single entry in the table represents a single vrNsIPXStats component.')
vrNsIPXStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsIPXStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsIPXStats components. These components can be added and deleted.')
vrNsIPXStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsIPXStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsStorageType.setDescription('This variable represents the storage type value for the vrNsIPXStats tables.')
vrNsIPXStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrNsIPXStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsIndex.setDescription('This variable represents the index for the vrNsIPXStats tables.')
vrNsIPXStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2))
vrNsIPXStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1), )
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrNsIPXStatsAddrStat components.')
vrNsIPXStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single vrNsIPXStatsAddrStat component.')
vrNsIPXStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsIPXStatsAddrStat components. These components cannot be added nor deleted.')
vrNsIPXStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsIPXStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the vrNsIPXStatsAddrStat tables.')
vrNsIPXStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the vrNsIPXStatsAddrStat tables.')
vrNsIPXStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the vrNsIPXStatsAddrStat tables.')
vrNsIPXStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 10), )
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
vrNsIPXStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIPXStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatStatsEntry.setDescription('An entry in the vrNsIPXStatsAddrStatStatsTable.')
vrNsIPXStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPXStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPXStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsIPXStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 5, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsIPXStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsATStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6))
vrNsATStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 1), )
if mibBuilder.loadTexts: vrNsATStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsATStats components.')
vrNsATStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsIndex"))
if mibBuilder.loadTexts: vrNsATStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsRowStatusEntry.setDescription('A single entry in the table represents a single vrNsATStats component.')
vrNsATStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsATStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsATStats components. These components can be added and deleted.')
vrNsATStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsATStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsStorageType.setDescription('This variable represents the storage type value for the vrNsATStats tables.')
vrNsATStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrNsATStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsIndex.setDescription('This variable represents the index for the vrNsATStats tables.')
vrNsATStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2))
vrNsATStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1), )
if mibBuilder.loadTexts: vrNsATStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrNsATStatsAddrStat components.')
vrNsATStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsATStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single vrNsATStatsAddrStat component.')
vrNsATStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsATStatsAddrStat components. These components cannot be added nor deleted.')
vrNsATStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsATStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the vrNsATStatsAddrStat tables.')
vrNsATStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsATStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the vrNsATStatsAddrStat tables.')
vrNsATStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsATStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the vrNsATStatsAddrStat tables.')
vrNsATStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 10), )
if mibBuilder.loadTexts: vrNsATStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
vrNsATStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsATStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsATStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatStatsEntry.setDescription('An entry in the vrNsATStatsAddrStatStatsTable.')
vrNsATStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsATStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsATStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsATStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 6, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsATStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsATStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsDNStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7))
vrNsDNStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 1), )
if mibBuilder.loadTexts: vrNsDNStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsDNStats components.')
vrNsDNStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsIndex"))
if mibBuilder.loadTexts: vrNsDNStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsRowStatusEntry.setDescription('A single entry in the table represents a single vrNsDNStats component.')
vrNsDNStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsDNStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsDNStats components. These components can be added and deleted.')
vrNsDNStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsDNStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsStorageType.setDescription('This variable represents the storage type value for the vrNsDNStats tables.')
vrNsDNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrNsDNStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsIndex.setDescription('This variable represents the index for the vrNsDNStats tables.')
vrNsDNStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2))
vrNsDNStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1), )
if mibBuilder.loadTexts: vrNsDNStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrNsDNStatsAddrStat components.')
vrNsDNStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsDNStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single vrNsDNStatsAddrStat component.')
vrNsDNStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsDNStatsAddrStat components. These components cannot be added nor deleted.')
vrNsDNStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsDNStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the vrNsDNStatsAddrStat tables.')
vrNsDNStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsDNStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the vrNsDNStatsAddrStat tables.')
vrNsDNStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsDNStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the vrNsDNStatsAddrStat tables.')
vrNsDNStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 10), )
if mibBuilder.loadTexts: vrNsDNStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
vrNsDNStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsDNStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsDNStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatStatsEntry.setDescription('An entry in the vrNsDNStatsAddrStatStatsTable.')
vrNsDNStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsDNStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsDNStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsDNStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 7, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsDNStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsDNStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsBrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8))
vrNsBrStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 1), )
if mibBuilder.loadTexts: vrNsBrStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrNsBrStats components.')
vrNsBrStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsIndex"))
if mibBuilder.loadTexts: vrNsBrStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsRowStatusEntry.setDescription('A single entry in the table represents a single vrNsBrStats component.')
vrNsBrStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrNsBrStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsBrStats components. These components can be added and deleted.')
vrNsBrStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsBrStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsStorageType.setDescription('This variable represents the storage type value for the vrNsBrStats tables.')
vrNsBrStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrNsBrStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsIndex.setDescription('This variable represents the index for the vrNsBrStats tables.')
vrNsBrStatsAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2))
vrNsBrStatsAddrStatRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1), )
if mibBuilder.loadTexts: vrNsBrStatsAddrStatRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrNsBrStatsAddrStat components.')
vrNsBrStatsAddrStatRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsBrStatsAddrStatRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatRowStatusEntry.setDescription('A single entry in the table represents a single vrNsBrStatsAddrStat component.')
vrNsBrStatsAddrStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsBrStatsAddrStat components. These components cannot be added nor deleted.')
vrNsBrStatsAddrStatComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsBrStatsAddrStatStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatStorageType.setDescription('This variable represents the storage type value for the vrNsBrStatsAddrStat tables.')
vrNsBrStatsAddrStatSourceAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsBrStatsAddrStatSourceAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatSourceAddressIndex.setDescription('This variable represents an index for the vrNsBrStatsAddrStat tables.')
vrNsBrStatsAddrStatDestinationAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 1, 1, 11), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsBrStatsAddrStatDestinationAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatDestinationAddressIndex.setDescription('This variable represents an index for the vrNsBrStatsAddrStat tables.')
vrNsBrStatsAddrStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 10), )
if mibBuilder.loadTexts: vrNsBrStatsAddrStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This is the basic statistic used throughout NetSentry by-protocol statistics gathering. It contains counters for total packets, total octets in packets, and two user counters, counter_1 and counter_2.')
vrNsBrStatsAddrStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsAddrStatSourceAddressIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsBrStatsAddrStatDestinationAddressIndex"))
if mibBuilder.loadTexts: vrNsBrStatsAddrStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatStatsEntry.setDescription('An entry in the vrNsBrStatsAddrStatStatsTable.')
vrNsBrStatsAddrStatPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatPacketCount.setDescription('This is the number of packets which caused the enclosing Statistics group to to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsBrStatsAddrStatByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatByteCount.setDescription('This is the number of bytes in all the packets which caused the enclosing Statistics group to be incremented. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsBrStatsAddrStatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatCounter1.setDescription('This is the number of times a packet caused a counter_1 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsBrStatsAddrStatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 8, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsBrStatsAddrStatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsBrStatsAddrStatCounter2.setDescription('This is the number of times a packet caused a counter_2 action to be applied with reference to the enclosing Statistics group. This counter will wrap around to zero when it exceeds its maximum value, 4294967295.')
vrNsFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9))
vrNsFilterRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1), )
if mibBuilder.loadTexts: vrNsFilterRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of vrNsFilter components.')
vrNsFilterRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsFilterNameIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsFilterKindIndex"))
if mibBuilder.loadTexts: vrNsFilterRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterRowStatusEntry.setDescription('A single entry in the table represents a single vrNsFilter component.')
vrNsFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrNsFilter components. These components cannot be added nor deleted.')
vrNsFilterComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrNsFilterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterStorageType.setDescription('This variable represents the storage type value for the vrNsFilter tables.')
vrNsFilterNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: vrNsFilterNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterNameIndex.setDescription('This variable represents an index for the vrNsFilter tables.')
vrNsFilterKindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("filter", 0), ("pafSet", 1), ("compartment", 2), ("aesoData", 3), ("nleso", 4), ("aeso", 5), ("accreditTable", 6), ("setData", 7), ("metaFilter", 8))))
if mibBuilder.loadTexts: vrNsFilterKindIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterKindIndex.setDescription('This variable represents an index for the vrNsFilter tables.')
vrNsFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10), )
if mibBuilder.loadTexts: vrNsFilterStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the various counters associated with a particular filter definition. A packet being processed through a NetSentry filter will encounter zero or more dispositions according to which elements of the filter have patterns which match the packet. This group counts, for the enclosing Filter, how many packets encountered each sort of disposition while being processed through the filter.')
vrNsFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsFilterNameIndex"), (0, "Nortel-Magellan-Passport-NetSentryMIB", "vrNsFilterKindIndex"))
if mibBuilder.loadTexts: vrNsFilterStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterStatsEntry.setDescription('An entry in the vrNsFilterStatsTable.')
vrNsFilterPacketsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterPacketsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterPacketsSucceeded.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against an element of the enclosing Filter component which had a succeed disposition.')
vrNsFilterBytesSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterBytesSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterBytesSucceeded.setDescription('This counter counts the number of bytes in the packets counted in the packetsSucceeded.')
vrNsFilterPacketsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterPacketsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterPacketsFailed.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against an element of the enclosing Filter which had a fail disposition.')
vrNsFilterBytesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterBytesFailed.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterBytesFailed.setDescription('This counter counts the number of bytes in the packets counted in the packetsFailed counter.')
vrNsFilterPacketsBreaked = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterPacketsBreaked.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterPacketsBreaked.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against an element of the enclosing Filter which had a break disposition.')
vrNsFilterBytesBreaked = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterBytesBreaked.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterBytesBreaked.setDescription('This counter counts the number of bytes in the packets counted in the packetsBreaked counter.')
vrNsFilterPacketsContinued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterPacketsContinued.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterPacketsContinued.setDescription('This counter contains the number of packets which passed through NetSentry, which happen to have been matched against at least one element of the enclosing Filter which had a continue disposition. Such a packet may also have been counted in one of the packetsSucceeded packetsFailed or packetsBreaked counters, since a continue disposition does not exit a NetSentry filter unless it is the disposition in the last element of the filter.')
vrNsFilterBytesContinued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 4, 9, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNsFilterBytesContinued.setStatus('mandatory')
if mibBuilder.loadTexts: vrNsFilterBytesContinued.setDescription('This counter counts the number of bytes in the packets counted in the packetsContinued counter.')
netSentryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 1))
netSentryGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 1, 4))
netSentryGroupBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 1, 4, 1))
netSentryGroupBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 1, 4, 1, 2))
netSentryCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 3))
netSentryCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 3, 4))
netSentryCapabilitiesBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 3, 4, 1))
netSentryCapabilitiesBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 31, 3, 4, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-NetSentryMIB", vrNsIPStatsAddrStatCounter2=vrNsIPStatsAddrStatCounter2, vrNsPacketsProcessed=vrNsPacketsProcessed, vrNsFilterRowStatus=vrNsFilterRowStatus, vrNsBrStatsRowStatus=vrNsBrStatsRowStatus, vrNsIndex=vrNsIndex, netSentryMIB=netSentryMIB, vrNsPacketsFailed=vrNsPacketsFailed, vrNsIPXStatsAddrStatRowStatus=vrNsIPXStatsAddrStatRowStatus, vrNsDNStatsAddrStatStorageType=vrNsDNStatsAddrStatStorageType, vrNsBrStatsAddrStatByteCount=vrNsBrStatsAddrStatByteCount, vrNsFilterRowStatusEntry=vrNsFilterRowStatusEntry, vrNsIPStatsStorageType=vrNsIPStatsStorageType, vrNsDNStatsAddrStatComponentName=vrNsDNStatsAddrStatComponentName, vrNsIPXStatsAddrStat=vrNsIPXStatsAddrStat, vrNs=vrNs, netSentryGroupBD=netSentryGroupBD, vrNsStatsTable=vrNsStatsTable, vrNsDNStatsStorageType=vrNsDNStatsStorageType, vrNsFilterStatsEntry=vrNsFilterStatsEntry, vrNsIPXStatsAddrStatRowStatusEntry=vrNsIPXStatsAddrStatRowStatusEntry, vrNsEngineComponentName=vrNsEngineComponentName, vrNsIPStatsIndex=vrNsIPStatsIndex, vrNsIPStatsAddrStatComponentName=vrNsIPStatsAddrStatComponentName, vrNsStorageType=vrNsStorageType, vrNsIPStatsAddrStatSourceAddressIndex=vrNsIPStatsAddrStatSourceAddressIndex, vrNsIPXStatsStorageType=vrNsIPXStatsStorageType, vrNsDNStatsAddrStatRowStatus=vrNsDNStatsAddrStatRowStatus, vrNsBrStatsAddrStat=vrNsBrStatsAddrStat, vrNsIPStatsAddrStatByteCount=vrNsIPStatsAddrStatByteCount, vrNsDropConditions=vrNsDropConditions, vrNsFilterBytesBreaked=vrNsFilterBytesBreaked, vrNsDNStatsIndex=vrNsDNStatsIndex, vrNsFileRowStatusEntry=vrNsFileRowStatusEntry, vrNsIPStatsComponentName=vrNsIPStatsComponentName, vrNsIPStats=vrNsIPStats, vrNsFilterRowStatusTable=vrNsFilterRowStatusTable, vrNsIPXStatsRowStatus=vrNsIPXStatsRowStatus, vrNsProvTable=vrNsProvTable, vrNsIPXStatsAddrStatSourceAddressIndex=vrNsIPXStatsAddrStatSourceAddressIndex, vrNsFilterPacketsBreaked=vrNsFilterPacketsBreaked, netSentryCapabilities=netSentryCapabilities, vrNsATStatsAddrStatDestinationAddressIndex=vrNsATStatsAddrStatDestinationAddressIndex, vrNsBrStatsAddrStatCounter2=vrNsBrStatsAddrStatCounter2, vrNsATStatsAddrStatRowStatusTable=vrNsATStatsAddrStatRowStatusTable, vrNsComponentName=vrNsComponentName, vrNsBrStatsComponentName=vrNsBrStatsComponentName, vrNsDNStatsAddrStatStatsTable=vrNsDNStatsAddrStatStatsTable, vrNsDNStatsRowStatus=vrNsDNStatsRowStatus, vrNsIPStatsAddrStatStorageType=vrNsIPStatsAddrStatStorageType, vrNsEngineRowStatusTable=vrNsEngineRowStatusTable, vrNsIPXStatsAddrStatStatsTable=vrNsIPXStatsAddrStatStatsTable, vrNsBrStatsAddrStatSourceAddressIndex=vrNsBrStatsAddrStatSourceAddressIndex, vrNsIPXStatsRowStatusEntry=vrNsIPXStatsRowStatusEntry, netSentryCapabilitiesBD00A=netSentryCapabilitiesBD00A, vrNsProvEntry=vrNsProvEntry, vrNsATStatsRowStatus=vrNsATStatsRowStatus, vrNsATStatsIndex=vrNsATStatsIndex, vrNsBrStatsAddrStatStorageType=vrNsBrStatsAddrStatStorageType, vrNsFileCompilerErrorMsg=vrNsFileCompilerErrorMsg, vrNsDroppedCantCopyTo=vrNsDroppedCantCopyTo, vrNsFilterComponentName=vrNsFilterComponentName, vrNsFileOperTable=vrNsFileOperTable, vrNsDNStatsRowStatusEntry=vrNsDNStatsRowStatusEntry, netSentryGroup=netSentryGroup, vrNsBrStatsAddrStatPacketCount=vrNsBrStatsAddrStatPacketCount, vrNsFilterKindIndex=vrNsFilterKindIndex, vrNsDroppedCantCloneTo=vrNsDroppedCantCloneTo, vrNsEngineStorageType=vrNsEngineStorageType, vrNsFileOperEntry=vrNsFileOperEntry, vrNsATStatsAddrStat=vrNsATStatsAddrStat, vrNsDNStatsAddrStatRowStatusEntry=vrNsDNStatsAddrStatRowStatusEntry, vrNsDNStatsAddrStatCounter2=vrNsDNStatsAddrStatCounter2, vrNsFileIndex=vrNsFileIndex, vrNsATStatsAddrStatStatsTable=vrNsATStatsAddrStatStatsTable, vrNsBrStatsStorageType=vrNsBrStatsStorageType, vrNsBrStatsAddrStatRowStatusEntry=vrNsBrStatsAddrStatRowStatusEntry, vrNsStatsNoMem=vrNsStatsNoMem, vrNsDNStatsAddrStatRowStatusTable=vrNsDNStatsAddrStatRowStatusTable, vrNsATStatsStorageType=vrNsATStatsStorageType, vrNsBrStatsAddrStatComponentName=vrNsBrStatsAddrStatComponentName, vrNsFilterStorageType=vrNsFilterStorageType, vrNsDNStatsAddrStatByteCount=vrNsDNStatsAddrStatByteCount, vrNsIPXStatsAddrStatStatsEntry=vrNsIPXStatsAddrStatStatsEntry, vrNsIPStatsAddrStatPacketCount=vrNsIPStatsAddrStatPacketCount, vrNsDNStatsAddrStatDestinationAddressIndex=vrNsDNStatsAddrStatDestinationAddressIndex, vrNsBrStatsAddrStatDestinationAddressIndex=vrNsBrStatsAddrStatDestinationAddressIndex, vrNsStatsEntry=vrNsStatsEntry, vrNsHsaOkayFailed=vrNsHsaOkayFailed, vrNsIPStatsAddrStatStatsEntry=vrNsIPStatsAddrStatStatsEntry, vrNsIPXStatsAddrStatDestinationAddressIndex=vrNsIPXStatsAddrStatDestinationAddressIndex, vrNsIPStatsAddrStatDestinationAddressIndex=vrNsIPStatsAddrStatDestinationAddressIndex, vrNsDNStatsAddrStatStatsEntry=vrNsDNStatsAddrStatStatsEntry, vrNsIPStatsAddrStatRowStatus=vrNsIPStatsAddrStatRowStatus, netSentryGroupBD00A=netSentryGroupBD00A, vrNsIPStatsAddrStatRowStatusTable=vrNsIPStatsAddrStatRowStatusTable, vrNsEngineIndex=vrNsEngineIndex, vrNsDroppedStatsNoMem=vrNsDroppedStatsNoMem, vrNsATStatsComponentName=vrNsATStatsComponentName, vrNsBrStatsAddrStatRowStatusTable=vrNsBrStatsAddrStatRowStatusTable, vrNsFilter=vrNsFilter, vrNsIPXStatsAddrStatCounter1=vrNsIPXStatsAddrStatCounter1, vrNsIPXStats=vrNsIPXStats, vrNsDNStatsAddrStatPacketCount=vrNsDNStatsAddrStatPacketCount, vrNsFilterPacketsContinued=vrNsFilterPacketsContinued, vrNsATStats=vrNsATStats, vrNsIPStatsAddrStat=vrNsIPStatsAddrStat, netSentryCapabilitiesBD00=netSentryCapabilitiesBD00, vrNsIPStatsRowStatus=vrNsIPStatsRowStatus, vrNsIPXStatsAddrStatComponentName=vrNsIPXStatsAddrStatComponentName, vrNsATStatsAddrStatComponentName=vrNsATStatsAddrStatComponentName, vrNsBrStats=vrNsBrStats, vrNsATStatsAddrStatCounter2=vrNsATStatsAddrStatCounter2, vrNsATStatsAddrStatStatsEntry=vrNsATStatsAddrStatStatsEntry, vrNsDNStats=vrNsDNStats, vrNsBrStatsRowStatusTable=vrNsBrStatsRowStatusTable, vrNsATStatsRowStatusEntry=vrNsATStatsRowStatusEntry, netSentryCapabilitiesBD=netSentryCapabilitiesBD, vrNsDNStatsRowStatusTable=vrNsDNStatsRowStatusTable, vrNsDNStatsComponentName=vrNsDNStatsComponentName, vrNsIPXStatsAddrStatCounter2=vrNsIPXStatsAddrStatCounter2, vrNsFilterBytesContinued=vrNsFilterBytesContinued, vrNsBrStatsIndex=vrNsBrStatsIndex, vrNsATStatsAddrStatSourceAddressIndex=vrNsATStatsAddrStatSourceAddressIndex, vrNsFileRowStatusTable=vrNsFileRowStatusTable, vrNsDepthExceeded=vrNsDepthExceeded, vrNsDroppedNullFilter=vrNsDroppedNullFilter, vrNsATStatsAddrStatByteCount=vrNsATStatsAddrStatByteCount, vrNsFileRowStatus=vrNsFileRowStatus, vrNsFileStorageType=vrNsFileStorageType, vrNsIPStatsAddrStatCounter1=vrNsIPStatsAddrStatCounter1, vrNsFilterPacketsSucceeded=vrNsFilterPacketsSucceeded, vrNsIPXStatsAddrStatRowStatusTable=vrNsIPXStatsAddrStatRowStatusTable, vrNsFilterBytesSucceeded=vrNsFilterBytesSucceeded, vrNsFile=vrNsFile, vrNsDNStatsAddrStatCounter1=vrNsDNStatsAddrStatCounter1, vrNsBrStatsRowStatusEntry=vrNsBrStatsRowStatusEntry, vrNsRowStatusEntry=vrNsRowStatusEntry, vrNsIPXStatsAddrStatByteCount=vrNsIPXStatsAddrStatByteCount, vrNsIPXStatsRowStatusTable=vrNsIPXStatsRowStatusTable, vrNsEngine=vrNsEngine, vrNsFilterBytesFailed=vrNsFilterBytesFailed, vrNsATStatsAddrStatStorageType=vrNsATStatsAddrStatStorageType, vrNsATStatsAddrStatPacketCount=vrNsATStatsAddrStatPacketCount, vrNsFilterPacketsFailed=vrNsFilterPacketsFailed, vrNsRowStatus=vrNsRowStatus, vrNsIPStatsRowStatusEntry=vrNsIPStatsRowStatusEntry, vrNsIPXStatsAddrStatStorageType=vrNsIPXStatsAddrStatStorageType, vrNsDNStatsAddrStatSourceAddressIndex=vrNsDNStatsAddrStatSourceAddressIndex, vrNsDNStatsAddrStat=vrNsDNStatsAddrStat, netSentryGroupBD00=netSentryGroupBD00, vrNsATStatsAddrStatRowStatus=vrNsATStatsAddrStatRowStatus, vrNsEngineRowStatusEntry=vrNsEngineRowStatusEntry, vrNsFilterNameIndex=vrNsFilterNameIndex, vrNsIPStatsAddrStatRowStatusEntry=vrNsIPStatsAddrStatRowStatusEntry, vrNsBrStatsAddrStatStatsEntry=vrNsBrStatsAddrStatStatsEntry, vrNsATStatsRowStatusTable=vrNsATStatsRowStatusTable, vrNsBrStatsAddrStatRowStatus=vrNsBrStatsAddrStatRowStatus, vrNsATStatsAddrStatRowStatusEntry=vrNsATStatsAddrStatRowStatusEntry, vrNsFileComponentName=vrNsFileComponentName, vrNsFilterStatsTable=vrNsFilterStatsTable, vrNsDroppedCantLogTo=vrNsDroppedCantLogTo, vrNsIPXStatsIndex=vrNsIPXStatsIndex, vrNsBrStatsAddrStatStatsTable=vrNsBrStatsAddrStatStatsTable, vrNsBrStatsAddrStatCounter1=vrNsBrStatsAddrStatCounter1, vrNsRowStatusTable=vrNsRowStatusTable, vrNsIPStatsAddrStatStatsTable=vrNsIPStatsAddrStatStatsTable, vrNsEngineRowStatus=vrNsEngineRowStatus, vrNsIPXStatsAddrStatPacketCount=vrNsIPXStatsAddrStatPacketCount, vrNsATStatsAddrStatCounter1=vrNsATStatsAddrStatCounter1, vrNsIPStatsRowStatusTable=vrNsIPStatsRowStatusTable, vrNsIPXStatsComponentName=vrNsIPXStatsComponentName)
