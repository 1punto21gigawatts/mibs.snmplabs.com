#
# PySNMP MIB module MICOMFLTR (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOMFLTR
# Produced by pysmi-0.3.4 at Wed May  1 14:12:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, NotificationType, iso, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Gauge32, Counter64, Integer32, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "NotificationType", "iso", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Gauge32", "Counter64", "Integer32", "Unsigned32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mcmfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 12))
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class SapType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

mcmipxMacFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1), )
if mibBuilder.loadTexts: mcmipxMacFltrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrTable.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; CAPABILITIES = NET_CFG, VPN_CFG;")
mcmipxMacFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1), ).setIndexNames((0, "MICOMFLTR", "mcmipxMacFltrSysInstance"), (0, "MICOMFLTR", "mcmipxMacFltrId"))
if mibBuilder.loadTexts: mcmipxMacFltrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrEntry.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of one of the router's attached areas.; CAPABILITIES = ;")
mcmipxMacFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrSysInstance.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrSysInstance.setDescription('NAME = ; DESC = ** OBSOLETE ** ; HELP = The unique identifier of the instance \\ of IPX to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
mcmipxMacFltrId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrId.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrId.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the IPX Mac \\ Filter to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
mcmipxMacFltrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrStatus.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrStatus.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = The validity of this entry in the IPX \\ Mac filter table. Setting this field \\ to off indicates that this entry may \\ be deleted from the system table at \\ the implementator's discretion.; CAPABILITIES = ;")
mcmipxMacFltrSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrSrcAddress.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrSrcAddress.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The Physical address of the originating \\ node.; CAPABILITIES = ;')
mcmipxMacFltrDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrDstAddress.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrDstAddress.setDescription('NAME = ; DESC = ; HELP = The Physical address of the destination \\ node.; CAPABILITIES = ;')
mcmipxMacFltrSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrSrcMask.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrSrcMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the Physical address of \\ the originating node.; CAPABILITIES = ;')
mcmipxMacFltrDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrDstMask.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrDstMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the Physical address of \\ the destination node.; CAPABILITIES = ;')
mcmipxMacFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrPort.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrPort.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The IfIndex of the port whose traffic \\ needs to be filtered as per this filter.; CAPABILITIES = ;')
mcmipxMacFltrDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxMacFltrDir.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxMacFltrDir.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The direction of traffic to which this \\ filter need be applied.; CAPABILITIES = ;')
mcmipxNetFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2), )
if mibBuilder.loadTexts: mcmipxNetFltrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrTable.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; CAPABILITIES = NET_CFG, VPN_CFG;")
mcmipxNetFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1), ).setIndexNames((0, "MICOMFLTR", "mcmipxNetFltrSysInstance"), (0, "MICOMFLTR", "mcmipxNetFltrId"))
if mibBuilder.loadTexts: mcmipxNetFltrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrEntry.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of one of the router's attached areas.; CAPABILITIES = ;")
mcmipxNetFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrSysInstance.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrSysInstance.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the instance \\ of IPX to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
mcmipxNetFltrId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrId.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrId.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the IPX Net \\ Filter to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
mcmipxNetFltrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrStatus.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrStatus.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = The validity of this entry in the IPX \\ Net filter table. Setting this field \\ to off indicates that this entry may \\ be deleted from the system table at \\ the implementator's discretion.; CAPABILITIES = ;")
mcmipxNetFltrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 4), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrNetNumber.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrNetNumber.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The network portion of the IPX address.; CAPABILITIES = ;')
mcmipxNetFltrSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 5), SapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrSapType.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrSapType.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The SAP of the packet.; CAPABILITIES = ;')
mcmipxNetFltrNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 6), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrNetMask.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrNetMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the network portion of \\ the IPX Address.; CAPABILITIES = ;')
mcmipxNetFltrSapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 7), SapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrSapMask.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrSapMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the SAP.; CAPABILITIES = ;')
mcmipxNetFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrPort.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrPort.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The IfIndex of the port whose traffic \\ needs to be filtered as per this filter.; CAPABILITIES = ;')
mcmipxNetFltrDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxNetFltrDir.setStatus('obsolete')
if mibBuilder.loadTexts: mcmipxNetFltrDir.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The direction of traffic to which this \\ filter need be applied.; CAPABILITIES = ;')
nvmipxMacFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3), )
if mibBuilder.loadTexts: nvmipxMacFltrTable.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrTable.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; CAPABILITIES = NET_CFG, VPN_CFG;")
nvmipxMacFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1), ).setIndexNames((0, "MICOMFLTR", "nvmipxMacFltrSysInstance"), (0, "MICOMFLTR", "nvmipxMacFltrId"))
if mibBuilder.loadTexts: nvmipxMacFltrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrEntry.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of one of the router's attached areas.; CAPABILITIES = ;")
nvmipxMacFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrSysInstance.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrSysInstance.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the instance \\ of IPX to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
nvmipxMacFltrId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrId.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrId.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the IPX Mac \\ Filter to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
nvmipxMacFltrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrStatus.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrStatus.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = The validity of this entry in the IPX \\ Mac filter table. Setting this field \\ to off indicates that this entry may \\ be deleted from the system table at \\ the implementator's discretion.; CAPABILITIES = ;")
nvmipxMacFltrSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrSrcAddress.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrSrcAddress.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The Physical address of the originating \\ node.; CAPABILITIES = ;')
nvmipxMacFltrDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrDstAddress.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrDstAddress.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The Physical address of the destination \\ node.; CAPABILITIES = ;')
nvmipxMacFltrSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrSrcMask.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrSrcMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the Physical address of \\ the originating node.; CAPABILITIES = ;')
nvmipxMacFltrDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrDstMask.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrDstMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the Physical address of \\ the destination node.; CAPABILITIES = ;')
nvmipxMacFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrPort.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrPort.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The IfIndex of the port whose traffic \\ needs to be filtered as per this filter.; CAPABILITIES = ;')
nvmipxMacFltrDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxMacFltrDir.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxMacFltrDir.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The direction of traffic to which this \\ filter need be applied.; CAPABILITIES = ;')
nvmipxNetFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4), )
if mibBuilder.loadTexts: nvmipxNetFltrTable.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrTable.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; CAPABILITIES = NET_CFG, VPN_CFG;")
nvmipxNetFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1), ).setIndexNames((0, "MICOMFLTR", "nvmipxNetFltrSysInstance"), (0, "MICOMFLTR", "nvmipxNetFltrId"))
if mibBuilder.loadTexts: nvmipxNetFltrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrEntry.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = Information describing the configured \\ parameters and cumulative statistics \\ of one of the router's attached areas.; CAPABILITIES = ;")
nvmipxNetFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrSysInstance.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrSysInstance.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the instance \\ of IPX to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
nvmipxNetFltrId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrId.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrId.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The unique identifier of the IPX Net \\ Filter to which this row corresponds. \\ This value may be written only when \\ creating a new entry in the table.; CAPABILITIES = ;')
nvmipxNetFltrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrStatus.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrStatus.setDescription("NAME = ; DESC = ** OBSOLETE **; HELP = The validity of this entry in the IPX \\ Net filter table. Setting this field \\ to off indicates that this entry may \\ be deleted from the system table at \\ the implementator's discretion.; CAPABILITIES = ;")
nvmipxNetFltrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrNetNumber.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrNetNumber.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The network portion of the IPX address.; CAPABILITIES = ;')
nvmipxNetFltrSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 5), SapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrSapType.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrSapType.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The SAP of the packet.; CAPABILITIES = ;')
nvmipxNetFltrNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 6), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrNetMask.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrNetMask.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The mask for the network portion of \\ the IPX Address.; CAPABILITIES = ;')
nvmipxNetFltrSapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 7), SapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrSapMask.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrSapMask.setDescription('NAME = ; DESC = ;** OBSOLETE ** HELP = The mask for the SAP.; CAPABILITIES = ;')
nvmipxNetFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrPort.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrPort.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The IfIndex of the port whose traffic \\ needs to be filtered as per this filter.; CAPABILITIES = ;')
nvmipxNetFltrDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxNetFltrDir.setStatus('obsolete')
if mibBuilder.loadTexts: nvmipxNetFltrDir.setDescription('NAME = ; DESC = ** OBSOLETE **; HELP = The direction of traffic to which this \\ filter need be applied.; CAPABILITIES = ;')
mcmipxSysFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 19))
mcmipxSysRipFilter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxSysRipFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mcmipxSysRipFilter.setDescription('NAME = ; DESC = Indicates whether the ipx rip filter \\ is inclusive or exclusive; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmipxSysSapFilter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxSysSapFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mcmipxSysSapFilter.setDescription('NAME = ; DESC = Indicates whether the ipx sap filter \\ is inclusive or exclusive; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmipxSysNetFilter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmipxSysNetFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mcmipxSysNetFilter.setDescription('NAME = ; DESC = Indicates whether the ipx net filter \\ is inclusive or exclusive; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmipxSysFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 20))
nvmipxSysRipFilter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxSysRipFilter.setStatus('mandatory')
if mibBuilder.loadTexts: nvmipxSysRipFilter.setDescription('NAME = ; DESC = Indicates whether the ipx rip filter \\ is inclusive or exclusive; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmipxSysSapFilter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxSysSapFilter.setStatus('mandatory')
if mibBuilder.loadTexts: nvmipxSysSapFilter.setDescription('NAME = ; DESC = Indicates whether the ipx sap filter \\ is inclusive or exclusive; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmipxSysNetFilter = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmipxSysNetFilter.setStatus('mandatory')
if mibBuilder.loadTexts: nvmipxSysNetFilter.setDescription('NAME = ; DESC = Indicates whether the ipx net filter \\ is inclusive or exclusive; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmIpxRipFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 21), )
if mibBuilder.loadTexts: mcmIpxRipFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxRipFltrTable.setDescription("NAME = ; DESC = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;")
mcmIpxRipFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 21, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpxRipFltrSysInstance"), (0, "MICOMFLTR", "mcmIpxRipFltrNetNumber"))
if mibBuilder.loadTexts: mcmIpxRipFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxRipFltrEntry.setDescription('NAME = ; DESC = Indicates an entry in the Rip Fltr \\ table. HELP = ; CAPABILITIES = ;')
mcmIpxRipFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxRipFltrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxRipFltrSysInstance.setDescription('NAME = ; DESC = The unique identifier of the instance \\ of the IPX to which this row corresponds.; HELP = ; CAPABILITIES = ;')
mcmIpxRipFltrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 21, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxRipFltrNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxRipFltrNetNumber.setDescription('NAME = ; DESC = The network portion of the IPX address; HELP = ; CAPABILITIES = ;')
mcmIpxRipFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("ethernet", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxRipFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxRipFltrPort.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied on \\ the WAN ports or the ethernet ports.; HELP = ; CAPABILITIES = ;')
mcmIpxSapFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 22), )
if mibBuilder.loadTexts: mcmIpxSapFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxSapFltrTable.setDescription("NAME = ; DESC = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;")
mcmIpxSapFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 22, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpxSapFltrSysInstance"), (0, "MICOMFLTR", "mcmIpxSapFltrSapType"))
if mibBuilder.loadTexts: mcmIpxSapFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxSapFltrEntry.setDescription('NAME = ; DESC = Indicates an entry in the Sap Filter \\ table. HELP = ; CAPABILITIES = ;')
mcmIpxSapFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxSapFltrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxSapFltrSysInstance.setDescription('NAME = ; DESC = The unique identifier of the instance \\ of the IPX to which this row corresponds.; HELP = ; CAPABILITIES = ;')
mcmIpxSapFltrSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 22, 1, 2), SapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxSapFltrSapType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxSapFltrSapType.setDescription('NAME = ; DESC = The SAP of the packet; HELP = ; CAPABILITIES = ;')
mcmIpxSapFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("ethernet", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxSapFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxSapFltrPort.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied on \\ the WAN ports or the ethernet ports.; HELP = ; CAPABILITIES = ;')
mcmIpxNetFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 23), )
if mibBuilder.loadTexts: mcmIpxNetFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxNetFltrTable.setDescription("NAME = ; DESC = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;")
mcmIpxNetFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 23, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpxNetFltrSysInstance"), (0, "MICOMFLTR", "mcmIpxNetFltrNetNumber"))
if mibBuilder.loadTexts: mcmIpxNetFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxNetFltrEntry.setDescription('NAME = ; DESC = Indicates an entry in the Net Filter \\ table. HELP = ; CAPABILITIES = ;')
mcmIpxNetFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxNetFltrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxNetFltrSysInstance.setDescription('NAME = ; DESC = The unique identifier of the instance \\ of the IPX to which this row corresponds.; HELP = ; CAPABILITIES = ;')
mcmIpxNetFltrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 23, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxNetFltrNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxNetFltrNetNumber.setDescription('NAME = ; DESC = The network portion of the IPX address; HELP = ; CAPABILITIES = ;')
mcmIpxNetFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("ethernet", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxNetFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxNetFltrPort.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied on \\ the WAN ports or the ethernet ports.; HELP = ; CAPABILITIES = ;')
mcmIpxNetFltrDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpxNetFltrDir.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpxNetFltrDir.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied \\ based on the source address or the \\ destination address.; HELP = ; CAPABILITIES = ;')
nvmIpxRipFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 24), )
if mibBuilder.loadTexts: nvmIpxRipFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxRipFltrTable.setDescription("NAME = ; DESC = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;")
nvmIpxRipFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 24, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpxRipFltrSysInstance"), (0, "MICOMFLTR", "nvmIpxRipFltrNetNumber"))
if mibBuilder.loadTexts: nvmIpxRipFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxRipFltrEntry.setDescription('NAME = ; DESC = Indicates an entry in the Rip Fltr \\ table. HELP = ; CAPABILITIES = ;')
nvmIpxRipFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxRipFltrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxRipFltrSysInstance.setDescription('NAME = ; DESC = The unique identifier of the instance \\ of the IPX to which this row corresponds.; HELP = ; CAPABILITIES = ;')
nvmIpxRipFltrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 24, 1, 2), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxRipFltrNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxRipFltrNetNumber.setDescription('NAME = ; DESC = The network portion of the IPX address; HELP = ; CAPABILITIES = ;')
nvmIpxRipFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("ethernet", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxRipFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxRipFltrPort.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied on \\ the WAN ports or the ethernet ports.; HELP = ; CAPABILITIES = ;')
nvmIpxRipFltrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxRipFltrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxRipFltrRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows \\ or modify and delete existing rows \\ in this table(nvmIpxRipFltrTable).; HELP = To add a new row, createAndGo (4) is used. \\ To modify an existing row, active (1) is \\ used. To delete an existing row, \\ destroy (6) is used. ; CAPABILITIES = ;')
nvmIpxSapFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 25), )
if mibBuilder.loadTexts: nvmIpxSapFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxSapFltrTable.setDescription("NAME = ; DESC = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;")
nvmIpxSapFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 25, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpxSapFltrSysInstance"), (0, "MICOMFLTR", "nvmIpxSapFltrSapType"))
if mibBuilder.loadTexts: nvmIpxSapFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxSapFltrEntry.setDescription('NAME = ; DESC = Indicates an entry in the Sap Filter \\ table. HELP = ; CAPABILITIES = ;')
nvmIpxSapFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxSapFltrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxSapFltrSysInstance.setDescription('NAME = ; DESC = The unique identifier of the instance \\ of the IPX to which this row corresponds.; HELP = ; CAPABILITIES = ;')
nvmIpxSapFltrSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 25, 1, 2), SapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxSapFltrSapType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxSapFltrSapType.setDescription('NAME = ; DESC = The SAP of the packet; HELP = ; CAPABILITIES = ;')
nvmIpxSapFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("ethernet", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxSapFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxSapFltrPort.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied on \\ the WAN ports or the ethernet ports.; HELP = ; CAPABILITIES = ;')
nvmIpxSapFltrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxSapFltrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxSapFltrRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows \\ or modify and delete existing rows \\ in this table(nvmIpxSapFltrTable).; HELP = To add a new row, createAndGo (4) is used. \\ To modify an existing row, active (1) is \\ used. To delete an existing row, \\ destroy (6) is used. ; CAPABILITIES = ;')
nvmIpxNetFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26), )
if mibBuilder.loadTexts: nvmIpxNetFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrTable.setDescription("NAME = ; DESC = Information describing the configured \\ parameters and cumulative statistics \\ of the router's attached areas.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;")
nvmIpxNetFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpxNetFltrSysInstance"), (0, "MICOMFLTR", "nvmIpxNetFltrNetNumber"))
if mibBuilder.loadTexts: nvmIpxNetFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrEntry.setDescription('NAME = ; DESC = Indicates an entry in the Net Filter \\ table. HELP = ; CAPABILITIES = ;')
nvmIpxNetFltrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxNetFltrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrSysInstance.setDescription('NAME = ; DESC = The unique identifier of the instance \\ of the IPX to which this row corresponds.; HELP = ; CAPABILITIES = ;')
nvmIpxNetFltrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26, 1, 2), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxNetFltrNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrNetNumber.setDescription('NAME = ; DESC = The network portion of the IPX address; HELP = ; CAPABILITIES = ;')
nvmIpxNetFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wan", 1), ("ethernet", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxNetFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrPort.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied on \\ the WAN ports or the ethernet ports.; HELP = ; CAPABILITIES = ;')
nvmIpxNetFltrDir = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxNetFltrDir.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrDir.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the filtering is applied \\ based on the source address or the \\ destination address.; HELP = ; CAPABILITIES = ;')
nvmIpxNetFltrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpxNetFltrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpxNetFltrRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows \\ or modify and delete existing rows \\ in this table(nvmIpxNetFltrTable).; HELP = To add a new row, createAndGo (4) is used. \\ To modify an existing row, active (1) is \\ used. To delete an existing row, \\ destroy (6) is used. ; CAPABILITIES = ;')
mcmIpRipInFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 5), )
if mibBuilder.loadTexts: mcmIpRipInFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipInFltrTable.setDescription('NAME = ; DESC = Information about RIP Incoming Network \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpRipInFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 5, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpRipInFltrMask"), (0, "MICOMFLTR", "mcmIpRipInFltrAddr"))
if mibBuilder.loadTexts: mcmIpRipInFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipInFltrEntry.setDescription('NAME = ; DESC = RIP Incoming Network Filter entry; HELP = ; CAPABILITIES = ;')
mcmIpRipInFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipInFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipInFltrMask.setDescription('NAME = ; DESC = The network mask associated with the \\ filter entry. This is to provide \\ network range for a match; HELP = ; CAPABILITIES = ;')
mcmIpRipInFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipInFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipInFltrAddr.setDescription('NAME = ; DESC = The network associated with the \\ filter entry.; HELP = Routes in the incoming RIP advertisements \\ which match the specific address wil be \\ filtered; CAPABILITIES = ;')
mcmIpRipInFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipInFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipInFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
mcmIpRipOutFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 6), )
if mibBuilder.loadTexts: mcmIpRipOutFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipOutFltrTable.setDescription('NAME = ; DESC = Information about the RIP Outgoing \\ Network filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpRipOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 6, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpRipOutFltrMask"), (0, "MICOMFLTR", "mcmIpRipOutFltrAddr"))
if mibBuilder.loadTexts: mcmIpRipOutFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipOutFltrEntry.setDescription('NAME = ; DESC = RIP Outgoing Network filter entry; HELP = ; CAPABILITIES = ;')
mcmIpRipOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipOutFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipOutFltrMask.setDescription('NAME = ; DESC = The network mask associated with \\ the filter entry. This is to provide \\ network range for a match. ; HELP = ; CAPABILITIES = ;')
mcmIpRipOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipOutFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipOutFltrAddr.setDescription('NAME = ; DESC = The network associated with the filter \\ entry.; HELP = Routes in the outgoing RIP advrtisement \\ with this address will be filtered; CAPABILITIES = ;')
mcmIpRipOutFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipOutFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipOutFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
mcmIpRipGwyFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 7), )
if mibBuilder.loadTexts: mcmIpRipGwyFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipGwyFltrTable.setDescription('NAME = ; DESC = Information about the RIP Gateway \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpRipGwyFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 7, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpRipGwyFltrMask"), (0, "MICOMFLTR", "mcmIpRipGwyFltrAddr"))
if mibBuilder.loadTexts: mcmIpRipGwyFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipGwyFltrEntry.setDescription('NAME = ; DESC = RIP Gateway filter entry; HELP = ; CAPABILITIES = ;')
mcmIpRipGwyFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipGwyFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipGwyFltrMask.setDescription('NAME = ; DESC = The gateway mask associated with the \\ filter entry. This is to provide a \\ gateway range for a match.; HELP = ; CAPABILITIES = ;')
mcmIpRipGwyFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipGwyFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipGwyFltrAddr.setDescription('NAME = ; DESC = The gateway associated with the \\ filter entry.; HELP = RIP advertisements from gateway(s) \\ specified will be filtered.; CAPABILITIES = ;')
mcmIpRipGwyFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpRipGwyFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpRipGwyFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
mcmIpOspfOutFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 8), )
if mibBuilder.loadTexts: mcmIpOspfOutFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpOspfOutFltrTable.setDescription('NAME = ; DESC = Information about the OSPF outgoing \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpOspfOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 8, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpOspfOutFltrMask"), (0, "MICOMFLTR", "mcmIpOspfOutFltrAddr"))
if mibBuilder.loadTexts: mcmIpOspfOutFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpOspfOutFltrEntry.setDescription('NAME = ; DESC = OSPF Outgoing filter entry; HELP = ; CAPABILITIES = ;')
mcmIpOspfOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpOspfOutFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpOspfOutFltrMask.setDescription('NAME = ; DESC = The network mask associated with the \\ filter entry. This is to provide a \\ network range for a match.; HELP = ; CAPABILITIES = ;')
mcmIpOspfOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpOspfOutFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpOspfOutFltrAddr.setDescription('NAME = ; DESC = The network associated with the \\ filter entry. Routing entry in the \\ OSPF AS_EXTERN advertisement \\ with this address will be filtered; HELP = ; CAPABILITIES = ;')
mcmIpOspfOutFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpOspfOutFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpOspfOutFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
mcmIpFwdPortInFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9), )
if mibBuilder.loadTexts: mcmIpFwdPortInFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrTable.setDescription('NAME = ; DESC = Information about the IP Forwarding \\ Incoming Port filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpFwdPortInFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpFwdPortInFltrPortNo"), (0, "MICOMFLTR", "mcmIpFwdPortInFltrMask"), (0, "MICOMFLTR", "mcmIpFwdPortInFltrAddr"), (0, "MICOMFLTR", "mcmIpFwdPortInFltrProtId"), (0, "MICOMFLTR", "mcmIpFwdPortInFltrPortId"))
if mibBuilder.loadTexts: mcmIpFwdPortInFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrEntry.setDescription('NAME = ; DESC = IP forwarding port incoming filter entry; HELP = ; CAPABILITIES = ;')
mcmIpFwdPortInFltrPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrPortNo.setDescription('NAME = ; DESC = The output interface/port associated \\ with this filter entry. This filter \\ HELP = This filter entry is applied to IP packets \\ received in this interface/port only.; CAPABILITIES = ;')
mcmIpFwdPortInFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrMask.setDescription('NAME = ; DESC = The source/destination address mask \\ associated with the filter entry.; HELP = This is to provide IP address \\ range for a match. Depending on \\ mcmIpFwdPortOutFltrSrcDst either the \\ source or destination address in the \\ IP packet is compared for a match.; CAPABILITIES = ;')
mcmIpFwdPortInFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrAddr.setDescription('NAME = ; DESC = The source/destination address associated \\ with the filter entry.; HELP = Depending on mcmIpFwdPortOutFltrSrcDst, \\ either the source or destination address \\ in the IP packet is compared for a match. \\ If the respective address in the IP \\ packet matches this together with other \\ patterns in the filter entry then the IP \\ packet is filtered; CAPABILITIES = ;')
mcmIpFwdPortInFltrProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrProtId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrProtId.setDescription('NAME = ; DESC = The protocol type associated with the \\ filter entry.; HELP = If the protocol type in the IP packet \\ matches this together with other patterns \\ together with other patterns in the filter \\ entry then the IP packet is filtered; CAPABILITIES = ;')
mcmIpFwdPortInFltrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrPortId.setDescription('NAME = ; DESC = The TCP/UDP port number associated with the \\ filter entry.; HELP = If the destination TCP/UDP port number in the \\ IP packet matches this together with other patterns \\ in the filter entry then the IP pkt is filtered.; the IP packet is filtered; CAPABILITIES = ;')
mcmIpFwdPortInFltrSrcDst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrSrcDst.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrSrcDst.setDescription('NAME = ; DESC = Source or destination IP address in the \\ IP packet to be compared for filter \\ matching; HELP = ; CAPABILITIES = ;')
mcmIpFwdPortInFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortInFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortInFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
mcmIpFwdPortOutFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10), )
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrTable.setDescription('NAME = ; DESC = Information about the IP Forwarding Outgoing \\ Port filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpFwdPortOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpFwdPortOutFltrPortNo"), (0, "MICOMFLTR", "mcmIpFwdPortOutFltrMask"), (0, "MICOMFLTR", "mcmIpFwdPortOutFltrAddr"), (0, "MICOMFLTR", "mcmIpFwdPortOutFltrProtId"), (0, "MICOMFLTR", "mcmIpFwdPortOutFltrPortId"))
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrEntry.setDescription('NAME = ; DESC = IP forwarding port outgoing filter entry; HELP = ; CAPABILITIES = ;')
mcmIpFwdPortOutFltrPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrPortNo.setDescription('NAME = ; DESC = The output interface/port associated \\ with this filter entry.; HELP = This filter entry is applied to IP packets \\ forwarded on this interface/port only,; CAPABILITIES = ;')
mcmIpFwdPortOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrMask.setDescription('NAME = ; DESC =The source/destination address mask associated \\ with the filter entry. This is to provide \\ IP address range for a match.; HELP = Depending on mcmIpFwdPortOutFltrSrcDst either \\ the source or Dest. address in the IP packet is \\ compared for a match.; CAPABILITIES = ;')
mcmIpFwdPortOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrAddr.setDescription('NAME = ; DESC = The source/dest. addr associated with the filter entry.\\ Depending on mcmIpFwdPortOutFltrSrcDst, the Src or Dest \\ address in the IP packet is compared for a match. HELP = If the respective address in the IP packet matches this \\ together with other patterns in the filter \\ entry then IP packet is filtered; CAPABILITIES = ;')
mcmIpFwdPortOutFltrProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrProtId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrProtId.setDescription('NAME = ; DESC = The protocol type associated with the \\ filter entry.; HELP = If the protocol type in the IP packet matches \\ this together with other patterns in the filter \\ entry then the IP packet is filtered.; packet is filtered; CAPABILITIES = ;')
mcmIpFwdPortOutFltrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrPortId.setDescription('NAME = ; DESC = The TCP/UDP port number associated with the \\ filter entry.; HELP = If the destination TCP/UDP port number in the \\ IP packet matches this together w/ other patterns \\ in the filter entry then the IP pkt is filtered.; CAPABILITIES = ;')
mcmIpFwdPortOutFltrSrcDst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrSrcDst.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrSrcDst.setDescription('NAME = ; DESC = Source or deatination IP address in the \\ IP packet to be compared for filter \\ matching; HELP = ; CAPABILITIES = ;')
mcmIpFwdPortOutFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpFwdPortOutFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
mcmIpSysFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11), )
if mibBuilder.loadTexts: mcmIpSysFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrTable.setDescription('NAME = ; DESC = Information about the IP forwarding system \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
mcmIpSysFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1), ).setIndexNames((0, "MICOMFLTR", "mcmIpSysFltrDstMask"), (0, "MICOMFLTR", "mcmIpSysFltrDstAddr"), (0, "MICOMFLTR", "mcmIpSysFltrSrcMask"), (0, "MICOMFLTR", "mcmIpSysFltrSrcAddr"), (0, "MICOMFLTR", "mcmIpSysFltrProtId"), (0, "MICOMFLTR", "mcmIpSysFltrPortId"))
if mibBuilder.loadTexts: mcmIpSysFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrEntry.setDescription('NAME = ; DESC = IP forwarding system filter entry; HELP = ; CAPABILITIES = ;')
mcmIpSysFltrDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrDstMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrDstMask.setDescription('NAME = ; DESC = The destination address mask associated \\ with the filter entry. This is to \\ provide IP address range for a match; HELP = ; CAPABILITIES = ;')
mcmIpSysFltrDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrDstAddr.setDescription('NAME = ; DESC = The destination address associated \\ with the filter entry.; HELP = If the destination address in the IP packect \\ matches this together with other \\ patterns in the filter entry then IP packet \\ is filtered; CAPABILITIES = ;')
mcmIpSysFltrSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrSrcMask.setDescription('NAME = ; DESC = The source address mask associated with the \\ filter entry. This is to provide IP address \\ range for a match; HELP = ; CAPABILITIES = ;')
mcmIpSysFltrSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrSrcAddr.setDescription('NAME = ; DESC = The source address associated with the \\ filter entry.; HELP = If the source address in the IP packet \\ matches this together with other patterns \\ in the filter entry then IP packet is filtered.; CAPABILITIES = ;')
mcmIpSysFltrProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrProtId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrProtId.setDescription('NAME = ; DESC = The protocol type associated with the \\ filter entry.; HELP = If the protocol type in the IP packet \\ matches this together w/ other patterns \\ in the filter entry then the IP pkt is filtered.; CAPABILITIES = ;')
mcmIpSysFltrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrPortId.setDescription('NAME = ; DESC = The TCP/UDP port number associated with \\ the filter entry.; HELP = If the destination TCP/UDP port number in the \\ IP packet matches this together w/other patterns \\ in the filter entry then the IP packet is filtered; CAPABILITIES = ;')
mcmIpSysFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIpSysFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIpSysFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpRipInFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 12), )
if mibBuilder.loadTexts: nvmIpRipInFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipInFltrTable.setDescription('NAME = ; DESC = Information about RIP Incoming Network \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpRipInFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 12, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpRipInFltrMask"), (0, "MICOMFLTR", "nvmIpRipInFltrAddr"))
if mibBuilder.loadTexts: nvmIpRipInFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipInFltrEntry.setDescription('NAME = ; DESC = RIP Incoming Network Filter entry; HELP = ; CAPABILITIES = ;')
nvmIpRipInFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 12, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipInFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipInFltrMask.setDescription('NAME = ; DESC = The network mask associated with the \\ filter entry. This is to provide \\ network range for a match; HELP = ; CAPABILITIES = ;')
nvmIpRipInFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipInFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipInFltrAddr.setDescription('NAME = ; DESC = The network associated with the filter entry.\\ Routes in the incoming RIP advertisements \\ which match the specific address will be \\ filtered; HELP = ; CAPABILITIES = ;')
nvmIpRipInFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipInFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipInFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpRipOutFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 13), )
if mibBuilder.loadTexts: nvmIpRipOutFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipOutFltrTable.setDescription('NAME = ; DESC = Information about the RIP Outgoing Network \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpRipOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 13, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpRipOutFltrMask"), (0, "MICOMFLTR", "nvmIpRipOutFltrAddr"))
if mibBuilder.loadTexts: nvmIpRipOutFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipOutFltrEntry.setDescription('NAME = ; DESC = RIP Outgoing Network filter entry; HELP = ; CAPABILITIES = ;')
nvmIpRipOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 13, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipOutFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipOutFltrMask.setDescription('NAME = ; DESC = The network mask associated with the \\ filter entry. This is to provide \\ network range for a match. ; HELP = ; CAPABILITIES = ;')
nvmIpRipOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipOutFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipOutFltrAddr.setDescription('NAME = ; DESC = The network associated with the \\ filter entry. Routes in the outgoing RIP \\ advertisement with this addr w/be filtered.; HELP = ; CAPABILITIES = ;')
nvmIpRipOutFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipOutFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipOutFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpRipGwyFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 14), )
if mibBuilder.loadTexts: nvmIpRipGwyFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipGwyFltrTable.setDescription('NAME = ; DESC = Information about the RIP Gateway \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpRipGwyFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 14, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpRipGwyFltrMask"), (0, "MICOMFLTR", "nvmIpRipGwyFltrAddr"))
if mibBuilder.loadTexts: nvmIpRipGwyFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipGwyFltrEntry.setDescription('NAME = ; DESC = RIP Gateway filter entry; HELP = ; CAPABILITIES = ;')
nvmIpRipGwyFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 14, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipGwyFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipGwyFltrMask.setDescription('NAME = ; DESC = The gateway mask associated with the \\ filter entry. This is to provide a \\ gateway range for a match.; HELP = ; CAPABILITIES = ;')
nvmIpRipGwyFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipGwyFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipGwyFltrAddr.setDescription('NAME = ; DESC = The gateway associated with the \\ filter entry.; HELP = RIP advertisements from gateway(s) \\ specified will be filtered.; CAPABILITIES = ;')
nvmIpRipGwyFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpRipGwyFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpRipGwyFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpOspfOutFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 15), )
if mibBuilder.loadTexts: nvmIpOspfOutFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpOspfOutFltrTable.setDescription('NAME = ; DESC = Information about the OSPF outgoing \\ filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpOspfOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 15, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpOspfOutFltrMask"), (0, "MICOMFLTR", "nvmIpOspfOutFltrAddr"))
if mibBuilder.loadTexts: nvmIpOspfOutFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpOspfOutFltrEntry.setDescription('NAME = ; DESC = OSPF Outgoing filter entry; HELP = ; CAPABILITIES = ;')
nvmIpOspfOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 15, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpOspfOutFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpOspfOutFltrMask.setDescription('NAME = ; DESC = The network mask associated with the \\ filter entry. This is to provide a \\ network range for a match.; HELP = ; CAPABILITIES = ;')
nvmIpOspfOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpOspfOutFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpOspfOutFltrAddr.setDescription('NAME = ; DESC = The network associated with the \\ filter entry. Routing entry in the \\ OSPF AS_EXTERN advertisement \\ with this address will be filtered; HELP = ; CAPABILITIES = ;')
nvmIpOspfOutFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpOspfOutFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpOspfOutFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpFwdPortInFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16), )
if mibBuilder.loadTexts: nvmIpFwdPortInFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrTable.setDescription('NAME = ; DESC = Information about the IP Forwarding \\ Incoming Port filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpFwdPortInFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpFwdPortInFltrPortNo"), (0, "MICOMFLTR", "nvmIpFwdPortInFltrMask"), (0, "MICOMFLTR", "nvmIpFwdPortInFltrAddr"), (0, "MICOMFLTR", "nvmIpFwdPortInFltrProtId"), (0, "MICOMFLTR", "nvmIpFwdPortInFltrPortId"))
if mibBuilder.loadTexts: nvmIpFwdPortInFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrEntry.setDescription('NAME = ; DESC = IP forwarding port incoming filter entry; HELP = ; CAPABILITIES = ;')
nvmIpFwdPortInFltrPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrPortNo.setDescription('NAME = ; DESC = The output interface/port associated \\ with this filter entry. This filter \\ HELP = This filter entry is applied to IP packets \\ received in this interface/port only.; CAPABILITIES = ;')
nvmIpFwdPortInFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrMask.setDescription('NAME = ; DESC = The source/destination address mask \\ associated with the filter entry.; HELP = This is to provide IP address \\ range for a match. Depending on \\ mcmIpFwdPortOutFltrSrcDst either the \\ source or destination address in the \\ IP packet is compared for a match.; CAPABILITIES = ;')
nvmIpFwdPortInFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrAddr.setDescription('NAME = ; DESC = The source/destination address associated \\ with the filter entry. Depending on.; HELP = Depending on mcmIpFwdPortOutFltrSrcDst, \\ either the source or destination address \\ in the IP packet is compared for a match. \\ If the respective address in the IP \\ packet matches this together with other \\ patterns in the filter entry then the IP \\ packet is filtered; CAPABILITIES = ;')
nvmIpFwdPortInFltrProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrProtId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrProtId.setDescription('NAME = ; DESC = The protocol type associated with the \\ filter entry.; HELP = If the protocol type in the IP packet \\ matches this together with other patterns \\ together with other patterns in the filter \\ entry then the IP packet is filtered; CAPABILITIES = ;')
nvmIpFwdPortInFltrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrPortId.setDescription('NAME = ; DESC = The TCP/UDP port number associated with the \\ filter entry.; HELP = If the destination TCP/UDP port number in the \\ IP packet matches this together with other patterns \\ in the filter entry then the IP pkt is filtered.; the IP packet is filtered; CAPABILITIES = ;')
nvmIpFwdPortInFltrSrcDst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrSrcDst.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrSrcDst.setDescription('NAME = ; DESC = Source or destination IP address in the \\ IP packet to be compared for filter \\ matching; HELP = ; CAPABILITIES = ;')
nvmIpFwdPortInFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortInFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortInFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpFwdPortOutFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17), )
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrTable.setDescription('NAME = ; DESC = Information about the IP Forwarding \\ Outgoing Port filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpFwdPortOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpFwdPortOutFltrPortNo"), (0, "MICOMFLTR", "nvmIpFwdPortOutFltrMask"), (0, "MICOMFLTR", "nvmIpFwdPortOutFltrAddr"), (0, "MICOMFLTR", "nvmIpFwdPortOutFltrProtId"), (0, "MICOMFLTR", "nvmIpFwdPortOutFltrPortId"))
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrEntry.setDescription('NAME = ; DESC = IP forwarding port outgoing filter entry; HELP = ; CAPABILITIES = ;')
nvmIpFwdPortOutFltrPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrPortNo.setDescription('NAME = ; DESC = The output interface/port associated \\ with this filter entry.; HELP = This filter entry is applied to IP packets \\ forwarded on this interface/port only,; CAPABILITIES = ;')
nvmIpFwdPortOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrMask.setDescription('NAME = ; DESC = The source/destination address mask associated \\ with the filter entry. This is to provide \\ IP address range for a match.; HELP = Depending on mcmIpFwdPortOutFltrSrcDst either \\ the source or Dest. address in the IP packet is \\ compared for a match.; CAPABILITIES = ;')
nvmIpFwdPortOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrAddr.setDescription('NAME = ; DESC = The source/dest. addr associated with the filter entry.\\ Depending on mcmIpFwdPortOutFltrSrcDst, the Src or Dest \\ address in the IP packet is compared for a match. HELP = If the respective address in the IP packet matches this \\ together with other patterns in the filter \\ entry then IP packet is filtered; CAPABILITIES = ;')
nvmIpFwdPortOutFltrProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrProtId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrProtId.setDescription('NAME = ; DESC = The protocol type associated with the \\ filter entry.; HELP = If the protocol type in the IP packet matches \\ this together with other patterns in the filter \\ entry then the IP packet is filtered.; packet is filtered; CAPABILITIES = ;')
nvmIpFwdPortOutFltrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrPortId.setDescription('NAME = ; DESC = The TCP/UDP port number associated with the \\ filter entry.; HELP = If the destination TCP/UDP port number in the \\ IP packet matches this together w/ other patterns \\ in the filter entry then the IP pkt is filtered.; CAPABILITIES = ;')
nvmIpFwdPortOutFltrSrcDst = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("destination", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrSrcDst.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrSrcDst.setDescription('NAME = ; DESC = Source or deatination IP address in the IP \\ packet to be compared for filter matching; HELP = ; CAPABILITIES = ;')
nvmIpFwdPortOutFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpFwdPortOutFltrAction.setDescription('NAME = ; DESC = Action to be taken (FORWARD/DISCARD) \\ in case of a match; HELP = ; CAPABILITIES = ;')
nvmIpSysFltrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18), )
if mibBuilder.loadTexts: nvmIpSysFltrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrTable.setDescription('NAME = ; DESC = Information about the IP forwarding \\ system filter entry; HELP = ; CAPABILITIES = NET_CFG, VPN_NONE;')
nvmIpSysFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1), ).setIndexNames((0, "MICOMFLTR", "nvmIpSysFltrDstMask"), (0, "MICOMFLTR", "nvmIpSysFltrDstAddr"), (0, "MICOMFLTR", "nvmIpSysFltrSrcMask"), (0, "MICOMFLTR", "nvmIpSysFltrSrcAddr"), (0, "MICOMFLTR", "nvmIpSysFltrProtId"), (0, "MICOMFLTR", "nvmIpSysFltrPortId"))
if mibBuilder.loadTexts: nvmIpSysFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrEntry.setDescription('NAME = ; DEST = IP forwarding system filter entry; HELP = ; CAPABILITIES = ;')
nvmIpSysFltrDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrDstMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrDstMask.setDescription('NAME = ; DEST = The destination address mask associated \\ with the filter entry. This is to provide \\ IP address range for a match; HELP = ; CAPABILITIES = ;')
nvmIpSysFltrDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrDstAddr.setDescription('NAME = ; DESC = The destination address associated \\ with the filter entry.; HELP = If the destination address in the IP packect \\ matches this together with other \\ patterns in the filter entry then IP packet \\ is filtered; CAPABILITIES = ;')
nvmIpSysFltrSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrSrcMask.setDescription('NAME = ; DESC = The source address mask associated \\ with the filter entry. This is to \\ provide IP address range for a match; HELP = ; CAPABILITIES = ;')
nvmIpSysFltrSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrSrcAddr.setDescription('NAME = ; DESC = The source address associated with the \\ filter entry.; HELP = If the source address in the IP packet \\ matches this together with other patterns \\ in the filter entry then IP packet is filtered.; CAPABILITIES = ;')
nvmIpSysFltrProtId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrProtId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrProtId.setDescription('NAME = ; DESC = The protocol type associated with the \\ filter entry.; HELP = If the protocol type in the IP packet \\ matches this together w/ other patterns \\ in the filter entry then the IP pkt is filtered.; CAPABILITIES = ;')
nvmIpSysFltrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrPortId.setDescription('NAME = ; DESC = The TCP/UDP port number associated with \\ the filter entry.; HELP = If the destination TCP/UDP port number in the \\ IP packet matches this together w/other patterns \\ in the filter entry then the IP packet is filtered; CAPABILITIES = ;')
nvmIpSysFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 12, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIpSysFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIpSysFltrAction.setDescription('NAME = ; DESC = ; HELP = Action to be taken (FORWARD/DISCARD) \\ in case of a match; CAPABILITIES = ;')
mibBuilder.exportSymbols("MICOMFLTR", nvmipxMacFltrStatus=nvmipxMacFltrStatus, nvmIpxSapFltrTable=nvmIpxSapFltrTable, mcmIpFwdPortInFltrAddr=mcmIpFwdPortInFltrAddr, mcmIpRipOutFltrTable=mcmIpRipOutFltrTable, mcmipxNetFltrNetNumber=mcmipxNetFltrNetNumber, nvmIpxSapFltrEntry=nvmIpxSapFltrEntry, mcmIpFwdPortOutFltrProtId=mcmIpFwdPortOutFltrProtId, nvmIpRipInFltrEntry=nvmIpRipInFltrEntry, mcmipxNetFltrTable=mcmipxNetFltrTable, mcmipxSysNetFilter=mcmipxSysNetFilter, nvmIpFwdPortOutFltrAction=nvmIpFwdPortOutFltrAction, mcmIpRipOutFltrEntry=mcmIpRipOutFltrEntry, mcmIpxNetFltrDir=mcmIpxNetFltrDir, nvmipxNetFltrNetNumber=nvmipxNetFltrNetNumber, nvmIpFwdPortOutFltrTable=nvmIpFwdPortOutFltrTable, mcmIpFwdPortInFltrSrcDst=mcmIpFwdPortInFltrSrcDst, mcmIpSysFltrSrcMask=mcmIpSysFltrSrcMask, nvmipxNetFltrPort=nvmipxNetFltrPort, mcmIpSysFltrEntry=mcmIpSysFltrEntry, mcmIpOspfOutFltrEntry=mcmIpOspfOutFltrEntry, mcmIpFwdPortInFltrPortId=mcmIpFwdPortInFltrPortId, nvmIpOspfOutFltrTable=nvmIpOspfOutFltrTable, mcmIpxNetFltrTable=mcmIpxNetFltrTable, nvmIpOspfOutFltrAddr=nvmIpOspfOutFltrAddr, mcmIpOspfOutFltrAction=mcmIpOspfOutFltrAction, mcmIpFwdPortInFltrMask=mcmIpFwdPortInFltrMask, nvmIpSysFltrSrcAddr=nvmIpSysFltrSrcAddr, nvmIpxNetFltrDir=nvmIpxNetFltrDir, nvmIpxNetFltrRowStatus=nvmIpxNetFltrRowStatus, mcmIpSysFltrDstMask=mcmIpSysFltrDstMask, nvmIpFwdPortInFltrTable=nvmIpFwdPortInFltrTable, mcmIpxRipFltrTable=mcmIpxRipFltrTable, nvmipxMacFltrPort=nvmipxMacFltrPort, mcmIpRipInFltrTable=mcmIpRipInFltrTable, mcmipxNetFltrEntry=mcmipxNetFltrEntry, mcmIpRipOutFltrAction=mcmIpRipOutFltrAction, nvmIpFwdPortInFltrMask=nvmIpFwdPortInFltrMask, nvmIpxRipFltrRowStatus=nvmIpxRipFltrRowStatus, mcmipxMacFltrSysInstance=mcmipxMacFltrSysInstance, nvmIpxSapFltrPort=nvmIpxSapFltrPort, nvmipxSysSapFilter=nvmipxSysSapFilter, mcmipxNetFltrSapMask=mcmipxNetFltrSapMask, mcmIpFwdPortInFltrTable=mcmIpFwdPortInFltrTable, nvmIpFwdPortOutFltrPortId=nvmIpFwdPortOutFltrPortId, mcmipxMacFltrEntry=mcmipxMacFltrEntry, nvmipxMacFltrDstMask=nvmipxMacFltrDstMask, nvmIpFwdPortInFltrAction=nvmIpFwdPortInFltrAction, mcmIpSysFltrAction=mcmIpSysFltrAction, nvmIpFwdPortOutFltrAddr=nvmIpFwdPortOutFltrAddr, mcmipxMacFltrDstMask=mcmipxMacFltrDstMask, mcmIpxRipFltrNetNumber=mcmIpxRipFltrNetNumber, SapType=SapType, mcmipxNetFltrSysInstance=mcmipxNetFltrSysInstance, mcmIpFwdPortInFltrEntry=mcmIpFwdPortInFltrEntry, mcmIpRipInFltrMask=mcmIpRipInFltrMask, mcmIpSysFltrSrcAddr=mcmIpSysFltrSrcAddr, mcmipxSysRipFilter=mcmipxSysRipFilter, mcmIpxSapFltrSysInstance=mcmIpxSapFltrSysInstance, nvmIpxNetFltrNetNumber=nvmIpxNetFltrNetNumber, mcmipxMacFltrSrcMask=mcmipxMacFltrSrcMask, mcmIpOspfOutFltrTable=mcmIpOspfOutFltrTable, mcmipxMacFltrDstAddress=mcmipxMacFltrDstAddress, nvmIpxSapFltrSapType=nvmIpxSapFltrSapType, mcmipxMacFltrId=mcmipxMacFltrId, mcmipxMacFltrTable=mcmipxMacFltrTable, mcmipxNetFltrSapType=mcmipxNetFltrSapType, nvmIpRipInFltrAction=nvmIpRipInFltrAction, mcmIpFwdPortOutFltrAction=mcmIpFwdPortOutFltrAction, mcmIpOspfOutFltrMask=mcmIpOspfOutFltrMask, nvmIpOspfOutFltrMask=nvmIpOspfOutFltrMask, nvmIpFwdPortInFltrProtId=nvmIpFwdPortInFltrProtId, nvmipxNetFltrId=nvmipxNetFltrId, nvmipxNetFltrSapType=nvmipxNetFltrSapType, nvmIpRipOutFltrTable=nvmIpRipOutFltrTable, mcmIpRipInFltrAction=mcmIpRipInFltrAction, nvmIpFwdPortInFltrEntry=nvmIpFwdPortInFltrEntry, mcmIpFwdPortOutFltrSrcDst=mcmIpFwdPortOutFltrSrcDst, nvmIpxNetFltrTable=nvmIpxNetFltrTable, mcmIpSysFltrDstAddr=mcmIpSysFltrDstAddr, mcmipxNetFltrDir=mcmipxNetFltrDir, nvmipxMacFltrSrcAddress=nvmipxMacFltrSrcAddress, nvmipxNetFltrSysInstance=nvmipxNetFltrSysInstance, mcmIpRipGwyFltrAction=mcmIpRipGwyFltrAction, nvmIpOspfOutFltrAction=nvmIpOspfOutFltrAction, nvmipxNetFltrNetMask=nvmipxNetFltrNetMask, mcmIpRipGwyFltrMask=mcmIpRipGwyFltrMask, nvmIpSysFltrDstAddr=nvmIpSysFltrDstAddr, mcmIpFwdPortInFltrProtId=mcmIpFwdPortInFltrProtId, mcmIpRipGwyFltrTable=mcmIpRipGwyFltrTable, nvmIpRipInFltrTable=nvmIpRipInFltrTable, nvmIpRipGwyFltrEntry=nvmIpRipGwyFltrEntry, mcmIpRipInFltrEntry=mcmIpRipInFltrEntry, nvmIpxNetFltrPort=nvmIpxNetFltrPort, nvmIpFwdPortInFltrPortId=nvmIpFwdPortInFltrPortId, nvmIpFwdPortOutFltrProtId=nvmIpFwdPortOutFltrProtId, nvmipxNetFltrSapMask=nvmipxNetFltrSapMask, nvmipxMacFltrDstAddress=nvmipxMacFltrDstAddress, nvmipxMacFltrDir=nvmipxMacFltrDir, mcmIpxNetFltrSysInstance=mcmIpxNetFltrSysInstance, nvmIpRipOutFltrEntry=nvmIpRipOutFltrEntry, nvmIpOspfOutFltrEntry=nvmIpOspfOutFltrEntry, nvmIpFwdPortInFltrPortNo=nvmIpFwdPortInFltrPortNo, nvmipxNetFltrEntry=nvmipxNetFltrEntry, nvmIpFwdPortInFltrSrcDst=nvmIpFwdPortInFltrSrcDst, mcmIpxNetFltrEntry=mcmIpxNetFltrEntry, nvmIpSysFltrAction=nvmIpSysFltrAction, mcmIpFwdPortOutFltrEntry=mcmIpFwdPortOutFltrEntry, mcmIpxSapFltrTable=mcmIpxSapFltrTable, nvmipxMacFltrSrcMask=nvmipxMacFltrSrcMask, nvmIpxRipFltrSysInstance=nvmIpxRipFltrSysInstance, mcmIpRipGwyFltrAddr=mcmIpRipGwyFltrAddr, nvmIpFwdPortInFltrAddr=nvmIpFwdPortInFltrAddr, mcmIpxRipFltrPort=mcmIpxRipFltrPort, mcmIpxSapFltrPort=mcmIpxSapFltrPort, nvmIpRipInFltrAddr=nvmIpRipInFltrAddr, mcmipxNetFltrNetMask=mcmipxNetFltrNetMask, nvmIpxRipFltrNetNumber=nvmIpxRipFltrNetNumber, mcmipxMacFltrStatus=mcmipxMacFltrStatus, nvmIpxRipFltrTable=nvmIpxRipFltrTable, nvmIpxSapFltrSysInstance=nvmIpxSapFltrSysInstance, nvmIpSysFltrProtId=nvmIpSysFltrProtId, nvmipxMacFltrEntry=nvmipxMacFltrEntry, nvmIpSysFltrTable=nvmIpSysFltrTable, mcmIpFwdPortInFltrAction=mcmIpFwdPortInFltrAction, mcmIpOspfOutFltrAddr=mcmIpOspfOutFltrAddr, nvmipxSysNetFilter=nvmipxSysNetFilter, nvmIpFwdPortOutFltrPortNo=nvmIpFwdPortOutFltrPortNo, mcmipxMacFltrDir=mcmipxMacFltrDir, nvmipxMacFltrTable=nvmipxMacFltrTable, mcmIpxRipFltrEntry=mcmIpxRipFltrEntry, mcmipxSysSapFilter=mcmipxSysSapFilter, nvmIpFwdPortOutFltrMask=nvmIpFwdPortOutFltrMask, nvmIpFwdPortOutFltrSrcDst=nvmIpFwdPortOutFltrSrcDst, mcmipxNetFltrStatus=mcmipxNetFltrStatus, nvmipxNetFltrDir=nvmipxNetFltrDir, nvmIpxNetFltrSysInstance=nvmIpxNetFltrSysInstance, mcmipxMacFltrSrcAddress=mcmipxMacFltrSrcAddress, mcmipxNetFltrId=mcmipxNetFltrId, mcmIpSysFltrTable=mcmIpSysFltrTable, nvmIpRipOutFltrAction=nvmIpRipOutFltrAction, mcmIpFwdPortOutFltrPortId=mcmIpFwdPortOutFltrPortId, mcmIpxNetFltrPort=mcmIpxNetFltrPort, nvmipxMacFltrSysInstance=nvmipxMacFltrSysInstance, nvmIpSysFltrPortId=nvmIpSysFltrPortId, mcmIpSysFltrPortId=mcmIpSysFltrPortId, nvmipxNetFltrTable=nvmipxNetFltrTable, mcmIpFwdPortInFltrPortNo=mcmIpFwdPortInFltrPortNo, nvmIpRipGwyFltrAddr=nvmIpRipGwyFltrAddr, nvmIpRipInFltrMask=nvmIpRipInFltrMask, nvmIpRipOutFltrMask=nvmIpRipOutFltrMask, mcmipxMacFltrPort=mcmipxMacFltrPort, nvmIpSysFltrEntry=nvmIpSysFltrEntry, nvmIpSysFltrSrcMask=nvmIpSysFltrSrcMask, NetNumber=NetNumber, mcmIpFwdPortOutFltrTable=mcmIpFwdPortOutFltrTable, nvmipxMacFltrId=nvmipxMacFltrId, nvmIpRipGwyFltrMask=nvmIpRipGwyFltrMask, mcmIpxRipFltrSysInstance=mcmIpxRipFltrSysInstance, mcmIpFwdPortOutFltrMask=mcmIpFwdPortOutFltrMask, mcmIpRipInFltrAddr=mcmIpRipInFltrAddr, nvmIpRipOutFltrAddr=nvmIpRipOutFltrAddr, mcmIpFwdPortOutFltrAddr=mcmIpFwdPortOutFltrAddr, mcmIpxSapFltrSapType=mcmIpxSapFltrSapType, nvmIpxRipFltrPort=nvmIpxRipFltrPort, mcmIpSysFltrProtId=mcmIpSysFltrProtId, nvmIpRipGwyFltrAction=nvmIpRipGwyFltrAction, mcmipxNetFltrPort=mcmipxNetFltrPort, mcmIpxSapFltrEntry=mcmIpxSapFltrEntry, mcmIpRipOutFltrMask=mcmIpRipOutFltrMask, nvmIpFwdPortOutFltrEntry=nvmIpFwdPortOutFltrEntry, mcmipxSysFilterGroup=mcmipxSysFilterGroup, nvmipxSysRipFilter=nvmipxSysRipFilter, nvmIpRipGwyFltrTable=nvmIpRipGwyFltrTable, mcmIpxNetFltrNetNumber=mcmIpxNetFltrNetNumber, nvmIpxNetFltrEntry=nvmIpxNetFltrEntry, nvmipxNetFltrStatus=nvmipxNetFltrStatus, mcmIpRipOutFltrAddr=mcmIpRipOutFltrAddr, nvmIpSysFltrDstMask=nvmIpSysFltrDstMask, mcmfilter=mcmfilter, nvmipxSysFilterGroup=nvmipxSysFilterGroup, mcmIpFwdPortOutFltrPortNo=mcmIpFwdPortOutFltrPortNo, nvmIpxRipFltrEntry=nvmIpxRipFltrEntry, nvmIpxSapFltrRowStatus=nvmIpxSapFltrRowStatus, mcmIpRipGwyFltrEntry=mcmIpRipGwyFltrEntry)
