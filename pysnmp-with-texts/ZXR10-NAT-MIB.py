#
# PySNMP MIB module ZXR10-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXR10-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, ObjectIdentity, IpAddress, TimeTicks, iso, Counter64, experimental, MibIdentifier, NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, ModuleIdentity, Counter32, mgmt, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "IpAddress", "TimeTicks", "iso", "Counter64", "experimental", "MibIdentifier", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter32", "mgmt", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zxr10protocol, = mibBuilder.importSymbols("ZXR10-PROTOCOL-MIB", "zxr10protocol")
class Zxr10NatType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 6, 17))
    namedValues = NamedValues(("snat", 0), ("icmp", 1), ("ip", 4), ("tcp", 6), ("udp", 17))

zxr10nat = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3))
class DisplayString(OctetString):
    pass

zxr10natConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1))
zxr10natStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2))
zxr10natStaticMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3))
zxr10natConfEnable = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfEnable.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfEnable.setDescription('NAT enable switch')
zxr10natInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 2), )
if mibBuilder.loadTexts: zxr10natInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natInterfaceTable.setDescription('Configure nat interface')
zxr10natInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 2, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natInterfaceIndex"))
if mibBuilder.loadTexts: zxr10natInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natInterfaceEntry.setDescription('Nat interface entry')
zxr10natInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: zxr10natInterfaceIndex.setDescription('Interface index')
zxr10natInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natInterfaceName.setStatus('current')
if mibBuilder.loadTexts: zxr10natInterfaceName.setDescription('Interface name')
zxr10natInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: zxr10natInterfaceStorageType.setDescription('NAT interface type:<1-INSIDE,2-OUTSIDE>')
zxr10natConfigTimeout = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3))
zxr10natConfTimeoutClassTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 1), )
if mibBuilder.loadTexts: zxr10natConfTimeoutClassTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutClassTable.setDescription('Configure timeout class')
zxr10natConfTimeoutClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 1, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natConfTimeoutClassIndex"))
if mibBuilder.loadTexts: zxr10natConfTimeoutClassEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutClassEntry.setDescription('Configure timeout class entry')
zxr10natConfTimeoutClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfTimeoutClassIndex.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutClassIndex.setDescription('Timeout class:a,b,c,d,e')
zxr10natConfTimeoutClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfTimeoutClassValue.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutClassValue.setDescription('Timeout value:<20-2147483647>')
zxr10natConfTimeoutProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 5), )
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocolTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocolTable.setDescription('Configure timeout class of protocol')
zxr10natConfTimeoutProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 5, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natConfTimeoutProtocolIndex"))
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocolEntry.setDescription('Configure timeout protocol entry')
zxr10natConfTimeoutProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocolIndex.setDescription('Timeout index of protocol')
zxr10natConfTimeoutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 5, 1, 2), Zxr10NatType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocol.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutProtocol.setDescription('Protocol<1-ICMP,6-TCP,17-UDP>')
zxr10natConfTimeoutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfTimeoutPort.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutPort.setDescription('Port:<1-65534>')
zxr10natConfTimeoutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfTimeoutClass.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfTimeoutClass.setDescription('Timeout class:a~e')
zxr10natConfigMaximal = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 4))
zxr10natConfMaximalDefault = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfMaximalDefault.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfMaximalDefault.setDescription('Default maximal number of entries')
zxr10natConfMaximalTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 4, 2), )
if mibBuilder.loadTexts: zxr10natConfMaximalTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfMaximalTable.setDescription('Configure maximal number of entries')
zxr10natConfMaximalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 4, 2, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natConfMaximalAclNo"))
if mibBuilder.loadTexts: zxr10natConfMaximalEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfMaximalEntry.setDescription('Configure maximal entry')
zxr10natConfMaximalAclNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfMaximalAclNo.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfMaximalAclNo.setDescription('ACL rule number')
zxr10natConfMaximalVlaue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfMaximalVlaue.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfMaximalVlaue.setDescription('Configure maximal number of entries')
zxr10natConfStaticAddrMapTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5), )
if mibBuilder.loadTexts: zxr10natConfStaticAddrMapTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticAddrMapTable.setDescription('Configure static rule')
zxr10natConfStaticAddrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natConfStaticRuleIndex"))
if mibBuilder.loadTexts: zxr10natConfStaticAddrMapEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticAddrMapEntry.setDescription('Configure static address mapping entry')
zxr10natConfStaticRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfStaticRuleIndex.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticRuleIndex.setDescription('Global index of rule')
zxr10natConfStaticLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfStaticLocalAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticLocalAddr.setDescription('Local ip of static rule')
zxr10natConfStaticLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfStaticLocalPort.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticLocalPort.setDescription('Local port of static rule')
zxr10natConfStaticGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfStaticGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticGlobalAddr.setDescription('Global ip of static rule')
zxr10natConfStaticGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfStaticGlobalPort.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticGlobalPort.setDescription('Global port of static rule')
zxr10natConfStaticProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 5, 1, 6), Zxr10NatType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfStaticProtoType.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfStaticProtoType.setDescription('Protocol type of static rule')
zxr10natConfDynAddrMapTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6), )
if mibBuilder.loadTexts: zxr10natConfDynAddrMapTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynAddrMapTable.setDescription('Configure dynamic rule')
zxr10natConfDynAddrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natConfDynRuleIndex"))
if mibBuilder.loadTexts: zxr10natConfDynAddrMapEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynAddrMapEntry.setDescription('Configure dynamic mapping entry')
zxr10natConfDynRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfDynRuleIndex.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynRuleIndex.setDescription('Global index of rule')
zxr10natConfDynAccessListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfDynAccessListNum.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynAccessListNum.setDescription('Acl number of dynamic rule')
zxr10natConfDynRuleOverlay = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("overlay", 1), ("nooverlay", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfDynRuleOverlay.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynRuleOverlay.setDescription('Overload or not<0-not overload,1-overload>')
zxr10natConfDynInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfDynInterfaceName.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynInterfaceName.setDescription('Interface name of dynamic rule')
zxr10natConfDynGlobalIpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfDynGlobalIpStart.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynGlobalIpStart.setDescription('First global address of dynamic rule')
zxr10natConfDynGlobalIpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natConfDynGlobalIpRange.setStatus('current')
if mibBuilder.loadTexts: zxr10natConfDynGlobalIpRange.setDescription('Global ip range of dynamic rule')
zxr10natHitStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natHitStatsTotal.setStatus('current')
if mibBuilder.loadTexts: zxr10natHitStatsTotal.setDescription('Hit times')
zxr10natHitStatsFwd = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natHitStatsFwd.setStatus('current')
if mibBuilder.loadTexts: zxr10natHitStatsFwd.setDescription('Hit times in forward')
zxr10natHitStatsProtocl = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natHitStatsProtocl.setStatus('current')
if mibBuilder.loadTexts: zxr10natHitStatsProtocl.setDescription('Hit times in protocol')
zxr10natHitStatsUEng = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natHitStatsUEng.setStatus('current')
if mibBuilder.loadTexts: zxr10natHitStatsUEng.setDescription('Hit times in uEngine')
zxr10natMissStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMissStatsTotal.setStatus('current')
if mibBuilder.loadTexts: zxr10natMissStatsTotal.setDescription('Miss times')
zxr10natMissStatsFwd = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMissStatsFwd.setStatus('current')
if mibBuilder.loadTexts: zxr10natMissStatsFwd.setDescription('Miss times in forward')
zxr10natMissStatsProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMissStatsProtocol.setStatus('current')
if mibBuilder.loadTexts: zxr10natMissStatsProtocol.setDescription('Miss times in protocol')
zxr10natMissStatsUEng = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMissStatsUEng.setStatus('current')
if mibBuilder.loadTexts: zxr10natMissStatsUEng.setDescription('Miss times in uEngine')
zxr10natTimeoutStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natTimeoutStatsTotal.setStatus('current')
if mibBuilder.loadTexts: zxr10natTimeoutStatsTotal.setDescription('Total timeout translations')
zxr10natMappingStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMappingStatsTotal.setStatus('current')
if mibBuilder.loadTexts: zxr10natMappingStatsTotal.setDescription('Total number of translations')
zxr10natMappingUsedStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMappingUsedStatsTotal.setStatus('current')
if mibBuilder.loadTexts: zxr10natMappingUsedStatsTotal.setDescription('Total number of used translations')
zxr10natMappingStatsStaticRule = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMappingStatsStaticRule.setStatus('current')
if mibBuilder.loadTexts: zxr10natMappingStatsStaticRule.setDescription('Total number of used static mappings')
zxr10natMappingStatsDynRule = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMappingStatsDynRule.setStatus('current')
if mibBuilder.loadTexts: zxr10natMappingStatsDynRule.setDescription('Total number of used dynamic mappings')
zxr10natMappingStatsMax = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natMappingStatsMax.setStatus('current')
if mibBuilder.loadTexts: zxr10natMappingStatsMax.setDescription('Maximal number of used translations')
zxr10natStaticMappingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1), )
if mibBuilder.loadTexts: zxr10natStaticMappingTable.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticMappingTable.setDescription('Translation mapping table')
zxr10natStaticMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1, 1), ).setIndexNames((0, "ZXR10-NAT-MIB", "zxr10natStaticRuleIndex"))
if mibBuilder.loadTexts: zxr10natStaticMappingEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticMappingEntry.setDescription('Static mapping')
zxr10natStaticRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natStaticRuleIndex.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticRuleIndex.setDescription('Index')
zxr10natStaticMappingLocalIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natStaticMappingLocalIpaddr.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticMappingLocalIpaddr.setDescription('Local ip of translation')
zxr10natStaticMappingLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natStaticMappingLocalPort.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticMappingLocalPort.setDescription('Local port of translation')
zxr10natStaticMappingGlobalIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natStaticMappingGlobalIpaddr.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticMappingGlobalIpaddr.setDescription('Global ip of translation')
zxr10natStaticMappingGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 101, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10natStaticMappingGlobalPort.setStatus('current')
if mibBuilder.loadTexts: zxr10natStaticMappingGlobalPort.setDescription('Global port of translation')
mibBuilder.exportSymbols("ZXR10-NAT-MIB", zxr10natInterfaceEntry=zxr10natInterfaceEntry, zxr10natStaticRuleIndex=zxr10natStaticRuleIndex, zxr10natStaticMapping=zxr10natStaticMapping, zxr10natConfDynAccessListNum=zxr10natConfDynAccessListNum, zxr10natInterfaceStorageType=zxr10natInterfaceStorageType, zxr10natStatistic=zxr10natStatistic, zxr10natStaticMappingTable=zxr10natStaticMappingTable, zxr10natConfTimeoutClassIndex=zxr10natConfTimeoutClassIndex, zxr10natConfTimeoutClassValue=zxr10natConfTimeoutClassValue, zxr10natInterfaceTable=zxr10natInterfaceTable, zxr10natConfigMaximal=zxr10natConfigMaximal, zxr10natConfStaticGlobalPort=zxr10natConfStaticGlobalPort, zxr10natConfTimeoutClassEntry=zxr10natConfTimeoutClassEntry, zxr10natConfMaximalTable=zxr10natConfMaximalTable, zxr10natConfTimeoutClassTable=zxr10natConfTimeoutClassTable, zxr10natStaticMappingGlobalPort=zxr10natStaticMappingGlobalPort, zxr10natConfStaticLocalPort=zxr10natConfStaticLocalPort, zxr10natConfTimeoutProtocol=zxr10natConfTimeoutProtocol, zxr10natConfTimeoutProtocolIndex=zxr10natConfTimeoutProtocolIndex, zxr10natConfStaticAddrMapTable=zxr10natConfStaticAddrMapTable, zxr10natTimeoutStatsTotal=zxr10natTimeoutStatsTotal, zxr10natConfTimeoutProtocolEntry=zxr10natConfTimeoutProtocolEntry, zxr10natHitStatsUEng=zxr10natHitStatsUEng, zxr10natConfDynRuleOverlay=zxr10natConfDynRuleOverlay, zxr10natConfDynInterfaceName=zxr10natConfDynInterfaceName, zxr10natConfDynAddrMapTable=zxr10natConfDynAddrMapTable, zxr10natConfMaximalEntry=zxr10natConfMaximalEntry, zxr10natConfigTimeout=zxr10natConfigTimeout, zxr10natConfMaximalVlaue=zxr10natConfMaximalVlaue, zxr10natMissStatsUEng=zxr10natMissStatsUEng, zxr10natMappingStatsMax=zxr10natMappingStatsMax, zxr10natConfStaticProtoType=zxr10natConfStaticProtoType, zxr10natMappingStatsStaticRule=zxr10natMappingStatsStaticRule, zxr10natConfTimeoutProtocolTable=zxr10natConfTimeoutProtocolTable, zxr10natConfStaticRuleIndex=zxr10natConfStaticRuleIndex, zxr10natConfStaticGlobalAddr=zxr10natConfStaticGlobalAddr, zxr10natInterfaceName=zxr10natInterfaceName, zxr10natConfDynRuleIndex=zxr10natConfDynRuleIndex, zxr10natStaticMappingGlobalIpaddr=zxr10natStaticMappingGlobalIpaddr, zxr10natConfDynAddrMapEntry=zxr10natConfDynAddrMapEntry, zxr10natHitStatsTotal=zxr10natHitStatsTotal, zxr10natMissStatsFwd=zxr10natMissStatsFwd, zxr10natStaticMappingLocalIpaddr=zxr10natStaticMappingLocalIpaddr, Zxr10NatType=Zxr10NatType, zxr10natInterfaceIndex=zxr10natInterfaceIndex, DisplayString=DisplayString, zxr10natConfig=zxr10natConfig, zxr10natConfMaximalAclNo=zxr10natConfMaximalAclNo, zxr10natMappingStatsTotal=zxr10natMappingStatsTotal, zxr10natConfDynGlobalIpRange=zxr10natConfDynGlobalIpRange, zxr10natMappingStatsDynRule=zxr10natMappingStatsDynRule, zxr10natConfDynGlobalIpStart=zxr10natConfDynGlobalIpStart, zxr10natConfTimeoutPort=zxr10natConfTimeoutPort, zxr10natMappingUsedStatsTotal=zxr10natMappingUsedStatsTotal, zxr10natConfMaximalDefault=zxr10natConfMaximalDefault, zxr10nat=zxr10nat, zxr10natConfStaticLocalAddr=zxr10natConfStaticLocalAddr, zxr10natConfEnable=zxr10natConfEnable, zxr10natConfStaticAddrMapEntry=zxr10natConfStaticAddrMapEntry, zxr10natMissStatsProtocol=zxr10natMissStatsProtocol, zxr10natHitStatsFwd=zxr10natHitStatsFwd, zxr10natMissStatsTotal=zxr10natMissStatsTotal, zxr10natStaticMappingLocalPort=zxr10natStaticMappingLocalPort, zxr10natConfTimeoutClass=zxr10natConfTimeoutClass, zxr10natStaticMappingEntry=zxr10natStaticMappingEntry, zxr10natHitStatsProtocl=zxr10natHitStatsProtocl)
