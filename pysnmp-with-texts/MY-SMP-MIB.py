#
# PySNMP MIB module MY-SMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-SMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
Community, = mibBuilder.importSymbols("MY-SNMP-AGENT-MIB", "Community")
ConfigStatus, IfIndex = mibBuilder.importSymbols("MY-TC", "ConfigStatus", "IfIndex")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, MibIdentifier, Gauge32, Bits, iso, Counter64, TimeTicks, ModuleIdentity, ObjectIdentity, Counter32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "MibIdentifier", "Gauge32", "Bits", "iso", "Counter64", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Counter32", "Integer32", "IpAddress")
MacAddress, RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
mySMPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39))
mySMPMIB.setRevisions(('2004-09-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mySMPMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: mySMPMIB.setLastUpdated('200409090000Z')
if mibBuilder.loadTexts: mySMPMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: mySMPMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: mySMPMIB.setDescription('This module defines the MIB security case requires. At present, this MIB could only be accessed by the specified SMP Server.')
mySMPMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1))
mySMPServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPServer.setStatus('current')
if mibBuilder.loadTexts: mySMPServer.setDescription('IP addresses for the SMP Server.')
mySMPServerKey = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 2), Community()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPServerKey.setStatus('current')
if mibBuilder.loadTexts: mySMPServerKey.setDescription('Keys for the SMP Server.')
mySMPEventSendSlice = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPEventSendSlice.setStatus('current')
if mibBuilder.loadTexts: mySMPEventSendSlice.setDescription('The minimum interval of sending SU security event. The variable value must be less than the one defined by mySMPHICheckInterval.')
mySMPPolicyDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyDelete.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyDelete.setDescription('This variable value: 0: No action is required; other values:Delete all policy information.')
mySMPPolicyChecksum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySMPPolicyChecksum.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyChecksum.setDescription('The checksum information set on the current SMP policy table.')
mySMPPolicyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyTimeout.setDescription('Timeout time of SMP policy.')
mySMPPolicyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 9), )
if mibBuilder.loadTexts: mySMPPolicyGroupTable.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyGroupTable.setDescription('Security policy group.')
mySMPPolicyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 9, 1), ).setIndexNames((0, "MY-SMP-MIB", "mySMPPolicyGroupIndex"))
if mibBuilder.loadTexts: mySMPPolicyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyGroupEntry.setDescription('SMP policy group.')
mySMPPolicyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySMPPolicyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyGroupIndex.setDescription('Policy group index.')
mySMPPolicyGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyGroupCount.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyGroupCount.setDescription('Policy count in the policy group.')
mySMPPolicyGroupChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyGroupChecksum.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyGroupChecksum.setDescription('The sole identification in the policy group.')
mySMPPolicyGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mySMPPolicyGroupStatus.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyGroupStatus.setDescription('The status of this conceptual row.')
mySMPPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8), )
if mibBuilder.loadTexts: mySMPPolicyTable.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyTable.setDescription('Security policy table.')
mySMPPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1), ).setIndexNames((0, "MY-SMP-MIB", "mySMPGroupIndex"), (0, "MY-SMP-MIB", "mySMPPolicyIndex"))
if mibBuilder.loadTexts: mySMPPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyEntry.setDescription('SMP policy table.')
mySMPGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySMPGroupIndex.setStatus('current')
if mibBuilder.loadTexts: mySMPGroupIndex.setDescription('The index of the policy group which the current policy is in.')
mySMPPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySMPPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyIndex.setDescription('The policy index.')
mySMPPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 3), ConfigStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyStatus.setDescription('Entry state fields. For the detailed information, pls refer to MY-TC.mib.')
mySMPPolicyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyNumber.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyNumber.setDescription('The policy sequence number.')
mySMPPolicyInstallPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 5), IfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyInstallPort.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyInstallPort.setDescription('The index of port installed the policy.')
mySMPPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hi-isolate", 1), ("isolate", 2), ("blocked", 3), ("addrBind", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyType.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyType.setDescription('The action of policy template. Hi-isolate application failure can be detected by HI only. isolate: isolation action; blocked: blocking action; addrBind: address-binding action. ')
mySMPPolicyContent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyContent.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyContent.setDescription('Content(80 bytes) of policy template.')
mySMPPolicyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyMask.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyMask.setDescription('Mask information(80 bytes) of policy template.')
mySMPPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPPolicyName.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyName.setDescription('Policy name fields.')
mySMPFrameRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7), )
if mibBuilder.loadTexts: mySMPFrameRelayTable.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayTable.setDescription('SMP message forward table.')
mySMPFrameRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7, 1), ).setIndexNames((0, "MY-SMP-MIB", "mySMPFrameRelayIndex"))
if mibBuilder.loadTexts: mySMPFrameRelayEntry.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayEntry.setDescription('SMP message forward table.')
mySMPFrameRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySMPFrameRelayIndex.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayIndex.setDescription('SMP message forward table index.')
mySMPFrameRelayContent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPFrameRelayContent.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayContent.setDescription('SMP message content with maximal 1024 bytes.')
mySMPFrameRelayLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPFrameRelayLength.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayLength.setDescription('SMP message length.')
mySMPFrameRelayDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7, 1, 4), IfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPFrameRelayDestPort.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayDestPort.setDescription('The index of destination port SMP messages are sent to.')
mySMPFrameRelayDestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 1, 7, 1, 5), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySMPFrameRelayDestVlan.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayDestVlan.setDescription('The VLAN ID of destination port SMP messages are sent to.')
mySMPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535))
mySMPSwitchIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPSwitchIP.setStatus('current')
if mibBuilder.loadTexts: mySMPSwitchIP.setDescription('IP addresses for the switch sending the Trap.')
mySMPSwitchInterfaceID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 2), IfIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPSwitchInterfaceID.setStatus('current')
if mibBuilder.loadTexts: mySMPSwitchInterfaceID.setDescription('The interface receiving the messages to be forwarded.')
mySMPSwitchInterfaceVLANID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 3), VlanId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPSwitchInterfaceVLANID.setStatus('current')
if mibBuilder.loadTexts: mySMPSwitchInterfaceVLANID.setDescription('The VLAN ID of the switch interface receiving the messages to be forwarded.')
mySMPFrameContentLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPFrameContentLength.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameContentLength.setDescription('The encapsulated message length, which can not exceed 1024.')
mySMPFrameContent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPFrameContent.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameContent.setDescription('The encapsulated message whose length can not exceed 1024.')
mySMPFrameRelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 6)).setObjects(("MY-SMP-MIB", "mySMPSwitchIP"), ("MY-SMP-MIB", "mySMPSwitchInterfaceID"), ("MY-SMP-MIB", "mySMPSwitchInterfaceVLANID"), ("MY-SMP-MIB", "mySMPFrameContentLength"), ("MY-SMP-MIB", "mySMPFrameContent"))
if mibBuilder.loadTexts: mySMPFrameRelayTrap.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayTrap.setDescription('Trap message includes: IP address for the specified received message, port receiving the message, message length and message content.')
mySMPArpAttackSubnetIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackSubnetIP.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackSubnetIP.setDescription('IP addresses for all subnets of SVI where the attack source locates.')
mySMPArpAttackSubnetIPNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackSubnetIPNum.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackSubnetIPNum.setDescription('Subnet IP address number.')
mySMPArpAttackInterfaceSlot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackInterfaceSlot.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackInterfaceSlot.setDescription('The slot number for the device connecting the attack source.')
mySMPArpAttackInterfacePort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 10), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackInterfacePort.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackInterfacePort.setDescription('The interface number for the device connecting the attack source.')
mySMPArpAttackInterfaceVlanID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 11), VlanId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackInterfaceVlanID.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackInterfaceVlanID.setDescription('The VLAN ID of VLAN where the attack source locates.')
mySMPArpAttackFrameContent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackFrameContent.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackFrameContent.setDescription('The ARP messages sent from the attack source.')
mySMPArpAttackStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 13), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackStatus.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackStatus.setDescription('Show whether the device is attacked by the attack source or not. true: attack occurred; false: attack has been removed.')
mySMPArpAttackCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("critical", 1), ("emergencies", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackCriticalStatus.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackCriticalStatus.setDescription('The severity level of device attack by attack source: critical(1), -- Slight ARP attack, infulencing normal operation of the network and advertising the SMP Server. emergencies(2) -- Severe ARP attack, leading to network crash. System blocks this attack automatically and advertise the SMP Server. ')
mySMPArpAttackMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 15), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackMac.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackMac.setDescription('MAC address for the device connecting the attack source.')
mySMPArpAttackInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySMPArpAttackInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackInterfaceIndex.setDescription('The interface index for the device connecting the attack source.')
mySMPArpAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 65535, 17)).setObjects(("MY-SMP-MIB", "mySMPArpAttackSubnetIP"), ("MY-SMP-MIB", "mySMPArpAttackSubnetIPNum"), ("MY-SMP-MIB", "mySMPArpAttackInterfaceSlot"), ("MY-SMP-MIB", "mySMPArpAttackInterfacePort"), ("MY-SMP-MIB", "mySMPArpAttackInterfaceVlanID"), ("MY-SMP-MIB", "mySMPArpAttackFrameContent"), ("MY-SMP-MIB", "mySMPArpAttackStatus"), ("MY-SMP-MIB", "mySMPArpAttackCriticalStatus"), ("MY-SMP-MIB", "mySMPArpAttackMac"), ("MY-SMP-MIB", "mySMPArpAttackInterfaceIndex"))
if mibBuilder.loadTexts: mySMPArpAttackTrap.setStatus('current')
if mibBuilder.loadTexts: mySMPArpAttackTrap.setDescription('Trap message includes: IP addresses for all subnets of SVI where the attack source locates, Subnet IP address number, Slot number the attack source attacks, Port number the attack source attacks, VLAN ID of the VLAN the attack source belongs to, ARP message(64 bytes), Advertisement of attack occurrance and removal, MAC address for the device connecting the attack source, Interface index for the device connecting the attack source.')
mySMPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3))
mySMPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 1))
mySMPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 2))
myDeviceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 1, 1)).setObjects(("MY-SMP-MIB", "mySMPServerMibGroup"), ("MY-SMP-MIB", "mySMPClientMibGroup"), ("MY-SMP-MIB", "mySMPPolicyMibGroup"), ("MY-SMP-MIB", "mySMPFrameRelayMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myDeviceMIBCompliance = myDeviceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myDeviceMIBCompliance.setDescription('The compliance statement for entities which implement the My SMP MIB')
mySMPServerMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 2, 1)).setObjects(("MY-SMP-MIB", "mySMPServer"), ("MY-SMP-MIB", "mySMPServerKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySMPServerMibGroup = mySMPServerMibGroup.setStatus('current')
if mibBuilder.loadTexts: mySMPServerMibGroup.setDescription('Collection of SMP Server information.')
mySMPClientMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 2, 2)).setObjects(("MY-SMP-MIB", "mySMPEventSendSlice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySMPClientMibGroup = mySMPClientMibGroup.setStatus('current')
if mibBuilder.loadTexts: mySMPClientMibGroup.setDescription('Collection of restricted information of SMP Client management.')
mySMPPolicyMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 2, 3)).setObjects(("MY-SMP-MIB", "mySMPPolicyDelete"), ("MY-SMP-MIB", "mySMPPolicyChecksum"), ("MY-SMP-MIB", "mySMPPolicyIndex"), ("MY-SMP-MIB", "mySMPPolicyStatus"), ("MY-SMP-MIB", "mySMPPolicyInstallPort"), ("MY-SMP-MIB", "mySMPPolicyType"), ("MY-SMP-MIB", "mySMPPolicyContent"), ("MY-SMP-MIB", "mySMPPolicyMask"), ("MY-SMP-MIB", "mySMPPolicyName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySMPPolicyMibGroup = mySMPPolicyMibGroup.setStatus('current')
if mibBuilder.loadTexts: mySMPPolicyMibGroup.setDescription('Policy information collection.')
mySMPFrameRelayMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 39, 3, 2, 4)).setObjects(("MY-SMP-MIB", "mySMPFrameRelayIndex"), ("MY-SMP-MIB", "mySMPFrameRelayContent"), ("MY-SMP-MIB", "mySMPFrameRelayLength"), ("MY-SMP-MIB", "mySMPFrameRelayDestPort"), ("MY-SMP-MIB", "mySMPFrameRelayDestVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySMPFrameRelayMibGroup = mySMPFrameRelayMibGroup.setStatus('current')
if mibBuilder.loadTexts: mySMPFrameRelayMibGroup.setDescription('Information collection of message forward table.')
mibBuilder.exportSymbols("MY-SMP-MIB", mySMPServerKey=mySMPServerKey, PYSNMP_MODULE_ID=mySMPMIB, mySMPFrameRelayEntry=mySMPFrameRelayEntry, mySMPFrameRelayContent=mySMPFrameRelayContent, mySMPArpAttackInterfaceIndex=mySMPArpAttackInterfaceIndex, mySMPArpAttackInterfaceSlot=mySMPArpAttackInterfaceSlot, mySMPPolicyGroupStatus=mySMPPolicyGroupStatus, mySMPArpAttackTrap=mySMPArpAttackTrap, mySMPPolicyNumber=mySMPPolicyNumber, mySMPMIBGroups=mySMPMIBGroups, mySMPEventSendSlice=mySMPEventSendSlice, mySMPPolicyGroupChecksum=mySMPPolicyGroupChecksum, mySMPPolicyIndex=mySMPPolicyIndex, mySMPSwitchInterfaceID=mySMPSwitchInterfaceID, mySMPFrameContent=mySMPFrameContent, mySMPMIBConformance=mySMPMIBConformance, mySMPPolicyName=mySMPPolicyName, mySMPMIB=mySMPMIB, mySMPServer=mySMPServer, mySMPSwitchIP=mySMPSwitchIP, mySMPSwitchInterfaceVLANID=mySMPSwitchInterfaceVLANID, mySMPPolicyGroupCount=mySMPPolicyGroupCount, mySMPPolicyGroupIndex=mySMPPolicyGroupIndex, mySMPFrameRelayTable=mySMPFrameRelayTable, mySMPFrameRelayDestVlan=mySMPFrameRelayDestVlan, mySMPArpAttackSubnetIPNum=mySMPArpAttackSubnetIPNum, mySMPArpAttackSubnetIP=mySMPArpAttackSubnetIP, mySMPMIBCompliances=mySMPMIBCompliances, mySMPArpAttackFrameContent=mySMPArpAttackFrameContent, mySMPFrameRelayMibGroup=mySMPFrameRelayMibGroup, mySMPArpAttackInterfaceVlanID=mySMPArpAttackInterfaceVlanID, mySMPPolicyDelete=mySMPPolicyDelete, mySMPPolicyType=mySMPPolicyType, mySMPFrameRelayIndex=mySMPFrameRelayIndex, mySMPMIBObjects=mySMPMIBObjects, mySMPFrameRelayDestPort=mySMPFrameRelayDestPort, mySMPPolicyInstallPort=mySMPPolicyInstallPort, myDeviceMIBCompliance=myDeviceMIBCompliance, mySMPPolicyChecksum=mySMPPolicyChecksum, mySMPServerMibGroup=mySMPServerMibGroup, mySMPTraps=mySMPTraps, mySMPPolicyTable=mySMPPolicyTable, mySMPArpAttackInterfacePort=mySMPArpAttackInterfacePort, mySMPPolicyMibGroup=mySMPPolicyMibGroup, mySMPPolicyContent=mySMPPolicyContent, mySMPFrameRelayLength=mySMPFrameRelayLength, mySMPPolicyGroupEntry=mySMPPolicyGroupEntry, mySMPPolicyTimeout=mySMPPolicyTimeout, mySMPArpAttackCriticalStatus=mySMPArpAttackCriticalStatus, mySMPPolicyGroupTable=mySMPPolicyGroupTable, mySMPFrameContentLength=mySMPFrameContentLength, mySMPClientMibGroup=mySMPClientMibGroup, mySMPArpAttackStatus=mySMPArpAttackStatus, mySMPPolicyStatus=mySMPPolicyStatus, mySMPArpAttackMac=mySMPArpAttackMac, mySMPPolicyMask=mySMPPolicyMask, mySMPFrameRelayTrap=mySMPFrameRelayTrap, mySMPPolicyEntry=mySMPPolicyEntry, mySMPGroupIndex=mySMPGroupIndex)
