#
# PySNMP MIB module NV6000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NV6000-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, Gauge32, Counter64, iso, ObjectIdentity, Bits, TimeTicks, IpAddress, ModuleIdentity, enterprises, MibIdentifier, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Gauge32", "Counter64", "iso", "ObjectIdentity", "Bits", "TimeTicks", "IpAddress", "ModuleIdentity", "enterprises", "MibIdentifier", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
netView6000SubAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 4))
nv6saTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 4, 2))
nv6saIcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 4, 3))
nv6saFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 4, 4))
nv6saComputerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 4, 5))
nv6saTrapNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saTrapNum.setStatus('optional')
if mibBuilder.loadTexts: nv6saTrapNum.setDescription('Number of IBM enterprise specific traps generated by this node.')
nv6saTrapThrottleCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saTrapThrottleCount.setStatus('optional')
if mibBuilder.loadTexts: nv6saTrapThrottleCount.setDescription('Number of traps throttled since last trap.')
nv6saTrapThrottleId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saTrapThrottleId.setStatus('optional')
if mibBuilder.loadTexts: nv6saTrapThrottleId.setDescription('Trap ID of throttled traps. All throttled traps counted by nv6saTrapThrottleCount have this ID.')
nv6saTrapThrottleTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saTrapThrottleTime.setStatus('optional')
if mibBuilder.loadTexts: nv6saTrapThrottleTime.setDescription('Number of seconds which must separate consecutive traps with identical ID and resource name in order to not throttle them. If the value of this object is 0, then trap throttling is inactive.')
nv6saIcmpEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saIcmpEchoReq.setStatus('mandatory')
if mibBuilder.loadTexts: nv6saIcmpEchoReq.setDescription('The number of milliseconds it takes for an icmp echo request to respond. nv6saIcmpEchoReq is -1 if there is an internal error, -2 if the echo request timed out, -3 if the echo reply is not the correct reply, -4 if the packet size is too large, and -5 if the timeout is invalid. To request the icmp response time for ip address a.b.c.d with a timeout of e and a packet size of f, send a GET request for nv6saIcmpEchoReq.f.e.a.b.c.d. For example, suppose one wanted to find out the number of milliseconds it took to ping 15.2.112.113, with a timeout of 8, and packet size of 75. Accordingly, GET of nv6saIcmpEchoReq.75.8.15.2.112.113 would return the number of milliseconds.')
nv6saFileSystemMounted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saFileSystemMounted.setStatus('optional')
if mibBuilder.loadTexts: nv6saFileSystemMounted.setDescription('The number of file systems mounted.')
nv6saComputerSystemLoad = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 4, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nv6saComputerSystemLoad.setStatus('mandatory')
if mibBuilder.loadTexts: nv6saComputerSystemLoad.setDescription('The cpu load as a percentage i.e. 25% is 2500.')
mibBuilder.exportSymbols("NV6000-MIB", nv6saTrapThrottleId=nv6saTrapThrottleId, nv6saComputerSystem=nv6saComputerSystem, ibm=ibm, nv6saIcmp=nv6saIcmp, nv6saTrap=nv6saTrap, nv6saFileSystem=nv6saFileSystem, nv6saTrapNum=nv6saTrapNum, nv6saTrapThrottleCount=nv6saTrapThrottleCount, nv6saTrapThrottleTime=nv6saTrapThrottleTime, nv6saComputerSystemLoad=nv6saComputerSystemLoad, netView6000SubAgent=netView6000SubAgent, nv6saIcmpEchoReq=nv6saIcmpEchoReq, ibmProd=ibmProd, nv6saFileSystemMounted=nv6saFileSystemMounted)
