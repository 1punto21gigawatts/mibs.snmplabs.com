#
# PySNMP MIB module CXGwMux-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXGwMux-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
Alias, cxGwMux = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxGwMux")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, ModuleIdentity, IpAddress, MibIdentifier, iso, Counter32, ObjectIdentity, Counter64, TimeTicks, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "ModuleIdentity", "IpAddress", "MibIdentifier", "iso", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "Unsigned32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

gmfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1))
gmfMuxInterPassPeriodInMs = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfMuxInterPassPeriodInMs.setStatus('mandatory')
if mibBuilder.loadTexts: gmfMuxInterPassPeriodInMs.setDescription('Determines the minimum period in milliseconds between the muxing of queued frames. Range of Values: 1-500 Default Value: 10 Configuration Changed: operative ')
gmfVoiceOverDataPriorityFactor = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfVoiceOverDataPriorityFactor.setStatus('mandatory')
if mibBuilder.loadTexts: gmfVoiceOverDataPriorityFactor.setDescription('Determines the maximum number of compressed voice-type frames that can be muxed in sequence before a compressed data-type frame must be muxed. Range of Values: 1 - 1,000 Default Value: 1,000 Configuration Changed: operative ')
gmfStatSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfStatSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: gmfStatSamplingPeriod.setDescription('Determines the maximum duration in seconds for statistical sampling. Resetting this sampling window to a different value zeroes the objects gmfLinkUtilizationTx, gmfLinkUtilizationRx and gmfLinkErrorRate to begin a fresh sample. Range of Values: 0 - 3,600 Default Value: 3,600 Configuration Changed: operative ')
gmfNoOfLinkSupported = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfNoOfLinkSupported.setStatus('mandatory')
if mibBuilder.loadTexts: gmfNoOfLinkSupported.setDescription("Determines the number of virtual circuits that the GMF software layer currently supports for compressed voice/data traffic. If '0', voice/data traffic is disabled. If '1', then that one voice/data link will be numbered Link Number 1. If '5', then voice/data links one through five will be numbered Link Number 1, Link Number 2, Link Number 3, Link Number 4 and Link Number 5, respectively. 'gmfLink' uses the numbers assigned to these virtual circuits. Range of Values: 0 - 1,024 Default Value: 0 Configuration Changed: administrative ")
gmfNoOfEntryPerFiFo = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 10000)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfNoOfEntryPerFiFo.setStatus('mandatory')
if mibBuilder.loadTexts: gmfNoOfEntryPerFiFo.setDescription('Determines the maximum number of voice/data entries that the queueing controller (FIFO) in system memory can handle. Range of Values: 32 - 10,000 Default Value: 256 Configuration Changed: administrative ')
gmfToFrCouplingLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfToFrCouplingLevel.setStatus('mandatory')
if mibBuilder.loadTexts: gmfToFrCouplingLevel.setDescription('Not currently used.')
gmfOutputFlowControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfOutputFlowControlFactor.setStatus('mandatory')
if mibBuilder.loadTexts: gmfOutputFlowControlFactor.setDescription('Determines the extent to which the GMF software layer slows down compressed data (but not compressed voice) traffic from a Data Compression module (if present) after being notified of congestion by the Frame Relay software layer. Range of Values: 1 - 10 (10 = slowest) Default Value: 1 Configuration Changed: operative ')
gmfState = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dead", 1), ("gmf-task-conf", 2), ("general-conf", 3), ("sap-conf", 4), ("route-conf", 5), ("init-gmf-completed", 6), ("init-appl-completed", 7), ("mci-only", 8), ("reg-to-iam", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfState.setStatus('mandatory')
if mibBuilder.loadTexts: gmfState.setDescription('Indicates the state of the GMF software layer at initialization. Report abnormal value to Memotec Service Department. Options: dead (1): CX900/CX1000 abnormal gmf-task-conf (2): CX900/CX1000 abnormal general-conf (3): CX900/CX1000 abnormal sap-conf (4): CX900/CX1000 abnormal route-conf (5): CX900/CX1000 abnormal init-gmf-completed (6): CX900/CX1000 abnormal init-appl-completed (7): CX900 normal/CX1000 abnormal mci-only (8): CX900 abnormal/CX1000 CCM only reg-to-iam (9): CX900 abnormal/CX1000 normal Default Value: none')
gmfCntInfoMsgRelFromBus = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromBus.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromBus.setDescription('Indicates the number of information messages (including Management Console Interface traffic) received from the Token Bus software layer. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntInfoMsgRelFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromWan.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromWan.setDescription('Indicates the number of compressed voice/data messages received from the Frame Relay software layer. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntTxAckToWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntTxAckToWan.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntTxAckToWan.setDescription('Indicates the number of ACKs sent to the Frame Relay software layer. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntUnexpLinkNoFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntUnexpLinkNoFromWan.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntUnexpLinkNoFromWan.setDescription('Indicates the number of unexpected DLCIs in message headers received from the Frame Relay software layer. Range of Values: 0-4, 294, 967, 295 Default Value: none')
gmfCntFrmTooShortFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntFrmTooShortFromWan.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntFrmTooShortFromWan.setDescription('Indicates the number of short frames received from the Frame Relay software layer and then discarded. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntFrmTooLongFromWan = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntFrmTooLongFromWan.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntFrmTooLongFromWan.setDescription('Indicates the number of long frames received from the Frame Relay software layer and then discarded. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfLongestTimeToMux = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLongestTimeToMux.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLongestTimeToMux.setDescription('Indicates the duration in milliseconds for the longest mux pass. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntSilentConnections = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSilentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntSilentConnections.setDescription('Indicates the number of connections with the Voice Module (CX 900 only) or with a local AC 600/MC 600/HC 600 (CX 1000 only) that have been dropped by the GMF software layer due to inactivity. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntMuxPassTimeExceeded = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntMuxPassTimeExceeded.setStatus('obsolete')
if mibBuilder.loadTexts: gmfCntMuxPassTimeExceeded.setDescription('Not currently used.')
gmfMciCurrentConnection = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfMciCurrentConnection.setStatus('obsolete')
if mibBuilder.loadTexts: gmfMciCurrentConnection.setDescription('Not currently used.')
gmfCntInfoMsgRelFromVce = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromVce.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntInfoMsgRelFromVce.setDescription('Indicates the number of information messages received from the Voice module (if present). Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntGlobalFlowCtlCond = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntGlobalFlowCtlCond.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntGlobalFlowCtlCond.setDescription("Indicates the number of times that voice/data entries nearly exceeded what the queuing controller (FIFO) in system memory could handle as defined in 'gmfNoOfEntryPerFifo'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfNoOfVoicePacketQueued = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfNoOfVoicePacketQueued.setStatus('mandatory')
if mibBuilder.loadTexts: gmfNoOfVoicePacketQueued.setDescription('Determines the maximum number of voice packets that can be buffered before being muxed. Range of Values: 0-8 Default Value: 4 Configuration Changed: operative ')
gmfControlStats = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gmfControlStats.setStatus('mandatory')
if mibBuilder.loadTexts: gmfControlStats.setDescription('Clears GMF statistics not related to sampling period. Options: clearStats (1): clear statistics Default Value: none Configuration Changed: operative ')
gmfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2), )
if mibBuilder.loadTexts: gmfRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: gmfRouteTable.setDescription('GMF routing table. The table maintains a row per slot source (i.e. 16 possible rows for the CX 1000 chassis) and GMF link number. This table is has no meaning for voice stations that use the voice switching option.')
gmfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1), ).setIndexNames((0, "CXGwMux-MIB", "gmfOrigin"), (0, "CXGwMux-MIB", "gmfLink"))
if mibBuilder.loadTexts: gmfRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gmfRouteEntry.setDescription('Each row associates a slot destination number for each possible route number with a specific <source slot number>.<GMF link number to use> combination.')
gmfOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: gmfOrigin.setDescription('Indicates the slot in the chassis occupied by a CPU card sending compressed voice/data packets. Range of Values: 1-16 Default Value: none Configuration Changed: administrative ')
gmfLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLink.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLink.setDescription("Indicates a valid route number established in 'gmfNoOfLinkSupported' that is used by the Voice/Data Compression module to send compressed voice/data packets to the Frame Relay software layer. Range of Values: 1-48 Default Value: none Configuration Changed: administrative ")
gmfDest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfDest.setStatus('mandatory')
if mibBuilder.loadTexts: gmfDest.setDescription('Determines the slot in an equivalent chassis across the network occupied by a CPU card receiving compressed voice/data packets. Range of Values: 1-16 Default Value: undefined Configuration Changed: operative ')
gmfRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfRouteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gmfRouteRowStatus.setDescription('Determines whether this slot/route combination is to be deleted from the GMF software layer. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: none Configuration Changed: administrative ')
gmfLinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3), )
if mibBuilder.loadTexts: gmfLinkStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkStatTable.setDescription('GMF links statistics table. The table maintains a row per link.')
gmfLinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1), ).setIndexNames((0, "CXGwMux-MIB", "gmfLinkIndex"))
if mibBuilder.loadTexts: gmfLinkStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkStatEntry.setDescription('Each row contains the state variables and general counters associated with a particular link.')
gmfLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkIndex.setDescription('Indicates the row containing objects for monitoring the virtual circuit. Range of Values: 1 - 48 Default Value: none')
gmfLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkStatus.setDescription("Indicates the virtual circuit's current state. Options: down (1): circuit is down init (2): circuit is initializing up (3): circuit is up Default Value: none")
gmfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bound-to-FR", 1), ("routed-to-IAM", 2), ("in-loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkType.setDescription('Indicates routing of virtual circuit from GMF software layer. Options: bound-to-FR (1): direct to Frame Relay module routed-to-IAM (2): direct to Inter-Application module in-loopback (3): looped back to Token Bus module or Voice module (if present) Default Value: none')
gmfCntDataFrmMx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntDataFrmMx.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntDataFrmMx.setDescription("Indicates the number of data frames that have been muxed since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntDataFrmDmx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntDataFrmDmx.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntDataFrmDmx.setDescription("Indicates the number of data frames that have been demuxed since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntVoiceFrmMx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceFrmMx.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntVoiceFrmMx.setDescription("Indicates the number of voice frames that have been muxed since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntVoiceFrmDmx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceFrmDmx.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntVoiceFrmDmx.setDescription("Indicates the number of compressed voice frames that have been demuxed since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntLinkDown.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntLinkDown.setDescription("Indicates the number of notifications received from the Frame Relay software layer that the PVC has been down since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfLinkUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkUtilizationTx.setDescription('Indicates the transfer rate in bits per second of data moving from the local Voice/Data Compression module to the Frame Relay module within the last sampling period. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfLinkUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkUtilizationRx.setDescription('Indicates the transfer rate in bits per second of data moving from the Frame Relay module to the local Voice/Data Compression module within the last sampling period. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfLinkErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfLinkErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: gmfLinkErrorRate.setDescription('Indicates the number of sequence errors occurring within the last sampling period on the virtual circuit between the GMF and the Frame Relay software layers. Range of Values: 0 - 4, 294, 967, 295 Default Value: none')
gmfCntInFlowCtrlMuxSide = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntInFlowCtrlMuxSide.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntInFlowCtrlMuxSide.setDescription("Indicates the number of times the GMF software layer has notified the Voice/Data Compression module to slow its traffic. This value is zeroed when 'gmfControlStats' is set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntOutFlowCtrlWanSide = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntOutFlowCtrlWanSide.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntOutFlowCtrlWanSide.setDescription("Indicates the number of times the GMF software layer has slowed its muxing of data traffic due to messages received from the Frame Relay software layer with the BECN bit set. This value is zeroed when 'gmfControlStats' is set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntSeqErrorFromMux = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSeqErrorFromMux.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntSeqErrorFromMux.setDescription("Indicates the number of times the GMF software layer detected sequence errors in the data stream coming from the Voice/Data Compression module since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntSeqErrorFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSeqErrorFromWan.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntSeqErrorFromWan.setDescription("Indicates the number of times the GMF software layer detected sequence errors in the data stream coming from the Frame Relay software layer since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntSilentLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSilentLink.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntSilentLink.setDescription("Indicates whether the GMF software layer detected a silence on the virtual circuit between the GMF and Frame Relay software layer since the last power up or since 'gmfControlStats' was set to 'clearStats'. Options: false: silence not detected true: silence detected Default Value: false")
gmfCntSeqErrorForced = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntSeqErrorForced.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntSeqErrorForced.setDescription("Indicates the number of times the GMF software layer forced a sequence error in a message to the Frame Relay software layer since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntUnexpLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntUnexpLoopBack.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntUnexpLoopBack.setDescription('Not currently used.')
gmfCntRemoteRestarted = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntRemoteRestarted.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntRemoteRestarted.setDescription('Not currently used.')
gmfCntVoiceMuxInterrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceMuxInterrupted.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntVoiceMuxInterrupted.setDescription("Indicates the number of times the GMF software layer stopped muxing current voice traffic to allow for muxing of data traffic in accordance with the 'gmfVoiceOverDataPriorityFactor' since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntDataQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntDataQueueFull.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntDataQueueFull.setDescription("Indicates the number of times that data entries exceeded the capacity of the queueing controller (FIFO) in system memory since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntVoiceQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntVoiceQueueFull.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntVoiceQueueFull.setDescription("Indicates the number of times that voice entries exceeded the capacity of the queueing controller (FIFO) in system memory since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntUnexpSliceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntUnexpSliceType.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntUnexpSliceType.setDescription("Indicates the number of times the GMF software layer detected a message of an unexpected type from a Voice/Data Compression module since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntRouteChange = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntRouteChange.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntRouteChange.setDescription("Indicates the number of times an active routing entry using this virtual circuit has been killed through on-the-fly route changes with 'gmfRouteEntry' since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfCntTooManyCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntTooManyCodes.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntTooManyCodes.setDescription("Indicates the number of times the GMF software layer received a compressed voice/data packet containing too many codes from the Voice/Data Compression module since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294,967, 295 Default Value: none")
gmfCntPosValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntPosValidation.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntPosValidation.setDescription("Indicates the number of positive validations the GMF software layer has sent the Voice/Data Compression module since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967,295 Default Value: none")
gmfCntNegValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfCntNegValidation.setStatus('mandatory')
if mibBuilder.loadTexts: gmfCntNegValidation.setDescription("Indicates the number of negative validations the GMF software layer has sent the Voice/Data Compression module since the last power up or since 'gmfControlStats' was set to 'clearStats'. Range of Values: 0 - 4, 294, 967, 295 Default Value: none")
gmfControlLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forceNormal", 1), ("forceLoopback", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gmfControlLink.setStatus('mandatory')
if mibBuilder.loadTexts: gmfControlLink.setDescription('Determines whether the GMF software layer puts link in normal mode or in loopback mode. Options: forceNormal (1): puts link in normal mode forceLoopback (2): puts link in loopback mode Default Value: none Configuration Changed: operative ')
gmfDataOutWindowWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfDataOutWindowWidth.setStatus('mandatory')
if mibBuilder.loadTexts: gmfDataOutWindowWidth.setDescription('Determines the width in the transmit window given to data traffic in relation to voice traffic. The lower this value, the more restricted will be the flow of data traffic. Range of Values: 1-16 Default Value: 6 Configuration Changed: operative ')
gmfDataOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfDataOutPriority.setStatus('mandatory')
if mibBuilder.loadTexts: gmfDataOutPriority.setDescription("Determines the priority given to outbound data traffic routed through the FRIM software layer. Priority for traffic routed directly through the Frame Relay software layer is controlled with 'frCircuitPriorityLevel'. Range of Values: 1 - 4 (4 is the lowest) Default Value: 1 Configuration Changed: operative ")
gmfSRTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4), )
if mibBuilder.loadTexts: gmfSRTable.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRTable.setDescription('GMF system routing table. The table may contain a row per GMF link i.e. up to 48 rows (currently).')
gmfSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1), ).setIndexNames((0, "CXGwMux-MIB", "gmfSRLink"))
if mibBuilder.loadTexts: gmfSREntry.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSREntry.setDescription("Each row associates an alias and a subref field to a GMF's link.")
gmfSRLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfSRLink.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRLink.setDescription("Indicates a valid route number established in 'gmfNoOfLinkSupported' used by the Voice/Data Compression module to send compressed voice/data packets to the Frame Relay software layer. Range of Values: 1 - 1,024 Default Value: none")
gmfSRDestCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfSRDestCircuitAlias.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRDestCircuitAlias.setDescription('Determines the alias of a circuit specified in the Frame Relay software layer that will link with the GMF route. Range of Values: (CX 1000) 0 - 35 alphanumeric characters beginning with a non-numeric character (CX 900) 0 - 16 alphanumeric characters beginning with a non-numeric character Default Value: none Configuration Changed: operative ')
gmfSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 3), SubRef().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfSRSubRef.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRSubRef.setDescription("Determines the reference that one user's segment of traffic will be assigned on the outbound PVC to distinguish it from traffic segments of other users of the same outbound PVC. Range of Values: 1 - 255 Default Value: 1 Configuration Changed: operative ")
gmfSRConStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-init", 1), ("closed", 2), ("waitForQueryConf", 3), ("waitForOpenConf", 4), ("opened", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfSRConStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRConStatus.setDescription('Indicates status of connection on the system route. Options: not-init (1): system route not initialized closed (2): system route closed waitForQueryConf (3): in progress (query confirmed?) waitForOpenConf (4): in progress (opening confirmed?) opened (5): system route opened Default Value: none')
gmfSRFailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localMemAllocFailure", 3), ("remoteMemAllocFailure", 4), ("remoteNoAccess", 5), ("remotePvcDown", 6), ("remotePvcBusy", 7), ("localFcnFailure", 8), ("remoteFcnFailure", 9), ("localDsnFailure", 10), ("remoteAliasNotFound", 11), ("remoteNoPvcService", 12), ("openReqTimeout", 13), ("adjaCardReset", 14), ("linkNotSupported", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gmfSRFailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRFailStatus.setDescription('Indicates the reason for a connection failure on a system route prior to the next attempt to establish a connection on that route. Default Value: none Options: noFailure (1): did not fail internalError (2): system error localMemAllocFailure (3): GMF memory allocation error remoteMemAllocFailure (4): FRIM memory allocation error remoteNoAccess (5): FRIM not configured remotePvcDown (6): FRIM reported down remotevcBusy (7): FRIM busy localFcnFailure (8): flow control type unknown to GMF remoteFcnFailure (9): flow control type unknown to FRIM localDsnFailure (10): GMF could not negotiate data size remoteAliasNotFound (11): no PVC for destination alias remoteNoPvcService (12): FRIM not supporting PVC protocol openReqTimeout (13): timeout of open connection request adjaCardReset (14): adjacent CPU reset (CX 1000 only) linkNotSupported (15): system route number not supported')
gmfSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmfSRRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gmfSRRowStatus.setDescription('Determines whether this system route is in service or is to be deleted from the GMF software layer. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: none Configuration Changed: operative ')
mibBuilder.exportSymbols("CXGwMux-MIB", gmfCntUnexpLinkNoFromWan=gmfCntUnexpLinkNoFromWan, gmfCntDataFrmMx=gmfCntDataFrmMx, gmfCntFrmTooShortFromWan=gmfCntFrmTooShortFromWan, gmfDataOutPriority=gmfDataOutPriority, gmfCntLinkDown=gmfCntLinkDown, gmfCntSilentLink=gmfCntSilentLink, gmfCntRemoteRestarted=gmfCntRemoteRestarted, gmfCntSilentConnections=gmfCntSilentConnections, gmfCntRouteChange=gmfCntRouteChange, gmfCntInfoMsgRelFromVce=gmfCntInfoMsgRelFromVce, gmfMciCurrentConnection=gmfMciCurrentConnection, gmfCntVoiceFrmDmx=gmfCntVoiceFrmDmx, gmfLinkIndex=gmfLinkIndex, gmfCntVoiceMuxInterrupted=gmfCntVoiceMuxInterrupted, gmfCntInfoMsgRelFromWan=gmfCntInfoMsgRelFromWan, gmfCntTxAckToWan=gmfCntTxAckToWan, gmfLinkUtilizationTx=gmfLinkUtilizationTx, gmfSRConStatus=gmfSRConStatus, gmfOrigin=gmfOrigin, gmfNoOfLinkSupported=gmfNoOfLinkSupported, SubRef=SubRef, gmfLinkStatEntry=gmfLinkStatEntry, gmfSRDestCircuitAlias=gmfSRDestCircuitAlias, gmfNoOfVoicePacketQueued=gmfNoOfVoicePacketQueued, gmfDataOutWindowWidth=gmfDataOutWindowWidth, gmfCntSeqErrorFromMux=gmfCntSeqErrorFromMux, gmfStatSamplingPeriod=gmfStatSamplingPeriod, gmfCntSeqErrorFromWan=gmfCntSeqErrorFromWan, gmfCntMuxPassTimeExceeded=gmfCntMuxPassTimeExceeded, gmfCntFrmTooLongFromWan=gmfCntFrmTooLongFromWan, gmfRouteEntry=gmfRouteEntry, gmfToFrCouplingLevel=gmfToFrCouplingLevel, gmfCntSeqErrorForced=gmfCntSeqErrorForced, gmfLinkStatus=gmfLinkStatus, gmfSRTable=gmfSRTable, gmfSRFailStatus=gmfSRFailStatus, gmfCntInFlowCtrlMuxSide=gmfCntInFlowCtrlMuxSide, gmfCntUnexpLoopBack=gmfCntUnexpLoopBack, gmfSRSubRef=gmfSRSubRef, gmfCntUnexpSliceType=gmfCntUnexpSliceType, gmfCntVoiceQueueFull=gmfCntVoiceQueueFull, gmfCntGlobalFlowCtlCond=gmfCntGlobalFlowCtlCond, gmfCntInfoMsgRelFromBus=gmfCntInfoMsgRelFromBus, gmfRouteRowStatus=gmfRouteRowStatus, gmfCntDataQueueFull=gmfCntDataQueueFull, gmfCntVoiceFrmMx=gmfCntVoiceFrmMx, gmfSREntry=gmfSREntry, gmfSRRowStatus=gmfSRRowStatus, gmfDest=gmfDest, gmfLongestTimeToMux=gmfLongestTimeToMux, gmfControlStats=gmfControlStats, gmfRouteTable=gmfRouteTable, gmfLinkType=gmfLinkType, gmfControlLink=gmfControlLink, gmfLinkErrorRate=gmfLinkErrorRate, gmfLinkUtilizationRx=gmfLinkUtilizationRx, gmfSRLink=gmfSRLink, gmfConfig=gmfConfig, gmfCntDataFrmDmx=gmfCntDataFrmDmx, gmfMuxInterPassPeriodInMs=gmfMuxInterPassPeriodInMs, gmfNoOfEntryPerFiFo=gmfNoOfEntryPerFiFo, gmfLink=gmfLink, gmfOutputFlowControlFactor=gmfOutputFlowControlFactor, gmfState=gmfState, gmfCntPosValidation=gmfCntPosValidation, gmfCntNegValidation=gmfCntNegValidation, gmfVoiceOverDataPriorityFactor=gmfVoiceOverDataPriorityFactor, gmfCntOutFlowCtrlWanSide=gmfCntOutFlowCtrlWanSide, gmfCntTooManyCodes=gmfCntTooManyCodes, gmfLinkStatTable=gmfLinkStatTable)
