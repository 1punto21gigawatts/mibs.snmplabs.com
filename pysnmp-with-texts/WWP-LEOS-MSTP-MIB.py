#
# PySNMP MIB module WWP-LEOS-MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-MSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, Integer32, TimeTicks, Unsigned32, Counter32, IpAddress, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Integer32", "TimeTicks", "Unsigned32", "Counter32", "IpAddress", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "Counter64", "Bits")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosMstp = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37))
wwpLeosMstp.setRevisions(('2011-08-02 00:00', '2006-09-29 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosMstp.setRevisionsDescriptions(('The MIB module for the WWP MstpMib specific information.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosMstp.setLastUpdated('201108020000Z')
if mibBuilder.loadTexts: wwpLeosMstp.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosMstp.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosMstp.setDescription('Deprecated the wwpLeosMstpPvstBpduReceivedNotification mib')
class MstiInstanceIndex(TextualConvention, Integer32):
    description = 'A unique value, greater than zero, for each Multiple Spanning Tree Instance (MSTI) in the managed Bridge. The value for each MstiInstanceIndex remains constant for the instance.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

class MstiOrCistInstanceIndex(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the MstiInstanceIndex convention. This extension permits the additional value of zero, which means Common and Internal Spanning Tree (CIST).'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 64)

class BpduCounter(TextualConvention, Counter32):
    description = 'An optional counter of received or transmitted Bridge Protocol Data Units of different types to/from a Port. The agent may return the value 0 for any counter that is not supported.'
    status = 'current'
    displayHint = 'd'

wwpLeosMstpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0))
wwpLeosMstpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1))
wwpLeosMstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 2))
wwpLeosMstpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1))
wwpLeosMstpMstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2))
wwpLeosMstpXstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3))
wwpLeosMstpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4))
wwpLeosMstpBridgeEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpBridgeEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpBridgeEnable.setDescription('When this object is set to true the MSTP operation for the bridge is enabled. Setting this object to false disables bridge MSTP operations.')
wwpLeosMstpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stp", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpForceVersion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpForceVersion.setDescription('This object contains the value of the ForceVersion MSTP State Machine Performance Parameter.')
wwpLeosMstpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpForwardDelay.setDescription('This object represents the value of the FwdDelay MSTP State Machine Performance Parameter.')
wwpLeosMstpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpTxHoldCount.setDescription('This object represents the value of the TxHoldCount MSTP State Machine Performance Parameter.')
wwpLeosMstpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpHelloTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpHelloTime.setDescription('This object represents the value of the HelloTime MSTP State Machine Performance Parameter.')
wwpLeosMstpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpMaxAge.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMaxAge.setDescription('This object represents the value of the Max Age value used by the multiple spanning tree protocol.')
wwpLeosMstpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpMaxHops.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMaxHops.setDescription('This object represents the value of the MaxHops MSTP State Machine Performance Parameter.')
wwpLeosMstpLoopbackBlock = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpLoopbackBlock.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpLoopbackBlock.setDescription('This object specifies if loopback port blocking feature is enabled/disabled for the multiple spanning tree protocol. Values of true or false will enable or disable this feature, respectively.')
wwpLeosMstpPathCostDefault = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2))).clone('stp8021t2001')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPathCostDefault.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPathCostDefault.setDescription('The version of the Spanning Tree default Path Costs that are to be used by this Bridge. A value of 8021d1998(1) uses the 16-bit default Path Costs from IEEE Std. 802.1D-1998. A value of stp8021t2001(2) uses the 32-bit default Path Costs from IEEE Std. 802.1t.')
wwpLeosMstpGlobalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rstp", 1), ("mstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpGlobalStpMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpGlobalStpMode.setDescription('For devices that contain multiple STP code-bases, this object allows the selection of the desired Spanning Tree Protocol code-base that is to be in effect. After a new value is selected a configuration save and device reboot must be performed for the new spanning tree code-base to take control over spanning tree operations within the device. The value of rstp(1) selects legacy RSTP code-base which is typically a highly optimized code-base intended for devices which are connected to other RSTP equipped devices. The value of mstp(2) selects the MSTP code-base which offers inherent backward compatibility for RSTP devices however this code-base is optimized for MSTP operations and may not be desirable when the device is operating in a network of only RSTP connected devices.')
wwpLeosMstpPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11), )
if mibBuilder.loadTexts: wwpLeosMstpPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortCfgTable.setDescription('Table that contains configuration items for each port. This object has value similar to dot1dStpPortTable.')
wwpLeosMstpPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1), ).setIndexNames((0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"))
if mibBuilder.loadTexts: wwpLeosMstpPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortCfgEntry.setDescription('MSTP port information entry containing configuration items specific to a particular port on the Bridge.')
wwpLeosMstpPortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosMstpPortInfoIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortInfoIndex.setDescription('This is the port number used as index in the table. The value of this port id is similar to dot1dStpPort.')
wwpLeosMstpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortEnable.setDescription('When this object is set to true the mstp operation for this port is enabled. Setting this object to false disables mstp operations on this port.')
wwpLeosMstpPortAdminExtPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortAdminExtPathCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortAdminExtPathCost.setDescription('The administratively configurable external path cost. This object sets the ExternalPortPathCost MSTP State Machine Performance Parameter when configured to use manual port path cost values. This is used as the CIST External Path Cost field for this port in BPDUs and used in vector calculations for this port. The default value for this object is system dependent.')
wwpLeosMstpPortOperExtPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortOperExtPathCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortOperExtPathCost.setDescription('The current operational external path cost for this port. Depending on the configuration, this may be the administratively configured external path cost or a value calculated by the system.')
wwpLeosMstpPortDynamicExtPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortDynamicExtPathCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortDynamicExtPathCost.setDescription('This attribute enables or disables dynamic calculation of the external path cost for the given port. Values of true or false will enable or disable this feature, respectively.')
wwpLeosMstpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortAdminEdgePort.setDescription('The administrative value of the Edge Port parameter. A value of true indicates that this port should be assumed as an edge-port and a value of false indicates that this port should be assumed as a non-edge-port. The default value for this object is system dependent.')
wwpLeosMstpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter. The object is initialized to the value of wwpLeosMstpPortAdminEdgePort and is set false on reception of a BPDU.')
wwpLeosMstpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortProtocolMigration.setDescription('When set to true, this object forces a spanning tree migration check to initiate within the definitions of the spanning tree state machines per IEEE. Any other operation on this object has no effect and it always returns false when read.')
wwpLeosMstpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse indicates that this port should be treated as having a shared media connection. A value of auto indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
wwpLeosMstpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the wwpMtpPortAdminPointToPoint object.')
wwpLeosMstpPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortAutoEdge.setDescription('The value of the autoEdge parameter used by MSTP to determine whether the value of wwpLeosMstpPortOperEdgePort should be set to the value of wwpLeosMstpPortAdminEdgePort or if it should be set according to the logic defined in the Bridge Detection state machine.')
wwpLeosMstpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortRestrictedRole.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortRestrictedRole.setDescription('The value of the restrictedRole parameter used by MSTP. When true, the port will not be selected as the root port for the CIST or any MSTI, even if it has the best spanning tree priority vector. Such a port will be selected as an alternate port after the root port has been selected. When false, this port is allowed to be selected as the root port.')
wwpLeosMstpPortRestrictedTcn = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 1, 11, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortRestrictedTcn.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortRestrictedTcn.setDescription('The value of the restrictedTcn parameter used by MSTP. When true, the port will not propagate received topology change notifications and topology changes to other ports. When false, normal topology change notification propagation will occur on the port.')
wwpLeosMstpMstCfgName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgName.setDescription('The configuration name that identifies the MST region and is used as one of the inputs in the computation of the MST Configuration Identifier. MSTP uses a fixed field of 32 characters when computing the MST Configuration Identifier and in MSTP BPDUs, when this object is set to a string of characters less than 32 in length, MST will fill in the remaining characters up to character number 32 with NULL octets (hex value 0x00). The default value for this object is the Bridge MAC address represented as an ASCII character string in canonical format, using upper-case hexadecimal letters and hyphens to represent the 48-bit Bridge MAC, with the remaining 15 characters containing the NULL octet (hex value 0x00).')
wwpLeosMstpMstCfgRevLevel = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgRevLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgRevLevel.setDescription('The value of this object is used by MSTP as the Revision Level field transmitted in MSTP BPDUs and in the calculation of the MST Configuration Identifier.')
wwpLeosMstpMstCfgVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosMstpMstCfgVlanTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgVlanTable.setDescription('The MST Configuration Table used by MSTP to maintain the VLAN-to-MSTI mapping and for the calculation of the MST Configuration Digest. This table contains one entry for each VlanId.')
wwpLeosMstpMstCfgVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpMstCfgVlanIndex"))
if mibBuilder.loadTexts: wwpLeosMstpMstCfgVlanEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgVlanEntry.setDescription('Each MST Configuration Table entry contains the MSTI to which the VLAN is mapped. When the MSTI value is zero, the VLAN is mapped to the CIST.')
wwpLeosMstpMstCfgVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: wwpLeosMstpMstCfgVlanIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgVlanIndex.setDescription('The VlanId for which this entry contains the CIST or MSTI mapping.')
wwpLeosMstpMstCfgMstiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 3, 1, 2), MstiOrCistInstanceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgMstiIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgMstiIndex.setDescription('An integer with values ranging from 0 to 64 that identify a the CIST/MSTI instance to which this VLAN is mapped. The value of zero means this VLAN is mapped to the CIST, other values indicate an MSTI mapping for this VLAN.')
wwpLeosMstpMstCfgXstMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4), )
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMappingTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMappingTable.setDescription('Table containing the VLAN to XST mapping information from wwpLeosMstpMstCfgVlanTable in the format of VLAN- mappings per CIST/MSTI. A single table entry exists for the CIST and one entry for each MSTI. Each table entry contains VLAN mappings indicating the VLAN identifiers that are associated with the CIST or the particular MSTI. This table is read-only and is intended to provide management an efficient method of retrieving the VLAN/XST mapping information. To modify the information within this table, the wwpLeosMstpMstCfgVlanTable should be used.')
wwpLeosMstpMstCfgXstMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4, 1), ).setIndexNames((0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpMstCfgXstMappingIndex"))
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMappingEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMappingEntry.setDescription('A conceptual row containing a bitmap of all VLAN identifiers that are mapped to the CIST or specified MSTI. The mapping of VLAN identifiers to CIST or MSTI is managed through the wwpLeosMstpMstCfgVlanTable.')
wwpLeosMstpMstCfgXstMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4, 1, 1), MstiOrCistInstanceIndex())
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMappingIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMappingIndex.setDescription('Uniquely identifies an instance. The entry of this table with index 0 represents the CIST. Non-zero index values represent a particular MSTI.')
wwpLeosMstpMstCfgXstMapping1k = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping1k.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping1k.setDescription('A string of octets containing one bit for each VLAN identifier. The first octet represents VLAN identifier values 0 through 7; the second octet represents VLAN identifier values 8 through 15, etc. The most significant bit of each octet corresponds to the lowest VLAN identifier value for that octet. This object represents VLAN identifier values 0 through 1023. Note, the bit representing VLAN identifier value 0 will always be clear (bit value 0).')
wwpLeosMstpMstCfgXstMapping2k = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping2k.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping2k.setDescription('A string of octets containing one bit for each VLAN identifier. The first octet represents VLAN identifier values 1024 through 1031; the second octet represents VLAN identifier values 1032 through 1039, etc. The most significant bit of each octet corresponds to the lowest VLAN identifier value for that octet. This entire object represents VLAN identifier values 1024 through 2047.')
wwpLeosMstpMstCfgXstMapping3k = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping3k.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping3k.setDescription('A string of octets containing one bit for each VLAN identifier. The first octet represents VLAN identifier values 2048 through 2055; the second octet represents VLAN identifier values 2056 through 2063, etc. The most significant bit of each octet corresponds to the lowest VLAN identifier value for that octet. This entire object represents VLAN identifier values 2048 through 3071.')
wwpLeosMstpMstCfgXstMapping4k = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping4k.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgXstMapping4k.setDescription('A string of octets containing one bit for each VLAN identifier. The first octet represents VLAN identifier values 3072 through 3079; the second octet represents VLAN identifier values 3080 through 3087, etc. The most significant bit of each octet corresponds to the lowest VLAN identifier value for that octet. This entire object represents VLAN identifier values 3072 through 4095. Note, the bit representing VLAN identifier value 4095 will always be clear (bit value 0).')
wwpLeosMstpMstCfgIdDigest = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpMstCfgIdDigest.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpMstCfgIdDigest.setDescription('This object is the Configuration Digest calculated by MSTP and is used in MSTP BPDUs.')
wwpLeosMstpXstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosMstpXstCfgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstCfgTable.setDescription('Table contains CIST and MSTI configuration items for the bridge. The CIST is identified as index 0 and the MSTI entries use non-zero indices.')
wwpLeosMstpXstCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpXstCfgIndex"))
if mibBuilder.loadTexts: wwpLeosMstpXstCfgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstCfgEntry.setDescription('CIST or MSTI entry containing configuration items for the CIST or the specified MSTI.')
wwpLeosMstpXstCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 1, 1, 1), MstiOrCistInstanceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosMstpXstCfgIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstCfgIndex.setDescription('The index number for this entry. Zero refers to the CIST and non-zero values refer to MSTI entries for this Bridge.')
wwpLeosMstpXstCfgBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosMstpXstCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstCfgBridgePriority.setDescription('The Bridge Priority value used by the multiple spanning tree protocol in vector calculations and in BPDUs. For the CIST, this value is used in the CIST Bridge Identifier and for MSTIs this value is used in the MSTI Bridge Priority field of BPDUs.')
wwpLeosMstpXstCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosMstpXstCfgStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstCfgStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete the entry set this to 'destroy'. Table rows representing MSTIs may be created or deleted using this object. The table row representing the CIST (Index 0) always exists, an attempt to delete this row will result in an SNMP error.")
wwpLeosMstpXstPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2), )
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgTable.setDescription('Table of configuration items on a per-port per-CIST/MSTI basis. For each port, there is a single CIST (index 0) and multiple MSTIs (non-zero index values).')
wwpLeosMstpXstPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1), ).setIndexNames((0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpXstPortCfgPortIndex"), (0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpXstPortCfgXstIndex"))
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgEntry.setDescription('Table entry containing configuration items specific to a particular port/CIST combination or port/MSTI combination. Each port on the bridge has a single CIST (index 0) and may have multiple MSTI configurations (non-zero indices).')
wwpLeosMstpXstPortCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgPortIndex.setDescription('This is the port number used as index in the table. The value of this port id is similar to dot1dStpPort.')
wwpLeosMstpXstPortCfgXstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1, 2), MstiOrCistInstanceIndex())
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgXstIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgXstIndex.setDescription('The CIST or MSTI index number for this port. Zero refers to the CIST and non-zero values refer to MSTI entries for this port.')
wwpLeosMstpXstPortCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgPortPriority.setDescription('The port priority for this port used in vector calculations and BPDUs. For the CIST for this port, this value is the priority component of the CIST Port Priority. For MSTI entries for this port, this value is the MSTI Port Priority.')
wwpLeosMstpXstPortCfgAdminIntPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgAdminIntPathCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgAdminIntPathCost.setDescription('The administratively configurable internal path cost. For the CIST for this port, this value is the CIST Internal Root Path Cost. For MSTI entries for this port, this value is the MSTI Internal Root Path Cost. The default value for this object is system dependent.')
wwpLeosMstpXstPortCfgOperIntPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgOperIntPathCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgOperIntPathCost.setDescription('The current operational internal path cost for either the CIST or the specified MSTI. Depending on the configuration this value may be the administratively configured internal path cost or some other value determined by the system.')
wwpLeosMstpXstPortCfgDynamicIntPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 3, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgDynamicIntPathCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpXstPortCfgDynamicIntPathCost.setDescription('This attribute enables or disables dynamic calculation of the internal path cost for the given port. When the XstIndex is zero, this applies to the CIST Internal Root Path Cost. When the XstIndex is non-zero, this applies to the specified MSTI Internal Root Path Cost. Values of true or false will enable or disable this feature, respectively.')
wwpLeosMstpBridgeStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpBridgeStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpBridgeStatsClear.setDescription('This object allows all MSTP bridge statistics to be cleared. Setting this object to true will reset all statistics maintained under the wwpLeosMstpStats branch to a value of zero. Setting this object to false will have no effect. This object always returns a value of false.')
wwpLeosMstpPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2), )
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTable.setDescription('A table that contains MSTP statistical information about each port that is associated with this bridge.')
wwpLeosMstpPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1), ).setIndexNames((0, "WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortStatsIndex"))
if mibBuilder.loadTexts: wwpLeosMstpPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsEntry.setDescription('A list of statistics for each port of the bridge.')
wwpLeosMstpPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosMstpPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsIndex.setDescription('This is the port number used as index in the table. The value of this port id is similar to dot1dStpPort.')
wwpLeosMstpPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsClear.setDescription('This object allows the port statistics contained within this table entry to be cleared. Setting this object to true will reset all statistics for this port to a value of zero. Setting this object to false will have no effect. This object always returns a value of false.')
wwpLeosMstpPortStatsRxTcnBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 3), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxTcnBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxTcnBpdu.setDescription('Received Topology Change Notification (TCN) messages for this port.')
wwpLeosMstpPortStatsRxCfgBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 4), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxCfgBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxCfgBpdu.setDescription('Received Configuration BPDUs for this port.')
wwpLeosMstpPortStatsRxRstBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 5), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxRstBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxRstBpdu.setDescription('Received RST BPDUs for this port.')
wwpLeosMstpPortStatsRxMstBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 6), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxMstBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsRxMstBpdu.setDescription('Received MST BPDUs for this port.')
wwpLeosMstpPortStatsTxTcnBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 7), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxTcnBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxTcnBpdu.setDescription('Transmitted Topology Change Notification (TCN) messages for this port.')
wwpLeosMstpPortStatsTxCfgBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 8), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxCfgBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxCfgBpdu.setDescription('Transmitted Configuration BPDUs for this port.')
wwpLeosMstpPortStatsTxRstBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 9), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxRstBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxRstBpdu.setDescription('Transmitted RST BPDUs for this port.')
wwpLeosMstpPortStatsTxMstBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 1, 4, 2, 1, 10), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxMstBpdu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortStatsTxMstBpdu.setDescription('Transmitted MST BPDUs for this port.')
wwpLeosMstpNewRootNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 1)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpXstCfgIndex"))
if mibBuilder.loadTexts: wwpLeosMstpNewRootNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpNewRootNotification.setDescription('The wwpLeosMstpNewRootNotification indicates that the sending agent has become the new root of the Spanning Tree for the specified XST (CIST or MSTI). This notification is generated when the Port Role Selection state machine invokes the updtRolesTree procedure and this procedure operation results in a calculation of a Root Priority Vector for the XST which results in a value indicating that the bridge itself has become the root bridge for the XST.')
wwpLeosMstpTopologyChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 2)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"), ("WWP-LEOS-MSTP-MIB", "wwpLeosMstpXstCfgIndex"))
if mibBuilder.loadTexts: wwpLeosMstpTopologyChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpTopologyChangeNotification.setDescription('A wwpLeosMstpTopologyChangeNotification is sent by a bridge for the specified XST when the Topology Change state machine invokes the newTcWhile procedure which causes the tcWhile timer for the specified port and XST to change from a zero value to a non-zero value.')
wwpLeosMstpPortBackupNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 3)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"))
if mibBuilder.loadTexts: wwpLeosMstpPortBackupNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortBackupNotification.setDescription('A wwpLeosMstpPortBackupNotification is sent whenever the MSTP state machine logic determines that a loop has occurred and the received vector information represents another port on the same device. This notification is sent when the updtRolesTree procedure determines that the designated bridge and designated port components of the port priority vector reflect another port on this bridge which results in the selectedRole parameter for the CIST to transition to BackupPort.')
wwpLeosMstpPvstBpduReceivedNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 4)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"))
if mibBuilder.loadTexts: wwpLeosMstpPvstBpduReceivedNotification.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosMstpPvstBpduReceivedNotification.setDescription('A wwpLeosMstpPvstBpduReceivedNotification is sent to indicate that one or more PVST BPDUs have been received on the port in the past 60 seconds. Each minute, all ports are checked for reception of one or more PVST BPDUs and this notification is generated if any PVST BPDUs have been received.')
wwpLeosMstpSelfLoopNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 5)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"))
if mibBuilder.loadTexts: wwpLeosMstpSelfLoopNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpSelfLoopNotification.setDescription('A wwpLeosMstpSelfLoopNotification is sent whenever device detects same cable connected to a port in a loop back. This determination is made by comparing the layer-2 address of the received frame with that of the bridge. This occurs before the frame data reaches the MSTP state machine logic. Also if loop-back blocking is enabled on the device then mstp will block this port (self disable).')
wwpLeosMstpPortOperEdgeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 6)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"), ("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortOperEdgePort"))
if mibBuilder.loadTexts: wwpLeosMstpPortOperEdgeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortOperEdgeNotification.setDescription('A wwpLeosMstpPortOperEdgeNotification is sent whenever the MSTP state machine logic causes a change in the operEdge parameter associated with the specified port.')
wwpLeosMstpPortFlapNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 7)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"))
if mibBuilder.loadTexts: wwpLeosMstpPortFlapNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpPortFlapNotification.setDescription('A wwpLeosMstpPortFlapNotification is sent whenever device detects a port flapping. This notification is generated under following criteria. If device detects port flapped more than once within 1 minute timer period and it has not sent notification within last 5 minutes then it will generate this notification.')
wwpLeosMstpBridgeRootPortLostNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 37, 0, 8)).setObjects(("WWP-LEOS-MSTP-MIB", "wwpLeosMstpPortInfoIndex"), ("WWP-LEOS-MSTP-MIB", "wwpLeosMstpXstCfgIndex"))
if mibBuilder.loadTexts: wwpLeosMstpBridgeRootPortLostNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMstpBridgeRootPortLostNotification.setDescription('A wwpLeosMstpBridgeRootPortLostNotification is sent whenever device detects that bridge root port is lost for a particular XST (CIST or MSTI). This notification is generated when a link has gone down and the role parameter for the CIST or any MSTI for that port is set to Root Port. This notification will indicate either the link failure or link partner MSTP disabled.')
mibBuilder.exportSymbols("WWP-LEOS-MSTP-MIB", wwpLeosMstpPortProtocolMigration=wwpLeosMstpPortProtocolMigration, wwpLeosMstpPortStatsRxMstBpdu=wwpLeosMstpPortStatsRxMstBpdu, wwpLeosMstpXstPortCfgOperIntPathCost=wwpLeosMstpXstPortCfgOperIntPathCost, wwpLeosMstpBridgeEnable=wwpLeosMstpBridgeEnable, wwpLeosMstpXstPortCfgEntry=wwpLeosMstpXstPortCfgEntry, wwpLeosMstpXstCfgEntry=wwpLeosMstpXstCfgEntry, PYSNMP_MODULE_ID=wwpLeosMstp, wwpLeosMstpPvstBpduReceivedNotification=wwpLeosMstpPvstBpduReceivedNotification, wwpLeosMstpMstCfgMstiIndex=wwpLeosMstpMstCfgMstiIndex, wwpLeosMstpPathCostDefault=wwpLeosMstpPathCostDefault, wwpLeosMstpTopologyChangeNotification=wwpLeosMstpTopologyChangeNotification, wwpLeosMstpPortOperEdgeNotification=wwpLeosMstpPortOperEdgeNotification, wwpLeosMstpXstPortCfgPortPriority=wwpLeosMstpXstPortCfgPortPriority, wwpLeosMstpXstCfgStatus=wwpLeosMstpXstCfgStatus, wwpLeosMstpPortStatsClear=wwpLeosMstpPortStatsClear, wwpLeosMstpPortBackupNotification=wwpLeosMstpPortBackupNotification, wwpLeosMstpConformance=wwpLeosMstpConformance, wwpLeosMstpPortCfgEntry=wwpLeosMstpPortCfgEntry, wwpLeosMstpMstCfgXstMapping2k=wwpLeosMstpMstCfgXstMapping2k, wwpLeosMstpMstCfgXstMappingIndex=wwpLeosMstpMstCfgXstMappingIndex, wwpLeosMstpMstCfgXstMapping3k=wwpLeosMstpMstCfgXstMapping3k, wwpLeosMstpPortInfoIndex=wwpLeosMstpPortInfoIndex, wwpLeosMstpXstPortCfgXstIndex=wwpLeosMstpXstPortCfgXstIndex, wwpLeosMstpPortEnable=wwpLeosMstpPortEnable, wwpLeosMstpPortStatsTxMstBpdu=wwpLeosMstpPortStatsTxMstBpdu, wwpLeosMstpPortRestrictedTcn=wwpLeosMstpPortRestrictedTcn, wwpLeosMstpMstCfgRevLevel=wwpLeosMstpMstCfgRevLevel, MstiOrCistInstanceIndex=MstiOrCistInstanceIndex, wwpLeosMstpMstCfgVlanEntry=wwpLeosMstpMstCfgVlanEntry, wwpLeosMstpXstPortCfgAdminIntPathCost=wwpLeosMstpXstPortCfgAdminIntPathCost, wwpLeosMstpPortCfgTable=wwpLeosMstpPortCfgTable, wwpLeosMstpPortStatsEntry=wwpLeosMstpPortStatsEntry, wwpLeosMstpGlobalStpMode=wwpLeosMstpGlobalStpMode, wwpLeosMstpXstCfgTable=wwpLeosMstpXstCfgTable, wwpLeosMstpMstCfgXstMappingTable=wwpLeosMstpMstCfgXstMappingTable, wwpLeosMstpPortOperPointToPoint=wwpLeosMstpPortOperPointToPoint, wwpLeosMstpMstCfgIdDigest=wwpLeosMstpMstCfgIdDigest, wwpLeosMstpStats=wwpLeosMstpStats, wwpLeosMstpObjects=wwpLeosMstpObjects, wwpLeosMstp=wwpLeosMstp, wwpLeosMstpMstCfgName=wwpLeosMstpMstCfgName, wwpLeosMstpMstCfgVlanTable=wwpLeosMstpMstCfgVlanTable, wwpLeosMstpForceVersion=wwpLeosMstpForceVersion, wwpLeosMstpPortAdminExtPathCost=wwpLeosMstpPortAdminExtPathCost, wwpLeosMstpPortOperExtPathCost=wwpLeosMstpPortOperExtPathCost, wwpLeosMstpMstCfgXstMappingEntry=wwpLeosMstpMstCfgXstMappingEntry, wwpLeosMstpNotifications=wwpLeosMstpNotifications, wwpLeosMstpPortAdminEdgePort=wwpLeosMstpPortAdminEdgePort, wwpLeosMstpPortStatsTxRstBpdu=wwpLeosMstpPortStatsTxRstBpdu, wwpLeosMstpMaxHops=wwpLeosMstpMaxHops, wwpLeosMstpTxHoldCount=wwpLeosMstpTxHoldCount, wwpLeosMstpXstPortCfgDynamicIntPathCost=wwpLeosMstpXstPortCfgDynamicIntPathCost, wwpLeosMstpLoopbackBlock=wwpLeosMstpLoopbackBlock, wwpLeosMstpXstCfgBridgePriority=wwpLeosMstpXstCfgBridgePriority, wwpLeosMstpXstCfg=wwpLeosMstpXstCfg, wwpLeosMstpPortRestrictedRole=wwpLeosMstpPortRestrictedRole, wwpLeosMstpPortOperEdgePort=wwpLeosMstpPortOperEdgePort, wwpLeosMstpXstPortCfgTable=wwpLeosMstpXstPortCfgTable, MstiInstanceIndex=MstiInstanceIndex, wwpLeosMstpPortAdminPointToPoint=wwpLeosMstpPortAdminPointToPoint, wwpLeosMstpForwardDelay=wwpLeosMstpForwardDelay, wwpLeosMstpPortStatsTable=wwpLeosMstpPortStatsTable, wwpLeosMstpBridgeRootPortLostNotification=wwpLeosMstpBridgeRootPortLostNotification, wwpLeosMstpSelfLoopNotification=wwpLeosMstpSelfLoopNotification, wwpLeosMstpMstCfgVlanIndex=wwpLeosMstpMstCfgVlanIndex, wwpLeosMstpPortStatsRxCfgBpdu=wwpLeosMstpPortStatsRxCfgBpdu, wwpLeosMstpBridgeStatsClear=wwpLeosMstpBridgeStatsClear, wwpLeosMstpPortFlapNotification=wwpLeosMstpPortFlapNotification, BpduCounter=BpduCounter, wwpLeosMstpNewRootNotification=wwpLeosMstpNewRootNotification, wwpLeosMstpMaxAge=wwpLeosMstpMaxAge, wwpLeosMstpPortAutoEdge=wwpLeosMstpPortAutoEdge, wwpLeosMstpXstPortCfgPortIndex=wwpLeosMstpXstPortCfgPortIndex, wwpLeosMstpMstCfgXstMapping1k=wwpLeosMstpMstCfgXstMapping1k, wwpLeosMstpHelloTime=wwpLeosMstpHelloTime, wwpLeosMstpPortDynamicExtPathCost=wwpLeosMstpPortDynamicExtPathCost, wwpLeosMstpPortStatsIndex=wwpLeosMstpPortStatsIndex, wwpLeosMstpPortStatsTxTcnBpdu=wwpLeosMstpPortStatsTxTcnBpdu, wwpLeosMstpCfg=wwpLeosMstpCfg, wwpLeosMstpPortStatsRxTcnBpdu=wwpLeosMstpPortStatsRxTcnBpdu, wwpLeosMstpPortStatsTxCfgBpdu=wwpLeosMstpPortStatsTxCfgBpdu, wwpLeosMstpMstCfg=wwpLeosMstpMstCfg, wwpLeosMstpMstCfgXstMapping4k=wwpLeosMstpMstCfgXstMapping4k, wwpLeosMstpPortStatsRxRstBpdu=wwpLeosMstpPortStatsRxRstBpdu, wwpLeosMstpXstCfgIndex=wwpLeosMstpXstCfgIndex)
