#
# PySNMP MIB module NETSCREEN-SERVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SERVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
netscreenService, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenService")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ModuleIdentity, ObjectIdentity, MibIdentifier, Integer32, Counter32, IpAddress, NotificationType, Unsigned32, Counter64, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Integer32", "Counter32", "IpAddress", "NotificationType", "Unsigned32", "Counter64", "Gauge32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netscreenServiceMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 13, 0))
netscreenServiceMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-10 00:00', '2001-09-28 00:00', '2001-05-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenServiceMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenServiceMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenServiceMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenServiceMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenServiceMibModule.setDescription('This module defines the object that are used to monitor service configuration in NetScreen device.')
nsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 13, 1), )
if mibBuilder.loadTexts: nsServiceTable.setStatus('current')
if mibBuilder.loadTexts: nsServiceTable.setDescription('Services are types of IP traffic for which protocol standards exist. This table collects all the service configurations existing in NetScreen device.')
nsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1), ).setIndexNames((0, "NETSCREEN-SERVICE-MIB", "nsServiceIndex"))
if mibBuilder.loadTexts: nsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: nsServiceEntry.setDescription('Each enry in the nsServiceTable holds a set of configuration parameters associated with an instance of service.')
nsServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceIndex.setStatus('current')
if mibBuilder.loadTexts: nsServiceIndex.setDescription('A unique value for each address. Its value ranges between 0 and 65535 and may not be contiguous.')
nsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceName.setStatus('current')
if mibBuilder.loadTexts: nsServiceName.setDescription('Service name.')
nsServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("remote", 1), ("email", 2), ("infoseek", 3), ("security", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nsServiceCategory.setDescription('Category this service belongs to.')
nsServiceTransProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 17, 8, 9, 17, 46, 47, 89))).clone(namedValues=NamedValues(("other", 0), ("icmp", 1), ("tcp", 6), ("udp", 17), ("egp", 8), ("igp", 9), ("udp", 17), ("rsvp", 46), ("gre", 47), ("ospf", 89)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceTransProto.setStatus('current')
if mibBuilder.loadTexts: nsServiceTransProto.setDescription('Service trans protocol. 6 means tcp 17 means udp')
nsServiceSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceSrcPortLow.setStatus('current')
if mibBuilder.loadTexts: nsServiceSrcPortLow.setDescription('The low source port number associated with service.')
nsServiceSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceSrcPortHigh.setStatus('current')
if mibBuilder.loadTexts: nsServiceSrcPortHigh.setDescription('The high source port number associated with service.')
nsServiceDstPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceDstPortLow.setStatus('current')
if mibBuilder.loadTexts: nsServiceDstPortLow.setDescription('The low destination port number associated with service.')
nsServiceDstPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceDstPortHigh.setStatus('current')
if mibBuilder.loadTexts: nsServiceDstPortHigh.setDescription('The high source port number associated with service.')
nsServiceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pre-define", 0), ("usr-define", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceFlag.setStatus('current')
if mibBuilder.loadTexts: nsServiceFlag.setDescription('Service flag used to indicate if the service is a pre-defined one or a custom one.')
nsServiceVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceVsys.setStatus('current')
if mibBuilder.loadTexts: nsServiceVsys.setDescription('Virtual system this configuration belongs to.')
nsServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 13, 2), )
if mibBuilder.loadTexts: nsServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupTable.setDescription('Services can be organized into service group for convenience. This table collects all service group entries in NetScreen device.')
nsServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 13, 2, 1), ).setIndexNames((0, "NETSCREEN-SERVICE-MIB", "nsServiceGroupIndex"))
if mibBuilder.loadTexts: nsServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupEntry.setDescription('Each entry in the nsServiceGroupTable holds a set of information about service group.')
nsServiceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupIndex.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupIndex.setDescription('A unique value for each group. Its value ranges between 0 and 65535 and may not be contiguous.')
nsServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupName.setDescription('Service group name.')
nsServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupMember.setDescription('Service member number in service group.')
nsServiceGroupComment = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupComment.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupComment.setDescription('Comments for service group.')
nsServiceGroupVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupVsys.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupVsys.setDescription('Virtual system this group belongs to.')
nsServiceGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 13, 3), )
if mibBuilder.loadTexts: nsServiceGrpMemberTable.setStatus('current')
if mibBuilder.loadTexts: nsServiceGrpMemberTable.setDescription('Service group membership info table will show detail information of a service group.')
nsServiceGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 13, 3, 1), ).setIndexNames((0, "NETSCREEN-SERVICE-MIB", "nsServiceGrpMemberIndex"))
if mibBuilder.loadTexts: nsServiceGrpMemberEntry.setStatus('current')
if mibBuilder.loadTexts: nsServiceGrpMemberEntry.setDescription("An entry containing attributes service group's member info")
nsServiceGrpMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGrpMemberIndex.setStatus('current')
if mibBuilder.loadTexts: nsServiceGrpMemberIndex.setDescription('A unique value for each group. Its value ranges between 0 and 65535 and may not be contiguous.')
nsServiceGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGrpName.setStatus('current')
if mibBuilder.loadTexts: nsServiceGrpName.setDescription('Specific service group name')
nsServiceGroupMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupMemberName.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupMemberName.setDescription('Specific service name in the service group.')
nsServiceGroupMemberVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsServiceGroupMemberVsys.setStatus('current')
if mibBuilder.loadTexts: nsServiceGroupMemberVsys.setDescription('Virtual system this configuration belongs to')
mibBuilder.exportSymbols("NETSCREEN-SERVICE-MIB", nsServiceGroupMember=nsServiceGroupMember, nsServiceGroupName=nsServiceGroupName, nsServiceGroupComment=nsServiceGroupComment, nsServiceSrcPortLow=nsServiceSrcPortLow, nsServiceSrcPortHigh=nsServiceSrcPortHigh, nsServiceGroupVsys=nsServiceGroupVsys, nsServiceDstPortHigh=nsServiceDstPortHigh, nsServiceIndex=nsServiceIndex, nsServiceGroupMemberVsys=nsServiceGroupMemberVsys, nsServiceFlag=nsServiceFlag, nsServiceVsys=nsServiceVsys, nsServiceGrpMemberIndex=nsServiceGrpMemberIndex, nsServiceGrpMemberEntry=nsServiceGrpMemberEntry, nsServiceGrpMemberTable=nsServiceGrpMemberTable, nsServiceGroupEntry=nsServiceGroupEntry, nsServiceGroupTable=nsServiceGroupTable, nsServiceDstPortLow=nsServiceDstPortLow, nsServiceTable=nsServiceTable, nsServiceEntry=nsServiceEntry, nsServiceTransProto=nsServiceTransProto, PYSNMP_MODULE_ID=netscreenServiceMibModule, nsServiceCategory=nsServiceCategory, nsServiceGroupIndex=nsServiceGroupIndex, nsServiceGroupMemberName=nsServiceGroupMemberName, netscreenServiceMibModule=netscreenServiceMibModule, nsServiceGrpName=nsServiceGrpName, nsServiceName=nsServiceName)
