#
# PySNMP MIB module HPN-ICF-DOT11-ACMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOT11-ACMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
HpnicfDot11MACModeType, HpnicfDot11TunnelSecSchemType, hpnicfDot11, HpnicfDot11ObjectIDType = mibBuilder.importSymbols("HPN-ICF-DOT11-REF-MIB", "HpnicfDot11MACModeType", "HpnicfDot11TunnelSecSchemType", "hpnicfDot11", "HpnicfDot11ObjectIDType")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Counter32, Counter64, Unsigned32, iso, NotificationType, MibIdentifier, TimeTicks, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Counter32", "Counter64", "Unsigned32", "iso", "NotificationType", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Bits")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
hpnicfDot11ACMT = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1))
hpnicfDot11ACMT.setRevisions(('2010-08-04 18:00', '2009-08-07 18:00', '2009-07-29 18:00', '2009-05-07 20:00', '2008-07-09 18:00', '2007-12-21 18:00', '2007-06-19 18:00', '2007-04-27 20:00', '2006-05-10 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfDot11ACMT.setRevisionsDescriptions(('Add new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new table and new nodes.', 'Modified to fix some issue.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfDot11ACMT.setLastUpdated('201008041800Z')
if mibBuilder.loadTexts: hpnicfDot11ACMT.setOrganization('')
if mibBuilder.loadTexts: hpnicfDot11ACMT.setContactInfo('')
if mibBuilder.loadTexts: hpnicfDot11ACMT.setDescription('This MIB defines information as per wireless AC and tunnel between AP and AC. If NMS intends to get more detailed information for the AP and AC, it could refer entPhysicalIndex in the Entity MIB to get entity information. GLOSSARY IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Access control (AC) To control and manage multi-APs, it will bridge wireless and wired network. Radio The chip set to receive and send wireless signal. Fat AP Applied in the home, SOHO and so on, and it could independently work without help from AC. Fit AP Applied in the enterprise environment, it will work under the control and management from AC. Control And Provisioning of Wireless Access Points Protocol The short name of protocol is CAPWAP. AC will control and manage AP by CAPWAP tunnel protocol defined by IETF. Also, a data tunnel will be set up between AC and AP. Basic Service Set The IEEE 802.11 BSS of an AP comprises of the stations directly associating with the AP. It will be identified by BSSID.')
hpnicfDot11ACObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1))
hpnicfDot11ACObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 1))
hpnicfDot11ACLoadInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2))
hpnicfDot11WLANAssocStatisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3))
hpnicfDot11ACBASInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4))
hpnicfDot11ACStaUserSecAuthStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5))
hpnicfDot11ACStaSecAuthTypeStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6))
hpnicfDot11CAPWAPTunnelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2))
hpnicfDot11ACMtNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3))
hpnicfDot11CurrentACMACMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 1, 1), HpnicfDot11MACModeType().clone('split')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrentACMACMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrentACMACMode.setDescription('Represents which MAC mode defined in the CAPWAP draft is in use for the AC.')
hpnicfDot11MaxAPNumPermitted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MaxAPNumPermitted.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MaxAPNumPermitted.setDescription('Represents the maximum number of AP connection permitted for one AC.')
hpnicfDot11MaxStationNumPermitted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MaxStationNumPermitted.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MaxStationNumPermitted.setDescription('Represents the maximum number of station connection permitted for one AC.')
hpnicfDot11RunAPNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RunAPNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RunAPNumThreshold.setDescription('When the percentage of run AP number is larger than this threshold, a notification will be sent.')
hpnicfDot11APConnectCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APConnectCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APConnectCount.setDescription('Represents the total number of APs which are connecting to AC.')
hpnicfDot11StationConnectCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationConnectCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationConnectCount.setDescription('Represents the total number of stations which are accessing the WLAN service through AC.')
hpnicfDot11ACIFLoadInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfDot11ACIFLoadInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACIFLoadInfoTable.setDescription('Represents AP number information of interface.')
hpnicfDot11ACIFLoadInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACIfIndex"))
if mibBuilder.loadTexts: hpnicfDot11ACIFLoadInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACIFLoadInfoEntry.setDescription('Each entry represents AP number information of an interface')
hpnicfDot11ACIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACIfIndex.setDescription('Represents index of AC interface.')
hpnicfDot11ACIfApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACIfApNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACIfApNum.setDescription('Represents AP number connected to the AC interface.')
hpnicfDot11ACIfStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACIfStaNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACIfStaNum.setDescription('Represents Station number connected to the AC interface.')
hpnicfDot11ACIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACIfName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACIfName.setDescription('Represents InterfaceName AP number connected to AC interface.')
hpnicfDot11MasterAPCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MasterAPCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MasterAPCount.setDescription('Represents the total number of AP which have established the master tunnel with AC.')
hpnicfDot11SlaveAPCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11SlaveAPCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SlaveAPCount.setDescription('Represents the total number of AP which have established the slave tunnel with AC.')
hpnicfDot11ConnectAutoAPCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ConnectAutoAPCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ConnectAutoAPCount.setDescription('Represents the total number of auto APs that are connecting to AC.')
hpnicfDot11PersistentAPCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11PersistentAPCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PersistentAPCount.setDescription('Represents the total number of persistent AP.')
hpnicfDot11AcUploadFrameCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AcUploadFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AcUploadFrameCnt.setDescription('Represents the number of frames that AP sends to AC through LWAPP tunnel.')
hpnicfDot11AcDownloadFrameCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AcDownloadFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AcDownloadFrameCnt.setDescription('Represents the number of frames that AC sends to AP through LWAPP tunnel.')
hpnicfDot11AcUploadFrameBytes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AcUploadFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AcUploadFrameBytes.setDescription('Represents the bytes of frames that AP sends to AC through LWAPP tunnel.')
hpnicfDot11AcDownloadFrameBytes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AcDownloadFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AcDownloadFrameBytes.setDescription('Represents the bytes of frames that AC sends to AP through LWAPP tunnel.')
hpnicfDot11BackupACRole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("master", 2), ("slave", 3))).clone('null')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BackupACRole.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BackupACRole.setDescription('This object represents the Identity of the AC null: Not configured master: Master AC slave: Slave AC.')
hpnicfDot11BackupACNMSIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BackupACNMSIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BackupACNMSIP.setDescription('This object represents the manger IP address of the slave ac.')
hpnicfDot11ACBackupMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("hotBackup", 2), ("coldBackup", 3))).clone('null')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACBackupMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBackupMode.setDescription('This object represents the ac backup mode.')
hpnicfDot11ACBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACBackupStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBackupStatus.setDescription('This object represents the ac backup status.')
hpnicfDot11ACSwitchCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACSwitchCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACSwitchCnt.setDescription('This object represents the ac switch times.')
hpnicfDot11ACSouthifPacketOutputCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketOutputCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketOutputCount.setDescription('Represents the count of output packets with the down-link interface.')
hpnicfDot11ACSouthifPacketOutputBytes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketOutputBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketOutputBytes.setDescription('Represents the bytes of output packets with the down-link interface.')
hpnicfDot11ACSouthifPacketInputCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketInputCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketInputCount.setDescription('Represents the count of input packets with the down-link interface.')
hpnicfDot11ACSouthifPacketInputBytes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketInputBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACSouthifPacketInputBytes.setDescription('Represents the bytes of input packets with the down-link interface.')
hpnicfDot11TotalAPconnected = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TotalAPconnected.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TotalAPconnected.setDescription('Represents the total number of AP which are connected to AC.')
hpnicfDot11RemainingAPcapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RemainingAPcapacity.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RemainingAPcapacity.setDescription('Represents the remaining AP capacity of the AC.')
hpnicfDot11StationAssocSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssocSum.setDescription('Represents the total number of station association.')
hpnicfDot11StationAssocFailSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAssocFailSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssocFailSum.setDescription('Represents the total number of station association failure.')
hpnicfDot11StationReassocSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationReassocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationReassocSum.setDescription('Represents the total number of station reassociation.')
hpnicfDot11StationAssocRejectedSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAssocRejectedSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssocRejectedSum.setDescription('Represents the total number of station association rejected on account of resource limit.')
hpnicfDot11StationExDeAuthenSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationExDeAuthenSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationExDeAuthenSum.setDescription('Represents the total number of exceptional station deauthentication (Without sending a deauthentication to AP).')
hpnicfDot11StationCurAssocSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationCurAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationCurAssocSum.setDescription('Represents the total number of current associated stations.')
hpnicfDot11StationAssocReqSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationAssocReqSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationAssocReqSum.setDescription('Represents the total number of station association request.')
hpnicfDot11StationReassocReqSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationReassocReqSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationReassocReqSum.setDescription('Represents the total number of station reassociation request.')
hpnicfDot11StationReassocFailSum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationReassocFailSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationReassocFailSum.setDescription('Represents the total number of station reassociation failure.')
hpnicfDot11ACBASSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 1))
hpnicfDot11ACBASTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 2))
hpnicfDot11ACBASIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: hpnicfDot11ACBASIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBASIfTable.setDescription('Represents the BAS information of interfaces.')
hpnicfDot11ACBASIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACBASIfIndex"))
if mibBuilder.loadTexts: hpnicfDot11ACBASIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBASIfEntry.setDescription('Each entry represents the BAS information of an interface')
hpnicfDot11ACBASIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11ACBASIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBASIfIndex.setDescription('The ifIndex of the BAS interface. ')
hpnicfDot11ACBASIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACBASIfDescr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBASIfDescr.setDescription('A textual string containing information about the BAS interface. ')
hpnicfDot11ACBASIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 4, 2, 3, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACBASIfType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACBASIfType.setDescription('The type of the BAS interface. ')
hpnicfDot11ACStaUserAuthCurNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthCurNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthCurNumber.setDescription('Represents the current number of user authenticated with this AC.')
hpnicfDot11ACStaUserConnFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserConnFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserConnFailCnt.setDescription('Represents the total number of user disconnected with this AC.')
hpnicfDot11ACStaUserAuthReqCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthReqCnt.setDescription('Represents the total number of user authenticate request with this AC.')
hpnicfDot11ACStaUserAuthSuccCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthSuccCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthSuccCnt.setDescription('Represents the total number of users authenticated successful with this AC.')
hpnicfDot11ACStaUserAuthFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAuthFailCnt.setDescription('Represents the total number of user authenticated failed with this AC.')
hpnicfDot11ACStaUserAllAuthCntCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAllAuthCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAllAuthCntCM.setDescription('Represents the total number of users authenticated with this AC.')
hpnicfDot11ACStaUserPortalOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserPortalOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserPortalOnlineNum.setDescription('Represents the number of online portal users authenticated by RADIUS, including MAC-trigger and IMSIAuth users.')
hpnicfDot11ACStaUserFreeAuthOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserFreeAuthOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserFreeAuthOnlineNum.setDescription('Numbers of online user is no need authenticated.')
hpnicfDot11ACStaUserAssociateAuthOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAssociateAuthOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAssociateAuthOnlineNum.setDescription('Represents the number of online users authenticated by associated authentication, excluding AutoAuth users.')
hpnicfDot11ACStaUserMacAuthOnlineNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserMacAuthOnlineNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserMacAuthOnlineNum.setDescription('The numbers of online user which is launched authentication by MAC address and authenticated by Radius.')
hpnicfDot11ACStaUserPortalLostConnectionCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserPortalLostConnectionCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserPortalLostConnectionCnt.setDescription('For PortalAuth user, represents disconnection count but voluntarily disconnect, it should not delete authenticated user when client roamed.')
hpnicfDot11ACStaUserFreeAuthLostConnectionCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserFreeAuthLostConnectionCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserFreeAuthLostConnectionCnt.setDescription('For FreeAuth user, represents disconnection count but voluntarily disconnect, it should not delete authenticated user when client roamed.')
hpnicfDot11ACStaUserAssociateAuthLostConnectionCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAssociateAuthLostConnectionCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAssociateAuthLostConnectionCnt.setDescription('For AssociateAuth user, represents disconnection count but voluntarily disconnect, it should not delete authenticated user when client roamed.')
hpnicfDot11ACStaUserMacAuthLostConnectionCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserMacAuthLostConnectionCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserMacAuthLostConnectionCnt.setDescription('For MacAuth user, represents disconnection count but voluntarily disconnect, it should not delete authenticated user when client roamed.')
hpnicfDot11ACStaPortalAuthReqCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaPortalAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaPortalAuthReqCnt.setDescription('Represents PortalAuth request count after AP up.')
hpnicfDot11ACStaAssociateAuthReqCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaAssociateAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaAssociateAuthReqCnt.setDescription('Represents AssociateAuth request count after AP up.')
hpnicfDot11ACStaMacAuthReqCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaMacAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaMacAuthReqCnt.setDescription('Represents MacAuth request count after AP up.')
hpnicfDot11ACStaPortalAuthSuccCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaPortalAuthSuccCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaPortalAuthSuccCnt.setDescription('Represents count of PortalAuth authenticated successfully after AP up.')
hpnicfDot11ACStaAssociateAuthSuccCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaAssociateAuthSuccCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaAssociateAuthSuccCnt.setDescription('Represents count of AssociateAuth authenticated successfully after AP up.')
hpnicfDot11ACStaMacAuthSuccCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaMacAuthSuccCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaMacAuthSuccCnt.setDescription('Represents count of MacAuth authenticated successfully after AP up.')
hpnicfDot11ACStaPortalAuthReqFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaPortalAuthReqFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaPortalAuthReqFailCnt.setDescription('Represents count of PortalAuth failure in request after AP up.')
hpnicfDot11ACStaAssociateAuthReqFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaAssociateAuthReqFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaAssociateAuthReqFailCnt.setDescription('Represents count of AssociateAuth failure in request after AP up.')
hpnicfDot11ACStaMacAuthReqFailCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaMacAuthReqFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaMacAuthReqFailCnt.setDescription('Represents count of MacAuth failure in request after AP up.')
hpnicfDot11ACStaUserAutoAuthOnlineNumCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAutoAuthOnlineNumCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAutoAuthOnlineNumCM.setDescription('Represents the number of online users authenticated by auto authentication.')
hpnicfDot11ACStaUserAutoAuthLostConnectionCntCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAutoAuthLostConnectionCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaUserAutoAuthLostConnectionCntCM.setDescription('Represents the disconnection count of AutoAuth users, excluding the ones who disconnect AP by themselves.')
hpnicfDot11ACStaAutoAuthReqCntCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaAutoAuthReqCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaAutoAuthReqCntCM.setDescription('Represents the count of AutoAuth requests after AP up.')
hpnicfDot11ACStaAutoAuthSuccCntCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaAutoAuthSuccCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaAutoAuthSuccCntCM.setDescription('Represents the count of successful AutoAuth authentications after AP up.')
hpnicfDot11ACStaAutoAuthReqFailCntCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACStaAutoAuthReqFailCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaAutoAuthReqFailCntCM.setDescription('Represents the count of failed AutoAuth requests after AP is up.')
hpnicfDot11ACPortalStatisticCMTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 7), )
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatisticCMTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatisticCMTable.setDescription('The table describes portal statistics information.')
hpnicfDot11ACPortalStatisticCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACPortalStatisticSSIDCM"))
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatisticCMEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatisticCMEntry.setDescription('Each entry contains the portal statistics information of an SSID.')
hpnicfDot11ACPortalStatisticSSIDCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatisticSSIDCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatisticSSIDCM.setDescription('Represents the service policy name.')
hpnicfDot11ACPortalStatAuthReqCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatAuthReqCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatAuthReqCM.setDescription('Represents the total number of portal authentication requests from portal server to AC.')
hpnicfDot11ACPortalStatAuthRespCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatAuthRespCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACPortalStatAuthRespCM.setDescription('Represents the total number of portal authentication responses from AC to portal server.')
hpnicfDot11CAPWAPTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfDot11CAPWAPTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CAPWAPTunnelTable.setDescription('The table will list all the APs which are connecting to the AC by the CAPWAP tunnel protocol.')
hpnicfDot11CAPWAPTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11CurrTunnelAPID"))
if mibBuilder.loadTexts: hpnicfDot11CAPWAPTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CAPWAPTunnelEntry.setDescription('Each entry contains information of data tunnel and control tunnel of AP which is connecting to AC.')
hpnicfDot11CurrTunnelAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1, 1), HpnicfDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11CurrTunnelAPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrTunnelAPID.setDescription('To uniquely identify the CAPWAP tunnel set up between the AP identified by APID and a specific AC.')
hpnicfDot11CtrlTunnelCurrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1, 2), HpnicfDot11TunnelSecSchemType().clone('cleartxt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CtrlTunnelCurrSec.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CtrlTunnelCurrSec.setDescription('Represents what security scheme is in use for control tunnel.')
hpnicfDot11CtrlTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1, 3), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CtrlTunnelUpTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CtrlTunnelUpTime.setDescription('Represents how long for control tunnel up. If the value is zero, then tunnel is not set up.')
hpnicfDot11DataTunnelCurrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1, 4), HpnicfDot11TunnelSecSchemType().clone('cleartxt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11DataTunnelCurrSec.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DataTunnelCurrSec.setDescription('Represents what security scheme is in use for data tunnel.')
hpnicfDot11DataTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1, 5), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11DataTunnelUpTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DataTunnelUpTime.setDescription('Represents how long for data tunnel up. If the value is zero, then tunnel is not set up.')
hpnicfDot11CtrlTunnelUpTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CtrlTunnelUpTimeTicks.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CtrlTunnelUpTimeTicks.setDescription('Represents how long control tunnel is up. If the value is zero, then tunnel is not set up.')
hpnicfDot11ACMtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0))
hpnicfDot11ACMtTunnelSetupTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 1)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11CurrTunnelAPID"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTunlUpInfo"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTnlAPName"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTnlAPIPAddr"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapAPIPv6Addr"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtFirstTrapTime"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11ACMtTunnelSetupTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTunnelSetupTrap.setDescription('This notification is sent by AC when CAPWAP tunnel becomes up. By this way, NMS will immediately know tunnel up event. It is unnecessary to identify whether it is control or data tunnel.')
hpnicfDot11ACMtTunnelDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 2)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11CurrTunnelAPID"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTunlDwnInfo"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTnlAPName"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTnlAPIPAddr"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapAPIPv6Addr"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTunlDwnCount"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapTnlAPSysName"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtFirstTrapTime"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11ACMtTunnelDownTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTunnelDownTrap.setDescription('This notification is sent by AC when CAPWAP tunnel becomes down. By this way, NMS will immediately know tunnel down event. It is unnecessary to identify whether it is control or data tunnel.')
hpnicfDot11ACMtBackupSwtTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 3)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtTrapBackupSwitchInfo"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDot11ACMtBackupSwtTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtBackupSwtTrap.setDescription('This trap is sent by AC when AC switches from master to slave or from slave to master.')
hpnicfDot11ACLoadBalanceTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 4)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11LoadBalanceType"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11LoadBalanceThreshold"))
if mibBuilder.loadTexts: hpnicfDot11ACLoadBalanceTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACLoadBalanceTrap.setDescription('This trap is sent by AC when load-balance is enabled on AC.')
hpnicfDot11ACStaFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 5)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACMaxStaNum"))
if mibBuilder.loadTexts: hpnicfDot11ACStaFullTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStaFullTrap.setDescription('This notification will be sent when STA is full on AC.')
hpnicfDot11ACStatusSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 6)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11ACStatusSwitchInfo"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11SourceACNmsIP"))
if mibBuilder.loadTexts: hpnicfDot11ACStatusSwitchTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStatusSwitchTrap.setDescription('This notification will be sent when AC switches from standby to active or from standby to active.')
hpnicfDot11RunAPNumOverload = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 7)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11MaxAPNumPermitted"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11APConnectCount"))
if mibBuilder.loadTexts: hpnicfDot11RunAPNumOverload.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RunAPNumOverload.setDescription('The notification will be sent by AC when run AP number exceeds the threshold.')
hpnicfDot11RunAPNumOverloadRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 0, 8)).setObjects(("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11MaxAPNumPermitted"), ("HPN-ICF-DOT11-ACMT-MIB", "hpnicfDot11APConnectCount"))
if mibBuilder.loadTexts: hpnicfDot11RunAPNumOverloadRecover.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RunAPNumOverloadRecover.setDescription('The notification will be sent by AC when run AP number recover normal from overload state.')
hpnicfDot11ACMtTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1))
hpnicfDot11ACMtTrapTunlDwnInfo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tunnelTimeout", 1), ("keyUpdateFailure", 2), ("apReset", 3), ("apCrash", 4), ("apDeleted", 5), ("apCfgChange", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTunlDwnInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTunlDwnInfo.setDescription('Represents the reason for tunnel down. The following values are supported: tunnelTimeout - When AC detects the tunnel is broken, - it will notify NMS. keyUpdateFailure - rekey process is failed, tunnel will be broken. apReset - Administrator reset AP. apCrash - AP reboot for system crash. apDeleted - Delete AP from AC and trigger tunnel down. apCfgChange - The configuration for AP was changed.')
hpnicfDot11ACMtTrapTunlUpInfo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("up", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTunlUpInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTunlUpInfo.setDescription('Represents the reason for tunnel up. The following values are supported: up(1) - The AP joined AC. ')
hpnicfDot11ACMtTrapBackupSwitchInfo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("masterToSlave", 1), ("slaveToMaster", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapBackupSwitchInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapBackupSwitchInfo.setDescription('Represents status which the AC switches to. The following values are supported: masterToSlave - The AC switches from master to slave. slaveToMaster - The AC switches from slave to master. ')
hpnicfDot11ACMtTrapTnlAPName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTnlAPName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTnlAPName.setDescription('Represents name of the AP which sets up the tunnel with the AC. ')
hpnicfDot11ACMtTrapTnlAPIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTnlAPIPAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTnlAPIPAddr.setDescription('Represents IP address of the AP which sets up the tunnel with the AC. ')
hpnicfDot11LoadBalanceType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traffic", 1), ("session", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceType.setDescription('Represents which kind load balance is enabled by AC. The following values are supported: traffic mode load-balancing: traffic snapshot is considered. session mode load-balancing: the number of users associated with the AP/radio is considered. ')
hpnicfDot11LoadBalanceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceThreshold.setDescription('Represents the value of load balance threshold. ')
hpnicfDot11ACMtTrapAPIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapAPIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapAPIPv6Addr.setDescription('Represents IPv6 address of the AP which sets up the tunnel with the AC.')
hpnicfDot11ACMtTrapTunlDwnCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTunlDwnCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTunlDwnCount.setDescription('Represents how many times that the tunnel between AC and AP has down.')
hpnicfDot11ACMaxStaNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 10), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMaxStaNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMaxStaNum.setDescription('Represents the max number of STA on AC.')
hpnicfDot11ACMtTrapTnlAPSysName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTnlAPSysName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapTnlAPSysName.setDescription('Represents system name of the AP which sets up the tunnel with the AC.')
hpnicfDot11ACMtFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 12), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtFirstTrapTime.setDescription('Represents the first trap time.')
hpnicfDot11ACStatusSwitchInfo = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activeToStandby", 1), ("standbyToActive", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACStatusSwitchInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACStatusSwitchInfo.setDescription('Represents status which the AC switches to. The following values are supported: activeToStandby - The AC switches from active to standby. standbyToActive - The AC switches from standby to active. ')
hpnicfDot11SourceACNmsIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11SourceACNmsIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SourceACNmsIP.setDescription('Represents the NMS IP address of master AC. ')
hpnicfDot11ACMtTrapAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 1, 3, 1, 15), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACMtTrapAPMacAddress.setDescription('Represents the MAC address of an AP.')
mibBuilder.exportSymbols("HPN-ICF-DOT11-ACMT-MIB", hpnicfDot11ACSouthifPacketInputBytes=hpnicfDot11ACSouthifPacketInputBytes, hpnicfDot11ACBASIfType=hpnicfDot11ACBASIfType, hpnicfDot11ACPortalStatAuthRespCM=hpnicfDot11ACPortalStatAuthRespCM, hpnicfDot11ACBASInfo=hpnicfDot11ACBASInfo, hpnicfDot11AcUploadFrameCnt=hpnicfDot11AcUploadFrameCnt, hpnicfDot11ACMtTrapTnlAPIPAddr=hpnicfDot11ACMtTrapTnlAPIPAddr, hpnicfDot11ACPortalStatisticSSIDCM=hpnicfDot11ACPortalStatisticSSIDCM, hpnicfDot11StationAssocRejectedSum=hpnicfDot11StationAssocRejectedSum, hpnicfDot11LoadBalanceType=hpnicfDot11LoadBalanceType, hpnicfDot11ACStaUserMacAuthOnlineNum=hpnicfDot11ACStaUserMacAuthOnlineNum, hpnicfDot11StationExDeAuthenSum=hpnicfDot11StationExDeAuthenSum, hpnicfDot11ACStaUserPortalOnlineNum=hpnicfDot11ACStaUserPortalOnlineNum, hpnicfDot11ACStaUserAssociateAuthLostConnectionCnt=hpnicfDot11ACStaUserAssociateAuthLostConnectionCnt, hpnicfDot11ACStaSecAuthTypeStatis=hpnicfDot11ACStaSecAuthTypeStatis, hpnicfDot11ACBASIfEntry=hpnicfDot11ACBASIfEntry, hpnicfDot11ACObject=hpnicfDot11ACObject, hpnicfDot11ACLoadInfo=hpnicfDot11ACLoadInfo, hpnicfDot11ACStaUserAssociateAuthOnlineNum=hpnicfDot11ACStaUserAssociateAuthOnlineNum, hpnicfDot11CurrentACMACMode=hpnicfDot11CurrentACMACMode, hpnicfDot11StationCurAssocSum=hpnicfDot11StationCurAssocSum, hpnicfDot11ACMtTrapTunlDwnInfo=hpnicfDot11ACMtTrapTunlDwnInfo, hpnicfDot11ACStaMacAuthReqFailCnt=hpnicfDot11ACStaMacAuthReqFailCnt, hpnicfDot11ACStaUserMacAuthLostConnectionCnt=hpnicfDot11ACStaUserMacAuthLostConnectionCnt, hpnicfDot11ACBASSysObjects=hpnicfDot11ACBASSysObjects, hpnicfDot11DataTunnelCurrSec=hpnicfDot11DataTunnelCurrSec, hpnicfDot11StationAssocFailSum=hpnicfDot11StationAssocFailSum, hpnicfDot11MaxStationNumPermitted=hpnicfDot11MaxStationNumPermitted, hpnicfDot11RunAPNumOverloadRecover=hpnicfDot11RunAPNumOverloadRecover, hpnicfDot11ConnectAutoAPCount=hpnicfDot11ConnectAutoAPCount, hpnicfDot11ACMaxStaNum=hpnicfDot11ACMaxStaNum, hpnicfDot11ACStaAutoAuthSuccCntCM=hpnicfDot11ACStaAutoAuthSuccCntCM, hpnicfDot11ACBackupMode=hpnicfDot11ACBackupMode, hpnicfDot11CtrlTunnelUpTime=hpnicfDot11CtrlTunnelUpTime, hpnicfDot11StationReassocReqSum=hpnicfDot11StationReassocReqSum, hpnicfDot11CtrlTunnelUpTimeTicks=hpnicfDot11CtrlTunnelUpTimeTicks, hpnicfDot11ACSouthifPacketInputCount=hpnicfDot11ACSouthifPacketInputCount, hpnicfDot11ACMtTunnelSetupTrap=hpnicfDot11ACMtTunnelSetupTrap, hpnicfDot11ACIfStaNum=hpnicfDot11ACIfStaNum, hpnicfDot11MasterAPCount=hpnicfDot11MasterAPCount, hpnicfDot11ACIfIndex=hpnicfDot11ACIfIndex, hpnicfDot11ACStaUserFreeAuthLostConnectionCnt=hpnicfDot11ACStaUserFreeAuthLostConnectionCnt, hpnicfDot11ACStaAutoAuthReqCntCM=hpnicfDot11ACStaAutoAuthReqCntCM, hpnicfDot11ACMtTrapTunlUpInfo=hpnicfDot11ACMtTrapTunlUpInfo, hpnicfDot11ACStaUserAuthSuccCnt=hpnicfDot11ACStaUserAuthSuccCnt, hpnicfDot11ACBackupStatus=hpnicfDot11ACBackupStatus, hpnicfDot11ACSouthifPacketOutputCount=hpnicfDot11ACSouthifPacketOutputCount, hpnicfDot11TotalAPconnected=hpnicfDot11TotalAPconnected, hpnicfDot11ACIFLoadInfoTable=hpnicfDot11ACIFLoadInfoTable, hpnicfDot11CAPWAPTunnelTable=hpnicfDot11CAPWAPTunnelTable, hpnicfDot11ACMT=hpnicfDot11ACMT, hpnicfDot11StationAssocSum=hpnicfDot11StationAssocSum, hpnicfDot11ACStaUserConnFailCnt=hpnicfDot11ACStaUserConnFailCnt, hpnicfDot11ACBASTableObjects=hpnicfDot11ACBASTableObjects, hpnicfDot11LoadBalanceThreshold=hpnicfDot11LoadBalanceThreshold, hpnicfDot11ACObjectGroup=hpnicfDot11ACObjectGroup, hpnicfDot11ACStaUserAutoAuthLostConnectionCntCM=hpnicfDot11ACStaUserAutoAuthLostConnectionCntCM, hpnicfDot11ACIFLoadInfoEntry=hpnicfDot11ACIFLoadInfoEntry, hpnicfDot11AcDownloadFrameCnt=hpnicfDot11AcDownloadFrameCnt, hpnicfDot11ACMtTrapTnlAPName=hpnicfDot11ACMtTrapTnlAPName, hpnicfDot11ACStaMacAuthReqCnt=hpnicfDot11ACStaMacAuthReqCnt, hpnicfDot11ACLoadBalanceTrap=hpnicfDot11ACLoadBalanceTrap, hpnicfDot11ACStaUserAuthCurNumber=hpnicfDot11ACStaUserAuthCurNumber, PYSNMP_MODULE_ID=hpnicfDot11ACMT, hpnicfDot11ACStaAssociateAuthSuccCnt=hpnicfDot11ACStaAssociateAuthSuccCnt, hpnicfDot11ACMtTraps=hpnicfDot11ACMtTraps, hpnicfDot11ACStaAssociateAuthReqCnt=hpnicfDot11ACStaAssociateAuthReqCnt, hpnicfDot11ACMtTrapVarObjects=hpnicfDot11ACMtTrapVarObjects, hpnicfDot11ACPortalStatisticCMEntry=hpnicfDot11ACPortalStatisticCMEntry, hpnicfDot11ACStaUserFreeAuthOnlineNum=hpnicfDot11ACStaUserFreeAuthOnlineNum, hpnicfDot11ACStatusSwitchTrap=hpnicfDot11ACStatusSwitchTrap, hpnicfDot11ACPortalStatAuthReqCM=hpnicfDot11ACPortalStatAuthReqCM, hpnicfDot11MaxAPNumPermitted=hpnicfDot11MaxAPNumPermitted, hpnicfDot11ACBASIfDescr=hpnicfDot11ACBASIfDescr, hpnicfDot11StationReassocFailSum=hpnicfDot11StationReassocFailSum, hpnicfDot11CtrlTunnelCurrSec=hpnicfDot11CtrlTunnelCurrSec, hpnicfDot11ACStaUserAuthFailCnt=hpnicfDot11ACStaUserAuthFailCnt, hpnicfDot11BackupACNMSIP=hpnicfDot11BackupACNMSIP, hpnicfDot11ACStaUserAutoAuthOnlineNumCM=hpnicfDot11ACStaUserAutoAuthOnlineNumCM, hpnicfDot11ACMtTrapBackupSwitchInfo=hpnicfDot11ACMtTrapBackupSwitchInfo, hpnicfDot11ACStaUserPortalLostConnectionCnt=hpnicfDot11ACStaUserPortalLostConnectionCnt, hpnicfDot11ACMtBackupSwtTrap=hpnicfDot11ACMtBackupSwtTrap, hpnicfDot11APConnectCount=hpnicfDot11APConnectCount, hpnicfDot11RunAPNumOverload=hpnicfDot11RunAPNumOverload, hpnicfDot11AcDownloadFrameBytes=hpnicfDot11AcDownloadFrameBytes, hpnicfDot11ACMtTrapAPMacAddress=hpnicfDot11ACMtTrapAPMacAddress, hpnicfDot11ACStaFullTrap=hpnicfDot11ACStaFullTrap, hpnicfDot11SlaveAPCount=hpnicfDot11SlaveAPCount, hpnicfDot11ACStatusSwitchInfo=hpnicfDot11ACStatusSwitchInfo, hpnicfDot11DataTunnelUpTime=hpnicfDot11DataTunnelUpTime, hpnicfDot11CAPWAPTunnelEntry=hpnicfDot11CAPWAPTunnelEntry, hpnicfDot11ACMtTunnelDownTrap=hpnicfDot11ACMtTunnelDownTrap, hpnicfDot11ACSwitchCnt=hpnicfDot11ACSwitchCnt, hpnicfDot11ACMtTrapTunlDwnCount=hpnicfDot11ACMtTrapTunlDwnCount, hpnicfDot11StationAssocReqSum=hpnicfDot11StationAssocReqSum, hpnicfDot11SourceACNmsIP=hpnicfDot11SourceACNmsIP, hpnicfDot11BackupACRole=hpnicfDot11BackupACRole, hpnicfDot11ACStaPortalAuthReqFailCnt=hpnicfDot11ACStaPortalAuthReqFailCnt, hpnicfDot11ACStaPortalAuthReqCnt=hpnicfDot11ACStaPortalAuthReqCnt, hpnicfDot11ACBASIfTable=hpnicfDot11ACBASIfTable, hpnicfDot11ACStaPortalAuthSuccCnt=hpnicfDot11ACStaPortalAuthSuccCnt, hpnicfDot11AcUploadFrameBytes=hpnicfDot11AcUploadFrameBytes, hpnicfDot11ACStaUserSecAuthStatis=hpnicfDot11ACStaUserSecAuthStatis, hpnicfDot11ACStaAutoAuthReqFailCntCM=hpnicfDot11ACStaAutoAuthReqFailCntCM, hpnicfDot11PersistentAPCount=hpnicfDot11PersistentAPCount, hpnicfDot11ACStaAssociateAuthReqFailCnt=hpnicfDot11ACStaAssociateAuthReqFailCnt, hpnicfDot11ACMtNotifyGroup=hpnicfDot11ACMtNotifyGroup, hpnicfDot11RunAPNumThreshold=hpnicfDot11RunAPNumThreshold, hpnicfDot11ACSouthifPacketOutputBytes=hpnicfDot11ACSouthifPacketOutputBytes, hpnicfDot11CurrTunnelAPID=hpnicfDot11CurrTunnelAPID, hpnicfDot11ACStaMacAuthSuccCnt=hpnicfDot11ACStaMacAuthSuccCnt, hpnicfDot11StationReassocSum=hpnicfDot11StationReassocSum, hpnicfDot11WLANAssocStatisInfo=hpnicfDot11WLANAssocStatisInfo, hpnicfDot11ACStaUserAllAuthCntCM=hpnicfDot11ACStaUserAllAuthCntCM, hpnicfDot11ACPortalStatisticCMTable=hpnicfDot11ACPortalStatisticCMTable, hpnicfDot11ACMtTrapAPIPv6Addr=hpnicfDot11ACMtTrapAPIPv6Addr, hpnicfDot11RemainingAPcapacity=hpnicfDot11RemainingAPcapacity, hpnicfDot11ACMtFirstTrapTime=hpnicfDot11ACMtFirstTrapTime, hpnicfDot11ACStaUserAuthReqCnt=hpnicfDot11ACStaUserAuthReqCnt, hpnicfDot11ACMtTrapTnlAPSysName=hpnicfDot11ACMtTrapTnlAPSysName, hpnicfDot11CAPWAPTunnelGroup=hpnicfDot11CAPWAPTunnelGroup, hpnicfDot11ACIfName=hpnicfDot11ACIfName, hpnicfDot11ACBASIfIndex=hpnicfDot11ACBASIfIndex, hpnicfDot11StationConnectCount=hpnicfDot11StationConnectCount, hpnicfDot11ACIfApNum=hpnicfDot11ACIfApNum)
