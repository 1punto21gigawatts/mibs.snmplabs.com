#
# PySNMP MIB module RETIX-SWITCHSTAKII-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RETIX-SWITCHSTAKII-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("RFC1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Unsigned32, NotificationType, Counter64, enterprises, Gauge32, IpAddress, iso, Counter32, Bits, TimeTicks, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Unsigned32", "NotificationType", "Counter64", "enterprises", "Gauge32", "IpAddress", "iso", "Counter32", "Bits", "TimeTicks", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
retix = MibIdentifier((1, 3, 6, 1, 4, 1, 72))
switchStakII = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20))
unitProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 1))
baseUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 2))
stakbus = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 3))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 4))
vlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 72, 20, 4, 1))
baseModule = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tenPorts2AUI", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseModule.setStatus('mandatory')
if mibBuilder.loadTexts: baseModule.setDescription(' Identifies the type of main PCB installed.')
io1Module = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vacant", 1), ("sixPort10BaseT", 2), ("fastEthernet", 3), ("stakbus", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: io1Module.setStatus('mandatory')
if mibBuilder.loadTexts: io1Module.setDescription(' Identifies the type of card installed in the IO1 connector')
io2Module = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vacant", 1), ("sixPort10BaseT", 2), ("fastEthernet", 3), ("stakbus", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: io2Module.setStatus('mandatory')
if mibBuilder.loadTexts: io2Module.setDescription(' Identifies the type of card installed in the IO2 connector')
baseBootFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBootFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: baseBootFirmwareVersion.setDescription(' Version number of current boot firmware in decimal, (i.e. V01.00 is displayed as 256)')
baseSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: baseSoftwareVersion.setDescription(' Version number of current software in decimal, (i.e. V01.03 is displayed as 259)')
baseErrorLog = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseErrorLog.setStatus('mandatory')
if mibBuilder.loadTexts: baseErrorLog.setDescription('A stored value indicating that the unit has experienced a fault. Log information is formatted as a four digit hex number. Set to zero to clear the logged fault. Record this value and call Retix technical support.')
stkbusIOPort = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("io1", 1), ("io2", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusIOPort.setStatus('mandatory')
if mibBuilder.loadTexts: stkbusIOPort.setDescription('Represents the IO port containing a StakbusII card. Only one Stakbus card is permitted per unit')
stkbusSpeed = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: stkbusSpeed.setDescription('Speed in Mbps of the installed Stakbus (StakbusII = 175Mbps).')
stkbusNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: stkbusNodeAddress.setDescription('Address of the Stakbus interface as set on front panel dial (0..15).')
stkbusRingOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ringOperational", 1), ("ringNotOperational", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stkbusRingOperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: stkbusRingOperationalStatus.setDescription('The status of the Retix Stakbus interface ring.')
vlanEnableDisable = MibScalar((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanEnableDisable.setDescription('Enables or Disables VLAN operation on this unit.')
portVLANTable = MibTable((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2), )
if mibBuilder.loadTexts: portVLANTable.setStatus('mandatory')
if mibBuilder.loadTexts: portVLANTable.setDescription('Table of port based VLAN configurations. Entries (rows) are added to the table by issuing a SET command with the EnableAdd value for the portVLANEntryEdit object. The new row is created using the instantiations.')
portVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1), ).setIndexNames((0, "RETIX-SWITCHSTAKII-MIB", "portVLANEntryPortID"), (0, "RETIX-SWITCHSTAKII-MIB", "portVLANEntryVLANID"))
if mibBuilder.loadTexts: portVLANEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portVLANEntry.setDescription('This is an entry in the portVLANTable.')
portVLANEntryPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVLANEntryPortID.setStatus('mandatory')
if mibBuilder.loadTexts: portVLANEntryPortID.setDescription('Port number for this VLAN configuration.')
portVLANEntryVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVLANEntryVLANID.setStatus('mandatory')
if mibBuilder.loadTexts: portVLANEntryVLANID.setDescription('VLAN number or ID.')
portVLANEntryEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 72, 20, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableAdd", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVLANEntryEdit.setStatus('mandatory')
if mibBuilder.loadTexts: portVLANEntryEdit.setDescription('When set to enableAdd(1) the instantiations will be used to create a new table entry (row). Existing entries can be disabled(2) or deleted (3).')
mibBuilder.exportSymbols("RETIX-SWITCHSTAKII-MIB", io2Module=io2Module, stkbusNodeAddress=stkbusNodeAddress, portVLANTable=portVLANTable, portVLANEntryVLANID=portVLANEntryVLANID, portVLANEntryEdit=portVLANEntryEdit, vlanConfig=vlanConfig, vlan=vlan, baseErrorLog=baseErrorLog, baseSoftwareVersion=baseSoftwareVersion, switchStakII=switchStakII, stakbus=stakbus, baseBootFirmwareVersion=baseBootFirmwareVersion, baseModule=baseModule, stkbusIOPort=stkbusIOPort, retix=retix, portVLANEntryPortID=portVLANEntryPortID, stkbusSpeed=stkbusSpeed, unitProfile=unitProfile, portVLANEntry=portVLANEntry, stkbusRingOperationalStatus=stkbusRingOperationalStatus, baseUnit=baseUnit, vlanEnableDisable=vlanEnableDisable, io1Module=io1Module)
