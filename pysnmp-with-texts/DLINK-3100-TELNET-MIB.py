#
# PySNMP MIB module DLINK-3100-TELNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-TELNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:49:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Gauge32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, TimeTicks, NotificationType, ObjectIdentity, Integer32, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "TimeTicks", "NotificationType", "ObjectIdentity", "Integer32", "MibIdentifier", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
rlTelnet = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58))
rlTelnet.setRevisions(('2008-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlTelnet.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlTelnet.setLastUpdated('200811240000Z')
if mibBuilder.loadTexts: rlTelnet.setOrganization('Dlink, Inc. Dlink Semiconductor, Inc.')
if mibBuilder.loadTexts: rlTelnet.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rlTelnet.setDescription('This private MIB module defines telnet private MIBs.')
rlTelnetMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTelnetMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlTelnetMibVersion.setDescription("MIB's version, the current version is 1.")
rlTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTelnetPassword.setStatus('current')
if mibBuilder.loadTexts: rlTelnetPassword.setDescription('Telnet Password')
rlTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTelnetTimeout.setStatus('current')
if mibBuilder.loadTexts: rlTelnetTimeout.setDescription('The number of minutes after which the TCP connection is closed if no activity is detected from the Client')
rlTelnetUsersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4), )
if mibBuilder.loadTexts: rlTelnetUsersTable.setStatus('current')
if mibBuilder.loadTexts: rlTelnetUsersTable.setDescription('This table hold information about current telnet sessions')
rlTelnetUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4, 1), ).setIndexNames((0, "DLINK-3100-TELNET-MIB", "rlTelnetSessionId"))
if mibBuilder.loadTexts: rlTelnetUsersEntry.setStatus('current')
if mibBuilder.loadTexts: rlTelnetUsersEntry.setDescription('The row definition for this table.')
rlTelnetSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTelnetSessionId.setStatus('current')
if mibBuilder.loadTexts: rlTelnetSessionId.setDescription('Telnet Session ID')
rlTelnetSessionClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTelnetSessionClientAddressType.setStatus('current')
if mibBuilder.loadTexts: rlTelnetSessionClientAddressType.setDescription('Telnet Session Client Inet address type')
rlTelnetSessionClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTelnetSessionClientAddress.setStatus('current')
if mibBuilder.loadTexts: rlTelnetSessionClientAddress.setDescription('Telnet Session Client Inet address')
rlTelnetSessionLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTelnetSessionLoginTime.setStatus('current')
if mibBuilder.loadTexts: rlTelnetSessionLoginTime.setDescription('Telnet Session Login Time string')
rlTelnetSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTelnetSessionStatus.setStatus('current')
if mibBuilder.loadTexts: rlTelnetSessionStatus.setDescription('Telnet Session status. After status has been set to diconnect the sessions is closed and the matching entry is deleted from the table.')
rlTelnetLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTelnetLoginBanner.setStatus('current')
if mibBuilder.loadTexts: rlTelnetLoginBanner.setDescription('Telnet Login Banner. When telnet connection is established, the banner is the concatanation of this MIB and rlTelnetSecondLoginBanner.')
rlTelnetSecondLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTelnetSecondLoginBanner.setStatus('current')
if mibBuilder.loadTexts: rlTelnetSecondLoginBanner.setDescription('Telnet Login Banner Extension. When telnet connection is established, the banner is the concatanation of rlTelnetLoginBanner and this MIB')
rlTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 58, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTelnetEnable.setStatus('current')
if mibBuilder.loadTexts: rlTelnetEnable.setDescription('<ip telnet server> command added. Communication via this MIB.')
mibBuilder.exportSymbols("DLINK-3100-TELNET-MIB", rlTelnetSessionClientAddressType=rlTelnetSessionClientAddressType, rlTelnetUsersTable=rlTelnetUsersTable, rlTelnetSessionClientAddress=rlTelnetSessionClientAddress, rlTelnet=rlTelnet, rlTelnetMibVersion=rlTelnetMibVersion, rlTelnetSessionLoginTime=rlTelnetSessionLoginTime, rlTelnetSecondLoginBanner=rlTelnetSecondLoginBanner, rlTelnetEnable=rlTelnetEnable, PYSNMP_MODULE_ID=rlTelnet, rlTelnetSessionStatus=rlTelnetSessionStatus, rlTelnetSessionId=rlTelnetSessionId, rlTelnetLoginBanner=rlTelnetLoginBanner, rlTelnetUsersEntry=rlTelnetUsersEntry, rlTelnetTimeout=rlTelnetTimeout, rlTelnetPassword=rlTelnetPassword)
