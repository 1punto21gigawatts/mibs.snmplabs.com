#
# PySNMP MIB module MRV-IN-REACH-INTERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-INTERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipAdEntAddr, ipNetToMediaNetAddress = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr", "ipNetToMediaNetAddress")
mrvInReachProductDivision, TypedAddress, DateTime, AddressType = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision", "TypedAddress", "DateTime", "AddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Counter32, Bits, ObjectIdentity, Counter64, Unsigned32, MibIdentifier, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Counter32", "Bits", "ObjectIdentity", "Counter64", "Unsigned32", "MibIdentifier", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xInternetDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 4))
xInternet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10))
xIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 1))
xTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 2))
xSnmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 3))
xDomainResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4))
xSlip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 5))
xTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 6))
xTn3270 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 7))
xKerberos = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 8))
xPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 9))
xXremote = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 10))
xRotary = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 11))
xEgp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 12))
xOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 13))
xRouterIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14))
xRouterUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 15))
xRouterPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16))
xRip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 18))
xlpd = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 19))
xSecurID = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 20))
xSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 23))
ipGatewayAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayAddress1.setDescription("The internet address of the system's primary (first choice) gateway. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET PRIMARY GATEWAY ADDRESS and the value labeled 'Primary Gateway Address:' in the SERVER INTERNET CHARACTERISTICS display.")
ipGatewayAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayAddress2.setDescription("The internet address of the system's secondary (second choice) gateway. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET SECONDARY GATEWAY ADDRESS and the value labeled 'Secondary Gateway Address:' in the SERVER INTERNET CHARACTERISTICS display.")
ipAutoSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAutoSubnetMask.setStatus('deprecated')
if mibBuilder.loadTexts: ipAutoSubnetMask.setDescription("A control for automatic determination of subnet mask. 'disabled' indicates the system must use the mask as configured by the network manager. 'enabled' indicates that the system is to automatically change the subnet mask when the system's Internet address is changed. Corresponds directly to SERVER INTERNET SUBNET MASK AUTOCONFIGURE and the value labeled 'Subnet Mask Autoconfigure:' in the SERVER INTERNET CHARACTERISTICS display.")
ipReassembly = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipReassembly.setStatus('mandatory')
if mibBuilder.loadTexts: ipReassembly.setDescription("A control for reassembly of IP fragments. Corresponds directly to SERVER INTERNET REASSEMBLY and the value labeled 'Reassembly:' in the SERVER INTERNET CHARACTERISTICS display.")
ipFragmentsQueuedHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragmentsQueuedHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragmentsQueuedHigh.setDescription('Highest number of IP fragments queued.')
ipFragmentsQueuedCurrent = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragmentsQueuedCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragmentsQueuedCurrent.setDescription('Current number of IP fragments queued.')
ipGenAdExtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 1, 7), )
if mibBuilder.loadTexts: ipGenAdExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdExtTable.setDescription('Table of additional fields indexed by local IP address. An entry in this table is created or deleted when an entry in the MIB-II ipAddrTable is created or deleted. Although MIB-II specifies the ipAddrTable as read-only, MRV In-Reach implementations typically implement it as read-write to support modification of local IP addresses, network masks, and such.')
ipARPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipARPTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipARPTimeout.setDescription("A control to set the length of time in minutes before an unused ARP entry is purged from the ARP table. The default is 60 minutes. Corresponds directly to the value labeled 'Translation Table TTL' in the SERVER INTERNET CHARACTERISTICS display.")
ipGatewayPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayPingInterval.setDescription("A control to set the interval of time in seconds between successive pings to the primary gateway so as to determine its status. The default is 60 seconds. Corresponds directly to the value labeled 'Gateway Timeout' in the SERVER INTERNET CHARACTERISTICS display.")
ipConfigureBootp = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigureBootp.setStatus('mandatory')
if mibBuilder.loadTexts: ipConfigureBootp.setDescription("Control to use the BOOTP protocol upon startup to learn the unit's own internet address, subnet mask, primary and secondary gateway servers, domain name servers, time server and domain name.")
ipGenAdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1), ).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipGenAdExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdExtEntry.setDescription('A particular entry.')
ipGenAdEntExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("rotary", 2), ("slip", 3), ("ppp", 4))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGenAdEntExtType.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdEntExtType.setDescription('The way this local IP address is used, which may imply alternate, more intuitive ways to set it. primary general purpose for ordinary use rotary identificaton for rotary selection slip use for SLIP connection ppp use for PPP connection ')
ipGenAdEntExtBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGenAdEntExtBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdEntExtBroadcast.setDescription('Outgoing IP broadcast address associated with this local address. Value may be confined to logical compatibility with associated network mask.')
tcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 2, 1), )
if mibBuilder.loadTexts: tcpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortTable.setDescription('A list of TCP character port entries.')
tcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "tcpPortIndex"))
if mibBuilder.loadTexts: tcpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortEntry.setDescription('TCP parameter values for a character port.')
tcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
tcpPortConnectByAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortConnectByAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortConnectByAddress.setDescription("A control for requesting outgoing connection by internet address. 'disabled' indicates outgoing connections must be by Domain name. 'enabled' indicates that outgoing connections may be requested by internet address. Corresponds directly to PORT INTERNET CONNECTIONS and the presence of the label 'Internet Connections' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
tcpPortWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortWindowSize.setDescription("Size of the TCP window for TCP connections on the port. Corresponds directly to PORT INTERNET TCP WINDOW SIZE and the value labeled 'TCP Window Size:' in the PORT ALTERNATE CHARACTERISTICS display.")
tcpPortKeepAliveLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortKeepAliveLimit.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortKeepAliveLimit.setDescription('Number of minutes to maintain a TCP connection without response to keep-alive communication. A value of zero indicates no limit.')
tcpResequencing = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpResequencing.setStatus('mandatory')
if mibBuilder.loadTexts: tcpResequencing.setDescription("A control for keeping TCP messages received out-of-order to resequence them before using them. Corresponds directly to SERVER INTERNET TCP RESEQUENCING and the value labeled 'Resequencing:' in the SERVER INTERNET CHARACTERISTICS display.")
tcpQueuedSegs = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpQueuedSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpQueuedSegs.setDescription("Number of TCP segments in the TCP receive queues. Corresponds directly to the value labeled 'TCP Packets Queued:' in the SERVER INTERNET COUNTERS display.")
tcpDiscardSegs = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDiscardSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpDiscardSegs.setDescription("Number of TCP segments discarded due to exceeding the TCP receive queue limit. Corresponds directly to the value labeled 'TCP Packets Discarded:' in the SERVER INTERNET COUNTERS display.")
tcpConnectTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpConnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnectTimer.setDescription("Number of seconds to attempt a TCP connection without a response from the other side. The default value is 32 seconds. Corresponds directly to the SERVER INTERNET TCP CONNECT TIMER and the value labeled 'TCP Connect Timer' in the SERVER INTERNET CHARACTERISTICS display")
tcpLocalPortBase = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpLocalPortBase.setStatus('mandatory')
if mibBuilder.loadTexts: tcpLocalPortBase.setDescription("The value for port 0's tcp source port number.")
tcpLocalPortIncrement = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpLocalPortIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: tcpLocalPortIncrement.setDescription('The value by which the tcp source port number increases for each port greater than port 0.')
tcpRoutingTblSz = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpRoutingTblSz.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRoutingTblSz.setDescription('A control to set the size of the working routing table. The default is the current size of the table (64).')
tcpDataSendDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpDataSendDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tcpDataSendDelay.setDescription('A control to delay for the specified number of 10 millisecond ticks before sending the userdata string over the telnet connection.')
tcpAckDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpAckDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tcpAckDelay.setDescription('A Control to prevent sending a TCP ACK when we we change TCP window size.')
tcpRetransmitMin = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 3000)).clone(640)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpRetransmitMin.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRetransmitMin.setDescription('Number of milliseconds for the initial TCP Retransmit timer. This is the time at which a TCP session will initially retransmit unacknowledged packets.')
snmpAgentGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentGetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentGetCommunity.setDescription("The SNMP community name allowed to perform get-requests or get-next requests to this agent. Use of this value is case-insensitive. If the size is 0, the agent does not check the community name for these operations. Corresponds directly to SERVER INTERNET SNMP GET COMMUNITY and the value labeled 'Get Community:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentSetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentSetCommunity.setDescription("The SNMP community name allowed to perform set-requests to this agent. Use of this value is case-insensitive. If the size is 0, the agent does not check the community name for these operations. Corresponds directly to SERVER INTERNET SNMP SET COMMUNITY and the value labeled 'Set Community:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapCommunity.setDescription("The SNMP community name sent in traps from this agent. Use of this value preserves case. Corresponds directly to SERVER INTERNET SNMP TRAP COMMUNITY and the value labeled 'Trap Community:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentGetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentGetClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentGetClientNumber.setDescription("The number of client source addresses allowed to perform get-requests or get-next requests to this agent. If the value is 0, the agent does not check source address for these operations. Corresponds indirectly to the values labeled 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentSetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSetClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentSetClientNumber.setDescription("The number of client source addresses allowed to perform set-requests to this agent. If the value is 0, the agent does not check source address for these operations. Corresponds indirectly to the values labeled 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentTrapClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientNumber.setDescription("The number of client source addresses to which this agent sends traps. If the value is 0, the agent does not perform this operation. Corresponds indirectly to the values labeled 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
getClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 7), )
if mibBuilder.loadTexts: getClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: getClientTable.setDescription('A list of get client entries. The number of entries is given by the value of snmpAgentGetClientNumber.')
getClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "getClientIndex"))
if mibBuilder.loadTexts: getClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: getClientEntry.setDescription('Parameter values for a get client.')
getClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: getClientIndex.setDescription("Identification of a get client entry. Corresponds directly to the number in the label 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
getClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: getClientEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
getClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: getClientAddressType.setDescription("The type of network address contained in getClientAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. If getClientAddressType does not accompany getClientAddress in a set request, the default type is 'ip'. Corresponds indirectly to the address value labeled 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
getClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: getClientAddress.setDescription("The client's network address. If getClientAddressType does not accompany getClientAddress in a set request, the default type is 'ip'. Corresponds directly to the address value labeled 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
setClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 8), )
if mibBuilder.loadTexts: setClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: setClientTable.setDescription('A list of set client entries. The number of entries is given by the value of snmpAgentSetClientNumber.')
setClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "setClientIndex"))
if mibBuilder.loadTexts: setClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: setClientEntry.setDescription('Parameter values for a set client.')
setClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: setClientIndex.setDescription("Identification of a set client entry. Corresponds directly to the number in the label 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
setClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: setClientEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
setClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: setClientAddressType.setDescription("The type of network address contained in setClientAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. If setClientAddressType does not accompany setClientAddress in a set request, the default type is 'ip'. Corresponds indirectly to the address value labeled 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
setClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: setClientAddress.setDescription("The client's network address. When setting this value, the requester must supply setClientAddressType. If setClientAddressType does not accompany setClientAddress in a set request, the default type is 'ip'. Corresponds directly to the address value labeled 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
trapClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 9), )
if mibBuilder.loadTexts: trapClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientTable.setDescription('A list of trap client entries. The number of entries is given by the value of snmpAgentTrapClientNumber.')
trapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "trapClientIndex"))
if mibBuilder.loadTexts: trapClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientEntry.setDescription('Parameter values for a trap client.')
trapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientIndex.setDescription("Identification of a trap client entry. Corresponds directly to the number in the label 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
trapClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
trapClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientAddressType.setDescription("The type of network address contained in trapClientAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. If trapClientAddressType does not accompany trapClientAddress in a set request, the default type is 'ip'. Corresponds indirectly to the address value labeled 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
trapClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientAddress.setDescription("The client's network address. When setting this value, the requester must supply trapClientAddressType. If trapClientAddressType does not accompany trapClientAddress in a set request, the default type is 'ip'. Corresponds directly to the address value labeled 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentAuthFailureAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 10), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentAuthFailureAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentAuthFailureAddress.setDescription('The address of the client to most recently fail SNMP authorization.')
snmpAgentCommunityAuthenticationAlways = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentCommunityAuthenticationAlways.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentCommunityAuthenticationAlways.setDescription('When enabled, indicates that community string authentication is done always for Gets, Sets, and GetNexts. When disabled, community string authentication is done once; but bypassed on subsequent Gets, Sets or GetNexts from the same address.')
snmpAgentTrapClientPingHost1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1.setDescription('Configures the first trap client in the trapClientTable as a ping host. The InReach server will poll the ping host at a specified interval to determine connectivity. This feature is mutually exclusive with snmpAgentTrapClientQuerySourceHost1 and snmpAgentTrapClientQuerySourceHost2.')
snmpAgentTrapClientPingHost2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2.setDescription('Configures the second trap client in the trapClientTable as a ping host. The InReach server will poll the ping host at a specified interval to determine connectivity. This feature is mutually exclusive with snmpAgentTrapClientQuerySourceHost1 and snmpAgentTrapClientQuerySourceHost2.')
snmpAgentTrapClientPingHost1PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollInterval.setDescription('Indicates the time in seconds between polling the first ping host.')
snmpAgentTrapClientPingHost2PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollInterval.setDescription('Indicates the time in seconds between polling the second ping host.')
snmpAgentTrapClientPingHost1PollRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollRetries.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollRetries.setDescription('Indicates the maximum number of retries when polling the first ping host before concluding that connectivity is lost. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
snmpAgentTrapClientPingHost2PollRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollRetries.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollRetries.setDescription('Indicates the maximum number of retries when polling the second ping host before concluding that connectivity is lost. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
snmpAgentTrapClientQuerySourceHost1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1.setDescription('Configures the first trap client in the trapClientTable as a query source host. When enabled the InReach server will monitor incoming get-, get-next- and set-requests from this host as an indicator of connectivity. This feature is mutually exclusive with snmpAgentTrapClientPingHost1 and snmpAgentTrapClientPingHost2.')
snmpAgentTrapClientQuerySourceHost2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2.setDescription('Configures the second trap client in the trapClientTable as a query source host. When enabled the InReach server will monitor incoming get-, get-next- and set-requests from this host as an indicator of connectivity. This feature is mutually exclusive with snmpAgentTrapClientPingHost1 and snmpAgentTrapClientPingHost2.')
snmpAgentTrapClientQuerySourceHost1Timeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1Timeout.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1Timeout.setDescription('Indicates the time in seconds between SNMP queries from the first query source host before timing out and considering connectivity lost to that host. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
snmpAgentTrapClientQuerySourceHost2Timeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2Timeout.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2Timeout.setDescription('Indicates the time in seconds between SNMP queries from the first query source host before timing out and considering connectivity lost to that host. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
domainResolverSuffix = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 115))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverSuffix.setDescription("A partial domain name for the server to append to the end of an incomplete domain name provided by the user. Corresponds directly to SERVER INTERNET DEFAULT DOMAIN SUFFIX and the value labeled 'Domain Suffix:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverAddress1.setDescription("The internet address of a Domain Name Server. The system can use one or two such addresses, without preference. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET PRIMARY DOMAIN ADDRESS and the value labeled 'Primary Domain Address:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverAddress2.setDescription("The internet address of a Domain Name Server. The system can use one or two such addresses, without preference. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET SECONDARY DOMAIN ADDRESS and the value labeled 'Secondary Domain Address:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverTtl.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverTtl.setDescription("The number of hours to keep received Domain information. Corresponds directly to SERVER INTERNET DOMAIN TTL and the value labeled ' Domain TTL:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverNameNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainResolverNameNumber.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverNameNumber.setDescription("The number of Domain name mappings in this system's name cache.")
nameTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 4, 6), )
if mibBuilder.loadTexts: nameTable.setStatus('mandatory')
if mibBuilder.loadTexts: nameTable.setDescription('A list of Domain name entries. The number of entries is given by the value of domainResolverNameNumber.')
nameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "nameName"), (0, "MRV-IN-REACH-INTERNET-MIB", "nameAddress"))
if mibBuilder.loadTexts: nameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nameEntry.setDescription('Parameter values for a Domain name.')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
if mibBuilder.loadTexts: nameName.setDescription("A fully qualified domain name. Corresponds directly to the value labeled 'Domain Name' in the DOMAIN display.")
nameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nameAddress.setDescription("An Internet address corresponding to the Domain name. Corresponds directly to the value labeled 'Internet Address' in the DOMAIN display.")
nameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nameStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the PURGE DOMAIN command. Actual removal of the entry is implementation specific.")
nameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manager", 1), ("primary", 2), ("secondary", 3), ("rwho", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameSource.setStatus('mandatory')
if mibBuilder.loadTexts: nameSource.setDescription("Source of this entry. The value meanings are: local defined by manager (LOCAL) primary obtained from a primary name server secondary obtained from a secondary name server rwho obtained from rwho Corresponds directly to the value labeled 'Source' in the DOMAIN display.")
nameTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameTtl.setStatus('mandatory')
if mibBuilder.loadTexts: nameTtl.setDescription("The number of minutes remaining in the entry's time to live. Corresponds directly to the value labeled 'TTL' in the DOMAIN display.")
domainResolverPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4, 7))
domainResolverPppPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverPppPrimaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverPppPrimaryServer.setDescription("The internet address of the primary Domain Name Server to use in PPP IPCP negotiations. A value of 0.0.0.0 indicates no address. Corresponds directly to the value labeled 'Primary WINS Address:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverPppSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverPppSecondaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverPppSecondaryServer.setDescription("The internet address of the secondary Domain Name Server to use in PPP IPCP negotiations. A value of 0.0.0.0 indicates no address. Corresponds directly to the value labeled 'Secondary WINS Address:' in the SERVER INTERNET CHARACTERISTICS display.")
slipTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 5, 1), )
if mibBuilder.loadTexts: slipTable.setStatus('mandatory')
if mibBuilder.loadTexts: slipTable.setDescription('A list of SLIP character port entries.')
slipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "slipIndex"))
if mibBuilder.loadTexts: slipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slipEntry.setDescription('Parameter values for a SLIP port.')
slipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slipIndex.setDescription('An index value that uniquely identifies a port that can run SLIP. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
slipState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("compressed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipState.setStatus('mandatory')
if mibBuilder.loadTexts: slipState.setDescription("A control indicating whether SLIP is in operation on the port. Corresponds directly to PORT INTERNET SLIP and the value labeled 'SLIP' in the PORT CHARACTERISTICS display.")
slipLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slipLocalAddress.setDescription("The IP address assigned to the port. Corresponds directly to PORT SLIP ADDRESS and the value labeled 'SLIP Address:' in the PORT ALTERNATE CHARACTERISTICS display.")
slipRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slipRemoteAddress.setDescription("The IP address of the remote system attached to the port. Corresponds directly to PORT SLIP REMOTE and the value labeled 'Remote SLIP Address:' in the PORT ALTERNATE CHARACTERISTICS display.")
slipMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
if mibBuilder.loadTexts: slipMask.setDescription("The subnet mask to use for SLIP operation on the port. Corresponds directly to PORT SLIP MASK and the value labeled 'SLIP Mask:' in the PORT ALTERNATE CHARACTERISTICS display.")
slipPortPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketsReceived.setDescription("The number of SLIP packets received from the port. Corresponds directly to the value labeled 'Serial Packets Received:' in the PORT COUNTERS display.")
slipPortPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketsSent.setDescription("The number of SLIP packets sent to the port. Corresponds directly to the value labeled 'Serial Packets Sent:' in the PORT COUNTERS display.")
slipPortPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketsDiscarded.setDescription("The number of SLIP packets received from the port and discarded. Corresponds directly to the value labeled 'Serial Packets Discarded:' in the PORT COUNTERS display.")
slipPortPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketLengthErrors.setDescription("The number of SLIP packets received from the port with an incorrect number of bytes. Corresponds directly to the value labeled 'Serial Packet Length Errors:' in the PORT COUNTERS display.")
slipPortPacketChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketChecksumErrors.setDescription("The number of SLIP packets received from the port with an invalid checksum. Corresponds directly to the value labeled 'Serial Packet Checksum Errors:' in the PORT COUNTERS display.")
slipNetworkPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: slipNetworkPacketsReceived.setDescription("The number of SLIP packets received from the network for this port. Corresponds directly to the value labeled 'Network Packets Received:' in the PORT COUNTERS display.")
slipNetworkPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: slipNetworkPacketsSent.setDescription("The number of SLIP packets sent to the network from this port. Corresponds directly to the value labeled 'Network Packets Sent:' in the PORT COUNTERS display.")
slipNetworkPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: slipNetworkPacketsDiscarded.setDescription("The number of SLIP packets received from the network for this port and discarded. Corresponds directly to the value labeled 'Network Packets Discarded:' in the PORT COUNTERS display.")
telnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 1), )
if mibBuilder.loadTexts: telnetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortTable.setDescription('A list of Telnet character port entries.')
telnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "telnetPortIndex"))
if mibBuilder.loadTexts: telnetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortEntry.setDescription('Telnet parameter values for a character port.')
telnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
telnetPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortIncomingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortIncomingTcpPort.setDescription("The TCP port number offered for incoming connections to this character port. Corresponds directly to PORT TELNET REMOTE PORT and the value labeled 'Remote Port:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortOutgoingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortOutgoingTcpPort.setDescription("The TCP port number used by default for outgoing connections from this character port. Corresponds directly to PORT TELNET DEFAULT PORT and the value labeled 'Default Port:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortNewlineTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("cr", 2), ("crNull", 3), ("crLf", 4), ("std", 5), ("lfToCrLf", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNewlineTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortNewlineTranslation.setDescription("Translation to apply to newline sequences (CR/NULL or CR/LF) received from the network, before sending the newline to the character port. The value indicates the sequence sent to the character port, with 'none' meaning no translation. The lfToCrLf value converts the newline character LF received from the network to a CR/LF. Corresponds directly to PORT TELNET NEWLINE FILTERING and the value labeled 'Newline Filtering:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortTerminalType.setDescription("The terminal type character string for Telnet negotiations. Corresponds directly to PORT TELNET TERMINALTYPE and the value labeled 'TerminalType:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortEorReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortEorReflection.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortEorReflection.setDescription("Control for end-of-record handshake. Corresponds directly to PORT TELNET EOR REFLECTION and the value labeled 'EOR Reflection:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flowControl", 1), ("complete", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortBinaryMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortBinaryMode.setDescription("Control for operation of Telnet binary mode. The value meanings are: disabled refuse binary mode negotiation (INTERACTIVE) flowControl pass all but XON and XOFF (PASTHRU) complete pass all characters (PASSALL) Corresponds directly to PORT TELNET BINARY SESSION MODE and the value labeled 'Binary Session Mode:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortSendLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortSendLocation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortSendLocation.setDescription("A control indicating whether a Telnet session will initiate negotiation of the Send Location option. Corresponds directly to the PORT TELNET LOCATION and the value labeled 'Location' in the PORT TELNET CHARACTERISTICS display.")
telnetPortClientLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortClientLocation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortClientLocation.setDescription("The location of the Telnet client port. Corresponds directly to the value labeled 'Telnet Client Location' in the SESSION display.")
telnetPortPassiveSendLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortPassiveSendLocation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortPassiveSendLocation.setDescription("A control indicating whether a Telnet session will passively respond to negotiation of the Send Location option. When disabled and telnetPortSendLocation is disabled, we will refuse to negotiate this option. When telnetPortSendLocation is enabled, it takes precedence. Corresponds directly to the value labeled 'Passive Location' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 2), )
if mibBuilder.loadTexts: telnetSerialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTable.setDescription('A list of Telnet character port entries.')
telnetSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "telnetSerialPortIndex"))
if mibBuilder.loadTexts: telnetSerialPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEntry.setDescription('Telnet parameter values for a character port.')
telnetSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetSerialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
telnetSerialPortOptionDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortOptionDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortOptionDisplay.setDescription("Control for display of Telnet option negotiations. Corresponds directly to PORT TELNET OPTION DISPLAY and the value labeled 'Option Display:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortCsiEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortCsiEscape.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortCsiEscape.setDescription("Control for translation of 8-bit escape sequences received from the character port to 7-bit equivalents before transmission to the remote partner. Corresponds directly to PORT TELNET CSI ESCAPE and the value labeled 'CSI Escape:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortEchoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("disabled", 3), ("passive", 4), ("character", 5), ("line", 6), ("noecho", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEchoMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEchoMode.setDescription("Control for who echoes characters that come from the character port. The value meanings are: local terminal server echoes locally remote remote system echoes disabled don't default to local echo passive don't initiate negotiating of echo character initiate remote echo and suppress go ahead line reject remote echo and reject suppress go ahead noecho will not initiate echo, but will negotiate it Corresponds directly to PORT TELNET ECHO MODE and the value labeled 'Echo Mode:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortNewlineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crNull", 1), ("crLf", 2), ("verbatim", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortNewlineMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortNewlineMode.setDescription("Translation to apply to newline (carriage return) received from the character port, before sending the newline to the remote partner. The correspondence to command keywords is 'crNull' to NULL, 'crLF' to LINEFEED, and 'verbatim' to NOTHING (that is, no translation). Corresponds directly to PORT TELNET NEWLINE and the value labeled 'Newline:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediate", 1), ("buffered", 2), ("timed", 3), ("controlchar", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTransmitMode.setDescription("Criterion for deciding to send to the remote partner characters received from the character port. Corresponds directly to PORT TELNET TRANSMIT and the value labeled 'Transmit:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortTransmitCharacterTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitCharacterTimes.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTransmitCharacterTimes.setDescription("Number of character times to wait before transmitting when telnetSerialPortTransmitMode value is 'timed'. Corresponds directly to PORT TELNET TRANSMIT IDLETIME and the value labeled 'Transmit: Idle Time -' in the PORT TELNET CHARACTERISTICS display. This object may only be set to values 1..255. A value of 0 may be read if telnetSerialPortTransmitMode has a value of immediate or buffered")
telnetSerialPortAbortOutputCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAbortOutputCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortAbortOutputCharacter.setDescription("Character input from the character port to cause aborting output. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ABORT OUTPUT and the value labeled 'Abort Output Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortAttentionCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAttentionCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortAttentionCharacter.setDescription("Character input from the character port to cause an attention notification to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ATTENTION and the value labeled 'Attention Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortEraseKeyCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseKeyCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEraseKeyCharacter.setDescription("Character input from the character port to cause erasure of the previous input character. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ERASE CHARACTER and the value labeled 'Erase Keystroke Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortEraseLineCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseLineCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEraseLineCharacter.setDescription("Character input from the character port to cause erasure of the previous line of input. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ERASE LINE and the value labeled 'Erase Line Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortInterruptCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterruptCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortInterruptCharacter.setDescription("Character input from the character port to cause sending an interrupt notification to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET INTERRUPT and the value labeled 'Interrupt Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortQueryCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortQueryCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortQueryCharacter.setDescription("Character input from the character port to cause sending a status query to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET QUERY and the value labeled 'Query Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortSynchronizeCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortSynchronizeCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortSynchronizeCharacter.setDescription("Character input from the character port to cause sending a synchronization attempt to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET SYNCHRONIZE and the value labeled 'Synchronize Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortUrgentBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortUrgentBreak.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortUrgentBreak.setDescription("Control for encoding breaks as Telnet urgent data. Corresponds directly to PORT TELNET URGENT BREAK and the value labeled 'Urgent Break:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortRs491 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortRs491.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortRs491.setDescription('A control to enable RS491 protocol processing on a port.')
telnetSerialPortTransmitBufferedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitBufferedTime.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTransmitBufferedTime.setDescription("Number of milliseconds to wait before transmitting when telnetSerialPortTransmitMode value is 'timed'. Corresponds directly to PORT TELNET TRANSMIT BUFFERED and the value labeled 'Transmit: Buff Time -' in the PORT TELNET CHARACTERISTICS display. This object may only be set to values 30..1500. A value of 0 may be read if telnetSerialPortTransmitMode has a value of immediate, idletime or controlchar")
telnetSerialPortInterpretInterruptAsBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterpretInterruptAsBreak.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortInterpretInterruptAsBreak.setDescription("Control to interpret a Telnet Interrupt Character coming from the network as a Telnet Break Character, and to send a break out the serial port. This control is necessary for those devices which can send Telnet Interrupt but not Telnet Break. Corresponds directly to the presence of 'Telnet Interrupts Interpreted as Break' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortPass8d = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortPass8d.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortPass8d.setDescription("Control to pass unaltered the hexadecimal character '8D'. This control is added to ensure that this character will pass through directly in a session with 8-bit characters and parity odd or even. Corresponds directly to the presence of 'Telnet Pass 8D' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortComControlClient = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlClient.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlClient.setDescription("Control to begin Telnet comport control option negotiations as a client when a Telnet session is initiated. The comport control option enables a port to do outbound modem dialing on a Telnet connection. Corresponds to the value labeled 'Client:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
telnetSerialPortComControlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlServer.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlServer.setDescription("Control to begin Telnet comport control option negotiations as a server when a Telnet session is initiated. Corresponds to the value labeled 'Server:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
telnetSerialPortComControlServerRaisesDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlServerRaisesDtr.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlServerRaisesDtr.setDescription("Control for the client to request that the server raises its DTR signal on the port at the begining of the Telnet connection. Corresponds to the value labeled 'Server Raises DTR:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
telnetSerialPortComControlClientTogglesDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlClientTogglesDtr.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlClientTogglesDtr.setDescription("Control to respond to the server's notification that its DCD has come high (or low) by raising (or lowering) DTR accordingly on the local port. Corresponds to the value labeled 'Client Toggles DTR:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
tn3270DeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceNumber.setDescription('The number of entries in the tn3270 Device table.')
tn3270LanguageNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageNumber.setDescription('The number of entries in the tn3270 Language table.')
tn3270PortKeymapStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortKeymapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortKeymapStatus.setDescription("Control for individual ports to create their own keymaps. Corresponds directly to SERVER TN3270 PORT KEYMAPS and the value labeled 'Port Keymaps:' in the SERVER TN3270 display.")
tn3270DeviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 4), )
if mibBuilder.loadTexts: tn3270DeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceTable.setDescription('A list of tn3270 terminal device entries.')
tn3270DeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "tn3270DeviceName"))
if mibBuilder.loadTexts: tn3270DeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceEntry.setDescription('Tn3270 parameter values for a terminal device entry.')
tn3270DeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceName.setDescription("The name of a generic terminal device. Corresponds directly to SERVER TN3270 DEVICE and the value labeled 'Device Name:' in the SERVER TN3270 DEVICE display.")
tn3270DeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the PURGE SERVER TN3270 DEVICE command. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. If a new device table entry is added to the table, the agent will copy the VT100 table as a default. If one plans to add a new table entry, one should not remove the VT100 entry.")
tn3270DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21)).clone('VT100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceType.setDescription("The terminal type character string for use when tn3270DeviceTn3270Type is insufficient. Corresponds directly to SERVER TN3270 DEVICE TERMINALTYPE and the value labeled 'TerminalType:' in the SERVER TN3270 DEVICE display.")
tn3270Device3278Model = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("model2", 1), ("model5", 2))).clone('model2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270Device3278Model.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270Device3278Model.setDescription("The 3278 model for the device. Corresponds directly to SERVER TN3270 DEVICE 3278Model and the value labeled '3278Model:' in the SERVER TN3270 DEVICE display.")
tn3270DeviceKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 5), Integer32().clone(70)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceKeyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceKeyNumber.setDescription('The number of Key table entries for this device.')
tn3270DeviceScreenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 6), Integer32().clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceScreenNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceScreenNumber.setDescription('The number of Screen table entries for this device.')
tn3270KeyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 5), )
if mibBuilder.loadTexts: tn3270KeyTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyTable.setDescription('A list of tn3270 key entries by device.')
tn3270KeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "tn3270KeyDeviceName"), (0, "MRV-IN-REACH-INTERNET-MIB", "tn3270KeyName"))
if mibBuilder.loadTexts: tn3270KeyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyEntry.setDescription('Tn3270 parameter values for a key entry for a device.')
tn3270KeyDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyDeviceName.setDescription("The name of a generic terminal device as in tn3270DeviceName. Corresponds directly to SERVER TN3270 DEVICE and the value labeled 'Device Name:' in the SERVER TN3270 DEVICE display.")
tn3270KeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("newline", 1), ("tab", 2), ("backtab", 3), ("cursorup", 4), ("cursorleft", 5), ("cursorright", 6), ("cursordown", 7), ("home", 8), ("delete", 9), ("eraseeof", 10), ("eraseinput", 11), ("insert", 12), ("flushinput", 13), ("refresh", 14), ("centsign", 15), ("duplicate", 16), ("fieldmark", 17), ("scroll", 18), ("status", 19), ("reset", 20), ("fastleft", 21), ("fastright", 22), ("showkeys", 23), ("print", 24), ("pf1", 39), ("pf2", 40), ("pf3", 41), ("pf4", 42), ("pf5", 43), ("pf6", 44), ("pf7", 45), ("pf8", 46), ("pf9", 47), ("pf10", 48), ("pf11", 49), ("pf12", 50), ("pf13", 51), ("pf14", 52), ("pf15", 53), ("pf16", 54), ("pf17", 55), ("pf18", 56), ("pf19", 57), ("pf20", 58), ("pf21", 59), ("pf22", 60), ("pf23", 61), ("pf24", 62), ("pa1", 63), ("pa2", 64), ("pa3", 65), ("sysreq", 66), ("enter", 67), ("clear", 68), ("cursorsel", 69), ("test", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyName.setDescription("The key name to which this entry applies. Corresponds directly to the key portion of SERVER TN3270 DEVICE KEYMAP and the value labeled '3270-key' in the 'Keymap:' section of the SERVER TN3270 DEVICE display.")
tn3270KeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyStatus.setStatus('deprecated')
if mibBuilder.loadTexts: tn3270KeyStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
tn3270KeyCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyCharacterSequence.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyCharacterSequence.setDescription("The ASCII character sequence for the key. Corresponds directly to the escape-sequence portion of SERVER TN3270 DEVICE KEYMAP and the value labeled 'KeyCode' in the 'Keymap:' section of the SERVER TN3270 DEVICE display.")
tn3270KeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyDescription.setDescription("Descriptive text for the key. Corresponds directly to the description portion of SERVER TN3270 DEVICE KEYMAP and the value labeled 'Description' in the SERVER TN3270 DEVICE display.")
tn3270ScreenTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 6), )
if mibBuilder.loadTexts: tn3270ScreenTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenTable.setDescription('A list of tn3270 screen action entries by device.')
tn3270ScreenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "tn3270ScreenDeviceName"), (0, "MRV-IN-REACH-INTERNET-MIB", "tn3270ScreenActionName"))
if mibBuilder.loadTexts: tn3270ScreenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenEntry.setDescription('Tn3270 parameter values for a screen action entry for a device.')
tn3270ScreenDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenDeviceName.setDescription("The name of a generic terminal device as in tn3270DeviceName. Corresponds directly to SERVER TN3270 DEVICE and the value labeled 'Device Name:' in the SERVER TN3270 DEVICE display.")
tn3270ScreenActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("eraseeol", 1), ("clearscr", 2), ("movecursor", 3), ("col132", 4), ("col80", 5), ("beep", 6), ("charset", 7), ("boldon", 8), ("boldoff", 9), ("blinkon", 10), ("blinkoff", 11), ("underscoreon", 12), ("underscoreoff", 13), ("reverseon", 14), ("reverseoff", 15), ("colorBlue", 16), ("colorRed", 17), ("colorPink", 18), ("colorGreen", 19), ("colorTurquoise", 20), ("colorYellow", 21), ("colorWhite", 22), ("status1", 26), ("status2", 27), ("reset1", 28), ("reset2", 29), ("reset3", 30), ("reset4", 31), ("base", 32), ("sgr", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenActionName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenActionName.setDescription("The screen action to which this entry applies. Corresponds directly to the action portion of SERVER TN3270 DEVICE SCREENMAP and the value labeled 'Terminal Function' in the 'Screenmap: section of the SERVER TN3270 DEVICE display.")
tn3270ScreenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenStatus.setStatus('deprecated')
if mibBuilder.loadTexts: tn3270ScreenStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
tn3270ScreenCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenCharacterSequence.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenCharacterSequence.setDescription("The ASCII character sequence for the screen action. Some actions may have a lesser length limit. Corresponds directly to the escape-sequence portion of SERVER TN3270 DEVICE SCREENMAP and the value labeled 'HexCode' in the 'Screenmap: section of the SERVER TN3270 DEVICE display.")
tn3270LanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 7), )
if mibBuilder.loadTexts: tn3270LanguageTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageTable.setDescription('A list of tn3270 language entries.')
tn3270LanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "tn3270LanguageName"))
if mibBuilder.loadTexts: tn3270LanguageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageEntry.setDescription('Tn3270 parameter values for a language entry.')
tn3270LanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageName.setDescription("The name of language for character translation tables. Corresponds directly to SERVER TN3270 LANGUAGE and the value labeled 'Language Name:' in the SERVER LANGUAGE display.")
tn3270LanguageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270LanguageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. If a new device table entry is added to the table, the agent will copy the USENGLSH table as the default.")
eToALanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 8), )
if mibBuilder.loadTexts: eToALanguageTable.setStatus('mandatory')
if mibBuilder.loadTexts: eToALanguageTable.setDescription('A list of language EBCDIC to ASCII conversion entries.')
eToALanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "eToALanguageName"), (0, "MRV-IN-REACH-INTERNET-MIB", "eToAOffset"))
if mibBuilder.loadTexts: eToALanguageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eToALanguageEntry.setDescription('EBCDIC to ASCII parameter values for a language entry.')
eToALanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToALanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: eToALanguageName.setDescription('The name of language from the language table.')
eToAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToAOffset.setStatus('mandatory')
if mibBuilder.loadTexts: eToAOffset.setDescription("EBCDIC character offset plus one, that is, the value 1 corresponds to an operational offset of 0. Corresponds directly to the offset portion of SERVER TN3270 LANGUAGE and the hexadecimal labels around the conversion table labeled 'EBCDIC to ASCII' in the SERVER LANGUAGE display.")
eToAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eToAValue.setStatus('mandatory')
if mibBuilder.loadTexts: eToAValue.setDescription("ASCII character value for the EBCDIC offset. Corresponds directly to the value portion of SERVER TN3270 LANGUAGE and the values in the conversion table labeled 'EBCDIC to ASCII' in the SERVER LANGUAGE display.")
aToELanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 9), )
if mibBuilder.loadTexts: aToELanguageTable.setStatus('mandatory')
if mibBuilder.loadTexts: aToELanguageTable.setDescription('A list of language ASCII to EBCDIC conversion entries.')
aToELanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "aToELanguageName"), (0, "MRV-IN-REACH-INTERNET-MIB", "aToEOffset"))
if mibBuilder.loadTexts: aToELanguageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aToELanguageEntry.setDescription('ASCII to EBCDIC parameter values for a language entry.')
aToELanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToELanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: aToELanguageName.setDescription('The name of language from the language table.')
aToEOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToEOffset.setStatus('mandatory')
if mibBuilder.loadTexts: aToEOffset.setDescription("ASCII character offset plus one, that is, the value 1 corresponds to an operational offset of 0. Corresponds directly to the offset portion of SERVER TN3270 LANGUAGE and the hexadecimal labels around the conversion table labeled 'ASCII to EBCDIC' in the SERVER LANGUAGE display.")
aToEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aToEValue.setStatus('mandatory')
if mibBuilder.loadTexts: aToEValue.setDescription("EBCDIC character value for the ASCII offset. Corresponds directly to the value portion of SERVER TN3270 LANGUAGE and the values in the conversion table labeled 'ASCII to EBCDIC' in the SERVER LANGUAGE display.")
tn3270PortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 10), )
if mibBuilder.loadTexts: tn3270PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortTable.setDescription('A list of tn3270 character port entries.')
tn3270PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "tn3270PortIndex"))
if mibBuilder.loadTexts: tn3270PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortEntry.setDescription('Parameter values for a tn3270 port.')
tn3270PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
tn3270PortDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortDeviceName.setDescription("The name of a generic terminal device from the tn3270 device table. Corresponds directly to PORT TELNET TN3270 DEVICE and the value labeled 'Tn3270 Device:' in the PORT TELNET display.")
tn3270PortLanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortLanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortLanguageName.setDescription("The name of language from the tn3270 language table. Corresponds directly to PORT TELNET TN3270 LANGUAGE and the value labeled 'Tn3270 Language:' in the PORT TELNET display.")
tn3270PortExtendedAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortExtendedAttributes.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortExtendedAttributes.setDescription("A control indicating that certain 3270 extended attributes are supported on the port. Corresponds directly to PORT TELNET TN3270 XTDATTRS and the label 'Tn3270 XtdAttrs' following the label 'Enabled Characteristics' in the PORT TELNET display.")
tn3270PortEorNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortEorNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortEorNegotiation.setDescription("A control for negotiation of the Telnet EOR option when establishing a tn3270 session on the port. Corresponds directly to PORT TELNET TN3270 EOR and the label 'Tn3270 EOR' following the label 'Enabled Characteristics' in the PORT TELNET display.")
tn3270PortErrorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortErrorLock.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortErrorLock.setDescription("A control for requiring use the RESET key when the host reports an error during a tn3270 session on the port. Corresponds directly to PORT TELNET TN3270 ERRORLOCK and the label 'Tn3270 ErrorLock' following the label 'Enabled Characteristics' in the PORT TELNET display.")
tn3270PortPrinterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortPrinterPort.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortPrinterPort.setDescription("The port number of the tn3270 printer. Corresponds directly to PORT TELNET TN3270 PRINTER and the value labeled 'Tn3270 Printer:' in the PORT TELNET display.")
tn3270PortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortOutgoingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortOutgoingTcpPort.setDescription("The TCP port which is used for a TN3270 session when connecting to a remote host from this serial port. Corresponds directly to the value labeled 'Tn3270 Default Port:' in the PORT TELNET CHARACTERISTICS display.")
tn3270PortSpaceInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortSpaceInsert.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortSpaceInsert.setDescription("Control to allow insert mode within a space filled field, and write characters over EBCDIC spaces. Corresponds directly to the presence of 'Tn3270 Space_Insert' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
tn3270PortTypeAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortTypeAhead.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortTypeAhead.setDescription("Control to permit typing ahead in a tn3270 session prior to receiving a response from the host for the previous command entered. Corresponds directly to the presence of 'Tn3270 TypeAhead' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
tn3270PrefixKeyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PrefixKeyMap.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PrefixKeyMap.setDescription("Control to prepend a prefix function to another function key. When the operator hits the key the prepended function(s) and then the main function for the key are transmitted to the host. Corresponds directly to the presence of 'Tn3270 PrefixKeyMap' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
tn3270PortScanner = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortScanner.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortScanner.setDescription("Indicates that this is a tn3270 scanner port. Corresponds directly to the presence of 'Tn3270 SCANNER' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
kerbStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: kerbStatus.setDescription("A control indicating the level of Kerberos operation on the system. Corresponds directly to SERVER KERBEROS STATUS and the value labeled 'Kerberos Security:' in the SERVER KERBEROS display.")
kerbRealm = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbRealm.setStatus('mandatory')
if mibBuilder.loadTexts: kerbRealm.setDescription("The Kerberos realm with which the kerbServerName1 and kerbServerName2 are associated. Corresponds directly to SERVER KERBEROS REALM and the value labeled 'Kerberos Realm:' in the SERVER KERBEROS display.")
kerbQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbQueryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: kerbQueryLimit.setDescription("The maximum number of attempts the system can make when trying to verify a Kerberos ID. Corresponds directly to SERVER KERBEROS QUERY LIMIT and the value labeled 'Kerberos Query Limit:' in the SERVER KERBEROS display.")
kerbMasterName = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbMasterName.setStatus('mandatory')
if mibBuilder.loadTexts: kerbMasterName.setDescription("The Domain name of the Kerberos master host system, which holds the Kerberos database. Corresponds directly to SERVER KERBEROS MASTER and the value labeled 'Kerberos Master:' in the SERVER KERBEROS display.")
kerbServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerName1.setDescription("The Domain name of the first Kerberos server to try when the system verifys a Kerberos ID. Corresponds directly to SERVER KERBEROS PRIMARY SERVER and the value labeled 'Kerberos Primary Server:' in the SERVER KERBEROS display.")
kerbServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerName2.setDescription("The Domain name of the Kerberos server to try when the system verifys a Kerberos ID and cannot reach the Kerberos primary server. Corresponds directly to SERVER KERBEROS SECONDARY SERVER and the value labeled 'Kerberos Secondary Server:' in the SERVER KERBEROS display.")
kerbInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbInsecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: kerbInsecureLogins.setDescription("The number of user logins on ports for which Kerberos user verification is not enabled. Corresponds directly to the value labeled 'Logins without Kerberos:' in the SERVER KERBEROS display.")
kerbSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: kerbSecureLogins.setDescription("The number of successful user logins on ports for which Kerberos user verification is enabled. Corresponds directly to the value labeled 'Successful Logins:' in the SERVER KERBEROS display.")
kerbSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLoginsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: kerbSecureLoginsFailed.setDescription("The number of verification failures due to incorrect ID or password for attempted user logins on ports for which Kerberos user verification is enabled. Corresponds directly to the value labeled 'Unsuccessful Logins:' in the SERVER KERBEROS display.")
kerbPasswordChangeFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPasswordChangeFailed.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPasswordChangeFailed.setDescription("The number of user failures to change their Kerberos password due to invalid old password or new password verification. Corresponds directly to the value labeled 'Password Change Failures:' in the SERVER KERBEROS display.")
kerbError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbError.setStatus('mandatory')
if mibBuilder.loadTexts: kerbError.setDescription("The error number of the most recent Kerberos-related failure. Corresponds directly to the value labeled 'Last Kerberos Error:' in the SERVER KERBEROS display. For a list of error numbers and their meanings, consult relevant MRV In-Reach or Kerberos documentation.")
kerbErrorTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 12), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: kerbErrorTime.setDescription("The date and time that kerbError was last updated. Corresponds directly to the value labeled 'Occurred:' in the SERVER KERBEROS display.")
kerbMasterAccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccess.setStatus('mandatory')
if mibBuilder.loadTexts: kerbMasterAccess.setDescription("The number of times the system successfully accessed the Kerberos master host. Corresponds directly to the value labeled 'Attempts to access:', 'Master', and 'Successful:' in the SERVER KERBEROS display.")
kerbMasterAccessFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccessFailed.setStatus('mandatory')
if mibBuilder.loadTexts: kerbMasterAccessFailed.setDescription("The number of times the system failed access to the Kerberos master host. Corresponds directly to the value labeled 'Attempts to access:', 'Master', and 'Unsuccessful:' in the SERVER KERBEROS display.")
kerbServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccess1.setDescription("The number of times the system successfully accessed the Kerberos primary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Successful:' in the SERVER KERBEROS display.")
kerbServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccessFailed1.setDescription("The number of times the system failed access to the Kerberos primary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Unsuccessful:' in the SERVER KERBEROS display.")
kerbServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccess2.setDescription("The number of times the system successfully accessed the Kerberos secondary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Successful:' in the SERVER KERBEROS display.")
kerbServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccessFailed2.setDescription("The number of times the system failed access to the Kerberos secondary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Unsuccessful:' in the SERVER KERBEROS display.")
kerbPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 8, 19), )
if mibBuilder.loadTexts: kerbPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortTable.setDescription('A list of Kerberos character port entries.')
kerbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "kerbPortIndex"))
if mibBuilder.loadTexts: kerbPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortEntry.setDescription('Parameter values for a Kerberos port.')
kerbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortIndex.setDescription('An index value that uniquely identifies a port could relate to Kerberos. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
kerbPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortStatus.setDescription("A control indicating the level of Kerberos operation on the port. Corresponds directly to PORT KERBEROS and the value 'Kerberos' following the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display.")
kerbServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(88, 750))).clone(namedValues=NamedValues(("standardPort", 88), ("experimentalPort", 750)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerPort.setDescription('The UDP port number on the Kerberos server where Kerberos messages are sent.')
psEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryNumber.setDescription("The number of security entries in this system's port security table with psEntryStatus of 'valid'.")
psEntryNumberLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumberLimit.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryNumberLimit.setDescription("The maximum number of security entries in this system's port security table.")
psEntryInvalidIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryInvalidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryInvalidIndex.setDescription("A value of psEntryIndex for an entry that has psEntryStatus of 'invalid'. A management station may choose this value when adding a new entry. Collisions between independent management stations simultaneously using the same number are beyond the scope of this document.")
psPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 4), )
if mibBuilder.loadTexts: psPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: psPortTable.setDescription('A list of port security character port entries.')
psPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "psPortIndex"))
if mibBuilder.loadTexts: psPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psPortEntry.setDescription('Port security parameter values for a port.')
psPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psPortIndex.setDescription('An index value that uniquely identifies a port for security purposes. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
psPortDefaultInboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultInboundAccess.setStatus('mandatory')
if mibBuilder.loadTexts: psPortDefaultInboundAccess.setDescription("The default access to the port for incoming TCP connections. Corresponds directly to PORT INTERNET SECURITY DEFAULT INBOUND and the value labeled 'Inbound Default:' in the PORT INTERNET SECURITY display.")
psPortDefaultOutboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultOutboundAccess.setStatus('mandatory')
if mibBuilder.loadTexts: psPortDefaultOutboundAccess.setDescription("The default access to the port for outgoing TCP connections. Corresponds directly to PORT INTERNET SECURITY DEFAULT OUTBOUND and the value labeled 'Outbound Default:' in the PORT INTERNET SECURITY display.")
psClrInternetSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psClrInternetSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: psClrInternetSecurity.setDescription('A control for if the internet security entries for this port will be cleared upon port logout. The default is disabled.')
psTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 5), )
if mibBuilder.loadTexts: psTable.setStatus('mandatory')
if mibBuilder.loadTexts: psTable.setDescription('A list of port security entries.')
psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "psEntryIndex"))
if mibBuilder.loadTexts: psEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psEntry.setDescription('Port security parameter values for an entry for a port.')
psEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryIndex.setDescription("A small, numeric distinguisher for port security entries. When adding a new entry, the client should specify an unused value, such as psEntryInvalidIndex. Corresponds directly to the value labeled 'Entry' in the SERVER INTERNET SECURITY display.")
psEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the CLEAR INTERNET SECURITY command. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Setting this object to 'valid' has no effect. When creating a new instance, one must set psEntryAddress, psEntryMask, psEntryAccess, psEntryDirection and psEntryPortList for the new instance in the same physical set request. Furthermore, if one wishes to change an entry, one must first delete it and then add it with its new values.")
psEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryAddress.setDescription("The IP address to which the entry pertains. Corresponds directly to the PORT INTERNET SECURITY internet address and the value labeled 'Internet Address' in the SERVER INTERNET SECURITY display.")
psEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryMask.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryMask.setDescription("The mask applied to psEntryAddress when making a security check based on this entry. Corresponds directly to PORT INTERNET SECURITY MASK and the value labeled 'Security Mask' in the SERVER INTERNET SECURITY display.")
psEntryAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAccess.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryAccess.setDescription("The access to the port for TCP connections when making a security check based on this entry. Corresponds directly to PORT INTERNET SECURITY ALLOW or DENY and the value labeled 'Access' in the SERVER INTERNET SECURITY display.")
psEntryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryDirection.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryDirection.setDescription("The direction of TCP connections to which this entry applies. Corresponds directly to PORT INTERNET SECURITY INBOUND or OUTBOUND and the value labeled 'Direction' in the SERVER INTERNET SECURITY display.")
psEntryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryPortMap.setDescription("The list of character ports to which this entry applies. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Proposed Standard Internet Character MIB. Corresponding bit numbers start with 1 as the high-order bit of the first octet. Corresponds directly to PORT INTERNET SECURITY and the value labeled 'Ports' in the SERVER INTERNET SECURITY display.")
xremoteServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerName1.setDescription("The Domain name of the first XREMOTE font server to try for downloading fonts. Corresponds directly to SERVER XREMOTE PRIMARY SERVER and the value labeled 'Xremote Primary Font Server:' in the SERVER XREMOTE display.")
xremoteServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerName2.setDescription("The Domain name of the XREMOTE font server to try for downloading fonts and the primary font server does not respond. Corresponds directly to SERVER XREMOTE SECONDARY SERVER and the value labeled 'Xremote Secondary Font Server:' in the SERVER XREMOTE display.")
xremoteServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccess1.setDescription("The number of times the system successfully accessed the XREMOTE primary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Successful:' in the SERVER XREMOTE display.")
xremoteServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccessFailed1.setDescription("The number of times the system failed access to the XREMOTE primary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Unsuccessful:' in the SERVER XREMOTE display.")
xremoteServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccess2.setDescription("The number of times the system successfully accessed the XREMOTE secondary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Successful:' in the SERVER XREMOTE display.")
xremoteServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccessFailed2.setDescription("The number of times the system failed access to the XREMOTE secondary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Unsuccessful:' in the SERVER XREMOTE display.")
xremoteSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteSessions.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteSessions.setDescription("The number of connected XREMOTE sessions. Corresponds directly to the value labeled 'Current Number of Xremote Sessions:' in the SERVER XREMOTE display.")
xremotePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 10, 8), )
if mibBuilder.loadTexts: xremotePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortTable.setDescription('A list of XREMOTE character port entries.')
xremotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "xremotePortIndex"))
if mibBuilder.loadTexts: xremotePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortEntry.setDescription('XREMOTE parameter values for a port.')
xremotePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremotePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
xremotePortXremote = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXremote.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortXremote.setDescription("Control for use of XREMOTE on the port. Corresponds directly to PORT XREMOTE and the presence of the label 'Xremote' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
xremotePortXdmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("specific", 1), ("broadcast", 2), ("indirect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmQuery.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortXdmQuery.setDescription("The type of query message issued by a port when searching for an X Display Manager (XDM). Corresponds directly to the PORT XDM QUERY and the 'XDM Query:' in the PORT ALTERNATE CHARACTERISTICS display")
xremotePortXdmHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmHost.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortXdmHost.setDescription("The Domain name or Internet address of the X Display Manager (XDM) for a port. Corresponds directly to the PORT XDM HOST and the 'XDM Host:' in the PORT ALTERNATE CHARACTERISTICS display")
xremoteServerClients = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerClients.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerClients.setDescription("The number of active X clients. Corresponds directly to the value labeled 'Current Number of XClients:' in the SERVER XREMOTE display.")
rotaryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryNumber.setDescription('The number of entries in the Rotary table.')
rotaryTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 11, 2), )
if mibBuilder.loadTexts: rotaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryTable.setDescription('A list of rotary entries.')
rotaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "rotaryAddress"))
if mibBuilder.loadTexts: rotaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryEntry.setDescription('Parameter values for a rotary.')
rotaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryAddress.setDescription("The internet address to be recognized as a rotary. Corresponds directly to the ip-address portion of SERVER INTERNET ROTARY and the value labeled 'Internet Address' in the SERVER INTERNET ROTARY display.")
rotaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the CLEAR SERVER INTERNET ROTARY command. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Setting the value to 'valid' in conjunction with a new rotaryAddress will add a new entry to the table. When adding a new entry, one should also specify a rotaryPortMap as the DEFVAL of 0..0 for rotaryPortMap is meaningless.")
rotaryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryPortMap.setDescription("The list of character ports that compose the rotary. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Proposed Standard Internet Character MIB. Corresponding bit numbers start with 1 as the high-order bit of the first octet. Corresponds directly to port-list portion of SERVER INTERNET ROTARY and the value labeled 'Ports' in the SERVER INTERNET ROTARY display.")
egpRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpRouting.setStatus('mandatory')
if mibBuilder.loadTexts: egpRouting.setDescription('Control for EGP routing services.')
egpStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("noMemory", 2), ("noIpRouting", 3), ("noEgpRouting", 4), ("noNeighbors", 5), ("noAS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: egpStatus.setDescription('Status of the EGP routing services indicating why it is not running.')
egpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 12, 3), )
if mibBuilder.loadTexts: egpNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrTable.setDescription('The EGP neighbor table.')
egpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "egpNbrAddr"))
if mibBuilder.loadTexts: egpNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrEntry.setDescription("Information about this entity's relationship with a particular EGP neighbor.")
egpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNbrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrAddr.setDescription("The IP address of this entry's EGP neighbor.")
egpNbrIntervalDead = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNbrIntervalDead.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrIntervalDead.setDescription('The interval upon entering the cease or idle state before automatically assuming a Start Event has occured. If a neighbor does not respond within 5 minutes, a Stop Event will automatically occur. The interval is in hundredths of seconds.')
egpNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNbrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrStatus.setDescription("The status of the entry for this neighbor. Set to 'invalid' to remove the entry.")
ospfAutoConfigure = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoConfigure.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAutoConfigure.setDescription('Control whether OSPF will automatically configure itself.')
ospfStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("noMemory", 2), ("noIpRouting", 3), ("noOspfRouting", 4), ("noAreas", 5), ("noInterfaces", 6), ("noRtrId", 7), ("noBackBoneAndVirtualInterfaces", 8), ("noBackBoneAndInterface", 9), ("noBackBone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ospfStatus.setDescription('Status of the OSPF routing services indicating why it is not running.')
ospfIfMtrcTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 3), )
if mibBuilder.loadTexts: ospfIfMtrcTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcTable.setDescription('The TOS metrics for a non-virtual interface identified by the interface index.')
ospfIfMtrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ospfIfMtrcIpAddress"), (0, "MRV-IN-REACH-INTERNET-MIB", "ospfIfMtrcAddressLessIf"), (0, "MRV-IN-REACH-INTERNET-MIB", "ospfIfMtrcTos"))
if mibBuilder.loadTexts: ospfIfMtrcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcEntry.setDescription('A particular TOS metric for a non-virtual interface identified by the interface index.')
ospfIfMtrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setDescription('Same as ospfIfMetricIpAddress in OSPF MIB, the IP address of this OSPF interface.')
ospfIfMtrcAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setDescription('Same as ospfIfMetricAddressLessIf in OSPF MIB, for the purpose of easing the instancing of addressed and addressless interfaces. This variable takes the value 0 on interfaces with IP Addresses, and the value of ifIndex for interfaces having no IP Address.')
ospfIfMtrcTos = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcTos.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfIfMtrcTos.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcTos.setDescription('Same as ospfIfMetricTOS in OSPF MIB, the type of service metric being referenced.')
ospfIfMtrcCostActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcCostActual.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcCostActual.setDescription('The actual cost of the metric in case it was set to auto.')
ospfXIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 4), )
if mibBuilder.loadTexts: ospfXIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfTable.setDescription('The TOS metrics for a non-virtual interface identified by the interface index.')
ospfXIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ospfXIfIpAddress"), (0, "MRV-IN-REACH-INTERNET-MIB", "ospfXIfAddressLessIf"))
if mibBuilder.loadTexts: ospfXIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfEntry.setDescription('Interface parameters for OSPF.')
ospfXIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfIpAddress.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfXIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfIpAddress.setDescription('Same as ospfIfIpAddress in OSPF MIB, the IP address of this OSPF interface.')
ospfXIfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setDescription('Same as ospfIfAddressLessIf in OSPF MIB, for the purpose of easing the instancing of addressed and addressless interfaces. This variable takes the value 0 on interfaces with IP Addresses, and the value of ifIndex for interfaces having no IP Address.')
ospfXIfTypeActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nonbroadcast", 2), ("pointToPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfTypeActual.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfTypeActual.setDescription('The interface type.')
ospfXIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfXIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfStatus.setDescription("The status of the interface entry, including the entry in the standard OSPF MIB. Set to 'invalid' to remove the entry.")
ospfXAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 5), )
if mibBuilder.loadTexts: ospfXAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaTable.setDescription('Parameters for an OSPF area.')
ospfXAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ospfXAreaId"))
if mibBuilder.loadTexts: ospfXAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaEntry.setDescription('An area entry.')
ospfXAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXAreaId.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfXAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaId.setDescription('Same as ospfAreaId in OSPF MIB, the ID of the area.')
ospfXAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfXAreaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaStatus.setDescription("The status of the area entry, including the entry in the standard OSPF MIB. Set to 'invalid' to remove the entry.")
ipAdExtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 1), )
if mibBuilder.loadTexts: ipAdExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdExtTable.setDescription('Table of additional fields indexed by local IP address. An entry in this table is created or deleted when an entry in the ipAddrTable is created or deleted.')
ipAdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ipAdEntExtAddress"))
if mibBuilder.loadTexts: ipAdExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdExtEntry.setDescription('A particular entry.')
ipAdEntExtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntExtAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntExtAddress.setDescription('Same as ipAdEntAddr, a local address representing a network connection.')
ipAdEntExtProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAdEntExtProxyArp.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntExtProxyArp.setDescription('Controls whether proxy ARP is active for this local address.')
ipAdEntExtRip = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntExtRip.setStatus('deprecated')
if mibBuilder.loadTexts: ipAdEntExtRip.setDescription('Controls whether RIP as a router discovery protocol is active for this local address.')
ipRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 2), )
if mibBuilder.loadTexts: ipRouterIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfTable.setDescription('Table of IP router values indexed by interface.')
ipRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ipRouterIfIndex"))
if mibBuilder.loadTexts: ipRouterIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfEntry.setDescription('A particular entry.')
ipRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfIndex.setDescription('The index of the interface; same as IfIndex.')
ipRouterIfProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfProtocolPriority.setDescription('The priority at which all Internet routed packets will be placed on the WAN output queue.')
ipRouterIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 65535)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfMTU.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfMTU.setDescription('The size of the largest datagram that IP can transmit on this interface. The default value is actually hardware dependent.')
ipRouterIfRDP = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfRDP.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfRDP.setDescription('Control for whether the router side of the Router Discovery Protocol is running on this interface.')
ipRouterIfArpPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfArpPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfArpPacketsIn.setDescription('The number of ARP packets received on this interface.')
ipRouterIfArpPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfArpPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfArpPacketsOut.setDescription('The number of ARP packets sent on this interface.')
ipRouterIfPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfPacketsIn.setDescription('The number of IP packets received on this interface.')
ipRouterIfPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfPacketsOut.setDescription('The number of IP packets sent on this interface.')
ipRouterIfForwardsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfForwardsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfForwardsIn.setDescription('The number of IP packets received on this interface that were forwarded.')
ipRouterIfForwardsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfForwardsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfForwardsOut.setDescription('The number of IP packets sent on this interface that were forwarded.')
xIpTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14, 3))
ipTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTrafficSort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficSort.setDescription("Setting to 'execute' causes the most recent traffic information to be sorted into the ipTrafficTable. The sorting precedence is: decreasing percentage, increasing destination address, increasing source address, and increasing interface number. Setting to 'ready' has no effect.")
ipTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2), )
if mibBuilder.loadTexts: ipTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficTable.setDescription('A list of traffic entries, sorted in the order specified by ipTrafficSort.')
ipTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ipTrafficIndex"))
if mibBuilder.loadTexts: ipTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficEntry.setDescription('A traffic entry.')
ipTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficIndex.setDescription('Identification of this traffic entry.')
ipTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficPercent.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficPercent.setDescription('The percentage of total traffic that this traffic entry represents, in tenths of a percent.')
ipTrafficDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficDstAddr.setDescription('The destination IP address of the traffic entry.')
ipTrafficSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficSrcAddr.setDescription('The source IP address of the traffic entry.')
ipTrafficProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficProtocol.setDescription('The IP protocol type of the traffic entry.')
ipTrafficDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficDstPort.setDescription('The destination TCP/UDP port of the traffic entry.')
ipTrafficSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficSrcPort.setDescription('The source TCP/UDP port of the traffic entry.')
ipTrafficIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficIf.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficIf.setDescription('The inbound interface to which the traffic entry applies. This value is the same as IfIndex.')
ipTrafficMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTrafficMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficMonitoring.setDescription('Control for whether the router side of the Router Discovery Protocol is running on this interface.')
xIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 4), )
if mibBuilder.loadTexts: xIpNetToMediaTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaTable.setDescription('MRV In-Reach extensions to the IP Address Translation Table.')
xIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IP-MIB", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: xIpNetToMediaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaEntry.setDescription('Entry parameters.')
xIpNetToMediaCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIpNetToMediaCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaCircuit.setDescription('An additional identifier for the circuit (i.e. Frame Relay DLCI or X.25 VC) which the entry extends.')
xIpNetToMediaReverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIpNetToMediaReverseArp.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaReverseArp.setDescription('Whether reverse ARP is supported on this entry.')
udpBcstServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 15, 1), )
if mibBuilder.loadTexts: udpBcstServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerTable.setDescription('Table of servers to whom UDP broadcast messages will be forwarded.')
udpBcstServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "udpBcstServerAddress"))
if mibBuilder.loadTexts: udpBcstServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerEntry.setDescription('A particular entry.')
udpBcstServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBcstServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerAddress.setDescription('Internet address of the server.')
udpBcstServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerStatus.setDescription("The status of the server. Set to 'invalid' to remove the entry.")
udpBcstPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 15, 2), )
if mibBuilder.loadTexts: udpBcstPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPortTable.setDescription('Table of incoming UDP destination port numbers for which UDP broadcasts will be forwarded.')
udpBcstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "udpBcstPort"))
if mibBuilder.loadTexts: udpBcstPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPortEntry.setDescription('A particular entry.')
udpBcstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBcstPort.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPort.setDescription('The incoming destination UDP port number.')
udpBcstPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPortStatus.setDescription("The status of broadcast forwarding for the port. Set to 'invalid' to remove the entry.")
udpBcstRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstRouting.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstRouting.setDescription('The indication of whether this entity forwards UDP broadcasts.')
xImport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 1))
xExport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 2))
xFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 3))
impEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1), )
if mibBuilder.loadTexts: impEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleTable.setDescription('The EGP import table.')
impEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "impEgpRuleAs"), (0, "MRV-IN-REACH-INTERNET-MIB", "impEgpRuleNetwork"))
if mibBuilder.loadTexts: impEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleEntry.setDescription('An EGP import rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the route learned from the neighbor. The AS can be set to a wild card as can the IP network. When a route is learned from a neighbor, the most specific import rule is applied to the route. The route is either accepted or discarded and its metrics are applied according to the rule. An exact match on the AS and IP network is the most exact rule. An exact match on the AS and a wild card match on the IP network is the 2nd most exact rule. A wild card match on the AS and an exact match on the IP network is the 3rd most exact match. Finally, a total wild card match is the least exact rule.')
impEgpRuleAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impEgpRuleAs.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
impEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleNetwork.setDescription('The IP network learned from the neighbor. The value 255.255.255.255 is a wild card matching any network.')
impEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleAction.setDescription('Control whether the route is learned or discarded.')
impEgpRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRulePreference.setDescription('Preference to be stored with the route. The lower preference is preferred.')
impEgpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleType.setDescription('Type to be stored with the route. The type is based on the OSPF external type and used to help compare metrics. Type 1 is preferred over type 2.')
impEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleMetricAction.setDescription('How to apply the impEgpRuleMetric field to the metric learned with the route before storing it in the routing table.')
impEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleMetric.setDescription('Metric value to be applied to the metric learned learned with the route before storing it in the routing table.')
impEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
impOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2), )
if mibBuilder.loadTexts: impOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleTable.setDescription('The OSPF import table.')
impOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "impOspfRuleNetwork"))
if mibBuilder.loadTexts: impOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleEntry.setDescription('An OSPF import rule. Each rule is keyed by the IP network of the route and the AS from which it was learned. The Ip network and the AS can both be set to a wild card. When an OSPF route is added to the routing table, the most specific import rule is applied to set the preference of the route. An exact match on the Ip network and on the AS is the most exact rule. An exact match on the IP network and a wild card match on the AS is the 2nd most exact rule. A wild card match on both the on the AS and IP network is the next and least exact rule.')
impOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleNetwork.setDescription('The IP network of the route. The value 255.255.255.255 is a wild card matching any network.')
impOspfRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impOspfRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRulePreference.setDescription('Preference to be stored with the route. The lower preference is preferred.')
impOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
impRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3), )
if mibBuilder.loadTexts: impRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleTable.setDescription('The RIP import table.')
impRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "impRipRuleFromIf"), (0, "MRV-IN-REACH-INTERNET-MIB", "impRipRuleNetwork"))
if mibBuilder.loadTexts: impRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleEntry.setDescription('A RIP import rule. Each rule is keyed by the interface and the IP network of the route learned from the neighbor. The route is either accepted or discarded and its metrics are applied according to the rule. An exact match on the IP network is the rule that will be applied. If an exact match does not exist, the rule with the wild card IP network is used.')
impRipRuleFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impRipRuleFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleFromIf.setDescription('The interface index of the interface where the rule applies, same as ifIndex.')
impRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleNetwork.setDescription('The IP network learned from the neighbor. The value 255.255.255.255 is a wild card matching any network.')
impRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleAction.setDescription('Control whether the route is learned or discarded.')
impRipRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRulePreference.setDescription('Preference to be stored with the route. The lower preference are preferred.')
impRipRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleType.setDescription('Type to be stored with the route. The type is based on the OSPF external type and used to help compare metrics. Type 1 is preferred over type 2.')
impRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleMetricAction.setDescription('How to apply the impRipRuleMetric field to the metric learned with the route before storing it in the routing table.')
impRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleMetric.setDescription('Metric value to be applied to the metric learned learned with the route before storing it in the routing table.')
impRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
impIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4), )
if mibBuilder.loadTexts: impIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleTable.setDescription('The Isis import table.')
impIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "impIsisRuleNetwork"))
if mibBuilder.loadTexts: impIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleEntry.setDescription('An Isis import rule. Each rule is keyed by the IP network of the route learned from the neighbor. The route is either accepted or discarded and its metrics are applied according to the rule. An exact match on the IP network is the rule that will be applied. If an exact match does not exist, the rule with the wild card IP network is used.')
impIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleNetwork.setDescription('The IP network learned from the neighbor. The value 255.255.255.255 is a wild card matching any network.')
impIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleAction.setDescription('Control whether the route is learned or discarded.')
impIsisRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRulePreference.setDescription('Preference to be stored with the route. The lower preference are preferred.')
impIsisRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleType.setDescription('Type to be stored with the route. The type is based on the OSPF external type and used to help compare metrics. Type 1 is preferred over type 2.')
impIsisRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleMetricAction.setDescription('How to apply the impIsisRuleMetric field to the metric learned with the route before storing it in the routing table.')
impIsisRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleMetric.setDescription('Metric value to be applied to the metric learned learned with the route before storing it in the routing table.')
impIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1), )
if mibBuilder.loadTexts: expEgpToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleTable.setDescription('The EGP to EGP export table.')
expEgpToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToEgpRuleToAs"), (0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToEgpRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToEgpRuleFromAs"))
if mibBuilder.loadTexts: expEgpToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleEntry.setDescription('An EGP to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The neighbor (to) AS can be set to a wild card as can the IP network and the (from) AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network From AS Rank exact exact exact 1st exact exact wild card 2nd exact wild card exact 3rd exact wild card wild card 4th wild card exact exact 5th wild card exact wild card 6th wild card wild card exact 7th wild card wild card wild card 8th ')
expEgpToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expEgpToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToEgpRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleMetricAction.setDescription('How to apply the expEgpToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expOspfToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2), )
if mibBuilder.loadTexts: expOspfToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleTable.setDescription('The OSPF to EGP export table.')
expOspfToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToEgpRuleToAs"), (0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToEgpRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToEgpRuleFromAs"))
if mibBuilder.loadTexts: expOspfToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleEntry.setDescription('An OSPF to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the OSPF route in the routing table, and the Autonomous System from which the route was learned. The neighbor (to) AS can be set to a wild card as can the IP network and the (from) AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network From AS Rank exact exact exact 1st exact exact wild card 2nd exact wild card exact 3rd exact wild card wild card 4th wild card exact exact 5th wild card exact wild card 6th wild card wild card exact 7th wild card wild card wild card 8th ')
expOspfToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expOspfToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expOspfToEgpRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleFromAs.setDescription('The Autonomous System of the route in the route table. Local indicates that the route was not an external OSPF route. The value 65535 is a wild card matching any AS number, and the value 65534 is for routes within the local AS.')
expOspfToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expOspfToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleMetricAction.setDescription('How to apply the expOspfToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expStaticToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3), )
if mibBuilder.loadTexts: expStaticToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleTable.setDescription('The Static to EGP export table.')
expStaticToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expStaticToEgpRuleToAs"), (0, "MRV-IN-REACH-INTERNET-MIB", "expStaticToEgpRuleNetwork"))
if mibBuilder.loadTexts: expStaticToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleEntry.setDescription('An Static to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the Static route in the routing table. The neighbor (to) AS can be set to a wild card as can the IP network. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expStaticToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expStaticToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expStaticToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expStaticToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleMetricAction.setDescription('How to apply the expStaticToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4), )
if mibBuilder.loadTexts: expEgpToOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleTable.setDescription('The EGP to OSPF export table.')
expEgpToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToOspfRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToOspfRuleFromAs"))
if mibBuilder.loadTexts: expEgpToOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleEntry.setDescription('An EGP to OSPF export rule. Each rule is keyed by the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The Ip network can be set to a wild card as can the (from) AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expEgpToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToOspfRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToOspfRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToOspfRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expRipToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5), )
if mibBuilder.loadTexts: expRipToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleTable.setDescription('The Rip to EGP export table.')
expRipToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expRipToEgpRuleToAs"), (0, "MRV-IN-REACH-INTERNET-MIB", "expRipToEgpRuleNetwork"))
if mibBuilder.loadTexts: expRipToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleEntry.setDescription('An Rip to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the Rip route in the routing table. The neighbor (to) AS can be set to a wild card as can the IP network. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expRipToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expRipToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleMetricAction.setDescription('How to apply the expRipToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expRipToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6), )
if mibBuilder.loadTexts: expRipToOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleTable.setDescription('The RIP to OSPF export table.')
expRipToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expRipToOspfRuleNetwork"))
if mibBuilder.loadTexts: expRipToOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleEntry.setDescription('A RIP to OSPF export rule. Each rule is keyed by the IP network of the RIP route in the routing table. The IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd ')
expRipToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToOspfRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7), )
if mibBuilder.loadTexts: expEgpToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleTable.setDescription('The EGP to RIP export table.')
expEgpToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToRipRuleToIf"), (0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToRipRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToRipRuleFromAs"))
if mibBuilder.loadTexts: expEgpToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleEntry.setDescription('An EGP to RIP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expEgpToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expEgpToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToRipRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleMetricAction.setDescription('How to apply the expEgpToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expOspfToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8), )
if mibBuilder.loadTexts: expOspfToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleTable.setDescription('The OSPF to RIP export table.')
expOspfToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToRipRuleToIf"), (0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToRipRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToRipRuleFromAs"))
if mibBuilder.loadTexts: expOspfToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleEntry.setDescription('An Ospf to RIP export rule. Each rule is keyed by the Autonomous System of the Ospf neighbor, the IP network of the Ospf route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expOspfToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expOspfToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expOspfToRipRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number, and the value 65534 is for routes within the local AS.')
expOspfToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expOspfToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleMetricAction.setDescription('How to apply the expOspfToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values. The same is true for the all wild cards where the AS is set to local")
expRipToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9), )
if mibBuilder.loadTexts: expRipToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleTable.setDescription('The Rip to Rip export table.')
expRipToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expRipToRipRuleToIf"), (0, "MRV-IN-REACH-INTERNET-MIB", "expRipToRipRuleNetwork"))
if mibBuilder.loadTexts: expRipToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleEntry.setDescription('An Rip to Rip export rule. Each rule is keyed by the IP network of the Rip route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd ')
expRipToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expRipToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleMetricAction.setDescription('How to apply the expRipToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expStaticToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10), )
if mibBuilder.loadTexts: expStaticToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleTable.setDescription('The Static to Rip export table.')
expStaticToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expStaticToRipRuleToIf"), (0, "MRV-IN-REACH-INTERNET-MIB", "expStaticToRipRuleNetwork"))
if mibBuilder.loadTexts: expStaticToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleEntry.setDescription('An Static to Rip export rule. Each rule is keyed by the IP network of the Static route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd ')
expStaticToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expStaticToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expStaticToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expStaticToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleMetricAction.setDescription('How to apply the expStaticToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expIsisToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11), )
if mibBuilder.loadTexts: expIsisToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleTable.setDescription('The Isis to EGP export table.')
expIsisToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expIsisToEgpRuleToAs"), (0, "MRV-IN-REACH-INTERNET-MIB", "expIsisToEgpRuleNetwork"))
if mibBuilder.loadTexts: expIsisToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleEntry.setDescription('An Isis to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the Isis route in the routing table. The neighbor (to) AS can be set to a wild card as can the IP network. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th .')
expIsisToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expIsisToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expIsisToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expIsisToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleMetricAction.setDescription('How to apply the expIsisToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expIsisToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expIsisToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expIsisToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12), )
if mibBuilder.loadTexts: expIsisToOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleTable.setDescription('The Isis to Ospf export table.')
expIsisToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expIsisToOspfRuleNetwork"))
if mibBuilder.loadTexts: expIsisToOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleEntry.setDescription('An Isis to Ospf export rule. Each rule is keyed by the IP network of the Isis route in the routing table. The IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expIsisToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expIsisToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToOspfRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleAction.setDescription('Control whether the route is advertised or not.')
expIsisToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expIsisToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13), )
if mibBuilder.loadTexts: expIsisToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleTable.setDescription('The Isis to Rip export table.')
expIsisToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expIsisToRipRuleNetwork"))
if mibBuilder.loadTexts: expIsisToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleEntry.setDescription('An Isis to Rip export rule. Each rule is keyed by the IP network of the Isis route in the routing table. The IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expIsisToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expIsisToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expIsisToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expIsisToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleMetricAction.setDescription('How to apply the expIsisToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expIsisToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expIsisToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14), )
if mibBuilder.loadTexts: expEgpToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleTable.setDescription('The EGP to Isis export table.')
expEgpToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToIsisRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expEgpToIsisRuleFromAs"))
if mibBuilder.loadTexts: expEgpToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleEntry.setDescription('An EGP to Isis export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th .')
expEgpToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToIsisRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToIsisRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expEgpToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetricAction.setDescription('How to apply the expEgpToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetricAction.setDescription('How to apply the expEgpToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetricAction.setDescription('How to apply the expEgpToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetricAction.setDescription('How to apply the expEgpToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expOspfToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15), )
if mibBuilder.loadTexts: expOspfToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleTable.setDescription('The Ospf to Isis export table.')
expOspfToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToIsisRuleNetwork"), (0, "MRV-IN-REACH-INTERNET-MIB", "expOspfToIsisRuleFromAs"))
if mibBuilder.loadTexts: expOspfToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleEntry.setDescription('An Ospf to Isis export rule. Each rule is keyed by the Autonomous System of the Ospf neighbor, the IP network of the Ospf route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th .')
expOspfToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expOspfToIsisRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToIsisRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number, and the value 65534 is for routes within the local AS.')
expOspfToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expOspfToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expOspfToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetricAction.setDescription('How to apply the expOspfToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetricAction.setDescription('How to apply the expOspfToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetricAction.setDescription('How to apply the expOspfToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetricAction.setDescription('How to apply the expOspfToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values. The same is true for the all wild cards where the AS is set to local")
expRipToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16), )
if mibBuilder.loadTexts: expRipToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleTable.setDescription('The Isis to Isis export table.')
expRipToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expRipToIsisRuleNetwork"))
if mibBuilder.loadTexts: expRipToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleEntry.setDescription('An Isis to Isis export rule. Each rule is keyed by the IP network of the Isis route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expRipToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expRipToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetricAction.setDescription('How to apply the expRipToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetricAction.setDescription('How to apply the expRipToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetricAction.setDescription('How to apply the expRipToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetricAction.setDescription('How to apply the expRipToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expStaticToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17), )
if mibBuilder.loadTexts: expStaticToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleTable.setDescription('The Static to Isis export table.')
expStaticToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "expStaticToIsisRuleNetwork"))
if mibBuilder.loadTexts: expStaticToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleEntry.setDescription('An Static to Isis export rule. Each rule is keyed by the IP network of the Static route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expStaticToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expStaticToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expStaticToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expStaticToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetricAction.setDescription('How to apply the expStaticToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetricAction.setDescription('How to apply the expStaticToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetricAction.setDescription('How to apply the expStaticToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetricAction.setDescription('How to apply the expStaticToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
ipIfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1), )
if mibBuilder.loadTexts: ipIfFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterTable.setDescription('Table of filter entries.')
ipIfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterIndex"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterProtocol"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterDstPort"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterSrcPort"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterDstAddr"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterDstMask"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterSrcAddr"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilterSrcMask"))
if mibBuilder.loadTexts: ipIfFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterEntry.setDescription('A particular entry.')
ipIfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterIndex.setDescription('The interface index with which this entry is associated. This value is the same as IfIndex.')
ipIfFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterDstAddr.setDescription('The destination IP address to use in the filter match.')
ipIfFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstMask.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterDstMask.setDescription('The destination IP mask to use in the filter match.')
ipIfFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterSrcAddr.setDescription('The source IP address to use in the filter match.')
ipIfFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcMask.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterSrcMask.setDescription('The source IP mask to use in the filter match.')
ipIfFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterProtocol.setDescription('The protocol to use in the filter match. The value 256 indicates any protocol.')
ipIfFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstPort.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterDstPort.setDescription('The destination port to use in the filter match. This field only applies to TCP and UDP protocol packets. The value 65536 indicates any destination port.')
ipIfFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcPort.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterSrcPort.setDescription('The source port to use in the filter match. This field only applies to TCP and UDP protocol packets. The value 65536 indicates any source port.')
ipIfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilterAction.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterAction.setDescription('Control whether the packet for which this filter is the best match should be forwarded or discarded.')
ipIfFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilterStatus.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterStatus.setDescription("The status of the filter entry. Set to 'invalid' to remove the entry.")
ipFilterState = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilterState.setDescription('The indication of whether this system does IP filtering.')
ipIfFilter2Table = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3), )
if mibBuilder.loadTexts: ipIfFilter2Table.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Table.setDescription('Table of filter entries.')
ipIfFilter2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2Index"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2Protocol"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2DstPortStart"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2DstPortEnd"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2TcpSyn"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2SrcPortStart"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2SrcPortEnd"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2DstMask"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2DstAddr"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2SrcMask"), (0, "MRV-IN-REACH-INTERNET-MIB", "ipIfFilter2SrcAddr"))
if mibBuilder.loadTexts: ipIfFilter2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Entry.setDescription('A particular entry.')
ipIfFilter2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2Index.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Index.setDescription('The interface index with which this entry is associated. This value is the same as IfIndex.')
ipIfFilter2DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstAddr.setDescription('The destination IP address to use in the filter match.')
ipIfFilter2DstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstMask.setDescription('The destination IP mask to use in the filter match.')
ipIfFilter2SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcAddr.setDescription('The source IP address to use in the filter match.')
ipIfFilter2SrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcMask.setDescription('The source IP mask to use in the filter match.')
ipIfFilter2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Protocol.setDescription('The protocol to use in the filter match. The value 256 indicates any protocol.')
ipIfFilter2DstPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstPortStart.setDescription('The starting destination port in a range of destination ports to use in the filter match. This field only applies to TCP and UDP protocol packets.')
ipIfFilter2SrcPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcPortStart.setDescription('The starting source port in a range of source ports to use in the filter match. This field only applies to TCP and UDP protocol packets.')
ipIfFilter2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2Action.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Action.setDescription('Control whether the packet for which this filter is the best match should be forwarded or discarded.')
ipIfFilter2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2Status.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Status.setDescription("The status of the filter entry. Set to 'invalid' to remove the entry.")
ipIfFilter2DstPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstPortEnd.setDescription('The ending destination port in a range of destination ports to use in the filter match. This field only applies to TCP and UDP protocol packets. This filed must also be greater or equal to the ipIfFilter2DstPortStart field.')
ipIfFilter2SrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcPortEnd.setDescription('The starting source port in a range of source ports to use in the filter match. This field only applies to TCP and UDP protocol packets. This filed must also be greater or equal to the ipIfFilter2SrcPortStart field.')
ipIfFilter2TcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2TcpSyn.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2TcpSyn.setDescription('The value of the TCP SYN and ACK bit to ues in the filter match. This field only applies to TCP packets. On indicates that the SYN bit is on and the ACK bit is off. Off is any other combination.')
ipIfFilter2ProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 256))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5), ("none", 256))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2ProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2ProtocolPriority.setDescription('Control the priority at which the packet for which this filter is the best match should be placed on the WAN output queue. None indicates that the sending interfaces protocol priority should be used.')
ripState = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripState.setStatus('mandatory')
if mibBuilder.loadTexts: ripState.setDescription('The indication of whether this system participates in RIP.')
ripStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("ripDisabled", 2), ("ipDisabled", 3), ("noNetworksEnabled", 4), ("noMemory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatus.setDescription('The status of the RIP software.')
ripNetTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 18, 3), )
if mibBuilder.loadTexts: ripNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetTable.setDescription('Table of RIP entries.')
ripNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "ripNetNet"))
if mibBuilder.loadTexts: ripNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetEntry.setDescription('A particular entry.')
ripNetNet = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetNet.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetNet.setDescription('The IP Network to which this entry applies.')
ripNetState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("routerDiscovery", 2), ("full", 3))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNetState.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetState.setDescription('This value controls the RIP protocol on this network.')
ripNetRipsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetRipsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetRipsIn.setDescription('The number of RIP packets received from routers on this IP network.')
ripNetRipsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetRipsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetRipsOut.setDescription('The number of RIP packets sent to routers on this IP network.')
ripNetAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("poisonedReverse", 1), ("splitHorizon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNetAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetAlgorithm.setDescription('This value controls the RIP algorithm on this network.')
lpdQueueTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 19, 1), )
if mibBuilder.loadTexts: lpdQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueTable.setDescription('A list of lpd queues on the server.')
lpdQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "lpdQueueName"))
if mibBuilder.loadTexts: lpdQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueEntry.setDescription('Lpd parameter values plus counters for an individual lpd queue.')
lpdQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the CLEAR/PURGE SERVER LPD QUEUE command. Setting the value to 'valid' validates (creates) the entry, corresonding directly to the DEF/SET SERVER LPD QUEUE and lpd create commands.")
lpdQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueName.setDescription('Name of the LPD queue, case sensitive.')
lpdQueuePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueuePorts.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueuePorts.setDescription('List of ports assigned to the queue. An lpd queue can be associated with more than 1 port. This object corresponds to the port-list in the DEF/SET SERVER LPD QUEUE and lpc/create commands. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Character MIB [11]. Corresponding bit numbers start with 1 as the high-order bit of the first octet. ')
lpdQueueEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueEnabled.setDescription("Flag indicates if the queue is enabled. A 'disabled' queue will reject print requests from remote systems. A 'enabled' queue accepts requests for printing.")
lpdQueueLfConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lf", 1), ("lfcr", 2))).clone('lf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueLfConversion.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueLfConversion.setDescription("Flag indicates if the queue is converting linefeeds to linefeeds, carriagereturns. 'lfcr' does the converion, 'lf' does not.")
lpdQueueTotalJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueTotalJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueTotalJobs.setDescription('The total number of jobs on the queue. This number should be equal to the number of active and waiting jobs. (lpdQueueActive + lpdQueueWaiting)')
lpdQueueActiveJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueActiveJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueActiveJobs.setDescription('The number of active jobs on the queue. An active job is a job that has been assigned a port is in the process of receiving data from a remote host and sending it out the port.')
lpdQueueWaitingJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueWaitingJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueWaitingJobs.setDescription('The number of waiting jobs on the queue. A waiting job is a job that needs a port to send its data to. This implies that the ports associated with this queue are busy.')
lpdQueueProcessedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueProcessedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueProcessedJobs.setDescription('The total number of jobs processed by this queue since server boot.')
lpdQueueFormFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("formfeedafter", 1), ("formfeedbefore", 2), ("formfeednone", 3))).clone('formfeedafter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueFormFeed.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueFormFeed.setDescription('A control to determine how we will send out a formfeed when printing a lpd job. formfeedafter: Send after job, formfeedbefore: Send before job, formfeednone: Send no formfeed.')
lpdQueueBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueBypass.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueBypass.setDescription("Control for a queue to bypass a LPD port which has output inhibited via flow control. Corresponds directly to the value labeled 'Bypass' in the SERVER LPD QUEUE display.")
lpdJobTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 19, 2), )
if mibBuilder.loadTexts: lpdJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobTable.setDescription('A list of lpd jobs.')
lpdJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "lpdQueueName"), (0, "MRV-IN-REACH-INTERNET-MIB", "lpdJobNumber"))
if mibBuilder.loadTexts: lpdJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobEntry.setDescription('A single lpd Job.')
lpdJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdJobStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobStatus.setDescription("Status of this entry. Setting this object to 'invalid' will remove the job from the queue. Setting this object ot 'valid' has no effect since the only way to create an lpd job is with the lpd protocol.")
lpdJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobNumber.setDescription('The queue relative job number for this lpd job. Job numbers are assigned as jobs are accepted onto the queue. Job numbers are reset to 1 when they reach a value greater than 1000 and the queue goes empty.')
lpdJobAssignedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobAssignedPort.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobAssignedPort.setDescription('The number of the port assigned to the lpd job.')
lpdJobFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobFileSize.setDescription('The size of the file being sent from the remote system.')
lpdJobHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobHostName.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobHostName.setDescription('The name of the host sending the job.')
lpdJobFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobFileName.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobFileName.setDescription('The name of the file being sent.')
lpdJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialized", 1), ("waiting", 2), ("assigned", 3), ("printingData", 4), ("printingControl", 5), ("aborted", 6), ("completed", 7), ("error", 8), ("flushing", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobState.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobState.setDescription('The current state of the lpd job. A typical job transistions through the following states: initialize->waiting->assigned->printingdata-> printingcontrol->completed.')
securIDServerName0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName0.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName0.setDescription("The Domain name of the first SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER0 and the value labeled 'SecurID Server0:' in the SERVER SECURID display.")
securIDServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName1.setDescription("The Domain name of the second SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER1 and the value labeled 'SecurID Server1:' in the SERVER SECURID display.")
securIDServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName2.setDescription("The Domain name of the third SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER2 and the value labeled 'SecurID Server2:' in the SERVER SECURID display.")
securIDServerName3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName3.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName3.setDescription("The Domain name of the fourth SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER3 and the value labeled 'SecurID Server3:' in the SERVER SECURID display.")
securIDServerName4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName4.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName4.setDescription("The Domain name of the fifth SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER4 and the value labeled 'SecurID Server4:' in the SERVER SECURID display.")
securIDMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: securIDMaxRetries.setDescription("The maximum number of times the server will try any single SecurID server to validate a PASSCODE. Corresponds directly to SERVER SECURID ACMMAXRETRIES and the value labeled 'SecurID ACMMAXRETRIES:' in the SERVER SECURID display.")
securIDBaseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDBaseTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: securIDBaseTimeout.setDescription("The initial timeout value to be used between prompts for a SecurID PASSCODE. Corresponds directly to SERVER SECURID ACMBASETIMEOUT and the value labeled 'SecurID ACMBASETIMEOUT:' in the SERVER SECURID display.")
securIDPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDPort.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPort.setDescription("The UDP port number to be used when communicating with the SecurID servers. Corresponds directly to SERVER SECURID ACM_PORT and the value labeled 'SecurID ACM_PORT:' in the SERVER SECURID display.")
securIDQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDQueryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: securIDQueryLimit.setDescription("The maximum number of times a user will be queried for a SecurID PASSCODE before being logged out. Corresponds directly to SERVER SECURID QUERY LIMIT and the value labeled 'SecurID Query Limit:' in the SERVER SECURID display.")
securIDEncryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdiBlockCipher", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDEncryptionMode.setStatus('mandatory')
if mibBuilder.loadTexts: securIDEncryptionMode.setDescription("The type of encryption to use in SecurID validation. Corresponds directly to the value labeled 'Encryption Mode' in the SERVER SECURID display.")
securIDInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDInsecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: securIDInsecureLogins.setDescription("The number of user logins on ports for which SecurID user verification is not enabled. Corresponds directly to the value labeled 'Logins without SecurID:' in the SERVER SECURID display.")
securIDSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDSecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: securIDSecureLogins.setDescription("The number of successful user logins on ports for which SecurID user verification is enabled. Corresponds directly to the value labeled 'Successful Logins:' in the SERVER SECURID display.")
securIDSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDSecureLoginsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: securIDSecureLoginsFailed.setDescription("The number of verification failures due to incorrect PASSCODE for attempted user logins on ports for which SecurID user verification is enabled. Corresponds directly to the value labeled 'Unsuccessful Logins:' in the SERVER SECURID display.")
securIDServerAccess0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess0.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess0.setDescription("The number of times the system successfully accessed the SecurID server0. Corresponds directly to the value labeled 'Attempts to access:', 'Server0', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed0.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed0.setDescription("The number of times the system unsuccessfully accessed the SecurID server0. Corresponds directly to the value labeled 'Attempts to access:', 'Server0', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess1.setDescription("The number of times the system successfully accessed the SecurID server1. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed1.setDescription("The number of times the system unsuccessfully accessed the SecurID server1. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess2.setDescription("The number of times the system successfully accessed the SecurID server2. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed2.setDescription("The number of times the system unsuccessfully accessed the SecurID server2. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess3.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess3.setDescription("The number of times the system successfully accessed the SecurID server3. Corresponds directly to the value labeled 'Attempts to access:', 'Server3', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed3.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed3.setDescription("The number of times the system unsuccessfully accessed the SecurID server3. Corresponds directly to the value labeled 'Attempts to access:', 'Server3', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess4.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess4.setDescription("The number of times the system successfully accessed the SecurID server4. Corresponds directly to the value labeled 'Attempts to access:', 'Server4', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed4.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed4.setDescription("The number of times the system unsuccessfully accessed the SecurID server4. Corresponds directly to the value labeled 'Attempts to access:', 'Server4', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDErrorPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDErrorPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securIDErrorPortIndex.setDescription("The index of the most recent port on which a SecurID access violation occurred. Corresponds directly to the value labeled 'Last Unsuccessful Login:' in the SERVER SECURID display.")
securIDError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDError.setStatus('mandatory')
if mibBuilder.loadTexts: securIDError.setDescription("The error number of the most recent SecurID-related error. Corresponds directly to the value labeled 'Reason:' in the SERVER SECURID display. See MRV In-Reach documentation for a complete list of error numbers and their meaning.")
securIDErrorUsername = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDErrorUsername.setStatus('mandatory')
if mibBuilder.loadTexts: securIDErrorUsername.setDescription("The username associated with the most recent SecurID-related error. Corresponds directly to the value labeled 'Username:' in the SERVER SECURID display.")
securIDPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 20, 27), )
if mibBuilder.loadTexts: securIDPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortTable.setDescription('A list of SecurID character port entries.')
securIDPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "securIDPortIndex"))
if mibBuilder.loadTexts: securIDPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortEntry.setDescription('Parameter values for a SecurID port.')
securIDPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortIndex.setDescription('An index value that uniquely identifies a port could relate to SecurID. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
securIDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortStatus.setDescription("A control indicating the level of SecurID operation on the port. Corresponds directly to PORT SECURID and the value 'SecurID' following the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display.")
sshPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 23, 1), )
if mibBuilder.loadTexts: sshPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortTable.setDescription('A list of SSH port entries')
sshPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-INTERNET-MIB", "sshPortIndex"))
if mibBuilder.loadTexts: sshPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortEntry.setDescription('Parameter values for an SSH port.')
sshPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortIndex.setDescription('An index value that uniquely identifies an SSH port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the proposed standard Internet Character MIB.')
sshPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortIncomingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortIncomingTcpPort.setDescription("Specifies the TCP port number used to identify the port when a SSH connection request arrives at the server. The default for a physical port is 2022 + 100 * port's physical port number. The default is 22 for virtual ports. Corresponds directly to the value labeled 'Remote Port:' in the PORT SSH CHARACTERISTICS display.")
sshPortNewlineFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("crToCrLf", 2), ("crToCrNull", 3), ("crLfToCr", 4), ("crLfToCrNull", 5), ("crNullToCr", 6), ("crNullToCrLf", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortNewlineFiltering.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortNewlineFiltering.setDescription("Translation to apply to newline sequences (CR/NULL or CR/LF) received from the network during a SSH session, before sending the newline to the character port. The value indicates which input sequence is converted to which output sequence and sent to the character port, with 'none' meaning no translation. Corresponds directly to the value labeled 'Newline Filtering:' in the PORT SSH CHARACTERISTICS display.")
sshPortNewline = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("crToCrLf", 2), ("crToCrNull", 3), ("crLfToCr", 4), ("crLfToCrNull", 5), ("crNullToCr", 6), ("crNullToCrLf", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortNewline.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortNewline.setDescription("Translation to apply to newline (carriage return) received from the character port during an SSH session, before sending the newline to the remote partner. Corresponds directly to the value labeled 'Newline:' in the PORT SSH CHARACTERISTICS display.")
sshPortTransmitBufferedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortTransmitBufferedTime.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortTransmitBufferedTime.setDescription("Number of milliseconds to wait before transmitting data received from a character port during an interactive SSH session. Corresponds directly to the value labeled 'Transmit Buffered Time:' in the PORT SSH CHARACTERISTICS display.")
sshPortRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ssh", 1), ("telnet", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortRemoteProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortRemoteProtocol.setDescription("Indicates which remote protocols will be accepted at this port. Corresponds indirectly to the presence of 'Telnet' or 'SSH' under the label 'Enabled Characteristics:' in the PORT SSH CHARACTERISTICS display. If both protocols are accepted at the port, the choice of protocol is determined by which features are enabled on the server with SSH taking precedence over Telnet.")
sshPortBreakSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortBreakSequence.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortBreakSequence.setDescription("A sequence of characters, which together define the break function. If this string is received from the SSH connection from across the network, the port will send a hardware break out of the serial port. The first character must be a carriage return ('\\r'), and no more carriage returns may appear in the sequence. The second character must not be a NULL, or a line-feed ('\\n'). Send a NULL to remove the break sequence. If the sequence exists, it must have two to four characters.")
sshCipherMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshCipherMask.setStatus('mandatory')
if mibBuilder.loadTexts: sshCipherMask.setDescription("This is a list of the encryption methods supported. The OCTET STRING contains a bitmap, with one bit for each cipher type. Corresponding bit numbers start with 0 as the low-order bit of the second octet. The following bit positions are defined: none(0), des(2), tripleDes(3), and blowfish(6). Corresponds directly to the value labeled 'SSH Cipher Enabled:' in the SERVER SSH CHARACTERISTICS display.")
sshAuthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenticationTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sshAuthenticationTimeout.setDescription("The timeout in minutes before disconnecting if no successful authentication of SSH parties has been made. Corresponds directly to the value labeled 'Authentication Timeout:' in the SERVER SSH CHARACTERISTICS display.")
sshHostKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyLength.setStatus('mandatory')
if mibBuilder.loadTexts: sshHostKeyLength.setDescription("The bit length of the SSH host encryption key. When modified, the desired change does not occur until the next system initialization. Corresponds directly to the value labeled 'Host Key Length:' in the SERVER SSH CHARACTERISTICS display.")
sshHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("generate", 2), ("update", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenerate.setStatus('mandatory')
if mibBuilder.loadTexts: sshHostKeyGenerate.setDescription('For a set-request with a value of generate or update, a new host key will be generated in the background. When modified with generate, the desired change does not occur until the next system initialization whereas when modified with update the change goes into effect upon completion of the new key. In response to a get-request or a get-next-request the agent will respond ready except when a host key is being created in which case the agent responds generate.')
sshServerKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyLength.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerKeyLength.setDescription("The bit length of the SSH server encryption key. The difference between the server and host key lengths should be greater than 128 bits. Corresponds directly to the value labeled 'Server Key Length:' in the SERVER SSH CHARACTERISTICS display.")
sshServerKeyTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyTtl.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerKeyTtl.setDescription("The time in minutes that the server key remains valid. After this time the server key is automatically re-generated. Corresponds directly to the value labeled 'Server Key Timeout:' in the SERVER SSH CHARACTERISTICS display.")
sshServerMaxBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 262144)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerMaxBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerMaxBufferSize.setDescription('The size of the four buffers used by SSH for input and output. These buffers are used for data coming from the console, going to the network, coming from the network and going to the console.')
mibBuilder.exportSymbols("MRV-IN-REACH-INTERNET-MIB", snmpAgentCommunityAuthenticationAlways=snmpAgentCommunityAuthenticationAlways, xEgp=xEgp, setClientEntryStatus=setClientEntryStatus, getClientTable=getClientTable, xremotePortIndex=xremotePortIndex, tn3270PortLanguageName=tn3270PortLanguageName, nameTtl=nameTtl, expEgpToEgpRuleStatus=expEgpToEgpRuleStatus, ipFragmentsQueuedCurrent=ipFragmentsQueuedCurrent, telnetPortSendLocation=telnetPortSendLocation, expEgpToOspfRuleAction=expEgpToOspfRuleAction, tn3270DeviceEntry=tn3270DeviceEntry, tn3270ScreenActionName=tn3270ScreenActionName, tn3270PortTable=tn3270PortTable, psEntryNumber=psEntryNumber, psEntryStatus=psEntryStatus, xRouterPolicy=xRouterPolicy, expOspfToRipRuleAction=expOspfToRipRuleAction, domainResolverSuffix=domainResolverSuffix, impIsisRuleStatus=impIsisRuleStatus, ipRouterIfTable=ipRouterIfTable, domainResolverPpp=domainResolverPpp, snmpAgentTrapClientQuerySourceHost1=snmpAgentTrapClientQuerySourceHost1, kerbStatus=kerbStatus, expEgpToIsisRuleErrorMetricAction=expEgpToIsisRuleErrorMetricAction, tcpPortKeepAliveLimit=tcpPortKeepAliveLimit, ipAdExtEntry=ipAdExtEntry, expRipToIsisRuleEntry=expRipToIsisRuleEntry, expStaticToRipRuleEntry=expStaticToRipRuleEntry, tn3270KeyDescription=tn3270KeyDescription, domainResolverPppSecondaryServer=domainResolverPppSecondaryServer, expIsisToOspfRuleEntry=expIsisToOspfRuleEntry, tn3270ScreenDeviceName=tn3270ScreenDeviceName, lpdQueueEntry=lpdQueueEntry, tn3270PortExtendedAttributes=tn3270PortExtendedAttributes, ipRouterIfPacketsOut=ipRouterIfPacketsOut, impIsisRulePreference=impIsisRulePreference, ripNetNet=ripNetNet, expEgpToEgpRuleFromAs=expEgpToEgpRuleFromAs, tn3270PortIndex=tn3270PortIndex, psTable=psTable, psEntryMask=psEntryMask, ipTrafficDstPort=ipTrafficDstPort, tn3270KeyName=tn3270KeyName, udpBcstServerStatus=udpBcstServerStatus, impEgpRuleTable=impEgpRuleTable, securIDServerName3=securIDServerName3, slipPortPacketsDiscarded=slipPortPacketsDiscarded, ipRouterIfIndex=ipRouterIfIndex, ipTrafficEntry=ipTrafficEntry, tn3270PortErrorLock=tn3270PortErrorLock, trapClientTable=trapClientTable, telnetSerialPortEchoMode=telnetSerialPortEchoMode, lpdQueuePorts=lpdQueuePorts, ipTrafficProtocol=ipTrafficProtocol, impIsisRuleEntry=impIsisRuleEntry, ipIfFilterDstPort=ipIfFilterDstPort, impEgpRuleAs=impEgpRuleAs, rotaryAddress=rotaryAddress, expIsisToEgpRuleToAs=expIsisToEgpRuleToAs, ipFragmentsQueuedHigh=ipFragmentsQueuedHigh, lpdQueueLfConversion=lpdQueueLfConversion, setClientAddressType=setClientAddressType, slipLocalAddress=slipLocalAddress, expStaticToIsisRuleDelayMetric=expStaticToIsisRuleDelayMetric, kerbSecureLoginsFailed=kerbSecureLoginsFailed, ipGatewayAddress2=ipGatewayAddress2, kerbMasterAccess=kerbMasterAccess, psPortDefaultOutboundAccess=psPortDefaultOutboundAccess, nameTable=nameTable, nameSource=nameSource, telnetSerialPortSynchronizeCharacter=telnetSerialPortSynchronizeCharacter, expStaticToIsisRuleStatus=expStaticToIsisRuleStatus, securIDQueryLimit=securIDQueryLimit, psEntryAccess=psEntryAccess, snmpAgentTrapCommunity=snmpAgentTrapCommunity, xIpNetToMediaTable=xIpNetToMediaTable, expStaticToIsisRuleNetwork=expStaticToIsisRuleNetwork, impRipRuleFromIf=impRipRuleFromIf, impIsisRuleMetric=impIsisRuleMetric, expRipToOspfRuleStatus=expRipToOspfRuleStatus, ipIfFilter2Protocol=ipIfFilter2Protocol, telnetSerialPortComControlServer=telnetSerialPortComControlServer, snmpAgentGetCommunity=snmpAgentGetCommunity, kerbSecureLogins=kerbSecureLogins, psEntryDirection=psEntryDirection, ipRouterIfForwardsIn=ipRouterIfForwardsIn, domainResolverAddress1=domainResolverAddress1, tn3270DeviceNumber=tn3270DeviceNumber, expStaticToRipRuleMetric=expStaticToRipRuleMetric, setClientIndex=setClientIndex, expOspfToRipRuleMetric=expOspfToRipRuleMetric, snmpAgentTrapClientQuerySourceHost2Timeout=snmpAgentTrapClientQuerySourceHost2Timeout, securIDPortStatus=securIDPortStatus, expRipToIsisRuleDefaultMetricAction=expRipToIsisRuleDefaultMetricAction, expEgpToRipRuleToIf=expEgpToRipRuleToIf, expRipToIsisRuleAction=expRipToIsisRuleAction, lpdQueueTable=lpdQueueTable, expStaticToEgpRuleToAs=expStaticToEgpRuleToAs, slipPortPacketLengthErrors=slipPortPacketLengthErrors, impOspfRuleTable=impOspfRuleTable, kerbServerPort=kerbServerPort, ospfXIfTypeActual=ospfXIfTypeActual, ipAdEntExtRip=ipAdEntExtRip, ipIfFilterDstAddr=ipIfFilterDstAddr, expRipToIsisRuleErrorMetricAction=expRipToIsisRuleErrorMetricAction, tn3270ScreenTable=tn3270ScreenTable, expRipToRipRuleToIf=expRipToRipRuleToIf, impEgpRuleStatus=impEgpRuleStatus, xremoteServerName1=xremoteServerName1, expOspfToIsisRuleAction=expOspfToIsisRuleAction, impIsisRuleNetwork=impIsisRuleNetwork, securIDServerAccessFailed4=securIDServerAccessFailed4, xremoteServerAccessFailed1=xremoteServerAccessFailed1, xremotePortTable=xremotePortTable, expRipToEgpRuleAction=expRipToEgpRuleAction, tn3270LanguageEntry=tn3270LanguageEntry, slipPortPacketsReceived=slipPortPacketsReceived, tn3270PortKeymapStatus=tn3270PortKeymapStatus, expRipToEgpRuleEntry=expRipToEgpRuleEntry, impRipRuleTable=impRipRuleTable, expStaticToIsisRuleErrorMetricAction=expStaticToIsisRuleErrorMetricAction, rotaryNumber=rotaryNumber, impIsisRuleAction=impIsisRuleAction, snmpAgentTrapClientPingHost2PollInterval=snmpAgentTrapClientPingHost2PollInterval, expOspfToIsisRuleStatus=expOspfToIsisRuleStatus, ipIfFilter2Table=ipIfFilter2Table, slipTable=slipTable, slipEntry=slipEntry, ipRouterIfArpPacketsIn=ipRouterIfArpPacketsIn, impEgpRuleMetric=impEgpRuleMetric, snmpAgentSetClientNumber=snmpAgentSetClientNumber, telnetSerialPortQueryCharacter=telnetSerialPortQueryCharacter, expOspfToRipRuleEntry=expOspfToRipRuleEntry, expEgpToIsisRuleStatus=expEgpToIsisRuleStatus, ospfIfMtrcAddressLessIf=ospfIfMtrcAddressLessIf, aToEValue=aToEValue, tn3270PortOutgoingTcpPort=tn3270PortOutgoingTcpPort, tn3270PortTypeAhead=tn3270PortTypeAhead, ipIfFilter2SrcPortEnd=ipIfFilter2SrcPortEnd, ipIfFilter2Action=ipIfFilter2Action, ospfXIfAddressLessIf=ospfXIfAddressLessIf, ospfXIfIpAddress=ospfXIfIpAddress, lpdJobNumber=lpdJobNumber, kerbServerName2=kerbServerName2, tn3270DeviceName=tn3270DeviceName, expOspfToIsisRuleEntry=expOspfToIsisRuleEntry, trapClientAddressType=trapClientAddressType, tcpConnectTimer=tcpConnectTimer, expIsisToRipRuleEntry=expIsisToRipRuleEntry, ipIfFilter2Status=ipIfFilter2Status, tn3270DeviceScreenNumber=tn3270DeviceScreenNumber, egpNbrStatus=egpNbrStatus, expOspfToEgpRuleTable=expOspfToEgpRuleTable, expRipToRipRuleMetric=expRipToRipRuleMetric, udpBcstServerTable=udpBcstServerTable, kerbPortEntry=kerbPortEntry, ipIfFilter2DstAddr=ipIfFilter2DstAddr, telnetSerialPortAbortOutputCharacter=telnetSerialPortAbortOutputCharacter, xRotary=xRotary, kerbQueryLimit=kerbQueryLimit, telnetSerialPortInterruptCharacter=telnetSerialPortInterruptCharacter, ospfXAreaTable=ospfXAreaTable, rotaryPortMap=rotaryPortMap, expStaticToIsisRuleDefaultMetricAction=expStaticToIsisRuleDefaultMetricAction, expStaticToIsisRuleDelayMetricAction=expStaticToIsisRuleDelayMetricAction, tn3270Device3278Model=tn3270Device3278Model, sshPortEntry=sshPortEntry, expStaticToEgpRuleMetric=expStaticToEgpRuleMetric, sshHostKeyLength=sshHostKeyLength, nameEntry=nameEntry, lpdJobState=lpdJobState, expEgpToOspfRuleFromAs=expEgpToOspfRuleFromAs, lpdQueueEnabled=lpdQueueEnabled, xremotePortXremote=xremotePortXremote, ipRouterIfPacketsIn=ipRouterIfPacketsIn, trapClientAddress=trapClientAddress, expEgpToEgpRuleAction=expEgpToEgpRuleAction, expEgpToIsisRuleDelayMetricAction=expEgpToIsisRuleDelayMetricAction, ipIfFilterTable=ipIfFilterTable, ipIfFilter2Index=ipIfFilter2Index, expEgpToIsisRuleDefaultMetric=expEgpToIsisRuleDefaultMetric, expOspfToIsisRuleErrorMetric=expOspfToIsisRuleErrorMetric, expIsisToRipRuleStatus=expIsisToRipRuleStatus, expEgpToIsisRuleTable=expEgpToIsisRuleTable, sshPortRemoteProtocol=sshPortRemoteProtocol, kerbServerAccess1=kerbServerAccess1, telnetPortTable=telnetPortTable, expEgpToIsisRuleMetricType=expEgpToIsisRuleMetricType, expEgpToIsisRuleErrorMetric=expEgpToIsisRuleErrorMetric, lpdQueueActiveJobs=lpdQueueActiveJobs, securIDServerName1=securIDServerName1, aToEOffset=aToEOffset, snmpAgentTrapClientQuerySourceHost2=snmpAgentTrapClientQuerySourceHost2, tn3270PortPrinterPort=tn3270PortPrinterPort, impOspfRulePreference=impOspfRulePreference, expRipToEgpRuleNetwork=expRipToEgpRuleNetwork, lpdQueueName=lpdQueueName, tn3270LanguageName=tn3270LanguageName, tcpQueuedSegs=tcpQueuedSegs, ospfXAreaEntry=ospfXAreaEntry, securIDServerAccess0=securIDServerAccess0, snmpAgentGetClientNumber=snmpAgentGetClientNumber, xExport=xExport, ripNetRipsOut=ripNetRipsOut, expOspfToEgpRuleMetric=expOspfToEgpRuleMetric, securIDErrorUsername=securIDErrorUsername, eToALanguageName=eToALanguageName, telnetSerialPortEraseLineCharacter=telnetSerialPortEraseLineCharacter, ipAdEntExtAddress=ipAdEntExtAddress, impEgpRuleEntry=impEgpRuleEntry, impEgpRuleType=impEgpRuleType, expEgpToRipRuleFromAs=expEgpToRipRuleFromAs, expEgpToEgpRuleToAs=expEgpToEgpRuleToAs, impRipRuleMetricAction=impRipRuleMetricAction, tn3270KeyEntry=tn3270KeyEntry, expRipToIsisRuleErrorMetric=expRipToIsisRuleErrorMetric, snmpAgentTrapClientPingHost2PollRetries=snmpAgentTrapClientPingHost2PollRetries, expOspfToEgpRuleFromAs=expOspfToEgpRuleFromAs, egpNbrTable=egpNbrTable, domainResolverNameNumber=domainResolverNameNumber, ripNetTable=ripNetTable, lpdQueueFormFeed=lpdQueueFormFeed, expIsisToEgpRuleAction=expIsisToEgpRuleAction, ipRouterIfRDP=ipRouterIfRDP, expIsisToRipRuleToIf=expIsisToRipRuleToIf, xRouterIp=xRouterIp, expRipToIsisRuleDelayMetricAction=expRipToIsisRuleDelayMetricAction, ipAutoSubnetMask=ipAutoSubnetMask, tn3270ScreenStatus=tn3270ScreenStatus, expRipToIsisRuleStatus=expRipToIsisRuleStatus, ipReassembly=ipReassembly, xFilter=xFilter, psEntryPortMap=psEntryPortMap, psPortTable=psPortTable, xremotePortEntry=xremotePortEntry, expOspfToIsisRuleDelayMetric=expOspfToIsisRuleDelayMetric, udpBcstPort=udpBcstPort, telnetPortEntry=telnetPortEntry, tcpLocalPortBase=tcpLocalPortBase, ospfXIfStatus=ospfXIfStatus, snmpAgentTrapClientPingHost2=snmpAgentTrapClientPingHost2, ipIfFilterStatus=ipIfFilterStatus, telnetSerialPortInterpretInterruptAsBreak=telnetSerialPortInterpretInterruptAsBreak, expRipToIsisRuleDelayMetric=expRipToIsisRuleDelayMetric, securIDServerAccessFailed0=securIDServerAccessFailed0, ipIfFilter2DstPortEnd=ipIfFilter2DstPortEnd, securIDBaseTimeout=securIDBaseTimeout, tn3270ScreenCharacterSequence=tn3270ScreenCharacterSequence, sshPortIncomingTcpPort=sshPortIncomingTcpPort, expOspfToIsisRuleErrorMetricAction=expOspfToIsisRuleErrorMetricAction, tn3270LanguageNumber=tn3270LanguageNumber, expEgpToRipRuleMetric=expEgpToRipRuleMetric, getClientEntry=getClientEntry)
mibBuilder.exportSymbols("MRV-IN-REACH-INTERNET-MIB", udpBcstRouting=udpBcstRouting, expStaticToEgpRuleMetricAction=expStaticToEgpRuleMetricAction, ipIfFilter2ProtocolPriority=ipIfFilter2ProtocolPriority, sshPortTransmitBufferedTime=sshPortTransmitBufferedTime, tcpPortIndex=tcpPortIndex, expStaticToIsisRuleTable=expStaticToIsisRuleTable, telnetPortEorReflection=telnetPortEorReflection, expStaticToEgpRuleAction=expStaticToEgpRuleAction, expEgpToIsisRuleExpenseMetric=expEgpToIsisRuleExpenseMetric, lpdJobEntry=lpdJobEntry, expRipToEgpRuleTable=expRipToEgpRuleTable, slipNetworkPacketsReceived=slipNetworkPacketsReceived, lpdJobFileName=lpdJobFileName, tcpLocalPortIncrement=tcpLocalPortIncrement, udpBcstServerEntry=udpBcstServerEntry, expRipToOspfRuleNetwork=expRipToOspfRuleNetwork, telnetPortBinaryMode=telnetPortBinaryMode, ipGenAdExtTable=ipGenAdExtTable, expOspfToIsisRuleMetricType=expOspfToIsisRuleMetricType, snmpAgentSetCommunity=snmpAgentSetCommunity, kerbErrorTime=kerbErrorTime, expRipToRipRuleNetwork=expRipToRipRuleNetwork, telnetSerialPortComControlServerRaisesDtr=telnetSerialPortComControlServerRaisesDtr, ospfIfMtrcEntry=ospfIfMtrcEntry, sshAuthenticationTimeout=sshAuthenticationTimeout, ipRouterIfProtocolPriority=ipRouterIfProtocolPriority, expEgpToIsisRuleEntry=expEgpToIsisRuleEntry, expEgpToRipRuleEntry=expEgpToRipRuleEntry, ospfStatus=ospfStatus, ipIfFilter2TcpSyn=ipIfFilter2TcpSyn, eToALanguageEntry=eToALanguageEntry, xInternetDep=xInternetDep, expEgpToIsisRuleDelayMetric=expEgpToIsisRuleDelayMetric, domainResolverPppPrimaryServer=domainResolverPppPrimaryServer, impRipRuleMetric=impRipRuleMetric, sshCipherMask=sshCipherMask, snmpAgentTrapClientPingHost1PollInterval=snmpAgentTrapClientPingHost1PollInterval, securIDMaxRetries=securIDMaxRetries, trapClientEntry=trapClientEntry, impRipRuleType=impRipRuleType, telnetPortNewlineTranslation=telnetPortNewlineTranslation, nameAddress=nameAddress, securIDInsecureLogins=securIDInsecureLogins, ospfAutoConfigure=ospfAutoConfigure, nameStatus=nameStatus, sshPortNewline=sshPortNewline, udpBcstPortEntry=udpBcstPortEntry, ipTrafficSrcPort=ipTrafficSrcPort, sshPortIndex=sshPortIndex, kerbMasterAccessFailed=kerbMasterAccessFailed, impEgpRulePreference=impEgpRulePreference, expStaticToIsisRuleExpenseMetricAction=expStaticToIsisRuleExpenseMetricAction, expRipToEgpRuleMetricAction=expRipToEgpRuleMetricAction, psPortDefaultInboundAccess=psPortDefaultInboundAccess, securIDServerName2=securIDServerName2, expOspfToRipRuleMetricAction=expOspfToRipRuleMetricAction, rotaryEntry=rotaryEntry, ipIfFilterDstMask=ipIfFilterDstMask, expEgpToOspfRuleNetwork=expEgpToOspfRuleNetwork, lpdQueueBypass=lpdQueueBypass, telnetSerialPortComControlClient=telnetSerialPortComControlClient, impIsisRuleType=impIsisRuleType, securIDErrorPortIndex=securIDErrorPortIndex, xIp=xIp, trapClientEntryStatus=trapClientEntryStatus, telnetSerialPortComControlClientTogglesDtr=telnetSerialPortComControlClientTogglesDtr, tcpPortConnectByAddress=tcpPortConnectByAddress, ospfXIfEntry=ospfXIfEntry, impEgpRuleAction=impEgpRuleAction, expEgpToEgpRuleMetricAction=expEgpToEgpRuleMetricAction, expIsisToRipRuleTable=expIsisToRipRuleTable, xDomainResolver=xDomainResolver, expOspfToIsisRuleExpenseMetric=expOspfToIsisRuleExpenseMetric, impRipRuleAction=impRipRuleAction, xTcp=xTcp, xIpNetToMediaReverseArp=xIpNetToMediaReverseArp, egpNbrEntry=egpNbrEntry, telnetSerialPortTable=telnetSerialPortTable, expRipToEgpRuleStatus=expRipToEgpRuleStatus, ipFilterState=ipFilterState, expOspfToRipRuleTable=expOspfToRipRuleTable, expStaticToIsisRuleMetricType=expStaticToIsisRuleMetricType, securIDError=securIDError, ipGenAdEntExtType=ipGenAdEntExtType, aToELanguageName=aToELanguageName, domainResolverTtl=domainResolverTtl, ipGatewayAddress1=ipGatewayAddress1, expEgpToRipRuleTable=expEgpToRipRuleTable, kerbServerAccessFailed2=kerbServerAccessFailed2, psEntryInvalidIndex=psEntryInvalidIndex, tn3270KeyTable=tn3270KeyTable, xImport=xImport, impRipRuleNetwork=impRipRuleNetwork, expRipToEgpRuleMetric=expRipToEgpRuleMetric, egpRouting=egpRouting, slipPortPacketsSent=slipPortPacketsSent, ripNetEntry=ripNetEntry, psEntryAddress=psEntryAddress, telnetSerialPortUrgentBreak=telnetSerialPortUrgentBreak, securIDServerAccessFailed2=securIDServerAccessFailed2, setClientEntry=setClientEntry, tn3270LanguageStatus=tn3270LanguageStatus, kerbRealm=kerbRealm, securIDEncryptionMode=securIDEncryptionMode, securIDServerAccess4=securIDServerAccess4, impOspfRuleNetwork=impOspfRuleNetwork, tn3270DeviceType=tn3270DeviceType, expIsisToOspfRuleStatus=expIsisToOspfRuleStatus, tcpPortWindowSize=tcpPortWindowSize, psPortIndex=psPortIndex, tn3270PortSpaceInsert=tn3270PortSpaceInsert, securIDSecureLogins=securIDSecureLogins, ospfXAreaId=ospfXAreaId, impRipRuleStatus=impRipRuleStatus, xremoteServerName2=xremoteServerName2, securIDSecureLoginsFailed=securIDSecureLoginsFailed, kerbPasswordChangeFailed=kerbPasswordChangeFailed, expStaticToIsisRuleAction=expStaticToIsisRuleAction, xremoteSessions=xremoteSessions, snmpAgentTrapClientPingHost1PollRetries=snmpAgentTrapClientPingHost1PollRetries, egpNbrIntervalDead=egpNbrIntervalDead, securIDServerAccess2=securIDServerAccess2, ipTrafficSrcAddr=ipTrafficSrcAddr, snmpAgentAuthFailureAddress=snmpAgentAuthFailureAddress, tn3270KeyDeviceName=tn3270KeyDeviceName, aToELanguageEntry=aToELanguageEntry, expIsisToEgpRuleTable=expIsisToEgpRuleTable, slipNetworkPacketsDiscarded=slipNetworkPacketsDiscarded, xremoteServerClients=xremoteServerClients, expRipToEgpRuleToAs=expRipToEgpRuleToAs, xIpTraffic=xIpTraffic, nameName=nameName, expOspfToIsisRuleFromAs=expOspfToIsisRuleFromAs, expOspfToEgpRuleMetricAction=expOspfToEgpRuleMetricAction, kerbError=kerbError, ipIfFilter2Entry=ipIfFilter2Entry, xSlip=xSlip, tn3270DeviceStatus=tn3270DeviceStatus, psEntryIndex=psEntryIndex, ipIfFilterSrcMask=ipIfFilterSrcMask, expIsisToOspfRuleTable=expIsisToOspfRuleTable, expIsisToRipRuleNetwork=expIsisToRipRuleNetwork, expStaticToIsisRuleErrorMetric=expStaticToIsisRuleErrorMetric, ipRouterIfArpPacketsOut=ipRouterIfArpPacketsOut, kerbMasterName=kerbMasterName, ipTrafficPercent=ipTrafficPercent, expEgpToEgpRuleEntry=expEgpToEgpRuleEntry, slipMask=slipMask, telnetSerialPortRs491=telnetSerialPortRs491, tn3270PortEorNegotiation=tn3270PortEorNegotiation, expEgpToIsisRuleFromAs=expEgpToIsisRuleFromAs, expOspfToIsisRuleNetwork=expOspfToIsisRuleNetwork, xSecurID=xSecurID, expRipToOspfRuleAction=expRipToOspfRuleAction, expStaticToEgpRuleNetwork=expStaticToEgpRuleNetwork, aToELanguageTable=aToELanguageTable, ipConfigureBootp=ipConfigureBootp, rotaryStatus=rotaryStatus, expRipToIsisRuleTable=expRipToIsisRuleTable, securIDPortIndex=securIDPortIndex, expEgpToRipRuleMetricAction=expEgpToRipRuleMetricAction, xremotePortXdmHost=xremotePortXdmHost, ipIfFilterIndex=ipIfFilterIndex, telnetSerialPortIndex=telnetSerialPortIndex, ipGenAdEntExtBroadcast=ipGenAdEntExtBroadcast, expIsisToRipRuleAction=expIsisToRipRuleAction, tcpResequencing=tcpResequencing, ipRouterIfMTU=ipRouterIfMTU, eToAOffset=eToAOffset, xIpNetToMediaCircuit=xIpNetToMediaCircuit, tn3270PortScanner=tn3270PortScanner, expEgpToRipRuleAction=expEgpToRipRuleAction, ipIfFilterSrcAddr=ipIfFilterSrcAddr, sshPortNewlineFiltering=sshPortNewlineFiltering, ipTrafficIndex=ipTrafficIndex, eToALanguageTable=eToALanguageTable, xremotePortXdmQuery=xremotePortXdmQuery, ipIfFilterProtocol=ipIfFilterProtocol, ripNetState=ripNetState, telnetSerialPortEntry=telnetSerialPortEntry, lpdQueueStatus=lpdQueueStatus, ospfXIfTable=ospfXIfTable, expIsisToRipRuleMetric=expIsisToRipRuleMetric, telnetSerialPortCsiEscape=telnetSerialPortCsiEscape, expEgpToIsisRuleAction=expEgpToIsisRuleAction, expEgpToIsisRuleExpenseMetricAction=expEgpToIsisRuleExpenseMetricAction, impRipRuleEntry=impRipRuleEntry, xTelnet=xTelnet, sshServerKeyTtl=sshServerKeyTtl, psEntryNumberLimit=psEntryNumberLimit, expRipToIsisRuleDefaultMetric=expRipToIsisRuleDefaultMetric, telnetPortClientLocation=telnetPortClientLocation, kerbServerAccessFailed1=kerbServerAccessFailed1, kerbPortStatus=kerbPortStatus, impEgpRuleMetricAction=impEgpRuleMetricAction, expOspfToEgpRuleToAs=expOspfToEgpRuleToAs, lpdJobAssignedPort=lpdJobAssignedPort, xremoteServerAccess2=xremoteServerAccess2, expRipToIsisRuleMetricType=expRipToIsisRuleMetricType, lpdQueueProcessedJobs=lpdQueueProcessedJobs, telnetPortOutgoingTcpPort=telnetPortOutgoingTcpPort, expRipToIsisRuleExpenseMetric=expRipToIsisRuleExpenseMetric, expOspfToIsisRuleDelayMetricAction=expOspfToIsisRuleDelayMetricAction, securIDPortTable=securIDPortTable, psEntry=psEntry, ospfIfMtrcTable=ospfIfMtrcTable, sshPortBreakSequence=sshPortBreakSequence, tn3270KeyStatus=tn3270KeyStatus, expIsisToEgpRuleNetwork=expIsisToEgpRuleNetwork, telnetSerialPortAttentionCharacter=telnetSerialPortAttentionCharacter, tcpAckDelay=tcpAckDelay, expStaticToRipRuleMetricAction=expStaticToRipRuleMetricAction, expStaticToRipRuleStatus=expStaticToRipRuleStatus, sshServerMaxBufferSize=sshServerMaxBufferSize, expRipToRipRuleStatus=expRipToRipRuleStatus, lpdQueueTotalJobs=lpdQueueTotalJobs, impOspfRuleEntry=impOspfRuleEntry, psPortEntry=psPortEntry, udpBcstPortTable=udpBcstPortTable, expOspfToIsisRuleTable=expOspfToIsisRuleTable, tn3270DeviceTable=tn3270DeviceTable, kerbServerName1=kerbServerName1, xInternet=xInternet, sshServerKeyLength=sshServerKeyLength, expRipToRipRuleTable=expRipToRipRuleTable, ipIfFilter2SrcAddr=ipIfFilter2SrcAddr, domainResolverAddress2=domainResolverAddress2, securIDPortEntry=securIDPortEntry, expOspfToRipRuleToIf=expOspfToRipRuleToIf, getClientEntryStatus=getClientEntryStatus, ipGatewayPingInterval=ipGatewayPingInterval, tn3270LanguageTable=tn3270LanguageTable, xremoteServerAccessFailed2=xremoteServerAccessFailed2, ripState=ripState, impEgpRuleNetwork=impEgpRuleNetwork, telnetSerialPortPass8d=telnetSerialPortPass8d, setClientTable=setClientTable, expRipToOspfRuleEntry=expRipToOspfRuleEntry, sshHostKeyGenerate=sshHostKeyGenerate, psClrInternetSecurity=psClrInternetSecurity, expIsisToOspfRuleAction=expIsisToOspfRuleAction, setClientAddress=setClientAddress, ipAdEntExtProxyArp=ipAdEntExtProxyArp, ipTrafficMonitoring=ipTrafficMonitoring, tn3270PrefixKeyMap=tn3270PrefixKeyMap, securIDServerName4=securIDServerName4, xremoteServerAccess1=xremoteServerAccess1, ospfIfMtrcIpAddress=ospfIfMtrcIpAddress, expIsisToEgpRuleEntry=expIsisToEgpRuleEntry, securIDServerAccess3=securIDServerAccess3, expOspfToIsisRuleDefaultMetricAction=expOspfToIsisRuleDefaultMetricAction, rotaryTable=rotaryTable, ipIfFilter2DstMask=ipIfFilter2DstMask, ipTrafficTable=ipTrafficTable)
mibBuilder.exportSymbols("MRV-IN-REACH-INTERNET-MIB", expRipToOspfRuleTable=expRipToOspfRuleTable, slipState=slipState, tn3270DeviceKeyNumber=tn3270DeviceKeyNumber, expIsisToEgpRuleMetric=expIsisToEgpRuleMetric, snmpAgentTrapClientNumber=snmpAgentTrapClientNumber, telnetPortIndex=telnetPortIndex, ripNetAlgorithm=ripNetAlgorithm, ipARPTimeout=ipARPTimeout, expEgpToRipRuleStatus=expEgpToRipRuleStatus, tcpDataSendDelay=tcpDataSendDelay, udpBcstServerAddress=udpBcstServerAddress, getClientIndex=getClientIndex, lpdJobFileSize=lpdJobFileSize, snmpAgentTrapClientQuerySourceHost1Timeout=snmpAgentTrapClientQuerySourceHost1Timeout, expStaticToIsisRuleDefaultMetric=expStaticToIsisRuleDefaultMetric, expEgpToRipRuleNetwork=expEgpToRipRuleNetwork, tn3270ScreenEntry=tn3270ScreenEntry, securIDServerAccessFailed1=securIDServerAccessFailed1, expEgpToEgpRuleTable=expEgpToEgpRuleTable, securIDPort=securIDPort, telnetSerialPortEraseKeyCharacter=telnetSerialPortEraseKeyCharacter, kerbPortTable=kerbPortTable, xOspf=xOspf, ipTrafficIf=ipTrafficIf, impRipRulePreference=impRipRulePreference, ipIfFilter2DstPortStart=ipIfFilter2DstPortStart, expOspfToRipRuleStatus=expOspfToRipRuleStatus, tcpPortTable=tcpPortTable, udpBcstPortStatus=udpBcstPortStatus, expStaticToRipRuleAction=expStaticToRipRuleAction, ipIfFilterSrcPort=ipIfFilterSrcPort, expRipToIsisRuleExpenseMetricAction=expRipToIsisRuleExpenseMetricAction, securIDServerAccess1=securIDServerAccess1, expEgpToIsisRuleDefaultMetricAction=expEgpToIsisRuleDefaultMetricAction, impIsisRuleTable=impIsisRuleTable, expEgpToEgpRuleNetwork=expEgpToEgpRuleNetwork, ripStatus=ripStatus, expStaticToEgpRuleEntry=expStaticToEgpRuleEntry, ipIfFilterAction=ipIfFilterAction, ipRouterIfForwardsOut=ipRouterIfForwardsOut, expRipToRipRuleAction=expRipToRipRuleAction, telnetSerialPortTransmitMode=telnetSerialPortTransmitMode, expIsisToEgpRuleMetricAction=expIsisToEgpRuleMetricAction, tn3270KeyCharacterSequence=tn3270KeyCharacterSequence, expOspfToIsisRuleExpenseMetricAction=expOspfToIsisRuleExpenseMetricAction, sshPortTable=sshPortTable, xSsh=xSsh, snmpAgentTrapClientPingHost1=snmpAgentTrapClientPingHost1, xIpNetToMediaEntry=xIpNetToMediaEntry, ipRouterIfEntry=ipRouterIfEntry, ripNetRipsIn=ripNetRipsIn, tcpDiscardSegs=tcpDiscardSegs, expOspfToIsisRuleDefaultMetric=expOspfToIsisRuleDefaultMetric, expStaticToEgpRuleStatus=expStaticToEgpRuleStatus, expOspfToRipRuleFromAs=expOspfToRipRuleFromAs, expEgpToOspfRuleEntry=expEgpToOspfRuleEntry, telnetSerialPortOptionDisplay=telnetSerialPortOptionDisplay, expIsisToRipRuleMetricAction=expIsisToRipRuleMetricAction, expOspfToEgpRuleNetwork=expOspfToEgpRuleNetwork, slipPortPacketChecksumErrors=slipPortPacketChecksumErrors, xSnmpAgent=xSnmpAgent, eToAValue=eToAValue, kerbPortIndex=kerbPortIndex, ipIfFilter2SrcMask=ipIfFilter2SrcMask, telnetPortIncomingTcpPort=telnetPortIncomingTcpPort, tcpRetransmitMin=tcpRetransmitMin, expOspfToEgpRuleAction=expOspfToEgpRuleAction, tcpPortEntry=tcpPortEntry, telnetSerialPortNewlineMode=telnetSerialPortNewlineMode, expStaticToIsisRuleEntry=expStaticToIsisRuleEntry, xXremote=xXremote, expRipToRipRuleEntry=expRipToRipRuleEntry, expRipToIsisRuleNetwork=expRipToIsisRuleNetwork, ospfXAreaStatus=ospfXAreaStatus, xPortSecurity=xPortSecurity, kerbServerAccess2=kerbServerAccess2, slipNetworkPacketsSent=slipNetworkPacketsSent, securIDServerName0=securIDServerName0, ipAdExtTable=ipAdExtTable, expStaticToEgpRuleTable=expStaticToEgpRuleTable, tn3270PortEntry=tn3270PortEntry, lpdJobTable=lpdJobTable, trapClientIndex=trapClientIndex, impIsisRuleMetricAction=impIsisRuleMetricAction, xRouterUdp=xRouterUdp, telnetPortPassiveSendLocation=telnetPortPassiveSendLocation, lpdJobStatus=lpdJobStatus, getClientAddressType=getClientAddressType, slipIndex=slipIndex, ospfIfMtrcTos=ospfIfMtrcTos, expEgpToOspfRuleStatus=expEgpToOspfRuleStatus, xRip=xRip, expIsisToEgpRuleStatus=expIsisToEgpRuleStatus, ipGenAdExtEntry=ipGenAdExtEntry, expStaticToRipRuleNetwork=expStaticToRipRuleNetwork, ipIfFilter2SrcPortStart=ipIfFilter2SrcPortStart, telnetPortTerminalType=telnetPortTerminalType, expOspfToRipRuleNetwork=expOspfToRipRuleNetwork, expStaticToRipRuleTable=expStaticToRipRuleTable, xKerberos=xKerberos, lpdJobHostName=lpdJobHostName, telnetSerialPortTransmitCharacterTimes=telnetSerialPortTransmitCharacterTimes, expEgpToEgpRuleMetric=expEgpToEgpRuleMetric, expOspfToEgpRuleStatus=expOspfToEgpRuleStatus, ospfIfMtrcCostActual=ospfIfMtrcCostActual, expStaticToRipRuleToIf=expStaticToRipRuleToIf, slipRemoteAddress=slipRemoteAddress, xlpd=xlpd, egpNbrAddr=egpNbrAddr, expOspfToEgpRuleEntry=expOspfToEgpRuleEntry, expIsisToOspfRuleNetwork=expIsisToOspfRuleNetwork, ipIfFilterEntry=ipIfFilterEntry, ipTrafficDstAddr=ipTrafficDstAddr, expEgpToIsisRuleNetwork=expEgpToIsisRuleNetwork, tcpRoutingTblSz=tcpRoutingTblSz, kerbInsecureLogins=kerbInsecureLogins, ipTrafficSort=ipTrafficSort, egpStatus=egpStatus, expStaticToIsisRuleExpenseMetric=expStaticToIsisRuleExpenseMetric, tn3270PortDeviceName=tn3270PortDeviceName, securIDServerAccessFailed3=securIDServerAccessFailed3, impOspfRuleStatus=impOspfRuleStatus, xTn3270=xTn3270, telnetSerialPortTransmitBufferedTime=telnetSerialPortTransmitBufferedTime, expRipToRipRuleMetricAction=expRipToRipRuleMetricAction, lpdQueueWaitingJobs=lpdQueueWaitingJobs, getClientAddress=getClientAddress, expEgpToOspfRuleTable=expEgpToOspfRuleTable)
