#
# PySNMP MIB module NMS-LOG-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-LOG-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, Counter64, NotificationType, MibIdentifier, IpAddress, ModuleIdentity, Bits, Gauge32, iso, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "Counter64", "NotificationType", "MibIdentifier", "IpAddress", "ModuleIdentity", "Bits", "Gauge32", "iso", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
logServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235))
logServerTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1), )
if mibBuilder.loadTexts: logServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: logServerTable.setDescription('A table of log server configuration.')
logServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1), ).setIndexNames((0, "NMS-LOG-SERVER-MIB", "logServerLevel"), (0, "NMS-LOG-SERVER-MIB", "logServerAddr"))
if mibBuilder.loadTexts: logServerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logServerTableEntry.setDescription('A collection of log server configuration.')
logServerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerLevel.setStatus('mandatory')
if mibBuilder.loadTexts: logServerLevel.setDescription('Log server filter class. One of the index of this table. And default value is debug(7). ')
logServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: logServerAddr.setDescription('Log server IP address. One of the index of this table.')
logServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: logServerRowStatus.setDescription('Log server table row status.')
logServerOff = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logServerOff.setStatus('mandatory')
if mibBuilder.loadTexts: logServerOff.setDescription('Is syslog service ON or OFFs. 0-ON, 1-OFF.')
logTrapTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3), )
if mibBuilder.loadTexts: logTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: logTrapTable.setDescription('A table of log trap configuration.')
logTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1), ).setIndexNames((0, "NMS-LOG-SERVER-MIB", "logTrapLevel"), (0, "NMS-LOG-SERVER-MIB", "logTrapAddr"))
if mibBuilder.loadTexts: logTrapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logTrapTableEntry.setDescription('A collection of log trap configuration.')
logTrapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapAddr.setStatus('mandatory')
if mibBuilder.loadTexts: logTrapAddr.setDescription('Log trap IP address. The index of this table.')
logTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logTrapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: logTrapRowStatus.setDescription('Log trap table row status.')
logTrapRfcVer = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("RFC3164", 0), ("RFC5424", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapRfcVer.setStatus('mandatory')
if mibBuilder.loadTexts: logTrapRfcVer.setDescription('Log trap syslog format. Rfc3164 or Rfc5424.')
logTrap = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrap.setStatus('mandatory')
if mibBuilder.loadTexts: logTrap.setDescription('Log trap level. And default value is info(6). ')
mibBuilder.exportSymbols("NMS-LOG-SERVER-MIB", logServerOff=logServerOff, logServerAddr=logServerAddr, logServerTable=logServerTable, logTrapTableEntry=logTrapTableEntry, logTrapAddr=logTrapAddr, logServerLevel=logServerLevel, logTrapRfcVer=logTrapRfcVer, logTrapTable=logTrapTable, logTrapRowStatus=logTrapRowStatus, logTrap=logTrap, logServerTableEntry=logServerTableEntry, logServer=logServer, logServerRowStatus=logServerRowStatus)
