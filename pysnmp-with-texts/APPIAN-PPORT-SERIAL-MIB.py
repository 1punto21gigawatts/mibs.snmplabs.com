#
# PySNMP MIB module APPIAN-PPORT-SERIAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-SERIAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcNodeId, acPport, AcOpStatus, AcAdminStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "acPport", "AcOpStatus", "AcAdminStatus")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, IpAddress, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity, Unsigned32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "IpAddress", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Unsigned32", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
acSerial = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2))
acSerial.setRevisions(('1900-02-23 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acSerial.setRevisionsDescriptions(('Engineering draft version, not for release.',))
if mibBuilder.loadTexts: acSerial.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acSerial.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acSerial.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acSerial.setDescription('Appian Serial Interface MIB for RS232 like interfaces.')
acSerialTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1), )
if mibBuilder.loadTexts: acSerialTable.setStatus('current')
if mibBuilder.loadTexts: acSerialTable.setDescription('Each Switch Control Processor supports a debug port as well as a management access or craft CLI port. The system will initialize the acSerialTable when the system boots or an SCP has been reset.')
acSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), (0, "APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), (0, "APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialEntry.setStatus('current')
if mibBuilder.loadTexts: acSerialEntry.setDescription('A row in the serial table contains configurable parameters and statistics for each serial interface on this platform.')
acSerialNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSerialNodeId.setStatus('current')
if mibBuilder.loadTexts: acSerialNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acSerialSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSerialSlot.setStatus('current')
if mibBuilder.loadTexts: acSerialSlot.setDescription('The control processor slot upon which the serial port is located.')
acSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSerialPort.setStatus('current')
if mibBuilder.loadTexts: acSerialPort.setDescription('The physical port number on acSerialEntrySlot where this connector is located.')
acSerialAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acSerialAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information.')
acSerialOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialOpStatus.setStatus('current')
if mibBuilder.loadTexts: acSerialOpStatus.setDescription('The current operational status of the serial port driver and services supporting this interface.')
acSerialOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialOpCode.setStatus('current')
if mibBuilder.loadTexts: acSerialOpCode.setDescription('Provides a detailed status code which can be used to isolate a problem or state condition reported in acSerialEntryOpStatus.')
acSerialOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("terminal", 1), ("ppp", 2))).clone('terminal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialOpMode.setStatus('current')
if mibBuilder.loadTexts: acSerialOpMode.setDescription('Determines the mode of operation for the serial port. If the serial port is using a raw terminal(1) or if we are to run PPP over this port as an alternative EMS access mechanism.')
acSerialBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("auto", 1), ("baud9600", 2), ("baud19200", 3), ("baud56000", 4), ("baud64000", 5), ("baud115000", 6))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialBaudRate.setStatus('current')
if mibBuilder.loadTexts: acSerialBaudRate.setDescription('User configured baud rate for use on the serial port. When set to Auto(1), the driver will negotiate baud rate.')
acSerialParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("odd", 2), ("even", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialParity.setStatus('current')
if mibBuilder.loadTexts: acSerialParity.setDescription('User configurable partity which is used on the serial port.')
acSerialNumberBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("bits-7", 1), ("bits-8", 2))).clone('bits-8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialNumberBits.setStatus('current')
if mibBuilder.loadTexts: acSerialNumberBits.setDescription('Number of bits-per-byte used over the serial port.')
acSerialIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialIpAddress.setStatus('current')
if mibBuilder.loadTexts: acSerialIpAddress.setDescription('The IP Addressed used on the serial port during PPP sessions. If chSerialMode is equal to PPP-DHCP, this field is not needed otherwise a static IP Address is required in this field.')
acSerialIpSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialIpSubnet.setStatus('current')
if mibBuilder.loadTexts: acSerialIpSubnet.setDescription('The IP Subnet Mask in dotted notation for use on the serial port during PPP sessions.')
acSerialRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialRxOctets.setStatus('current')
if mibBuilder.loadTexts: acSerialRxOctets.setDescription('The number of bytes read by the serial port driver.')
acSerialTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSerialTxOctets.setStatus('current')
if mibBuilder.loadTexts: acSerialTxOctets.setDescription('The number of bytes transmitted by the serial port driver.')
acSerialInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Serial Interface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSerialInterfaceName.setStatus('current')
if mibBuilder.loadTexts: acSerialInterfaceName.setDescription('A user configurable ASCII name of up to 64 bytes in length, which is assigned for this interface.')
acSerialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0))
acSerialLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: acSerialLinkDownTrap.setDescription('The Serial Port driver for this interface has detected the port to be in the down state.')
acSerialLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: acSerialLinkUpTrap.setDescription('The Serial Port driver for this interface has detected the port to be in the down state.')
acSerialStatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"))
if mibBuilder.loadTexts: acSerialStatsResetTrap.setStatus('current')
if mibBuilder.loadTexts: acSerialStatsResetTrap.setDescription('The statistics for this serial port have been reset to zero(0) and may cause problems for long term trending functions.')
acSerialCfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 2, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialNodeId"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialSlot"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialPort"), ("APPIAN-PPORT-SERIAL-MIB", "acSerialOpCode"))
if mibBuilder.loadTexts: acSerialCfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: acSerialCfgErrorTrap.setDescription('A configuration request for this serial interface has been detected as incorrect or corrupted.')
mibBuilder.exportSymbols("APPIAN-PPORT-SERIAL-MIB", acSerialOpMode=acSerialOpMode, acSerialLinkUpTrap=acSerialLinkUpTrap, acSerialTraps=acSerialTraps, acSerialTable=acSerialTable, acSerialTxOctets=acSerialTxOctets, acSerialOpCode=acSerialOpCode, acSerialParity=acSerialParity, acSerialLinkDownTrap=acSerialLinkDownTrap, acSerialNumberBits=acSerialNumberBits, acSerial=acSerial, acSerialRxOctets=acSerialRxOctets, acSerialInterfaceName=acSerialInterfaceName, acSerialIpSubnet=acSerialIpSubnet, acSerialEntry=acSerialEntry, PYSNMP_MODULE_ID=acSerial, acSerialPort=acSerialPort, acSerialIpAddress=acSerialIpAddress, acSerialBaudRate=acSerialBaudRate, acSerialStatsResetTrap=acSerialStatsResetTrap, acSerialAdminStatus=acSerialAdminStatus, acSerialCfgErrorTrap=acSerialCfgErrorTrap, acSerialOpStatus=acSerialOpStatus, acSerialSlot=acSerialSlot, acSerialNodeId=acSerialNodeId)
