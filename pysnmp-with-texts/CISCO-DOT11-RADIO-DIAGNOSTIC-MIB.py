#
# PySNMP MIB module CISCO-DOT11-RADIO-DIAGNOSTIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-RADIO-DIAGNOSTIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, Counter64, IpAddress, Unsigned32, Integer32, ObjectIdentity, Counter32, TimeTicks, iso, MibIdentifier, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Counter64", "IpAddress", "Unsigned32", "Integer32", "ObjectIdentity", "Counter32", "TimeTicks", "iso", "MibIdentifier", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoDot11RadioDiagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 105))
ciscoDot11RadioDiagMIB.setRevisions(('2003-12-23 00:00', '2003-05-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDot11RadioDiagMIB.setRevisionsDescriptions(('The changes made are as follows. 1) The MIB has been modified to add support for 802.11a and 802.11g based interfaces. 2) The definition for the object cDot11RadioDiagTempChannel has been modified to specify the possible channel values for 802.11a based interfaces. 3) Two new objects, cDot11RadioDiagTempClientTxPower and cDot11RadioDiagTempDataRateSet have been added to the MIB. ', 'Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoDot11RadioDiagMIB.setLastUpdated('200312230000Z')
if mibBuilder.loadTexts: ciscoDot11RadioDiagMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoDot11RadioDiagMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoDot11RadioDiagMIB.setDescription("This MIB is intended to be implemented on all 802.11 based Access Points and Wireless Bridges that need to participate in radio environment diagnosis. The devices mentioned above may house any one of the 802.11a/802.11b/802.11g standard- based radio interfaces in them for data communication in the form of radio waves. The administrator, through the NMS, temporarily alters the power and channel configurations of an 802.11 radio interface and the transmits power levels of the associated clients, if any, by setting appropriate values to the objects of this MIB to perform activities like discovering neighboring APs, measuring strength of the signals as received from other APs, studying RF interference levels at various APs, characterizing APs' coverage etc. These changes to the radio interface and the clients' configuration through this MIB are temporary and won't be retained across reloads. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. Wireless Bridge An 802.11 entity that provides wireless connectivity between two wired LAN segments and is used in point- to-point or point-multipoint configurations. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Repeater-AP A repeater is a 'wireless AP' that is attached to a parent AP on an 802.11 primary port. The Ethernet port is disabled in a Repeater-AP. Radio Diagnosis This process includes continuously monitoring the radio environment to discover new 802.11 stations, measure signal strengths, adapt robustly to interferers and provide a visualization of the radio topology to the administrator. Association The process by which an 802.11 client identifies and gets connected to its parent AP through which it gets the uplink to the wired network. Note that the association happens at the MAC level and the AP holds the MAC addresses of all the clients for whom the AP provides uplink to the wired network. A client, at any point of time, can remain associated only with one AP. Channel An instance of medium use for the purpose of passing protocol data units (PDUs) that may be used simultaneously, in the same volume of space, with other instances of medium use (on other channels) by other instances of the same physical layer (PHY), with an acceptably low frame error ratio due to mutual interference. Some PHYs provide only one channel, whereas others provide multiple channels. Beacons Beacons are short frames that are sent from Access Point to stations or station-to-station in order to organize and synchronize the wireless communication on the Wireless LAN. Beacons serve to achieve time synchronization among clients, exchange SSID information, exchange information about data rates supported by the 802.11 devices etc., Site Survey Site survey is done to discover the RF behavior, coverage and interference to decide the placement of WLAN infrastructure devices like Access Points and Wireless bridges to ensure that all the clients experience continually strong RF signal strength as they roam. 802.11a This is a high speed physical layer extension to the 802.11 standard on the 5 GHz band. Interfaces compliant to 802.11a support data rates upto 54Mbps and operate at 5.15-5.25, 5.25-5.35 and 5.725-5.825 GHz Unlicensed National Information Infrastructure (U-NII) bands as regulated in the United States by the code of Federal Regulations, Title 47, Section 15.407. The radio uses the Orthogonal Frequency Division Multiplexing (OFDM) as the modulation scheme that enables higher speeds at 54Mbps. 802.11b The 802.11b standard operates at 2.4GHz and is backward compatible with 802.11. An 802.11b system operates at 5.5 and 11 Mbps in addition to the 1 and 2 Mbps datarates specified by the 802.11 standard. 802.11b uses a modulation technique known as Complementary Code Keying (CCK) which allows the higher data speeds. 802.11g This is the most recently approved standard. This standard specifies an operational frequency of 2.4GHz and datarates upto 54Mbps. 802.11g systems are backward compatible with 802.11b systems because of the same operational frequencies. Like 802.11a, 802.11g uses the OFDM modulation scheme to achieve higher speeds. ")
cDot11RadioDiagMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 105, 0))
cDot11RadioDiagMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 105, 1))
cDot11RadioDiagConfigGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1))
cDot11RadioDiagTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1), )
if mibBuilder.loadTexts: cDot11RadioDiagTable.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagTable.setDescription('This table allows a network management system to control the behavior of the radio interface on an 802.11 station and the 802.11 clients associated with that station through that particular interface for the purpose of radio environment diagnosis. The administrator can modify the MIB objects in this table to temporarily alter the behavior of that particular dot11 radio interface and the respective associated clients. This table has a sparse dependent relationship with ifTable defined in IF-MIB. There exists a row in this table corresponding to the row for each dot11 interface found in ifTable. However, this table is not applicable for virtual dot11 interfaces. ')
cDot11RadioDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cDot11RadioDiagEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagEntry.setDescription('An entry holds the set of temporary values for the parameters to be applied to one particular dot11 interface and the respective clients to temporarily alter their behavior. ')
cDot11RadioDiagTempChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 14), ValueRangeConstraint(34, 34), ValueRangeConstraint(36, 36), ValueRangeConstraint(38, 38), ValueRangeConstraint(40, 40), ValueRangeConstraint(42, 42), ValueRangeConstraint(44, 44), ValueRangeConstraint(46, 46), ValueRangeConstraint(48, 48), ValueRangeConstraint(52, 52), ValueRangeConstraint(56, 56), ValueRangeConstraint(60, 60), ValueRangeConstraint(64, 64), ValueRangeConstraint(100, 100), ValueRangeConstraint(104, 104), ValueRangeConstraint(108, 108), ValueRangeConstraint(112, 112), ValueRangeConstraint(116, 116), ValueRangeConstraint(120, 120), ValueRangeConstraint(124, 124), ValueRangeConstraint(128, 128), ValueRangeConstraint(132, 132), ValueRangeConstraint(136, 136), ValueRangeConstraint(140, 140), ValueRangeConstraint(149, 149), ValueRangeConstraint(153, 153), ValueRangeConstraint(157, 157), ValueRangeConstraint(161, 161), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11RadioDiagTempChannel.setReference('IEEE Standard 802.11-1999, 15.4.6.2, IEEE Standard 802.11a-1999, 17.3.8.3.3, IEEE Standard 802.11g-2003, Annex D, ASN.1 coding of MAC and PHY MIB. ')
if mibBuilder.loadTexts: cDot11RadioDiagTempChannel.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagTempChannel.setDescription("Temporary channel number for the 802.11 interface identified by ifIndex. The value this object takes depends on the value of the object dot11PHYType defined in IEEE802dot11-MIB. The semantics are as follows. If dot11PHYType equals 'ofdm', the acceptable values for this object are 34, 36, 38, 40, 42, 44, 46, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157 and 161. If dot11PHYType equals 'dsss' or 'erp', the acceptable values for this object are from 1 to 14. The channel numbers that can be assigned to this object from the set of acceptable values mentioned above vary depending on the value of the MIB object cd11IfCurrentCarrierSet defined in CISCO-DOT11-IF MIB. The object cDot11RadioDiagSettingsEnabled must be set to 'true' to apply the temporary value specified through this object to the 802.11 interface. Setting cDot11RadioDiagSettingsEnabled to 'false' temporary value to that interface restores the channel setting of this interface to the original value that was there before applying the temporary value to that interface. A value of 0 indicates that this object hasn't been configured with a valid channel number. ")
cDot11RadioDiagTempTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11RadioDiagTempTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagTempTxPowerLevel.setDescription("Temporary transmit power level for the 802.11 interface identified by ifIndex. A value in the range of 1 to 8 refers to one of the power levels from the MIB table 'dot11PhyTxPowerTable' in IEEE802dot11-MIB. The power levels that can be assigned to this object from the set of acceptable values mentioned above vary depending on the value of the MIB object cd11IfCurrentCarrierSet defined in CISCO-DOT11-IF-MIB. The object cDot11RadioDiagSettingsEnabled must be set to 'true' to apply the temporary value specified through this object to the 802.11 interface. Setting cDot11RadioDiagSettingsEnabled to 'false' restores the power setting of this interface to the original value that was there before applying the temporary value to that interface. A value of 0 indicates that this object hasn't been configured with a valid power level. ")
cDot11RadioDiagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("apRadioDiscovery", 2), ("siteSurveyTempSettings", 3), ("siteSurveyNonTempSettings", 4))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11RadioDiagMode.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagMode.setDescription("Test mode as carried by the Cisco Radio Management Extensions in the 802.11 beacon frame. The semantics are described as follows. normal - Indicates that the station is operating in non-test mode. apRadioDiscovery - Indicates that this station is operating in AP Discovery mode. In this mode, APs transmit and measure each other's beacons. APs measure signal strength as received from other APs, levels of RF interference experienced during transmission / reception and report back the same to the NM. siteSurveyTempSettings - Indicates that the station is operating in AP assisted site survey mode with temporary channel and transmit power settings applied to the dot11 interface identified by ifIndex. siteSurveyNonTempSettings - Indicates that station is operating in AP assisted site survey mode with it's original channel and transmit power with the temporary settings not applied to the dot11 interface identified by ifIndex. ")
cDot11RadioDiagSettingsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11RadioDiagSettingsEnabled.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagSettingsEnabled.setDescription("A flag to indicate whether the station will apply the temporary channel, transmit power settings and the data rate sets configured in this entry to the particular dot11 interface and the client transmit power setting to the clients associated with this station through that dot11 interface. A value of 'true' indicates that the station will apply the temporary channel, transmit power settings and the data rate sets configured in this entry to the dot11 interface and the client transmit power to the respective associated clients. A value of 'false' indicates that station will use it's original channel, transmit power and data rate sets for data communication over the respective dot11 interface. Also, the station will revert back the transmit power of the clients associated through the particular dot11 interface to their original transmit power levels. ")
cDot11RadioDiagTempClientTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11RadioDiagTempClientTxPower.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagTempClientTxPower.setDescription("Temporary transmit power level for the 802.11 clients associated with this station through the 802.11 interface identified by ifIndex. The value configured through this object is carried by the beacon frames transmitted by this 802.11 station and picked up by the associated clients, if any, from these beacon frames to set their respective transmit power levels. A value in the range of 1 to 8 refers to one of the recommended power levels from the table cd11IfClientTxPowerTable defined in CISCO-DOT11-IF-MIB. The power levels that can be assigned to this object from the set of acceptable values mentioned above vary depending on the value of the MIB object cd11IfCurrentCarrierSet defined in CISCO-DOT11-IF-MIB. The object cDot11RadioDiagSettingsEnabled must be set to 'true' to apply the temporary value specified through this object to the respective clients. Setting cDot11RadioDiagSettingsEnabled to 'false' restores the transmit power setting of the associated clients to the original value that was there before applying this temporary value to those clients. A value of 0 indicates that this object hasn't been configured with a valid power level. ")
cDot11RadioDiagTempDataRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 105, 1, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cDot11RadioDiagTempDataRateSet.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagTempDataRateSet.setDescription("This object specifies the set of data rates at which the station may transmit data through the dot11 interface identified by ifIndex. The semantics of this object are similar to that of the object dot11OperationalRateSet of IEEE802dot11-MIB. Each octet contains a value representing a rate. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kb/s from 1 Mb/s to 63.5 Mb/s, and shall be supported as indicated in the object dot11SupportedDataRatesTxTable of IEEE802dot11-MIB for receiving data. The object cDot11RadioDiagSettingsEnabled must be set to 'true' to apply the temporary value specified through this object to the 802.11 interface. Setting cDot11RadioDiagSettingsEnabled to 'false' restores the data rate setting of this interface to the original value that was there before applying the temporary value to that interface. A query to this object returns a value of zero for each octet of the octet string representing this object, if this object hasn't been configured with a valid data rate set. ")
cDot11RadioDiagMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 105, 2))
cDot11RadioDiagMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 105, 2, 1))
cDot11RadioDiagMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 105, 2, 2))
cDot11RadioDiagMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 105, 2, 1, 1)).setObjects(("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagConfigGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11RadioDiagMIBCompliance = cDot11RadioDiagMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cDot11RadioDiagMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoDot11RadioDiagMIB module.')
cDot11RadioDiagMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 105, 2, 1, 2)).setObjects(("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagConfigGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11RadioDiagMIBComplianceRev1 = cDot11RadioDiagMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoDot11RadioDiagMIB module.')
cDot11RadioDiagConfigGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 105, 2, 2, 1)).setObjects(("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagTempChannel"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagTempTxPowerLevel"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagMode"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagSettingsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11RadioDiagConfigGlobalGroup = cDot11RadioDiagConfigGlobalGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cDot11RadioDiagConfigGlobalGroup.setDescription("This collection of objects provide information about the temporary radio configuration to be applied to the station's 802.11 interfaces. ")
cDot11RadioDiagConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 105, 2, 2, 2)).setObjects(("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagTempChannel"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagTempTxPowerLevel"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagMode"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagSettingsEnabled"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagTempClientTxPower"), ("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", "cDot11RadioDiagTempDataRateSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cDot11RadioDiagConfigGroupRev1 = cDot11RadioDiagConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cDot11RadioDiagConfigGroupRev1.setDescription("This collection of objects provide information about the temporary radio configuration to be applied to the station's 802.11 interfaces and the associated clients. ")
mibBuilder.exportSymbols("CISCO-DOT11-RADIO-DIAGNOSTIC-MIB", ciscoDot11RadioDiagMIB=ciscoDot11RadioDiagMIB, cDot11RadioDiagTempDataRateSet=cDot11RadioDiagTempDataRateSet, cDot11RadioDiagMIBConform=cDot11RadioDiagMIBConform, cDot11RadioDiagEntry=cDot11RadioDiagEntry, cDot11RadioDiagTempClientTxPower=cDot11RadioDiagTempClientTxPower, cDot11RadioDiagMIBCompliance=cDot11RadioDiagMIBCompliance, cDot11RadioDiagMIBGroups=cDot11RadioDiagMIBGroups, cDot11RadioDiagSettingsEnabled=cDot11RadioDiagSettingsEnabled, cDot11RadioDiagTempTxPowerLevel=cDot11RadioDiagTempTxPowerLevel, cDot11RadioDiagConfigGroupRev1=cDot11RadioDiagConfigGroupRev1, PYSNMP_MODULE_ID=ciscoDot11RadioDiagMIB, cDot11RadioDiagConfigGlobal=cDot11RadioDiagConfigGlobal, cDot11RadioDiagMIBObjects=cDot11RadioDiagMIBObjects, cDot11RadioDiagTempChannel=cDot11RadioDiagTempChannel, cDot11RadioDiagMode=cDot11RadioDiagMode, cDot11RadioDiagMIBCompliances=cDot11RadioDiagMIBCompliances, cDot11RadioDiagConfigGlobalGroup=cDot11RadioDiagConfigGlobalGroup, cDot11RadioDiagTable=cDot11RadioDiagTable, cDot11RadioDiagMIBNotifs=cDot11RadioDiagMIBNotifs, cDot11RadioDiagMIBComplianceRev1=cDot11RadioDiagMIBComplianceRev1)
