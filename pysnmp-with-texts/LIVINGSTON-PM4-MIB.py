#
# PySNMP MIB module LIVINGSTON-PM4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIVINGSTON-PM4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:07:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
lucentPM4, = mibBuilder.importSymbols("LIVINGSTON-ROOT-MIB", "lucentPM4")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Counter32, Gauge32, Counter64, IpAddress, ModuleIdentity, Unsigned32, Integer32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, NotificationType, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "Counter64", "IpAddress", "ModuleIdentity", "Unsigned32", "Integer32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "NotificationType", "MibIdentifier", "iso")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
class PMUnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))
    namedValues = NamedValues(("mrgmodule", 1), ("quadt1", 2), ("trie1", 3), ("modem", 4), ("serialport", 5), ("ether0", 6), ("ether1", 7), ("console", 8), ("acpwrsup", 9), ("fan", 10), ("dcpwrsup", 11), ("allunits", 255))

class PMEquipPRIStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("up", 1), ("down", 2), ("loopback", 3), ("fault", 4))

class PMEquipStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("up", 1), ("down", 2), ("maintenance", 3), ("fault", 4), ("other", 5))

class PMDiagCmdStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("success", 1), ("fail", 2), ("inprogress", 3), ("notsupported", 4), ("aborted", 5), ("other", 6))

class PMDiagTestCntrl(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("normal", 1), ("start", 2), ("stop", 3), ("abort", 4))

class PMAlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("informational", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5))

lucentPM4Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1))
lucentPM4Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2))
lucentPM4MibRev = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4MibRev.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4MibRev.setDescription('This object specifies the current MIB revision number. Example of the MIB revision can be PM4xxx for PM4 product and PM3xxx for PM3 products etc. Where xxx can be any combination of alpha-numeric characters.')
lucentPM4SWRev = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SWRev.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SWRev.setDescription('This object specifies the ComOS revision number. Example of the ComOS revision can be ComOS4.xx. Where xxx can be any combination of alpha-numeric characters.')
lucentPM4Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3))
lucentPM4ChasSummary = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(55, 55)).setFixedLength(55)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ChasSummary.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasSummary.setDescription("This object provides general information about the PortMaster 4 chassis operational status. This object is read-only. The DisplayString represents a summary of all the devices in the chassis as follows: Bytes 1 - 2 '0''0' Byte 3 'U', 'D', 'M', 'F', 'O' Byte 4 space Bytes 5 - 6 '0''1' Byte 7 'U', 'D', 'M', 'F', 'O' Byte 8 space Bytes 9 - 10 '0''2' Byte 11 'U', 'D', 'M', 'F', 'O' Byte 12 space Bytes 13 - 14 '0''3' Byte 15 'U', 'D', 'M', 'F', 'O' Byte 16 space Bytes 17 - 18 '0''4' Byte 19 'U', 'D', 'M', 'F', 'O' Byte 20 space Bytes 21 - 22 '0''5' Byte 23 'U', 'D', 'M', 'F', 'O' Byte 24 space Bytes 25 - 26 '0''6' Byte 27 'U', 'D', 'M', 'F', 'O' Byte 28 space Bytes 29 - 30 '0''7' Byte 31 'U', 'D', 'M', 'F', 'O' Byte 32 space Bytes 33 - 34 '0''8' Byte 35 'U', 'D', 'M', 'F', 'O' Byte 36 space Bytes 37 - 38 '0''9' Byte 39 'U', 'D', 'M', 'F', 'O' Byte 40 space Bytes 41 - 42 '1''0' Byte 43 'U', 'D', 'M', 'F', 'O' Byte 44 space Bytes 45 - 46 '1''1' Byte 47 'U', 'D', 'M', 'F', 'O' Byte 48 space Bytes 49 - 50 '1''2' Byte 51 'U', 'D', 'M', 'F', 'O' Byte 52 space Bytes 53 - 54 '1''3' Byte 55 'U', 'D', 'M', 'F', 'O' Byte 56 space Bytes 57 - 58 '1''4' Byte 59 'U', 'D', 'M', 'F', 'O' Byte 60 space Bytes 61 - 62 '1''5' Byte 63 'U', 'D', 'M', 'F', 'O' Byte 64 space Bytes 65 - 66 'P''1' Byte 67 'U', 'D', 'M', 'F', 'O' Byte 68 space Bytes 69 - 70 'P''2' Byte 71 'U', 'D', 'M', 'F', 'O' Byte 72 space Bytes 73 - 74 'P''3' Byte 75 'U', 'D', 'M', 'F', 'O' Byte 76 space Bytes 77 - 78 'D''1' Byte 79 'U', 'D', 'M', 'F', 'O' Byte 80 space Bytes 81 - 82 'D''2' Byte 83 'U', 'D', 'M', 'F', 'O' Byte 84 space Bytes 85 - 86 'F''1' Byte 87 'U', 'D', 'M', 'F', 'O' Byte 88 space Bytes 89 - 90 'F''2' Byte 91 'U', 'D', 'M', 'F', 'O' Byte 92 space Bytes 93 - 94 'F''3' Byte 95 'U', 'D', 'M', 'F', 'O' Byte 96 space Bytes 97 - 98 'F''4' Byte 99 'U', 'D', 'M', 'F', 'O' Legend '#''#' Represents the board number 'F''#' Represents the Fan # 'P''#' Represents the Power Supply # 'D''#' Represents the DC Power Supply # 'U' Up 'D' Down 'M' Maintenance 'F' Failed 'O' Other unknown state.")
lucentPM4ChasCmdTable = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: lucentPM4ChasCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdTable.setDescription('Table describing the commands that can be issued to the agent to perform specific actions to any card, port or device in the system. For example to erase the flash or a particular file from the flash. Note that only a station configured with the appropriate authentication string can issue commands to the agent.')
lucentPM4ChasCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4ChasCmdIndex"))
if mibBuilder.loadTexts: lucentPM4ChasCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdEntry.setDescription('Entries in the command table for the chassis commands. This describes one entry or row in the command table.')
lucentPM4ChasCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdIndex.setDescription('This object specifies the index in the command table. The values for this object is limited to the size of the command table on the network element. The size of the command table is set to 10 which can be changed if and when users need to schedule more than 10 commands at a given time.')
lucentPM4ChasCmdBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdBoardId.setDescription('This object specifies the board for which the command is to be applied. The values for this object is limited to the Max number of boards.')
lucentPM4ChasCmdUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 3), PMUnitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdUnitType.setDescription('This object specifies the type of the device to which this command must apply.')
lucentPM4ChasCmdUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdUnitIndex.setDescription('This object specifies the interface index.')
lucentPM4ChasCmdDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdDevId.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdDevId.setDescription('This object specifies the sub-unit id for which the command must be applied to. This value will be used by the agent to index to the correct sub-device on a board. For example, this object can have values from 1 - 96 for the modems or 1 - 4 for T1 or 1 - 3 for the E1.')
lucentPM4ChasCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("eraseflashfile", 1), ("eraseallflash", 2), ("saveall", 3), ("resetport", 4), ("resetfilter", 5), ("adduser", 6), ("deleteuser", 7), ("addlocation", 8), ("diallocation", 9), ("addfilter", 10), ("deletefilter", 11), ("addmodem", 12), ("resetvirtport", 13), ("addospfarea", 14), ("resetospf", 15), ("addprop", 16), ("deleteprop", 17), ("resetprop", 18), ("resetether0", 19), ("resetether1", 20), ("resetall", 21), ("resetconsole", 22), ("version", 23), ("traceroutes", 24), ("ptrace", 25), ("ifconfig", 26), ("eraseconfig", 27), ("erasecomos", 28), ("reboot", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdId.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdId.setDescription('This object specifies the command. Each command takes a unique value. The completion status of this command is set in the result object of the table.')
lucentPM4ChasCmdParams = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4ChasCmdParams.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdParams.setDescription("This object specifies the command parameters. Each parameter must be seperated by a blank space. The last parameter is terminated with a ';'.")
lucentPM4ChasCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 3, 2, 1, 8), PMDiagCmdStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ChasCmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ChasCmdResult.setDescription('This object specifies the command result. The result for each of the previous 10 commands will be stored in a table, which can be retrieved by the client when needed.')
lucentPM4ConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4))
lucentPM4CmInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1))
lucentPM4CmSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1))
lucentPM4SerialTable = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: lucentPM4SerialTable.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTable.setDescription('A list of serial interface entries.')
lucentPM4SerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4SerialBoardIndex"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4SerialIndex"))
if mibBuilder.loadTexts: lucentPM4SerialEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialEntry.setDescription('A serial interface entry containing objects at the physical and session layer.')
lucentPM4SerialBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialBoardIndex.setDescription('A unique value for each board in the PortMaster chassis. The Max value of this variable is limited by the number of boards in the chassis. This value is limited to 255.')
lucentPM4SerialUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialUnitType.setDescription('Unit type indicates the serial port. The interface table ifIndex is a combination of board index, unit type and unit index.')
lucentPM4SerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialIndex.setDescription('A unique value for each serial interface on a given board.')
lucentPM4ModemId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemId.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemId.setDescription('This object is the cross reference to the modem interface table index. The value is dynamically assigned when the call is established.')
lucentPM4SerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialPortNumber.setDescription('A serial port to which this modem is assigned for this call.')
lucentPM4SerialPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("async", 2), ("sync", 3), ("isdn", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialPhysType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialPhysType.setDescription('The type of physical serial interface, distinguished according to the physical/link protocol(s) being currently used on the interface. When this object is set to asyn(2), then the service types dial-in, dial- out, login, and device are valid. When this object is set to sync(3), the serial service types dial-in, dial- out and hardwired are valid.')
lucentPM4SerialPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("established", 3), ("disconnecting", 4), ("command", 5), ("noservice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialPortStatus.setDescription('The status of the serial interface.')
lucentPM4SerialDS0State = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notavailable", 1), ("busyout", 2), ("havecomport", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialDS0State.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialDS0State.setDescription('Cross reference value for each DS0 for a given T1/E1 line and a given board in the PM4 chassis.')
lucentPM4SerialUser = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialUser.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialUser.setDescription('Name of the active user. Blank if not active.')
lucentPM4SerialSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialSessionId.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialSessionId.setDescription('A unique Session Identifier which matches the RADIUS session ID. Blank when not using RADIUS.')
lucentPM4SerialTypeHardwired = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialTypeHardwired.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTypeHardwired.setDescription('The active type of service being provided by the serial interface.')
lucentPM4SerialTypeNwDialIn = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialTypeNwDialIn.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTypeNwDialIn.setDescription('The active type of service being provided by the serial interface.')
lucentPM4SerialTypeNwDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialTypeNwDialout.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTypeNwDialout.setDescription('The active type of service being provided by the serial interface.')
lucentPM4SerialTypeLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialTypeLogin.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTypeLogin.setDescription('The active type of service being provided by the serial interface.')
lucentPM4SerialTypeDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialTypeDevice.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTypeDevice.setDescription('The active type of service being provided by the serial interface.')
lucentPM4SerialTypeDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SerialTypeDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialTypeDeviceName.setDescription('Device name if the lucentPM4SerialTypeDevice is enabled. This is a string of characters (e.g. /dev/tty1) indicating the device name.')
lucentPM4SerialDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("inout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialDirection.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialDirection.setDescription('The direction the active session was initiated.')
lucentPM4SerialStarted = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialStarted.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialStarted.setDescription('The amount of time this session has been active.')
lucentPM4SerialIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialIdle.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialIdle.setDescription('The amount of time this session has been idle.')
lucentPM4SerialInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialInSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialInSpeed.setDescription("An estimate of the serial interface's current inbound bandwidth in bits per second.")
lucentPM4SerialOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialOutSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialOutSpeed.setDescription("An estimate of the serial interface's current outbound bandwidth in bits per second.")
lucentPM4SerialIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialIpAddress.setDescription("The IP address associated with the serial interface. If being used as a network type port, this is the remote user's IP address. If being used as a device or login, this is the IP address of the host the user is connected to.")
lucentPM4SerialifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialifDescr.setDescription('A textual string containing information about the network interface bound to the serial interface.')
lucentPM4SerialInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialInOctets.setDescription('The total number of octets received on the serial interface.')
lucentPM4SerialOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialOutOctets.setDescription('The total number of octets transmitted on the serial interface.')
lucentPM4SerialQOctets = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SerialQOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SerialQOctets.setDescription('The total number of octets queued on the serial interface.')
lucentPM4CmT1E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2))
lucentPM4T1E1Table = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1), )
if mibBuilder.loadTexts: lucentPM4T1E1Table.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Table.setDescription('A list of T1/E1 interface entries.')
lucentPM4T1E1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1BoardIndex"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1Index"))
if mibBuilder.loadTexts: lucentPM4T1E1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Entry.setDescription('A T1/E1 entry containing objects at the physical layer.')
lucentPM4T1E1BoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1BoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1BoardIndex.setDescription('A unique value for each board in the PM4 chassis.')
lucentPM4T1E1UnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1UnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1UnitType.setDescription('This object specifies the type of the unit as the T1/E1 line. This value is a part of the interface table ifIndex.')
lucentPM4T1E1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1Index.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Index.setDescription('A unique value for each T1/E1 interface.')
lucentPM4T1E1SerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1SerialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1SerialIndex.setDescription('The value of the instance for the serial port. This object provides a cross reference from the T1/E1 interface to the serial port to which it is mapped.')
lucentPM4T1E1SerialCount = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1SerialCount.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1SerialCount.setDescription('The number of serial ports assigned to this interface. If this is a Channelized T1/E1, then the count is 24/32. If this is a fractional T1/E1, then the count can be any number between 1 and a number less than 24/32.')
lucentPM4T1E1PhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PhysType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PhysType.setDescription('The type of interface (T1 or E1).')
lucentPM4T1E1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 7), PMEquipPRIStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1Status.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Status.setDescription('The current operational status of the interface.')
lucentPM4T1E1Function = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("isdn", 1), ("channelized", 2), ("clear", 3), ("fractional", 4), ("isdnfrac", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1Function.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Function.setDescription('The configured function of the interface.')
lucentPM4T1E1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("crc4", 3), ("fas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1Framing.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Framing.setDescription('The configured line framing.')
lucentPM4T1E1Encoding = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1Encoding.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1Encoding.setDescription('The configured line signal encoding.')
lucentPM4T1E1PCM = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ulaw", 1), ("alaw", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PCM.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PCM.setDescription('The configured voice modulation.')
lucentPM4T1E1SuperSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("em", 1), ("groundstart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4T1E1SuperSignal.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1SuperSignal.setDescription('The configured supervisory signalling mode for this interface.')
lucentPM4T1E1StartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wink", 1), ("immediate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4T1E1StartMode.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1StartMode.setDescription('The configured start mode for this interface.')
lucentPM4T1E1ChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1ChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1ChangeTime.setDescription('The amount of time since the last status change.')
lucentPM4T1E1RecvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1RecvLevel.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1RecvLevel.setDescription("An estimate of the serial interface's current recieve signal level in DB.")
lucentPM4T1E1BlueAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1BlueAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1BlueAlarms.setDescription('The total number of Blue Alarms on the interface.')
lucentPM4T1E1YellowAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1YellowAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1YellowAlarms.setDescription('The total number of Yellow Alarms on the interface.')
lucentPM4T1E1CarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1CarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1CarrierLoss.setDescription('The total number of times the interface has lost carrier.')
lucentPM4T1E1SyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1SyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1SyncLoss.setDescription('The total number of times the interface has lost frame synchronization.')
lucentPM4T1E1BipolarErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1BipolarErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1BipolarErrors.setDescription('The total number of bipolar violations detected on the interface.')
lucentPM4T1E1CRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1CRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1CRCErrors.setDescription('The total number of frame level CRC errors detected on the interface.')
lucentPM4T1E1SyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1SyncErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1SyncErrors.setDescription('The total number of frame synchronization errors detected on the interface.')
lucentPM4CmModem = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3))
lucentPM4ModemTable = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: lucentPM4ModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemTable.setDescription('A list of modem entries.')
lucentPM4ModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4ModemBoardIndex"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4ModemUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4ModemIndex"))
if mibBuilder.loadTexts: lucentPM4ModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemEntry.setDescription('A modem entry containing objects at the session layer.')
lucentPM4ModemBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemBoardIndex.setDescription('A unique value for each modem interface.')
lucentPM4ModemUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemUnitType.setDescription('Unit type specifies the type of device or interface.')
lucentPM4ModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemIndex.setDescription('A unique value for each modem interface. The value of this object can be 1 - 96 for a Quad T1, 1 - 94 for a Tri E1 card.')
lucentPM4ModemPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemPortName.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemPortName.setDescription('A textual string containing the name of the serial interface (ie. S0, S1, etc).')
lucentPM4ModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("bound", 2), ("connecting", 3), ("active", 4), ("test", 5), ("down", 6), ("ready", 7), ("halt", 8), ("admin", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemStatus.setDescription('A current state of the modem.')
lucentPM4ModemProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lapm", 2), ("mnp", 3), ("bufferd", 4), ("direct", 5), ("cellular", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemProtocol.setDescription('The error correcting protocol being used in the modem.')
lucentPM4ModemCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("v42bis", 2), ("mnp5", 3), ("stac", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemCompression.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemCompression.setDescription('The compression being used in the modem interface.')
lucentPM4ModemInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemInSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemInSpeed.setDescription("An estimate of the modem interface's current inbound bandwidth in bits per second.")
lucentPM4ModemOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemOutSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemOutSpeed.setDescription("An estimate of the modem interface's current outbound bandwidth in bits per second.")
lucentPM4ModemInByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemInByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemInByteCount.setDescription('The total number of bytes received on the serial interface.')
lucentPM4ModemOutByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemOutByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemOutByteCount.setDescription('The total number of bytes transmitted on the serial interface.')
lucentPM4ModemRetrains = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemRetrains.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemRetrains.setDescription('The number of retrains attempted by the modem.')
lucentPM4ModemRenegotiates = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemRenegotiates.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemRenegotiates.setDescription('The number of renegotiates attempted by the modem.')
lucentPM4ModemCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemCalls.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemCalls.setDescription('The number of times a call received by the modem.')
lucentPM4ModemDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemDetects.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemDetects.setDescription('The number of analog calls received by the modem.')
lucentPM4ModemConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4ModemConnects.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4ModemConnects.setDescription('The number of successful calls received by the modem.')
lucentPM4CmEther = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4))
lucentPM4EtherTable = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1), )
if mibBuilder.loadTexts: lucentPM4EtherTable.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherTable.setDescription('A list of ethernet interface entries. This object is not accessible')
lucentPM4EtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4EtherBoardIndex"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4EtherIfType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4EtherIndex"))
if mibBuilder.loadTexts: lucentPM4EtherEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherEntry.setDescription('Ethernet interface entry containing objects at the Session/Physical layers.')
lucentPM4EtherBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4EtherBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherBoardIndex.setDescription('A unique value for each ethernet board. The manager card has two ethernet interfaces at present. The ethernet interface in slot 4 has a board ID 10 and if there is a manager card in slot 5, the board ID for the interface would be 11.')
lucentPM4EtherIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4EtherIfType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherIfType.setDescription('The interface type which together with the board ID and the interface number will uniquely identify the interface.')
lucentPM4EtherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ether0", 1), ("ether1", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4EtherIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherIndex.setDescription('A unique value for each ethernet interface. The manager card has two ethernet interfaces at present. ether0(1) represents 10 Base-T interface and ether1(2) specifies the 10/100 Base-T auto-sensing ethernet interface.')
lucentPM4EtherIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(67436545, 168099841))).clone(namedValues=NamedValues(("ether0", 67436545), ("ether1", 168099841)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4EtherIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherIfIndex.setDescription('IfIndex cross reference value for the ethernet interfaces. The manager card has two ethernet interfaces at present. ether0(67436545) represents 10 Base-T interface which corresponds to board 4 and interface 1. The enumerated value ether1(168099841) specifies the 10/100 Base-T auto-sensing ethernet interface which corresponds to board 4 and interface 2. We can add the standby manager card ethernet interfaces when they are available.')
lucentPM4EtherPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherPortName.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherPortName.setDescription('A printable ASCII string specifying the name of the ethernet port.')
lucentPM4EtherMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4EtherMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherMacAddress.setDescription('Physical address of the interface.')
lucentPM4EtherIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherIpAddress.setDescription('IP address of the interface.')
lucentPM4EtherIpGateway = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherIpGateway.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherIpGateway.setDescription('IP address of the gateway machine.')
lucentPM4EtherPriNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherPriNameServer.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherPriNameServer.setDescription('IP address of the primary name server.')
lucentPM4EtherAltNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherAltNameServer.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherAltNameServer.setDescription('IP address of the alternate name server.')
lucentPM4EtherSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherSubnetMask.setDescription('Subnet mask of the interface. Used to partition the network into different branches.')
lucentPM4EtherInFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherInFilter.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherInFilter.setDescription('IP Input packet filter. Used to control the type of IP packets reaching the interface.')
lucentPM4EtherOutFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOutFilter.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOutFilter.setDescription('IP output packet filter. Used to control the type of packets sent out of the interface.')
lucentPM4EtherOptRip = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptRip.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptRip.setDescription('The RIP protocol enable/disable option.')
lucentPM4EtherOptSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptSlip.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptSlip.setDescription('The SLIP protocol enable/disable option.')
lucentPM4EtherOptEtherDown = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptEtherDown.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptEtherDown.setDescription('Ethernet interface down enable/disable option.')
lucentPM4EtherOptBcastHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptBcastHigh.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptBcastHigh.setDescription('Use high one(s) broadcast address enable/disable option.')
lucentPM4EtherOptSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptSnmp.setDescription('Default SNMP protocol enable/disable option.')
lucentPM4EtherOptNoListen = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptNoListen.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptNoListen.setDescription('Do not listen to RIP on the ether interface.')
lucentPM4EtherOptDefaultRip = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptDefaultRip.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptDefaultRip.setDescription('Default RIP protocol enable/disable option.')
lucentPM4EtherOptDefaultListen = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptDefaultListen.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptDefaultListen.setDescription('Default listen enable/disable option.')
lucentPM4EtherOptIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptIPFilter.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptIPFilter.setDescription('IP filter enable/disable option.')
lucentPM4EtherOptDns = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptDns.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptDns.setDescription('DNS enable/disable option.')
lucentPM4EtherOptPmeMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptPmeMsg.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptPmeMsg.setDescription('PME Msg. enable/disable option. Whatever that means.')
lucentPM4EtherOptNoClip = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptNoClip.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptNoClip.setDescription('No Clip enable/disable option. Whatever that means.')
lucentPM4EtherOptEtherIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptEtherIpx.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptEtherIpx.setDescription('Ether IPX enable/disable option.')
lucentPM4EtherOptNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptNetBIOS.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptNetBIOS.setDescription('Net BIOS enable/disable option.')
lucentPM4EtherOptAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptAccounting.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptAccounting.setDescription('Accounting enable/disable option.')
lucentPM4EtherOptNoPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 4, 1, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4EtherOptNoPAP.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4EtherOptNoPAP.setDescription('PAP enable/disable option.')
lucentPM4FaultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5))
lucentPM4FaultMgmtIsolation = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1))
lucentPM4FaultMgmtChasTrap = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: lucentPM4FaultMgmtChasTrap.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FaultMgmtChasTrap.setDescription('Chassis Trap table which indicates one of several Traps. The chassis trap table stores the previous history of the traps which can be retrieved by the management stations at a later time. This object is not-accessible and present for MIB clarity.')
lucentPM4FMChasTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4FMChasTrapIndex"))
if mibBuilder.loadTexts: lucentPM4FMChasTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapEntry.setDescription('Entry in the chassis Trap table. Each trap is uniquely identified by an index. This object is not accessible and present for MIB clarity.')
lucentPM4FMChasTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapIndex.setDescription('Index into the Trap table on the agent. This table stores the previous 500 traps which can be retrieved at any given time.')
lucentPM4FMChasTrapBoardID = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapBoardID.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapBoardID.setDescription('Board ID is the board number for which this trap is stored. If the trap is for an auxillary device such as a power supply or fan, this value is set to zero.')
lucentPM4FMChasTrapUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 3), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapUnitType.setDescription('Uniquely specifies the unit type for this trap. The unit can be a board or any other device in the chassis such as a fan or a power supply.')
lucentPM4FMChasTrapUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapUnitIndex.setDescription('Uniquely specifies the unit index. The unit index is same as the ifIndex for T1/E1 interfaces, or the modemIndex for the modems or fan or power supply index for fan or power supplies.')
lucentPM4FMChasTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("online", 2), ("offline", 3), ("maintenance", 4), ("fault", 5), ("notinstalled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapStatus.setDescription('Trap status specifies the associated object in the Trap is online(2), offline(3), maintenance(4) or fault(5).')
lucentPM4FMChasTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 6), PMAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapSeverity.setDescription('Trap severity specifies the severity of the Trap for the associated object.')
lucentPM4FMChasTrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMChasTrapTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapTimeStamp.setDescription('This object stores the timestamp of this trap.')
lucentPM4FMChasTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trapsent", 1), ("ackdue", 2), ("acked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMChasTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMChasTrapState.setDescription('This object stores the Trap state of this trap.')
lucentPM4FMBoardIndex = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: lucentPM4FMBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMBoardIndex.setDescription('Board index uniquely specifies the board in the chassis. This object is set to zero for power supplies, fans and other auxillary devices. This object is not accessible through Get, Get-Next or Set PDUs. It is sent out as part of the Trap.')
lucentPM4FMUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 3), Integer32())
if mibBuilder.loadTexts: lucentPM4FMUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMUnitIndex.setDescription('Unit index uniquely specifies the T1/E1 line, or modem or any device (logical/physical) in the chassis. This object is not accessible through Get, Get-Next or Set PDUs. It is sent out as part of the Trap.')
lucentPM4FMUnitType = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 4), PMUnitType())
if mibBuilder.loadTexts: lucentPM4FMUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMUnitType.setDescription('Unit type specifies the T1/E1 line, or modem or any device in the chassis. This object is not accessible through Get, Get-Next or Set PDUs. It is sent out as part of the Trap.')
lucentPM4FMUnitTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("other", 1), ("offline", 2), ("online", 3), ("failed", 4), ("restored", 5), ("pwrwarn", 6), ("tempwarn", 7), ("temphot", 8), ("dtrloss", 9), ("carrierloss", 10), ("renegotiation", 11), ("los", 12), ("ais", 13), ("redalarm", 14), ("yellowalarm", 15), ("cv", 16), ("crc", 17), ("bpv", 18), ("fer", 19), ("pll", 20), ("es", 21), ("ses", 22), ("sefs", 23), ("uas", 24), ("dm", 25), ("les", 26), ("css", 27), ("bes", 28))))
if mibBuilder.loadTexts: lucentPM4FMUnitTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMUnitTrapStatus.setDescription('Trap status specifies the associated object in the Trap. This object is not accessible other than when produced as the result of a trap.')
lucentPM4FMUnitTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 1, 6), PMAlarmType())
if mibBuilder.loadTexts: lucentPM4FMUnitTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMUnitTrapSeverity.setDescription('Trap severity specifies the severity of the Trap for the associated object. This object is not accessible except when produced as the result of a trap.')
lucentPM4FMTrapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2))
lucentPM4FMEqpTrapCfg = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: lucentPM4FMEqpTrapCfg.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpTrapCfg.setDescription('Equipment Trap configuration table configure Traps. The objects in this table are used to enable or disable traps on a per board/interface/device basis. This object is not-accessible and present for MIB clarity.')
lucentPM4FMEqpTrapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4FMEqpBoardIndex"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4FMEqpUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4FMEqpUnitIndex"))
if mibBuilder.loadTexts: lucentPM4FMEqpTrapCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpTrapCfgEntry.setDescription('Entry in the equipment Trap config table. Each trap is uniquely identified by the board ID, Unit type and unit index. For auxillary devices such as power supplies and fans, the board index will be zero, the unit index identifies the units and the unit type specifies if the unit is a fan, power supplies etc. This object is not accessible and present for MIB clarity.')
lucentPM4FMEqpBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMEqpBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpBoardIndex.setDescription('Board ID for which the Trap configuration need to apply. The board ID is zero if this trap configuration is for an auxillary device such as fans or power supplies.')
lucentPM4FMEqpUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMEqpUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpUnitType.setDescription('Unit type alongwith the board index and unit index specifies uniquely the device/interface which is being configured.')
lucentPM4FMEqpUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMEqpUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpUnitIndex.setDescription('Unit index refers to the interface or sub-device such as a modem, serial port etc. For devices such as power supplies and fans this object is zero.')
lucentPM4FMEqpTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("boardoffline", 1), ("boardonline", 2), ("pwrsupfail", 3), ("pwrsuprestored", 4), ("fanfail", 5), ("fanrestored", 6), ("boardtempwarn", 7), ("boardtempnormal", 8), ("boardtoohot", 9), ("modemfail", 10), ("linedown", 11), ("lineup", 12), ("linethresh", 13), ("boardpwrshutdown", 14), ("radiusauthfail", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEqpTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpTrapId.setDescription('Trap ID indicating the trap for which the configuration must apply.')
lucentPM4FMEqpTrapCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEqpTrapCtl.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpTrapCtl.setDescription('Trap control which configures the trap off(1) or on(2). When the trap is configured as off(1), the trap is not sent out to the management station. When configures as on(2), the trap is sent to all the management stations configured to receive the trap.')
lucentPM4FMEqpRepTimer = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEqpRepTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEqpRepTimer.setDescription('If the trap is to be repeated, this object specifies the time in seconds. When this object value is set to 0, it indicates the trap is non-repeat trap.')
lucentPM4FMT1E1ThreshTrapCfg = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshTrapCfg.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshTrapCfg.setDescription('T1/E1 Threshold Trap configuration table to configure the thresholds for various T1/E1 traps. This object is not-accessible and present for MIB clarity.')
lucentPM4FMT1E1ThreshTrapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4FMThreshBoardIndex"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4FMThreshUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4FMThreshUnitIndex"))
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshTrapCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshTrapCfgEntry.setDescription('Entry in the T1/E1 threshold trap config table. Each trap is uniquely identified by the board index, unit type and unit index which is the T1/E1 interface number. This object is not accessible and present for MIB clarity.')
lucentPM4FMT1E1ThreshBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshBoardIndex.setDescription('Board ID for which the Trap threshold configuration must apply. It includes boards 1 - 10 and other devices such as power supplies and fans etc.')
lucentPM4FMT1E1ThreshUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshUnitType.setDescription('Unit type for which the Trap threshold configuration must be applied.')
lucentPM4FMT1E1ThreshESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshESs.setDescription('The threshold for errored seconds on the interface. A trap is issued when this set limit is exceeded. When this threshold exceeds, the performance of the interface will degrade. A trap is generated to notify the adminstrator to take appropriate action.')
lucentPM4FMT1E1ThreshSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshSESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshSESs.setDescription('The threshold for severely errored seconds on the interface. A trap is issued when this limit is exceeded. A severely errored seconds is a second with 320 or more path code violation error events or one or more out of frame defects or detected AIS defect.')
lucentPM4FMT1E1ThreshSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshSEFSs.setDescription('The threshold for severely errored framing seconds. A trap is issued when this threshold is exceeded. A severely errored framing second is a second with one or more frame defects or detected AIS defect.')
lucentPM4FMT1E1ThreshUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshUASs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshUASs.setDescription('The threshold for unavailable seconds. A trap is issued when this set threshold is exceeded. Unavailable seconds are calculated by counting the number of seconds that the interface is unavailable from the onset of 10 SESs. Once unavailable, the interface becomes available at the onset of 10 contiguous no SESs.')
lucentPM4FMT1E1ThreshCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshCSSs.setDescription('The threshold for controlled slip seconds on the interface. A trap is issued when this set threshold is exceeded. A controlled slip second is a one-second interval containing one or more controlled slips.')
lucentPM4FMT1E1ThreshPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshPCVs.setDescription('The threshold for path code violations on the interface. A trap is issued when this set threshold is exceeded. PCV is a frame syncronization bit error in the D4 and E1-noCRC format interfaces or a CRC error in the ESF (extended super frame) and E1-CRC interface formats.')
lucentPM4FMT1E1ThreshLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 9), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshLESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshLESs.setDescription('The threshold for line errored seconds on the interface. A trap is sent to the manager when this set threshold is exceeded. A line errored second, according to T1M1.3 is a second in which one or more line code violations were detected.')
lucentPM4FMT1E1ThreshBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 10), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshBESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshBESs.setDescription('The threshold for bursty errored seconds on the interface. A trap is sent to the manager when this set threshold is exceeded. A bursty errored second is a second with fewer than 320 and more than 1 path code violations.')
lucentPM4FMT1E1ThreshDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshDMs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshDMs.setDescription('The threshold for degraded minutes on the interface. A trap is sent to the manager when this set threshold is exceeded. Degraded minutes are determined by collecting all of the available seconds, after removing any severely errored seconds. The resulting seconds is grouped into 60 second intervals and if the cumulative errors during the seconds present in the group exceeds 1E-6.')
lucentPM4FMT1E1ThreshRepTimer = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshRepTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshRepTimer.setDescription('If the trap is to be repeated, this object specifies the time in seconds. When this object value is set to 0, it indicates the trap is non-repeat trap.')
lucentPM4FMT1E1ThreshTrapAck = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noack", 2), ("ack", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshTrapAck.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMT1E1ThreshTrapAck.setDescription('If set to ack(3), clears the trap condition. If the value is set to noack(2), leaves the trap condition unchanged.')
lucentPM4FMEnvTrapCfg = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: lucentPM4FMEnvTrapCfg.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvTrapCfg.setDescription('Environment Trap configuration table. This table enables configuration of voltage, power levels and temperature ranges for different units in the chassis. This object is not-accessible and present for MIB clarity.')
lucentPM4FMEnvTrapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4FMEnvBoardID"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4FMEnvUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4FMEnvUnitIndex"))
if mibBuilder.loadTexts: lucentPM4FMEnvTrapCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvTrapCfgEntry.setDescription('Entry in the environment trap config table. Each trap is uniquely identified by the board index, unit type and unit index. This object is not accessible and present for MIB clarity.')
lucentPM4FMEnvBoardID = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMEnvBoardID.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvBoardID.setDescription('Board ID specifies the board identifier for this trap. If the trap configuration is for an auxillary device such as a power supply or fan, this object will be set to zero. The unit type and the unit index will uniquely identify the auxillary devices.')
lucentPM4FMEnvUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMEnvUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvUnitType.setDescription('Unit for which the Trap configuration must to apply.')
lucentPM4FMEnvUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4FMEnvUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvUnitIndex.setDescription('Unit index specifies the interface or sub-unit for this trap (modem or T1/E1 interface etc.). The unit type and the unit index will uniquely identify the auxillary devices.')
lucentPM4FMEnvOptUnitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEnvOptUnitTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvOptUnitTemp.setDescription('The optimum temperature for this unit. A trap is generated when the temperature deviates from the specified range. The temperature is specified as an integer in degrees farenheit.')
lucentPM4FMEnvUnitTempRange = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEnvUnitTempRange.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvUnitTempRange.setDescription('The temperature range above which a trap is generated. The temperature must be specified as an integer in degree Farenhiet (for example +/- 5 degree Far.).')
lucentPM4FMEnvOptUnitPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEnvOptUnitPwrLvl.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvOptUnitPwrLvl.setDescription('The optimal power level that is appropriate for this unit. A trap is generated when the power level fluctuates outside the limits set.')
lucentPM4FMEnvUnitPwrRange = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEnvUnitPwrRange.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvUnitPwrRange.setDescription('The power range specified in volts. A trap is generated when the power level fluctuates outside the Opt Pwr +/- Range set.')
lucentPM4FMEnvTrapCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 5, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4FMEnvTrapCtl.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4FMEnvTrapCtl.setDescription('The trap control used to turn the environment traps on or off for the specified unit(s).')
lucentPM4PerfMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6))
lucentPM4T1E1PerfMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1))
lucentPM4T1E1PMCur = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1), )
if mibBuilder.loadTexts: lucentPM4T1E1PMCur.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCur.setDescription('Performance management table representing the performance statistics of T1/E1 interfaces in the box. This table represents the current 15 mins statistics. This object is not accessible and present for clarity purpose. This table is part of RFC 1406.')
lucentPM4T1E1PMCurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMBoardID"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMLineNum"))
if mibBuilder.loadTexts: lucentPM4T1E1PMCurEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurEntry.setDescription('Performance management table entries for all the T1/E1 interfaces in the box. This table represents the current 15 mins statistics. This object is not accessible and present for clarity purpose.')
lucentPM4T1E1PMCurBoard = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurBoard.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurBoard.setDescription('Board number of the interface. The global interface number is computed by using the Most Significant byte of the ifIndex and the Least Significant 2 bytes represents the interface index. Byte 3 will represent the unit type which would be a T1 or E1.')
lucentPM4T1E1PMCurUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurUnitType.setDescription('Unit type indicates the type of interface as T1/E1 or T3/E3 in future. This is part of the interface table ifIndex which is constructed with boardID, unit type and unit index.')
lucentPM4T1E1PMCurLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurLineNum.setDescription('Line number uniquely identifies the T1/E1 interface on a given board.')
lucentPM4T1E1PMCurIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurIfIndex.setDescription('Interface table ifIndex cross reference. The global interface number is computed by using the Most Significant byte as the board ID and the Least Significant 2 bytes represents the interface index. The third byte represents the unit type which will be a T1 or E1. Thus board 0 interface 3 is represented as 0x00050003. The global interface number corresponds to the IfIndex in MIB II.')
lucentPM4T1E1PMCurESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurESs.setDescription('The number of errored seconds, encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurSESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurSESs.setDescription('The number of Severely Errored Seconds encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurSEFSs = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurUASs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurUASs.setDescription('The number of Unavailable Seconds encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurCSSs.setDescription('The number of Controlled Slip Seconds encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurPCVs.setDescription('The number of Path Coding Violations encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurLESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurLESs.setDescription('The number of Line Errored Seconds encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurBESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurBESs.setDescription('The number of Bursty Errored Seconds encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurDMs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurDMs.setDescription('The number of Degraded Minutes encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMCurLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMCurLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMCurLCVs.setDescription('The number of Line Code Violations encountered by the line in the current 15 mins interval.')
lucentPM4T1E1PMInt = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2), )
if mibBuilder.loadTexts: lucentPM4T1E1PMInt.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMInt.setDescription('Performance management table representing the performance statistics of T1/E1 interfaces in the box. This table represents the 24 hr statistics divided into 96 15 mins intervals. This object is not accessible and present for clarity purpose. This table is part of RFC 1406.')
lucentPM4T1E1PMIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMIntBoard"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMIntUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMIntLineNum"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMIntInterval"))
if mibBuilder.loadTexts: lucentPM4T1E1PMIntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntEntry.setDescription('Performance management table entries for all the T1/E1 interfaces in the box. This table represents the 24 hr statistics divided into 96 15 mins intervals. This object is not accessible and present for clarity purpose.')
lucentPM4T1E1PMIntBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntBoard.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntBoard.setDescription('Board number of the interface. The global interface number is computed by using the Most Significant nibble of the ifIndex and the Least Significant nibble represents the interface index. Thus board 0 interface 3 is represented as 0x03 or 03 decimal and board 10 interface 3 is represented as 0xa3 or 163 decimal. In an integer, of 4 bytes wide, the 3 MSBytes will all be zeros. The global interface number corresponds to the IfIndex of MIB II.')
lucentPM4T1E1PMIntUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntUnitType.setDescription('Unit type indicates the type of physical or logical device. The unit type for this table is either T1 or E1.')
lucentPM4T1E1PMIntLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntLineNum.setDescription('Line number uniquely identifies the T1/E1 interface for this board.')
lucentPM4T1E1PMIntInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntInterval.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntInterval.setDescription('Interval number for a given board. The 24 hr period is divided into 96 15 min intervals, where 1 is the most recent and 96 is the least recent.')
lucentPM4T1E1PMIntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntIfIndex.setDescription('Interface table ifIndex cross reference. The global interface number is computed by using the Most Significant byte as the board ID and the Least Significant 2 bytes represents the interface index. The third byte represents the unit type which will be a T1 or E1. Thus board 0 interface 3 is represented as 0x00050003. The global interface number corresponds to the IfIndex in MIB II.')
lucentPM4T1E1PMIntESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntESs.setDescription('The number of errored seconds, encountered by the line in the last 24 hrs divided into 96 15 mins intervals.')
lucentPM4T1E1PMIntSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntSESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntSESs.setDescription('The number of Severely Errored Seconds encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntSEFSs = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntUASs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntUASs.setDescription('The number of Unavailable Seconds encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntCSSs.setDescription('The number of Controlled Slip Seconds encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntPCVs.setDescription('The number of Path Coding Violations encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntLESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntLESs.setDescription('The number of Line Errored Seconds encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntBESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntBESs.setDescription('The number of Bursty Errored Seconds encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntDMs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntDMs.setDescription('The number of Degraded Minutes encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMIntLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMIntLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMIntLCVs.setDescription('The number of Line Code Violations encountered by the line for one of the 96 15 mins intervals.')
lucentPM4T1E1PMTotal = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3), )
if mibBuilder.loadTexts: lucentPM4T1E1PMTotal.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotal.setDescription('Performance management table representing the performance statistics of T1/E1 interfaces in the box. This table represents the 24 hr statistics divided into 96 15 mins intervals. This object is not accessible and present for clarity purpose. This table is part of RFC 1406.')
lucentPM4T1E1PMTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMTotalBoard"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMTotalUnitType"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMTotalLineNum"), (0, "LIVINGSTON-PM4-MIB", "lucentPM4T1E1PMTotalInterval"))
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalEntry.setDescription('Performance management table entries for all the T1/E1 interfaces in the box. This table represents the 24 hr statistics divided into 96 15 mins intervals. This object is not accessible and present for clarity purpose.')
lucentPM4T1E1PMTotalBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalBoard.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalBoard.setDescription('Board number of the interface. The global interface number is computed by using the Most Significant nibble of the ifIndex and the Least Significant nibble represents the interface index. Thus board 0 interface 3 is represented as 0x03 or 03 decimal and board 10 interface 3 is represented as 0xa3 or 163 decimal. In an integer, of 4 bytes wide, the 3 MSBytes will all be zeros. The global interface number corresponds to the IfIndex of MIB II. This table stores the cumulative values for the past 24 hr period.')
lucentPM4T1E1PMTotalUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 2), PMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalUnitType.setDescription('Unit type indicates the type of physical or logical device. The unit type for this table is either T1 or E1.')
lucentPM4T1E1PMTotalLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalLineNum.setDescription('Interface number for a given board. The global interface number is computed by using the Most Significant nibble of the ifIndex and the Least Significant nibble represents the interface index. Thus board 0 interface 3 is represented as 0x03 or 03 decimal and board 10 interface 3 is represented as 0xa3 or 163 decimal. In an integer, of 4 bytes wide, the 3 MSBytes will all be zeros. The global interface number corresponds to the IfIndex in MIB II.')
lucentPM4T1E1PMTotalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalIfIndex.setDescription('IfIndex cross reference value. This value is obtained from the Board/board number and interface number by combining them into the LSByte. The upper nibble represents the board and the lower nibble represents the line number.')
lucentPM4T1E1PMTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalESs.setDescription('The cumulative value of errored seconds, encountered by the line in the last 24 hrs.')
lucentPM4T1E1PMTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalSESs.setDescription('The cumulative value Severely Errored Seconds encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalSEFSs = MibScalar((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalSEFSs.setDescription('The cumulative value of Severely Errored Framing Seconds encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalUASs.setDescription('The cumulative value of Unavailable Seconds encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalCSSs.setDescription('The cumulative value of Controlled Slip Seconds encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalPCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalPCVs.setDescription('The cumulative value of Path Coding Violations encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalLESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalLESs.setDescription('The cumulative value of Line Errored Seconds encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalBESs.setDescription('The cumulative value of Bursty Errored Seconds encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalDMs.setDescription('The cumulative value of Degraded Minutes encountered by the line for the 24 hr period.')
lucentPM4T1E1PMTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 6, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4T1E1PMTotalLCVs.setDescription('The cumulative value of Line Code Violations encountered by the line for the 24 hr period.')
lucentPM4SecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 7))
lucentPM4AcctMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8))
lucentPM4AcctMgmtComm = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1))
lucentPM4SnmpCommTable = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: lucentPM4SnmpCommTable.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommTable.setDescription('The SNMP Community Table. This table contains entries to restrict the SNMP get and set operations.')
lucentPM4SnmpCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4SnmpCommName"))
if mibBuilder.loadTexts: lucentPM4SnmpCommEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommEntry.setDescription('The entries in the community table.')
lucentPM4SnmpCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SnmpCommIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommIndex.setDescription('The index of the command in the command table. A MAX of 10 network management stations must be specified along with their community names.')
lucentPM4SnmpCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: lucentPM4SnmpCommName.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommName.setDescription('The name of the SNMP Community for SNMP readers and writers. The size of the string is limited to 32 characters. All characters in the string must be printable.')
lucentPM4SnmpCommIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SnmpCommIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommIpAddr.setDescription('The IP Address of the remote community.')
lucentPM4SnmpCommReadAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("ensable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SnmpCommReadAccess.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommReadAccess.setDescription('Read access enable or disable for this community. When enabled, it allows read-only variable access using this community string by the SNMP client.')
lucentPM4SnmpCommWriteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("ensable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SnmpCommWriteAccess.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommWriteAccess.setDescription('Write access enable or disable for this community. When enabled, the agent allows write access to the parameters on the agent by the SNMP clients.')
lucentPM4SnmpCommTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("ensable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SnmpCommTraps.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommTraps.setDescription('Traps receiving capability enable or disable for this community. When enabled, the SNMP agent forwards the traps generated in the box to this SNMP client.')
lucentPM4SnmpCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lucentPM4SnmpCommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommStatus.setDescription('The status of the entry for this community. If the status is set to normal, it allows requests from this SNMP client else it discards the requests from this client.')
lucentPM4SnmpCommLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4SnmpCommLastError.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4SnmpCommLastError.setDescription('If there is an error on a request, this variable may contain a message indicating the error.')
lucentPM4AcctMgmtCallEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2))
lucentPM4AMCallEventTable = MibTable((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: lucentPM4AMCallEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCallEventTable.setDescription('Call accounting table containing a list of call events, which may be used for billing purposes.')
lucentPM4AMCallEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "LIVINGSTON-PM4-MIB", "lucentPM4AMCEIndex"))
if mibBuilder.loadTexts: lucentPM4AMCallEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCallEventEntry.setDescription('The entries in the accounting/billing table.')
lucentPM4AMCEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEIndex.setDescription('Call event index used as an index into the call event table. The table stores call events which may be used for billing.')
lucentPM4AMCETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCETimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCETimeStamp.setDescription('Time stamp for this event in seconds since the last reboot.')
lucentPM4AMCEType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("calloriginated", 1), ("callanswered", 2), ("callcleared", 3), ("servicechanged", 4), ("namechanged", 5), ("baudratechanged", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEType.setDescription('Specifies the type of event associated with this entry in the call event table.')
lucentPM4AMCESvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("ppp", 2), ("slip", 3), ("mpp", 4), ("x25", 5), ("combinet", 6), ("frameRelay", 7), ("euraw", 8), ("euui", 9), ("telnet", 10), ("telnetBinary", 11), ("rawTcp", 12), ("terminalServer", 13), ("mp", 14), ("virtualConnect", 15), ("x25DChannel", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCESvcType.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCESvcType.setDescription('The type of service provided to the user. This field is meaningful if the event type is servicechanged(4), or namechanged(5) events. In all other cases, this object must return none(1).')
lucentPM4AMCEUName = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEUName.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEUName.setDescription('User name of the dialed in user. This object returns the valid user name when the event type is servicechanged(4) or namechanged(5). In all other cases, it returns a NULL.')
lucentPM4AMCEModemBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEModemBoard.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEModemBoard.setDescription('Board ID of the modem which handled this call. This value can be used to diagnose modem related problems (dropping the call, retraining too frequently etc.).')
lucentPM4AMCEModemID = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEModemID.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEModemID.setDescription('Identifies the specific modem on a board which handled this call. Can be used to diagnose modem related problems.')
lucentPM4AMCEModemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEModemPort.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEModemPort.setDescription('A textual string containing the name of the serial interface (ie. S0, S1, etc).')
lucentPM4AMCEDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEDataRate.setDescription('Specifies the speed of this connection. Speed is specified as baud rate for modem calls and receive data rate for ISDN calls. This object returns a 0 for call answered and call cleared events.')
lucentPM4AMCECallingPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCECallingPartyID.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCECallingPartyID.setDescription('Calling party ID. This object is valid only for call answered, call originated, and call cleared events. For all invalid event types, this object is set to NULL.')
lucentPM4AMCECalledPartyID = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCECalledPartyID.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCECalledPartyID.setDescription('Called party ID. This object is valid only for call answered, call originated, and call cleared events. For all invalid event types, this object is set to NULL.')
lucentPM4AMCEInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEInOctets.setDescription('Total octets received during this call. This object is cleared at the end of each call.')
lucentPM4AMCEOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEOutOctets.setDescription('Total octets sent out during this call. This object is cleared at the end of each call.')
lucentPM4AMCECallCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCECallCharge.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCECallCharge.setDescription('Call charge for this call. This object is valid only when the event is call cleared. For all other events this object is set to zero.')
lucentPM4AMCEDisconnReason = MibTableColumn((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 1, 8, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 100, 101, 102, 120, 150, 151, 152, 160, 170, 180, 185, 190, 195, 201, 210))).clone(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("disconnected", 3), ("clidAuthFailed", 4), ("clidAuthServTimeout", 5), ("clidAuthRequestCallback", 6), ("preT310Timeout", 7), ("noModemAvailable", 9), ("noModemNoCarrier", 10), ("noModemLossCarrier", 11), ("noModemResultCodes", 12), ("noModemOpenFailed", 13), ("noModemOpenFailedDiag", 14), ("tsUserExit", 20), ("tsIdleTimeout", 21), ("tsExitTelnet", 22), ("tsNoIPAddr", 23), ("tsExitTcp", 24), ("tsPassWordFail", 25), ("tsRawTCPDisable", 26), ("tsControlC", 27), ("tsDestroyed", 28), ("tsClosedVirtualConnect", 29), ("tsVirtualConnectDestroyed", 30), ("tsExitRlogin", 31), ("tsRloginBadOption", 32), ("tsErrorResource", 33), ("mpNullMessageTimeout", 35), ("pppLcpTimeout", 40), ("pppLcpNegotiateFail", 41), ("pppPAPAuthFail", 42), ("pppCHAPAuthFail", 43), ("pppRemoteAuthFail", 44), ("pppRcvTerminate", 45), ("pppCloseEvent", 46), ("pppCloseNoNcpsOpened", 47), ("pppCloseUnknownMpBundle", 48), ("pppCloseMpAddChanFail", 49), ("tsExitErrTooMany", 50), ("tsExitErrResource", 51), ("tsExitErrInvalidIP", 52), ("tsExitErrHostName", 53), ("tsExitErrBadPort", 54), ("tsExitErrHostReset", 60), ("tsExitErrConnRefused", 61), ("tsExitErrTimedOut", 62), ("tsExitErrClosed", 63), ("tsExitErrNetUnreach", 64), ("tsExitErrHostUnreach", 65), ("tsExitErrNetAdminUnreach", 66), ("tsExitErrHostAdminUnreach", 67), ("tsExitErrPortUnreach", 68), ("sessTimeOut", 100), ("sessFailSecurity", 101), ("sessCallback", 102), ("invalidProtocol", 120), ("requestByRadiusClient", 150), ("localAdmin", 151), ("localSnmp", 152), ("v110Timeout", 160), ("pppAuthTimeout", 170), ("userCallClearRequest", 180), ("remoteEndHungUp", 185), ("resourceQuiesced", 190), ("maxCallDurationReached", 195), ("lowMemory", 201), ("boardDied", 210)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lucentPM4AMCEDisconnReason.setStatus('mandatory')
if mibBuilder.loadTexts: lucentPM4AMCEDisconnReason.setDescription('Reason for the disconnect.')
lucentPM4BoardOfflineTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4BoardOfflineTrap.setDescription('Board down trap. The variable bindings in the Trap packet provide information about the chassis name, board number and the trap status. This Trap must be cleared manually.')
lucentPM4BoardOnlineTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4BoardOnlineTrap.setDescription('Board up trap. The variable bindings in the Trap packet provide information about the chassis name, board number and the trap status. This Trap must be cleared manually.')
lucentPM4PwrSupFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4PwrSupFailTrap.setDescription('Power supply failed trap. The variable bindings in the Trap packet provide information about the chassis name, power supply unit and the trap status. This Trap must be cleared manually.')
lucentPM4PwrSupWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4PwrSupWarnTrap.setDescription('Power supply warning trap. The variable bindings in the Trap packet provide information about the chassis name, power supply unit and the trap status. This Trap is issued when the power supply fluctuates between a set threshold. This Trap must be cleared manually.')
lucentPM4PwrSupRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4PwrSupRestoredTrap.setDescription('Power supply restored trap. The variable bindings in the Trap packet provide information about the chassis name, power supply unit and the trap status. This Trap is issued when a failed power supply is restored. This must be cleared manually.')
lucentPM4FanFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4FanFailTrap.setDescription('Fan failure trap. The variable bindings in the Trap packet provide information about the chassis name, fan number and the trap status. This Trap must be cleared manually.')
lucentPM4FanRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,7)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4FanRestoredTrap.setDescription('Fan restored trap. The variable bindings in the Trap packet provide information about the chassis name, fan number and the trap status. This Trap is issued when the failed fan is restored. This trap must be cleared manually.')
lucentPM4BoardTempWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,8)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4BoardTempWarnTrap.setDescription('Board temperature warning trap. The variable bindings in the Trap packet provide information about the chassis name, unit and the trap status. This Trap is issued when the board temperature exceeds a set threshold value. This trap must be cleared manually.')
lucentPM4BoardTempNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,9)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4BoardTempNormalTrap.setDescription('Board temperature normal trap. The variable bindings in the Trap packet provide information about the chassis name, unit and the trap status. This Trap is issued when the board temperature returns to normal. This trap must be cleared manually.')
lucentPM4BoardTooHotTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,10)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4BoardTooHotTrap.setDescription('Board trap. The variable bindings in the Trap packet provide information about the chassis name, board number and the trap status. This Trap must be cleared manually.')
lucentPM4ModemFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,11)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4ModemFailTrap.setDescription('Modem failure trap. The variable bindings in the Trap packet provide information about the chassis name, modem number and the trap status. This Trap must be cleared manually.')
lucentPM4T1E1LineDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,12)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4T1E1LineDownTrap.setDescription('T1/E1 Line trap. The variable bindings in the Trap packet provide all the information for the clients to display the Board ID, Line ID and the status of the line. This Trap could be generated when the line comes up or goes down once. It must be cleared manually.')
lucentPM4T1E1LineUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,13)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4T1E1LineUpTrap.setDescription('T1/E1 Line trap. The variable bindings in the Trap packet provide all the information for the clients to display the Board ID, Line ID and the status of the line. This Trap could be generated when the line comes up or goes down once. It must be cleared manually.')
lucentPM4T1E1LineThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,14)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4T1E1LineThreshTrap.setDescription('T1/E1 Line trap. The variable bindings in the Trap packet provide all the information for the clients to display the Board ID, Line ID and the trap type. This Trap could be generated when the thresholds for the various performance statistics (ES, SES etc.) exceed. It must be cleared manually.')
lucentPM4BoardPwrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,15)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitType"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitTrapStatus"))
if mibBuilder.loadTexts: lucentPM4BoardPwrOffTrap.setDescription('This trap is issued when the power supply to the board is not enough. The variable bindings in the Trap packet provide information about the chassis name, board/board number and the trap status. This Trap must be cleared manually.')
lucentPM4RadiusAuthFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 307, 1, 1, 2, 2) + (0,16)).setObjects(("SNMPv2-MIB", "sysName"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMBoardIndex"), ("LIVINGSTON-PM4-MIB", "lucentPM4FMUnitIndex"))
if mibBuilder.loadTexts: lucentPM4RadiusAuthFailTrap.setDescription('This trap is issued when the Radius authentication fails. This Trap must be cleared manually. The trap provides information about the board and the modem number.')
mibBuilder.exportSymbols("LIVINGSTON-PM4-MIB", lucentPM4FaultMgmt=lucentPM4FaultMgmt, lucentPM4SerialUser=lucentPM4SerialUser, lucentPM4T1E1ChangeTime=lucentPM4T1E1ChangeTime, lucentPM4EtherOptNoClip=lucentPM4EtherOptNoClip, lucentPM4EtherOutFilter=lucentPM4EtherOutFilter, lucentPM4FMEnvOptUnitPwrLvl=lucentPM4FMEnvOptUnitPwrLvl, lucentPM4T1E1PMIntLESs=lucentPM4T1E1PMIntLESs, lucentPM4ModemUnitType=lucentPM4ModemUnitType, PMAlarmType=PMAlarmType, lucentPM4SerialIndex=lucentPM4SerialIndex, lucentPM4SerialQOctets=lucentPM4SerialQOctets, lucentPM4ModemIndex=lucentPM4ModemIndex, lucentPM4SerialPortNumber=lucentPM4SerialPortNumber, lucentPM4SerialTypeDevice=lucentPM4SerialTypeDevice, lucentPM4EtherMacAddress=lucentPM4EtherMacAddress, lucentPM4EtherOptSlip=lucentPM4EtherOptSlip, lucentPM4FMEnvUnitPwrRange=lucentPM4FMEnvUnitPwrRange, lucentPM4T1E1PMCurUASs=lucentPM4T1E1PMCurUASs, lucentPM4CmT1E1=lucentPM4CmT1E1, lucentPM4EtherOptNetBIOS=lucentPM4EtherOptNetBIOS, lucentPM4EtherSubnetMask=lucentPM4EtherSubnetMask, lucentPM4EtherOptAccounting=lucentPM4EtherOptAccounting, lucentPM4SerialInSpeed=lucentPM4SerialInSpeed, lucentPM4T1E1Encoding=lucentPM4T1E1Encoding, lucentPM4Traps=lucentPM4Traps, lucentPM4FMT1E1ThreshTrapAck=lucentPM4FMT1E1ThreshTrapAck, lucentPM4T1E1PMTotal=lucentPM4T1E1PMTotal, lucentPM4Chassis=lucentPM4Chassis, lucentPM4T1E1PMCurDMs=lucentPM4T1E1PMCurDMs, lucentPM4FMChasTrapState=lucentPM4FMChasTrapState, lucentPM4AMCECallCharge=lucentPM4AMCECallCharge, lucentPM4SerialStarted=lucentPM4SerialStarted, PMUnitType=PMUnitType, lucentPM4T1E1StartMode=lucentPM4T1E1StartMode, lucentPM4FMUnitTrapSeverity=lucentPM4FMUnitTrapSeverity, lucentPM4T1E1PMCurCSSs=lucentPM4T1E1PMCurCSSs, lucentPM4T1E1BlueAlarms=lucentPM4T1E1BlueAlarms, lucentPM4ChasCmdId=lucentPM4ChasCmdId, lucentPM4BoardTempWarnTrap=lucentPM4BoardTempWarnTrap, lucentPM4T1E1Status=lucentPM4T1E1Status, lucentPM4FMUnitTrapStatus=lucentPM4FMUnitTrapStatus, lucentPM4FMT1E1ThreshTrapCfg=lucentPM4FMT1E1ThreshTrapCfg, lucentPM4FMT1E1ThreshPCVs=lucentPM4FMT1E1ThreshPCVs, lucentPM4FMEnvBoardID=lucentPM4FMEnvBoardID, lucentPM4FMChasTrapEntry=lucentPM4FMChasTrapEntry, lucentPM4FMT1E1ThreshBESs=lucentPM4FMT1E1ThreshBESs, lucentPM4EtherOptDns=lucentPM4EtherOptDns, lucentPM4FMT1E1ThreshSEFSs=lucentPM4FMT1E1ThreshSEFSs, lucentPM4T1E1PMIntIfIndex=lucentPM4T1E1PMIntIfIndex, lucentPM4FMEnvUnitIndex=lucentPM4FMEnvUnitIndex, lucentPM4ModemCalls=lucentPM4ModemCalls, lucentPM4AMCEIndex=lucentPM4AMCEIndex, lucentPM4SerialTypeLogin=lucentPM4SerialTypeLogin, lucentPM4FMTrapConfig=lucentPM4FMTrapConfig, lucentPM4T1E1LineDownTrap=lucentPM4T1E1LineDownTrap, lucentPM4SerialTypeNwDialIn=lucentPM4SerialTypeNwDialIn, lucentPM4FMT1E1ThreshDMs=lucentPM4FMT1E1ThreshDMs, lucentPM4T1E1PMTotalCSSs=lucentPM4T1E1PMTotalCSSs, lucentPM4FMT1E1ThreshCSSs=lucentPM4FMT1E1ThreshCSSs, lucentPM4MibRev=lucentPM4MibRev, lucentPM4T1E1PMCurSEFSs=lucentPM4T1E1PMCurSEFSs, lucentPM4SnmpCommTraps=lucentPM4SnmpCommTraps, lucentPM4AMCEModemBoard=lucentPM4AMCEModemBoard, lucentPM4T1E1PMCurESs=lucentPM4T1E1PMCurESs, lucentPM4FMT1E1ThreshESs=lucentPM4FMT1E1ThreshESs, lucentPM4ModemRetrains=lucentPM4ModemRetrains, lucentPM4SerialSessionId=lucentPM4SerialSessionId, lucentPM4SerialEntry=lucentPM4SerialEntry, lucentPM4ChasCmdResult=lucentPM4ChasCmdResult, lucentPM4EtherOptBcastHigh=lucentPM4EtherOptBcastHigh, lucentPM4ChasCmdDevId=lucentPM4ChasCmdDevId, lucentPM4T1E1SuperSignal=lucentPM4T1E1SuperSignal, PMDiagCmdStatus=PMDiagCmdStatus, lucentPM4CmInterfaces=lucentPM4CmInterfaces, lucentPM4T1E1PMCurBESs=lucentPM4T1E1PMCurBESs, lucentPM4SnmpCommIpAddr=lucentPM4SnmpCommIpAddr, lucentPM4AMCETimeStamp=lucentPM4AMCETimeStamp, lucentPM4PerfMgmt=lucentPM4PerfMgmt, PMDiagTestCntrl=PMDiagTestCntrl, lucentPM4T1E1PMTotalBoard=lucentPM4T1E1PMTotalBoard, lucentPM4SnmpCommReadAccess=lucentPM4SnmpCommReadAccess, lucentPM4ModemPortName=lucentPM4ModemPortName, lucentPM4AcctMgmt=lucentPM4AcctMgmt, lucentPM4T1E1PMTotalEntry=lucentPM4T1E1PMTotalEntry, lucentPM4SerialUnitType=lucentPM4SerialUnitType, lucentPM4ChasCmdTable=lucentPM4ChasCmdTable, lucentPM4ModemOutSpeed=lucentPM4ModemOutSpeed, lucentPM4FMEnvTrapCfg=lucentPM4FMEnvTrapCfg, lucentPM4SerialTypeHardwired=lucentPM4SerialTypeHardwired, lucentPM4FMT1E1ThreshSESs=lucentPM4FMT1E1ThreshSESs, lucentPM4BoardOfflineTrap=lucentPM4BoardOfflineTrap, lucentPM4T1E1PMIntPCVs=lucentPM4T1E1PMIntPCVs, lucentPM4FMEqpTrapCfg=lucentPM4FMEqpTrapCfg, lucentPM4T1E1UnitType=lucentPM4T1E1UnitType, lucentPM4SnmpCommStatus=lucentPM4SnmpCommStatus, lucentPM4CmSerial=lucentPM4CmSerial, lucentPM4T1E1BipolarErrors=lucentPM4T1E1BipolarErrors, lucentPM4ChasCmdUnitType=lucentPM4ChasCmdUnitType, lucentPM4T1E1PMInt=lucentPM4T1E1PMInt, lucentPM4ModemStatus=lucentPM4ModemStatus, lucentPM4ChasCmdParams=lucentPM4ChasCmdParams, lucentPM4AMCallEventEntry=lucentPM4AMCallEventEntry, lucentPM4ChasCmdIndex=lucentPM4ChasCmdIndex, lucentPM4EtherOptNoPAP=lucentPM4EtherOptNoPAP, lucentPM4FMEqpTrapCfgEntry=lucentPM4FMEqpTrapCfgEntry, lucentPM4T1E1PMIntCSSs=lucentPM4T1E1PMIntCSSs, lucentPM4T1E1PMTotalUASs=lucentPM4T1E1PMTotalUASs, lucentPM4EtherBoardIndex=lucentPM4EtherBoardIndex, lucentPM4T1E1PMIntESs=lucentPM4T1E1PMIntESs, lucentPM4EtherOptNoListen=lucentPM4EtherOptNoListen, lucentPM4ModemFailTrap=lucentPM4ModemFailTrap, lucentPM4FMChasTrapSeverity=lucentPM4FMChasTrapSeverity, lucentPM4FMEqpUnitIndex=lucentPM4FMEqpUnitIndex, lucentPM4EtherPriNameServer=lucentPM4EtherPriNameServer, lucentPM4SerialIpAddress=lucentPM4SerialIpAddress, lucentPM4SerialBoardIndex=lucentPM4SerialBoardIndex, lucentPM4FMEnvUnitType=lucentPM4FMEnvUnitType, lucentPM4AMCEModemID=lucentPM4AMCEModemID, lucentPM4T1E1PMIntLCVs=lucentPM4T1E1PMIntLCVs, lucentPM4SecurityMgmt=lucentPM4SecurityMgmt, lucentPM4T1E1PMIntUASs=lucentPM4T1E1PMIntUASs, lucentPM4T1E1PMIntBESs=lucentPM4T1E1PMIntBESs, lucentPM4T1E1PMTotalSESs=lucentPM4T1E1PMTotalSESs, lucentPM4T1E1PMCurPCVs=lucentPM4T1E1PMCurPCVs, lucentPM4T1E1PMTotalLineNum=lucentPM4T1E1PMTotalLineNum, lucentPM4AMCEDisconnReason=lucentPM4AMCEDisconnReason, lucentPM4T1E1PMCurIfIndex=lucentPM4T1E1PMCurIfIndex, lucentPM4SnmpCommWriteAccess=lucentPM4SnmpCommWriteAccess, lucentPM4FMEnvUnitTempRange=lucentPM4FMEnvUnitTempRange, lucentPM4FMT1E1ThreshUnitType=lucentPM4FMT1E1ThreshUnitType, lucentPM4EtherOptDefaultRip=lucentPM4EtherOptDefaultRip, lucentPM4AMCEUName=lucentPM4AMCEUName, lucentPM4FMBoardIndex=lucentPM4FMBoardIndex, lucentPM4BoardOnlineTrap=lucentPM4BoardOnlineTrap, lucentPM4T1E1SerialCount=lucentPM4T1E1SerialCount, lucentPM4AMCECallingPartyID=lucentPM4AMCECallingPartyID, lucentPM4SerialOutSpeed=lucentPM4SerialOutSpeed, lucentPM4AMCEOutOctets=lucentPM4AMCEOutOctets, lucentPM4T1E1Table=lucentPM4T1E1Table, lucentPM4ModemTable=lucentPM4ModemTable, lucentPM4EtherTable=lucentPM4EtherTable, lucentPM4T1E1LineUpTrap=lucentPM4T1E1LineUpTrap, lucentPM4EtherOptIPFilter=lucentPM4EtherOptIPFilter, lucentPM4EtherOptEtherIpx=lucentPM4EtherOptEtherIpx, lucentPM4AMCESvcType=lucentPM4AMCESvcType, lucentPM4T1E1PMIntSESs=lucentPM4T1E1PMIntSESs, lucentPM4T1E1PMIntDMs=lucentPM4T1E1PMIntDMs, lucentPM4T1E1SyncErrors=lucentPM4T1E1SyncErrors, lucentPM4T1E1PMTotalUnitType=lucentPM4T1E1PMTotalUnitType, lucentPM4T1E1PMTotalBESs=lucentPM4T1E1PMTotalBESs, lucentPM4T1E1PMCurSESs=lucentPM4T1E1PMCurSESs, lucentPM4T1E1PMTotalPCVs=lucentPM4T1E1PMTotalPCVs, lucentPM4T1E1PMIntUnitType=lucentPM4T1E1PMIntUnitType, lucentPM4EtherIfType=lucentPM4EtherIfType, lucentPM4AMCEModemPort=lucentPM4AMCEModemPort, PMEquipPRIStatus=PMEquipPRIStatus, lucentPM4CmModem=lucentPM4CmModem, lucentPM4ModemConnects=lucentPM4ModemConnects, lucentPM4SerialIdle=lucentPM4SerialIdle, lucentPM4PwrSupRestoredTrap=lucentPM4PwrSupRestoredTrap, lucentPM4AMCEType=lucentPM4AMCEType, lucentPM4AcctMgmtComm=lucentPM4AcctMgmtComm, lucentPM4EtherOptDefaultListen=lucentPM4EtherOptDefaultListen, lucentPM4EtherOptPmeMsg=lucentPM4EtherOptPmeMsg, lucentPM4T1E1PMCurEntry=lucentPM4T1E1PMCurEntry, lucentPM4EtherIndex=lucentPM4EtherIndex, lucentPM4ModemBoardIndex=lucentPM4ModemBoardIndex, lucentPM4FMChasTrapIndex=lucentPM4FMChasTrapIndex, lucentPM4T1E1PMTotalSEFSs=lucentPM4T1E1PMTotalSEFSs, lucentPM4FMChasTrapStatus=lucentPM4FMChasTrapStatus, lucentPM4FMEqpRepTimer=lucentPM4FMEqpRepTimer, lucentPM4FMT1E1ThreshLESs=lucentPM4FMT1E1ThreshLESs, lucentPM4T1E1SyncLoss=lucentPM4T1E1SyncLoss, lucentPM4T1E1YellowAlarms=lucentPM4T1E1YellowAlarms, lucentPM4FanFailTrap=lucentPM4FanFailTrap, lucentPM4FMT1E1ThreshTrapCfgEntry=lucentPM4FMT1E1ThreshTrapCfgEntry, lucentPM4SnmpCommName=lucentPM4SnmpCommName, lucentPM4T1E1PMIntSEFSs=lucentPM4T1E1PMIntSEFSs, lucentPM4ChasSummary=lucentPM4ChasSummary, lucentPM4T1E1PhysType=lucentPM4T1E1PhysType, lucentPM4EtherPortName=lucentPM4EtherPortName, lucentPM4T1E1PMCurLESs=lucentPM4T1E1PMCurLESs, lucentPM4ChasCmdEntry=lucentPM4ChasCmdEntry, lucentPM4FMEqpBoardIndex=lucentPM4FMEqpBoardIndex, lucentPM4T1E1RecvLevel=lucentPM4T1E1RecvLevel, lucentPM4SnmpCommIndex=lucentPM4SnmpCommIndex, lucentPM4FMChasTrapTimeStamp=lucentPM4FMChasTrapTimeStamp, lucentPM4AMCEDataRate=lucentPM4AMCEDataRate, lucentPM4T1E1PCM=lucentPM4T1E1PCM, lucentPM4EtherEntry=lucentPM4EtherEntry, lucentPM4ConfigMgmt=lucentPM4ConfigMgmt, lucentPM4FMEnvTrapCfgEntry=lucentPM4FMEnvTrapCfgEntry, lucentPM4FMChasTrapUnitIndex=lucentPM4FMChasTrapUnitIndex, lucentPM4FMEqpUnitType=lucentPM4FMEqpUnitType, lucentPM4SerialPhysType=lucentPM4SerialPhysType, lucentPM4FMChasTrapUnitType=lucentPM4FMChasTrapUnitType, lucentPM4FMEnvOptUnitTemp=lucentPM4FMEnvOptUnitTemp, lucentPM4T1E1LineThreshTrap=lucentPM4T1E1LineThreshTrap, lucentPM4FaultMgmtChasTrap=lucentPM4FaultMgmtChasTrap, lucentPM4ModemId=lucentPM4ModemId, lucentPM4CmEther=lucentPM4CmEther, lucentPM4T1E1CarrierLoss=lucentPM4T1E1CarrierLoss, lucentPM4T1E1Framing=lucentPM4T1E1Framing, lucentPM4T1E1PMIntEntry=lucentPM4T1E1PMIntEntry, lucentPM4T1E1Index=lucentPM4T1E1Index, lucentPM4T1E1PMCur=lucentPM4T1E1PMCur, lucentPM4ModemInByteCount=lucentPM4ModemInByteCount, lucentPM4T1E1Entry=lucentPM4T1E1Entry, lucentPM4T1E1BoardIndex=lucentPM4T1E1BoardIndex, lucentPM4EtherOptSnmp=lucentPM4EtherOptSnmp, lucentPM4FMUnitType=lucentPM4FMUnitType, lucentPM4ModemRenegotiates=lucentPM4ModemRenegotiates, lucentPM4FMEnvTrapCtl=lucentPM4FMEnvTrapCtl, lucentPM4T1E1PMCurBoard=lucentPM4T1E1PMCurBoard, lucentPM4EtherAltNameServer=lucentPM4EtherAltNameServer, lucentPM4T1E1PMCurLineNum=lucentPM4T1E1PMCurLineNum, lucentPM4BoardTempNormalTrap=lucentPM4BoardTempNormalTrap, lucentPM4ModemCompression=lucentPM4ModemCompression, lucentPM4EtherInFilter=lucentPM4EtherInFilter, lucentPM4SerialOutOctets=lucentPM4SerialOutOctets, lucentPM4T1E1PMTotalIfIndex=lucentPM4T1E1PMTotalIfIndex, lucentPM4T1E1PMTotalLCVs=lucentPM4T1E1PMTotalLCVs, lucentPM4SerialDirection=lucentPM4SerialDirection, lucentPM4T1E1PMTotalLESs=lucentPM4T1E1PMTotalLESs, lucentPM4FanRestoredTrap=lucentPM4FanRestoredTrap, lucentPM4SWRev=lucentPM4SWRev, lucentPM4PwrSupFailTrap=lucentPM4PwrSupFailTrap, lucentPM4FMT1E1ThreshBoardIndex=lucentPM4FMT1E1ThreshBoardIndex, lucentPM4ModemOutByteCount=lucentPM4ModemOutByteCount, lucentPM4SerialifDescr=lucentPM4SerialifDescr, lucentPM4T1E1SerialIndex=lucentPM4T1E1SerialIndex, lucentPM4ChasCmdBoardId=lucentPM4ChasCmdBoardId, lucentPM4ModemEntry=lucentPM4ModemEntry, lucentPM4FMT1E1ThreshRepTimer=lucentPM4FMT1E1ThreshRepTimer, lucentPM4T1E1PMCurLCVs=lucentPM4T1E1PMCurLCVs, lucentPM4EtherOptRip=lucentPM4EtherOptRip, lucentPM4T1E1PMTotalESs=lucentPM4T1E1PMTotalESs, lucentPM4FMEqpTrapCtl=lucentPM4FMEqpTrapCtl, lucentPM4BoardPwrOffTrap=lucentPM4BoardPwrOffTrap, lucentPM4RadiusAuthFailTrap=lucentPM4RadiusAuthFailTrap, lucentPM4AMCallEventTable=lucentPM4AMCallEventTable, PMEquipStatus=PMEquipStatus, lucentPM4T1E1PMIntLineNum=lucentPM4T1E1PMIntLineNum, lucentPM4PwrSupWarnTrap=lucentPM4PwrSupWarnTrap, lucentPM4T1E1CRCErrors=lucentPM4T1E1CRCErrors, lucentPM4SerialInOctets=lucentPM4SerialInOctets, lucentPM4ModemDetects=lucentPM4ModemDetects, lucentPM4FaultMgmtIsolation=lucentPM4FaultMgmtIsolation, lucentPM4T1E1PMTotalDMs=lucentPM4T1E1PMTotalDMs, lucentPM4T1E1PMCurUnitType=lucentPM4T1E1PMCurUnitType, lucentPM4SnmpCommLastError=lucentPM4SnmpCommLastError, lucentPM4SerialTable=lucentPM4SerialTable, lucentPM4AMCEInOctets=lucentPM4AMCEInOctets, lucentPM4FMUnitIndex=lucentPM4FMUnitIndex)
mibBuilder.exportSymbols("LIVINGSTON-PM4-MIB", lucentPM4AcctMgmtCallEvent=lucentPM4AcctMgmtCallEvent, lucentPM4ModemInSpeed=lucentPM4ModemInSpeed, lucentPM4EtherIpAddress=lucentPM4EtherIpAddress, lucentPM4T1E1PerfMgmt=lucentPM4T1E1PerfMgmt, lucentPM4AMCECalledPartyID=lucentPM4AMCECalledPartyID, lucentPM4BoardTooHotTrap=lucentPM4BoardTooHotTrap, lucentPM4SerialTypeNwDialout=lucentPM4SerialTypeNwDialout, lucentPM4SnmpCommTable=lucentPM4SnmpCommTable, lucentPM4SerialDS0State=lucentPM4SerialDS0State, lucentPM4SerialPortStatus=lucentPM4SerialPortStatus, lucentPM4EtherIpGateway=lucentPM4EtherIpGateway, lucentPM4ChasCmdUnitIndex=lucentPM4ChasCmdUnitIndex, lucentPM4ModemProtocol=lucentPM4ModemProtocol, lucentPM4T1E1Function=lucentPM4T1E1Function, lucentPM4FMT1E1ThreshUASs=lucentPM4FMT1E1ThreshUASs, lucentPM4T1E1PMIntBoard=lucentPM4T1E1PMIntBoard, lucentPM4Mib=lucentPM4Mib, lucentPM4SerialTypeDeviceName=lucentPM4SerialTypeDeviceName, lucentPM4T1E1PMIntInterval=lucentPM4T1E1PMIntInterval, lucentPM4EtherIfIndex=lucentPM4EtherIfIndex, lucentPM4SnmpCommEntry=lucentPM4SnmpCommEntry, lucentPM4FMChasTrapBoardID=lucentPM4FMChasTrapBoardID, lucentPM4EtherOptEtherDown=lucentPM4EtherOptEtherDown, lucentPM4FMEqpTrapId=lucentPM4FMEqpTrapId)
