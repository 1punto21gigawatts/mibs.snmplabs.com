#
# PySNMP MIB module RUCKUS-ADAPTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-ADAPTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ruckusCommonAdapterModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusCommonAdapterModule")
RuckusSSID, RuckusdB = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusSSID", "RuckusdB")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, NotificationType, Gauge32, Integer32, Unsigned32, iso, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "NotificationType", "Gauge32", "Integer32", "Unsigned32", "iso", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Bits", "Counter32")
MacAddress, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TruthValue")
ruckusAdapterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1))
if mibBuilder.loadTexts: ruckusAdapterMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusAdapterMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusAdapterMIB.setContactInfo('Ruckus Wireless Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200')
if mibBuilder.loadTexts: ruckusAdapterMIB.setDescription('Ruckus adapter mib module.')
ruckusAdapterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1))
ruckusAdapterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1))
ruckusAdapterEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 2))
ruckusAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ruckusAdapterTable.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterTable.setDescription('Specifies adapter table.')
ruckusAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-ADAPTER-MIB", "ruckusAdapterMacAddress"))
if mibBuilder.loadTexts: ruckusAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterEntry.setDescription('Specifies each adapter entry.')
ruckusAdapterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ruckusAdapterMacAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterMacAddress.setDescription('Specifies adapter hardware address. An index into the table.')
ruckusAdapterReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusAdapterReboot.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterReboot.setDescription('Setting to true(1) would cause to reboot the adapter. Always returns false(2)')
ruckusAdapterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 2), )
if mibBuilder.loadTexts: ruckusAdapterInfoTable.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterInfoTable.setDescription('Specifies each adapter table.')
ruckusAdapterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-ADAPTER-MIB", "ruckusAdapterInfoMacAddr"))
if mibBuilder.loadTexts: ruckusAdapterInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterInfoEntry.setDescription('Specifies each adapter entry.')
ruckusAdapterInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: ruckusAdapterInfoMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterInfoMacAddr.setDescription('Adapter mac address, an index into the table.')
ruckusAdapterInfoSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 2, 1, 2), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterInfoSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterInfoSSID.setDescription('Specifies the SSID.')
ruckusAdapterInfoBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterInfoBSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterInfoBSSID.setDescription('Specifies the BSS ID.')
ruckusAdapterRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 2, 1, 4), RuckusdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterRssi.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterRssi.setDescription('Specifies the RSSI.')
ruckusAdapterStatTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3), )
if mibBuilder.loadTexts: ruckusAdapterStatTable.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTable.setDescription('Specifies adapter table.')
ruckusAdapterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-ADAPTER-MIB", "ruckusAdapterStatMacAddr"))
if mibBuilder.loadTexts: ruckusAdapterStatEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatEntry.setDescription('Specifies each adapter entry.')
ruckusAdapterStatMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ruckusAdapterStatMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatMacAddr.setDescription('Adapter mac address, an index into the table.')
ruckusAdapterStatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDataFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDataFrames.setDescription('Rx data frames.')
ruckusAdapterStatRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxMgmtFrames.setDescription('Rx management frames.')
ruckusAdapterStatRxCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxCtrlFrames.setDescription('Rx control frames.')
ruckusAdapterStatRxUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxUcastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxUcastFrames.setDescription('Rx unicast frames.')
ruckusAdapterStatRxMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxMcastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxMcastFrames.setDescription('Rx multicast/broadcast frames.')
ruckusAdapterStatRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxBytes.setDescription('Rx data count (bytes)')
ruckusAdapterStatRxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDup.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDup.setDescription('Rx discard because of duplicates.')
ruckusAdapterStatRxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxNoPrivacy.setDescription('Rx w/ wep but privacy off.')
ruckusAdapterStatRxWEPFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxWEPFail.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxWEPFail.setDescription('Rx wep processing failed.')
ruckusAdapterStatRxDemicFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDemicFail.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDemicFail.setDescription('Rx demic failed.')
ruckusAdapterStatRxDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDecap.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDecap.setDescription('Rx decapsulation failed.')
ruckusAdapterStatRxDeFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDeFrag.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDeFrag.setDescription('Rx defragmentation failed.')
ruckusAdapterStatRxDisAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDisAssoc.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDisAssoc.setDescription('Rx dis associations.')
ruckusAdapterStatRxDeAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxDeAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxDeAuth.setDescription('Rx de authentication.')
ruckusAdapterStatRxUnAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxUnAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxUnAuth.setDescription('Rx un authenticated.')
ruckusAdapterStatRxUnEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxUnEncrypted.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxUnEncrypted.setDescription('Rx un encrypted.')
ruckusAdapterStatRxBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatRxBeacons.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatRxBeacons.setDescription('Rx beacons.')
ruckusAdapterStatTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxDataFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxDataFrames.setDescription('Rx data frames.')
ruckusAdapterStatTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxMgmtFrames.setDescription('Tx management frames.')
ruckusAdapterStatTxUcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxUcastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxUcastFrames.setDescription('Tx unicast frames.')
ruckusAdapterStatTxMcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxMcastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxMcastFrames.setDescription('Tx multicast')
ruckusAdapterStatTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxBytes.setDescription('Tx data count (bytes).')
ruckusAdapterStatTxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxAssoc.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxAssoc.setDescription('[re]associations.')
ruckusAdapterStatTxAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxAssocFail.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxAssocFail.setDescription('[re]association failures.')
ruckusAdapterStatTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxAuth.setDescription('[re]authentications.')
ruckusAdapterStatTxAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxAuthFail.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxAuthFail.setDescription('[re]authentication failures.')
ruckusAdapterStatTxDeAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxDeAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxDeAuth.setDescription('Tx de auth.')
ruckusAdapterStatTxDisAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxDisAssoc.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxDisAssoc.setDescription('Tx dis associations.')
ruckusAdapterStatTxProbeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxProbeReq.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxProbeReq.setDescription('Tx probe requests.')
ruckusAdapterStatTxProbeResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 9, 1, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusAdapterStatTxProbeResp.setStatus('current')
if mibBuilder.loadTexts: ruckusAdapterStatTxProbeResp.setDescription('Tx probe responses.')
mibBuilder.exportSymbols("RUCKUS-ADAPTER-MIB", ruckusAdapterObjects=ruckusAdapterObjects, ruckusAdapterEntry=ruckusAdapterEntry, ruckusAdapterMIB=ruckusAdapterMIB, ruckusAdapterMacAddress=ruckusAdapterMacAddress, ruckusAdapterReboot=ruckusAdapterReboot, ruckusAdapterStatRxDisAssoc=ruckusAdapterStatRxDisAssoc, ruckusAdapterStatRxUnEncrypted=ruckusAdapterStatRxUnEncrypted, ruckusAdapterStatTxAuth=ruckusAdapterStatTxAuth, ruckusAdapterEvents=ruckusAdapterEvents, ruckusAdapterInfoBSSID=ruckusAdapterInfoBSSID, ruckusAdapterStatTxAssoc=ruckusAdapterStatTxAssoc, ruckusAdapterStatRxDup=ruckusAdapterStatRxDup, ruckusAdapterStatRxCtrlFrames=ruckusAdapterStatRxCtrlFrames, ruckusAdapterStatRxDeFrag=ruckusAdapterStatRxDeFrag, ruckusAdapterStatRxBeacons=ruckusAdapterStatRxBeacons, ruckusAdapterStatTxMgmtFrames=ruckusAdapterStatTxMgmtFrames, ruckusAdapterStatTxAssocFail=ruckusAdapterStatTxAssocFail, ruckusAdapterStatTxProbeResp=ruckusAdapterStatTxProbeResp, ruckusAdapterInfoEntry=ruckusAdapterInfoEntry, ruckusAdapterRssi=ruckusAdapterRssi, ruckusAdapterStatRxMgmtFrames=ruckusAdapterStatRxMgmtFrames, ruckusAdapterStatTxDisAssoc=ruckusAdapterStatTxDisAssoc, ruckusAdapterStatTxDataFrames=ruckusAdapterStatTxDataFrames, ruckusAdapterStatRxDeAuth=ruckusAdapterStatRxDeAuth, ruckusAdapterStatEntry=ruckusAdapterStatEntry, ruckusAdapterStatRxDecap=ruckusAdapterStatRxDecap, ruckusAdapterStatRxWEPFail=ruckusAdapterStatRxWEPFail, ruckusAdapterStatTxProbeReq=ruckusAdapterStatTxProbeReq, ruckusAdapterInfoSSID=ruckusAdapterInfoSSID, ruckusAdapterStatTxUcastFrames=ruckusAdapterStatTxUcastFrames, ruckusAdapterStatTxMcastFrames=ruckusAdapterStatTxMcastFrames, ruckusAdapterStatRxMcastFrames=ruckusAdapterStatRxMcastFrames, ruckusAdapterStatTxAuthFail=ruckusAdapterStatTxAuthFail, ruckusAdapterStatRxDataFrames=ruckusAdapterStatRxDataFrames, ruckusAdapterStatTxDeAuth=ruckusAdapterStatTxDeAuth, ruckusAdapterStatRxUnAuth=ruckusAdapterStatRxUnAuth, ruckusAdapterInfo=ruckusAdapterInfo, ruckusAdapterStatRxNoPrivacy=ruckusAdapterStatRxNoPrivacy, ruckusAdapterTable=ruckusAdapterTable, ruckusAdapterStatTable=ruckusAdapterStatTable, ruckusAdapterStatRxDemicFail=ruckusAdapterStatRxDemicFail, ruckusAdapterStatRxUcastFrames=ruckusAdapterStatRxUcastFrames, PYSNMP_MODULE_ID=ruckusAdapterMIB, ruckusAdapterInfoTable=ruckusAdapterInfoTable, ruckusAdapterStatMacAddr=ruckusAdapterStatMacAddr, ruckusAdapterStatTxBytes=ruckusAdapterStatTxBytes, ruckusAdapterInfoMacAddr=ruckusAdapterInfoMacAddr, ruckusAdapterStatRxBytes=ruckusAdapterStatRxBytes)
