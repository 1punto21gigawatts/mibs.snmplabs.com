#
# PySNMP MIB module AT-FILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-FILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Gauge32, MibIdentifier, Counter64, ModuleIdentity, NotificationType, TimeTicks, IpAddress, Bits, ObjectIdentity, Counter32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "MibIdentifier", "Counter64", "ModuleIdentity", "NotificationType", "TimeTicks", "IpAddress", "Bits", "ObjectIdentity", "Counter32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
file = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56))
file.setRevisions(('2006-06-28 12:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: file.setRevisionsDescriptions(('Initial Revision',))
if mibBuilder.loadTexts: file.setLastUpdated('200606281222Z')
if mibBuilder.loadTexts: file.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: file.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: file.setDescription('This MIB file contains definitions of managed objects for the FILE module. ')
fileTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1), )
if mibBuilder.loadTexts: fileTable.setStatus('current')
if mibBuilder.loadTexts: fileTable.setDescription("A list of all the files in the router's non-volatile storage.")
fileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1), ).setIndexNames((0, "AT-FILE-MIB", "fileIndex"))
if mibBuilder.loadTexts: fileEntry.setStatus('current')
if mibBuilder.loadTexts: fileEntry.setDescription('An entry in the list of files containing information about a single file in the router.')
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileIndex.setStatus('current')
if mibBuilder.loadTexts: fileIndex.setDescription('A unique file index. File indices are recalculated every time the router reboots to reflect the current files on the router. As files are added, new indices are allocated to the new files.')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('current')
if mibBuilder.loadTexts: fileName.setDescription('The name of the file, in the form <name.typ>. The name is up to eight characters long, the type is up to three characters long.')
fileDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("nvs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDevice.setStatus('current')
if mibBuilder.loadTexts: fileDevice.setDescription('The device on which the file resides.')
fileCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCreationTime.setStatus('current')
if mibBuilder.loadTexts: fileCreationTime.setDescription('The creation date and time for the file, in the format <dd-mmm-yy, hh:mm:ss>.')
fileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("deleting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileStatus.setStatus('current')
if mibBuilder.loadTexts: fileStatus.setDescription('The status of the file. When read, this object will always return a value of ok(1), since the object will not exist if the value is deleting(2). Write the value deleting(2) to this object to delete the file.')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('current')
if mibBuilder.loadTexts: fileSize.setDescription('The size, in bytes, of the file.')
fileNumbers = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileNumbers.setStatus('current')
if mibBuilder.loadTexts: fileNumbers.setDescription('The total number of files in FLASH and NVS.')
mibBuilder.exportSymbols("AT-FILE-MIB", fileEntry=fileEntry, file=file, PYSNMP_MODULE_ID=file, fileIndex=fileIndex, fileTable=fileTable, fileSize=fileSize, fileNumbers=fileNumbers, fileName=fileName, fileCreationTime=fileCreationTime, fileDevice=fileDevice, fileStatus=fileStatus)
