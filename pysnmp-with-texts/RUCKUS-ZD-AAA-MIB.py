#
# PySNMP MIB module RUCKUS-ZD-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-ZD-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ruckusZDWLANModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusZDWLANModule")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Counter32, TimeTicks, NotificationType, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, MibIdentifier, Bits, ModuleIdentity, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "TimeTicks", "NotificationType", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "MibIdentifier", "Bits", "ModuleIdentity", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ruckusZDAAAMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3))
if mibBuilder.loadTexts: ruckusZDAAAMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusZDAAAMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusZDAAAMIB.setContactInfo('Ruckus Wireless, Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200')
if mibBuilder.loadTexts: ruckusZDAAAMIB.setDescription('Ruckus ZD AAA Configuration mib')
ruckusZDAAAObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1))
ruckusZDAAAConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1))
ruckusZDAAAConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: ruckusZDAAAConfigTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAAConfigTable.setDescription('ZD AAA table.')
ruckusZDAAAConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "RUCKUS-ZD-AAA-MIB", "ruckusZDAAAConfigID"))
if mibBuilder.loadTexts: ruckusZDAAAConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAAConfigEntry.setDescription('Specifies each ZD AAA configuration entry.')
ruckusZDAAAConfigID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 32)))
if mibBuilder.loadTexts: ruckusZDAAAConfigID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAAConfigID.setDescription('AAA Directory Server ID.')
ruckusZDAAAConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAAConfigName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAAConfigName.setDescription("Server name for this AAA or Directory Server. It can't be modified after creating. ")
ruckusZDAAAConfigServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active-directory", 1), ("ldap-directory", 2), ("aaa-authentication", 3), ("aaa-accounting", 4))).clone('aaa-authentication')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAAConfigServiceType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAAConfigServiceType.setDescription('The Service type for this AAA or LDAP/Active Directory server. For current version,active-directory and ldap-directory are not supported(for set)')
ruckusZDAAAConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruckusZDAAAConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAAConfigRowStatus.setDescription('Row Status ,Control of Add, Delete of the Directory Server. 1,ACTIVE state,only for read; 4,CREATEANDGO, create a new table; 6,DESTROY, delete a existing table.')
ruckusZDAAASvrTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: ruckusZDAAASvrTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAASvrTable.setDescription('ZD AAA Server table,including access server and account server.')
ruckusZDAAASvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "RUCKUS-ZD-AAA-MIB", "ruckusZDAAAConfigID"))
if mibBuilder.loadTexts: ruckusZDAAASvrEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAASvrEntry.setDescription('Specifies each ZD AAA Svr entry.')
ruckusZDAAARadiusBackupControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusBackupControl.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusBackupControl.setDescription('Enable Primary-Secondary Backup scheme for this RADIUS Server. If enable,Secondary aaa server would be used. If diable,Secondary aaa server would not be used')
ruckusZDAAARadiusPrimarySvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusPrimarySvrIpAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusPrimarySvrIpAddress.setDescription('The IP(V4 or V6) Address choosen for this RADIUS or Directory Server.')
ruckusZDAAARadiusPrimarySvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusPrimarySvrPort.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusPrimarySvrPort.setDescription('The port number choosen for this RADIUS Server. for auth : the value should be : 1812; for account : the value should be : 1813.')
ruckusZDAAARadiusPrimarySvrPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusPrimarySvrPasswd.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusPrimarySvrPasswd.setDescription('The Password entered for this RADIUS Server.')
ruckusZDAAARadiusSecondarySvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusSecondarySvrIpAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusSecondarySvrIpAddress.setDescription('The IP(V4 or V6) Address choosen for the backup RADIUS Server.')
ruckusZDAAARadiusSecondarySvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusSecondarySvrPort.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusSecondarySvrPort.setDescription('The port number choosen for the backup RADIUS Server. for auth : the value should be : 1812; for account : the value should be : 1813.')
ruckusZDAAARadiusSecondarySvrPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusSecondarySvrPasswd.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusSecondarySvrPasswd.setDescription('The Password entered for the backup RADIUS Server.')
ruckusZDAAARadiusFailoverTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusFailoverTimeout.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusFailoverTimeout.setDescription('The timeout in seconds configured for RADIUS Server Failover for the Server.')
ruckusZDAAARadiusFailoverRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusFailoverRetry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusFailoverRetry.setDescription('The number of reconnect retry configured for RADIUS Server Failover for the Server.')
ruckusZDAAARadiusFailoverReconnectPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 3, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDAAARadiusFailoverReconnectPrimary.setStatus('current')
if mibBuilder.loadTexts: ruckusZDAAARadiusFailoverReconnectPrimary.setDescription('The number of seconds configured for RADIUS Server to reconnect to the Primary Server for the Server.')
mibBuilder.exportSymbols("RUCKUS-ZD-AAA-MIB", ruckusZDAAARadiusFailoverTimeout=ruckusZDAAARadiusFailoverTimeout, ruckusZDAAARadiusBackupControl=ruckusZDAAARadiusBackupControl, ruckusZDAAAConfigTable=ruckusZDAAAConfigTable, ruckusZDAAARadiusPrimarySvrIpAddress=ruckusZDAAARadiusPrimarySvrIpAddress, ruckusZDAAARadiusSecondarySvrPasswd=ruckusZDAAARadiusSecondarySvrPasswd, ruckusZDAAAConfigEntry=ruckusZDAAAConfigEntry, ruckusZDAAARadiusFailoverReconnectPrimary=ruckusZDAAARadiusFailoverReconnectPrimary, PYSNMP_MODULE_ID=ruckusZDAAAMIB, ruckusZDAAASvrTable=ruckusZDAAASvrTable, ruckusZDAAAConfigServiceType=ruckusZDAAAConfigServiceType, ruckusZDAAARadiusSecondarySvrIpAddress=ruckusZDAAARadiusSecondarySvrIpAddress, ruckusZDAAARadiusSecondarySvrPort=ruckusZDAAARadiusSecondarySvrPort, ruckusZDAAARadiusPrimarySvrPasswd=ruckusZDAAARadiusPrimarySvrPasswd, ruckusZDAAAConfigRowStatus=ruckusZDAAAConfigRowStatus, ruckusZDAAAObjects=ruckusZDAAAObjects, ruckusZDAAAMIB=ruckusZDAAAMIB, ruckusZDAAARadiusPrimarySvrPort=ruckusZDAAARadiusPrimarySvrPort, ruckusZDAAAConfigName=ruckusZDAAAConfigName, ruckusZDAAAConfigID=ruckusZDAAAConfigID, ruckusZDAAARadiusFailoverRetry=ruckusZDAAARadiusFailoverRetry, ruckusZDAAASvrEntry=ruckusZDAAASvrEntry, ruckusZDAAAConfig=ruckusZDAAAConfig)
