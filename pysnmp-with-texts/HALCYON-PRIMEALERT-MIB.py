#
# PySNMP MIB module HALCYON-PRIMEALERT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HALCYON-PRIMEALERT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:24:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, ModuleIdentity, Counter32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, IpAddress, Integer32, NotificationType, Counter64, ObjectIdentity, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "ModuleIdentity", "Counter32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "IpAddress", "Integer32", "NotificationType", "Counter64", "ObjectIdentity", "MibIdentifier", "Gauge32")
TextualConvention, TAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TAddress", "DisplayString")
primealert = ModuleIdentity((1, 3, 6, 1, 4, 1, 1242, 1))
if mibBuilder.loadTexts: primealert.setLastUpdated('0211191502Z')
if mibBuilder.loadTexts: primealert.setOrganization('Halcyon Monitoring Solutions Inc.')
if mibBuilder.loadTexts: primealert.setContactInfo(' Halcyon Customer Support Postal: 2300 Yonge Street Suite 1900, Box 2419 Toronto, ON M4P 1E4 CANADA Phone: (416) 932-4647 Fax: (416) 932-4711 Email: info@HalcyonInc.com')
if mibBuilder.loadTexts: primealert.setDescription('The core Halcyon PrimeAlert v6 MIB')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1242, 1, 0))
base = MibIdentifier((1, 3, 6, 1, 4, 1, 1242, 1, 1))
trapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3))
eventOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 9)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventOpenTrap.setStatus('current')
if mibBuilder.loadTexts: eventOpenTrap.setDescription('An open event is sent whenever an alarm condition opens on an agent.')
eventCloseTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 10)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventCloseTrap.setStatus('current')
if mibBuilder.loadTexts: eventCloseTrap.setDescription('A close event is sent whenever an alarm condition closes on an agent.')
eventLogTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 11)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventLogTrap.setStatus('current')
if mibBuilder.loadTexts: eventLogTrap.setDescription('A log event is sent whenever an alarm condition is detected on an agent and it is considered closed instantaneously (e.g. when fault conditions are reported through logging of a message, but the application logs no corresponding return-to-normal message, such faults are flagged by a log event)')
eventColdstartTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 12)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventColdstartTrap.setStatus('current')
if mibBuilder.loadTexts: eventColdstartTrap.setDescription('A coldstart trap is sent whenever an agent starts up.')
eventAcknowledgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 13)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventAcknowledgeTrap.setStatus('current')
if mibBuilder.loadTexts: eventAcknowledgeTrap.setDescription('An acknowledge trap is sent whenever an event is acknowledged at the agent.')
eventUnAcknowledgeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 14)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventUnAcknowledgeTrap.setStatus('current')
if mibBuilder.loadTexts: eventUnAcknowledgeTrap.setDescription('An unacknowledge trap is sent whenever an event is unacknowledged at the agent.')
eventModuleUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 1242, 1, 0, 15)).setObjects(("HALCYON-PRIMEALERT-MIB", "eventHost"), ("HALCYON-PRIMEALERT-MIB", "eventPort"), ("HALCYON-PRIMEALERT-MIB", "eventModule"), ("HALCYON-PRIMEALERT-MIB", "eventContext"), ("HALCYON-PRIMEALERT-MIB", "eventSeverity"), ("HALCYON-PRIMEALERT-MIB", "eventMessage"), ("HALCYON-PRIMEALERT-MIB", "eventUrl"), ("HALCYON-PRIMEALERT-MIB", "eventOpenTime"), ("HALCYON-PRIMEALERT-MIB", "eventCloseTime"))
if mibBuilder.loadTexts: eventModuleUnavailableTrap.setStatus('current')
if mibBuilder.loadTexts: eventModuleUnavailableTrap.setDescription('A module unavailable trap is sent whenever a module becomes unavailable (for example, if it is unloaded) and all open events for that module should be considered closed.')
eventHost = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventHost.setStatus('current')
if mibBuilder.loadTexts: eventHost.setDescription('The hostname of the agent on which the event occurred. This occurs as the first trap-specific varbind of an event trap.')
eventPort = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventPort.setStatus('current')
if mibBuilder.loadTexts: eventPort.setDescription('The SNMP port of the agent on which the event occurred. This occurs as the second trap-specific varbind of an event trap.')
eventModule = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventModule.setStatus('current')
if mibBuilder.loadTexts: eventModule.setDescription('The identifier of the Primealert module in which the event occurred. This occurs as the third trap-specific varbind of an event trap.')
eventContext = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventContext.setStatus('current')
if mibBuilder.loadTexts: eventContext.setDescription('The SNMP context of the Primealert module in which the event occurred, for modules which can be loaded multiple times in one agent. For modules which can only be loaded once, this is empty. This occurs as the fourth trap-specific varbind of an event trap.')
eventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSeverity.setStatus('current')
if mibBuilder.loadTexts: eventSeverity.setDescription("A human-readable string representing the severity of the event in question, such as 'Critical'. This occurs as the fifth trap-specific varbind of an event trap.")
eventMessage = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventMessage.setStatus('current')
if mibBuilder.loadTexts: eventMessage.setDescription('A human-readable string describing the event. This occurs as the sixth trap-specific varbind of an event trap.')
eventUrl = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventUrl.setStatus('current')
if mibBuilder.loadTexts: eventUrl.setDescription('A url-formatted string representing the MIB location at which the event occurred. It can be used to associate a close event with its corresponding open event. This occurs as the seventh trap-specific varbind of an event trap.')
eventOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventOpenTime.setStatus('current')
if mibBuilder.loadTexts: eventOpenTime.setDescription('A human-readable string containing the time that the event was opened. Example: Aug 08, 2002 15:34:27.000 GMT. This occurs as the eighth trap-specific varbind of an event trap')
eventCloseTime = MibScalar((1, 3, 6, 1, 4, 1, 1242, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventCloseTime.setStatus('current')
if mibBuilder.loadTexts: eventCloseTime.setDescription('A human-readable string containing the time that the event was closed (if applicable). Example: Aug 08, 2002 15:34:27 .000 GMT. This occurs as the ninth trap-specific varbind of an event trap')
mibBuilder.exportSymbols("HALCYON-PRIMEALERT-MIB", eventUrl=eventUrl, eventModule=eventModule, eventOpenTrap=eventOpenTrap, eventUnAcknowledgeTrap=eventUnAcknowledgeTrap, PYSNMP_MODULE_ID=primealert, base=base, eventColdstartTrap=eventColdstartTrap, eventHost=eventHost, eventSeverity=eventSeverity, eventLogTrap=eventLogTrap, eventCloseTime=eventCloseTime, eventCloseTrap=eventCloseTrap, eventMessage=eventMessage, eventContext=eventContext, eventPort=eventPort, primealert=primealert, traps=traps, eventAcknowledgeTrap=eventAcknowledgeTrap, eventOpenTime=eventOpenTime, trapInfo=trapInfo, eventModuleUnavailableTrap=eventModuleUnavailableTrap)
