#
# PySNMP MIB module ASCEND-MIBVRTR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBVRTR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ObjectIdentity, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ModuleIdentity, Bits, NotificationType, Unsigned32, Counter64, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ModuleIdentity", "Bits", "NotificationType", "Unsigned32", "Counter64", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibvRouterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 139))
mibvRouterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 139, 1), )
if mibBuilder.loadTexts: mibvRouterProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfileTable.setDescription('A list of mibvRouterProfile profile entries.')
mibvRouterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1), ).setIndexNames((0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-Name"))
if mibBuilder.loadTexts: mibvRouterProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfileEntry.setDescription('A mibvRouterProfile entry containing objects that maps to the parameters of mibvRouterProfile profile.')
vRouterProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 1), DisplayString()).setLabel("vRouterProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_Name.setDescription('The name of a VRouter.')
vRouterProfile_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("vRouterProfile-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_Active.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_Active.setDescription('Whether the VROUTER is active or not')
vRouterProfile_VrouterIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 3), IpAddress()).setLabel("vRouterProfile-VrouterIpAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_VrouterIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_VrouterIpAddr.setDescription('System ip address for a VRouter.')
vRouterProfile_PoolSummary = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("vRouterProfile-PoolSummary").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_PoolSummary.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolSummary.setDescription('Flag, when set indicates that host addresses assigned from the pool should be marked as PRIVATE in the routing table and summarized to the world at large via a (constant) network advertisement for the whole pool.')
vRouterProfile_ShareGlobalPool = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("vRouterProfile-ShareGlobalPool").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_ShareGlobalPool.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_ShareGlobalPool.setDescription('Flag, when set indicates that vrouter can share the address pools defined for in IP-GLOBAL profile.')
vRouterProfile_RipPolicy = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("splitHorzn", 1), ("poisonRvrs", 2)))).setLabel("vRouterProfile-RipPolicy").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_RipPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_RipPolicy.setDescription('Describes whether to use Poison reverse or Split Horizon policy. Global for the vrouter.')
vRouterProfile_SummarizeRipRoutes = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("vRouterProfile-SummarizeRipRoutes").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_SummarizeRipRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_SummarizeRipRoutes.setDescription('Summarize subnets in RIP broadcasts per RFC 1058/RFC 1009.')
vRouterProfile_RipTrigger = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("vRouterProfile-RipTrigger").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_RipTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_RipTrigger.setDescription('When set to TRUE (its default value) it causes RIP to send triggered (incremental) updates. Otherwise full table updates are sent when a change in the routing table is noticed.')
vRouterProfile_DomainName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 8), DisplayString()).setLabel("vRouterProfile-DomainName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_DomainName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_DomainName.setDescription('The DNS domain name assigned to this vrouter.')
vRouterProfile_SecDomainName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 9), DisplayString()).setLabel("vRouterProfile-SecDomainName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_SecDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_SecDomainName.setDescription('The secondary DNS domain name assigned to this vrouter.')
vRouterProfile_DnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 10), IpAddress()).setLabel("vRouterProfile-DnsPrimaryServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_DnsPrimaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_DnsPrimaryServer.setDescription('The IP address of the primary DNS server for this vRouter.')
vRouterProfile_DnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 11), IpAddress()).setLabel("vRouterProfile-DnsSecondaryServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_DnsSecondaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_DnsSecondaryServer.setDescription('The IP address of the secondary DNS server for this vRouter. This server is used when the primary is not available.')
vRouterProfile_ClientPrimaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 12), IpAddress()).setLabel("vRouterProfile-ClientPrimaryDnsServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_ClientPrimaryDnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_ClientPrimaryDnsServer.setDescription('Default user IP address of the primary DNS server.')
vRouterProfile_ClientSecondaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 13), IpAddress()).setLabel("vRouterProfile-ClientSecondaryDnsServer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_ClientSecondaryDnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_ClientSecondaryDnsServer.setDescription('Default user IP address of the secondary DNS server. This server is used when the primary is not available.')
vRouterProfile_AllowAsClientDnsInfo = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setLabel("vRouterProfile-AllowAsClientDnsInfo").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_AllowAsClientDnsInfo.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_AllowAsClientDnsInfo.setDescription('This flag controls if main DNS info should be allowed as Client DNS info.')
vRouterProfile_IpxRoutingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("vRouterProfile-IpxRoutingEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_IpxRoutingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_IpxRoutingEnabled.setDescription("TRUE if this vRouter is currently routing IPX. We don't do IPX routing protocols or packet forwarding if FALSE.")
vRouterProfile_IpxDialinPool = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 16), DisplayString()).setLabel("vRouterProfile-IpxDialinPool").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_IpxDialinPool.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_IpxDialinPool.setDescription('Dialin Pool Numbers to be shared by the ipx wan interfaces')
vRouterProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("vRouterProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_Action_o.setDescription('')
mibvRouterProfile_PoolNameTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 139, 2), ).setLabel("mibvRouterProfile-PoolNameTable")
if mibBuilder.loadTexts: mibvRouterProfile_PoolNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfile_PoolNameTable.setDescription('A list of mibvRouterProfile__pool_name profile entries.')
mibvRouterProfile_PoolNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 139, 2, 1), ).setLabel("mibvRouterProfile-PoolNameEntry").setIndexNames((0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-PoolName-Name"), (0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-PoolName-Index-o"))
if mibBuilder.loadTexts: mibvRouterProfile_PoolNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfile_PoolNameEntry.setDescription('A mibvRouterProfile__pool_name entry containing objects that maps to the parameters of mibvRouterProfile__pool_name profile.')
vRouterProfile_PoolName_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 2, 1, 1), DisplayString()).setLabel("vRouterProfile-PoolName-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_PoolName_Name.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolName_Name.setDescription('')
vRouterProfile_PoolName_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 2, 1, 2), Integer32()).setLabel("vRouterProfile-PoolName-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_PoolName_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolName_Index_o.setDescription('')
vRouterProfile_PoolName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 2, 1, 3), DisplayString()).setLabel("vRouterProfile-PoolName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_PoolName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolName.setDescription('The name of this pool')
mibvRouterProfile_AssignCountTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 139, 3), ).setLabel("mibvRouterProfile-AssignCountTable")
if mibBuilder.loadTexts: mibvRouterProfile_AssignCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfile_AssignCountTable.setDescription('A list of mibvRouterProfile__assign_count profile entries.')
mibvRouterProfile_AssignCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 139, 3, 1), ).setLabel("mibvRouterProfile-AssignCountEntry").setIndexNames((0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-AssignCount-Name"), (0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-AssignCount-Index-o"))
if mibBuilder.loadTexts: mibvRouterProfile_AssignCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfile_AssignCountEntry.setDescription('A mibvRouterProfile__assign_count entry containing objects that maps to the parameters of mibvRouterProfile__assign_count profile.')
vRouterProfile_AssignCount_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 3, 1, 1), DisplayString()).setLabel("vRouterProfile-AssignCount-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_AssignCount_Name.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_AssignCount_Name.setDescription('')
vRouterProfile_AssignCount_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 3, 1, 2), Integer32()).setLabel("vRouterProfile-AssignCount-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_AssignCount_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_AssignCount_Index_o.setDescription('')
vRouterProfile_AssignCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 3, 1, 3), Integer32()).setLabel("vRouterProfile-AssignCount").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_AssignCount.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_AssignCount.setDescription('The number of host addresses in the above pool. The addresses are contiguous.')
mibvRouterProfile_PoolBaseAddressTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 139, 4), ).setLabel("mibvRouterProfile-PoolBaseAddressTable")
if mibBuilder.loadTexts: mibvRouterProfile_PoolBaseAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfile_PoolBaseAddressTable.setDescription('A list of mibvRouterProfile__pool_base_address profile entries.')
mibvRouterProfile_PoolBaseAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 139, 4, 1), ).setLabel("mibvRouterProfile-PoolBaseAddressEntry").setIndexNames((0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-PoolBaseAddress-Name"), (0, "ASCEND-MIBVRTR-MIB", "vRouterProfile-PoolBaseAddress-Index-o"))
if mibBuilder.loadTexts: mibvRouterProfile_PoolBaseAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibvRouterProfile_PoolBaseAddressEntry.setDescription('A mibvRouterProfile__pool_base_address entry containing objects that maps to the parameters of mibvRouterProfile__pool_base_address profile.')
vRouterProfile_PoolBaseAddress_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 4, 1, 1), DisplayString()).setLabel("vRouterProfile-PoolBaseAddress-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_PoolBaseAddress_Name.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolBaseAddress_Name.setDescription('')
vRouterProfile_PoolBaseAddress_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 4, 1, 2), Integer32()).setLabel("vRouterProfile-PoolBaseAddress-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterProfile_PoolBaseAddress_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolBaseAddress_Index_o.setDescription('')
vRouterProfile_PoolBaseAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 139, 4, 1, 3), IpAddress()).setLabel("vRouterProfile-PoolBaseAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouterProfile_PoolBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vRouterProfile_PoolBaseAddress.setDescription('The base address of a pool of addresses we can use to assign to clients.')
mibBuilder.exportSymbols("ASCEND-MIBVRTR-MIB", vRouterProfile_PoolName_Index_o=vRouterProfile_PoolName_Index_o, vRouterProfile_RipTrigger=vRouterProfile_RipTrigger, mibvRouterProfile_AssignCountTable=mibvRouterProfile_AssignCountTable, vRouterProfile_PoolBaseAddress_Name=vRouterProfile_PoolBaseAddress_Name, mibvRouterProfile_PoolNameTable=mibvRouterProfile_PoolNameTable, vRouterProfile_AssignCount=vRouterProfile_AssignCount, vRouterProfile_SummarizeRipRoutes=vRouterProfile_SummarizeRipRoutes, mibvRouterProfileEntry=mibvRouterProfileEntry, vRouterProfile_IpxDialinPool=vRouterProfile_IpxDialinPool, vRouterProfile_Action_o=vRouterProfile_Action_o, vRouterProfile_SecDomainName=vRouterProfile_SecDomainName, mibvRouterProfile_PoolBaseAddressTable=mibvRouterProfile_PoolBaseAddressTable, vRouterProfile_PoolSummary=vRouterProfile_PoolSummary, vRouterProfile_PoolName=vRouterProfile_PoolName, vRouterProfile_AssignCount_Name=vRouterProfile_AssignCount_Name, vRouterProfile_PoolBaseAddress_Index_o=vRouterProfile_PoolBaseAddress_Index_o, mibvRouterProfile_PoolNameEntry=mibvRouterProfile_PoolNameEntry, mibvRouterProfile_AssignCountEntry=mibvRouterProfile_AssignCountEntry, vRouterProfile_Active=vRouterProfile_Active, vRouterProfile_DnsSecondaryServer=vRouterProfile_DnsSecondaryServer, vRouterProfile_PoolName_Name=vRouterProfile_PoolName_Name, mibvRouterProfileTable=mibvRouterProfileTable, vRouterProfile_PoolBaseAddress=vRouterProfile_PoolBaseAddress, vRouterProfile_DnsPrimaryServer=vRouterProfile_DnsPrimaryServer, vRouterProfile_ShareGlobalPool=vRouterProfile_ShareGlobalPool, vRouterProfile_DomainName=vRouterProfile_DomainName, vRouterProfile_IpxRoutingEnabled=vRouterProfile_IpxRoutingEnabled, vRouterProfile_AssignCount_Index_o=vRouterProfile_AssignCount_Index_o, vRouterProfile_ClientSecondaryDnsServer=vRouterProfile_ClientSecondaryDnsServer, mibvRouterProfile=mibvRouterProfile, mibvRouterProfile_PoolBaseAddressEntry=mibvRouterProfile_PoolBaseAddressEntry, vRouterProfile_RipPolicy=vRouterProfile_RipPolicy, vRouterProfile_AllowAsClientDnsInfo=vRouterProfile_AllowAsClientDnsInfo, vRouterProfile_Name=vRouterProfile_Name, vRouterProfile_ClientPrimaryDnsServer=vRouterProfile_ClientPrimaryDnsServer, DisplayString=DisplayString, vRouterProfile_VrouterIpAddr=vRouterProfile_VrouterIpAddr)
