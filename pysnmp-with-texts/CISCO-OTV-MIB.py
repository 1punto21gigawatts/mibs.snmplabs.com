#
# PySNMP MIB module CISCO-OTV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OTV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, Unsigned32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Gauge32, ObjectIdentity, NotificationType, Counter64, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Unsigned32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Gauge32", "ObjectIdentity", "NotificationType", "Counter64", "iso", "MibIdentifier")
TextualConvention, RowStatus, DisplayString, MacAddress, TruthValue, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "MacAddress", "TruthValue", "StorageType")
ciscoOtvMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 810))
ciscoOtvMIB.setRevisions(('2013-08-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoOtvMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoOtvMIB.setLastUpdated('201308050000Z')
if mibBuilder.loadTexts: ciscoOtvMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoOtvMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoOtvMIB.setDescription("This MIB module is for configuration & statistic query of Overlay Transport Virtualization (OTV) functionality on Cisco routers and switches. Overlay Transport Virtualization is a Cisco's innovative LAN extension technology. It is an IP-based functionality that provides Layer 2 extension capabilities over any transport infrastructure: Layer 2 based, Layer 3 based, IP switched, label switched, and so on. OTV provides an overlay that enables Layer 2 connectivity between separate Layer 2 domains while keeping these domains independent and preserving the fault- isolation, resiliency, and load-balancing benefits of an IP- based interconnection. OTV introduces the concept of MAC routing, which means a control plane protocol is used to exchange MAC reachability information between network devices providing LAN extension functionality. This is a significant shift from Layer 2 switching that traditionally leverages data plane learning, and it is justified by the need to limit flooding of Layer 2 traffic across the transport infrastructure. OTV also introduces the concept of dynamic encapsulation for Layer 2 flows that need to be sent to remote locations. Each Ethernet frame is individually encapsulated into an IP packet and delivered across the transport network. Finally, OTV provides a native built-in multi-homing capability with automatic detection, critical to increasing high availability of the overall solution. Two or more devices can be leveraged in each data center to provide LAN extension functionality without running the risk of creating an end-to-end loop that would jeopardize the overall stability of the design. The followings detail the OTV specific terminology: Edge Device The edge device performs OTV functions: it receives the Layer 2 traffic for all VLANs that need to be extended to remote locations and dynamically encapsulates the Ethernet frames into IP packets that are then sent across the transport infrastructure. Internal Interfaces To perform OTV functionality, the edge device must receive the Layer 2 traffic for all VLANs that need to be extended to remote locations. The Layer 2 interfaces, where the Layer 2 traffic is usually received, are named internal interfaces. Join Interface The Join interface is used to source the OTV encapsulated traffic and send it to the Layer 3 domain of the data center network. Overlay Interface The Overlay interface is a logical multi-access and multicast- capable interface that must be explicitly defined by the user and where the entire OTV configuration is applied. The following terms are used throughout this MIB: AED Authoritative Edge Device ARP Address Resolution Protocol DNS Domain Name System ISIS Intermediate System to Intermediate System Routing Protocol LSPDB Link State PDU Database OTV Overlay Transport Virtualization VLAN Virtual Local Area Network VPN Virtual Private Network")
ciscoOtvMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 0))
ciscoOtvMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1))
ciscoOtvMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 2))
cotvGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1))
cotvOverlayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2))
cotvAdjacencyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3))
cotvArpNdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4))
cotvRouteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5))
cotvSiteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1, 1))
cotvGlobalStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1, 2))
cotvSiteIdAdmin = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(6, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cotvSiteIdAdmin.setStatus('current')
if mibBuilder.loadTexts: cotvSiteIdAdmin.setDescription('This object specifies OTV site identifier for this device. The OTV site identifier could be either a four octets value or a six octets valid MAC address. If the OTV site identifier is not configured, this object will have four zero octets.')
cotvSiteIdOper = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvSiteIdOper.setStatus('current')
if mibBuilder.loadTexts: cotvSiteIdOper.setDescription('This object indicates OTV site identifier in use for this device. There is no operational OTV site identifier if the value of this object contains all zeros.')
cotvSiteVlan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cotvSiteVlan.setStatus('current')
if mibBuilder.loadTexts: cotvSiteVlan.setDescription('This object specifies the OTV site VLAN for this device.')
cotvSiteVlanState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvSiteVlanState.setStatus('current')
if mibBuilder.loadTexts: cotvSiteVlanState.setDescription("This object indicates the state of OTV site VLAN. 'up' - OTV site VLAN is up 'down' - OTV site VLAN is down")
cotvOverlayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1), )
if mibBuilder.loadTexts: cotvOverlayTable.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayTable.setDescription('A list of Overlay interfaces configured on this device.')
cotvOverlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvOverlayNumber"))
if mibBuilder.loadTexts: cotvOverlayEntry.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayEntry.setDescription('An entry containing management information for a particular Overlay interface.')
cotvOverlayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cotvOverlayNumber.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayNumber.setDescription('A unique number to identify an Overlay interface.')
cotvOverlayVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvOverlayVpnName.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayVpnName.setDescription('This object indicates the name of the Virtual Private Network associated with this Overlay interface.')
cotvOverlayVpnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvOverlayVpnState.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayVpnState.setDescription("This object indicates the state of Virtual Private Network which is associated with this Overlay interface. 'other' - Any other state not covered by below enumerations. 'up' - The Overlay Virtual Private Network is up 'down' - The Overlay Virtual Private Network is down")
cotvOverlayVpnDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("other", 0), ("configChange", 1), ("missingControlGroup", 2), ("missingDataGroupRange", 3), ("missingJoinOrSourceInterface", 4), ("missingVpnName", 5), ("missingJoinInterfaceAddr", 6), ("joinInterfaceDown", 7), ("adminDown", 8), ("deleteHoldDown", 9), ("reinit", 10), ("missingSiteId", 11), ("siteIdMismatch", 12), ("missingSourceInterfaceAddr", 13), ("sourceInterfaceDown", 14), ("changingSiteId", 15), ("changingControlGroup", 16), ("missingDeviceId", 17), ("changingDeviceId", 18), ("cleanupInProgress", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvOverlayVpnDownReason.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayVpnDownReason.setDescription("This object indicates the reason why this Overlay Virtual Private Network is down. 'other' - Any other reason not covered by below enumerations 'configChange' - Configuration changed 'missingControlGroup' - Control Group information is unavailable 'missingDataGroupRange' - Data Group range information is unavailable 'misssingJoinOrSourceInterface' - Join or Source interface information is unavailable 'missingVpnName' - VPN name is unavailable 'missingJoinInterfaceAddr' - IP address is missing for Join Interface 'joinInterfaceDown' - Join Interface is down 'adminDown' - Overlay is administratively shutdown 'deleteHoldDown' - Overlay is in delete hold down phase 'reinit' - VPN is reinitializing 'missingSiteId' - Site ID information is unavailable 'siteIdMismatch' - Site ID mismatch has occurred 'missingSourceInterfaceAddr' - IP address is missing for Source Interface 'sourceInterfaceDown' - Source interface is down 'changingSiteId' - Changing site identifier 'changingControlGroup' - Changing control group 'missingDeviceId' - Device ID information is unavailable 'changingDeviceId' - Changing device ID 'cleanupInProgress' - Cleanup in progress")
cotvOverlayVlansExtendedFirst2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 5), Cisco2KVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayVlansExtendedFirst2k.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayVlansExtendedFirst2k.setDescription('This object specifies the list of VLANs extended on this Overlay interface. It is a string of octets containing one bit per VLAN with VlanIndex values of 0 through 2047. If the bit corresponding to a VLAN is set to 1, it indicates that VLAN is being extended on this Overlay interface. If the bit corresponding to a VLAN is set to 0, it indicates that VLAN is not being extended on this Overlay interface.')
cotvOverlayVlansExtendedSecond2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 6), Cisco2KVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayVlansExtendedSecond2k.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayVlansExtendedSecond2k.setDescription('This object specifies the list of VLANs extended on this Overlay interface. It is a string of octets containing one bit per VLAN with VlanIndex values of 2048 through 4095. If the bit corresponding to a VLAN is set to 1, it indicates that VLAN is being extended on this Overlay interface. If the bit corresponding to a VLAN is set to 0, it indicates that VLAN is not being extended on this Overlay interface.')
cotvOverlayControlGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 7), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayControlGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayControlGroupAddrType.setDescription('This object specifies the type of Internet address of Control Group.')
cotvOverlayControlGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayControlGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayControlGroupAddr.setDescription('This object specifies the Internet address of Control Group. The type of this address is determined by cotvOverlayControlGroupAddrType.')
cotvOverlayBroadcastGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 9), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayBroadcastGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayBroadcastGroupAddrType.setDescription('This object specifies the type of Internet address to be used as Broadcast Group Address.')
cotvOverlayBroadcastGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 10), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayBroadcastGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayBroadcastGroupAddr.setDescription('This object specifies the Internet address to be used as Broadcast Group Address. The type of this address is determined by cotvOverlayBroadcastGroupAddrType.')
cotvOverlayJoinInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayJoinInterface.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayJoinInterface.setDescription('This object specifies the OTV Join Interface for this Overlay interface.')
cotvOverlaySourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlaySourceInterface.setStatus('current')
if mibBuilder.loadTexts: cotvOverlaySourceInterface.setDescription('This object specifies the Source Interface for this Overlay interface.')
cotvOverlayAedCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvOverlayAedCapable.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayAedCapable.setDescription("This object indicates AED (Authoritative Edge Device) capability on this Overlay interface. A value of 'true' indicates that the edge device has capability to act as an AED on this Overlay interface. A value of 'false' indicates that the edge device does not have the capability to act as an AED on this Overlay interface.")
cotvOverlayAedIncapableReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 0), ("overlayDown", 1), ("siteIdNotConfigured", 2), ("siteIdMismatch", 3), ("versionMismatch", 4), ("siteVlanDown", 5), ("noExtendedVlanUp", 6), ("noOverlayAdjacencyUp", 7), ("lspdbSyncIncomplete", 8), ("overlayDownInProgress", 9), ("isisControlGroupSyncPending", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvOverlayAedIncapableReason.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayAedIncapableReason.setDescription("This object indicates the reason why the overlay is AED-incapable. 'other' - Any other reason not covered by below enumerations 'overlayDown' - Overlay is Down 'siteIdNotConfigured' - Site ID is not configured 'siteIdMismatch' - Site ID mismatch 'versionMismatch' - Version mismatch 'siteVlanDown' - Site VLAN is Down 'noExtendedVlanUp' - No extended VLAN is operationally up 'noOverlayAdjacencyUp' - No Overlay Adjacency is up 'lspdbSyncIncomplete' - LSPDB sync incomplete 'overlayDownInProgress' - Overlay state down event in progress 'isisControlGroupSyncPending' - ISIS control group sync pending")
cotvOverlayAdjServerTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicastAndUnicast", 1), ("unicastOnly", 2))).clone('multicastAndUnicast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayAdjServerTransportType.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayAdjServerTransportType.setDescription("The type of transport OTV control plane can use to exchange Adjacency Server information. 'multicastAndUnicast' - OTV control plane can use both multicast and unicast to exchange Adjacency Server information 'unicastOnly' - OTV control plane can use only unicast to exchange Adjacency Server information. Value of this object can be set to 'unicastOnly' only if the value of cotvOverlayPrimaryAdjServerAddrType is 'unknown'.")
cotvOverlayAdjServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayAdjServerEnable.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayAdjServerEnable.setDescription("This object specifies Adjacency Server functionality for this Overlay interface. Setting the object to 'true' enables Adjacency Server functionality. Setting the object to 'false' disables Adjacency Server functionality.")
cotvOverlayPrimaryAdjServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 17), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayPrimaryAdjServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayPrimaryAdjServerAddrType.setDescription('This object specifies the type of Internet address of the Primary Adjacency Server for this Overlay interface.')
cotvOverlayPrimaryAdjServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 18), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayPrimaryAdjServerAddr.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayPrimaryAdjServerAddr.setDescription('This object specifies the Internet address of the Primary Adjacency Server for this Overlay interface. The type of this address is determined by the value of cotvOverlayPrimaryAdjServerAddrType.')
cotvOverlaySecondaryAdjServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 19), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlaySecondaryAdjServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvOverlaySecondaryAdjServerAddrType.setDescription('This object specifies the type of Internet address of the Secondary Adjacency Server for this Overlay interface.')
cotvOverlaySecondaryAdjServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 20), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlaySecondaryAdjServerAddr.setStatus('current')
if mibBuilder.loadTexts: cotvOverlaySecondaryAdjServerAddr.setDescription('This object specifies the Internet address of the Secondary Adjacency Server for this Overlay interface. The type of this address is determined by cotvOverlaySecondaryAdjServerAddrType.')
cotvOverlaySuppressArpND = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlaySuppressArpND.setStatus('current')
if mibBuilder.loadTexts: cotvOverlaySuppressArpND.setDescription("This object specifies ARP Neighbor Discovery behavior on this Overlay interface. Setting the object to 'true' enables suppression of ARP Neighbor Discovery on this Overlay interface. Setting the object to 'false' disables suppression of ARP Neighbor Discovery on this Overlay interface.")
cotvOverlayStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 22), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayStorageType.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cotvOverlayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvOverlayRowStatus.setStatus('current')
if mibBuilder.loadTexts: cotvOverlayRowStatus.setDescription('This object specifies the status of this conceptual row.')
cotvVlansTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2), )
if mibBuilder.loadTexts: cotvVlansTable.setStatus('current')
if mibBuilder.loadTexts: cotvVlansTable.setDescription('A list of VLANs extended on Overlay interfaces.')
cotvVlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvOverlayNumber"), (0, "CISCO-OTV-MIB", "cotvVlanId"))
if mibBuilder.loadTexts: cotvVlansEntry.setStatus('current')
if mibBuilder.loadTexts: cotvVlansEntry.setDescription('An entry containing management information for a particular VLAN extended on an Overlay interface.')
cotvVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cotvVlanId.setStatus('current')
if mibBuilder.loadTexts: cotvVlanId.setDescription('This object indicates the VLAN ID of the extended VLAN.')
cotvVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvVlanState.setStatus('current')
if mibBuilder.loadTexts: cotvVlanState.setDescription("This object indicates the state of the extended VLAN. 'active' - OTV is ready to forward traffic for this VLAN 'inactive' - OTV can not forward traffic for this VLAN")
cotvVlanInactiveReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("nonAed", 2), ("vlanDisabled", 3), ("overlayDown", 4), ("deleteHoldDown", 5), ("hwDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvVlanInactiveReason.setStatus('current')
if mibBuilder.loadTexts: cotvVlanInactiveReason.setDescription("This object indicates the reason the VLAN is in 'inactive' state. 'other' - Any other reason not covered by the below enumerations 'nonAed' - Device is not an AED on this VLAN 'vlanDisabled' - Vlan is in disabled state 'overlayDown' - Overlay is currently down 'deleteHoldDown' - The VLAN is in delete hold-down state 'hwDown' - An issue with hardware is preventing VLAN from becoming 'active' Value of this object should be ignored if the value of cotvVlanInactiveReason is not 'inactive'.")
cotvVlanAedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvVlanAedAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvVlanAedAddrType.setDescription('This object indicates the type of Internet address of Authoritative Edge Device (AED) on this VLAN.')
cotvVlanAedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvVlanAedAddr.setStatus('current')
if mibBuilder.loadTexts: cotvVlanAedAddr.setDescription('This object indicates the Internet address of Authoritative Edge Device (AED) on this VLAN. The type of this address is determined by the value of cotvVlanAedAddrType.')
cotvVlanEdgeDevIsAed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvVlanEdgeDevIsAed.setStatus('current')
if mibBuilder.loadTexts: cotvVlanEdgeDevIsAed.setDescription("This object indicates if this device is acting as an AED for the VLAN. A value of 'true' indicates that this device is acting as an AED for the VLAN. A value of 'false' indicates that this device is not acting as an AED for the VLAN.")
cotvDataGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3), )
if mibBuilder.loadTexts: cotvDataGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupConfigTable.setDescription('A list of multicast data-group ranges configured for each Overlay interface.')
cotvDataGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvOverlayNumber"), (0, "CISCO-OTV-MIB", "cotvDataGroupMcastRangeAddrType"), (0, "CISCO-OTV-MIB", "cotvDataGroupMcastRangeAddr"), (0, "CISCO-OTV-MIB", "cotvDataGroupMcastRangePrefixLength"))
if mibBuilder.loadTexts: cotvDataGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupConfigEntry.setDescription('An entry containing management information for a particular multicast data-group range configured for an Overlay interface.')
cotvDataGroupMcastRangeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cotvDataGroupMcastRangeAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupMcastRangeAddrType.setDescription('The type of Internet address of multicast data-group range.')
cotvDataGroupMcastRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvDataGroupMcastRangeAddr.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupMcastRangeAddr.setDescription('The Internet address of multicast data-group range. The type of this address is determined by the value of the cotvDataGroupMcastRangeAddrType object.')
cotvDataGroupMcastRangePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cotvDataGroupMcastRangePrefixLength.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupMcastRangePrefixLength.setDescription('The length of the prefix associated with cotvDataGroupMcastRangeAddr. The type of this address prefix is determined by the value of the cotvDataGroupMcastRangeAddrType object.')
cotvDataGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvDataGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cotvDataGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cotvDataGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupRowStatus.setDescription('This object specifies the status of this conceptual row.')
cotvDataGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4), )
if mibBuilder.loadTexts: cotvDataGroupInfoTable.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupInfoTable.setDescription('A table listing management information for active multicast sources and multicast groups on each Overlay interface.')
cotvDataGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvOverlayNumber"), (0, "CISCO-OTV-MIB", "cotvDataGroupActiveSrcLocation"), (0, "CISCO-OTV-MIB", "cotvDataGroupVlanId"), (0, "CISCO-OTV-MIB", "cotvDataGroupActiveGroupAddrType"), (0, "CISCO-OTV-MIB", "cotvDataGroupActiveGroupAddr"), (0, "CISCO-OTV-MIB", "cotvDataGroupActiveSrcAddrType"), (0, "CISCO-OTV-MIB", "cotvDataGroupActiveSrcAddr"), (0, "CISCO-OTV-MIB", "cotvDataGroupDeliveryGroupAddrType"), (0, "CISCO-OTV-MIB", "cotvDataGroupDeliveryGroupAddr"), (0, "CISCO-OTV-MIB", "cotvDataGroupDeliverySrcAddrType"), (0, "CISCO-OTV-MIB", "cotvDataGroupDeliverySrcAddr"))
if mibBuilder.loadTexts: cotvDataGroupInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupInfoEntry.setDescription('An entry containing management information for an active multicast data-group.')
cotvDataGroupActiveSrcLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: cotvDataGroupActiveSrcLocation.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupActiveSrcLocation.setDescription('The location of Active Multicast source.')
cotvDataGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 2), VlanIndex())
if mibBuilder.loadTexts: cotvDataGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupVlanId.setDescription('The VLAN associated with Active Multicast data-group.')
cotvDataGroupActiveGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cotvDataGroupActiveGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupActiveGroupAddrType.setDescription('The type of Internet address of the active multicast group (multicast group of the active multicast source).')
cotvDataGroupActiveGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvDataGroupActiveGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupActiveGroupAddr.setDescription('The Internet address of the active multicast group of the (multicast group of the active multicast source). The type of this address is determined by the value of cotvDataGroupActiveGroupAddrType.')
cotvDataGroupActiveSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 5), InetAddressType())
if mibBuilder.loadTexts: cotvDataGroupActiveSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupActiveSrcAddrType.setDescription('The type of Internet address of active multicast source.')
cotvDataGroupActiveSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvDataGroupActiveSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupActiveSrcAddr.setDescription('The Internet address of active multicast source. The type of this address is determined by the value of cotvDataGroupActiveSrcAddrType.')
cotvDataGroupDeliveryGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 7), InetAddressType())
if mibBuilder.loadTexts: cotvDataGroupDeliveryGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupDeliveryGroupAddrType.setDescription('The type of Internet address of the delivery group that is mapped to active multicast group.')
cotvDataGroupDeliveryGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvDataGroupDeliveryGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupDeliveryGroupAddr.setDescription('The Internet address of delivery group that is mapped to active multicast group. The type of this address is determined by cotvDataGroupDeliveryGroupAddrType.')
cotvDataGroupDeliverySrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 9), InetAddressType())
if mibBuilder.loadTexts: cotvDataGroupDeliverySrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupDeliverySrcAddrType.setDescription('The type of Internet address of the delivery source that is mapped to the active multicast source.')
cotvDataGroupDeliverySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 10), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvDataGroupDeliverySrcAddr.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupDeliverySrcAddr.setDescription('The Internet address of the delivery source that is mapped to the active multicast source. The type of this address is determined by the value of cotvDataGroupDeliverySrcAddrType.')
cotvDataGroupJoinInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvDataGroupJoinInterface.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupJoinInterface.setDescription('This object indicates the OTV Join interface on which active multicast source is located.')
cotvDataGroupLocalActiveSrcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("orphan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvDataGroupLocalActiveSrcState.setStatus('current')
if mibBuilder.loadTexts: cotvDataGroupLocalActiveSrcState.setDescription("This object indicates the state of the local Active Multicast source. 'none' - State of the multicast source is not applicable 'local' - multicast source state is local 'remote' - multicast source state is remote 'orphan' - multicast source state is orphan Value of this object should be 'none' if cotvDataGroupActiveSrcLocation is 'remote'.")
cotvAdjacencyDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1), )
if mibBuilder.loadTexts: cotvAdjacencyDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacencyDatabaseTable.setDescription('A table containing OTV adjacency database information.')
cotvAdjacencyDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvOverlayNumber"), (0, "CISCO-OTV-MIB", "cotvAdjacentDevAddrType"), (0, "CISCO-OTV-MIB", "cotvAdjacentDevAddr"))
if mibBuilder.loadTexts: cotvAdjacencyDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacencyDatabaseEntry.setDescription('An entry containing management information about a particular OTV adjacency.')
cotvAdjacentDevAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cotvAdjacentDevAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacentDevAddrType.setDescription('The type of Internet address of adjacent edge device.')
cotvAdjacentDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cotvAdjacentDevAddr.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacentDevAddr.setDescription('The Internet address of adjacent edge device. The type of this address is determined by the value of cotvAdjacentDevAddrType.')
cotvAdjacentDevSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvAdjacentDevSystemID.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacentDevSystemID.setDescription('This object indicates the system identifier of the adjacent edge device. The value of this object contains zero length octet, if the system identifier of the adjacent edge devices is not available.')
cotvAdjacentDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvAdjacentDevName.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacentDevName.setDescription('This object indicates the DNS name of the adjacent edge device.')
cotvAdjacentDevState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvAdjacentDevState.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacentDevState.setDescription("This object indicates the state of adjacent edge device. 'other' - Any other state not covered by below enumeration. 'up' - The adjacent device is up 'down' - The adjacent device is down.")
cotvAdjacentDevUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 3, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvAdjacentDevUpTime.setStatus('current')
if mibBuilder.loadTexts: cotvAdjacentDevUpTime.setDescription('This object indicates the amount of time for which the adjacent device has been up.')
cotvArpNdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1), )
if mibBuilder.loadTexts: cotvArpNdCacheTable.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheTable.setDescription('A table containing ARP Neighbor Discovery cache information.')
cotvArpNdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvOverlayNumber"), (0, "CISCO-OTV-MIB", "cotvVlanId"), (0, "CISCO-OTV-MIB", "cotvArpNdCacheL3AddrType"), (0, "CISCO-OTV-MIB", "cotvArpNdCacheL3Addr"))
if mibBuilder.loadTexts: cotvArpNdCacheEntry.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheEntry.setDescription('An entry containing management information about a particular entry in ARP Neighbor Discovery cache.')
cotvArpNdCacheL3AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cotvArpNdCacheL3AddrType.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheL3AddrType.setDescription('The type of Internet address (IPv4/IPv6 address) of host discovered using ARP Neighbor discovery.')
cotvArpNdCacheL3Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: cotvArpNdCacheL3Addr.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheL3Addr.setDescription('The Internet address (IPv4/IPv6 address) of the host discovered using ARP Neighbor discovery. The type of this address is determined by the value of cotvArpNdCacheL3AddrType.')
cotvArpNdCacheMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvArpNdCacheMacAddr.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheMacAddr.setDescription('This object indicates the MAC address discovered using ARP Neighbor discovery and cached in this table.')
cotvArpNdCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvArpNdCacheAge.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheAge.setDescription('This object indicates the amount of time for which this entry has existed on the system.')
cotvArpNdCacheTimeToExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 4, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvArpNdCacheTimeToExpire.setStatus('current')
if mibBuilder.loadTexts: cotvArpNdCacheTimeToExpire.setDescription('This object indicates the amount of time left for this cache entry to be expired.')
cotvRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1), )
if mibBuilder.loadTexts: cotvRouteTable.setStatus('current')
if mibBuilder.loadTexts: cotvRouteTable.setDescription('A table listing route (unicast) information in OTV Routing Information Base (ORIB).')
cotvRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvRouteVlanId"), (0, "CISCO-OTV-MIB", "cotvRouteMacAddr"))
if mibBuilder.loadTexts: cotvRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cotvRouteEntry.setDescription('An entry containing management information about a particular route (unicast) in ORIB.')
cotvRouteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cotvRouteVlanId.setStatus('current')
if mibBuilder.loadTexts: cotvRouteVlanId.setDescription('The object indicates VLAN associated with this route.')
cotvRouteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: cotvRouteMacAddr.setStatus('current')
if mibBuilder.loadTexts: cotvRouteMacAddr.setDescription('This object indicates the MAC address to be routed.')
cotvRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvRouteMetric.setStatus('current')
if mibBuilder.loadTexts: cotvRouteMetric.setDescription('This object indicates the metric associated with this route.')
cotvRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvRouteUpTime.setStatus('current')
if mibBuilder.loadTexts: cotvRouteUpTime.setDescription('This object indicates the amount of time elapsed since the MAC route entry was installed in this table.')
cotvRouteOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvRouteOwner.setStatus('current')
if mibBuilder.loadTexts: cotvRouteOwner.setDescription('This object indicates the type of owner (source) from where the MAC address was learnt.')
cotvRouteNextHopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvRouteNextHopIf.setStatus('current')
if mibBuilder.loadTexts: cotvRouteNextHopIf.setDescription("This object indicates the interface on the device through which the MAC address will be routed. Value of this object should be ignored if cotvRouteOwner is other than 'site' or 'static'.")
cotvRouteNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvRouteNextHopAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvRouteNextHopAddrType.setDescription("This object indicates the type of Internet address of the edge device through which the MAC address will be routed. Value of this object should be ignored if cotvRouteOwner is other than 'overlay'.")
cotvRouteNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvRouteNextHopAddr.setStatus('current')
if mibBuilder.loadTexts: cotvRouteNextHopAddr.setDescription("This object indicates the Internet address of the edge device through which the MAC address will be routed. The type of this address is determined by the value of cotvRouteNextHopAddrType. Value of this object should be ignored if cotvRouteOwner is other than 'overlay'.")
cotvMcastRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2), )
if mibBuilder.loadTexts: cotvMcastRouteTable.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteTable.setDescription('A table listing multicast route information in OTV Routing Information Base (ORIB).')
cotvMcastRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvMcastRouteVlanId"), (0, "CISCO-OTV-MIB", "cotvMcastRouteActiveSrcAddrType"), (0, "CISCO-OTV-MIB", "cotvMcastRouteActiveSrcAddr"), (0, "CISCO-OTV-MIB", "cotvMcastRouteActiveGroupAddrType"), (0, "CISCO-OTV-MIB", "cotvMcastRouteActiveGroupAddr"))
if mibBuilder.loadTexts: cotvMcastRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteEntry.setDescription('An entry containing information about a particular multicast route in ORIB.')
cotvMcastRouteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cotvMcastRouteVlanId.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteVlanId.setDescription('The object indicates VLAN associated with this multicast route.')
cotvMcastRouteActiveSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cotvMcastRouteActiveSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteActiveSrcAddrType.setDescription('The type of Internet address of active multicast source.')
cotvMcastRouteActiveSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvMcastRouteActiveSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteActiveSrcAddr.setDescription('The Internet address of active multicast source. The type of this address is determined by the value of cotvMcastRouteActiveSrcAddrType.')
cotvMcastRouteActiveGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cotvMcastRouteActiveGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteActiveGroupAddrType.setDescription('The type of Internet address of the active multicast group (multicast group of the active multicast source).')
cotvMcastRouteActiveGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvMcastRouteActiveGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteActiveGroupAddr.setDescription('The Internet address of the active multicast group of the (multicast group of the active multicast source). The type of this address is determined by the value of cotvMcastRouteActiveGroupAddrType.')
cotvMcastRouteOwners = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteOwners.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteOwners.setDescription('This object indicates the type of owner(s) (sources) from where this route was learnt.')
cotvMcastRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteMetric.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteMetric.setDescription('This object indicates the metric associated with this multicast route.')
cotvMcastRouteUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 2, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteUpTime.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteUpTime.setDescription('This object indicates the amount of time elapsed since this multicast route was installed in this table.')
cotvMcastRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3), )
if mibBuilder.loadTexts: cotvMcastRouteInfoTable.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoTable.setDescription('A table listing next-hop information associated with each multicast route in OTV Routing Information Base (ORIB).')
cotvMcastRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-OTV-MIB", "cotvMcastRouteInfoVlanId"), (0, "CISCO-OTV-MIB", "cotvMcastRouteInfoActiveSrcAddrType"), (0, "CISCO-OTV-MIB", "cotvMcastRouteInfoActiveSrcAddr"), (0, "CISCO-OTV-MIB", "cotvMcastRouteInfoActiveGroupAddrType"), (0, "CISCO-OTV-MIB", "cotvMcastRouteInfoActiveGroupAddr"), (0, "CISCO-OTV-MIB", "cotvMcastRouteInfoIf"))
if mibBuilder.loadTexts: cotvMcastRouteInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoEntry.setDescription('An entry containing next-hop information about a particular multicast route in ORIB.')
cotvMcastRouteInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cotvMcastRouteInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoVlanId.setDescription('The object indicates VLAN associated with this multicast route.')
cotvMcastRouteInfoActiveSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveSrcAddrType.setDescription('The type of Internet address of active multicast source.')
cotvMcastRouteInfoActiveSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveSrcAddr.setDescription('The Internet address of active multicast source. The type of this address is determined by the value of cotvMcastRouteInfoActiveSrcAddrType.')
cotvMcastRouteInfoActiveGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveGroupAddrType.setDescription('The type of Internet address of the active multicast group (multicast group of the active multicast source).')
cotvMcastRouteInfoActiveGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoActiveGroupAddr.setDescription('The Internet address of the active multicast group of the (multicast group of the active multicast source). The type of this address is determined by the value of cotvMcastRouteInfoActiveGroupAddrType.')
cotvMcastRouteInfoIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 6), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cotvMcastRouteInfoIf.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoIf.setDescription('This object indicates the next-hop interface on the device through which the multicast group will be routed.')
cotvMcastRouteInfoHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteInfoHostAddrType.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoHostAddrType.setDescription("This object indicates the type of Internet address of the next-hop edge device through which the multicast group will be routed. Value of this object will be 'unknown' if no next-hop edge device information is associated with this route.")
cotvMcastRouteInfoHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteInfoHostAddr.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoHostAddr.setDescription('This object indicates the Internet address of the next-hop edge device through which the multicast group will be routed. The type of this address is determined by the value of cotvMcastRouteInfoHostAddrType. Value of this object will be a zero length string if no next-hop edge device information is associated with this route.')
cotvMcastRouteInfoProtocolOwners = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteInfoProtocolOwners.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoProtocolOwners.setDescription('This object indicates the protocols used by multicast route owner to learn this route information.')
cotvMcastRouteInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteInfoMetric.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoMetric.setDescription('This object indicates the metric associated with this multicast route.')
cotvMcastRouteInfoUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 810, 1, 5, 3, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cotvMcastRouteInfoUpTime.setStatus('current')
if mibBuilder.loadTexts: cotvMcastRouteInfoUpTime.setDescription('This object indicates the amount of time elapsed since this multicast route entry was installed in this table.')
ciscoOtvMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 1))
ciscoOtvMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2))
ciscoOtvMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 1, 1)).setObjects(("CISCO-OTV-MIB", "ciscoOtvSiteGroup"), ("CISCO-OTV-MIB", "ciscoOtvOverlayGroup"), ("CISCO-OTV-MIB", "ciscoOtvVlanGroup"), ("CISCO-OTV-MIB", "ciscoOtvDataGroupConfigGroup"), ("CISCO-OTV-MIB", "ciscoOtvDataGroupInfoGroup"), ("CISCO-OTV-MIB", "ciscoOtvAdjacencyGroup"), ("CISCO-OTV-MIB", "ciscoOtvArpNdCacheGroup"), ("CISCO-OTV-MIB", "ciscoOtvRouteGroup"), ("CISCO-OTV-MIB", "ciscoOtvMcastRouteGroup"), ("CISCO-OTV-MIB", "ciscoOtvMcastRouteInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvMIBCompliance = ciscoOtvMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvMIBCompliance.setDescription('The compliance statement for CISCO-OTV-MIB.')
ciscoOtvSiteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 1)).setObjects(("CISCO-OTV-MIB", "cotvSiteIdAdmin"), ("CISCO-OTV-MIB", "cotvSiteIdOper"), ("CISCO-OTV-MIB", "cotvSiteVlan"), ("CISCO-OTV-MIB", "cotvSiteVlanState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvSiteGroup = ciscoOtvSiteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvSiteGroup.setDescription('A collection of objects providing OTV site information.')
ciscoOtvOverlayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 2)).setObjects(("CISCO-OTV-MIB", "cotvOverlayVpnName"), ("CISCO-OTV-MIB", "cotvOverlayVpnState"), ("CISCO-OTV-MIB", "cotvOverlayVpnDownReason"), ("CISCO-OTV-MIB", "cotvOverlayVlansExtendedFirst2k"), ("CISCO-OTV-MIB", "cotvOverlayVlansExtendedSecond2k"), ("CISCO-OTV-MIB", "cotvOverlayControlGroupAddrType"), ("CISCO-OTV-MIB", "cotvOverlayControlGroupAddr"), ("CISCO-OTV-MIB", "cotvOverlayBroadcastGroupAddrType"), ("CISCO-OTV-MIB", "cotvOverlayBroadcastGroupAddr"), ("CISCO-OTV-MIB", "cotvOverlayJoinInterface"), ("CISCO-OTV-MIB", "cotvOverlaySourceInterface"), ("CISCO-OTV-MIB", "cotvOverlayAedCapable"), ("CISCO-OTV-MIB", "cotvOverlayAedIncapableReason"), ("CISCO-OTV-MIB", "cotvOverlayAdjServerTransportType"), ("CISCO-OTV-MIB", "cotvOverlayAdjServerEnable"), ("CISCO-OTV-MIB", "cotvOverlayPrimaryAdjServerAddrType"), ("CISCO-OTV-MIB", "cotvOverlayPrimaryAdjServerAddr"), ("CISCO-OTV-MIB", "cotvOverlaySecondaryAdjServerAddrType"), ("CISCO-OTV-MIB", "cotvOverlaySecondaryAdjServerAddr"), ("CISCO-OTV-MIB", "cotvOverlaySuppressArpND"), ("CISCO-OTV-MIB", "cotvOverlayStorageType"), ("CISCO-OTV-MIB", "cotvOverlayRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvOverlayGroup = ciscoOtvOverlayGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvOverlayGroup.setDescription('A collection of objects providing OTV overlay information.')
ciscoOtvVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 3)).setObjects(("CISCO-OTV-MIB", "cotvVlanState"), ("CISCO-OTV-MIB", "cotvVlanInactiveReason"), ("CISCO-OTV-MIB", "cotvVlanAedAddrType"), ("CISCO-OTV-MIB", "cotvVlanAedAddr"), ("CISCO-OTV-MIB", "cotvVlanEdgeDevIsAed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvVlanGroup = ciscoOtvVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvVlanGroup.setDescription('A collection of objects providing OTV extended VLANs.')
ciscoOtvDataGroupConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 4)).setObjects(("CISCO-OTV-MIB", "cotvDataGroupStorageType"), ("CISCO-OTV-MIB", "cotvDataGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvDataGroupConfigGroup = ciscoOtvDataGroupConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvDataGroupConfigGroup.setDescription('A collection of objects providing overlay multicast data-group configuration information.')
ciscoOtvDataGroupInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 5)).setObjects(("CISCO-OTV-MIB", "cotvDataGroupJoinInterface"), ("CISCO-OTV-MIB", "cotvDataGroupLocalActiveSrcState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvDataGroupInfoGroup = ciscoOtvDataGroupInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvDataGroupInfoGroup.setDescription('A collection of objects providing active data-group related information.')
ciscoOtvAdjacencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 6)).setObjects(("CISCO-OTV-MIB", "cotvAdjacentDevSystemID"), ("CISCO-OTV-MIB", "cotvAdjacentDevName"), ("CISCO-OTV-MIB", "cotvAdjacentDevState"), ("CISCO-OTV-MIB", "cotvAdjacentDevUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvAdjacencyGroup = ciscoOtvAdjacencyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvAdjacencyGroup.setDescription('A collection of objects providing information about OTV Adjacency Database.')
ciscoOtvArpNdCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 7)).setObjects(("CISCO-OTV-MIB", "cotvArpNdCacheMacAddr"), ("CISCO-OTV-MIB", "cotvArpNdCacheAge"), ("CISCO-OTV-MIB", "cotvArpNdCacheTimeToExpire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvArpNdCacheGroup = ciscoOtvArpNdCacheGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvArpNdCacheGroup.setDescription('A collection of objects providing ARP/ND cache information.')
ciscoOtvRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 8)).setObjects(("CISCO-OTV-MIB", "cotvRouteMetric"), ("CISCO-OTV-MIB", "cotvRouteUpTime"), ("CISCO-OTV-MIB", "cotvRouteOwner"), ("CISCO-OTV-MIB", "cotvRouteNextHopIf"), ("CISCO-OTV-MIB", "cotvRouteNextHopAddrType"), ("CISCO-OTV-MIB", "cotvRouteNextHopAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvRouteGroup = ciscoOtvRouteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvRouteGroup.setDescription('A collection of objects providing information about unicast routes in ORIB.')
ciscoOtvMcastRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 9)).setObjects(("CISCO-OTV-MIB", "cotvMcastRouteOwners"), ("CISCO-OTV-MIB", "cotvMcastRouteMetric"), ("CISCO-OTV-MIB", "cotvMcastRouteUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvMcastRouteGroup = ciscoOtvMcastRouteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvMcastRouteGroup.setDescription('A collection of objects providing information about multicast routes in ORIB.')
ciscoOtvMcastRouteInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 810, 2, 2, 10)).setObjects(("CISCO-OTV-MIB", "cotvMcastRouteInfoHostAddrType"), ("CISCO-OTV-MIB", "cotvMcastRouteInfoHostAddr"), ("CISCO-OTV-MIB", "cotvMcastRouteInfoProtocolOwners"), ("CISCO-OTV-MIB", "cotvMcastRouteInfoMetric"), ("CISCO-OTV-MIB", "cotvMcastRouteInfoUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtvMcastRouteInfoGroup = ciscoOtvMcastRouteInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOtvMcastRouteInfoGroup.setDescription('A collection of objects providing interface level information for multicast routes in ORIB.')
mibBuilder.exportSymbols("CISCO-OTV-MIB", cotvDataGroupActiveSrcLocation=cotvDataGroupActiveSrcLocation, cotvMcastRouteInfoActiveGroupAddrType=cotvMcastRouteInfoActiveGroupAddrType, cotvMcastRouteInfoTable=cotvMcastRouteInfoTable, cotvArpNdCacheMacAddr=cotvArpNdCacheMacAddr, ciscoOtvMIBNotifs=ciscoOtvMIBNotifs, cotvOverlayBroadcastGroupAddr=cotvOverlayBroadcastGroupAddr, cotvArpNdCacheL3Addr=cotvArpNdCacheL3Addr, cotvOverlayAedCapable=cotvOverlayAedCapable, cotvDataGroupActiveSrcAddrType=cotvDataGroupActiveSrcAddrType, cotvMcastRouteInfoActiveSrcAddrType=cotvMcastRouteInfoActiveSrcAddrType, cotvArpNdCacheEntry=cotvArpNdCacheEntry, cotvVlansTable=cotvVlansTable, cotvRouteEntry=cotvRouteEntry, cotvDataGroupDeliveryGroupAddrType=cotvDataGroupDeliveryGroupAddrType, cotvVlanId=cotvVlanId, PYSNMP_MODULE_ID=ciscoOtvMIB, ciscoOtvMIBGroups=ciscoOtvMIBGroups, cotvOverlayControlGroupAddrType=cotvOverlayControlGroupAddrType, cotvDataGroupDeliverySrcAddr=cotvDataGroupDeliverySrcAddr, cotvDataGroupLocalActiveSrcState=cotvDataGroupLocalActiveSrcState, cotvRouteNextHopAddrType=cotvRouteNextHopAddrType, cotvMcastRouteInfoMetric=cotvMcastRouteInfoMetric, cotvAdjacentDevUpTime=cotvAdjacentDevUpTime, cotvVlanState=cotvVlanState, cotvRouteNextHopIf=cotvRouteNextHopIf, cotvMcastRouteInfoProtocolOwners=cotvMcastRouteInfoProtocolOwners, cotvArpNdCacheTable=cotvArpNdCacheTable, ciscoOtvMcastRouteInfoGroup=ciscoOtvMcastRouteInfoGroup, cotvDataGroupMcastRangeAddrType=cotvDataGroupMcastRangeAddrType, ciscoOtvMIBCompliance=ciscoOtvMIBCompliance, cotvRouteUpTime=cotvRouteUpTime, cotvMcastRouteOwners=cotvMcastRouteOwners, cotvOverlayVpnDownReason=cotvOverlayVpnDownReason, cotvVlansEntry=cotvVlansEntry, cotvDataGroupActiveGroupAddr=cotvDataGroupActiveGroupAddr, cotvOverlayVpnState=cotvOverlayVpnState, cotvOverlaySecondaryAdjServerAddrType=cotvOverlaySecondaryAdjServerAddrType, cotvOverlayAedIncapableReason=cotvOverlayAedIncapableReason, cotvSiteObjects=cotvSiteObjects, ciscoOtvArpNdCacheGroup=ciscoOtvArpNdCacheGroup, cotvAdjacentDevSystemID=cotvAdjacentDevSystemID, cotvMcastRouteEntry=cotvMcastRouteEntry, ciscoOtvMIBObjects=ciscoOtvMIBObjects, cotvMcastRouteTable=cotvMcastRouteTable, cotvVlanAedAddrType=cotvVlanAedAddrType, cotvVlanInactiveReason=cotvVlanInactiveReason, ciscoOtvSiteGroup=ciscoOtvSiteGroup, cotvDataGroupMcastRangeAddr=cotvDataGroupMcastRangeAddr, cotvOverlaySecondaryAdjServerAddr=cotvOverlaySecondaryAdjServerAddr, cotvAdjacentDevName=cotvAdjacentDevName, ciscoOtvMIBConform=ciscoOtvMIBConform, cotvRouteTable=cotvRouteTable, cotvMcastRouteInfoIf=cotvMcastRouteInfoIf, cotvMcastRouteInfoHostAddrType=cotvMcastRouteInfoHostAddrType, cotvDataGroupMcastRangePrefixLength=cotvDataGroupMcastRangePrefixLength, cotvSiteVlanState=cotvSiteVlanState, ciscoOtvDataGroupConfigGroup=ciscoOtvDataGroupConfigGroup, cotvSiteIdOper=cotvSiteIdOper, cotvDataGroupActiveSrcAddr=cotvDataGroupActiveSrcAddr, cotvOverlayControlGroupAddr=cotvOverlayControlGroupAddr, cotvVlanAedAddr=cotvVlanAedAddr, cotvMcastRouteInfoActiveSrcAddr=cotvMcastRouteInfoActiveSrcAddr, cotvDataGroupRowStatus=cotvDataGroupRowStatus, cotvOverlayVlansExtendedSecond2k=cotvOverlayVlansExtendedSecond2k, cotvOverlayJoinInterface=cotvOverlayJoinInterface, cotvMcastRouteMetric=cotvMcastRouteMetric, cotvAdjacentDevAddrType=cotvAdjacentDevAddrType, ciscoOtvMIB=ciscoOtvMIB, cotvDataGroupDeliverySrcAddrType=cotvDataGroupDeliverySrcAddrType, cotvDataGroupStorageType=cotvDataGroupStorageType, cotvOverlayNumber=cotvOverlayNumber, cotvMcastRouteUpTime=cotvMcastRouteUpTime, cotvOverlayRowStatus=cotvOverlayRowStatus, cotvOverlayBroadcastGroupAddrType=cotvOverlayBroadcastGroupAddrType, cotvMcastRouteInfoVlanId=cotvMcastRouteInfoVlanId, cotvDataGroupDeliveryGroupAddr=cotvDataGroupDeliveryGroupAddr, cotvAdjacencyObjects=cotvAdjacencyObjects, cotvOverlayPrimaryAdjServerAddrType=cotvOverlayPrimaryAdjServerAddrType, cotvMcastRouteInfoEntry=cotvMcastRouteInfoEntry, cotvMcastRouteActiveGroupAddrType=cotvMcastRouteActiveGroupAddrType, cotvOverlayAdjServerTransportType=cotvOverlayAdjServerTransportType, cotvRouteMacAddr=cotvRouteMacAddr, ciscoOtvMIBCompliances=ciscoOtvMIBCompliances, cotvOverlayVlansExtendedFirst2k=cotvOverlayVlansExtendedFirst2k, cotvOverlaySourceInterface=cotvOverlaySourceInterface, ciscoOtvVlanGroup=ciscoOtvVlanGroup, cotvArpNdCacheL3AddrType=cotvArpNdCacheL3AddrType, cotvSiteVlan=cotvSiteVlan, cotvDataGroupJoinInterface=cotvDataGroupJoinInterface, ciscoOtvRouteGroup=ciscoOtvRouteGroup, cotvAdjacentDevState=cotvAdjacentDevState, cotvDataGroupVlanId=cotvDataGroupVlanId, cotvOverlayStorageType=cotvOverlayStorageType, cotvArpNdCacheTimeToExpire=cotvArpNdCacheTimeToExpire, cotvMcastRouteActiveSrcAddr=cotvMcastRouteActiveSrcAddr, ciscoOtvAdjacencyGroup=ciscoOtvAdjacencyGroup, cotvMcastRouteVlanId=cotvMcastRouteVlanId, cotvOverlayVpnName=cotvOverlayVpnName, cotvRouteOwner=cotvRouteOwner, ciscoOtvMcastRouteGroup=ciscoOtvMcastRouteGroup, cotvDataGroupInfoEntry=cotvDataGroupInfoEntry, cotvDataGroupActiveGroupAddrType=cotvDataGroupActiveGroupAddrType, cotvRouteObjects=cotvRouteObjects, cotvMcastRouteActiveGroupAddr=cotvMcastRouteActiveGroupAddr, cotvOverlayPrimaryAdjServerAddr=cotvOverlayPrimaryAdjServerAddr, cotvMcastRouteActiveSrcAddrType=cotvMcastRouteActiveSrcAddrType, cotvGlobalStatsObjects=cotvGlobalStatsObjects, cotvAdjacencyDatabaseTable=cotvAdjacencyDatabaseTable, cotvRouteNextHopAddr=cotvRouteNextHopAddr, cotvArpNdObjects=cotvArpNdObjects, cotvGlobalObjects=cotvGlobalObjects, cotvMcastRouteInfoUpTime=cotvMcastRouteInfoUpTime, cotvSiteIdAdmin=cotvSiteIdAdmin, cotvRouteMetric=cotvRouteMetric, cotvOverlayObjects=cotvOverlayObjects, cotvOverlayEntry=cotvOverlayEntry, cotvOverlayTable=cotvOverlayTable, cotvMcastRouteInfoHostAddr=cotvMcastRouteInfoHostAddr, cotvRouteVlanId=cotvRouteVlanId, cotvDataGroupConfigTable=cotvDataGroupConfigTable, cotvOverlaySuppressArpND=cotvOverlaySuppressArpND, cotvVlanEdgeDevIsAed=cotvVlanEdgeDevIsAed, ciscoOtvDataGroupInfoGroup=ciscoOtvDataGroupInfoGroup, cotvArpNdCacheAge=cotvArpNdCacheAge, ciscoOtvOverlayGroup=ciscoOtvOverlayGroup, cotvAdjacencyDatabaseEntry=cotvAdjacencyDatabaseEntry, cotvAdjacentDevAddr=cotvAdjacentDevAddr, cotvOverlayAdjServerEnable=cotvOverlayAdjServerEnable, cotvDataGroupConfigEntry=cotvDataGroupConfigEntry, cotvMcastRouteInfoActiveGroupAddr=cotvMcastRouteInfoActiveGroupAddr, cotvDataGroupInfoTable=cotvDataGroupInfoTable)
