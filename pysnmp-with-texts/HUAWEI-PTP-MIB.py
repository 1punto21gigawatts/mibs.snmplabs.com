#
# PySNMP MIB module HUAWEI-PTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, MibIdentifier, TimeTicks, Unsigned32, ModuleIdentity, Gauge32, Counter64, iso, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "TimeTicks", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter64", "iso", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "ObjectIdentity")
DisplayString, DateAndTime, MacAddress, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "MacAddress", "TruthValue", "TextualConvention", "RowStatus")
hwPtpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187))
if mibBuilder.loadTexts: hwPtpMIB.setLastUpdated('200902111449Z')
if mibBuilder.loadTexts: hwPtpMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwPtpMIB.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwPtpMIB.setDescription('The HUAWEI-PTP-MIB contains objects to manage PTP.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class VlanIdOrNone(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )
hwPtpGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1))
hwPtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 1), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpEnable.setStatus('current')
if mibBuilder.loadTexts: hwPtpEnable.setDescription('Enable PTP function.')
hwPtpDomain = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpDomain.setStatus('current')
if mibBuilder.loadTexts: hwPtpDomain.setDescription("PTP device's domain attribute,this attribute is used by PTP Device to join BMC compute.")
hwPtpDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("oc", 1), ("bc", 2), ("p2ptc", 3), ("e2etc", 4), ("p2ptcoc", 5), ("e2etcoc", 6), ("tcandbc", 7), ("invalid", 99))).clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpDeviceType.setStatus('current')
if mibBuilder.loadTexts: hwPtpDeviceType.setDescription("PTP device's type attribute.")
hwPtpSlaveOnly = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpSlaveOnly.setStatus('current')
if mibBuilder.loadTexts: hwPtpSlaveOnly.setDescription("PTP device's SlaveOnly attribute.")
hwPtpLocalClockId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpLocalClockId.setStatus('current')
if mibBuilder.loadTexts: hwPtpLocalClockId.setDescription("Local PTP device's ClockId.")
hwPtpLocalClockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLocalClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: hwPtpLocalClockAccuracy.setDescription("PTP device's clock accuracy attribute.")
hwPtpLocalClockClass = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(187)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLocalClockClass.setStatus('current')
if mibBuilder.loadTexts: hwPtpLocalClockClass.setDescription("PTP device's clock class attribute.")
hwPtpLocalClockPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLocalClockPriority1.setStatus('current')
if mibBuilder.loadTexts: hwPtpLocalClockPriority1.setDescription("PTP device's clock priority1 attribute.")
hwPtpLocalClockPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLocalClockPriority2.setStatus('current')
if mibBuilder.loadTexts: hwPtpLocalClockPriority2.setDescription("PTP device's clock priority2 attribute.")
hwPtpLocalClockTimeSource = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("atomicclock", 1), ("gps", 2), ("terrestrialradio", 3), ("ptp", 4), ("ntp", 5), ("handset", 6), ("other", 7), ("internaloscillator", 8))).clone('internaloscillator')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLocalClockTimeSource.setStatus('current')
if mibBuilder.loadTexts: hwPtpLocalClockTimeSource.setDescription("PTP device's clock time source attribute.")
hwPtpUtc = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpUtc.setStatus('current')
if mibBuilder.loadTexts: hwPtpUtc.setDescription('Indicates current UTC.')
hwPtpCurrentUtcOffset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCurrentUtcOffset.setStatus('current')
if mibBuilder.loadTexts: hwPtpCurrentUtcOffset.setDescription('The offset between TAI and UTC. CurrentUtcOffset=TAI-UTC.')
hwCurrentUtcOffsetValid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCurrentUtcOffsetValid.setStatus('current')
if mibBuilder.loadTexts: hwCurrentUtcOffsetValid.setDescription('CurrentUtcOffsetValid.')
hwPtpLeap59orLeap61Valid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leap59Valid", 1), ("leap61Valid", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLeap59orLeap61Valid.setStatus('current')
if mibBuilder.loadTexts: hwPtpLeap59orLeap61Valid.setDescription('Indicates Leap59OrLeap61Valid is valid or not.')
hwPtpLeapEmendationTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 15), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpLeapEmendationTime.setStatus('current')
if mibBuilder.loadTexts: hwPtpLeapEmendationTime.setDescription('Specify the time at which the leap action will be occurred. We will only take octet strings with length 8 for this object. ')
hwPtpCurrentMasterClockId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpCurrentMasterClockId.setStatus('current')
if mibBuilder.loadTexts: hwPtpCurrentMasterClockId.setDescription("Current grandmaster clock's clockId")
hwPtpCurrentMasterClockReceivePort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpCurrentMasterClockReceivePort.setStatus('current')
if mibBuilder.loadTexts: hwPtpCurrentMasterClockReceivePort.setDescription("The input port of current grandmaster clock's clock ID.")
hwPtpCurrentMasterClockStepRemoved = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpCurrentMasterClockStepRemoved.setStatus('current')
if mibBuilder.loadTexts: hwPtpCurrentMasterClockStepRemoved.setDescription('Steps between current grandmaster clock device and the local clock device.')
hwPtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10))).clone(namedValues=NamedValues(("ieee1588v2", 1), ("invalid", 10))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpVersion.setStatus('current')
if mibBuilder.loadTexts: hwPtpVersion.setDescription('The version of PTP.')
hwPtpTimeScale = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptp", 1), ("arb", 2))).clone('ptp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpTimeScale.setStatus('current')
if mibBuilder.loadTexts: hwPtpTimeScale.setDescription('The time scale of PTP.')
hwPtpFrequencyTraceable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 21), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpFrequencyTraceable.setStatus('current')
if mibBuilder.loadTexts: hwPtpFrequencyTraceable.setDescription('The frequency trace is enable.')
hwPtpTimeTraceable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 22), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpTimeTraceable.setStatus('current')
if mibBuilder.loadTexts: hwPtpTimeTraceable.setDescription('The time trace is enable.')
hwPtpTimeSynchronizationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsynchronization", 1), ("synchronization", 2))).clone('unsynchronization')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpTimeSynchronizationStatus.setStatus('current')
if mibBuilder.loadTexts: hwPtpTimeSynchronizationStatus.setDescription('Indicates TimeSynchronizationStatus is synchronization or not.')
hwPtpPortObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2))
hwPtpPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1), )
if mibBuilder.loadTexts: hwPtpPortTable.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortTable.setDescription('PtpPortTable.')
hwPtpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1), ).setIndexNames((0, "HUAWEI-PTP-MIB", "hwPtpPortIfIndex"))
if mibBuilder.loadTexts: hwPtpPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortEntry.setDescription('An entry in hwPtpPortTable.')
hwPtpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPtpPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortIfIndex.setDescription('Port ifIndex.')
hwPtpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 2), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortEnable.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortEnable.setDescription('The port enable PTP function.')
hwPtpPortDelayMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("delay", 2), ("pdelay", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortDelayMechanism.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortDelayMechanism.setDescription('The port delay mechanism.')
hwPtpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("tc", 2), ("bc", 3), ("tcoc", 4), ("oc", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortType.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortType.setDescription('This port is tc type or bc type,only used in the PTP device type is tcandbc.')
hwPtpPortDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortDomain.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortDomain.setDescription("This port's domain,only used in the PTP device type is tcandbc.")
hwPtpPortTcOcStaticClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortTcOcStaticClockId.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortTcOcStaticClockId.setDescription('TcOc device sourceport clockId.')
hwPtpPortTcOcStaticClockPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortTcOcStaticClockPortNum.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortTcOcStaticClockPortNum.setDescription('TcOc device sourceport number.')
hwPtpPortAnnounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortAnnounceInterval.setDescription('Interval of sending announce message.')
hwPtpPortAnnounceReceipTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortAnnounceReceipTimeout.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortAnnounceReceipTimeout.setDescription('Timeout of receiving announce message.')
hwPtpPortSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortSyncInterval.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortSyncInterval.setDescription('Interval of sending sync message.')
hwPtpPortMinDelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortMinDelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortMinDelayReqInterval.setDescription('Interval of sending DelayReq message.')
hwPtpPortMinPdelayReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortMinPdelayReqInterval.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortMinPdelayReqInterval.setDescription('Interval of sending PdelayReq message.')
hwPtpPortAsymmetryNegativeCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortAsymmetryNegativeCorrection.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortAsymmetryNegativeCorrection.setDescription('Negtive asymmetry-correction value')
hwPtpPortAsymmetryPositiveCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortAsymmetryPositiveCorrection.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortAsymmetryPositiveCorrection.setDescription('Positive asymmetry-correction value')
hwPtpPortMacEgressDestinationMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 15), MacAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortMacEgressDestinationMac.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortMacEgressDestinationMac.setDescription('MacEgress destination Mac.')
hwPtpPortMacEgressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 16), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortMacEgressVlanId.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortMacEgressVlanId.setDescription('MacEgress VlanId.')
hwPtpPortMacEgressPacketPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortMacEgressPacketPriority.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortMacEgressPacketPriority.setDescription('MacEgress Packet Priority.')
hwPtpPortUdpEgressSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortUdpEgressSourceIp.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortUdpEgressSourceIp.setDescription('UdpEgress SourceIp.')
hwPtpPortUdpEgressDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 19), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortUdpEgressDestinationIp.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortUdpEgressDestinationIp.setDescription('UdpEgress DestinationIp.')
hwPtpPortUdpEgressDestinationMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 20), MacAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortUdpEgressDestinationMac.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortUdpEgressDestinationMac.setDescription('UdpEgress Destination Mac.')
hwPtpPortUdpEgressDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortUdpEgressDscp.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortUdpEgressDscp.setDescription('UdpEgress Dscp.')
hwPtpPortUdpEgressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 22), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortUdpEgressVlanId.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortUdpEgressVlanId.setDescription('UdpEgress VlanId.')
hwPtpPortUdpEgressPacketPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortUdpEgressPacketPriority.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortUdpEgressPacketPriority.setDescription('UdpEgress Packet Priority.')
hwPtpPortAnnounceDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 24), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortAnnounceDrop.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortAnnounceDrop.setDescription('Enable AnnounceDrop function.')
hwPtpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("passive", 3), ("listening", 4), ("faulty", 5), ("initializing", 6), ("premaster", 7), ("disabled", 8), ("uncalibrated", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortState.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortState.setDescription('Indicates the port state.')
hwPtpPortSourcePortClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortSourcePortClockId.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortSourcePortClockId.setDescription('Indicates sourceportclockid of the port.')
hwPtpPortSourcePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortSourcePortNum.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortSourcePortNum.setDescription('Indicates sourceport number of the port.')
hwPtpPortPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortPortVlan.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortPortVlan.setDescription('The VLAN of packet sent from port.')
hwPtpPortCfgLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortCfgLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortCfgLinkStatus.setDescription('The link status of port.')
hwPtpPortCfgExtInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extclock", 1), ("exttime", 2))).clone('extclock')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortCfgExtInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortCfgExtInterfaceMode.setDescription('The mode of interface.')
hwPtpPortCfgMsgFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptpeth", 1), ("ptpip", 2))).clone('ptpeth')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortCfgMsgFormat.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortCfgMsgFormat.setDescription('The format of massage.')
hwPtpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRowStatus.setDescription('The row status.')
hwPtpPortStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2), )
if mibBuilder.loadTexts: hwPtpPortStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortStatisticTable.setDescription('PortStatisticTable.')
hwPtpPortStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1), ).setIndexNames((0, "HUAWEI-PTP-MIB", "hwPtpPortStatisticIfIndex"))
if mibBuilder.loadTexts: hwPtpPortStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortStatisticEntry.setDescription('Description.')
hwPtpPortStatisticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPtpPortStatisticIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortStatisticIfIndex.setDescription('The PortStatisticIfIndex.')
hwPtpPortRxPtpTrsprnsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortRxPtpTrsprnsPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRxPtpTrsprnsPktCnt.setDescription('The number of the PTP packets received in this port.')
hwPtpPortRxPtpDiscardTrsprnsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortRxPtpDiscardTrsprnsPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRxPtpDiscardTrsprnsPktCnt.setDescription('The number of the PTP packets dropped in this port.')
hwPtpPortRxPtpEndPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortRxPtpEndPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRxPtpEndPktCnt.setDescription('The number of the PTP packets correct ended in this port.')
hwPtpPortRxPtpDiscardEndPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortRxPtpDiscardEndPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRxPtpDiscardEndPktCnt.setDescription('The number of the PTP packets wrong ended in this port.')
hwPtpPortRxPtpAnnouncePktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortRxPtpAnnouncePktCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRxPtpAnnouncePktCnt.setDescription('The number of the announce packets received in this port.')
hwPtpPortRxPtpSyncPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortRxPtpSyncPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortRxPtpSyncPktCnt.setDescription('The number of the sync packets received in this port.')
hwPtpPortTxPtpDiscardReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortTxPtpDiscardReqCnt.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortTxPtpDiscardReqCnt.setDescription('The number of the PTP req packets dropped in this port.')
hwPtpPortTxFifoDiscardPktCn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpPortTxFifoDiscardPktCn.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortTxFifoDiscardPktCn.setDescription('The number of the sync, req,announce packets dropped in this port because of the fifo fulled.')
hwPtpPortStaticPktReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unused", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpPortStaticPktReset.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortStaticPktReset.setDescription('Reset port PTP packets statistic.')
hwPtpBitsClockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3), )
if mibBuilder.loadTexts: hwPtpBitsClockSourceTable.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsClockSourceTable.setDescription('BitsClockSourceTable.')
hwPtpBitsClockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1), ).setIndexNames((0, "HUAWEI-PTP-MIB", "hwPtpBitsPortIndex"))
if mibBuilder.loadTexts: hwPtpBitsClockSourceEntry.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsClockSourceEntry.setDescription('An entry in hwPtpPortStatisticTable.')
hwPtpBitsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hwPtpBitsPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsPortIndex.setDescription('The BitsPortIndex.')
hwPtpBitsClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpBitsClockAccuracy.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsClockAccuracy.setDescription('BitsClockAccuracy.')
hwPtpBitsClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpBitsClockClass.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsClockClass.setDescription('BitsClockClass.')
hwPtpBitsPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpBitsPriority1.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsPriority1.setDescription('BitsPriority1.')
hwPtpBitsPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpBitsPriority2.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsPriority2.setDescription('BitsPriority2.')
hwPtpBitsTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("atomicclock", 1), ("gps", 2), ("terrestrialradio", 3), ("ptp", 4), ("ntp", 5), ("handset", 6), ("other", 7), ("internaloscillator", 8))).clone('gps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpBitsTimeSource.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsTimeSource.setDescription('BitsTimeSource.')
hwPtpBitsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneppsandrs232", 1), ("twomhz", 2), ("twombps", 3), ("dcls", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpBitsSignal.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsSignal.setDescription('The signal of BITS.')
hwPtpBitsSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpBitsSwitch.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsSwitch.setDescription('The switch status.')
hwPtpBitsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpBitsDirection.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsDirection.setDescription('The direction of BITS.')
hwPtpBitsNormalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPtpBitsNormalStatus.setStatus('current')
if mibBuilder.loadTexts: hwPtpBitsNormalStatus.setDescription('The normal status of BITS.')
hwPtpReceiveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpReceiveDelay.setStatus('current')
if mibBuilder.loadTexts: hwPtpReceiveDelay.setDescription('The delay of receive.')
hwPtpSendDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpSendDelay.setStatus('current')
if mibBuilder.loadTexts: hwPtpSendDelay.setDescription('The delay of send.')
hwPtpExtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3), )
if mibBuilder.loadTexts: hwPtpExtInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceTable.setDescription('Description.')
hwPtpExtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1), ).setIndexNames((0, "HUAWEI-PTP-MIB", "hwPtpExtInterfaceOperateIndex"))
if mibBuilder.loadTexts: hwPtpExtInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceEntry.setDescription('Description.')
hwPtpExtInterfaceOperateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: hwPtpExtInterfaceOperateIndex.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceOperateIndex.setDescription('The operation index of extern interface.')
hwPtpExtInterfaceOperateType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setprotocltype", 1), ("setelectriclevel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpExtInterfaceOperateType.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceOperateType.setDescription('The operation type of extern interface.')
hwPtpExtInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpExtInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceIfIndex.setDescription('The interface index.')
hwPtpExtInterfaceDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpExtInterfaceDirect.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceDirect.setDescription('The direction of interface.')
hwPtpExtInterfaceProtocoltype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dcls", 1), ("time1pps", 2), ("j211", 3))).clone('dcls')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpExtInterfaceProtocoltype.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceProtocoltype.setDescription('The protocol type of interface.')
hwPtpExtInterfaceElectricLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ttl", 1), ("rs232", 2), ("rs422", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPtpExtInterfaceElectricLevel.setStatus('current')
if mibBuilder.loadTexts: hwPtpExtInterfaceElectricLevel.setDescription('The electric level of interface.')
hwPtpCableLengthTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 4))
hwPtpCableLengthIfindex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 4, 1), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableLengthIfindex.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableLengthIfindex.setDescription('The interface index.')
hwPtpCableLengthTransDirect = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("receive", 0), ("send", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableLengthTransDirect.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableLengthTransDirect.setDescription('The direction of transport.')
hwPtpCableLengthMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("length", 0), ("time", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableLengthMode.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableLengthMode.setDescription('The mode of cable length.')
hwPtpCableLengthTransDistance = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableLengthTransDistance.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableLengthTransDistance.setDescription('The distance of cable length.')
hwPtpCableTransTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 5))
hwPtpCableTransIfindex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 5, 1), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableTransIfindex.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableTransIfindex.setDescription('The interface index.')
hwPtpCableTransWarpMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("length", 0), ("time", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableTransWarpMode.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableTransWarpMode.setDescription('The mode of transport warp.')
hwPtpCableTransWarpDirect = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("negative", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableTransWarpDirect.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableTransWarpDirect.setDescription('The direction of transport warp.')
hwPtpCableTransWarpValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPtpCableTransWarpValue.setStatus('current')
if mibBuilder.loadTexts: hwPtpCableTransWarpValue.setDescription('The value of transport warp.')
hwPtpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 6))
hwPtpPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 6, 1)).setObjects(("HUAWEI-PTP-MIB", "hwPtpPortState"))
if mibBuilder.loadTexts: hwPtpPortStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortStatusChange.setDescription('Port status change notification.')
hwPtpClockSourceChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 6, 2)).setObjects(("HUAWEI-PTP-MIB", "hwPtpCurrentMasterClockId"))
if mibBuilder.loadTexts: hwPtpClockSourceChange.setStatus('current')
if mibBuilder.loadTexts: hwPtpClockSourceChange.setDescription('Clock source change notification.')
hwPtpTimeSynchronizationStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 6, 3)).setObjects(("HUAWEI-PTP-MIB", "hwPtpTimeSynchronizationStatus"))
if mibBuilder.loadTexts: hwPtpTimeSynchronizationStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwPtpTimeSynchronizationStatusChange.setDescription('Time synchronization status change notification.')
hwPtpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7))
hwPtpCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 1))
hwPtpComliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 1, 1)).setObjects(("HUAWEI-PTP-MIB", "hwPtpGlobalObjectsGroup"), ("HUAWEI-PTP-MIB", "hwPtpPortObjectsGroup"), ("HUAWEI-PTP-MIB", "hwPtpNotificationsGroup"), ("HUAWEI-PTP-MIB", "hwPtpManageExtInterfaceGroup"), ("HUAWEI-PTP-MIB", "hwPtpManageCableLengthGroup"), ("HUAWEI-PTP-MIB", "hwPtpManageCableTransGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpComliance = hwPtpComliance.setStatus('current')
if mibBuilder.loadTexts: hwPtpComliance.setDescription('This is the PTP module compliance.')
hwPtpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2))
hwPtpGlobalObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2, 1)).setObjects(("HUAWEI-PTP-MIB", "hwPtpEnable"), ("HUAWEI-PTP-MIB", "hwPtpDomain"), ("HUAWEI-PTP-MIB", "hwPtpSlaveOnly"), ("HUAWEI-PTP-MIB", "hwPtpDeviceType"), ("HUAWEI-PTP-MIB", "hwPtpLocalClockId"), ("HUAWEI-PTP-MIB", "hwPtpLocalClockClass"), ("HUAWEI-PTP-MIB", "hwPtpLocalClockAccuracy"), ("HUAWEI-PTP-MIB", "hwPtpLocalClockPriority1"), ("HUAWEI-PTP-MIB", "hwPtpLocalClockPriority2"), ("HUAWEI-PTP-MIB", "hwPtpLocalClockTimeSource"), ("HUAWEI-PTP-MIB", "hwPtpUtc"), ("HUAWEI-PTP-MIB", "hwPtpCurrentUtcOffset"), ("HUAWEI-PTP-MIB", "hwPtpCurrentMasterClockId"), ("HUAWEI-PTP-MIB", "hwPtpCurrentMasterClockReceivePort"), ("HUAWEI-PTP-MIB", "hwPtpCurrentMasterClockStepRemoved"), ("HUAWEI-PTP-MIB", "hwPtpTimeSynchronizationStatus"), ("HUAWEI-PTP-MIB", "hwPtpTimeTraceable"), ("HUAWEI-PTP-MIB", "hwPtpTimeScale"), ("HUAWEI-PTP-MIB", "hwPtpVersion"), ("HUAWEI-PTP-MIB", "hwPtpLeapEmendationTime"), ("HUAWEI-PTP-MIB", "hwCurrentUtcOffsetValid"), ("HUAWEI-PTP-MIB", "hwPtpLeap59orLeap61Valid"), ("HUAWEI-PTP-MIB", "hwPtpFrequencyTraceable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpGlobalObjectsGroup = hwPtpGlobalObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwPtpGlobalObjectsGroup.setDescription('This is the hwPtpGlobalObjectsGroups.')
hwPtpPortObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2, 2)).setObjects(("HUAWEI-PTP-MIB", "hwPtpPortEnable"), ("HUAWEI-PTP-MIB", "hwPtpPortDelayMechanism"), ("HUAWEI-PTP-MIB", "hwPtpPortDomain"), ("HUAWEI-PTP-MIB", "hwPtpPortTcOcStaticClockId"), ("HUAWEI-PTP-MIB", "hwPtpPortAnnounceInterval"), ("HUAWEI-PTP-MIB", "hwPtpPortAnnounceReceipTimeout"), ("HUAWEI-PTP-MIB", "hwPtpPortSyncInterval"), ("HUAWEI-PTP-MIB", "hwPtpPortMinDelayReqInterval"), ("HUAWEI-PTP-MIB", "hwPtpPortMinPdelayReqInterval"), ("HUAWEI-PTP-MIB", "hwPtpPortAsymmetryNegativeCorrection"), ("HUAWEI-PTP-MIB", "hwPtpPortAsymmetryPositiveCorrection"), ("HUAWEI-PTP-MIB", "hwPtpPortMacEgressDestinationMac"), ("HUAWEI-PTP-MIB", "hwPtpPortMacEgressVlanId"), ("HUAWEI-PTP-MIB", "hwPtpPortMacEgressPacketPriority"), ("HUAWEI-PTP-MIB", "hwPtpPortUdpEgressSourceIp"), ("HUAWEI-PTP-MIB", "hwPtpPortUdpEgressDestinationIp"), ("HUAWEI-PTP-MIB", "hwPtpPortUdpEgressDestinationMac"), ("HUAWEI-PTP-MIB", "hwPtpPortUdpEgressDscp"), ("HUAWEI-PTP-MIB", "hwPtpPortUdpEgressVlanId"), ("HUAWEI-PTP-MIB", "hwPtpPortUdpEgressPacketPriority"), ("HUAWEI-PTP-MIB", "hwPtpPortAnnounceDrop"), ("HUAWEI-PTP-MIB", "hwPtpPortState"), ("HUAWEI-PTP-MIB", "hwPtpPortSourcePortClockId"), ("HUAWEI-PTP-MIB", "hwPtpPortRxPtpTrsprnsPktCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortRxPtpDiscardTrsprnsPktCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortRxPtpEndPktCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortRxPtpDiscardEndPktCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortRxPtpAnnouncePktCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortRxPtpSyncPktCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortTxPtpDiscardReqCnt"), ("HUAWEI-PTP-MIB", "hwPtpPortTxFifoDiscardPktCn"), ("HUAWEI-PTP-MIB", "hwPtpReceiveDelay"), ("HUAWEI-PTP-MIB", "hwPtpBitsDirection"), ("HUAWEI-PTP-MIB", "hwPtpBitsSignal"), ("HUAWEI-PTP-MIB", "hwPtpBitsSwitch"), ("HUAWEI-PTP-MIB", "hwPtpBitsNormalStatus"), ("HUAWEI-PTP-MIB", "hwPtpSendDelay"), ("HUAWEI-PTP-MIB", "hwPtpPortRowStatus"), ("HUAWEI-PTP-MIB", "hwPtpPortStaticPktReset"), ("HUAWEI-PTP-MIB", "hwPtpPortType"), ("HUAWEI-PTP-MIB", "hwPtpBitsClockAccuracy"), ("HUAWEI-PTP-MIB", "hwPtpBitsClockClass"), ("HUAWEI-PTP-MIB", "hwPtpPortCfgMsgFormat"), ("HUAWEI-PTP-MIB", "hwPtpPortCfgExtInterfaceMode"), ("HUAWEI-PTP-MIB", "hwPtpPortCfgLinkStatus"), ("HUAWEI-PTP-MIB", "hwPtpPortPortVlan"), ("HUAWEI-PTP-MIB", "hwPtpBitsPriority2"), ("HUAWEI-PTP-MIB", "hwPtpBitsPriority1"), ("HUAWEI-PTP-MIB", "hwPtpBitsTimeSource"), ("HUAWEI-PTP-MIB", "hwPtpPortTcOcStaticClockPortNum"), ("HUAWEI-PTP-MIB", "hwPtpPortSourcePortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpPortObjectsGroup = hwPtpPortObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwPtpPortObjectsGroup.setDescription('Description.')
hwPtpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2, 3)).setObjects(("HUAWEI-PTP-MIB", "hwPtpPortStatusChange"), ("HUAWEI-PTP-MIB", "hwPtpClockSourceChange"), ("HUAWEI-PTP-MIB", "hwPtpTimeSynchronizationStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpNotificationsGroup = hwPtpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hwPtpNotificationsGroup.setDescription('Description.')
hwPtpManageExtInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2, 4)).setObjects(("HUAWEI-PTP-MIB", "hwPtpExtInterfaceOperateType"), ("HUAWEI-PTP-MIB", "hwPtpExtInterfaceIfIndex"), ("HUAWEI-PTP-MIB", "hwPtpExtInterfaceDirect"), ("HUAWEI-PTP-MIB", "hwPtpExtInterfaceProtocoltype"), ("HUAWEI-PTP-MIB", "hwPtpExtInterfaceElectricLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpManageExtInterfaceGroup = hwPtpManageExtInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwPtpManageExtInterfaceGroup.setDescription('Description.')
hwPtpManageCableLengthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2, 5)).setObjects(("HUAWEI-PTP-MIB", "hwPtpCableLengthIfindex"), ("HUAWEI-PTP-MIB", "hwPtpCableLengthTransDirect"), ("HUAWEI-PTP-MIB", "hwPtpCableLengthMode"), ("HUAWEI-PTP-MIB", "hwPtpCableLengthTransDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpManageCableLengthGroup = hwPtpManageCableLengthGroup.setStatus('current')
if mibBuilder.loadTexts: hwPtpManageCableLengthGroup.setDescription('Description.')
hwPtpManageCableTransGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 187, 7, 2, 6)).setObjects(("HUAWEI-PTP-MIB", "hwPtpCableTransIfindex"), ("HUAWEI-PTP-MIB", "hwPtpCableTransWarpMode"), ("HUAWEI-PTP-MIB", "hwPtpCableTransWarpDirect"), ("HUAWEI-PTP-MIB", "hwPtpCableTransWarpValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPtpManageCableTransGroup = hwPtpManageCableTransGroup.setStatus('current')
if mibBuilder.loadTexts: hwPtpManageCableTransGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-PTP-MIB", hwPtpLocalClockTimeSource=hwPtpLocalClockTimeSource, hwPtpPortMacEgressPacketPriority=hwPtpPortMacEgressPacketPriority, hwPtpBitsClockSourceTable=hwPtpBitsClockSourceTable, hwPtpPortTcOcStaticClockId=hwPtpPortTcOcStaticClockId, hwPtpPortAsymmetryNegativeCorrection=hwPtpPortAsymmetryNegativeCorrection, hwPtpSendDelay=hwPtpSendDelay, hwPtpCableLengthIfindex=hwPtpCableLengthIfindex, hwPtpExtInterfaceDirect=hwPtpExtInterfaceDirect, hwPtpPortStatisticEntry=hwPtpPortStatisticEntry, hwPtpExtInterfaceElectricLevel=hwPtpExtInterfaceElectricLevel, hwPtpPortEnable=hwPtpPortEnable, hwPtpBitsSignal=hwPtpBitsSignal, hwPtpPortType=hwPtpPortType, hwPtpPortRowStatus=hwPtpPortRowStatus, hwPtpTimeSynchronizationStatus=hwPtpTimeSynchronizationStatus, hwPtpExtInterfaceIfIndex=hwPtpExtInterfaceIfIndex, hwPtpComliance=hwPtpComliance, hwPtpPortUdpEgressVlanId=hwPtpPortUdpEgressVlanId, hwPtpPortAnnounceReceipTimeout=hwPtpPortAnnounceReceipTimeout, hwPtpCurrentMasterClockId=hwPtpCurrentMasterClockId, hwPtpDeviceType=hwPtpDeviceType, hwPtpLocalClockId=hwPtpLocalClockId, hwPtpClockSourceChange=hwPtpClockSourceChange, hwPtpExtInterfaceOperateType=hwPtpExtInterfaceOperateType, hwPtpUtc=hwPtpUtc, hwPtpPortTable=hwPtpPortTable, hwPtpPortState=hwPtpPortState, hwPtpCurrentMasterClockStepRemoved=hwPtpCurrentMasterClockStepRemoved, hwPtpPortRxPtpDiscardTrsprnsPktCnt=hwPtpPortRxPtpDiscardTrsprnsPktCnt, hwPtpBitsPortIndex=hwPtpBitsPortIndex, hwPtpGroups=hwPtpGroups, hwPtpFrequencyTraceable=hwPtpFrequencyTraceable, hwPtpPortUdpEgressPacketPriority=hwPtpPortUdpEgressPacketPriority, hwPtpPortSyncInterval=hwPtpPortSyncInterval, hwPtpPortDelayMechanism=hwPtpPortDelayMechanism, hwPtpPortRxPtpAnnouncePktCnt=hwPtpPortRxPtpAnnouncePktCnt, hwPtpPortAsymmetryPositiveCorrection=hwPtpPortAsymmetryPositiveCorrection, hwPtpPortRxPtpSyncPktCnt=hwPtpPortRxPtpSyncPktCnt, hwPtpCableTransWarpValue=hwPtpCableTransWarpValue, hwPtpPortCfgMsgFormat=hwPtpPortCfgMsgFormat, hwPtpBitsPriority2=hwPtpBitsPriority2, hwPtpPortMacEgressVlanId=hwPtpPortMacEgressVlanId, hwPtpPortMinDelayReqInterval=hwPtpPortMinDelayReqInterval, hwPtpPortRxPtpEndPktCnt=hwPtpPortRxPtpEndPktCnt, hwPtpCableTransTable=hwPtpCableTransTable, hwPtpDomain=hwPtpDomain, hwPtpBitsClockAccuracy=hwPtpBitsClockAccuracy, hwPtpBitsPriority1=hwPtpBitsPriority1, hwPtpPortTxFifoDiscardPktCn=hwPtpPortTxFifoDiscardPktCn, hwPtpTimeSynchronizationStatusChange=hwPtpTimeSynchronizationStatusChange, hwPtpGlobalObjects=hwPtpGlobalObjects, hwPtpCableTransIfindex=hwPtpCableTransIfindex, hwPtpCompliance=hwPtpCompliance, hwPtpPortAnnounceDrop=hwPtpPortAnnounceDrop, hwPtpEnable=hwPtpEnable, hwPtpVersion=hwPtpVersion, hwPtpPortRxPtpDiscardEndPktCnt=hwPtpPortRxPtpDiscardEndPktCnt, hwPtpNotifications=hwPtpNotifications, hwPtpPortEntry=hwPtpPortEntry, hwPtpBitsDirection=hwPtpBitsDirection, hwPtpPortMacEgressDestinationMac=hwPtpPortMacEgressDestinationMac, hwPtpPortPortVlan=hwPtpPortPortVlan, hwPtpBitsTimeSource=hwPtpBitsTimeSource, hwPtpPortObjectsGroup=hwPtpPortObjectsGroup, hwPtpBitsNormalStatus=hwPtpBitsNormalStatus, hwPtpPortAnnounceInterval=hwPtpPortAnnounceInterval, hwPtpPortCfgExtInterfaceMode=hwPtpPortCfgExtInterfaceMode, hwPtpPortCfgLinkStatus=hwPtpPortCfgLinkStatus, hwPtpPortObjects=hwPtpPortObjects, hwPtpLocalClockPriority1=hwPtpLocalClockPriority1, hwPtpCableLengthTransDirect=hwPtpCableLengthTransDirect, hwPtpCableTransWarpDirect=hwPtpCableTransWarpDirect, hwPtpExtInterfaceTable=hwPtpExtInterfaceTable, hwPtpCableLengthMode=hwPtpCableLengthMode, hwPtpPortStatisticTable=hwPtpPortStatisticTable, hwPtpExtInterfaceOperateIndex=hwPtpExtInterfaceOperateIndex, hwPtpExtInterfaceProtocoltype=hwPtpExtInterfaceProtocoltype, hwPtpPortUdpEgressDscp=hwPtpPortUdpEgressDscp, PYSNMP_MODULE_ID=hwPtpMIB, hwPtpPortMinPdelayReqInterval=hwPtpPortMinPdelayReqInterval, hwPtpBitsClockSourceEntry=hwPtpBitsClockSourceEntry, hwPtpCurrentMasterClockReceivePort=hwPtpCurrentMasterClockReceivePort, hwPtpPortSourcePortNum=hwPtpPortSourcePortNum, hwPtpPortStatisticIfIndex=hwPtpPortStatisticIfIndex, hwPtpLeapEmendationTime=hwPtpLeapEmendationTime, VlanIdOrNone=VlanIdOrNone, hwPtpLocalClockClass=hwPtpLocalClockClass, hwPtpBitsSwitch=hwPtpBitsSwitch, hwPtpCableLengthTransDistance=hwPtpCableLengthTransDistance, hwPtpPortTcOcStaticClockPortNum=hwPtpPortTcOcStaticClockPortNum, hwPtpTimeTraceable=hwPtpTimeTraceable, hwPtpLeap59orLeap61Valid=hwPtpLeap59orLeap61Valid, hwPtpPortDomain=hwPtpPortDomain, hwPtpPortIfIndex=hwPtpPortIfIndex, hwPtpManageExtInterfaceGroup=hwPtpManageExtInterfaceGroup, hwPtpPortStaticPktReset=hwPtpPortStaticPktReset, hwPtpPortUdpEgressSourceIp=hwPtpPortUdpEgressSourceIp, hwPtpPortUdpEgressDestinationIp=hwPtpPortUdpEgressDestinationIp, hwPtpCableTransWarpMode=hwPtpCableTransWarpMode, hwPtpPortRxPtpTrsprnsPktCnt=hwPtpPortRxPtpTrsprnsPktCnt, hwPtpReceiveDelay=hwPtpReceiveDelay, hwPtpTimeScale=hwPtpTimeScale, hwPtpPortUdpEgressDestinationMac=hwPtpPortUdpEgressDestinationMac, hwPtpManageCableLengthGroup=hwPtpManageCableLengthGroup, hwCurrentUtcOffsetValid=hwCurrentUtcOffsetValid, hwPtpPortSourcePortClockId=hwPtpPortSourcePortClockId, hwPtpNotificationsGroup=hwPtpNotificationsGroup, hwPtpConformance=hwPtpConformance, hwPtpLocalClockAccuracy=hwPtpLocalClockAccuracy, hwPtpExtInterfaceEntry=hwPtpExtInterfaceEntry, hwPtpMIB=hwPtpMIB, hwPtpGlobalObjectsGroup=hwPtpGlobalObjectsGroup, EnabledStatus=EnabledStatus, hwPtpSlaveOnly=hwPtpSlaveOnly, hwPtpCurrentUtcOffset=hwPtpCurrentUtcOffset, hwPtpManageCableTransGroup=hwPtpManageCableTransGroup, hwPtpBitsClockClass=hwPtpBitsClockClass, hwPtpCableLengthTable=hwPtpCableLengthTable, hwPtpPortTxPtpDiscardReqCnt=hwPtpPortTxPtpDiscardReqCnt, hwPtpPortStatusChange=hwPtpPortStatusChange, hwPtpLocalClockPriority2=hwPtpLocalClockPriority2)
