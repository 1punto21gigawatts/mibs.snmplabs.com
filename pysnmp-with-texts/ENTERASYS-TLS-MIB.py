#
# PySNMP MIB module ENTERASYS-TLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-TLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:04:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, MibIdentifier, Unsigned32, Gauge32, Integer32, TimeTicks, Counter32, Counter64, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Gauge32", "Integer32", "TimeTicks", "Counter32", "Counter64", "ModuleIdentity", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
etsysTlsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30))
etsysTlsMIB.setRevisions(('2002-11-14 15:34', '2002-11-01 21:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysTlsMIB.setRevisionsDescriptions(('Removed the etsysTlsServerCertBranch OID and added a completed pending enumeration to the etsysTlsGenerateKeys object.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysTlsMIB.setLastUpdated('200211141534Z')
if mibBuilder.loadTexts: etsysTlsMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysTlsMIB.setContactInfo('Postal: Enterasys Networks 35 Industrial Way, P.O. Box 5005 Rochester, NH 03867-0505 Phone: +1 603 332 9400 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysTlsMIB.setDescription("This MIB module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to Transport Layer Security (TLS) system [RFC2246] management functionality, specifically for embedded system implementations. This is a subset of the objects that would be required for a full-featured, host-based implementation. It provides configuration controls for Enterasys Networks' Secure Socket system management -- a feature that enhances system security by authenticating and encrypting the remote system management function.")
etsysTlsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1))
etsysTlsGeneralBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1))
etsysTlsNetworkBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 2))
etsysTlsServerKeyBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3))
etsysTlsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("reinitialize", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysTlsEnabled.setDescription('Controls the operation of the Transport Layer Security server task on the embedded system. When enabled, the TLS server will accept connection requests and create a secure transport layer on which to transmit target system configuration data.')
etsysTlsNumSoftConnects = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsNumSoftConnects.setStatus('current')
if mibBuilder.loadTexts: etsysTlsNumSoftConnects.setDescription("The soft limit for the maximum number of concurrent connections. If a new connection is initiated and it would exceed the soft limit, a '530 Service Unavailable' error will be reported to the client. Managed entities are free to enforce implementation specific limits on the upper limit of this object.")
etsysTlsNumHardConnects = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsNumHardConnects.setStatus('current')
if mibBuilder.loadTexts: etsysTlsNumHardConnects.setDescription('The hard limit for the maximum number of concurrent connections. If a new connection is initiated and it would exceed the hard limit, the connection is closed unconditionally. Managed entities are free to enforce implementation specific limits on the upper limit of this object.')
etsysTlsMaxHardConnects = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysTlsMaxHardConnects.setStatus('current')
if mibBuilder.loadTexts: etsysTlsMaxHardConnects.setDescription('The maximum number of concurrent connections a platform supports. Allows managed entities to enforce implementation specific limits on the upper limit of the etsysTlsNumHardConnects object.')
etsysTlsKeepOpenTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsKeepOpenTimeout.setStatus('current')
if mibBuilder.loadTexts: etsysTlsKeepOpenTimeout.setDescription("How long in time a 'Keep-Alive' connection is kept open if new requests are not seen. The timeout is given in seconds.")
etsysTlsHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsHttpsPort.setStatus('current')
if mibBuilder.loadTexts: etsysTlsHttpsPort.setDescription('The TCP port that the HTTPs server will listen to.')
etsysTlsGenerateKeys = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notInitiated", 1), ("completed", 2), ("failed", 3), ("generate", 4), ("completedPending", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsGenerateKeys.setStatus('current')
if mibBuilder.loadTexts: etsysTlsGenerateKeys.setDescription('Causes the host to generate a new key pair using the cipher algorithm currently selected in etsysTlsAdminKeyType. Note that this can be compute intensive on many platforms. The meaning of the values are as follows: notInitiated (1) On a write, this is a no-operation, on a read, it indicates that no key material generation operation has ever been initiated, at least since the last reset to factory defaults initialization of the managed entity. No key material exists. completed (2) On a write, this is a no-operation, on a read, this indicates that a key pair has been successfully generated. failed (3) On a write, this is a no-operation, on a read, it indicates that the key generation operation has failed. generate (4) On a write, this causes the managed entity to generate a new key pair, on a read, it indicates that the managed entity is still working on creating the new keys. completedPending (5) On a write, this is a no-operation, on a read, this indicates that a key pair has been successfully generated but its use is pending due to another required operation, such as a reboot.')
etsysTlsAdminKeyType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dsa512", 1), ("rsa512", 2), ("dsa768", 3), ("rsa768", 4), ("dsa1024", 5), ("rsa1024", 6), ("dsa2048", 7), ("rsa2048", 8), ("dsa3072", 9), ("rsa3072", 10))).clone('rsa512')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsAdminKeyType.setStatus('current')
if mibBuilder.loadTexts: etsysTlsAdminKeyType.setDescription('Determines the type of the key to be (re)created on the next key (re)creation operation. The etsysTlsOperKeyType object returns the type of key that is currently being used by the TLS server.')
etsysTlsOperKeyType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99))).clone(namedValues=NamedValues(("dsa512", 1), ("rsa512", 2), ("dsa768", 3), ("rsa768", 4), ("dsa1024", 5), ("rsa1024", 6), ("dsa2048", 7), ("rsa2048", 8), ("dsa3072", 9), ("rsa3072", 10), ("none", 99))).clone('rsa512')).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysTlsOperKeyType.setStatus('current')
if mibBuilder.loadTexts: etsysTlsOperKeyType.setDescription('Indicates the type of the key pair currently in effect on the managed entity. The value of the etsysTlsAdminKeyType object is copied to the etsysTlsOperKeyType object upon successful completion of the (re)creation of a key pair.')
etsysTlsSignatureType = MibScalar((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dhAnon", 1), ("dsaSha1", 2), ("dsaSha", 3), ("rsaSha1", 4), ("rsaMd2", 5), ("rsaMd5", 6))).clone('dhAnon')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysTlsSignatureType.setStatus('current')
if mibBuilder.loadTexts: etsysTlsSignatureType.setDescription('Denotes the signature method that is used for authenticating the exchange of keys. DSS (Digital Signature Standard) DSA (Digital Signature Algorithm, DSS compliant) RSA (Rivest, Shamir and Adelman) Sha (Secure Hash Algorithm) Md5 (Message Digest 5) dhAnon (1) - Anonymous Diffie Hellmen, no signatures dsaSha1 (2) - DSS , Sha-1 Hash dsaSha (3) - DSS signatures, Sha Hash rsaSha1 (4) - RSA signatures, Sha-1 Hash rsaMd2 (5) - RSA signatures, Md2 Hash rsaMd5 (6) - RSA signatures, Md5 Hash ')
etsysTlsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2))
etsysTlsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 1))
etsysTlsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 2))
etsysTlsBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 1, 1)).setObjects(("ENTERASYS-TLS-MIB", "etsysTlsEnabled"), ("ENTERASYS-TLS-MIB", "etsysTlsNumSoftConnects"), ("ENTERASYS-TLS-MIB", "etsysTlsNumHardConnects"), ("ENTERASYS-TLS-MIB", "etsysTlsMaxHardConnects"), ("ENTERASYS-TLS-MIB", "etsysTlsKeepOpenTimeout"), ("ENTERASYS-TLS-MIB", "etsysTlsHttpsPort"), ("ENTERASYS-TLS-MIB", "etsysTlsGenerateKeys"), ("ENTERASYS-TLS-MIB", "etsysTlsAdminKeyType"), ("ENTERASYS-TLS-MIB", "etsysTlsOperKeyType"), ("ENTERASYS-TLS-MIB", "etsysTlsSignatureType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysTlsBaseGroup = etsysTlsBaseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysTlsBaseGroup.setDescription('A collection of objects providing configuration information for the TLS service.')
etsysTlsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 30, 2, 2, 1)).setObjects(("ENTERASYS-TLS-MIB", "etsysTlsBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysTlsCompliance = etsysTlsCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysTlsCompliance.setDescription('The compliance statement for devices that support the Enterasys Secure Socket (TLS) MIB.')
mibBuilder.exportSymbols("ENTERASYS-TLS-MIB", etsysTlsSignatureType=etsysTlsSignatureType, etsysTlsCompliances=etsysTlsCompliances, etsysTlsKeepOpenTimeout=etsysTlsKeepOpenTimeout, etsysTlsGenerateKeys=etsysTlsGenerateKeys, etsysTlsGroups=etsysTlsGroups, etsysTlsConformance=etsysTlsConformance, etsysTlsCompliance=etsysTlsCompliance, etsysTlsObjects=etsysTlsObjects, etsysTlsMaxHardConnects=etsysTlsMaxHardConnects, etsysTlsServerKeyBranch=etsysTlsServerKeyBranch, etsysTlsMIB=etsysTlsMIB, etsysTlsOperKeyType=etsysTlsOperKeyType, etsysTlsEnabled=etsysTlsEnabled, etsysTlsNumSoftConnects=etsysTlsNumSoftConnects, etsysTlsGeneralBranch=etsysTlsGeneralBranch, etsysTlsNetworkBranch=etsysTlsNetworkBranch, etsysTlsAdminKeyType=etsysTlsAdminKeyType, etsysTlsNumHardConnects=etsysTlsNumHardConnects, etsysTlsHttpsPort=etsysTlsHttpsPort, PYSNMP_MODULE_ID=etsysTlsMIB, etsysTlsBaseGroup=etsysTlsBaseGroup)
