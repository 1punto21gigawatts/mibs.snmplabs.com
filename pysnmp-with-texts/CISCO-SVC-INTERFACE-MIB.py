#
# PySNMP MIB module CISCO-SVC-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SVC-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, FcNameId = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex", "FcNameId")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, iso, Gauge32, Bits, Counter32, MibIdentifier, Integer32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "iso", "Gauge32", "Bits", "Counter32", "MibIdentifier", "Integer32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
ciscoSvcInterfaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 378))
ciscoSvcInterfaceMIB.setRevisions(('2004-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSvcInterfaceMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSvcInterfaceMIB.setLastUpdated('200409210000Z')
if mibBuilder.loadTexts: ciscoSvcInterfaceMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoSvcInterfaceMIB.setContactInfo('Cisco Systems Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoSvcInterfaceMIB.setDescription('MIB module for displaying and configuring SVC (SAN Volume Controller) related features in the Storage Area Network (SAN) switches. SVC is the SAN Volume Controller that implements the specialized virtualization and caching features for storage attached to a SAN.')
ciscoSvcInterfaceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 1))
ciscoSvcInterfaceMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 2))
cSvcInterfaceConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1))
cSvcInterfaceTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2))
class NportType(TextualConvention, Integer32):
    description = 'Type of the virtual N-port. The types are 1 = Initiator 2 = Target 3 = Mgmt '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

csiNportTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1), )
if mibBuilder.loadTexts: csiNportTable.setStatus('current')
if mibBuilder.loadTexts: csiNportTable.setDescription('A table that lets the user configure and monitor the virtual N-ports. A virtual N-port is a logical entity within an SVC line card that simulates a real Fibre Channel N-port.')
csiNportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-SVC-INTERFACE-MIB", "csiNportIfIndex"), (0, "CISCO-SVC-INTERFACE-MIB", "csiNportType"), (0, "CISCO-SVC-INTERFACE-MIB", "csiNportVsanId"))
if mibBuilder.loadTexts: csiNportEntry.setStatus('current')
if mibBuilder.loadTexts: csiNportEntry.setDescription('An entry in the csiNportTable, that describes a virtual N-port. Each virtual N-port is identified by the ifIndex of the SVC interface on the SVC line card, the type of N-port and the VSAN id of the VSAN it belongs to. Each virtual N-port also has a Fibre Channel Identifier, operational state and a WWN (Worldwide Name).')
csiNportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csiNportIfIndex.setStatus('current')
if mibBuilder.loadTexts: csiNportIfIndex.setDescription('The ifIndex of the SVC interface to which this Nport belongs to. A SVC interface is a FC interface that implements virtualization and caching. Note that the ifType of this interface is fiberChannel (56).')
csiNportType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 2), NportType())
if mibBuilder.loadTexts: csiNportType.setStatus('current')
if mibBuilder.loadTexts: csiNportType.setDescription('The type of this N-port. There are 3 types of Nport - initiator - Initiates communication with SCSI (Small Computer Systems Interface) targets. target - Responds to the communication from the FC-SCSI initiators. mgmt - Communicates with other SVC interfaces. ')
csiNportVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 3), VsanIndex())
if mibBuilder.loadTexts: csiNportVsanId.setStatus('current')
if mibBuilder.loadTexts: csiNportVsanId.setDescription('The VSAN identifier of the virtual N-port.')
csiNportPwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 4), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiNportPwwn.setStatus('current')
if mibBuilder.loadTexts: csiNportPwwn.setDescription('The WWN (Worldwide Name) of the virtual N-port.')
csiNportFcid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportFcid.setStatus('current')
if mibBuilder.loadTexts: csiNportFcid.setDescription('Fibre Channel Identifier of the virtual N-port.')
csiNportState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportState.setStatus('current')
if mibBuilder.loadTexts: csiNportState.setDescription('The operational state of the virtual N-port.')
csiNportDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("adminDown", 2), ("ifSoftwareDown", 3), ("lineCardSwDown", 4), ("vsanDown", 5), ("inRemovalState", 6), ("ifHardwareDown", 7), ("uninitialized", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportDownReason.setStatus('current')
if mibBuilder.loadTexts: csiNportDownReason.setDescription("If the state of the N-port is 'down' as depicted by the instance of csiNportState, this objects denotes the reason why this N-port is 'down'. When the N-port is 'up' the value returned by this object is 'none'. adminDown - The user has configured the SVC interface that contains this N-port as down. ifSoftwareDown - Virtualization software is down. lineCardSwDown - Line card software is down. vsanDown - The VSAN that this N-port belongs to (instance of csiNportVsanId), is down. inRemovalState - The SVC interface that this N-port belongs to, is in the process of going down. ifHardwareDown - The line card hardware is down. uninitialized - Port is being initialized. ")
csiNportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csiNportRowStatus.setStatus('current')
if mibBuilder.loadTexts: csiNportRowStatus.setDescription('Status of this row.')
csiSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2), )
if mibBuilder.loadTexts: csiSessionTable.setStatus('current')
if mibBuilder.loadTexts: csiSessionTable.setDescription('A table of SVC sessions. A SVC session is a FC session between a virtual N-port and any other N-port within a FC fabric.')
csiSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SVC-INTERFACE-MIB", "csiSessionIfIndex"), (0, "CISCO-SVC-INTERFACE-MIB", "csiSessionType"), (0, "CISCO-SVC-INTERFACE-MIB", "csiSessionVsanId"), (0, "CISCO-SVC-INTERFACE-MIB", "csiSessionId"))
if mibBuilder.loadTexts: csiSessionEntry.setStatus('current')
if mibBuilder.loadTexts: csiSessionEntry.setDescription("An entry in the csiSessionTable. An entry in the session table is identified by a virtual N-port and a session Identifier. Each N-port is identified by the ifIndex, Nport type and the VSAN id as described above in the csiNportEntry. The combination of the N-port and the sessionId uniquely identifies a session. Each session has the local N-port's WWN, remote N-port's WWN and remote node's WWN as well as remote N-port's FcId.")
csiSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csiSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: csiSessionIfIndex.setDescription('The ifIndex of the SVC interface to which this N-port belongs to. ')
csiSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 2), NportType())
if mibBuilder.loadTexts: csiSessionType.setStatus('current')
if mibBuilder.loadTexts: csiSessionType.setDescription('The type of the N-port for this session. ')
csiSessionVsanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 3), VsanIndex())
if mibBuilder.loadTexts: csiSessionVsanId.setStatus('current')
if mibBuilder.loadTexts: csiSessionVsanId.setDescription('The VSAN identifier of the N-port for this session. ')
csiSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csiSessionId.setStatus('current')
if mibBuilder.loadTexts: csiSessionId.setDescription('The session identifier of this session. ')
csiSessionNportPwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 5), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionNportPwwn.setStatus('current')
if mibBuilder.loadTexts: csiSessionNportPwwn.setDescription('The WWN of the N-port that belongs to this session.')
csiSessionPeerPwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 6), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionPeerPwwn.setStatus('current')
if mibBuilder.loadTexts: csiSessionPeerPwwn.setDescription('The WWN of the remote N-port for this session.')
csiSessionPeerNwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 7), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionPeerNwwn.setStatus('current')
if mibBuilder.loadTexts: csiSessionPeerNwwn.setDescription('The WWN of the remote node for this session.')
csiSessionPeerFcid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionPeerFcid.setStatus('current')
if mibBuilder.loadTexts: csiSessionPeerFcid.setDescription('Fibre Channel Identifier of the remote port for this session. ')
csiInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3), )
if mibBuilder.loadTexts: csiInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceStatsTable.setDescription('A table that lists various statistics for each SVC interface. ')
csiInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-SVC-INTERFACE-MIB", "csiNportIfIndex"))
if mibBuilder.loadTexts: csiInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceStatsEntry.setDescription('An entry in the csiInterfaceStatsTable, indexed by the N-port ifIndex and containing interface statistics such as the input and output frames, bytes and rates.')
csiInterfaceInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceInFrames.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceInFrames.setDescription('Number of incoming frames on this interface.')
csiInterfaceInFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceInFrameRate.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceInFrameRate.setDescription('Number of incoming frames per second on this interface.')
csiInterfaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceInBytes.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceInBytes.setDescription('Number of incoming bytes on this interface.')
csiInterfaceInBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceInBytesRate.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceInBytesRate.setDescription('Number of incoming bytes per second on this interface.')
csiInterfaceOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceOutFrames.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceOutFrames.setDescription('Number of outgoing frames on this interface.')
csiInterfaceOutFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceOutFrameRate.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceOutFrameRate.setDescription('Number of outgoing frames per second on this interface.')
csiInterfaceOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceOutBytes.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceOutBytes.setDescription('Number of outgoing bytes on this interface.')
csiInterfaceOutBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceOutBytesRate.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceOutBytesRate.setDescription('Number of outgoing bytes per second on this interface.')
csiNportStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4), )
if mibBuilder.loadTexts: csiNportStatsTable.setStatus('current')
if mibBuilder.loadTexts: csiNportStatsTable.setDescription('A table of N-port statistics.')
csiNportStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-SVC-INTERFACE-MIB", "csiNportIfIndex"), (0, "CISCO-SVC-INTERFACE-MIB", "csiNportType"), (0, "CISCO-SVC-INTERFACE-MIB", "csiNportVsanId"))
if mibBuilder.loadTexts: csiNportStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csiNportStatsEntry.setDescription('An entry in the csiNportStatsTable. ')
csiNportSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportSessions.setStatus('current')
if mibBuilder.loadTexts: csiNportSessions.setDescription('Number of pen sessions on this virtual N-port.')
csiNportInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportInFrames.setStatus('current')
if mibBuilder.loadTexts: csiNportInFrames.setDescription('Number of incoming frames on this virtual N-port.')
csiNportInFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportInFrameRate.setStatus('current')
if mibBuilder.loadTexts: csiNportInFrameRate.setDescription('Number of incoming frames per second on this virtual N-port.')
csiNportInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportInBytes.setStatus('current')
if mibBuilder.loadTexts: csiNportInBytes.setDescription('Number of incoming bytes on this virtual N-port.')
csiNportInBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportInBytesRate.setStatus('current')
if mibBuilder.loadTexts: csiNportInBytesRate.setDescription('Number of incoming bytes per second on this virtual N-port.')
csiNportOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportOutFrames.setStatus('current')
if mibBuilder.loadTexts: csiNportOutFrames.setDescription('Number of outgoing frames on this virtual N-port.')
csiNportOutFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportOutFrameRate.setStatus('current')
if mibBuilder.loadTexts: csiNportOutFrameRate.setDescription('Number of outgoing frames per second on this virtual N-port.')
csiNportOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportOutBytes.setStatus('current')
if mibBuilder.loadTexts: csiNportOutBytes.setDescription('Number of outgoing bytes on this virtual N-port.')
csiNportOutBytesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiNportOutBytesRate.setStatus('current')
if mibBuilder.loadTexts: csiNportOutBytesRate.setDescription('Number of outgoing bytes per second on this virtual N-port.')
csiSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5), )
if mibBuilder.loadTexts: csiSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: csiSessionStatsTable.setDescription('A table of session statistics.')
csiSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-SVC-INTERFACE-MIB", "csiSessionIfIndex"), (0, "CISCO-SVC-INTERFACE-MIB", "csiSessionType"), (0, "CISCO-SVC-INTERFACE-MIB", "csiSessionVsanId"), (0, "CISCO-SVC-INTERFACE-MIB", "csiSessionId"))
if mibBuilder.loadTexts: csiSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csiSessionStatsEntry.setDescription('An entry in the csiSessionStatsEntry.')
csiSessionInELSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInELSFrames.setStatus('current')
if mibBuilder.loadTexts: csiSessionInELSFrames.setDescription('Number of incoming Extended Link Service frames in this session.')
csiSessionInBLSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInBLSFrames.setStatus('current')
if mibBuilder.loadTexts: csiSessionInBLSFrames.setDescription('Number of incoming Basic Link Service frames in this session.')
csiSessionInFCPCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPCmds.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPCmds.setDescription('Number of incoming FCP Command frames in this session. Note that FCP stands for Fibre Channel Protocol.')
csiSessionInFCPXferRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPXferRdys.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPXferRdys.setDescription('Number of incoming FCP Transfer Ready frames in this session.')
csiSessionInFCPDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPDataFrames.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPDataFrames.setDescription('Number of incoming FCP Data frames.')
csiSessionInFCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPStatus.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPStatus.setDescription('Number of incoming FCP Status frames.')
csiSessionInFCPDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPDataBytes.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPDataBytes.setDescription('Number of incoming FCP Data bytes.')
csiSessionInFCPOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPOverRuns.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPOverRuns.setDescription('Number of incoming FCP Overrun frames.')
csiSessionInFCPUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPUnderRuns.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPUnderRuns.setDescription('Number of incoming FCP Underrun frames.')
csiSessionInAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInAborts.setStatus('current')
if mibBuilder.loadTexts: csiSessionInAborts.setDescription('Number of incoming aborted frames.')
csiSessionOutELSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutELSFrames.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutELSFrames.setDescription('Number of outgoing Extended Link Service frames in this session.')
csiSessionOutBLSFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutBLSFrames.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutBLSFrames.setDescription('Number of outgoing Basic Link Service frames in this session.')
csiSessionOutFCPCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPCmds.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPCmds.setDescription('Number of outgoing FCP Command frames in this session.')
csiSessionOutFCPXferRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPXferRdys.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPXferRdys.setDescription('Number of outgoing FCP Transfer Ready frames in this session.')
csiSessionOutFCPDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPDataFrames.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPDataFrames.setDescription('Number of outgoing FCP Data frames in this session.')
csiSessionOutFCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPStatus.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPStatus.setDescription('Number of outgoing FCP Status frames in this session.')
csiSessionOutFCPDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPDataBytes.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPDataBytes.setDescription('Number of outgoing FCP Data bytes in this session.')
csiSessionOutFCPOverRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPOverRuns.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPOverRuns.setDescription('Number of outgoing FCP Overrun frames in this session.')
csiSessionOutFCPUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutFCPUnderRuns.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutFCPUnderRuns.setDescription('Number of outgoing FCP Underrun frames in this session.')
csiSessionOutAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOutAborts.setStatus('current')
if mibBuilder.loadTexts: csiSessionOutAborts.setDescription('Number of outgoing aborted frames in this session.')
csiSessionOpenXchanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionOpenXchanges.setStatus('current')
if mibBuilder.loadTexts: csiSessionOpenXchanges.setDescription('Number of Open Exchanges in this session.')
csiSessionInBadFc2Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInBadFc2Drops.setStatus('current')
if mibBuilder.loadTexts: csiSessionInBadFc2Drops.setDescription('Number of FC2 dropped frames in this session.')
csiSessionInBadFcPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInBadFcPDrops.setStatus('current')
if mibBuilder.loadTexts: csiSessionInBadFcPDrops.setDescription('Number of FCP dropped frames.')
csiSessionInFCPDataExcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiSessionInFCPDataExcess.setStatus('current')
if mibBuilder.loadTexts: csiSessionInFCPDataExcess.setDescription('Number of FCP Data Excess frames in this session.')
csiInterfaceNwwnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 6), )
if mibBuilder.loadTexts: csiInterfaceNwwnTable.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceNwwnTable.setDescription('A table that lists Nwwn for SVC interfaces. ')
csiInterfaceNwwnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-SVC-INTERFACE-MIB", "csiNportIfIndex"))
if mibBuilder.loadTexts: csiInterfaceNwwnEntry.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceNwwnEntry.setDescription('An entry in the csiInterfaceNwwnTable, indexed by the N-port ifIndex and containing interface Nwwn and a description of the cause if that interface is down.')
csiInterfaceNwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 6, 1, 1), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csiInterfaceNwwn.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceNwwn.setDescription('Nwwn of this interface.')
csiInterfaceOperStateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csiInterfaceOperStateCause.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceOperStateCause.setDescription('A description of the cause that the interface is down.')
csiErrorId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiErrorId.setStatus('current')
if mibBuilder.loadTexts: csiErrorId.setDescription('Error Id')
csiErrorSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiErrorSeqNumber.setStatus('current')
if mibBuilder.loadTexts: csiErrorSeqNumber.setDescription('Error Sequence Number')
csiSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiSlotNumber.setStatus('current')
if mibBuilder.loadTexts: csiSlotNumber.setDescription('Slot Number of the slot from where the notification is being generated.')
csiPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiPortNumber.setStatus('current')
if mibBuilder.loadTexts: csiPortNumber.setDescription('Port Number of the port from where the notification is being generated.')
csiObjName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 5), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiObjName.setStatus('current')
if mibBuilder.loadTexts: csiObjName.setDescription('User configured name of an object. e.g. vDisk1, where the user has named the virtual disk 1 as vDisk1.')
csiErrorText = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 6), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiErrorText.setStatus('current')
if mibBuilder.loadTexts: csiErrorText.setDescription(' Full text string describing the Error.')
csiMachineType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 7), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiMachineType.setStatus('current')
if mibBuilder.loadTexts: csiMachineType.setDescription('Machine Type in which the SVC software is running. This could be the vendor product identifier. e.g MDS9000')
csiCardSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 8), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiCardSerialNo.setStatus('current')
if mibBuilder.loadTexts: csiCardSerialNo.setDescription('The serial number of the card from where the notification is being generated.')
csiSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 9), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiSwVersion.setStatus('current')
if mibBuilder.loadTexts: csiSwVersion.setDescription('The SVC software version.')
csiSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 10), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiSwitchName.setStatus('current')
if mibBuilder.loadTexts: csiSwitchName.setDescription('The user configured name of the switch that is running the SVC software.')
csiClusterName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 11), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiClusterName.setStatus('current')
if mibBuilder.loadTexts: csiClusterName.setDescription('The user configured name of the cluster.')
csiNodeName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 378, 1, 2, 12), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csiNodeName.setStatus('current')
if mibBuilder.loadTexts: csiNodeName.setDescription('The user configured name of the SVC node.')
csiMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 2, 0))
csiErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 378, 2, 0, 1)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiErrorId"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorSeqNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiSlotNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiPortNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiObjName"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorText"), ("CISCO-SVC-INTERFACE-MIB", "csiMachineType"), ("CISCO-SVC-INTERFACE-MIB", "csiCardSerialNo"), ("CISCO-SVC-INTERFACE-MIB", "csiSwVersion"), ("CISCO-SVC-INTERFACE-MIB", "csiSwitchName"), ("CISCO-SVC-INTERFACE-MIB", "csiClusterName"), ("CISCO-SVC-INTERFACE-MIB", "csiNodeName"))
if mibBuilder.loadTexts: csiErrorTrap.setStatus('current')
if mibBuilder.loadTexts: csiErrorTrap.setDescription('SVC error trap. The objects within this trap convey the information about things such as the port number, slot number machine type etc for which the error occurred. This notification will be generated when there is an error condition in any of the SVC operations.')
csiWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 378, 2, 0, 2)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiErrorId"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorSeqNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiSlotNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiPortNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiObjName"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorText"), ("CISCO-SVC-INTERFACE-MIB", "csiMachineType"), ("CISCO-SVC-INTERFACE-MIB", "csiCardSerialNo"), ("CISCO-SVC-INTERFACE-MIB", "csiSwVersion"), ("CISCO-SVC-INTERFACE-MIB", "csiSwitchName"), ("CISCO-SVC-INTERFACE-MIB", "csiClusterName"), ("CISCO-SVC-INTERFACE-MIB", "csiNodeName"))
if mibBuilder.loadTexts: csiWarningTrap.setStatus('current')
if mibBuilder.loadTexts: csiWarningTrap.setDescription('SVC warning trap The objects within this trap convey the information about things such as the port number, slot number machine type etc for which the error occurred. This notification will be generated when there is an warning condition in any of the SVC operations.')
csiInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 378, 2, 0, 3)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiErrorId"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorSeqNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiSlotNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiPortNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiObjName"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorText"), ("CISCO-SVC-INTERFACE-MIB", "csiMachineType"), ("CISCO-SVC-INTERFACE-MIB", "csiCardSerialNo"), ("CISCO-SVC-INTERFACE-MIB", "csiSwVersion"), ("CISCO-SVC-INTERFACE-MIB", "csiSwitchName"), ("CISCO-SVC-INTERFACE-MIB", "csiClusterName"), ("CISCO-SVC-INTERFACE-MIB", "csiNodeName"))
if mibBuilder.loadTexts: csiInformationTrap.setStatus('current')
if mibBuilder.loadTexts: csiInformationTrap.setDescription('SVC information trap The objects within this trap convey the information about things such as the port number, slot number machine type etc for which the information needs to be conveyed. This notification will be generated when there is an information needs to be conveyed in any of the SVC operations.')
ciscoSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 3))
ciscoSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 1))
ciscoSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2))
ciscoSvcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 1, 1)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiNportGroup"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionGroup"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceStatsGroup"), ("CISCO-SVC-INTERFACE-MIB", "csiNportStatsGroup"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionStatsGroup"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceNwwnGroup"), ("CISCO-SVC-INTERFACE-MIB", "csiNotifObjectsGroup"), ("CISCO-SVC-INTERFACE-MIB", "cefcMgmtNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSvcMIBCompliance = ciscoSvcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSvcMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-SVC-INERFACE-MIB.')
csiNportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 1)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiNportPwwn"), ("CISCO-SVC-INTERFACE-MIB", "csiNportFcid"), ("CISCO-SVC-INTERFACE-MIB", "csiNportState"), ("CISCO-SVC-INTERFACE-MIB", "csiNportDownReason"), ("CISCO-SVC-INTERFACE-MIB", "csiNportRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiNportGroup = csiNportGroup.setStatus('current')
if mibBuilder.loadTexts: csiNportGroup.setDescription('A collection of objects for Nport configuration.')
csiSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 2)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiSessionNportPwwn"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionPeerPwwn"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionPeerNwwn"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionPeerFcid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiSessionGroup = csiSessionGroup.setStatus('current')
if mibBuilder.loadTexts: csiSessionGroup.setDescription('A collection of objects for session configuration.')
csiInterfaceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 3)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiInterfaceInFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceInFrameRate"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceInBytes"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceInBytesRate"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceOutFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceOutFrameRate"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceOutBytes"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceOutBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiInterfaceStatsGroup = csiInterfaceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceStatsGroup.setDescription('A collection of objects for interface statistics.')
csiNportStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 4)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiNportSessions"), ("CISCO-SVC-INTERFACE-MIB", "csiNportInFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiNportInFrameRate"), ("CISCO-SVC-INTERFACE-MIB", "csiNportInBytes"), ("CISCO-SVC-INTERFACE-MIB", "csiNportInBytesRate"), ("CISCO-SVC-INTERFACE-MIB", "csiNportOutFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiNportOutFrameRate"), ("CISCO-SVC-INTERFACE-MIB", "csiNportOutBytes"), ("CISCO-SVC-INTERFACE-MIB", "csiNportOutBytesRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiNportStatsGroup = csiNportStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csiNportStatsGroup.setDescription('A collection of objects for N-port statistics.')
csiSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 5)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiSessionInELSFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInBLSFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPCmds"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPXferRdys"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPDataFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPStatus"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPDataBytes"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPOverRuns"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPUnderRuns"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInAborts"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutELSFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutBLSFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPCmds"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPXferRdys"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPDataFrames"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPStatus"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPDataBytes"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPOverRuns"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutFCPUnderRuns"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOutAborts"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionOpenXchanges"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInBadFc2Drops"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInBadFcPDrops"), ("CISCO-SVC-INTERFACE-MIB", "csiSessionInFCPDataExcess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiSessionStatsGroup = csiSessionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csiSessionStatsGroup.setDescription('A collection of objects for Session statistics.')
csiInterfaceNwwnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 6)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiInterfaceNwwn"), ("CISCO-SVC-INTERFACE-MIB", "csiInterfaceOperStateCause"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiInterfaceNwwnGroup = csiInterfaceNwwnGroup.setStatus('current')
if mibBuilder.loadTexts: csiInterfaceNwwnGroup.setDescription('A collection of objects for Interface nwwn.')
csiNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 7)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiErrorId"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorSeqNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiSlotNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiPortNumber"), ("CISCO-SVC-INTERFACE-MIB", "csiObjName"), ("CISCO-SVC-INTERFACE-MIB", "csiErrorText"), ("CISCO-SVC-INTERFACE-MIB", "csiMachineType"), ("CISCO-SVC-INTERFACE-MIB", "csiCardSerialNo"), ("CISCO-SVC-INTERFACE-MIB", "csiSwVersion"), ("CISCO-SVC-INTERFACE-MIB", "csiSwitchName"), ("CISCO-SVC-INTERFACE-MIB", "csiClusterName"), ("CISCO-SVC-INTERFACE-MIB", "csiNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csiNotifObjectsGroup = csiNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: csiNotifObjectsGroup.setDescription('A collection of objects for sending notifications.')
cefcMgmtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 378, 3, 2, 8)).setObjects(("CISCO-SVC-INTERFACE-MIB", "csiErrorTrap"), ("CISCO-SVC-INTERFACE-MIB", "csiWarningTrap"), ("CISCO-SVC-INTERFACE-MIB", "csiInformationTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cefcMgmtNotificationsGroup = cefcMgmtNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cefcMgmtNotificationsGroup.setDescription('The notifications which a SVC Management entity is required to implement.')
mibBuilder.exportSymbols("CISCO-SVC-INTERFACE-MIB", csiSessionOutFCPCmds=csiSessionOutFCPCmds, csiSessionVsanId=csiSessionVsanId, csiSessionOutFCPDataBytes=csiSessionOutFCPDataBytes, csiInterfaceInFrameRate=csiInterfaceInFrameRate, csiNportState=csiNportState, csiInformationTrap=csiInformationTrap, csiErrorTrap=csiErrorTrap, csiSessionTable=csiSessionTable, csiErrorId=csiErrorId, csiSessionOutELSFrames=csiSessionOutELSFrames, csiNportVsanId=csiNportVsanId, csiNportIfIndex=csiNportIfIndex, csiInterfaceOperStateCause=csiInterfaceOperStateCause, csiSessionNportPwwn=csiSessionNportPwwn, csiNportInBytes=csiNportInBytes, csiInterfaceStatsGroup=csiInterfaceStatsGroup, ciscoSvcInterfaceMIBObjects=ciscoSvcInterfaceMIBObjects, csiInterfaceOutFrameRate=csiInterfaceOutFrameRate, csiNotifObjectsGroup=csiNotifObjectsGroup, ciscoSvcMIBGroups=ciscoSvcMIBGroups, csiInterfaceOutBytes=csiInterfaceOutBytes, csiSessionInFCPStatus=csiSessionInFCPStatus, csiNportType=csiNportType, csiSessionInBLSFrames=csiSessionInBLSFrames, csiErrorSeqNumber=csiErrorSeqNumber, csiSessionInFCPDataBytes=csiSessionInFCPDataBytes, csiSessionPeerFcid=csiSessionPeerFcid, csiSwVersion=csiSwVersion, csiSessionOutBLSFrames=csiSessionOutBLSFrames, csiNportDownReason=csiNportDownReason, csiSessionGroup=csiSessionGroup, csiInterfaceInBytes=csiInterfaceInBytes, csiNodeName=csiNodeName, csiSessionInFCPDataFrames=csiSessionInFCPDataFrames, csiErrorText=csiErrorText, csiNportOutBytesRate=csiNportOutBytesRate, csiNportFcid=csiNportFcid, csiSessionInFCPDataExcess=csiSessionInFCPDataExcess, csiInterfaceInBytesRate=csiInterfaceInBytesRate, csiNportPwwn=csiNportPwwn, csiSessionOutFCPXferRdys=csiSessionOutFCPXferRdys, csiSessionInFCPUnderRuns=csiSessionInFCPUnderRuns, csiSessionPeerPwwn=csiSessionPeerPwwn, ciscoSvcMIBCompliance=ciscoSvcMIBCompliance, csiInterfaceNwwnGroup=csiInterfaceNwwnGroup, csiSessionInFCPXferRdys=csiSessionInFCPXferRdys, csiNportStatsGroup=csiNportStatsGroup, csiSessionInBadFcPDrops=csiSessionInBadFcPDrops, csiSessionStatsEntry=csiSessionStatsEntry, cefcMgmtNotificationsGroup=cefcMgmtNotificationsGroup, csiSessionOutFCPOverRuns=csiSessionOutFCPOverRuns, csiObjName=csiObjName, csiPortNumber=csiPortNumber, csiNportOutFrameRate=csiNportOutFrameRate, csiSessionInFCPOverRuns=csiSessionInFCPOverRuns, csiNportOutBytes=csiNportOutBytes, csiSessionStatsTable=csiSessionStatsTable, ciscoSvcMIBCompliances=ciscoSvcMIBCompliances, csiNportInFrames=csiNportInFrames, csiNportGroup=csiNportGroup, csiSessionOutFCPStatus=csiSessionOutFCPStatus, csiSessionOutAborts=csiSessionOutAborts, csiWarningTrap=csiWarningTrap, csiMachineType=csiMachineType, csiSlotNumber=csiSlotNumber, csiNportStatsTable=csiNportStatsTable, csiSwitchName=csiSwitchName, csiSessionId=csiSessionId, csiInterfaceNwwnEntry=csiInterfaceNwwnEntry, csiSessionInFCPCmds=csiSessionInFCPCmds, csiInterfaceOutBytesRate=csiInterfaceOutBytesRate, NportType=NportType, csiCardSerialNo=csiCardSerialNo, cSvcInterfaceTrapObjects=cSvcInterfaceTrapObjects, csiNportRowStatus=csiNportRowStatus, csiSessionInELSFrames=csiSessionInELSFrames, csiSessionOutFCPUnderRuns=csiSessionOutFCPUnderRuns, ciscoSvcMIBConformance=ciscoSvcMIBConformance, cSvcInterfaceConfiguration=cSvcInterfaceConfiguration, csiNportInFrameRate=csiNportInFrameRate, csiSessionOpenXchanges=csiSessionOpenXchanges, csiNportInBytesRate=csiNportInBytesRate, ciscoSvcInterfaceMIBTrapPrefix=ciscoSvcInterfaceMIBTrapPrefix, csiNportEntry=csiNportEntry, csiClusterName=csiClusterName, ciscoSvcInterfaceMIB=ciscoSvcInterfaceMIB, csiInterfaceNwwn=csiInterfaceNwwn, csiInterfaceStatsTable=csiInterfaceStatsTable, csiInterfaceOutFrames=csiInterfaceOutFrames, csiSessionPeerNwwn=csiSessionPeerNwwn, csiSessionType=csiSessionType, csiMIBTraps=csiMIBTraps, csiSessionIfIndex=csiSessionIfIndex, csiInterfaceInFrames=csiInterfaceInFrames, csiSessionEntry=csiSessionEntry, csiNportOutFrames=csiNportOutFrames, csiNportSessions=csiNportSessions, csiSessionInAborts=csiSessionInAborts, csiSessionInBadFc2Drops=csiSessionInBadFc2Drops, csiSessionOutFCPDataFrames=csiSessionOutFCPDataFrames, csiSessionStatsGroup=csiSessionStatsGroup, PYSNMP_MODULE_ID=ciscoSvcInterfaceMIB, csiInterfaceStatsEntry=csiInterfaceStatsEntry, csiInterfaceNwwnTable=csiInterfaceNwwnTable, csiNportTable=csiNportTable, csiNportStatsEntry=csiNportStatsEntry)
