#
# PySNMP MIB module BroadworksMaintenance (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BroadworksMaintenance
# Produced by pysmi-0.3.4 at Wed May  1 11:42:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, TimeTicks, Unsigned32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, IpAddress, Integer32, ModuleIdentity, enterprises, Bits, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Unsigned32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "IpAddress", "Integer32", "ModuleIdentity", "enterprises", "Bits", "MibIdentifier", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
broadsoft = ModuleIdentity((1, 3, 6, 1, 4, 1, 6431))
broadsoft.setRevisions(('2006-06-09 09:30', '2006-03-23 19:35', '2005-08-16 10:00', '2000-09-19 14:31',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: broadsoft.setRevisionsDescriptions(('Modified patching tables.', 'Added alarm thresholds.', 'Added MIB conformance section.', '',))
if mibBuilder.loadTexts: broadsoft.setLastUpdated('200508161000Z')
if mibBuilder.loadTexts: broadsoft.setOrganization('Broadsoft, Inc')
if mibBuilder.loadTexts: broadsoft.setContactInfo('Broadsoft, Inc 220 Perry Parkway Gaithersburg, MD 20877 301-977-9440')
if mibBuilder.loadTexts: broadsoft.setDescription('This is the System Management Information structure for the Broadsoft enterprise.')
broadworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1))
managedObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2))
thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3))
reservedModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 10))
bwMtcMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20))
moServerModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1))
moSoftwareVersionModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2))
moDeviceModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3))
thCounterModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1))
thGaugeModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2))
thAlarmModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3))
bwServerType = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwServerType.setStatus('current')
if mibBuilder.loadTexts: bwServerType.setDescription('Gives the broadworks server type: { Application Server | Network Server | Media Server | Relay Server }')
bwRedundancyType = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonRedundant", 0), ("primary", 1), ("seconday", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwRedundancyType.setStatus('current')
if mibBuilder.loadTexts: bwRedundancyType.setDescription('Gives the broadworks server redundancy type: { Primary | Secondary | NotRedundant }')
bwActiveSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwActiveSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: bwActiveSoftwareVersion.setDescription('Gives the version of the active software version. An operator can change the active software version by setting this field.')
bwAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lock", 0), ("locking", 1), ("unlock", 2), ("shuttingDown", 3), ("stopped", 4), ("forceLock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAdminState.setStatus('current')
if mibBuilder.loadTexts: bwAdminState.setDescription('Server admin state. 0- Lock, 1- Locking, 2- Unlock, 3- ShuttingDown, 4- Stopped, 5- Forced Lock')
bwOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOperationalState.setStatus('current')
if mibBuilder.loadTexts: bwOperationalState.setDescription('Server operational state. 0- Enabled, 1- Disabled')
bwResetServer = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("set", 0), ("reset", 1), ("hardReset", 2), ("revertReset", 3), ("hardRevertReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwResetServer.setStatus('current')
if mibBuilder.loadTexts: bwResetServer.setDescription('Remotely reset the BroadWorks server. The reset action kicks in when the counter is set to 1.')
bwSubComponentTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 7), )
if mibBuilder.loadTexts: bwSubComponentTable.setStatus('current')
if mibBuilder.loadTexts: bwSubComponentTable.setDescription('This table exposes some key BroadWorks server sub components. It may or may not be empty depending on the server')
bwTargetSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwTargetSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: bwTargetSoftwareVersion.setDescription('Gives the target software version. If the server is reset, the active server software version will be updated.')
bwRevertBackupLocation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwRevertBackupLocation.setStatus('current')
if mibBuilder.loadTexts: bwRevertBackupLocation.setDescription('Gives the location of the backup file to use if using the revert option of the reset command.')
bwSubComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 7, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwSubComponentIndex"))
if mibBuilder.loadTexts: bwSubComponentEntry.setStatus('current')
if mibBuilder.loadTexts: bwSubComponentEntry.setDescription('This row contains information about a software component in the system')
bwSubComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSubComponentIndex.setStatus('current')
if mibBuilder.loadTexts: bwSubComponentIndex.setDescription('This integer represents the a software component index in the system')
bwSubComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSubComponentName.setStatus('current')
if mibBuilder.loadTexts: bwSubComponentName.setDescription('The name of an exposed subcomponent')
bwSubComponentInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSubComponentInfo.setStatus('current')
if mibBuilder.loadTexts: bwSubComponentInfo.setDescription('Displays status information about the component')
bwUpdateSoftwareVersionTable = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("reload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwUpdateSoftwareVersionTable.setStatus('current')
if mibBuilder.loadTexts: bwUpdateSoftwareVersionTable.setDescription('This counter is used to reload the installed software table. To do so, just set this register to 1 (reload)')
bwSoftwareVersionTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: bwSoftwareVersionTable.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareVersionTable.setDescription('This table has an entry per software version installed on the server')
bwSoftwarePatchTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: bwSoftwarePatchTable.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchTable.setDescription('This table has an entry per service packs installed for each sofware versions')
bwSoftwareThirdPartyTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: bwSoftwareThirdPartyTable.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareThirdPartyTable.setDescription('This table has an entry for third party software version used by the BroadWorks server')
bwSoftwarePatchHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 5), )
if mibBuilder.loadTexts: bwSoftwarePatchHistoryTable.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchHistoryTable.setDescription('This table contains information about all operation performed on patches.')
bwSoftwarePatchImpactedFileTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileTable.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileTable.setDescription('This table contains information about files modified by the patches applied on the system.')
bwSoftwareVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwSoftwareVersionIndex"))
if mibBuilder.loadTexts: bwSoftwareVersionEntry.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareVersionEntry.setDescription('This row contains information on a particular braodworks software version installed on the server')
bwSoftwareVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareVersionIndex.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareVersionIndex.setDescription('This integer represents the a group index in the system')
bwSoftwareVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareVersionName.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareVersionName.setDescription('The name of a software load installed on the server.')
bwSoftwareVersionInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareVersionInstallDate.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareVersionInstallDate.setDescription('Installation date for this software version.')
bwSoftwareVersionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("installed", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareVersionStatus.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareVersionStatus.setDescription('The status of a software version.')
bwSoftwarePatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwSoftwarePatchIndex"))
if mibBuilder.loadTexts: bwSoftwarePatchEntry.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchEntry.setDescription('This row contains information on a particular braodworks patch installed on the server')
bwSoftwarePatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchIndex.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchIndex.setDescription('This integer an index of a patch installed in the system')
bwSoftwarePatchVersionName = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchVersionName.setStatus('obsolete')
if mibBuilder.loadTexts: bwSoftwarePatchVersionName.setDescription('The name of a software load for which this patch applies. This field was obsoleted in BroadWorks release 14.0.')
bwSoftwarePatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchName.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchName.setDescription('Patch name.')
bwSoftwarePatchType = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchType.setStatus('obsolete')
if mibBuilder.loadTexts: bwSoftwarePatchType.setDescription('Patch type. This field was obsoleted in BroadWorks release 14.0.')
bwSoftwarePatchInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchInstallDate.setStatus('obsolete')
if mibBuilder.loadTexts: bwSoftwarePatchInstallDate.setDescription('This field was obsoleted in BroadWorks release 14.0.')
bwSoftwarePatchState = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("installed", 0), ("active", 1), ("installedPendingActive", 2), ("activePendingInstalled", 3), ("deleted", 4), ("installedMissingDependencies", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchState.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchState.setDescription('The state of the patch.')
bwSoftwarePatchOperation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("apply", 1), ("remove", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSoftwarePatchOperation.setStatus('obsolete')
if mibBuilder.loadTexts: bwSoftwarePatchOperation.setDescription('This field was obsoleted in BroadWorks release 14.0.')
bwSoftwarePatchBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchBundle.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchBundle.setDescription('Patch Bundle name of the patch.')
bwSoftwareThirdPartyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwSoftwareThirdPartyIndex"))
if mibBuilder.loadTexts: bwSoftwareThirdPartyEntry.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareThirdPartyEntry.setDescription('This row contains information on an installed 3rd party software version')
bwSoftwareThirdPartyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareThirdPartyIndex.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareThirdPartyIndex.setDescription('This integer represents the a group index in the system')
bwSoftwareThirdPartyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareThirdPartyName.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareThirdPartyName.setDescription('The name of a software load for which this service pack applies')
bwSoftwareThirdPartyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareThirdPartyVersion.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareThirdPartyVersion.setDescription('A 3rd party software version id')
bwSoftwareThirdPartyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("installed", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwareThirdPartyStatus.setStatus('current')
if mibBuilder.loadTexts: bwSoftwareThirdPartyStatus.setDescription('The status of a 3rd party software version.')
bwSoftwarePatchHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 5, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwSoftwarePatchIndex"))
if mibBuilder.loadTexts: bwSoftwarePatchHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchHistoryEntry.setDescription('Entry of the patch history table containing history of operations applied to patches.')
bwSoftwarePatchHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchHistoryIndex.setDescription('This integer an index of a patch operation history.')
bwSoftwarePatchHistPatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchHistPatchName.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchHistPatchName.setDescription('The name of the patch against which the operation was applied.')
bwSoftwarePatchHistTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchHistTimeStamp.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchHistTimeStamp.setDescription('The time stamp of the patch operation.')
bwSoftwarePatchHistNewState = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("installed", 0), ("active", 1), ("installedPendingActive", 2), ("activePendingInstalled", 3), ("deleted", 4), ("installedMissingDependencies", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchHistNewState.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchHistNewState.setDescription('The new state of the patch.')
bwSoftwarePatchImpactedFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwSoftwarePatchIndex"))
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileEntry.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileEntry.setDescription('Entry of the patch impacted file table containing information about files modified by patches.')
bwSoftwarePatchImpactedFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileIndex.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileIndex.setDescription('This integer an index of an impacted file/patch name.')
bwSoftwarePatchImpactedFilePatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFilePatchName.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFilePatchName.setDescription('The name of the patch.')
bwSoftwarePatchImpactedFileFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 2, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileFileName.setStatus('current')
if mibBuilder.loadTexts: bwSoftwarePatchImpactedFileFileName.setDescription('The name of an impacted file.')
bwManagedObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: bwManagedObjectsTable.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsTable.setDescription('Table of all sub-managed objects under BroadWorks control')
bwManagedObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwManagedObjectsIndex"))
if mibBuilder.loadTexts: bwManagedObjectsEntry.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsEntry.setDescription('This row contains information on a particular sub-managed object')
bwManagedObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwManagedObjectsIndex.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsIndex.setDescription('This integer represents the a managed object index in the system')
bwManagedObjectsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwManagedObjectsName.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsName.setDescription('The name of a managed object controlled by BroadWorks')
bwManagedObjectsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwManagedObjectsProtocol.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsProtocol.setDescription('The protocol supported by a managed object controlled by BroadWorks')
bwManagedObjectsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwManagedObjectsType.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsType.setDescription('The type of a managed object controlled by BroadWorks')
bwManagedObjectsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("lock", 0), ("locking", 1), ("unlock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwManagedObjectsAdminState.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsAdminState.setDescription('The administrative state of a managed object controlled by BroadWorks. 0- Lock, 1- locking, 2- Unlock')
bwManagedObjectsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwManagedObjectsOperationalState.setStatus('current')
if mibBuilder.loadTexts: bwManagedObjectsOperationalState.setDescription('The operational state of a managed object controlled by BroadWorks. 0- Enabled, 1- Disabled')
bwCounterThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: bwCounterThresholdTable.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdTable.setDescription('Table of all the thresholds set against counters in the system')
bwCounterThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwCounterThresholdIndex"))
if mibBuilder.loadTexts: bwCounterThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdEntry.setDescription('This row contains information on a particular counter threshold')
bwCounterThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCounterThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdIndex.setDescription('This integer represents the index of a counter threshold in the system')
bwCounterThresholdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCounterThresholdDescription.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdDescription.setDescription('A description for this threshold.')
bwCounterThresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCounterThresholdName.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdName.setDescription('The name of a counter.')
bwCounterThresholdInitialValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCounterThresholdInitialValue.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdInitialValue.setDescription('The initial counter threshold value')
bwCounterThresholdOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCounterThresholdOffsetValue.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdOffsetValue.setDescription('The offset to be added to the current threshold value once an alarm has been sent')
bwCounterThresholdCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCounterThresholdCurrentValue.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdCurrentValue.setDescription('The threshold value at which the next alarm will be generated')
bwCounterThresholdSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("informational", 0), ("low", 1), ("medium", 2), ("high", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCounterThresholdSeverity.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdSeverity.setDescription('The severity of the alarm to be sent')
bwCounterThresholdControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("delete", 2), ("create", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCounterThresholdControl.setStatus('current')
if mibBuilder.loadTexts: bwCounterThresholdControl.setDescription('This scalar controls the life cycle of the threshold. Setting this counter to create(3) using an unused index creates a row with the specified index. Setting it with an already used index has no effect. Setting this counter to delete(2) removes the entry.')
bwGaugeThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: bwGaugeThresholdTable.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdTable.setDescription('Table of all the thresholds set against gauges in the system')
bwGaugeThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwGaugeThresholdIndex"))
if mibBuilder.loadTexts: bwGaugeThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdEntry.setDescription('This row contains information on a particular gauge threshold')
bwGaugeThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwGaugeThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdIndex.setDescription('This integer represents the index of a gauge threshold in the system')
bwGaugeThresholdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGaugeThresholdDescription.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdDescription.setDescription('A description for this threshold.')
bwGaugeThresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGaugeThresholdName.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdName.setDescription('The name of a gauge.')
bwGaugeThresholdNotifyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGaugeThresholdNotifyLow.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdNotifyLow.setDescription('The gauge value at which an alarm will be generated when the gauge value reaches or crosses the NotifyHigh level in a rising direction. Subsequent similar crossings of the NotifyHigh level will not generate an alarm until the gauge has reached or crossed the corresponding NotifyLow level.')
bwGaugeThresholdNotifyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGaugeThresholdNotifyHigh.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdNotifyHigh.setDescription('The gauge value at which an alarm will be generated when the gauge value reaches or crosses the NotifyLow level in a falling direction. Subsequent similar crossings of the NotifyLow level will not generate an alarm until the gauge has reached or crossed the corresponding NotifyHigh level.')
bwGaugeThresholdSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("informational", 0), ("low", 1), ("medium", 2), ("high", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGaugeThresholdSeverity.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdSeverity.setDescription('The severity of the alarm to be sent')
bwGaugeThresholdControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("delete", 2), ("create", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGaugeThresholdControl.setStatus('current')
if mibBuilder.loadTexts: bwGaugeThresholdControl.setDescription('This scalar controls the life cycle of the threshold. Setting this gauge to delete(2) removes the entry.')
bwAlarmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: bwAlarmThresholdTable.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdTable.setDescription('Table of all the thresholds set against alarms in the system')
bwAlarmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "BroadworksMaintenance", "bwAlarmThresholdIndex"))
if mibBuilder.loadTexts: bwAlarmThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdEntry.setDescription('This row contains information on a particular alarm threshold')
bwAlarmThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwAlarmThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdIndex.setDescription('This integer represents the index of an alarm threshold in the system')
bwAlarmThresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdName.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdName.setDescription('The name of an alarm or DEFAULT if the threshold applies to all alarms in the system')
bwAlarmThresholdMaxNumTrapsPerTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdMaxNumTrapsPerTimePeriod.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdMaxNumTrapsPerTimePeriod.setDescription('The maximum number of traps that the system outputs per sliding time period. If set to 0 (zero), the alarm is suppressed and the system does not output any trap for this alarm filter.')
bwAlarmThresholdTimePeriodInSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdTimePeriodInSeconds.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdTimePeriodInSeconds.setDescription('The time period used for threshold calculation, in seconds.')
bwAlarmThresholdProblemTextVarNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum1.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum1.setDescription('To further refine a threshold, specify the position number of the variable data within the alarm problem text (1, 2, 3, etc.) that together with the alarm name, define the actual threshold. For example, if the alarm has five problem text variables: 1-deviceName, 2-deviceAddress, 3-devicePort, 4-errorType, 5-errorCode, and if the alarm threshold is to limit the number of traps for a given deviceName, devicePort, and errorType, then bwAlarmThresholdProblemTextVarNum1 should be set to 1, bwAlarmThresholdProblemTextVarNum2 should be set to 3, and bwAlarmThresholdProblemTextVarNum3 should be set to 4. To ignore filtering based on problem text variables, set to 0 (zero).')
bwAlarmThresholdProblemTextVarNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum2.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum2.setDescription('To further refine a threshold, specify the position number of the variable data within the alarm problem text (1, 2, 3, etc.) that together with the alarm name, define the actual threshold. For example, if the alarm has five problem text variables: 1-deviceName, 2-deviceAddress, 3-devicePort, 4-errorType, 5-errorCode, and if the alarm threshold is to limit the number of traps for a given deviceName, devicePort, and errorType, then bwAlarmThresholdProblemTextVarNum1 should be set to 1, bwAlarmThresholdProblemTextVarNum2 should be set to 3, and bwAlarmThresholdProblemTextVarNum3 should be set to 4. To ignore filtering based on problem text variables, set to 0 (zero).')
bwAlarmThresholdProblemTextVarNum3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum3.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum3.setDescription('To further refine a threshold, specify the position number of the variable data within the alarm problem text (1, 2, 3, etc.) that together with the alarm name, define the actual threshold. For example, if the alarm has five problem text variables: 1-deviceName, 2-deviceAddress, 3-devicePort, 4-errorType, 5-errorCode, and if the alarm threshold is to limit the number of traps for a given deviceName, devicePort, and errorType, then bwAlarmThresholdProblemTextVarNum1 should be set to 1, bwAlarmThresholdProblemTextVarNum2 should be set to 3, and bwAlarmThresholdProblemTextVarNum3 should be set to 4. To ignore filtering based on problem text variables, set to 0 (zero).')
bwAlarmThresholdProblemTextVarNum4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum4.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum4.setDescription('To further refine a threshold, specify the position number of the variable data within the alarm problem text (1, 2, 3, etc.) that together with the alarm name, define the actual threshold. For example, if the alarm has five problem text variables: 1-deviceName, 2-deviceAddress, 3-devicePort, 4-errorType, 5-errorCode, and if the alarm threshold is to limit the number of traps for a given deviceName, devicePort, and errorType, then bwAlarmThresholdProblemTextVarNum1 should be set to 1, bwAlarmThresholdProblemTextVarNum2 should be set to 3, and bwAlarmThresholdProblemTextVarNum3 should be set to 4. To ignore filtering based on problem text variables, set to 0 (zero).')
bwAlarmThresholdProblemTextVarNum5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum5.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdProblemTextVarNum5.setDescription('To further refine a threshold, specify the position number of the variable data within the alarm problem text (1, 2, 3, etc.) that together with the alarm name, define the actual threshold. For example, if the alarm has five problem text variables: 1-deviceName, 2-deviceAddress, 3-devicePort, 4-errorType, 5-errorCode, and if the alarm threshold is to limit the number of traps for a given deviceName, devicePort, and errorType, then bwAlarmThresholdProblemTextVarNum1 should be set to 1, bwAlarmThresholdProblemTextVarNum2 should be set to 3, and bwAlarmThresholdProblemTextVarNum3 should be set to 4. To ignore filtering based on problem text variables, set to 0 (zero).')
bwAlarmThresholdMinimumSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("informational", 0), ("low", 1), ("medium", 2), ("high", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdMinimumSeverity.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdMinimumSeverity.setDescription('This is the minimum alarm severity under which alarms start to be discarded.')
bwAlarmThresholdControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 1, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("delete", 2), ("create", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwAlarmThresholdControl.setStatus('current')
if mibBuilder.loadTexts: bwAlarmThresholdControl.setDescription('This scalar controls the life cycle of the threshold. Setting this threshold to create(3) using an unused index creates a row with the specified index. Setting it with an already used index has no effect. Setting this threshold to delete(2) removes the entry.')
bwReservedScalar = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("notUsed", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwReservedScalar.setStatus('current')
if mibBuilder.loadTexts: bwReservedScalar.setDescription('This is a reserved counter')
bwMtcMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 1))
bwMtcMibCompliancy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 2))
bwMoServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 1, 1)).setObjects(("BroadworksMaintenance", "bwServerType"), ("BroadworksMaintenance", "bwRedundancyType"), ("BroadworksMaintenance", "bwActiveSoftwareVersion"), ("BroadworksMaintenance", "bwAdminState"), ("BroadworksMaintenance", "bwOperationalState"), ("BroadworksMaintenance", "bwResetServer"), ("BroadworksMaintenance", "bwSubComponentTable"), ("BroadworksMaintenance", "bwTargetSoftwareVersion"), ("BroadworksMaintenance", "bwSubComponentIndex"), ("BroadworksMaintenance", "bwSubComponentName"), ("BroadworksMaintenance", "bwSubComponentInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMoServerGroup = bwMoServerGroup.setStatus('current')
if mibBuilder.loadTexts: bwMoServerGroup.setDescription('This group defines managed object server attributes.')
bwMoSoftwareVersionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 1, 2)).setObjects(("BroadworksMaintenance", "bwUpdateSoftwareVersionTable"), ("BroadworksMaintenance", "bwSoftwareVersionTable"), ("BroadworksMaintenance", "bwSoftwarePatchTable"), ("BroadworksMaintenance", "bwSoftwareThirdPartyTable"), ("BroadworksMaintenance", "bwSoftwareVersionIndex"), ("BroadworksMaintenance", "bwSoftwareVersionName"), ("BroadworksMaintenance", "bwSoftwareVersionInstallDate"), ("BroadworksMaintenance", "bwSoftwareVersionStatus"), ("BroadworksMaintenance", "bwSoftwarePatchIndex"), ("BroadworksMaintenance", "bwSoftwarePatchName"), ("BroadworksMaintenance", "bwSoftwarePatchInstallDate"), ("BroadworksMaintenance", "bwSoftwarePatchState"), ("BroadworksMaintenance", "bwSoftwarePatchBundle"), ("BroadworksMaintenance", "bwSoftwareThirdPartyIndex"), ("BroadworksMaintenance", "bwSoftwareThirdPartyName"), ("BroadworksMaintenance", "bwSoftwareThirdPartyVersion"), ("BroadworksMaintenance", "bwSoftwareThirdPartyStatus"), ("BroadworksMaintenance", "bwSoftwarePatchHistoryTable"), ("BroadworksMaintenance", "bwSoftwarePatchHistoryIndex"), ("BroadworksMaintenance", "bwSoftwarePatchHistPatchName"), ("BroadworksMaintenance", "bwSoftwarePatchHistTimeStamp"), ("BroadworksMaintenance", "bwSoftwarePatchHistNewState"), ("BroadworksMaintenance", "bwSoftwarePatchImpactedFileTable"), ("BroadworksMaintenance", "bwSoftwarePatchImpactedFileIndex"), ("BroadworksMaintenance", "bwSoftwarePatchImpactedFilePatchName"), ("BroadworksMaintenance", "bwSoftwarePatchImpactedFileFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMoSoftwareVersionsGroup = bwMoSoftwareVersionsGroup.setStatus('current')
if mibBuilder.loadTexts: bwMoSoftwareVersionsGroup.setDescription('This group defines the software version attributes for the managed object.')
bwMoDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 1, 3)).setObjects(("BroadworksMaintenance", "bwManagedObjectsTable"), ("BroadworksMaintenance", "bwManagedObjectsIndex"), ("BroadworksMaintenance", "bwManagedObjectsName"), ("BroadworksMaintenance", "bwManagedObjectsProtocol"), ("BroadworksMaintenance", "bwManagedObjectsType"), ("BroadworksMaintenance", "bwManagedObjectsAdminState"), ("BroadworksMaintenance", "bwManagedObjectsOperationalState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMoDeviceGroup = bwMoDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: bwMoDeviceGroup.setDescription('This group defines the counters used to manage the access or network devices monitored by this managed object.')
bwMoThresholdsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 1, 4)).setObjects(("BroadworksMaintenance", "bwCounterThresholdTable"), ("BroadworksMaintenance", "bwCounterThresholdIndex"), ("BroadworksMaintenance", "bwCounterThresholdDescription"), ("BroadworksMaintenance", "bwCounterThresholdName"), ("BroadworksMaintenance", "bwCounterThresholdInitialValue"), ("BroadworksMaintenance", "bwCounterThresholdOffsetValue"), ("BroadworksMaintenance", "bwCounterThresholdCurrentValue"), ("BroadworksMaintenance", "bwCounterThresholdSeverity"), ("BroadworksMaintenance", "bwCounterThresholdControl"), ("BroadworksMaintenance", "bwGaugeThresholdTable"), ("BroadworksMaintenance", "bwGaugeThresholdIndex"), ("BroadworksMaintenance", "bwGaugeThresholdDescription"), ("BroadworksMaintenance", "bwGaugeThresholdName"), ("BroadworksMaintenance", "bwGaugeThresholdNotifyLow"), ("BroadworksMaintenance", "bwGaugeThresholdNotifyHigh"), ("BroadworksMaintenance", "bwGaugeThresholdSeverity"), ("BroadworksMaintenance", "bwGaugeThresholdControl"), ("BroadworksMaintenance", "bwAlarmThresholdTable"), ("BroadworksMaintenance", "bwAlarmThresholdIndex"), ("BroadworksMaintenance", "bwAlarmThresholdName"), ("BroadworksMaintenance", "bwAlarmThresholdMaxNumTrapsPerTimePeriod"), ("BroadworksMaintenance", "bwAlarmThresholdTimePeriodInSeconds"), ("BroadworksMaintenance", "bwAlarmThresholdProblemTextVarNum1"), ("BroadworksMaintenance", "bwAlarmThresholdProblemTextVarNum2"), ("BroadworksMaintenance", "bwAlarmThresholdProblemTextVarNum3"), ("BroadworksMaintenance", "bwAlarmThresholdProblemTextVarNum4"), ("BroadworksMaintenance", "bwAlarmThresholdProblemTextVarNum5"), ("BroadworksMaintenance", "bwAlarmThresholdMinimumSeverity"), ("BroadworksMaintenance", "bwAlarmThresholdControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMoThresholdsGroup = bwMoThresholdsGroup.setStatus('current')
if mibBuilder.loadTexts: bwMoThresholdsGroup.setDescription('This group defines the threshold control for this managed object.')
bwMoReserveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 1, 10)).setObjects(("BroadworksMaintenance", "bwReservedScalar"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMoReserveGroup = bwMoReserveGroup.setStatus('current')
if mibBuilder.loadTexts: bwMoReserveGroup.setDescription('MIB reserved section.')
bwMoBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6431, 1, 1, 20, 2, 1)).setObjects(("BroadworksMaintenance", "bwMoServerGroup"), ("BroadworksMaintenance", "bwMoSoftwareVersionsGroup"), ("BroadworksMaintenance", "bwMoDeviceGroup"), ("BroadworksMaintenance", "bwMoThresholdsGroup"), ("BroadworksMaintenance", "bwMoReserveGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwMoBasicCompliance = bwMoBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: bwMoBasicCompliance.setDescription('BroadWorks Common managed object MIB compliance')
mibBuilder.exportSymbols("BroadworksMaintenance", bwSoftwarePatchIndex=bwSoftwarePatchIndex, bwCounterThresholdSeverity=bwCounterThresholdSeverity, bwCounterThresholdEntry=bwCounterThresholdEntry, bwSoftwareThirdPartyVersion=bwSoftwareThirdPartyVersion, bwManagedObjectsAdminState=bwManagedObjectsAdminState, bwSoftwarePatchInstallDate=bwSoftwarePatchInstallDate, bwCounterThresholdCurrentValue=bwCounterThresholdCurrentValue, broadworks=broadworks, bwSoftwarePatchTable=bwSoftwarePatchTable, bwGaugeThresholdControl=bwGaugeThresholdControl, bwReservedScalar=bwReservedScalar, bwSoftwarePatchImpactedFileEntry=bwSoftwarePatchImpactedFileEntry, bwSubComponentInfo=bwSubComponentInfo, bwSoftwareThirdPartyStatus=bwSoftwareThirdPartyStatus, thAlarmModule=thAlarmModule, bwManagedObjectsProtocol=bwManagedObjectsProtocol, bwAlarmThresholdName=bwAlarmThresholdName, thresholds=thresholds, bwSoftwareVersionStatus=bwSoftwareVersionStatus, broadsoft=broadsoft, bwCounterThresholdInitialValue=bwCounterThresholdInitialValue, bwAlarmThresholdProblemTextVarNum1=bwAlarmThresholdProblemTextVarNum1, bwMoSoftwareVersionsGroup=bwMoSoftwareVersionsGroup, bwMtcMibCompliancy=bwMtcMibCompliancy, bwManagedObjectsOperationalState=bwManagedObjectsOperationalState, bwGaugeThresholdDescription=bwGaugeThresholdDescription, thCounterModule=thCounterModule, bwSoftwarePatchVersionName=bwSoftwarePatchVersionName, bwMoServerGroup=bwMoServerGroup, bwSoftwarePatchHistoryTable=bwSoftwarePatchHistoryTable, bwGaugeThresholdNotifyLow=bwGaugeThresholdNotifyLow, bwSubComponentName=bwSubComponentName, bwAlarmThresholdProblemTextVarNum2=bwAlarmThresholdProblemTextVarNum2, bwAlarmThresholdProblemTextVarNum3=bwAlarmThresholdProblemTextVarNum3, thGaugeModule=thGaugeModule, bwSoftwareThirdPartyIndex=bwSoftwareThirdPartyIndex, bwAlarmThresholdMinimumSeverity=bwAlarmThresholdMinimumSeverity, bwSoftwarePatchHistTimeStamp=bwSoftwarePatchHistTimeStamp, bwGaugeThresholdEntry=bwGaugeThresholdEntry, bwCounterThresholdDescription=bwCounterThresholdDescription, bwSubComponentTable=bwSubComponentTable, bwSoftwareVersionName=bwSoftwareVersionName, bwManagedObjectsEntry=bwManagedObjectsEntry, bwRedundancyType=bwRedundancyType, moDeviceModule=moDeviceModule, bwRevertBackupLocation=bwRevertBackupLocation, bwSoftwareThirdPartyTable=bwSoftwareThirdPartyTable, bwMoThresholdsGroup=bwMoThresholdsGroup, bwSoftwarePatchHistPatchName=bwSoftwarePatchHistPatchName, bwSoftwareVersionTable=bwSoftwareVersionTable, common=common, bwActiveSoftwareVersion=bwActiveSoftwareVersion, bwSoftwarePatchImpactedFileFileName=bwSoftwarePatchImpactedFileFileName, bwSoftwarePatchType=bwSoftwarePatchType, bwManagedObjectsTable=bwManagedObjectsTable, bwGaugeThresholdSeverity=bwGaugeThresholdSeverity, moSoftwareVersionModule=moSoftwareVersionModule, bwSoftwarePatchImpactedFileIndex=bwSoftwarePatchImpactedFileIndex, bwSoftwarePatchState=bwSoftwarePatchState, moServerModule=moServerModule, bwAlarmThresholdProblemTextVarNum5=bwAlarmThresholdProblemTextVarNum5, bwManagedObjectsName=bwManagedObjectsName, bwSoftwarePatchName=bwSoftwarePatchName, bwGaugeThresholdNotifyHigh=bwGaugeThresholdNotifyHigh, bwSubComponentIndex=bwSubComponentIndex, bwSoftwarePatchOperation=bwSoftwarePatchOperation, bwSoftwarePatchBundle=bwSoftwarePatchBundle, bwAlarmThresholdProblemTextVarNum4=bwAlarmThresholdProblemTextVarNum4, bwSoftwareVersionIndex=bwSoftwareVersionIndex, bwSoftwarePatchHistNewState=bwSoftwarePatchHistNewState, bwSoftwareThirdPartyName=bwSoftwareThirdPartyName, bwCounterThresholdOffsetValue=bwCounterThresholdOffsetValue, bwAlarmThresholdTimePeriodInSeconds=bwAlarmThresholdTimePeriodInSeconds, bwMtcMibConformance=bwMtcMibConformance, bwAdminState=bwAdminState, bwUpdateSoftwareVersionTable=bwUpdateSoftwareVersionTable, bwAlarmThresholdIndex=bwAlarmThresholdIndex, bwCounterThresholdTable=bwCounterThresholdTable, bwMoReserveGroup=bwMoReserveGroup, bwCounterThresholdName=bwCounterThresholdName, bwAlarmThresholdControl=bwAlarmThresholdControl, bwResetServer=bwResetServer, bwManagedObjectsIndex=bwManagedObjectsIndex, bwCounterThresholdControl=bwCounterThresholdControl, bwSoftwareThirdPartyEntry=bwSoftwareThirdPartyEntry, bwGaugeThresholdTable=bwGaugeThresholdTable, bwAlarmThresholdEntry=bwAlarmThresholdEntry, bwManagedObjectsType=bwManagedObjectsType, bwSoftwarePatchEntry=bwSoftwarePatchEntry, bwMoDeviceGroup=bwMoDeviceGroup, bwSubComponentEntry=bwSubComponentEntry, bwTargetSoftwareVersion=bwTargetSoftwareVersion, bwCounterThresholdIndex=bwCounterThresholdIndex, bwGaugeThresholdIndex=bwGaugeThresholdIndex, bwSoftwarePatchImpactedFileTable=bwSoftwarePatchImpactedFileTable, bwMoBasicCompliance=bwMoBasicCompliance, bwGaugeThresholdName=bwGaugeThresholdName, bwSoftwareVersionEntry=bwSoftwareVersionEntry, bwAlarmThresholdMaxNumTrapsPerTimePeriod=bwAlarmThresholdMaxNumTrapsPerTimePeriod, managedObjects=managedObjects, bwSoftwarePatchHistoryIndex=bwSoftwarePatchHistoryIndex, bwSoftwareVersionInstallDate=bwSoftwareVersionInstallDate, PYSNMP_MODULE_ID=broadsoft, bwServerType=bwServerType, bwSoftwarePatchImpactedFilePatchName=bwSoftwarePatchImpactedFilePatchName, bwMtcMibGroups=bwMtcMibGroups, bwAlarmThresholdTable=bwAlarmThresholdTable, reservedModule=reservedModule, bwSoftwarePatchHistoryEntry=bwSoftwarePatchHistoryEntry, bwOperationalState=bwOperationalState)
