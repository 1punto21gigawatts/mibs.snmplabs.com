#
# PySNMP MIB module CISCO-CDMA-PDSN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDMA-PDSN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, IpAddress, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, MibIdentifier, Counter32, ObjectIdentity, iso, Unsigned32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "MibIdentifier", "Counter32", "ObjectIdentity", "iso", "Unsigned32", "Bits", "ModuleIdentity")
DisplayString, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "DateAndTime")
ciscoCdmaPdsnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 157))
ciscoCdmaPdsnMIB.setRevisions(('2009-08-05 00:00', '2005-02-02 00:00', '2003-08-26 00:00', '2002-09-09 00:00', '2002-02-19 00:00', '2001-10-18 00:00', '2001-04-10 00:00', '2001-01-22 00:00', '2000-03-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setRevisionsDescriptions(("Added enumeration 'collocated' for cCdmaClusterRole object.", 'Added new objects for PCF and Service option based RP and PPP statistics.', 'Added new objects for PCF and Service option based RP and PPP statistics.', 'Added new objects for PPP re-negotiation counters.', 'Added PDSN cluster feature and added/appended the following groups: Appended cCdmaPerformanceStats group with following: cCdmaServiceOptionStats, cCdmaHandoffStats, cCdmaStatusChangeStats, cCdmaAddressSchemeStats. Appended cCdmaFlowTypeStats with failuure statitics. Appended cCdmaSystemInfo with cCdmaSystemStatus. Added cCdmaConfig group with three subgroups: cCdmaThresholdConfig, cCdmaPdsnCluster and cCdmaNotifConfig.', 'Create a new cCdmaPerformanceStats to hold all new performance statistics related counters for PDSN release 1.1 and newer.', 'Syntax for cCdmaSessionServiceOption changed.', 'New Objects Definitions for R-P Registration Statistics & Update Statistics were added.', 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setLastUpdated('200908050000Z')
if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cdma@cisco.com')
if mibBuilder.loadTexts: ciscoCdmaPdsnMIB.setDescription("This MIB is to support the CDMA PDSN (Packet Data Serving Node) feature. A CDMA2000 network supports wireless data communication through 3G CDMA radio access technology and 3G A10/A11 interface. PDSN acts as a foreign agent that establishes, maintains and terminates the link layer to a mobile station. The high level architecture of a third generation CDMA2000 network is shown below: +========+=+ +=========+ +=========+ | RAdio |P| | | Data | Home | | Network|C|==A10/A11==-| PDSN |===Core===| Network | | (RAN) |F| Interface | | Network | | +========+=+ +=========+ (DCN) +=========+ /|\\ Foreign Agent Home Agent | (FA) (HA) | Visited Access | Provider Network | \\|/ +========+ | Mobile | | Station| | (MS) | +========+ The following diagram illustrates protocols usage by the CDMA2000 network elements: MS ===== RAN ======== PDSN ======== DCN ====== Home Network | | A10/A11 | | | +=signaling==+ | | | | | +...L2TP/L2F tunnelling..+ | | | +======== PPP ========+ | | | | | +..Mobile IP tunnelling..+ | | | | | | +=================Mobile IP====================+ | | | | +======================data====================+ The CDMA PDSN MIB provides operational information for a CDMA PDSN implementation. The following areas are managed: 1) Global PDSN information. This area contains generic information such as the number of active/failed sessions, PDSN hostname. 2) PDSN session information. This area contains details about PPP sessions maintained by the PDSN router and other related information such as flows or PCF. 3) Failure notification. This area contains details of notifications sent to network management applications in case of session failure. Acronyms and terms: A10/A11 A10 interface is a virtual interface interface used for transporting data between the RAN and the PDSN. A11 interface is the signaling protocol used for maintaining a logical connection between the RAN and PDSN. BSID Base Station Identifier CANID Current Access Network Identifier CDMA Code Division Multiple Access CVSE Customer/Vendor Specific Extension DCN Data Core Network ESN Electronic Serial Number FA Foreign Agent Foreign Agent A router on a mobile node's visited network which provides routing services to the mobile node while registered. The foreign agent delivers datagrams to the mobile node that were tunneled by the mobile node's home agent. For datagrams sent by a mobile node, the foreign agent may serve as a default router for registered mobile nodes. Refer to RFC 2002 for more details. GRE Generic Routing Encapsulation. Refer to RFC 1701 for more details. HA Home Agent Home Agent A router on a mobile node's home network which tunnels datagrams for delivery to the mobile node when it is away from home, and maintains current location information for the mobile node. Refer to RFC 2002 for more details. IMSI International Mobile Station Identifier IPCP Internet Protocol Control Protocol IS In service IRM International Roaming MIN LCP Link Control Protocol MC Mobile Client MIN Mobile Identifier Number MN Mobile Node Mobile Client A component which can interact with MoIP entities such as Foreign Agent and Home Agent. Mobile IP Protocol enhancements that allow transparent routing of IP datagrams to mobile nodes. Refer to RFC 2002 for more details. Mobile Station/ A host or router that changes its Mobile Node point of attachment from one network or subnetwork to another. A mobile node may change its location without changing its IP address. MoIP Mobile IP MSID Mobile Station Identifier MS Mobile Station NAI Network Access Identifier OOS Out of service PANID Previous Access Network Identifier PCF Packet Control Function PDSN Packet Data Serving Node PDSN flow A conversation between one user (identified by an IP address) and a HA using a PDSN session. PDSN session A PPP connection between a MS and the PDSN. One session may contain one or multiple PDSN flows. PPPoGRE Point-to-Point over Generic Routing Encapsulation PPPoHDLC Point-to-Point over High Level Data Link Control Proxy Mechanism used by PDSN to provide mobile IP MoIP services to a MS which does not implement a mobile client. PDSN will be the proxy MC for the MS. RAN/RN Radio Network RNPDIT Radio Network Packet Data Inactivity Timer RP Radio Packet SDB Short Data Burst Simple IP IP routing used by a MS when MoIP services are not needed. SO/So Service Option. The Service Option is a parameter that specifies the air interface between MS and RN for packet data service. SPI Security Parameter Index.")
class CCdmaMsidType(TextualConvention, Integer32):
    reference = 'ITU-T, TIA, EIA are international telecommunications organizations. For more details on: - IMSI refer to ITU-T document E.212 - MIN refer to TIA document TIA/EIA-41-E - IRM refer to TIA document TSB-29'
    description = "Mobile Station Identifier format type of a mobile station: - 'imsi' indicates IMSI format (15 digits max) - 'min' indicates MIN format (10 digits max) - 'irm' indicates IRM (10 digits max) - 'other' in other cases"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("imsi", 2), ("min", 3), ("irm", 4))

class CCdmaSystemStatus(TextualConvention, Integer32):
    description = "PDSN operational status. The valid value are: - 'unknown' indicates status is unknown. - 'up' indicates system is up and providing service. - 'down' indicates system is down and not providing service. - 'testing' indicates system is up, but is in testing state, call can only be made through CLI, not through regular through A11/A10 interface. - 'insufficientResources' indicates system is up and runs out of system resource."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("up", 1), ("down", 2), ("testing", 3), ("insufficientResources", 4))

class CCdmaServiceAffectedLevel(TextualConvention, Integer32):
    description = "CDMA severity level of affected service: - 'warning' indicates something is abnormal, but service is not affected. - 'minor' indicates service has been slightly affected. - 'major' indicates service has been severely affected. - 'critical' indicates service can not be provided anymore."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("warning", 1), ("minor", 2), ("major", 3), ("critical", 4))

class CCdmaServiceOption(TextualConvention, Unsigned32):
    description = 'A Packet Data Service Option is a parameter that specifies the air interface between MS and RN for packet data service.'
    status = 'current'

ciscoCdmaPdsnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1))
cCdmaSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1))
cCdmaPcfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2))
cCdmaSessionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3))
cCdmaFailHistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4))
cCdmaRPRegistrationStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5))
cCdmaRPUpdateStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6))
cCdmaPerformanceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7))
cCdmaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8))
cCdmaNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9))
cCdmaRpErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10))
cCdmaRPRegReqErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1))
cCdmaRPRegUpdAckErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2))
cCdmaRPSessUpdAckErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3))
cCdmaRPRegReplyErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4))
cCdmaRPRegUpdErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 5))
cCdmaRPSessUpdErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 6))
cCdmaRpRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1))
cCdmaRpUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2))
cCdmaPppStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3))
cCdmaTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4))
cCdmaFlowTypeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5))
cCdmaServiceOptionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6))
cCdmaHandoffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7))
cCdmaStatusChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 8))
cCdmaAddressSchemeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9))
cCdmaPcfSoRpRegStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10))
cCdmaPcfSoRpUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11))
cCdmaPcfSoPppSetupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12))
cCdmaRpSessUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13))
cCdmaPcfSoRpSessUpdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14))
cCdmaThresholdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 1))
cCdmaPdsnCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2))
cCdmaNotifConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 3))
cCdmaClusterCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 1))
cCdmaClusterMemberInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2))
cCdmaClusterControllerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3))
cCdmaSessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionTotal.setDescription('The total number of sessions currently established with this system.')
cCdmaSessionMaxAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionMaxAllowed.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionMaxAllowed.setDescription('The maximum number of sessions allowed by this system.')
cCdmaPcfTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfTotal.setDescription('The total number of PCF currently interacting with this system.')
cCdmaPcfMaxAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaPcfMaxAllowed.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfMaxAllowed.setDescription('The maximum number of PCF allowed by this system.')
cCdmaSimpleIpFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSimpleIpFlowTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaSimpleIpFlowTotal.setDescription('The total number of flows currently using simple IP service.')
cCdmaMobileIpFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaMobileIpFlowTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaMobileIpFlowTotal.setDescription('The total number of flows currently using MoIP services.')
cCdmaProxyMobileIpFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaProxyMobileIpFlowTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaProxyMobileIpFlowTotal.setDescription('The total number of flows currently using proxy MoIP service.')
cCdmaSessionFailTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFailTotal.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11 interface.')
if mibBuilder.loadTexts: cCdmaSessionFailTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionFailTotal.setDescription('The number of A10/A11 session failures occurring since PDSN agent restarted. sysUpTime can be polled to determine if the agent has been restarted.')
cCdmaServingPdsnHostname = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServingPdsnHostname.setStatus('current')
if mibBuilder.loadTexts: cCdmaServingPdsnHostname.setDescription('Hostname of the serving PDSN.')
cCdmaSessionPdsnAuthenTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionPdsnAuthenTimer.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionPdsnAuthenTimer.setDescription('Timer (measured in hundredths of a second) for MoIP users not using PPP authentication. After PPP session establishment, the session will be terminated if the MoIP user is not authenticated via MoIP for a period longer than this timer.')
cCdmaSessionPdsnMaxFailHistory = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionPdsnMaxFailHistory.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionPdsnMaxFailHistory.setDescription('Maximum number of entries in the user failure information table.')
cCdmaSessionMaxNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionMaxNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionMaxNotifEnabled.setDescription("'true' indicates failure notification will be sent out when the maximum number of sessions has been reached.")
cCdmaPcfMaxAllowedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaPcfMaxAllowedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfMaxAllowedNotifEnabled.setDescription("'true' indicates failure notification will be sent out when the maximum number of interconnected PCF has been reached.")
cCdmaFormatErrorNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaFormatErrorNotifEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaFormatErrorNotifEnabled.setDescription("'true' indicates failure notification will be sent out when invalid arguments are received from PCF leading to session termination.")
cCdmaRegReqFailedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaRegReqFailedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqFailedNotifEnabled.setDescription("'true' indicates failure notification will be sent out when registration request fails termination.")
cCdmaSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSystemVersion.setStatus('current')
if mibBuilder.loadTexts: cCdmaSystemVersion.setDescription('CISCO PDSN Release Version, example output: 1.1.')
cCdmaSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 17), CCdmaSystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSystemStatus.setStatus('current')
if mibBuilder.loadTexts: cCdmaSystemStatus.setDescription('PDSN subsystem operational status.')
cCdmaActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cCdmaActiveSessions.setDescription('The total number of sessions in active state.')
cCdmaDormantSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaDormantSessions.setStatus('current')
if mibBuilder.loadTexts: cCdmaDormantSessions.setDescription('The total number of sessions in dormant state.')
cCdmaSrEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSrEnabled.setStatus('current')
if mibBuilder.loadTexts: cCdmaSrEnabled.setDescription('An indication of whether session redundancy feature is enabled.')
cCdmaPPPoGRESessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPPPoGRESessionTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaPPPoGRESessionTotal.setDescription('The total number of PPPoGRE sessions currently established with this system.')
cCdmaHDLCoGRESessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaHDLCoGRESessionTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaHDLCoGRESessionTotal.setDescription('The total number of HDLCoGRE sessions currently established with this system.')
cCdmaEstablishedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaEstablishedSessions.setStatus('current')
if mibBuilder.loadTexts: cCdmaEstablishedSessions.setDescription('The total number of sessions established since system was last restarted')
cCdmaReleasedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReleasedSessions.setStatus('current')
if mibBuilder.loadTexts: cCdmaReleasedSessions.setDescription('The total number of sessions released since system was last restarted')
cCdmaMSIDFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaMSIDFlowTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaMSIDFlowTotal.setDescription('The total number of flows currently using MSID service.')
cCdmaVPDNFlowTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaVPDNFlowTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaVPDNFlowTotal.setDescription('The total number of flows currently using VPDN service.')
cCdmaPcfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1), )
if mibBuilder.loadTexts: cCdmaPcfTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfTable.setDescription('PDSN PCF table. Contains the reference about PCF in the RAN currently interacting with the PDSN. An entry is created for every session opened by a PCF not recorded in this table. An entry is deleted when all session initiated by a PCF are dismantled.')
cCdmaPcfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfIpAddress"))
if mibBuilder.loadTexts: cCdmaPcfEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfEntry.setDescription('A conceptual row in the PCF table.')
cCdmaPcfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cCdmaPcfIpAddress.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfIpAddress.setDescription('IP address identifying a PCF.')
cCdmaPcfSessionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSessionTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSessionTotal.setDescription('Total number of sessions currently established with a PCF.')
cCdmaPcfSessionMaxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSessionMaxTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSessionMaxTotal.setDescription('Historical maximum number of connections that were simultaneously established for a PCF.')
cCdmaPcfErrorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfErrorTotal.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfErrorTotal.setDescription('Total number of session errors for a PCF.')
cCdmaSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1), )
if mibBuilder.loadTexts: cCdmaSessionTable.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionTable.setDescription('PDSN Session table. Contains the parameters and statistics related to a session. An entry is created for every PPP connection opened by a PCF. An entry is deleted when the session is dismantled, either by PDSN or PCF.')
cCdmaSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsid"))
if mibBuilder.loadTexts: cCdmaSessionEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionEntry.setDescription('A conceptual row in the PDSN session table.')
cCdmaSessionMsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 15)))
if mibBuilder.loadTexts: cCdmaSessionMsid.setReference('For more details on MSID refer to international telecommunications organization TIA document TR-45.5, IS-2000')
if mibBuilder.loadTexts: cCdmaSessionMsid.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionMsid.setDescription('Mobile Station Identifier (MSID) of a MS.')
cCdmaSessionMsidType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 2), CCdmaMsidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionMsidType.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionMsidType.setDescription("Mobile Station Identifier (MSID) format type of a mobile station. Valid choices are: - 'imsi' indicates IMSI format (15 digits max) - 'min' indicates MIN format (10 digits max) - 'irm' indicates IRM (10 digits max) - 'other' in other cases")
cCdmaSessionEsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionEsn.setReference('TIA, EIA are international telecommunications organizations. For more details on ESN refer to TIA/EIA document TR-45.5, IS-2000.')
if mibBuilder.loadTexts: cCdmaSessionEsn.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionEsn.setDescription('Electronic serial number of a MS.')
cCdmaSessionPdsnIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionPdsnIp.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionPdsnIp.setDescription('Serving PDSN IP address.')
cCdmaSessionFaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFaIp.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionFaIp.setDescription('PDSN IP address serving as Foreign Agent to the MS.')
cCdmaSessionA11HaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionA11HaIp.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11 interface.')
if mibBuilder.loadTexts: cCdmaSessionA11HaIp.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionA11HaIp.setDescription('MoIP Home Agent address on the A11 interface. (This is nothing but PDSN IP Address)')
cCdmaSessionA11FaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionA11FaIp.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11 interface.')
if mibBuilder.loadTexts: cCdmaSessionA11FaIp.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionA11FaIp.setDescription('MoIP Foreign Agent address on the A11 interface. (This is nothing but PCF IP Address)')
cCdmaSessionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionKey.setReference('Refer to RFC 1701 for more details.')
if mibBuilder.loadTexts: cCdmaSessionKey.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionKey.setDescription('Session identification key used by GRE protocol.')
cCdmaSessionConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionConnId.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionConnId.setDescription('Connection ID of the IP/GRE session. Consists of 4 octets locally unique within a PDSN session.')
cCdmaSessionMoMtInd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mobileOriginated", 2), ("mobileTerminated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionMoMtInd.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionMoMtInd.setDescription('Mobile Originated/Mobile Terminated Indicator. - mobileOriginated, MS initiated the session - mobileTerminated, PDSN initiated the session')
cCdmaSessionPppCompressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionPppCompressEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionPppCompressEnabled.setDescription("'true' indicates compression of PPP is enabled.")
cCdmaSessionVJCompressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionVJCompressEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionVJCompressEnabled.setDescription("'true' indicates Van-Jacobson compression of TCP/IP header is enabled.")
cCdmaSessionServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionServiceOption.setReference('TIA, EIA are international telecommunications organizations. For more details on the type of data and rate set utilized refer to EIA/TIA document TSB 58-B.')
if mibBuilder.loadTexts: cCdmaSessionServiceOption.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionServiceOption.setDescription('Defines type of data service and rate set utilized.')
cCdmaSessionSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionSentOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionSentOctets.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionSentOctets.setDescription('The number of data octets sent to the mobile user since session established.')
cCdmaSessionRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRcvdOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionRcvdOctets.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionRcvdOctets.setDescription('The number of data octets received from the mobile user since session established.')
cCdmaSessionSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionSentPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionSentPkts.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionSentPkts.setDescription('The number of data packets sent to the mobile user since session established.')
cCdmaSessionRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRcvdPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionRcvdPkts.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionRcvdPkts.setDescription('The number of data packets received from the mobile since session established.')
cCdmaSessionDiscardedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionDiscardedOutPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionDiscardedOutPkts.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionDiscardedOutPkts.setDescription('The number of outgoing data packets dropped by PDSN since system was last restarted.')
cCdmaSessionDiscardedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionDiscardedInPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 0Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionDiscardedInPkts.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionDiscardedInPkts.setDescription('The number of incoming data packets dropped by PDSN since system was last restarted.')
cCdmaSessionConnStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionConnStartTime.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionConnStartTime.setDescription('Indicates starting date and time of a session. This value is provided by the RAN. The agent is only propagating this information.')
cCdmaActiveConnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 21), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaActiveConnTime.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaActiveConnTime.setDescription('Amount of time while a session was established minus amount of time while the session was inactive on the RAN (no data channel assigned on the RAN).')
cCdmaSessionFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFlowCount.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionFlowCount.setDescription('Number of existing IP flows for an established session.')
cCdmaSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("airlinksetup", 2), ("airlinkstart", 3), ("airlinkstop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionStatus.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionStatus.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionStatus.setDescription('Session Status, airlinksetup(2), airlinkstart(3), airlinkstop(4).')
cCdmaSessionRegLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRegLifeTime.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionRegLifeTime.setDescription('The amount of time, measured in hundredths of a second, granted before registration is considered expired.')
cCdmaSessionRegTimeToExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionRegTimeToExpire.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionRegTimeToExpire.setDescription('The amount of time, measured in hundredths of a second, remaining before registration is considered expired.')
cCdmaSessionGREFromIPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionGREFromIPPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionGREFromIPPkts.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionGREFromIPPkts.setDescription('Number of GRE encapsulated packets received from IP since system was last restarted.')
cCdmaSessionGREToIPPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionGREToIPPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.6 Accounting Model for details.')
if mibBuilder.loadTexts: cCdmaSessionGREToIPPkts.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionGREToIPPkts.setDescription('Number of GRE encapsulated packets delivered to IP for transmission since system was last restarted.')
cCdmaSessionFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2), )
if mibBuilder.loadTexts: cCdmaSessionFlowTable.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionFlowTable.setDescription('PDSN IP flows table. Each entry is created when a new conversation is initiated between a MS and a HA. A flow is linked to a PDSN session. An IP flow is deleted when the conversation or the PDSN session is dismantled.')
cCdmaSessionFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsid"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaSessionUserFlowIpAddress"))
if mibBuilder.loadTexts: cCdmaSessionFlowEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionFlowEntry.setDescription('A conceptual row in the PDSN IP flow table.')
cCdmaSessionUserFlowIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cCdmaSessionUserFlowIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionUserFlowIpAddress.setDescription('User flow Ip address.')
cCdmaSessionNai = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionNai.setReference('Refer to IETF RFC 2486 for more details.')
if mibBuilder.loadTexts: cCdmaSessionNai.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionNai.setDescription('Network Access Identifier of the user. User@domain construct which identifies the home network of the mobile user.')
cCdmaSessionAddressingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionAddressingScheme.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionAddressingScheme.setDescription("Indicates MS IP address type: - 'static' MS has a static IP address configured - 'dynamic' MS is dynamically assigned an IP address - 'other' in other cases")
cCdmaSessionFlowTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("simpleIp", 2), ("mobileIp", 3), ("proxyMobileIp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionFlowTechnology.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionFlowTechnology.setDescription("Routing technology used by a flow: - 'simpleIp' indicates IP routing - 'mobileIp' indicates MoIP routing - 'proxyMobileIp' indicates MoIP routing with PDSN acting as a proxy MC. - 'other' in other cases")
cCdmaSessionHaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionHaIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionHaIpAddress.setDescription('MoIP home agent address. Relevant only if MoIP or proxy MoIP are used. ')
cCdmaSessionTunnelProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("notunnel", 2), ("l2tp", 3), ("l2f", 4), ("gre", 5), ("ipinip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessionTunnelProt.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionTunnelProt.setDescription("Tunneling protocol used between MS and PDSN: - 'notunnel' indicates no tunnel encapsulation - 'l2tp' indicates tunnel encapsulation using l2tp protocol - 'l2f' indicates tunnel encapsulation using l2f protocol - 'gre' indicates tunnel encapsulation using GRE protocol for mobileip - 'ip-in-ip' indicates tunnel encapsulation using IP-in-IP protocol for mobile - 'other' in other cases")
cCdmaFailHistInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1), )
if mibBuilder.loadTexts: cCdmaFailHistInfoTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistInfoTable.setDescription('Session failures table. An entry is created for every failed session. cCdmaSessionPdsnMaxFailHistory determines the maximum number of entries kept in this table. Once the table reaches the limit set, the oldest entries will be discarded to allow new entries to be recorded.')
cCdmaFailHistInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionIndex"))
if mibBuilder.loadTexts: cCdmaFailHistInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistInfoEntry.setDescription('A conceptual row in the PDSN Failure table.')
cCdmaFailSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cCdmaFailSessionIndex.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionIndex.setDescription('An arbitrary integer to uniquely identify this entry. Increases monotonically then wrap to zero.')
cCdmaFailSessionMsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionMsid.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionMsid.setDescription('MSID of the mobile station for the failed session.')
cCdmaFailSessionMsidType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 3), CCdmaMsidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionMsidType.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionMsidType.setDescription('MSID format type of a mobile station for the failed session.')
cCdmaFailSessionEsn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionEsn.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaFailSessionEsn.setDescription('Electronic serial number of the mobile user for the failed session.')
cCdmaFailSessionA11HaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionA11HaIp.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionA11HaIp.setDescription('MoIP Home Agent address on the A11 interface for the failed session.')
cCdmaFailSessionA11FaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionA11FaIp.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionA11FaIp.setDescription('MoIP Foreign Agent address on the A11 interface for the failed session.')
cCdmaFailSessionConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionConnId.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionConnId.setDescription('Connection ID of the failed session.')
cCdmaFailSessionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionKey.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionKey.setDescription('GRE session identification key of the failed session.')
cCdmaFailHistFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistFailTime.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistFailTime.setDescription('Date and time of the failure occurrence.')
cCdmaFailHistFailType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("pppAuthenticationFailure", 2), ("mobileIpAuthenticationFailure", 3), ("mobileIpRegistrationTimeout", 4), ("a10a11SessionTimeout", 5), ("maxAllowedSessionReached", 6), ("maxAllowedPcfReached", 7), ("sessionFormatError", 8), ("adminProhibited", 9), ("insufficientResource", 10), ("mnAuthenticationFailed", 11), ("registrationIdentMismatched", 12), ("poorlyFormedRequest", 13), ("unknownHAAddress", 14), ("reverseTunnelUnavail", 15), ("tbitNotSet", 16), ("unsupportedVIDorBadCVSE", 17), ("pppLcpTimeout", 18), ("pppLcpNegotiationFailed", 19), ("pppIpcpTimeout", 20), ("pppIpcpNegotiationFailed", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistFailType.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistFailType.setDescription('Type of failure for the current record.')
cCdmaFailHistServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistServiceOption.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistServiceOption.setDescription('A Packet Data Service Option, which provides a means between MS and RN to establish and maintain cdma2000 traffic channels for packet data service.')
cCdmaFailHistPanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistPanId.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistPanId.setDescription('The identifier of the previous network equipment that provided data connectivity between PDSN and the MS.')
cCdmaFailHistCanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistCanId.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistCanId.setDescription('The identifier of the current network equipment that provides data connectivity between PDSN and the MS.')
cCdmaFailHistBsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailHistBsid.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailHistBsid.setDescription('The identifier of Base Station that enables radio communication with the MS.')
cCdmaFailSessionEsn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 4, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFailSessionEsn2.setStatus('current')
if mibBuilder.loadTexts: cCdmaFailSessionEsn2.setDescription('Electronic serial number of the mobile user for the failed session.')
cCdmaRPRegValidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegValidRequests.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRPRegValidRequests.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegValidRequests.setDescription('The number of valid Registration Requests Received since system was last restarted.')
cCdmaRPRegAcceptedReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegAcceptedReplies.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRPRegAcceptedReplies.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegAcceptedReplies.setDescription('The number of registration replies accepted since system was last restarted.')
cCdmaRPRegLifeTimeZeroRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegLifeTimeZeroRequests.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRPRegLifeTimeZeroRequests.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegLifeTimeZeroRequests.setDescription('The number of valid registration requests received with life time zero since system was last restarted.')
cCdmaRPDeRegAcceptedReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPDeRegAcceptedReplies.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRPDeRegAcceptedReplies.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPDeRegAcceptedReplies.setDescription('The number of valid registration requests with life time zero accepted since system was last restarted.')
cCdmaRPRegReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegReasonUnSpecFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegReasonUnSpecFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegReasonUnSpecFailures.setDescription("The number of registration requests failed because PCF address not in PDSN's list of configured PCFs for unspecified reason since system was last restarted.")
cCdmaRPRegAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegAdminProhibFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegAdminProhibFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegAdminProhibFailures.setDescription("The number of registration requests failed because PCF address is not in PDSN's list of configured PCFs since system was last restarted.")
cCdmaRPRegInsuffResFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegInsuffResFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegInsuffResFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegInsuffResFailures.setDescription('The number of registration requests failed because of insufficient resources since the system was last restarted. Factors causing insufficient resources may be due to the max number of PCFs, the max number of sessions reached, or exhaustion of other system resources.')
cCdmaRPRegMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegMNAuthenFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegMNAuthenFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegMNAuthenFailures.setDescription('The number of registration requests failed due to MN authentication failure since system was last restarted.')
cCdmaRPRegIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegIdentMismatchFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegIdentMismatchFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegIdentMismatchFailures.setDescription('The number of registration requests failed because of identification mismatch since system was last restarted.')
cCdmaRPRegBadRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegBadRequestFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegBadRequestFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegBadRequestFailures.setDescription('The number of registration requests failed because of badly formed request since system was last restarted.')
cCdmaRPRegUnknownHAAddrFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegUnknownHAAddrFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegUnknownHAAddrFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegUnknownHAAddrFailures.setDescription('The number of registration requests failed because of unknown Home Agent Address since system was last restarted.')
cCdmaRPRegNoRevTunnelFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegNoRevTunnelFailures.setReference('RFC-2344.')
if mibBuilder.loadTexts: cCdmaRPRegNoRevTunnelFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegNoRevTunnelFailures.setDescription('The number of registration requests failed because FA to HA tunnel setup failed since system was last restarted.')
cCdmaRPRegTBitNotSetFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegTBitNotSetFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegTBitNotSetFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegTBitNotSetFailures.setDescription('The number of registration requests failed because Reverse Tunnel bit Not set since system was last restarted.')
cCdmaRPRegBadCVSEFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 5, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPRegBadCVSEFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPRegBadCVSEFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPRegBadCVSEFailures.setDescription('The number of registration requests failed because of unsupported vendor codes in CVSE since system was last restarted.')
cCdmaRPUpdValidRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdValidRequests.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRPUpdValidRequests.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdValidRequests.setDescription('The number of valid update registration requests received since system was last restarted.')
cCdmaRPUpdAcceptedReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdAcceptedReplies.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRPUpdAcceptedReplies.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdAcceptedReplies.setDescription('The number of valid update registration replies accepted since system was last restarted.')
cCdmaRPUpdReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdReasonUnSpecFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPUpdReasonUnSpecFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdReasonUnSpecFailures.setDescription('The number of update registrations failed for unspecified reason since system was last restarted.')
cCdmaRPUpdAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdAdminProhibFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPUpdAdminProhibFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdAdminProhibFailures.setDescription('The number of update registrations failed due to administrative prohibition since system was last restarted.')
cCdmaRPUpdMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdMNAuthenFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPUpdMNAuthenFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdMNAuthenFailures.setDescription('The number of update registrations failed due to MN authentication failure since system was last restarted.')
cCdmaRPUpdIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdIdentMismatchFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPUpdIdentMismatchFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdIdentMismatchFailures.setDescription('The number of registrations failed due to registration identity mismatch since system was last restarted.')
cCdmaRPUpdBadRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 6, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRPUpdBadRequestFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRPUpdBadRequestFailures.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaRPUpdBadRequestFailures.setDescription('The number of update registrations failed due to poorly formed request since system was last restarted.')
cCdmaRpRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReceivedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpRegReceivedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegReceivedReqs.setDescription('Total number of A11 Registration Requests received since the system was last restarted. ')
cCdmaRpRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpRegAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegAcceptedReqs.setDescription('Total number of A11 Registration Requests accepted since the system was last restarted. The Code field in the corresponding Registration Reply message, is set to zero. ')
cCdmaRpRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegDeniedReqs.setDescription('Total number of A11 Registration Requests denied since the system was last restarted. The Code field in the corresponding Registration Reply message is set to non-zero. ')
cCdmaRpRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegDiscardedReqs.setDescription('Total number of A11 Registration Requests silently discarded since the system was last restarted. A corresponding Registration Reply message is not returned for these A11 Registration Requests.')
cCdmaRpInitRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpInitRegAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpInitRegAcceptedReqs.setDescription('Total number of accepted A11 Registration Requests meant for establishing new R-P connections or Registration Requests with GRE key different from that of already existing session, since the system was last restarted. These A11 Registration Requests contain the Connection Setup Airlink Record. The Code field in the corresponding Registration Reply message is set to zero.')
cCdmaRpInitRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpInitRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpInitRegDeniedReqs.setDescription('Total number of denied A11 Registration Requests meant for establishing new R-P connections or Registration Requests with GRE key different from that of already existing session, since the system was last restarted. These A11 Registration Requests contain the Connection Setup Airlink Record. The Code field in the corresponding Registration Reply message is set to zero.')
cCdmaRpReRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpReRegAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpReRegAcceptedReqs.setDescription('Total number of accepted A11 Registration Requests meant for refreshing the already established R-P connections, since the system was last restarted. The Code field in the corresponding Registration Reply message is set to zero.')
cCdmaRpReRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpReRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpReRegDeniedReqs.setDescription('Total number of denied A11 Registration Requests meant for refreshing the already established R-P connections, since the system was last restarted. The Code field in the corresponding Registration Reply message is set to non-zero.')
cCdmaRpDeRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpDeRegAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegAcceptedReqs.setDescription('Total number of accepted A11 Registration Requests meant for de-establishing the already established R-P connections, since the system was last restarted. The Code field in the corresponding Registration Reply message is set to zero.')
cCdmaRpDeRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpDeRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegDeniedReqs.setDescription('Total number of denied A11 Registration Requests meant for de-establishing the already established R-P connections, since the system was last restarted. The Code field in the corresponding Registration Reply message is set to non-zero.')
cCdmaRpRegReasonlUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReasonlUnSpecFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegReasonlUnSpecFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaRpRegReasonlUnSpecFailures.setDescription("The number of registration requests failed because PCF address not in PDSN's list of configured PCFs for unspecified reason since system was last restarted.")
cCdmaRpRegAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegAdminProhibFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegAdminProhibFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegAdminProhibFailures.setDescription("The number of registration requests failed because PCF address is not in PDSN's list of configured PCFs since system was last restarted.")
cCdmaRpRegInsuffResFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegInsuffResFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegInsuffResFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegInsuffResFailures.setDescription('The number of registration requests failed because max number of PCFs or max number of sessions reached or out of system resources since system was last restarted.')
cCdmaRpRegMNAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegMNAuthFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegMNAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegMNAuthFailures.setDescription('The number of registration requests failed due to MN authentication failure since system was last restarted.')
cCdmaRpRegIdMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegIdMismatchFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegIdMismatchFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegIdMismatchFailures.setDescription('The number of registration requests failed because of identification mismatch since system was last restarted.')
cCdmaRpRegBadReqFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegBadReqFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegBadReqFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegBadReqFailures.setDescription('The number of registration requests failed because of badly formed request since system was last restarted.')
cCdmaRpRegUnknownPdsnFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegUnknownPdsnFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegUnknownPdsnFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegUnknownPdsnFailures.setDescription('The number of registration requests failed because of unknown PDSN/HA Address since system was last restarted.')
cCdmaRpRegNoRevTunnelFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegNoRevTunnelFailures.setReference('RFC-2344.')
if mibBuilder.loadTexts: cCdmaRpRegNoRevTunnelFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegNoRevTunnelFailures.setDescription('The number of registration requests failed because FA to HA reverse tunnel setup failed since system was last restarted.')
cCdmaRpRegTBitNotSetFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegTBitNotSetFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegTBitNotSetFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegTBitNotSetFailures.setDescription('The number of registration requests failed because reverse tunnel is required, but T bit is not set since system was last restarted.')
cCdmaRpRegBadCVSEFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegBadCVSEFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegBadCVSEFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegBadCVSEFailures.setDescription('The number of registration requests failed because of unsupported vendor codes in CVSE since system was last restarted.')
cCdmaRpRegReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReasonUnSpecFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpRegReasonUnSpecFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegReasonUnSpecFailures.setDescription("The number of registration requests failed because PCF address not in PDSN's list of configured PCFs for unspecified reason since system was last restarted.")
cCdmaRpDeRegHandoffAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffAcceptedReqs.setDescription('Total number of accepted A11 Registration Requests meant for de-establishing the already established R-P connections with the PCF from which the MN was handed off, since the system was last restarted. The Code field in the corresponding Registration Reply message is set to zero.')
cCdmaRpDeRegHandoffDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegHandoffDeniedReqs.setDescription('Total number of denied A11 Registration Requests meant for de-establishing the already established R-P connections with the PCF from which the MN was handed off, since the system was last restarted. The Code field in the corresponding Registration Reply message is set to non-zero.')
cCdmaRpInitRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegReceivedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpInitRegReceivedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpInitRegReceivedReqs.setDescription('The number of Initial A11 Registration requests received since system was last restarted.')
cCdmaRpInitRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInitRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpInitRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpInitRegDiscardedReqs.setDescription('The number of Initial A11 Registration requests silently discarded since system was last restarted.')
cCdmaRpReRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegReceivedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpReRegReceivedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpReRegReceivedReqs.setDescription('The number of A11 Re-Registration requests received since system was last restarted.')
cCdmaRpReRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpReRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpReRegDiscardedReqs.setDescription('The number of A11 Re-Registration requests silently discarded since system was last restarted.')
cCdmaRpDeRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegReceivedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpDeRegReceivedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegReceivedReqs.setDescription('The number of A11 De-Registration requests received since system was last restarted.')
cCdmaRpDeRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpDeRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegDiscardedReqs.setDescription('The number of A11 De-Registration requests silently discarded since system was last restarted.')
cCdmaRpHandoffRegReceivedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegReceivedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpHandoffRegReceivedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpHandoffRegReceivedReqs.setDescription('The number of A11 Handoff Registration requests received since system was last restarted.')
cCdmaRpHandoffRegAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpHandoffRegAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpHandoffRegAcceptedReqs.setDescription('Total number of accepted handoff A11 Registration Requests meant for already existing session, since the system was last restarted.')
cCdmaRpHandoffRegDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaRpHandoffRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpHandoffRegDeniedReqs.setDescription('Total number of denied handoff A11 Registration Requests meant for already existing session, since the system was last restarted.')
cCdmaRpHandoffRegDiscardedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpHandoffRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpHandoffRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpHandoffRegDiscardedReqs.setDescription('The number of handoff A11 Registration requests silently discarded since system was last restarted.')
cCdmaRpReRegAirlinkStarts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStarts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStarts.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStarts.setDescription('The number of A11 Re-Registration requests containing Airlink Start since system was last restarted.')
cCdmaRpReRegAirlinkStops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStops.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStops.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpReRegAirlinkStops.setDescription('The number of A11 Re-Registration requests containing Airlink Stop since system was last restarted.')
cCdmaRpDeRegAirlinkStops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpDeRegAirlinkStops.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpDeRegAirlinkStops.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpDeRegAirlinkStops.setDescription('The number of A11 De-Registration requests containing Airlink Stop since system was last restarted.')
cCdmaRpInterPCFActiveHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInterPCFActiveHandoffs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpInterPCFActiveHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpInterPCFActiveHandoffs.setDescription('The number of Inter PCF active handoff since system was last restarted.')
cCdmaRpInterPCFDormantHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpInterPCFDormantHandoffs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpInterPCFDormantHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpInterPCFDormantHandoffs.setDescription('The number of Inter PCF dormant handoff since system was last restarted.')
cCdmaRpUpdTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdTransmittedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdTransmittedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdTransmittedReqs.setDescription('Total number of A11 Registration Updates transmitted since system was last restarted.')
cCdmaRpUpdAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdAcceptedReqs.setDescription('Total number of A11 Registration Acknowledgements received with the Status field set to zero (indicating that the corresponding Registration Update was accepted), since system was last restarted.')
cCdmaRpUpdDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdDeniedReqs.setDescription('Total number of A11 Registration Acknowledgements received with the Status field set to non-zero indicating that the corresponding Registration Update was denied, since system was last restarted.')
cCdmaRpUpdNotAckedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdNotAckedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdNotAckedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdNotAckedReqs.setDescription('Total number of A11 Registration Updates sent, for which no corresponding A11 Registration Acknowledgements received, since system was last restarted.')
cCdmaRpUpdInitTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdInitTransmittedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdInitTransmittedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdInitTransmittedReqs.setDescription('Total number of initial A11 Registration Updates sent, excluding the re-transmitted A11 Registration Updates, since system was last restarted.')
cCdmaRpUpdReTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdReTransmittedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdReTransmittedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdReTransmittedReqs.setDescription('Total number of re-transmitted A11 Registration Updates, since system was last restarted.')
cCdmaRpUpdReceivedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdReceivedAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdReceivedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdReceivedAcks.setDescription('Total number of A11 Registration Acknowledgements received, since system was last restarted. ')
cCdmaRpUpdDiscardedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdDiscardedAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdDiscardedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdDiscardedAcks.setDescription('Total number of A11 Registration Acknowledgements discarded, since system was last restarted.')
cCdmaRpUpdRpLifeExpReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdRpLifeExpReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdRpLifeExpReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdRpLifeExpReqs.setDescription('Total number of initial A11 Registration Updates sent due to RP lifetime expiry since system was last restarted. Note that this count does not include any retransmissions.')
cCdmaRpUpdPPPtermReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdPPPtermReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdPPPtermReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdPPPtermReqs.setDescription('Total number of initial A11 Registration Updates sent as a result of PPP termination, since system was last restarted. Note that this count does not include any retransmissions.')
cCdmaRpUpdOtherReasonReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdOtherReasonReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdOtherReasonReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdOtherReasonReqs.setDescription('Total number of initial A11 Registration Updates sent due to reasons other than RP lifetime expiry, or PPP termination, since system was last restarted. Note that this count does not include any retransmissions.')
cCdmaRpUpdReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdReasonUnSpecFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpUpdReasonUnSpecFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdReasonUnSpecFailures.setDescription('The number of update registrations failed for unspecified reason since system was last restarted.')
cCdmaRpUpdAdminProhibFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdAdminProhibFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpUpdAdminProhibFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdAdminProhibFailures.setDescription('The number of update registrations failed due to administrative prohibition since system was last restarted.')
cCdmaRpUpdMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdMNAuthenFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpUpdMNAuthenFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdMNAuthenFailures.setDescription('The number of update registrations failed due to MN authentication failure since system was last restarted.')
cCdmaRpUpdIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdIdentMismatchFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpUpdIdentMismatchFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdIdentMismatchFailures.setDescription('The number of registrations failed due to registration identity mismatch since system was last restarted.')
cCdmaRpUpdBadReqFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdBadReqFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpUpdBadReqFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdBadReqFailures.setDescription('The number of update registrations failed due to poorly formed request since system was last restarted.')
cCdmaRpUpdPcfHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdPcfHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdPcfHandoffs.setDescription('The number of update registrations sent as a result of inter pcf handoffs, since system was last restarted.')
cCdmaRpUpdHandoffNotAckedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffNotAckedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffNotAckedReqs.setDescription('Total number of A11 Registration Updates (sent as the result of inter PCF handoffs), for which no corresponding A11 Registration Acknowledgements received, since system was last restarted.')
cCdmaRpUpdHandoffReceivedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReceivedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReceivedAcks.setDescription('Total number of A11 Registration Acknowledgements received for the A11 Registration Updates sent as the result of inter PCF handoffs, since system was last restarted. ')
cCdmaRpUpdHandoffAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAcceptedReqs.setDescription('Total number of A11 Registration Acknowledgements received with the Status field set to zero (indicating that the corresponding Registration Update was accepted), since system was last restarted.')
cCdmaRpUpdHandoffDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDeniedReqs.setDescription('Total number of A11 Registration Acknowledgements received with the Status field set to non-zero indicating that the corresponding Registration Update was denied, since system was last restarted.')
cCdmaRpUpdHandoffDiscardedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDiscardedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffDiscardedAcks.setDescription('Total number of A11 Registration Acknowledgements discarded, since system was last restarted.')
cCdmaRpUpdHandoffInitTxdReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffInitTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffInitTxdReqs.setDescription('Total number of initial A11 Registration Updates sent as the result of inter PCF handoffs, excluding the re-transmitted A11 Registration Updates, since system was last restarted.')
cCdmaRpUpdHandoffReTxdReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReTxdReqs.setDescription('Total number of re-transmitted A11 Registration Updates as the initial Registration Update (sent as a result of inter PCF handoffs) was not acked or denied, since system was last restarted.')
cCdmaRpUpdHandoffReaUnSpecFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReaUnSpecFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffReaUnSpecFails.setDescription('The number of update registrations failed for unspecified reason since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaRpUpdHandoffAdmProhibFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAdmProhibFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffAdmProhibFails.setDescription('The number of update registrations failed due to administrative prohibition since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaRpUpdHandoffMNAuthenFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffMNAuthenFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffMNAuthenFails.setDescription('The number of update registrations failed due to MN authentication failure since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaRpUpdHandoffIdMismatchFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffIdMismatchFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffIdMismatchFails.setDescription('The number of registrations failed due to registration identity mismatch since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaRpUpdHandoffBadReqFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpUpdHandoffBadReqFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpUpdHandoffBadReqFails.setDescription('The number of update registrations failed due to poorly formed request since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaRpSessUpdTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdTransmittedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdTransmittedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdTransmittedReqs.setDescription('Total number of A11 Session Updates transmitted since system was last restarted.')
cCdmaRpSessUpdAcceptedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdAcceptedReqs.setDescription('Total number of A11 Session Update Acknowledgements received with the Status field set to zero (indicating that the corresponding Registration Update was accepted), since system was last restarted.')
cCdmaRpSessUpdDeniedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdDeniedReqs.setDescription('Total number of A11 Session Update Acknowledgements received with the Status field set to non-zero indicating that the corresponding Registration Update was denied, since system was last restarted.')
cCdmaRpSessUpdNotAckedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdNotAckedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdNotAckedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdNotAckedReqs.setDescription('Total number of A11 Session Update Updates sent, for which no corresponding A11 Registration Acknowledgements received, since system was last restarted.')
cCdmaRpSessUpdInitTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdInitTransmittedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdInitTransmittedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdInitTransmittedReqs.setDescription('Total number of initial A11 Session Updates sent, excluding the re-transmitted A11 Registration Updates, since system was last restarted.')
cCdmaRpSessUpdReTransmittedReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReTransmittedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdReTransmittedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdReTransmittedReqs.setDescription('Total number of re-transmitted A11 Session Updates, since system was last restarted.')
cCdmaRpSessUpdReceivedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReceivedAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdReceivedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdReceivedAcks.setDescription('Total number of A11 Session Update Acknowledgements received, since system was last restarted. ')
cCdmaRpSessUpdDiscardedAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdDiscardedAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdDiscardedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdDiscardedAcks.setDescription('Total number of A11 Session Update Acknowledgements discarded, since system was last restarted.')
cCdmaRpSessUpdAlwaysON = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdAlwaysON.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdAlwaysON.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdAlwaysON.setDescription('Total number of initial A11 Session Updates sent due to Always On since system was last restarted. Note that this count does not include any retransmissions.')
cCdmaRpSessUpdRNPDIT = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdRNPDIT.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaRpSessUpdRNPDIT.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdRNPDIT.setDescription('Total number of initial A11 Registration Updates sent due to RNPDIT value downloaded, since system was last restarted. Note that this count does not include any retransmissions.')
cCdmaRpSessUpdReasonUnSpecFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonUnSpecFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonUnSpecFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonUnSpecFailures.setDescription('The number of session update registrations failed for unspecified reason since system was last restarted.')
cCdmaRpSessUpdReasonParamNotUpdated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonParamNotUpdated.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonParamNotUpdated.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdReasonParamNotUpdated.setDescription('The number of session update registrations failed for session parameters not updated reason since system was last restarted.')
cCdmaRpSessUpdMNAuthenFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdMNAuthenFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpSessUpdMNAuthenFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdMNAuthenFailures.setDescription('The number of session update registrations failed due to MN authentication failure since system was last restarted.')
cCdmaRpSessUpdIdentMismatchFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdIdentMismatchFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpSessUpdIdentMismatchFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdIdentMismatchFailures.setDescription('The number of session update registrations failed due to registration identity mismatch since system was last restarted.')
cCdmaRpSessUpdBadReqFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 13, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpSessUpdBadReqFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaRpSessUpdBadReqFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpSessUpdBadReqFailures.setDescription('The number of session update registrations failed due to poorly formed request since system was last restarted.')
cCdmaPppSetupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1))
cCdmaPppReNegoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2))
cCdmaPppAuthStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3))
cCdmaPppReleaseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4))
cCdmaPppMiscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99))
cCdmaPppCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCurrentConnections.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCurrentConnections.setDescription('Total number of currently active PPP connections')
cCdmaPppConnectionInitiateReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionInitiateReqs.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppConnectionInitiateReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppConnectionInitiateReqs.setDescription('Total number of PPP connection initiate requests sent out since system was last restarted.')
cCdmaPppConnectionSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionSuccesses.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppConnectionSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppConnectionSuccesses.setDescription('Total number of PPP connections that have been successfully brought to active state since system was last restarted.')
cCdmaPppConnectionFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionFailures.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppConnectionFailures.setDescription('The number of PPP connection setup request failed since system was last restarted.')
cCdmaPppLcpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpFailures.setDescription('Total number of PPP connection request that failed at LCP stage since system was last restarted.')
cCdmaPppAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthFailures.setDescription('Total number of PPP Setup connections that failed at authentication stage since system was last restarted.')
cCdmaPppIpcpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpFailures.setDescription('Total number of PPP Setup connections that failed at IPCP stage since system was last restarted.')
cCdmaPppEnterLcpNums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEnterLcpNums.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppEnterLcpNums.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppEnterLcpNums.setDescription('Total number of PPP connections entering LCP stage since system was last restarted.')
cCdmaPppEnterAuthNums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEnterAuthNums.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppEnterAuthNums.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppEnterAuthNums.setDescription('Total number of PPP connections entering authentication stage since system was last restarted.')
cCdmaPppEnterIpcpNums = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEnterIpcpNums.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppEnterIpcpNums.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppEnterIpcpNums.setDescription('Total number of PPP connections entering IPCP stage since system was last restarted.')
cCdmaPppLcpFailuresMaxRetrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpFailuresMaxRetrans.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpFailuresMaxRetrans.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpFailuresMaxRetrans.setDescription('Total number of PPP connection requests that failed at LCP stage after max number of retransmissions since system was last restarted.')
cCdmaPppLcpFailuresUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpFailuresUnknown.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpFailuresUnknown.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpFailuresUnknown.setDescription('Total number of PPP connection requests that failed at LCP stage due to an unknown reason since system was last restarted.')
cCdmaPppIpcpFailuresMaxRetrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresMaxRetrans.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresMaxRetrans.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresMaxRetrans.setDescription('Total number of PPP connection request that failed at IPCP stage after max number of retransmissions since system was last restarted.')
cCdmaPppIpcpFailuresUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresUnknown.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresUnknown.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpFailuresUnknown.setDescription('Total number of PPP connection requests that failed at IPCP stage due to an unknown reason since system was last restarted.')
cCdmaPppConnectionsAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionsAborted.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppConnectionsAborted.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppConnectionsAborted.setDescription('Total number of PPP negotiations terminated prematurely due to reasons such as MN poweroff since system was last restarted.')
cCdmaPppLcpOptionIssueFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpOptionIssueFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpOptionIssueFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpOptionIssueFailures.setDescription('Total number of PPP connections terminated due to LCP options negotiation failure such as call back user not negotiating the call back option.')
cCdmaPppIpcpOptionIssueFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpOptionIssueFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpOptionIssueFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpOptionIssueFailures.setDescription('Total number of PPP connections terminated due to IPCP options negotiation failure such as ip address negotiation.')
cCdmaPppAuthMaxRetransFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMaxRetransFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthMaxRetransFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMaxRetransFailures.setDescription('Total number of PPP connection requests that failed at authentication stage after max number of retransmissions since system was last restarted.')
cCdmaPppNoRemoteIpAddressReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNoRemoteIpAddressReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppNoRemoteIpAddressReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppNoRemoteIpAddressReleases.setDescription('Total number of PPP connections released because MN has no ip address as it rejects the IP address allocated by PDSN.')
cCdmaPppLowerLayerReleaseFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLowerLayerReleaseFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLowerLayerReleaseFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLowerLayerReleaseFailures.setDescription('Total number of PPP connections terminated because the lower layer such as RP is disconnected.')
cCdmaPppIpcpPhaseReceivedTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseReceivedTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseReceivedTermreqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseReceivedTermreqs.setDescription('Total number of PPP negotiations terminated due to PPP receiving term request during the IPCP phase.')
cCdmaPppIpcpPhaseSentTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseSentTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseSentTermreqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpPhaseSentTermreqs.setDescription('Total number of PPP negotiations terminated due to PPP sending term request during the IPCP phase.')
cCdmaPppAuthPhaseReceivedTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPhaseReceivedTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPhaseReceivedTermreqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPhaseReceivedTermreqs.setDescription('Total number of PPP negotiations terminated due to PPP receiving term request during the authentication phase.')
cCdmaPppAuthPhaseSentTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPhaseSentTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPhaseSentTermreqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPhaseSentTermreqs.setDescription('Total number of PPP negotiations terminated due to PPP sending term request during the authentication phase.')
cCdmaPppLcpPhaseReceivedTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpPhaseReceivedTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpPhaseReceivedTermreqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpPhaseReceivedTermreqs.setDescription('Total number of PPP negotiations terminated due to PPP receiving term request during the LCP phase.')
cCdmaPppLcpPhaseSentTermreqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpPhaseSentTermreqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpPhaseSentTermreqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpPhaseSentTermreqs.setDescription('Total number of PPP negotiations terminated due to PPP sending term request during the LCP phase.')
cCdmaPppPreLCPPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppPreLCPPdsnA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppPreLCPPdsnA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppPreLCPPdsnA10Releases.setDescription('Total number of A10 connections released by PDSN before the PPP enters LCP negotiation phase.')
cCdmaPppPreLCPPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppPreLCPPcfA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppPreLCPPcfA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppPreLCPPcfA10Releases.setDescription('Total number of A10 connections released by PCF before the PPP enters LCP negotiation phase.')
cCdmaPppLCPPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLCPPdsnA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLCPPdsnA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLCPPdsnA10Releases.setDescription('Total number of A10 connections released by PDSN during the LCP negotiation phase.')
cCdmaPppLCPPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLCPPcfA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLCPPcfA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLCPPcfA10Releases.setDescription('Total number of A10 connections released by PCF during the LCP negotiation phase.')
cCdmaPppAuthPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPdsnA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPdsnA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPdsnA10Releases.setDescription('Total number of A10 connections released by PDSN during the PPP authentication phase.')
cCdmaPppAuthPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPcfA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPcfA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPcfA10Releases.setDescription('Total number of A10 connections released by PCF during the PPP authentication phase.')
cCdmaPppIPCPPdsnA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIPCPPdsnA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIPCPPdsnA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIPCPPdsnA10Releases.setDescription('Total number of A10 connections released by PDSN during the IPCP negotiation phase.')
cCdmaPppIPCPPcfA10Releases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIPCPPcfA10Releases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIPCPPcfA10Releases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIPCPPcfA10Releases.setDescription('Total number of A10 connections released by PCF during the IPCP negotiation phase.')
cCdmaPppLcpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLcpSuccesses.setDescription('Total number of PPP connections that entered LCP stage successfully.')
cCdmaPppIpcpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIpcpSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIpcpSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIpcpSuccesses.setDescription('Total number of PPP connections that entered IPCP stage successfully.')
cCdmaPppAuthSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthSuccesses.setDescription('Total number of PPP connections that succeeded authentication.')
cCdmaPppConnectionOtherFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConnectionOtherFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppConnectionOtherFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppConnectionOtherFailures.setDescription('Total number of PPP negotiations terminated due to miscellaneous reasons.')
cCdmaPppRenegTotalReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegTotalReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegTotalReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegTotalReqs.setDescription('Total number of PPP connections renegotiated by either PDSN or mobile node since system was last restarted.')
cCdmaPppRenegByPdsnReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegByPdsnReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegByPdsnReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegByPdsnReqs.setDescription('Total number of PPP connection renegotiation requests initiated by PDSN since system was last restarted.')
cCdmaPppRenegByMobileReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegByMobileReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegByMobileReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegByMobileReqs.setDescription('Total number of PPP connection renegotiations requests initiated by mobile node since system was last restarted.')
cCdmaPppRenegLcpIpcpReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegLcpIpcpReqs.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegLcpIpcpReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegLcpIpcpReqs.setDescription('Total Number of PPP connection renegotiate request sent during setup (LCP and IPCP stages) since PDSN was last restarted.')
cCdmaPppRenegAddrMismatchReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegAddrMismatchReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegAddrMismatchReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegAddrMismatchReqs.setDescription('Total number of PPP connections renegotiated due to ip address mismatch since system was last restarted.')
cCdmaPppRenegOtherReasonReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegOtherReasonReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegOtherReasonReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegOtherReasonReqs.setDescription('Total number of PPP connections renegotiated due to reasons other than IP address mismatch since system was last restarted.')
cCdmaPppRenegSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegSuccesses.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegSuccesses.setDescription('Total number of PPP re-negotiations that have been successfully brought to active state since system was last restarted.')
cCdmaPppRenegFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegFailures.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegFailures.setDescription('Total number of PPP re-negotiations failed since system was last restarted.')
cCdmaPppRenegConnectionsAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegConnectionsAborted.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegConnectionsAborted.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegConnectionsAborted.setDescription('Total number of PPP re-negotiations terminated prematurely due to reasons such as MN poweroff etc.')
cCdmaPppRenegAnidChanges = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 2, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRenegAnidChanges.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRenegAnidChanges.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRenegAnidChanges.setDescription('Total number of PPP connections renegotiated due to access-network id(anid) change during session handoff.')
cCdmaPppAuthChapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapAttempts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthChapAttempts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthChapAttempts.setDescription('Total number of PPP CHAP authentication requests sent out since system was last restarted.')
cCdmaPppAuthChapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthChapSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthChapSuccesses.setDescription('Total number of PPP CHAP authentication successes since system was last restarted.')
cCdmaPppAuthChapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthChapFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthChapFailures.setDescription('Total number of PPP CHAP authentication failures since system was last restarted.')
cCdmaPppAuthPapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapAttempts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPapAttempts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPapAttempts.setDescription('Total number of PPP PAP authentication requests sent out since system was last restarted.')
cCdmaPppAuthPapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPapSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPapSuccesses.setDescription('Total number of PPP PAP authentication successes since system was last restarted.')
cCdmaPppAuthPapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthPapFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPapFailures.setDescription('Total number of PPP PAP authentication failures since system was last restarted.')
cCdmaPppAuthMschapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapAttempts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthMschapAttempts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMschapAttempts.setDescription('Total number of PPP MSCHAP authentication requests sent out since system was last restarted.')
cCdmaPppAuthMschapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthMschapSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMschapSuccesses.setDescription('Total number of PPP MSCHAP authentication successes since system was last restarted.')
cCdmaPppAuthMschapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthMschapFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMschapFailures.setDescription('Total number of PPP MSCHAP authentication failures since system was last restarted.')
cCdmaPppAuthEapAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthEapAttempts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthEapAttempts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthEapAttempts.setDescription('Total number of PPP EAP authentication requests sent out since system was last restarted.')
cCdmaPppAuthEapSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthEapSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthEapSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthEapSuccesses.setDescription('Total number of PPP EAP authentication successes since system was last restarted.')
cCdmaPppAuthEapFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthEapFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAuthEapFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthEapFailures.setDescription('Total number of PPP EAP authentication failures since system was last restarted.')
cCdmaPppAuthMsidAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMsidAttempts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMsidAttempts.setDescription('Total number of PPP MSID authentication requests tried since system was last restarted.')
cCdmaPppAuthMsidSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMsidSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMsidSuccesses.setDescription('Total number of PPP MSID authentication successes since system was last restarted.')
cCdmaPppAuthMsidFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMsidFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMsidFailures.setDescription('Total number of PPP MSID authentication failures since system was last restarted.')
cCdmaPppAuthAAATimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthAAATimeouts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthAAATimeouts.setDescription('Total number of PPP authentication failures due to AAA timeouts, since system was last restarted.')
cCdmaPppAuthChapTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthChapTimeouts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthChapTimeouts.setDescription('Total number of PPP CHAP authentication timeouts as MN does not respond to CHAP request, since system was last restarted.')
cCdmaPppAuthPapTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthPapTimeouts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthPapTimeouts.setDescription('Total number of PPP PAP authentication timeouts as MN does not send PAP request, since system was last restarted.')
cCdmaPppAuthMschapTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthMschapTimeouts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthMschapTimeouts.setDescription('Total number of PPP MSCHAP authentication timeouts as MN does not respond to MSCHAP request, since system was last restarted.')
cCdmaPppAuthSkips = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 3, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAuthSkips.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAuthSkips.setDescription('Total number of PPP negotiations that skipped PPP authentication, since system was last restarted.')
cCdmaPppTotalReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppTotalReleases.setReference('Refer to PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppTotalReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppTotalReleases.setDescription('Total number of active PPP connections released by either PDSN or mobile node since system was last restarted.')
cCdmaPppPdsnReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppPdsnReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppPdsnReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppPdsnReleases.setDescription('Total number of active PPP connection release request initiated by the PDSN since system was last restarted.')
cCdmaPppMobileReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppMobileReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppMobileReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppMobileReleases.setDescription('Total number of active PPP connection release request initiated by mobile node since system was last restarted.')
cCdmaPppAddrFilterReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAddrFilterReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAddrFilterReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAddrFilterReleases.setDescription('Total number of PPP connection release due to ingress address filering since system was last restarted.')
cCdmaPppAdminReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppAdminReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppAdminReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppAdminReleases.setDescription('Total number of PPP connections released due to administrative command since system was last restarted')
cCdmaPppLcpTermReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLcpTermReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLcpTermReleases.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaPppLcpTermReleases.setDescription('Total number of PPP connections released due to LCP Term REQ since system was last restarted.')
cCdmaPppIdleTimeoutReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppIdleTimeoutReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppIdleTimeoutReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppIdleTimeoutReleases.setDescription('Total number of PPP connections released because of PPP idle timeout since system was last restarted.')
cCdmaPppL2tpTunnelReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppL2tpTunnelReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppL2tpTunnelReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppL2tpTunnelReleases.setDescription('Total number of PPP connections released due to L2TP tunnel release since system was last restarted.')
cCdmaPppInsufResReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppInsufResReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppInsufResReleases.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaPppInsufResReleases.setDescription('Total number of PPP connections released due to insufficient resources since system was last restarted.')
cCdmaPppSessTimeoutReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppSessTimeoutReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppSessTimeoutReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppSessTimeoutReleases.setDescription('Total number of PPP connections released due to session timeout since system was last restarted.')
cCdmaPppSrvIntReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppSrvIntReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppSrvIntReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppSrvIntReleases.setDescription('Total number of PPP connections released due to service interruption since system was last restarted.')
cCdmaPppSrvUnavailReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppSrvUnavailReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppSrvUnavailReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppSrvUnavailReleases.setDescription('Total number of PPP connections released due to service unavailable since system was last restarted.')
cCdmaPppMissEchoReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppMissEchoReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppMissEchoReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppMissEchoReleases.setDescription('Total number of PPP connections released as peer did not send echo reply to echo requests since system was last restarted.')
cCdmaPppDeregisterByPcfReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppDeregisterByPcfReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppDeregisterByPcfReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppDeregisterByPcfReleases.setDescription('Total number of PPP connections released as pcf sends deregistration request since system was last restarted.')
cCdmaPppLifetimeExpiryReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppLifetimeExpiryReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppLifetimeExpiryReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppLifetimeExpiryReleases.setDescription('Total number of PPP connections released as the session lifetime expires, since the system was last restarted.')
cCdmaPppOtherReasonReleases = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 4, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppOtherReasonReleases.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppOtherReasonReleases.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppOtherReasonReleases.setDescription('Total number of PPP connections released due to unknown reasons since system was last restarted.')
cCdmaPppCompressNegoCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressNegoCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressNegoCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressNegoCons.setDescription('Total number of PPP connections that negotiated compression since system was last restarted.')
cCdmaPppCompressMsftCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressMsftCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressMsftCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressMsftCons.setDescription('Total number of PPP connections that use Microsoft compression since system was last restarted.')
cCdmaPppCompressAscendCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressAscendCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressAscendCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressAscendCons.setDescription('Total number of PPP connections that use Ascend compression since system was last restarted.')
cCdmaPppCompressStackCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressStackCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressStackCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressStackCons.setDescription('Total number of PPP connections that use stack compression since system was last restarted.')
cCdmaPppCompressDeflateCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressDeflateCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressDeflateCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressDeflateCons.setDescription('Total number of PPP connections that use deflate compression since system was last restarted. ')
cCdmaPppCompressOtherCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressOtherCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressOtherCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressOtherCons.setDescription('Total number of PPP connections that use compression type other than above since system was last restarted.')
cCdmaPppNegoMrruCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoMrruCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppNegoMrruCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppNegoMrruCons.setDescription('Total number of PPP connections that have negotiated MRRU since system was last restarted. ')
cCdmaPppNegoIpxCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoIpxCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppNegoIpxCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppNegoIpxCons.setDescription('Total number of PPP connections that have negotiated IPX protocol since system was last restarted.')
cCdmaPppNegoIpCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoIpCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppNegoIpCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppNegoIpCons.setDescription('Total number of PPP connections that have negotiated IP protocol since system was last restarted.')
cCdmaPppNegoVjCompCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoVjCompCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppNegoVjCompCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppNegoVjCompCons.setDescription('Total number of PPP connections that have negotiated header VJ-Compression since system was last restarted.')
cCdmaPppNegoBapCons = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppNegoBapCons.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979, 2125, 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppNegoBapCons.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppNegoBapCons.setDescription('Total number of PPP connections that negotiated BAP (Bandwidth Allocation protocol, RFC 2125) since system was last restarted.')
cCdmaPppConFormedBundles = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppConFormedBundles.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppConFormedBundles.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppConFormedBundles.setDescription('Total number of PPP bundles formed since system was last restarted. ')
cCdmaPppCompressNegoFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppCompressNegoFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppCompressNegoFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppCompressNegoFailures.setDescription('Total number of PPP negotiations that failed due to compression negotiation failure, since the system was last restarted. ')
cCdmaPppTransmittedEchoReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppTransmittedEchoReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppTransmittedEchoReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppTransmittedEchoReqs.setDescription('Total number of LCP Echo requests transmitted, since system was last restarted. ')
cCdmaPppRetransmittedEchoReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppRetransmittedEchoReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppRetransmittedEchoReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppRetransmittedEchoReqs.setDescription('Total number of LCP Echo requests retransmitted, since system was last restarted. ')
cCdmaPppReceivedEchoReplies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppReceivedEchoReplies.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppReceivedEchoReplies.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppReceivedEchoReplies.setDescription('Total number of LCP Echo reply received, since system was last restarted. ')
cCdmaPppEchoRequestTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppEchoRequestTimeouts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppEchoRequestTimeouts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppEchoRequestTimeouts.setDescription('Total number of LCP Echo requests timed out, since system was last restarted. ')
cCdmaPppUnknownProtocolPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppUnknownProtocolPktDiscards.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppUnknownProtocolPktDiscards.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppUnknownProtocolPktDiscards.setDescription('Total number of packets discarded at PPP stack due to protocol value can not be identified, since the system was last restarted. ')
cCdmaPppBadLengthPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 3, 99, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPppBadLengthPktDiscards.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A11/A10 interface and PPP related RFC 1661, 1662, 1332, 1570, 1979 1962,1990, 1974, 2509, 2661, 2716, 2284, 2118, 1994')
if mibBuilder.loadTexts: cCdmaPppBadLengthPktDiscards.setStatus('current')
if mibBuilder.loadTexts: cCdmaPppBadLengthPktDiscards.setDescription('Total number of PPP packets discarded stack due to bad length, since the system was last restarted. ')
cCdmaTransmittedSipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSipKiloOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaTransmittedSipKiloOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedSipKiloOctets.setDescription('Total number of simple IP data octets (in unit of 1024 octets) sent to mobile stations from PDSN since system was last restarted.')
cCdmaReceivedSipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedSipKiloOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaReceivedSipKiloOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaReceivedSipKiloOctets.setDescription('Total number of simple IP data octets (in unit of 1024 octets) received from mobile stations by PDSN since system was last restarted.')
cCdmaTransmittedSipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSipPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaTransmittedSipPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedSipPkts.setDescription('Total number of simple IP data packets sent to mobile stations since system was last restarted.')
cCdmaReceivedSipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedSipPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaReceivedSipPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaReceivedSipPkts.setDescription('Total number of simple IP data packets received from mobile stations since system was last restarted.')
cCdmaTransmittedMipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedMipKiloOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaTransmittedMipKiloOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedMipKiloOctets.setDescription('Total number of mobile IP data octets (in unit of 1024 octets) sent to mobile stations from PDSN since system was last restarted.')
cCdmaReceivedMipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedMipKiloOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaReceivedMipKiloOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaReceivedMipKiloOctets.setDescription('Total number of mobile IP data octets (in unit of 1024 octets) received from mobile stations by PDSN since system was last restarted.')
cCdmaTransmittedMipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedMipPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaTransmittedMipPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedMipPkts.setDescription('Total number of mobile IP data packets sent to mobile stations from PDSN since system was last restarted.')
cCdmaReceivedMipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedMipPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaReceivedMipPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaReceivedMipPkts.setDescription('Total number of mobile IP data packets received from mobile stations since system was last restarted.')
cCdmaTransmittedPmipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedPmipKiloOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaTransmittedPmipKiloOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedPmipKiloOctets.setDescription('Total number of proxy mobile IP data octets (in unit of 1024 octets) sent to mobile stations from PDSN since system was last restarted.')
cCdmaReceivedPmipKiloOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedPmipKiloOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaReceivedPmipKiloOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaReceivedPmipKiloOctets.setDescription('Total number of proxy mobile IP data octets (in unit of 1024 octets) received from mobile stations since system was last restarted.')
cCdmaTransmittedPmipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedPmipPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaTransmittedPmipPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedPmipPkts.setDescription('Total number of proxy mobile IP data packets sent to mobile stations from PDSN since system was last restarted.')
cCdmaReceivedPmipPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaReceivedPmipPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaReceivedPmipPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaReceivedPmipPkts.setDescription('Total number of proxy mobile IP data packets received from mobile stations by PDSN since system was last restarted.')
cCdmaTransmittedSDBPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSDBPkts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaTransmittedSDBPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedSDBPkts.setDescription('Total number of SDB marked data packets sent to PCF from PDSN since system was last restarted.')
cCdmaTransmittedSDBOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaTransmittedSDBOctets.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaTransmittedSDBOctets.setStatus('current')
if mibBuilder.loadTexts: cCdmaTransmittedSDBOctets.setDescription('Total number of SDB marked data data octets sent to PCF from PDSN since system was last restarted.')
cCdmaNoGREKeyPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaNoGREKeyPktDiscards.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaNoGREKeyPktDiscards.setStatus('current')
if mibBuilder.loadTexts: cCdmaNoGREKeyPktDiscards.setDescription('Total number of packets discarded from PCF because GRE Key is missing since system was last restarted.')
cCdmaNoSessionPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaNoSessionPktDiscards.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaNoSessionPktDiscards.setStatus('current')
if mibBuilder.loadTexts: cCdmaNoSessionPktDiscards.setDescription('Total number of packets discarded from PCF because session is not found since system was last restarted.')
cCdmaInvGREProtoPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInvGREProtoPktDiscards.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaInvGREProtoPktDiscards.setStatus('current')
if mibBuilder.loadTexts: cCdmaInvGREProtoPktDiscards.setDescription('Total number of packets discarded from PCF because GRE protocol is invalid since system was last restarted.')
cCdmaInvCheckSumPktDiscards = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 4, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInvCheckSumPktDiscards.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaInvCheckSumPktDiscards.setStatus('current')
if mibBuilder.loadTexts: cCdmaInvCheckSumPktDiscards.setDescription('Total number of packets discarded from PCF because of invalid checksum since system was last restarted.')
cCdmaFlowSimpleIpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowSimpleIpSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for simple IP service.')
if mibBuilder.loadTexts: cCdmaFlowSimpleIpSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowSimpleIpSuccesses.setDescription('Total number of Simple IP flow that has been established successfully since system reboot.')
cCdmaFlowMobilIpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowMobilIpSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for mobile IP service.')
if mibBuilder.loadTexts: cCdmaFlowMobilIpSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowMobilIpSuccesses.setDescription('Total number of mobile IP flow that has been established successfully since system reboot.')
cCdmaFlowProxyIpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowProxyIpSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaFlowProxyIpSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowProxyIpSuccesses.setDescription('Total number of proxy mobile IP flow that has been established successfully since system reboot.')
cCdmaFlowVpdnSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowVpdnSuccesses.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model and CISCO PDSN release note.')
if mibBuilder.loadTexts: cCdmaFlowVpdnSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowVpdnSuccesses.setDescription('Total number of VPDN flow that has been established successfully since system reboot.')
cCdmaFlowSimpleIpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowSimpleIpFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.')
if mibBuilder.loadTexts: cCdmaFlowSimpleIpFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowSimpleIpFailures.setDescription('Total number of simple IP flow setup request failed since last system reboot.')
cCdmaFlowMobileIpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowMobileIpFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.')
if mibBuilder.loadTexts: cCdmaFlowMobileIpFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowMobileIpFailures.setDescription('Total number of mobile IP flow setup request failed since last system reboot.')
cCdmaFlowProxyIpFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowProxyIpFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.')
if mibBuilder.loadTexts: cCdmaFlowProxyIpFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowProxyIpFailures.setDescription('Total number of proxy mobile IP flow setup request failed since last system reboot.')
cCdmaFlowVpdnFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowVpdnFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.')
if mibBuilder.loadTexts: cCdmaFlowVpdnFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowVpdnFailures.setDescription('Total number of VPDN flow setup request failed since last system reboot.')
cCdmaFlowUnknownTypeFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaFlowUnknownTypeFailures.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.')
if mibBuilder.loadTexts: cCdmaFlowUnknownTypeFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaFlowUnknownTypeFailures.setDescription('Total number of unknown type flow setup request failed since last system reboot.')
cCdmaServiceTotalOptions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceTotalOptions.setReference('Refer to 3GPP2 IOS 4.1 for description of defined service options.')
if mibBuilder.loadTexts: cCdmaServiceTotalOptions.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceTotalOptions.setDescription('Total number of service options supported by this PDSN.')
cCdmaServiceOptionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2), )
if mibBuilder.loadTexts: cCdmaServiceOptionTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceOptionTable.setDescription('This is an independent table maintained by PDSN node. Each entry in this table is created when a new non-zero service option is processed during call setup. An existing entry is not expected to be deleted unless system is restarted.')
cCdmaServiceOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionIndex"))
if mibBuilder.loadTexts: cCdmaServiceOptionEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceOptionEntry.setDescription('A conceptual row in the cCdmaServiceOptionTable table. Each row contains success and failures statistics of a particular service option.')
cCdmaServiceOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 9, 12, 13, 14, 15, 18, 19, 22, 23, 24, 25, 32, 33, 37, 54, 55, 4103))).clone(namedValues=NamedValues(("smsRate1", 6), ("loopback13K", 9), ("asyncDataRate2", 12), ("group3FaxRate2", 13), ("smsRate2", 14), ("packetData144k", 15), ("otapaRate1", 18), ("otapaRate2", 19), ("packetDataRs1fRs1r", 22), ("packetDataRs1fRs2r", 23), ("packetDataRs2fRs1r", 24), ("packetDataRs2fRs2", 25), ("is2000TestData", 32), ("packetData3G", 33), ("isdn64k", 37), ("is2000Markov", 54), ("is2000Loopback", 55), ("packetDataRev1", 4103))))
if mibBuilder.loadTexts: cCdmaServiceOptionIndex.setReference('Refer to 3GPP2 IOS 4.1 for details.')
if mibBuilder.loadTexts: cCdmaServiceOptionIndex.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceOptionIndex.setDescription('This object reflects a service option as defined by IOS 4.1. It is used to uniquely index entries in this table. The following options are defined in 3GPP2 4.1: - smsRate1(6): SMS rate set 1 - loopback13K(9): 13K loopback - asyncDataRate2(12) Asynchronous data rate set 2 - group3FaxRate2(13) Group 3 fax rate set 2 - smsRate2(14) SMS rate set 2 - packetData144k(15) Packet data service: Internet or ISO protocol stack (14.4kbps) - otapaRate1(18): OTAPA rate set 1 - otapaRate2(19): OTAPA rate set 2 - is2000TestData(32): IS-2000 test data - is2000Markov(54): IS-2000 Markov - is2000Loopback(55): IS-2000 loopback - packetDataRs1fRs1r(22): High speed packet data service: internet or ISO protocol stack (RS1 forward, RS1 reverse) - packetDataRs1fRs2r(23): High speed packet data service: internet or ISO protocol stack (RS1 forward, RS2 reverse) - packetDataRs2fRs1r(24): High speed packet data service: internet or ISO protocol stack (RS2 forward, RS1 reverse) - packetDataRs2fRs2(25): High speed packet data service: internet or ISO protocol stack (RS2 forward, RS2 reverse) - packetData3G(33): 3G high speed packet data - isdn64k(37),: ISDN interworking service (64kbps) - packetDataRev1(4103): Packet data service: Internet or ISO protocol stack, revision 1 (9.6 or 14.4kbps)')
cCdmaServiceOptionSucesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceOptionSucesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceOptionSucesses.setDescription('Total number of RP session setup success for a particular service option as defined by IOS 4.1.')
cCdmaServiceOptionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceOptionFailures.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceOptionFailures.setDescription('Total number of RP session setup failure for a particular service option as defined by IOS 4.1.')
cCdmaInterPcfHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInterPcfHandoffs.setReference('Refer to 3GPP2 IOS 4.1 for details.')
if mibBuilder.loadTexts: cCdmaInterPcfHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaInterPcfHandoffs.setDescription('Total number of inter PCF handoffs since system last restart.')
cCdmaInterPdsnHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaInterPdsnHandoffs.setReference('Refer to 3GPP2 IOS 4.1 for details.')
if mibBuilder.loadTexts: cCdmaInterPdsnHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaInterPdsnHandoffs.setDescription('Total number of inter PDSN handoffs since system last restart.')
cCdmaIdChangeHandoffs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaIdChangeHandoffs.setReference('Refer to 3GPP2 IOS 4.1 for details.')
if mibBuilder.loadTexts: cCdmaIdChangeHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaIdChangeHandoffs.setDescription('Total number of handoffs due to CANID/PANID change since system last restart.')
cCdmaStatusIS2OOSes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaStatusIS2OOSes.setStatus('current')
if mibBuilder.loadTexts: cCdmaStatusIS2OOSes.setDescription('Total number of status changes from IS to OOS.')
cCdmaStatusOOS2ISes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaStatusOOS2ISes.setStatus('current')
if mibBuilder.loadTexts: cCdmaStatusOOS2ISes.setDescription('Total number of status changes from OOS to IS.')
cCdmaAddressStaticSIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticSIPs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressStaticSIPs.setDescription('Total number of simple IP calls which negotiated static IP addresses.')
cCdmaAddressDynamicSIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicSIPs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressDynamicSIPs.setDescription('Total number of simple IP calls which negotiated dynamic IP addresses.')
cCdmaAddressStaticMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticMIPs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressStaticMIPs.setDescription('Total number of mobile IP calls which negotiated static IP addresses.')
cCdmaAddressDynamicMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicMIPs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressDynamicMIPs.setDescription('Total number of mobile IP calls which negotiated dynamic IP addresses.')
cCdmaAddressStaticPMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticPMIPs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressStaticPMIPs.setDescription('Total number of proxy mobile IP calls which negotiated static IP addresses.')
cCdmaAddressDynamicPMIPs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicPMIPs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressDynamicPMIPs.setDescription('Total number of proxy mobile IP calls which negotiated dynamic IP addresses.')
cCdmaAddressStaticVPDNs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressStaticVPDNs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressStaticVPDNs.setDescription('Total number of VPDN calls which negotiated static IP addresses.')
cCdmaAddressDynamicVPDNs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAddressDynamicVPDNs.setStatus('current')
if mibBuilder.loadTexts: cCdmaAddressDynamicVPDNs.setDescription('Total number of VPDN calls which negotiated dynamic IP addresses.')
cCdmaPcfSoRpRegStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoRpRegStatsTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegStatsTable.setDescription("A table containing RP registration statistics, such as number of registration requests, registration Replies etc., grouped and indexed on the basis of PCF's IP address and the service option.")
cCdmaPcfSoRpRegStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoRpRegStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegStatsEntry.setDescription('The RP registration statistics pertaining to a unique combination of PCF and service option.')
cCdmaPcfSoRpRegIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIpAddrType.setDescription('Represents the type of the address specified by cCdmaPcfSoRpRegIpAddr.')
cCdmaPcfSoRpRegIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIpAddr.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIpAddr.setDescription('The IP address of the PCF that serves the mobile node.')
cCdmaPcfSoRpRegServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoRpRegServiceOption.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegServiceOption.setDescription('The service option received as part of the registration request.')
cCdmaPcfSoRpRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegRcvdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegRcvdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegRcvdReqs.setDescription('Total number of A11 registration requests received since the system was last restarted.')
cCdmaPcfSoRpRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAcptdReqs.setDescription('Total number of A11 registration requests accepted since the system was last restarted. The code field in the corresponding registration reply message, is set to zero.')
cCdmaPcfSoRpRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDeniedReqs.setDescription('Total number of A11 registration requests denied since the system was last restarted. The code field in the corresponding registration reply message is set to non-zero.')
cCdmaPcfSoRpRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegDiscardedReqs.setDescription('Total number of A11 registration requests silently discarded since the system was last restarted. A corresponding registration reply message is not returned for these A11 registration requests.')
cCdmaPcfSoRpInitRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegAcptdReqs.setDescription('Total number of accepted A11 registration requests meant for establishing new R-P connections, since the system was last restarted. These A11 registration requests contain the connection setup airlink record. The code field in the corresponding registration reply message is set to zero.')
cCdmaPcfSoRpInitRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDeniedReqs.setDescription('Total number of denied A11 registration requests meant for establishing new R-P connections, since the system was last restarted. These A11 registration requests contain the connection setup airlink record. The code field in the corresponding registration reply message set to non-zero.')
cCdmaPcfSoRpReRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAcptdReqs.setDescription('Total number of accepted A11 registration requests meant for refreshing the already established R-P connections, since the system was last restarted. The Code field in the corresponding registration reply message is set to zero.')
cCdmaPcfSoRpReRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDeniedReqs.setDescription('Total number of denied A11 registration requests meant for refreshing the already established R-P connections, since the system was last restarted. The Code field in the corresponding registration reply message is set to non-zero.')
cCdmaPcfSoRpDeRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAcptdReqs.setDescription('Total number of accepted A11 registration requests meant for de-establishing the already established R-P connections, since the system was last restarted. The Code field in the corresponding registration reply message is set to zero.')
cCdmaPcfSoRpDeRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDeniedReqs.setDescription('Total number of denied A11 registration requests meant for de-establishing the already established R-P connections, since the system was last restarted. The Code field in the corresponding registration reply message is set to non-zero.')
cCdmaPcfSoRpRegPcfUnknwnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegPcfUnknwnFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegPcfUnknwnFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegPcfUnknwnFails.setDescription("The number of registration requests failed because PCF address is not in PDSN's list of configured PCFs for unspecified reason since system was last restarted.")
cCdmaPcfSoRpRegAdmnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAdmnFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAdmnFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegAdmnFails.setDescription("The number of registration requests failed because PCF address is not in PDSN's list of configured PCFs since system was last restarted.")
cCdmaPcfSoRpRegNoRsrcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRsrcFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRsrcFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRsrcFails.setDescription('The number of registration requests failed because max number of PCFs or max number of sessions reached or out of system resources since system was last restarted.')
cCdmaPcfSoRpRegMNAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegMNAuthFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegMNAuthFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegMNAuthFails.setDescription('The number of registration requests failed due to MN authentication failure since system was last restarted.')
cCdmaPcfSoRpRegIdMismatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIdMismatFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIdMismatFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegIdMismatFails.setDescription('The number of registration requests failed because of identification mismatch since system was last restarted.')
cCdmaPcfSoRpRegBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadReqFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadReqFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadReqFails.setDescription('The number of registration requests failed because of badly formed request since system was last restarted.')
cCdmaPcfSoRpRegUnkPdsnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegUnkPdsnFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegUnkPdsnFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegUnkPdsnFails.setDescription('The number of registration requests failed because of unknown PDSN/HA Address since system was last restarted.')
cCdmaPcfSoRpRegNoRevTunFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRevTunFails.setReference('RFC-2344.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRevTunFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegNoRevTunFails.setDescription('The number of registration requests failed because FA to HA reverse tunnel setup failed since system was last restarted.')
cCdmaPcfSoRpRegTBitNSetFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegTBitNSetFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegTBitNSetFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegTBitNSetFails.setDescription('The number of registration requests failed because reverse tunnel is required, but T bit is not set since system was last restarted.')
cCdmaPcfSoRpRegBadCVSEFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadCVSEFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadCVSEFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpRegBadCVSEFails.setDescription('The number of registration requests failed because of unsupported vendor codes in CVSE since system was last restarted.')
cCdmaPcfSoRpInitRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegRcvdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegRcvdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegRcvdReqs.setDescription('The number of Initial A11 Registration requests received since system was last restarted.')
cCdmaPcfSoRpInitRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpInitRegDiscardedReqs.setDescription('The number of Initial A11 Registration requests silently discarded since system was last restarted.')
cCdmaPcfSoRpReRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegRcvdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegRcvdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegRcvdReqs.setDescription('The number of A11 Re-Registration requests received since system was last restarted.')
cCdmaPcfSoRpReRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegDiscardedReqs.setDescription('The number of A11 Re-Registration requests silently discarded since system was last restarted.')
cCdmaPcfSoRpDeRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegRcvdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegRcvdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegRcvdReqs.setDescription('The number of A11 De-Registration requests received since system was last restarted.')
cCdmaPcfSoRpDeRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegDiscardedReqs.setDescription('The number of A11 De-Registration requests silently discarded since system was last restarted.')
cCdmaPcfSoRpHandoffRegRcvdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegRcvdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegRcvdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegRcvdReqs.setDescription('The number of A11 Handoff Registration requests received since system was last restarted.')
cCdmaPcfSoRpHandoffRegAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegAcptdReqs.setDescription('Total number of accepted handoff A11 Registration Requests meant for already existing session, since the system was last restarted.')
cCdmaPcfSoRpHandoffRegDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10/A11(R-P) interface.')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDeniedReqs.setDescription('Total number of denied handoff A11 Registration Requests meant for already existing session, since the system was last restarted.')
cCdmaPcfSoRpHandoffRegDiscardedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDiscardedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDiscardedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpHandoffRegDiscardedReqs.setDescription('The number of handoff A11 Registration requests silently discarded since system was last restarted.')
cCdmaPcfSoRpReRegAirlinkStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStarts.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStarts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStarts.setDescription('The number of A11 Re-Registration requests containing Airlink Start since system was last restarted.')
cCdmaPcfSoRpReRegAirlinkStops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStops.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStops.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpReRegAirlinkStops.setDescription('The number of A11 Re-Registration requests containing Airlink Stop since system was last restarted.')
cCdmaPcfSoRpDeRegAirlinkStops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 10, 1, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAirlinkStops.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAirlinkStops.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpDeRegAirlinkStops.setDescription('The number of A11 De-Registration requests containing Airlink Stop since system was last restarted.')
cCdmaPcfSoRpUpdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdStatsTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdStatsTable.setDescription("A table containing RP update statistics such as RP updates sent, acks received etc., grouped and index on the basis of PCF's IP address and the service option.")
cCdmaPcfSoRpUpdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdStatsEntry.setDescription('The RP update statistics pertaining to a unique combination of PCF and service option.')
cCdmaPcfSoRpUpdIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIpAddrType.setDescription('Represents the type of the address specified by cCdmaPcfSoRpUpdIpAddr.')
cCdmaPcfSoRpUpdIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIpAddr.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIpAddr.setDescription('The IP address of the PCF that serves the mobile node.')
cCdmaPcfSoRpUpdServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdServiceOption.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdServiceOption.setDescription('A packet data service option, specifies a means between MS and RN to establish and maintain cdma2000 traffic channels for packet data service.')
cCdmaPcfSoRpUpdTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdTxdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdTxdReqs.setDescription('Total number of A11 registration updates transmitted since system was last restarted.')
cCdmaPcfSoRpUpdAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAcptdReqs.setDescription('Total number of A11 registration acknowledgements received with the Status field set to zero (indicating that the corresponding registration update was accepted), since system was last restarted.')
cCdmaPcfSoRpUpdDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDeniedReqs.setDescription('Total number of A11 registration acknowledgements received with the Status field set to non-zero indicating that the corresponding registration update was denied, since system was last restarted.')
cCdmaPcfSoRpUpdNotAckedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdNotAckedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdNotAckedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdNotAckedReqs.setDescription('Total number of A11 registration updates sent, for which no corresponding A11 registration acknowledgements received, since system was last restarted.')
cCdmaPcfSoRpUpdInitTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdInitTxdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdInitTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdInitTxdReqs.setDescription('Total number of initial A11 registration updates sent, excluding the re-transmitted A11 registration updates, since system was last restarted.')
cCdmaPcfSoRpUpdReTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReTxdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReTxdReqs.setDescription('Total number of re-transmitted A11 registration updates, since system was last restarted.')
cCdmaPcfSoRpUpdRcvdAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRcvdAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRcvdAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRcvdAcks.setDescription('Total number of A11 registration acknowledgements received, since system was last restarted.')
cCdmaPcfSoRpUpdDiscardedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDiscardedAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDiscardedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdDiscardedAcks.setDescription('Total number of A11 registration acknowledgements discarded, since system was last restarted.')
cCdmaPcfSoRpUpdRpLifeExpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRpLifeExpReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRpLifeExpReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdRpLifeExpReqs.setDescription('Total number of initial A11 registration updates sent due to RP lifetime expiry since system was last restarted.')
cCdmaPcfSoRpUpdPPPtermReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdPPPtermReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdPPPtermReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdPPPtermReqs.setDescription('Total number of initial A11 registration updates sent as a result of PPP termination, since system was last restarted.')
cCdmaPcfSoRpUpdOtherReaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdOtherReaReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdOtherReaReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdOtherReaReqs.setDescription('Total number of initial A11 registration updates sent due to reasons other than RP lifetime expiry, or PPP termination, since system was last restarted.')
cCdmaPcfSoRpUpdReaUnSpecFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReaUnSpecFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReaUnSpecFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdReaUnSpecFails.setDescription('The number of update registrations failed for unspecified reason since system was last restarted.')
cCdmaPcfSoRpUpdAdmnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAdmnFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAdmnFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdAdmnFails.setDescription('The number of update registrations failed due to administrative prohibition since system was last restarted.')
cCdmaPcfSoRpUpdMNAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdMNAuthFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdMNAuthFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdMNAuthFails.setDescription('The number of update registrations failed due to MN authentication failure since system was last restarted.')
cCdmaPcfSoRpUpdIdMismatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIdMismatFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIdMismatFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdIdMismatFails.setDescription('The number of registrations failed due to registration identity mismatch since system was last restarted.')
cCdmaPcfSoRpUpdBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdBadReqFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdBadReqFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpUpdBadReqFails.setDescription('The number of update registrations failed due to poorly formed request since system was last restarted.')
cCdmaSoRpUpdPcfHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdPcfHandoffs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdPcfHandoffs.setDescription('The number of update registrations sent as a result of inter pcf handoffs, since system was last restarted.')
cCdmaSoRpUpdHandoffNotAckedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffNotAckedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffNotAckedReqs.setDescription('Total number of A11 Registration Updates (sent as the result of inter PCF handoffs), for which no corresponding A11 Registration Acknowledgements received, since system was last restarted.')
cCdmaSoRpUpdHandoffReceivedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReceivedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReceivedAcks.setDescription('Total number of A11 Registration Acknowledgements received for the A11 Registration Updates sent as the result of inter PCF handoffs, since system was last restarted. ')
cCdmaSoRpUpdHandoffAcceptedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAcceptedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAcceptedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAcceptedReqs.setDescription('Total number of A11 Registration Acknowledgements received with the Status field set to zero (indicating that the corresponding Registration Update was accepted), since system was last restarted.')
cCdmaSoRpUpdHandoffDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDeniedReqs.setDescription('Total number of A11 Registration Acknowledgements received with the Status field set to non-zero indicating that the corresponding Registration Update was denied, since system was last restarted.')
cCdmaSoRpUpdHandoffDiscardedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDiscardedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffDiscardedAcks.setDescription('Total number of A11 Registration Acknowledgements discarded, since system was last restarted.')
cCdmaSoRpUpdHandoffInitTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffInitTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffInitTxdReqs.setDescription('Total number of initial A11 Registration Updates sent as the result of inter PCF handoffs, excluding the re-transmitted A11 Registration Updates, since system was last restarted.')
cCdmaSoRpUpdHandoffReTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReTxdReqs.setDescription('Total number of re-transmitted A11 Registration Updates as the initial Registration Update (sent as a result of inter PCF handoffs) was not acked or denied, since system was last restarted.')
cCdmaSoRpUpdHandoffReaUnSpecFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReaUnSpecFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffReaUnSpecFails.setDescription('The number of update registrations failed for unspecified reason since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaSoRpUpdHandoffAdmProhibFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAdmProhibFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffAdmProhibFails.setDescription('The number of update registrations failed due to administrative prohibition since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaSoRpUpdHandoffMNAuthenFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffMNAuthenFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffMNAuthenFails.setDescription('The number of update registrations failed due to MN authentication failure since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaSoRpUpdHandoffIdMismatchFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffIdMismatchFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffIdMismatchFails.setDescription('The number of registrations failed due to registration identity mismatch since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaSoRpUpdHandoffBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 11, 1, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffBadReqFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaSoRpUpdHandoffBadReqFails.setDescription('The number of update registrations failed due to poorly formed request since system was last restarted. The update is sent as a result of inter PCF handoff.')
cCdmaPcfSoRpSessUpdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdStatsTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdStatsTable.setDescription("A table containing RP update statistics such as RP updates sent, acks received etc., grouped and index on the basis of PCF's IP address and the service option.")
cCdmaPcfSoRpSessUpdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdStatsEntry.setDescription('The RP update statistics pertaining to a unique combination of PCF and service option.')
cCdmaPcfSoRpSessUpdIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIpAddrType.setDescription('Represents the type of the address specified by cCdmaPcfSoRpSessUpdIpAddr.')
cCdmaPcfSoRpSessUpdIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIpAddr.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIpAddr.setDescription('The IP address of the PCF that serves the mobile node.')
cCdmaPcfSoRpSessUpdServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdServiceOption.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdServiceOption.setDescription('A packet data service option, specifies a means between MS and RN to establish and maintain cdma2000 traffic channels for packet data service.')
cCdmaPcfSoRpSessUpdTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdTxdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdTxdReqs.setDescription('Total number of A11 session updates transmitted since system was last restarted.')
cCdmaPcfSoRpSessUpdAcptdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAcptdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAcptdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAcptdReqs.setDescription('Total number of A11 session update acknowledgements received with the Status field set to zero (indicating that the corresponding registration update was accepted), since system was last restarted.')
cCdmaPcfSoRpSessUpdDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDeniedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDeniedReqs.setDescription('Total number of A11 session update acknowledgements received with the Status field set to non-zero indicating that the corresponding registration update was denied, since system was last restarted.')
cCdmaPcfSoRpSessUpdNotAckedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdNotAckedReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdNotAckedReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdNotAckedReqs.setDescription('Total number of A11 session updates sent, for which no corresponding A11 registration acknowledgements received, since system was last restarted.')
cCdmaPcfSoRpSessUpdInitTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdInitTxdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdInitTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdInitTxdReqs.setDescription('Total number of initial A11 session updates sent, excluding the re-transmitted A11 registration updates, since system was last restarted.')
cCdmaPcfSoRpSessUpdReTxdReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReTxdReqs.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReTxdReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReTxdReqs.setDescription('Total number of re-transmitted A11 session updates, since system was last restarted.')
cCdmaPcfSoRpSessUpdRcvdAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRcvdAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRcvdAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRcvdAcks.setDescription('Total number of A11 session acknowledgements received, since system was last restarted.')
cCdmaPcfSoRpSessUpdDiscardedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDiscardedAcks.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDiscardedAcks.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdDiscardedAcks.setDescription('Total number of A11 session update acknowledgements discarded, since system was last restarted.')
cCdmaPcfSoRpSessUpdAlwaysOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAlwaysOn.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAlwaysOn.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdAlwaysOn.setDescription('Total number of initial A11 registration updates sent due to Always On downloaded since system was last restarted.')
cCdmaPcfSoRpSessUpdRNPDIT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRNPDIT.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRNPDIT.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdRNPDIT.setDescription('Total number of initial A11 registration updates sent due to TNPDIT downloaded, since system was last restarted.')
cCdmaPcfSoRpSessUpdParamNotUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdParamNotUpdated.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for A10 session update message and TR 45.6 for Accounting Model.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdParamNotUpdated.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdParamNotUpdated.setDescription('The number of session update failed for session parameter not updated reason since system was last restarted.')
cCdmaPcfSoRpSessUpdReaUnSpecFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReaUnSpecFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReaUnSpecFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdReaUnSpecFails.setDescription('The number of session update failed for unspecified reason since system was last restarted.')
cCdmaPcfSoRpSessUpdMNAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdMNAuthFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdMNAuthFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdMNAuthFails.setDescription('The number of session update failed due to MN authentication failure since system was last restarted.')
cCdmaPcfSoRpSessUpdIdMismatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIdMismatFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIdMismatFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdIdMismatFails.setDescription('The number of session update failed due to registration identity mismatch since system was last restarted.')
cCdmaPcfSoRpSessUpdBadReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 14, 1, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdBadReqFails.setReference('Refer to TIA/EIA international telecommunications organization standard TR 45.4 for details about A10 session setup errors.')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdBadReqFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoRpSessUpdBadReqFails.setDescription('The number of session update failed due to poorly formed request since system was last restarted.')
cCdmaPcfSoPppSetupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1), )
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupStatsTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupStatsTable.setDescription("A table containing PPP negotiation statistics such as PPP negotiations initiated, negotiation successes etc., grouped and index on the basis of PCF's IP address and the service option.")
cCdmaPcfSoPppSetupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppSetupIpAddrType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppSetupIpAddr"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppServiceOption"))
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupStatsEntry.setDescription('The PPP negotiation statistics pertaining to a unique combination of PCF and service option.')
cCdmaPcfSoPppSetupIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupIpAddrType.setDescription('Represents the type of the address specified by cCdmaPcfSoPppSetupIpAddr.')
cCdmaPcfSoPppSetupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupIpAddr.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppSetupIpAddr.setDescription('The IP address of the PCF that serves the Mobile Node.')
cCdmaPcfSoPppServiceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 3), CCdmaServiceOption())
if mibBuilder.loadTexts: cCdmaPcfSoPppServiceOption.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppServiceOption.setDescription('A packet data service option, specifies a means between MS and RN to establish and maintain cdma2000 traffic channels for packet data service.')
cCdmaPcfSoPppCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppCurrentConns.setReference("[1] RFC-1661 'The Point-to-Point Protocol (PPP)', W. Simpson. [2] TIA/EIA standard TR 45.4 for details about A10/A11 (R-P) interface.")
if mibBuilder.loadTexts: cCdmaPcfSoPppCurrentConns.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppCurrentConns.setDescription('Total number of currently active PPP connections.')
cCdmaPcfSoPppConnInitiateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnInitiateReqs.setReference("[1] RFC-1661 'The Point-to-Point Protocol (PPP)', W. Simpson. [2] TIA/EIA standard TR 45.4 for details about A10/A11 (R-P) interface.")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnInitiateReqs.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppConnInitiateReqs.setDescription('Total number of PPP connection initiate requests sent out since system was last restarted.')
cCdmaPcfSoPppConnSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnSuccesses.setReference("[1] RFC-1661 'The Point-to-Point Protocol (PPP)', W. Simpson. [2] TIA/EIA standard TR 45.4 for details about A10/A11 (R-P) interface.")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnSuccesses.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppConnSuccesses.setDescription('Total number of PPP connections that have been successfully brought to active state since system was last restarted.')
cCdmaPcfSoPppConnFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnFails.setReference("[1] RFC-1661 'The Point-to-Point Protocol (PPP)', W. Simpson. [2] TIA/EIA standard TR 45.4 for details about A10/A11 (R-P) interface.")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnFails.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppConnFails.setDescription('The number of PPP connection setup request failed since system was last restarted.')
cCdmaPcfSoPppConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 7, 12, 1, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnAborts.setReference("[1] RFC-1661 'The Point-to-Point Protocol (PPP)', W. Simpson. [2] TIA/EIA standard TR 45.4 for details about A10/A11 (R-P) interface.")
if mibBuilder.loadTexts: cCdmaPcfSoPppConnAborts.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfSoPppConnAborts.setDescription('Total number of PPP negotiations terminated prematurely, due to reasons such as MN poweroff, since system was last restarted.')
cCdmaSessionHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionHighThreshold.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionHighThreshold.setDescription('A threshold marking the high number of allowed sessions. Agent generates a notification when this threshold is reached during call setup.')
cCdmaSessionLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaSessionLowThreshold.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionLowThreshold.setDescription('A threshold marking the low number of allowed sessions. Agent generates a notification when this threshold is reached during call release.')
cCdmaClusterType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonCluster", 0), ("peerToPeer", 1), ("controllerMember", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterType.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterType.setDescription("The type of this PDSN cluster. - 'nonCluster' indicates cluster is not provisioned. - 'peerToPeer' indicates cluster type is peer-to- peer. - 'controllerMember' indicates cluster type is controller-member type.")
cCdmaClusterRole = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApply", 0), ("controller", 1), ("member", 2), ("collocated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterRole.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterRole.setDescription("The role this PDSN plays within a controller-member type of cluster: - 'notApply' indicates this PDSN does not play any cluster role. PDSN has this role if the cCdmaClusterType is not controller-member. - 'controller' indicates this PDSN is the controller of this cluster. - 'member' indicates this PDSN is a member of this cluster. - 'collocated' indicates this PDSN is both controller and a member of this cluster.")
cCdmaClusterTotalControllers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterTotalControllers.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterTotalControllers.setDescription('The total number of cluster controllers within this cluster.')
cCdmaClusterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2), )
if mibBuilder.loadTexts: cCdmaClusterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterCtrlTable.setDescription('A list of cluster controllers maintained by a PDSN cluster member. An entry is created when a cluster controller is added through provisioning command. An entry is deleted when a cluster controller is removed through provisioning command.')
cCdmaClusterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlAddressType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlAddress"))
if mibBuilder.loadTexts: cCdmaClusterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterCtrlEntry.setDescription('A conceptual row in cluster controller table, which represents a cluster controller of a particular InetAddress type and address.')
cCdmaClusterCtrlAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaClusterCtrlAddressType.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterCtrlAddressType.setDescription('This is the IP address type of a particular controller and is used as index (combine with cCdmaClusterCtrlAddress) to identify a unique cluster controller entry.')
cCdmaClusterCtrlAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaClusterCtrlAddress.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterCtrlAddress.setDescription('This is the IP address of a particular controller and is used as index (combine with cCdmaCluster- CtrlAddressType) to identify a unique cluster controller entry.')
cCdmaClusterCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2), ("alive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterCtrlStatus.setDescription('The operational status of the cluster controller maintained by the member.')
cCdmaClusterTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterTotalSessions.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterTotalSessions.setDescription('The total number of session records in PDSN cluster controller.')
cCdmaClusterSessHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaClusterSessHighThreshold.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterSessHighThreshold.setDescription('A threshold marking the high number of allowed sessions within a PDSN cluster controller. Notification will be generated when this threshold is reached during call setup.')
cCdmaClusterSessLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaClusterSessLowThreshold.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterSessLowThreshold.setDescription('A threshold marking the low number of allowed sessions within a PDSN cluster controller. Notification will be generated when this threshold is reached during call release.')
cCdmaClusterTotalMembers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterTotalMembers.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterTotalMembers.setDescription('The total number of member records in PDSN cluster controller.')
cCdmaClusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5), )
if mibBuilder.loadTexts: cCdmaClusterMemberTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberTable.setDescription('A list of cluster members maintained by a PDSN cluster controller. An entry is created when a cluster member is added through provisioning command or auto-discovered. An entry is deleted when a cluster member is removed through provisioning command or found dead by auto-discovering.')
cCdmaClusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1), ).setIndexNames((0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberAddressType"), (0, "CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberAddress"))
if mibBuilder.loadTexts: cCdmaClusterMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberEntry.setDescription('A conceptual row in cCdmaClusterMemberTable table, which represents a PDSN cluster member of particular InetAddress type and address.')
cCdmaClusterMemberAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cCdmaClusterMemberAddressType.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberAddressType.setDescription('This is IP address type of this PDSN cluster member, which is used as index (combine with cCdmaClusterMemberAddress) to identify a unique cluster member entry.')
cCdmaClusterMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: cCdmaClusterMemberAddress.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberAddress.setDescription('This is IP address of this PDSN cluster member, which is used as index (combine with cCdmaClusterMemberAddressType) to identify a unique cluster member entry.')
cCdmaClusterMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("adminProhibit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterMemberStatus.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberStatus.setDescription("The operational status of this PDSN: - 'unknown' indicates cluster controller doesn't know this member's status. - 'ready' indicates this member is ready to serve call setup request. - 'adminProhibit' indicates this member will not new call setup request, but will maintain existing calls.")
cCdmaClusterMemberLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 2, 3, 5, 1, 4), Unsigned32()).setUnits('1%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaClusterMemberLoad.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberLoad.setDescription('PDSN cluster member load as an aggregate percentage of the maximum load that can be serviced.')
cCdmaNotifSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 8, 3, 1), CCdmaServiceAffectedLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaNotifSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: cCdmaNotifSeverityLevel.setDescription("This is the configured service affected level. Agent generates notifications only if such notifications' service affected level is higher than this value.")
cCdmaServiceAffectedLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 1), CCdmaServiceAffectedLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaServiceAffectedLevel.setStatus('current')
if mibBuilder.loadTexts: cCdmaServiceAffectedLevel.setDescription('This is the severity level of affected service by this event/condition that causes this notification.')
cCdmaAffectedAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaAffectedAddressType.setDescription('This is the IP address type of affected device that generates this notification.')
cCdmaAffectedAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaAffectedAddress.setDescription('This is the IP address of affected device that generates this notification.')
cCdmaAffectedMemberStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("adminProhibit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedMemberStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaAffectedMemberStatus.setDescription('The operational status of affected member PDSN.')
cCdmaAffectedCtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("alive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAffectedCtrlStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaAffectedCtrlStatus.setDescription('The operational status of the affected cluster controller.')
cCdmaPdsnMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 2))
cCdmaPdsnMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0))
cCdmaSessionMaxAllowedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"))
if mibBuilder.loadTexts: cCdmaSessionMaxAllowedNotif.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionMaxAllowedNotif.setDescription('This notification indicates PDSN has reached the maximum number of sessions the system can handle. In this state new session request will be rejected. Service affected level: critical')
cCdmaPcfMaxAllowedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"))
if mibBuilder.loadTexts: cCdmaPcfMaxAllowedNotif.setStatus('current')
if mibBuilder.loadTexts: cCdmaPcfMaxAllowedNotif.setDescription('This notification indicates PDSN has reached the maximum number of allowed PCF. In this state request from new PCF will be rejected. Service affected level: critical')
cCdmaSessionFormatErrorNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 3)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"))
if mibBuilder.loadTexts: cCdmaSessionFormatErrorNotif.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSessionFormatErrorNotif.setDescription('This notification indicates PDSN received invalid arguments from PCF leading to session termination. The agent should not generate more than 1 trap of this type per second to minimize the level of management traffic on the network')
cCdmaSessionRegReqFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 4)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"))
if mibBuilder.loadTexts: cCdmaSessionRegReqFailedNotif.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionRegReqFailedNotif.setDescription('This notification indicates a Registration Request received has failed which may be due to one of the following reasons: insufficient resource, Administrative prohibition, MN authentication failure, registration id mismatch, bad request, unknown HA address or T bit not set or unsupported VID. The agent should not generate more than 1 trap of same type per second to minimize the level of management traffic on the network. Service affected level: minor')
cCdmaPdsnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 5)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"))
if mibBuilder.loadTexts: cCdmaPdsnStatusChange.setStatus('current')
if mibBuilder.loadTexts: cCdmaPdsnStatusChange.setDescription('This notification indicates status change of PDSN.')
cCdmaSessionHighReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 6)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"))
if mibBuilder.loadTexts: cCdmaSessionHighReached.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionHighReached.setDescription('This notification indicates a session high threshold has been has been reached.')
cCdmaSessionLowReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 7)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"))
if mibBuilder.loadTexts: cCdmaSessionLowReached.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaSessionLowReached.setDescription('This notification indicates a session low threshold has been has been reached.')
cCdmaClusterSessionHighReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 8)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"))
if mibBuilder.loadTexts: cCdmaClusterSessionHighReached.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterSessionHighReached.setDescription('This notification indicates a cluster session high threshold has been reached by PDSN cluster controller.')
cCdmaClusterSessionLowReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 9)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"))
if mibBuilder.loadTexts: cCdmaClusterSessionLowReached.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterSessionLowReached.setDescription('This notification indicates a cluster session low threshold has been reached by PDSN cluster controller. Service affected level: Major/Warning')
cCdmaClusterMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 10)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedMemberStatus"))
if mibBuilder.loadTexts: cCdmaClusterMemberStatusChange.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaClusterMemberStatusChange.setDescription('Cluster controller detects member PDSN status change')
cCdmaClusterCtrlStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 11)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedCtrlStatus"))
if mibBuilder.loadTexts: cCdmaClusterCtrlStatusChange.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaClusterCtrlStatusChange.setDescription('Cluster member PDSN detects controller PDSN status change')
cCdmaClusterMemberStatusChange2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 12)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"))
if mibBuilder.loadTexts: cCdmaClusterMemberStatusChange2.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterMemberStatusChange2.setDescription('Cluster controller detects member PDSN status change')
cCdmaClusterCtrlStatusChange2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 13)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"))
if mibBuilder.loadTexts: cCdmaClusterCtrlStatusChange2.setStatus('current')
if mibBuilder.loadTexts: cCdmaClusterCtrlStatusChange2.setDescription('Cluster member PDSN detects controller PDSN status change')
cCdmaSessionLowReached2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 157, 2, 0, 14)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"))
if mibBuilder.loadTexts: cCdmaSessionLowReached2.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessionLowReached2.setDescription('This notification indicates a session low threshold has been has been reached.')
cCdmaRegReqInvPakLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvPakLenErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvPakLenErrs.setDescription('Invalid Registration request packet length while parsing since system was last restarted')
cCdmaRegReqInvProtocolErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvProtocolErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvProtocolErrs.setDescription('Invalid Protocol value in the Registration Request Session Specific Extension since system was last restarted')
cCdmaRegReqInvFlagsErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvFlagsErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvFlagsErrs.setDescription('Invalid Flags value in the Registration Request since system was last restarted')
cCdmaRegReqInvMHAEKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMHAEKeyErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvMHAEKeyErrs.setDescription('Invalid Authentication key in the Registration Request Mobile-Home Authentication extension since system was last restarted')
cCdmaRegReqMismatchSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMismatchSPIErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqMismatchSPIErrs.setDescription('Mismatch in SPI in the Registration Request Mobile-Home Authentication extension since system was last restarted')
cCdmaRegReqInvSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvSPIErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvSPIErrs.setDescription('Invalid SPI in the Registration Request Mobile-Home Authentication extension since system was last restarted')
cCdmaRegReqInvConnectionIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvConnectionIDErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvConnectionIDErrs.setDescription('Invalid Connection ID in the Registration Request since system was last restarted')
cCdmaRegReqInvMNIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMNIDErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvMNIDErrs.setDescription('Invalid MN ID in the Registration Request since system was last restarted')
cCdmaRegReqInvMNIDTypeErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMNIDTypeErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvMNIDTypeErrs.setDescription('Invalid MN ID type in the Registration Request since system was last restarted')
cCdmaRegReqInvMSIDLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvMSIDLenErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvMSIDLenErrs.setDescription('Invalid MSID length in the Registration Request since system was last restarted')
cCdmaRegReqMissingSSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMissingSSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqMissingSSEErrs.setDescription('Session Specific extension missing in the Registration Request since system was last restarted')
cCdmaRegReqMissingMHAEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMissingMHAEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqMissingMHAEErrs.setDescription('Mobile-Home Authentication extension missing in the Registration Request since system was last restarted')
cCdmaRegReqInvOrderErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvOrderErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvOrderErrs.setDescription('Invalid order of the extensions in the Registration Request since system was last restarted')
cCdmaRegReqInvVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvVSEErrs.setDescription('Invalid Vendor specific extensions in the Registration Request since system was last restarted')
cCdmaRegReqInvAppTypeInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvAppTypeInVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvAppTypeInVSEErrs.setDescription('Invalid Application type in Vendor specific extensions in the Registration Request since system was last restarted')
cCdmaRegReqDupAppTypeInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDupAppTypeInVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqDupAppTypeInVSEErrs.setDescription('Duplicate Application type in Vendor specific extensions in the Registration Request since system was last restarted')
cCdmaRegReqInvAppSubTypeInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvAppSubTypeInVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvAppSubTypeInVSEErrs.setDescription('Invalid Sub Application type in Vendor specific extensions in the Registration Request since system was last restarted')
cCdmaRegReqInvVendorIDInVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 18), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvVendorIDInVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvVendorIDInVSEErrs.setDescription('Invalid Vendor ID in Vendor specific extensions in the Registration Request since system was last restarted')
cCdmaRegReqDupCVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 19), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDupCVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqDupCVSEErrs.setDescription('Duplicate Critical Vendor extension in the Registration Request since system was last restarted')
cCdmaRegReqAcctUnknwnAttrErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 20), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctUnknwnAttrErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqAcctUnknwnAttrErrs.setDescription('Unknown Accounting attribute in the Registration Request since system was last restarted')
cCdmaRegReqAcctInvLenAttrErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 21), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctInvLenAttrErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqAcctInvLenAttrErrs.setDescription('Invalid accounting attribute length in the Registration Request since system was last restarted')
cCdmaRegReqAcctDupAttrErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 22), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctDupAttrErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqAcctDupAttrErrs.setDescription('Duplicate accounting attribute received in the Registration Request since system was last restarted')
cCdmaRegReqAcctRecRetransErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 23), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctRecRetransErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqAcctRecRetransErrs.setDescription('Same accounting sequence number and record type in the Registration Requests airlink record not updated since system was last restarted')
cCdmaRegReqAcctInvSeqNumErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 24), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqAcctInvSeqNumErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqAcctInvSeqNumErrs.setDescription('Invalid sequence number in the airlink accounting record Registration Requests siliently discarded since system was last restarted')
cCdmaRegReqDuplicateGREKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 25), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDuplicateGREKeyErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqDuplicateGREKeyErrs.setDescription('Duplicate GRE Key received in the Registration Request for different MSID from the same PCF since system was last restarted')
cCdmaRegReqSameGREKeySetupRcvdErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 26), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqSameGREKeySetupRcvdErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqSameGREKeySetupRcvdErrs.setDescription('Same GRE Key and Airlink setup received in the Registration Request for existing session since system was last restarted')
cCdmaRegReqGREKeyChngNoSetupErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 27), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqGREKeyChngNoSetupErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqGREKeyChngNoSetupErrs.setDescription('GRE changed without airlink setup received in the Registration Request for existing session since system was last restarted')
cCdmaRegReqInitNoSetupErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 28), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInitNoSetupErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInitNoSetupErrs.setDescription('Airlink Setup record not received in the Initial Registration Request since system was last restarted')
cCdmaRegReqStartBeforeSetupErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 29), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStartBeforeSetupErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqStartBeforeSetupErrs.setDescription('Airlink Start record received before the Airlink setup in the Registration Request since system was last restarted')
cCdmaRegReqStartOnCloseErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 30), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStartOnCloseErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqStartOnCloseErrs.setDescription('Airlink Start record received in the De-Registration Request since system was last restarted')
cCdmaRegReqStartOnActiveErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 31), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStartOnActiveErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqStartOnActiveErrs.setDescription('Airlink Start record received in the Registration Request for already active session since system was last restarted')
cCdmaRegReqStopOnDormantErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 32), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqStopOnDormantErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqStopOnDormantErrs.setDescription('Airlink Stop record received in the Registration Request for already dormant session since system was last restarted')
cCdmaRegReqInitRcvdStopErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 33), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInitRcvdStopErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInitRcvdStopErrs.setDescription('Airlink Stop record received in the Initial Registration Request since system was last restarted')
cCdmaRegReqInitRcvdSDBErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 34), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInitRcvdSDBErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInitRcvdSDBErrs.setDescription('Airlink SDB received in the Initial Registration Request since system was last restarted')
cCdmaRegReqInvAirlinkRecErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 35), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqInvAirlinkRecErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqInvAirlinkRecErrs.setDescription('Invalid Accounting Airlink record type in the Registration Request since system was last restarted')
cCdmaRegReqDeRegNoSessionErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 36), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqDeRegNoSessionErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqDeRegNoSessionErrs.setDescription('De-Registration Requests denied for non existing sessions since system was last restarted')
cCdmaRegReqReRegInDisconnectErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 37), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqReRegInDisconnectErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqReRegInDisconnectErrs.setDescription('Re-Registration Request received for the session in the disconnecting or deleting state, therefore the registration request is discarded since system was last restarted')
cCdmaRegReqMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 38), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegReqMemFailErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegReqMemFailErrs.setDescription('Registration Request discarded due to memory allocation failure during processing since system was last restarted')
cCdmaRpRegReqMaxSessionReachedErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 1, 39), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRegReqMaxSessionReachedErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRegReqMaxSessionReachedErrs.setDescription('Registration request rejected because of maximum limit or configured number of session reached since system was last restarted')
cCdmaRegUpdAckInvPakLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvPakLenErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvPakLenErrs.setDescription('Invalid Registration Update Ack packet length while parsing since system was last restarted')
cCdmaRegUpdAckInvProtocolErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvProtocolErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvProtocolErrs.setDescription('Invalid Protocol value in the Registration Update Ack Session Specific Extension since system was last restarted')
cCdmaRegUpdAckInvRUAEKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvRUAEKeyErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvRUAEKeyErrs.setDescription('Invalid Authentication key in the Registration Update Ack Registration Update Authentication extension since system was last restarted')
cCdmaRegUpdAckInvSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvSPIErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvSPIErrs.setDescription('Invalid SPI in the Registration Update Ack Registration Update Authentication extension since system was last restarted')
cCdmaRegUpdAckInvConnectionIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvConnectionIDErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvConnectionIDErrs.setDescription('Invalid Connection ID in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckInvMNIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMNIDErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMNIDErrs.setDescription('Invalid MN ID in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckInvMNIDTypeErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMNIDTypeErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMNIDTypeErrs.setDescription('Invalid MN ID type in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckInvMSIDLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMSIDLenErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvMSIDLenErrs.setDescription('Invalid MSID length in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckMissingSSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckMissingSSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckMissingSSEErrs.setDescription('Session Specific extension missing in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckMissingRUAEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckMissingRUAEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckMissingRUAEErrs.setDescription('Registration Update Authentication extension missing in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckInvOrderErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvOrderErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvOrderErrs.setDescription('Invalid order of the extensions in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckInvVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckInvVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckInvVSEErrs.setDescription('Invalid Vendor specific extensions in the Registration Update Ack since system was last restarted')
cCdmaRegUpdAckNoSessionErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckNoSessionErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckNoSessionErrs.setDescription('Registration Update Ack is discarded since system was last restarted')
cCdmaRegUpdAckMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 2, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdAckMemFailErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdAckMemFailErrs.setDescription('Registration Update Ack discarded due to memory allocation failure during processing since system was last restarted')
cCdmaSessUpdAckInvPakLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvPakLenErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvPakLenErrs.setDescription('Invalid Session Update Ack packet length while parsing since system was last restarted')
cCdmaSessUpdAckInvProtocolErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvProtocolErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvProtocolErrs.setDescription('Invalid Protocol value in the Session Update Ack Session Specific Extension since system was last restarted')
cCdmaSessUpdAckInvRUAEKeyErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvRUAEKeyErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvRUAEKeyErrs.setDescription('Invalid Authentication key in the Session Update Ack Registration Update Authentication extension since system was last restarted')
cCdmaSessUpdAckInvSPIErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvSPIErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvSPIErrs.setDescription('Invalid SPI in the Session Update Ack Session Update Authentication extension since system was last restarted')
cCdmaSessUpdAckInvConnectionIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvConnectionIDErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvConnectionIDErrs.setDescription('Invalid Connection ID in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckInvMNIDErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMNIDErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMNIDErrs.setDescription('Invalid MN ID in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckInvMNIDTypeErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMNIDTypeErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMNIDTypeErrs.setDescription('Invalid MN ID type in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckInvMSIDLenErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMSIDLenErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvMSIDLenErrs.setDescription('Invalid MSID length in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckMissingSSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckMissingSSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckMissingSSEErrs.setDescription('Session Specific extension missing in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckMissingRUAEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckMissingRUAEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckMissingRUAEErrs.setDescription('Session Update Authentication extension missing in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckInvOrderErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvOrderErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvOrderErrs.setDescription('Invalid order of the extensions in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckInvVSEErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckInvVSEErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckInvVSEErrs.setDescription('Invalid Vendor specific extensions in the Session Update Ack since system was last restarted')
cCdmaSessUpdAckNoSessionErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckNoSessionErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckNoSessionErrs.setDescription('Session Update Ack is discarded since system was last restarted')
cCdmaSessUpdAckMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 3, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdAckMemFailErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdAckMemFailErrs.setDescription('Session Update Ack discarded due to memory allocation failure during processing since system was last restarted')
cCdmaRegRplyInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegRplyInternalErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegRplyInternalErrs.setDescription('Registration reply not sent due to internal error during processing since system was last restarted')
cCdmaRegRplyMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegRplyMemFailErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegRplyMemFailErrs.setDescription('Registration reply not sent due to memory allocation failure during processing since system was last restarted')
cCdmaRpRplyPCFNoSecOrParseErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 4, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRpRplyPCFNoSecOrParseErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRpRplyPCFNoSecOrParseErrs.setDescription('Cannot send Reply to PCF because security association not found for the PCF or Parse error of Request since system was last restarted')
cCdmaRegUpdInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 5, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdInternalErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdInternalErrs.setDescription('Registration update not sent due to internal error during processing since system was last restarted')
cCdmaRegUpdMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 5, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaRegUpdMemFailErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaRegUpdMemFailErrs.setDescription('Registration update not sent due to memory allocation failure during processing since system was last restarted')
cCdmaSessUpdInternalErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 6, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdInternalErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdInternalErrs.setDescription('Session update not sent due to internal error during processing since system was last restarted')
cCdmaSessUpdMemFailErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 157, 1, 10, 6, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaSessUpdMemFailErrs.setStatus('current')
if mibBuilder.loadTexts: cCdmaSessUpdMemFailErrs.setDescription('Session update not sent due to memory allocation failure during processing since system was last restarted')
cCdmaPdsnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 3))
cCdmaPdsnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1))
cCdmaPdsnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2))
cCdmaPdsnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBCompliance = cCdmaPdsnMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaPdsnMIBCompliance.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB.')
cCdmaPdsnMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev1"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev1 = cCdmaPdsnMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaPdsnMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB.')
cCdmaPdsnMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 3)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev2 = cCdmaPdsnMIBComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaPdsnMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB.')
cCdmaPdsnMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 4)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev3"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev3 = cCdmaPdsnMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaPdsnMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB for R1.2.')
cCdmaPdsnMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 5)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev4"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev4 = cCdmaPdsnMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaPdsnMIBComplianceRev4.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB for R1.2.')
cCdmaPdsnMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 6)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev5"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev3"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoPppGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev5 = cCdmaPdsnMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaPdsnMIBComplianceRev5.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB for R2.0')
cCdmaPdsnMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 1, 7)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupRev5"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifPdsnGroupRev3"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoRpRegGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoPppGroup"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemPdsnGroupSup1"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnPcfSoRpRegGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnMIBComplianceRev6 = cCdmaPdsnMIBComplianceRev6.setStatus('current')
if mibBuilder.loadTexts: cCdmaPdsnMIBComplianceRev6.setDescription('The compliance statement for entities which implement the CDMA PDSN Management MIB for R3.0')
cCdmaSystemPdsnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 1)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFormatErrorNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMoMtInd"), ("CISCO-CDMA-PDSN-MIB", "cCdmaActiveConnTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPppCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionVJCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnStartTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowCount"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionNai"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHaIpAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowTechnology"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionAddressingScheme"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTunnelProt"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroup = cCdmaSystemPdsnGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroup.setDescription('A collection of objects needed for PDSN network management.')
cCdmaNotifPdsnGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 2)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFormatErrorNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroup = cCdmaNotifPdsnGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaNotifPdsnGroup.setDescription('The notifications related to PDSN network management.')
cCdmaSystemPdsnGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 3)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPppCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionVJCompressEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionSentOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRcvdOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionSentPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRcvdPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionDiscardedOutPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionDiscardedInPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionConnStartTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaActiveConnTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowCount"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegLifeTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegTimeToExpire"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionGREFromIPPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionGREToIPPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionNai"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHaIpAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFlowTechnology"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionAddressingScheme"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTunnelProt"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegValidRequests"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegAcceptedReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegLifeTimeZeroRequests"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPDeRegAcceptedReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegBadRequestFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegUnknownHAAddrFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdValidRequests"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdAcceptedReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRPUpdBadRequestFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev1 = cCdmaSystemPdsnGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroupRev1.setDescription('A collection of objects needed for PDSN network management.')
cCdmaNotifPdsnGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 4)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegReqFailedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroupRev1 = cCdmaNotifPdsnGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaNotifPdsnGroupRev1.setDescription('The notifications related to PDSN network management.')
cCdmaSystemPdsnGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 5)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonlUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpTermReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppInsufResReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev2 = cCdmaSystemPdsnGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroupRev2.setDescription('A collection of objects needed for PDSN R1.1 network management.')
cCdmaSystemPdsnGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 6)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonlUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpTermReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppInsufResReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobileIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowUnknownTypeFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceTotalOptions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionSucesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPdsnHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaIdChangeHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusIS2OOSes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusOOS2ISes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterRole"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalControllers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalMembers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberLoad"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifSeverityLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedCtrlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev3 = cCdmaSystemPdsnGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroupRev3.setDescription('A collection of objects needed for PDSN R1.2 network management.')
cCdmaNotifPdsnGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 7)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegReqFailedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnStatusChange"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionLowReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatusChange"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroupRev2 = cCdmaNotifPdsnGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaNotifPdsnGroupRev2.setDescription('The notifications related to PDSN R1.2 network management.')
cCdmaSystemPdsnGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 8)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistPanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistCanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistBsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonlUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpTermReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppInsufResReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobileIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowUnknownTypeFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceTotalOptions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionSucesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPdsnHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaIdChangeHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusIS2OOSes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusOOS2ISes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterRole"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalControllers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalMembers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberLoad"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifSeverityLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddress"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedAddressType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAffectedCtrlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev4 = cCdmaSystemPdsnGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroupRev4.setDescription('A collection of objects needed for PDSN R1.2 network management.')
cCdmaPdsnPcfSoRpRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 9)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegPcfUnknwnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegAdmnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegNoRsrcFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegMNAuthFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegIdMismatFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegBadReqFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegUnkPdsnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegNoRevTunFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegTBitNSetFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpRegBadCVSEFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdRcvdAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdOtherReaReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdAdmnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdMNAuthFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdIdMismatFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpUpdBadReqFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnPcfSoRpRegGroup = cCdmaPdsnPcfSoRpRegGroup.setStatus('current')
if mibBuilder.loadTexts: cCdmaPdsnPcfSoRpRegGroup.setDescription('A collection of RP registration statistics MIB objects needed for R2.0 PDSN management.')
cCdmaPdsnPcfSoPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 10)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppCurrentConns"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoPppConnAborts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnPcfSoPppGroup = cCdmaPdsnPcfSoPppGroup.setStatus('current')
if mibBuilder.loadTexts: cCdmaPdsnPcfSoPppGroup.setDescription('A collection PPP negotiation statistics MIB objects needs for R2.0 PDSN management.')
cCdmaNotifPdsnGroupRev3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 11)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionRegReqFailedNotif"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPdsnStatusChange"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowReached2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionHighReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessionLowReached"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatusChange2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatusChange2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaNotifPdsnGroupRev3 = cCdmaNotifPdsnGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cCdmaNotifPdsnGroupRev3.setDescription('The notifications related to PDSN R1.2 network management.')
cCdmaSystemPdsnGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 12)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowed"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSimpleIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaProxyMobileIpFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionFailTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServingPdsnHostname"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnAuthenTimer"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionPdsnMaxFailHistory"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionMaxNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfMaxAllowedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqFailedNotifEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemVersion"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSystemStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSrEnabled"), ("CISCO-CDMA-PDSN-MIB", "cCdmaActiveSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaDormantSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSessionMaxTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfErrorTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionMsidType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11HaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionA11FaIp"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionConnId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionKey"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailTime"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistFailType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistServiceOption"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistPanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistCanId"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailHistBsid"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFailSessionEsn2"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegInsuffResFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegMNAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegIdMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegUnknownPdsnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegNoRevTunnelFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegTBitNotSetFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegBadCVSEFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdRpLifeExpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPPPtermReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdAdminProhibFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCurrentConnections"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionInitiateReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterLcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterAuthNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEnterIpcpNums"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresMaxRetrans"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpFailuresUnknown"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegTotalReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByPdsnReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegByMobileReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegLcpIpcpReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAddrMismatchReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegOtherReasonReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegConnectionsAborted"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthEapFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidAttempts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMsidFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthAAATimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTotalReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPdsnReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMobileReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAddrFilterReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAdminReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIdleTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppL2tpTunnelReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSessTimeoutReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvIntReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppSrvUnavailReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppOtherReasonReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppMissEchoReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressMsftCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressAscendCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressStackCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressDeflateCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressOtherCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoMrruCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpxCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoIpCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoVjCompCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNegoBapCons"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConFormedBundles"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedSipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedMipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipKiloOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReceivedPmipPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobilIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowSimpleIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowMobileIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowProxyIpFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowVpdnFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaFlowUnknownTypeFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceTotalOptions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionSucesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceOptionFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInterPdsnHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaIdChangeHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffAdmProhibFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffMNAuthenFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffIdMismatchFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffBadReqFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpUpdHandoffDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegHandoffAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegHandoffDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusIS2OOSes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaStatusOOS2ISes"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicSIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicPMIPs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressStaticVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaAddressDynamicVPDNs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessionLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterType"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterRole"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalControllers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterCtrlStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessHighThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterSessLowThreshold"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterTotalMembers"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberStatus"), ("CISCO-CDMA-PDSN-MIB", "cCdmaClusterMemberLoad"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNotifSeverityLevel"), ("CISCO-CDMA-PDSN-MIB", "cCdmaServiceAffectedLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupRev5 = cCdmaSystemPdsnGroupRev5.setStatus('current')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroupRev5.setDescription('A collection of objects needed for PDSN R1.2 network management.')
cCdmaSystemPdsnGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 13)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPPPoGRESessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaHDLCoGRESessionTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaEstablishedSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaReleasedSessions"), ("CISCO-CDMA-PDSN-MIB", "cCdmaMSIDFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaVPDNFlowTotal"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInitRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAirlinkStarts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpReRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpDeRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegReceivedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpHandoffRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdInitTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReTransmittedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdAlwaysON"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdRNPDIT"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReasonParamNotUpdated"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdReasonUnSpecFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdMNAuthenFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdIdentMismatchFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpSessUpdBadReqFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpOptionIssueFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpOptionIssueFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMaxRetransFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppNoRemoteIpAddressReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLowerLayerReleaseFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpPhaseReceivedTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpPhaseSentTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPhaseReceivedTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPhaseSentTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpPhaseReceivedTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpPhaseSentTermreqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPreLCPPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppPreLCPPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLCPPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLCPPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIPCPPdsnA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIPCPPcfA10Releases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLcpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppIpcpSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthSuccesses"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppConnectionOtherFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRenegAnidChanges"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthChapTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthPapTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthMschapTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppAuthSkips"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppDeregisterByPcfReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppLifetimeExpiryReleases"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppCompressNegoFailures"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppTransmittedEchoReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppRetransmittedEchoReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppReceivedEchoReplies"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppEchoRequestTimeouts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppUnknownProtocolPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPppBadLengthPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSDBPkts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaTransmittedSDBOctets"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNoGREKeyPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaNoSessionPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInvGREProtoPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaInvCheckSumPktDiscards"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInterPCFActiveHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpInterPCFDormantHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvPakLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvProtocolErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvFlagsErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMHAEKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMismatchSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvConnectionIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMNIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMNIDTypeErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvMSIDLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMissingSSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMissingMHAEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvOrderErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvAppTypeInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDupAppTypeInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvAppSubTypeInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvVendorIDInVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDupCVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctUnknwnAttrErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctInvLenAttrErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctDupAttrErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctRecRetransErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqAcctInvSeqNumErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDuplicateGREKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqSameGREKeySetupRcvdErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqGREKeyChngNoSetupErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInitNoSetupErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStartBeforeSetupErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStartOnCloseErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStartOnActiveErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqStopOnDormantErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInitRcvdStopErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInitRcvdSDBErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqInvAirlinkRecErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqDeRegNoSessionErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqReRegInDisconnectErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegReqMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRegReqMaxSessionReachedErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvPakLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvProtocolErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvRUAEKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvConnectionIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvMNIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvMNIDTypeErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvMSIDLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckMissingSSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckMissingRUAEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvOrderErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckInvVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckNoSessionErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdAckMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvPakLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvProtocolErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvRUAEKeyErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvSPIErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvConnectionIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvMNIDErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvMNIDTypeErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvMSIDLenErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckMissingSSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckMissingRUAEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvOrderErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckInvVSEErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckNoSessionErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdAckMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegRplyInternalErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegRplyMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRpRplyPCFNoSecOrParseErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdInternalErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaRegUpdMemFailErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdInternalErrs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSessUpdMemFailErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaSystemPdsnGroupSup1 = cCdmaSystemPdsnGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cCdmaSystemPdsnGroupSup1.setDescription('A collection of objects added for PDSN R3.0 that supplements cCdmaSystemPdsnGroupRev5 objects.')
cCdmaPdsnPcfSoRpRegGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 157, 3, 2, 14)).setObjects(("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpInitRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegRcvdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpHandoffRegDiscardedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegAirlinkStarts"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpReRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpDeRegAirlinkStops"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdPcfHandoffs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffReceivedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffAcceptedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffAdmProhibFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffMNAuthenFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffIdMismatchFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaSoRpUpdHandoffBadReqFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdAcptdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdDeniedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdNotAckedReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdInitTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdReTxdReqs"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdRcvdAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdDiscardedAcks"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdAlwaysOn"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdRNPDIT"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdParamNotUpdated"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdReaUnSpecFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdMNAuthFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdIdMismatFails"), ("CISCO-CDMA-PDSN-MIB", "cCdmaPcfSoRpSessUpdBadReqFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaPdsnPcfSoRpRegGroupSup1 = cCdmaPdsnPcfSoRpRegGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cCdmaPdsnPcfSoRpRegGroupSup1.setDescription('A collection of RP registration statistics MIB objects added in R3.0 to supplement cCdmaPdsnPcfSoRpRegGroup objects.')
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-MIB", cCdmaRpUpdHandoffDeniedReqs=cCdmaRpUpdHandoffDeniedReqs, cCdmaTransmittedMipKiloOctets=cCdmaTransmittedMipKiloOctets, cCdmaRPUpdBadRequestFailures=cCdmaRPUpdBadRequestFailures, cCdmaPppUnknownProtocolPktDiscards=cCdmaPppUnknownProtocolPktDiscards, cCdmaSoRpUpdHandoffAcceptedReqs=cCdmaSoRpUpdHandoffAcceptedReqs, cCdmaSessionPdsnMaxFailHistory=cCdmaSessionPdsnMaxFailHistory, cCdmaPcfSoRpRegBadCVSEFails=cCdmaPcfSoRpRegBadCVSEFails, CCdmaMsidType=CCdmaMsidType, cCdmaRpRegReceivedReqs=cCdmaRpRegReceivedReqs, cCdmaRegReqAcctRecRetransErrs=cCdmaRegReqAcctRecRetransErrs, cCdmaPppDeregisterByPcfReleases=cCdmaPppDeregisterByPcfReleases, cCdmaHandoffStats=cCdmaHandoffStats, cCdmaRegReqFailedNotifEnabled=cCdmaRegReqFailedNotifEnabled, cCdmaPppIpcpFailuresMaxRetrans=cCdmaPppIpcpFailuresMaxRetrans, CCdmaSystemStatus=CCdmaSystemStatus, cCdmaHDLCoGRESessionTotal=cCdmaHDLCoGRESessionTotal, cCdmaRPRegReplyErrors=cCdmaRPRegReplyErrors, cCdmaPcfSoRpSessUpdStatsTable=cCdmaPcfSoRpSessUpdStatsTable, cCdmaClusterMemberAddressType=cCdmaClusterMemberAddressType, cCdmaPcfSoRpSessUpdMNAuthFails=cCdmaPcfSoRpSessUpdMNAuthFails, cCdmaRegReqInvPakLenErrs=cCdmaRegReqInvPakLenErrs, cCdmaSessUpdAckInvOrderErrs=cCdmaSessUpdAckInvOrderErrs, cCdmaRpReRegReceivedReqs=cCdmaRpReRegReceivedReqs, cCdmaSessUpdAckNoSessionErrs=cCdmaSessUpdAckNoSessionErrs, cCdmaPcfSoRpUpdPPPtermReqs=cCdmaPcfSoRpUpdPPPtermReqs, cCdmaPcfSoRpSessUpdInitTxdReqs=cCdmaPcfSoRpSessUpdInitTxdReqs, cCdmaPcfSoPppSetupIpAddr=cCdmaPcfSoPppSetupIpAddr, cCdmaPcfSoRpUpdDeniedReqs=cCdmaPcfSoRpUpdDeniedReqs, cCdmaRegUpdAckInvProtocolErrs=cCdmaRegUpdAckInvProtocolErrs, cCdmaStatusIS2OOSes=cCdmaStatusIS2OOSes, cCdmaPppAuthMschapTimeouts=cCdmaPppAuthMschapTimeouts, cCdmaRPRegLifeTimeZeroRequests=cCdmaRPRegLifeTimeZeroRequests, cCdmaSessionEsn=cCdmaSessionEsn, PYSNMP_MODULE_ID=ciscoCdmaPdsnMIB, cCdmaPcfSoRpUpdStatsEntry=cCdmaPcfSoRpUpdStatsEntry, cCdmaClusterRole=cCdmaClusterRole, cCdmaSessionInfo=cCdmaSessionInfo, cCdmaSessionRcvdPkts=cCdmaSessionRcvdPkts, cCdmaFailSessionEsn2=cCdmaFailSessionEsn2, cCdmaRpSessUpdDeniedReqs=cCdmaRpSessUpdDeniedReqs, cCdmaSoRpUpdHandoffAdmProhibFails=cCdmaSoRpUpdHandoffAdmProhibFails, cCdmaPppAuthMschapAttempts=cCdmaPppAuthMschapAttempts, cCdmaRpRegAdminProhibFailures=cCdmaRpRegAdminProhibFailures, cCdmaRPUpdReasonUnSpecFailures=cCdmaRPUpdReasonUnSpecFailures, cCdmaPdsnMIBNotifPrefix=cCdmaPdsnMIBNotifPrefix, cCdmaRegReqInvConnectionIDErrs=cCdmaRegReqInvConnectionIDErrs, cCdmaPppAuthMsidAttempts=cCdmaPppAuthMsidAttempts, cCdmaPppRenegConnectionsAborted=cCdmaPppRenegConnectionsAborted, cCdmaPppRenegFailures=cCdmaPppRenegFailures, cCdmaRpSessUpdIdentMismatchFailures=cCdmaRpSessUpdIdentMismatchFailures, cCdmaAddressSchemeStats=cCdmaAddressSchemeStats, cCdmaPcfSoRpHandoffRegRcvdReqs=cCdmaPcfSoRpHandoffRegRcvdReqs, cCdmaFlowVpdnSuccesses=cCdmaFlowVpdnSuccesses, cCdmaRpInterPCFDormantHandoffs=cCdmaRpInterPCFDormantHandoffs, cCdmaReceivedSipPkts=cCdmaReceivedSipPkts, cCdmaClusterSessionHighReached=cCdmaClusterSessionHighReached, cCdmaPdsnMIBCompliances=cCdmaPdsnMIBCompliances, cCdmaRegReqInitNoSetupErrs=cCdmaRegReqInitNoSetupErrs, cCdmaAddressDynamicMIPs=cCdmaAddressDynamicMIPs, cCdmaClusterType=cCdmaClusterType, cCdmaSessionMsidType=cCdmaSessionMsidType, cCdmaSystemPdsnGroupRev1=cCdmaSystemPdsnGroupRev1, cCdmaRegReqInvAppTypeInVSEErrs=cCdmaRegReqInvAppTypeInVSEErrs, cCdmaServiceOptionFailures=cCdmaServiceOptionFailures, cCdmaServiceOptionEntry=cCdmaServiceOptionEntry, cCdmaSessionMaxNotifEnabled=cCdmaSessionMaxNotifEnabled, cCdmaRegReqDupCVSEErrs=cCdmaRegReqDupCVSEErrs, cCdmaPppAuthSuccesses=cCdmaPppAuthSuccesses, cCdmaReceivedPmipPkts=cCdmaReceivedPmipPkts, cCdmaPdsnMIBComplianceRev6=cCdmaPdsnMIBComplianceRev6, cCdmaPppConFormedBundles=cCdmaPppConFormedBundles, cCdmaRegReqStopOnDormantErrs=cCdmaRegReqStopOnDormantErrs, cCdmaRpSessUpdDiscardedAcks=cCdmaRpSessUpdDiscardedAcks, cCdmaPcfSoRpUpdReaUnSpecFails=cCdmaPcfSoRpUpdReaUnSpecFails, cCdmaFailSessionMsid=cCdmaFailSessionMsid, cCdmaPcfSoPppSetupStatsTable=cCdmaPcfSoPppSetupStatsTable, cCdmaRpRplyPCFNoSecOrParseErrs=cCdmaRpRplyPCFNoSecOrParseErrs, cCdmaPcfSoRpUpdAdmnFails=cCdmaPcfSoRpUpdAdmnFails, cCdmaPppAuthMschapFailures=cCdmaPppAuthMschapFailures, cCdmaSessionDiscardedOutPkts=cCdmaSessionDiscardedOutPkts, cCdmaPcfTable=cCdmaPcfTable, cCdmaPcfSoRpReRegDeniedReqs=cCdmaPcfSoRpReRegDeniedReqs, cCdmaPcfSoRpUpdInitTxdReqs=cCdmaPcfSoRpUpdInitTxdReqs, cCdmaRpInitRegReceivedReqs=cCdmaRpInitRegReceivedReqs, cCdmaSessionDiscardedInPkts=cCdmaSessionDiscardedInPkts, cCdmaRpSessUpdReTransmittedReqs=cCdmaRpSessUpdReTransmittedReqs, cCdmaPppIpcpPhaseReceivedTermreqs=cCdmaPppIpcpPhaseReceivedTermreqs, cCdmaPPPoGRESessionTotal=cCdmaPPPoGRESessionTotal, cCdmaSessionMsid=cCdmaSessionMsid, cCdmaPppAuthChapSuccesses=cCdmaPppAuthChapSuccesses, cCdmaClusterMemberStatusChange2=cCdmaClusterMemberStatusChange2, cCdmaSessionKey=cCdmaSessionKey, cCdmaSessionHighThreshold=cCdmaSessionHighThreshold, cCdmaPppPreLCPPdsnA10Releases=cCdmaPppPreLCPPdsnA10Releases, cCdmaPcfSoPppServiceOption=cCdmaPcfSoPppServiceOption, cCdmaSessUpdAckInvRUAEKeyErrs=cCdmaSessUpdAckInvRUAEKeyErrs, cCdmaClusterSessLowThreshold=cCdmaClusterSessLowThreshold, cCdmaPppRenegAnidChanges=cCdmaPppRenegAnidChanges, cCdmaClusterCtrlStatusChange=cCdmaClusterCtrlStatusChange, cCdmaFlowMobilIpSuccesses=cCdmaFlowMobilIpSuccesses, cCdmaPcfSoRpInitRegDeniedReqs=cCdmaPcfSoRpInitRegDeniedReqs, cCdmaPdsnCluster=cCdmaPdsnCluster, cCdmaClusterTotalSessions=cCdmaClusterTotalSessions, cCdmaRpReRegAirlinkStarts=cCdmaRpReRegAirlinkStarts, cCdmaPppMiscStats=cCdmaPppMiscStats, cCdmaClusterCtrlAddress=cCdmaClusterCtrlAddress, cCdmaSessionRegTimeToExpire=cCdmaSessionRegTimeToExpire, cCdmaRpRegTBitNotSetFailures=cCdmaRpRegTBitNotSetFailures, cCdmaPppRenegOtherReasonReqs=cCdmaPppRenegOtherReasonReqs, cCdmaPcfSoRpReRegAcptdReqs=cCdmaPcfSoRpReRegAcptdReqs, cCdmaRegReqMissingSSEErrs=cCdmaRegReqMissingSSEErrs, cCdmaRPRegAdminProhibFailures=cCdmaRPRegAdminProhibFailures, cCdmaFailSessionIndex=cCdmaFailSessionIndex, cCdmaRpUpdAdminProhibFailures=cCdmaRpUpdAdminProhibFailures, cCdmaSessionSentOctets=cCdmaSessionSentOctets, cCdmaPcfMaxAllowedNotifEnabled=cCdmaPcfMaxAllowedNotifEnabled, cCdmaRpUpdHandoffDiscardedAcks=cCdmaRpUpdHandoffDiscardedAcks, cCdmaPppNegoMrruCons=cCdmaPppNegoMrruCons, cCdmaPcfSoRpInitRegAcptdReqs=cCdmaPcfSoRpInitRegAcptdReqs, cCdmaRegReqReRegInDisconnectErrs=cCdmaRegReqReRegInDisconnectErrs, cCdmaNotifPdsnGroupRev1=cCdmaNotifPdsnGroupRev1, cCdmaSessUpdAckMemFailErrs=cCdmaSessUpdAckMemFailErrs, cCdmaSessionTunnelProt=cCdmaSessionTunnelProt, cCdmaAffectedCtrlStatus=cCdmaAffectedCtrlStatus, cCdmaRpUpdReasonUnSpecFailures=cCdmaRpUpdReasonUnSpecFailures, cCdmaSessionRegReqFailedNotif=cCdmaSessionRegReqFailedNotif, cCdmaSessionFlowEntry=cCdmaSessionFlowEntry, cCdmaSessionConnId=cCdmaSessionConnId, cCdmaPcfSoRpRegServiceOption=cCdmaPcfSoRpRegServiceOption, cCdmaPppAuthMaxRetransFailures=cCdmaPppAuthMaxRetransFailures, cCdmaPcfSoRpReRegRcvdReqs=cCdmaPcfSoRpReRegRcvdReqs, cCdmaServiceOptionSucesses=cCdmaServiceOptionSucesses, cCdmaAddressDynamicSIPs=cCdmaAddressDynamicSIPs, cCdmaPcfSoRpRegIpAddrType=cCdmaPcfSoRpRegIpAddrType, cCdmaTransmittedSipKiloOctets=cCdmaTransmittedSipKiloOctets, cCdmaPppEnterIpcpNums=cCdmaPppEnterIpcpNums, cCdmaFailHistInfoEntry=cCdmaFailHistInfoEntry, cCdmaPcfSoRpSessUpdRcvdAcks=cCdmaPcfSoRpSessUpdRcvdAcks, cCdmaRpRegDeniedReqs=cCdmaRpRegDeniedReqs, cCdmaRpRegMNAuthFailures=cCdmaRpRegMNAuthFailures, cCdmaPppLCPPcfA10Releases=cCdmaPppLCPPcfA10Releases, cCdmaPcfSoPppSetupStats=cCdmaPcfSoPppSetupStats, cCdmaRegUpdAckMemFailErrs=cCdmaRegUpdAckMemFailErrs, cCdmaRpSessUpdAcceptedReqs=cCdmaRpSessUpdAcceptedReqs, cCdmaRegReqDupAppTypeInVSEErrs=cCdmaRegReqDupAppTypeInVSEErrs, cCdmaRpReRegDiscardedReqs=cCdmaRpReRegDiscardedReqs, cCdmaRpUpdPcfHandoffs=cCdmaRpUpdPcfHandoffs, cCdmaRpSessUpdAlwaysON=cCdmaRpSessUpdAlwaysON, cCdmaPppAuthPapAttempts=cCdmaPppAuthPapAttempts, cCdmaSessUpdMemFailErrs=cCdmaSessUpdMemFailErrs, cCdmaPcfSoRpUpdStats=cCdmaPcfSoRpUpdStats, cCdmaPppIpcpSuccesses=cCdmaPppIpcpSuccesses, cCdmaRpSessUpdStats=cCdmaRpSessUpdStats, cCdmaPppAuthMsidFailures=cCdmaPppAuthMsidFailures, cCdmaRpSessUpdReceivedAcks=cCdmaRpSessUpdReceivedAcks, cCdmaPppNegoIpxCons=cCdmaPppNegoIpxCons, cCdmaRegUpdAckMissingRUAEErrs=cCdmaRegUpdAckMissingRUAEErrs, cCdmaRpInitRegAcceptedReqs=cCdmaRpInitRegAcceptedReqs, cCdmaRegReqAcctInvLenAttrErrs=cCdmaRegReqAcctInvLenAttrErrs, cCdmaRegReqInitRcvdStopErrs=cCdmaRegReqInitRcvdStopErrs, CCdmaServiceOption=CCdmaServiceOption, cCdmaPppCompressMsftCons=cCdmaPppCompressMsftCons, cCdmaFailHistInfoTable=cCdmaFailHistInfoTable, cCdmaPcfSoRpUpdServiceOption=cCdmaPcfSoRpUpdServiceOption, cCdmaSessionA11HaIp=cCdmaSessionA11HaIp, cCdmaSessionLowReached2=cCdmaSessionLowReached2, cCdmaNotifSeverityLevel=cCdmaNotifSeverityLevel, cCdmaSessionPppCompressEnabled=cCdmaSessionPppCompressEnabled, cCdmaStatusChangeStats=cCdmaStatusChangeStats, cCdmaPppTotalReleases=cCdmaPppTotalReleases, cCdmaRpInitRegDiscardedReqs=cCdmaRpInitRegDiscardedReqs, cCdmaPppPdsnReleases=cCdmaPppPdsnReleases, cCdmaSoRpUpdHandoffReTxdReqs=cCdmaSoRpUpdHandoffReTxdReqs, cCdmaNotifPdsnGroup=cCdmaNotifPdsnGroup, cCdmaPppCompressDeflateCons=cCdmaPppCompressDeflateCons, cCdmaNotifPdsnGroupRev3=cCdmaNotifPdsnGroupRev3, cCdmaSystemPdsnGroupRev4=cCdmaSystemPdsnGroupRev4, cCdmaProxyMobileIpFlowTotal=cCdmaProxyMobileIpFlowTotal, cCdmaClusterControllerInfo=cCdmaClusterControllerInfo, cCdmaRpDeRegDeniedReqs=cCdmaRpDeRegDeniedReqs, cCdmaFailSessionKey=cCdmaFailSessionKey, cCdmaPcfSoRpRegNoRevTunFails=cCdmaPcfSoRpRegNoRevTunFails, cCdmaPppLcpOptionIssueFailures=cCdmaPppLcpOptionIssueFailures, cCdmaClusterSessHighThreshold=cCdmaClusterSessHighThreshold, cCdmaTransmittedSipPkts=cCdmaTransmittedSipPkts, cCdmaTransmittedPmipKiloOctets=cCdmaTransmittedPmipKiloOctets, cCdmaPppAuthPcfA10Releases=cCdmaPppAuthPcfA10Releases, cCdmaPerformanceStats=cCdmaPerformanceStats, cCdmaRpUpdHandoffAdmProhibFails=cCdmaRpUpdHandoffAdmProhibFails, cCdmaSystemPdsnGroup=cCdmaSystemPdsnGroup, cCdmaRegUpdAckMissingSSEErrs=cCdmaRegUpdAckMissingSSEErrs, cCdmaPppAuthPapSuccesses=cCdmaPppAuthPapSuccesses, cCdmaPppAdminReleases=cCdmaPppAdminReleases, cCdmaPcfSoPppConnInitiateReqs=cCdmaPcfSoPppConnInitiateReqs, cCdmaPcfSoRpDeRegDeniedReqs=cCdmaPcfSoRpDeRegDeniedReqs, cCdmaPppReNegoStats=cCdmaPppReNegoStats, cCdmaRpUpdDiscardedAcks=cCdmaRpUpdDiscardedAcks, cCdmaSystemPdsnGroupRev3=cCdmaSystemPdsnGroupRev3, cCdmaRegUpdAckInvRUAEKeyErrs=cCdmaRegUpdAckInvRUAEKeyErrs, cCdmaPppTransmittedEchoReqs=cCdmaPppTransmittedEchoReqs, cCdmaPcfSoRpRegDiscardedReqs=cCdmaPcfSoRpRegDiscardedReqs, cCdmaRegUpdAckInvConnectionIDErrs=cCdmaRegUpdAckInvConnectionIDErrs, cCdmaRpUpdRpLifeExpReqs=cCdmaRpUpdRpLifeExpReqs, cCdmaRegUpdInternalErrs=cCdmaRegUpdInternalErrs, cCdmaSoRpUpdHandoffNotAckedReqs=cCdmaSoRpUpdHandoffNotAckedReqs, cCdmaSimpleIpFlowTotal=cCdmaSimpleIpFlowTotal, cCdmaPcfSoRpSessUpdDiscardedAcks=cCdmaPcfSoRpSessUpdDiscardedAcks, cCdmaRpUpdMNAuthenFailures=cCdmaRpUpdMNAuthenFailures, cCdmaPcfIpAddress=cCdmaPcfIpAddress, cCdmaSessionFailTotal=cCdmaSessionFailTotal, cCdmaPppReleaseStats=cCdmaPppReleaseStats, cCdmaPcfSoPppCurrentConns=cCdmaPcfSoPppCurrentConns, cCdmaClusterCtrlEntry=cCdmaClusterCtrlEntry, cCdmaRegReqMismatchSPIErrs=cCdmaRegReqMismatchSPIErrs, cCdmaFlowSimpleIpFailures=cCdmaFlowSimpleIpFailures, cCdmaIdChangeHandoffs=cCdmaIdChangeHandoffs, cCdmaPcfSoRpRegStatsEntry=cCdmaPcfSoRpRegStatsEntry, cCdmaPcfSoPppConnSuccesses=cCdmaPcfSoPppConnSuccesses, cCdmaPcfSoRpRegStatsTable=cCdmaPcfSoRpRegStatsTable, cCdmaRPRegInsuffResFailures=cCdmaRPRegInsuffResFailures, cCdmaReceivedMipPkts=cCdmaReceivedMipPkts, cCdmaSessUpdAckInvPakLenErrs=cCdmaSessUpdAckInvPakLenErrs, cCdmaPcfSoPppConnAborts=cCdmaPcfSoPppConnAborts, cCdmaRpErrors=cCdmaRpErrors, cCdmaSessUpdAckInvConnectionIDErrs=cCdmaSessUpdAckInvConnectionIDErrs, cCdmaRegReqSameGREKeySetupRcvdErrs=cCdmaRegReqSameGREKeySetupRcvdErrs, cCdmaPcfSessionTotal=cCdmaPcfSessionTotal, cCdmaPppRenegByPdsnReqs=cCdmaPppRenegByPdsnReqs, cCdmaPcfSoPppSetupIpAddrType=cCdmaPcfSoPppSetupIpAddrType, cCdmaRegReqStartOnCloseErrs=cCdmaRegReqStartOnCloseErrs, cCdmaPppL2tpTunnelReleases=cCdmaPppL2tpTunnelReleases, cCdmaRPRegNoRevTunnelFailures=cCdmaRPRegNoRevTunnelFailures, cCdmaServiceOptionStats=cCdmaServiceOptionStats, cCdmaRpUpdTransmittedReqs=cCdmaRpUpdTransmittedReqs, cCdmaPcfSoRpRegAdmnFails=cCdmaPcfSoRpRegAdmnFails, cCdmaConfig=cCdmaConfig, cCdmaSessionRcvdOctets=cCdmaSessionRcvdOctets, cCdmaPcfSoRpSessUpdReTxdReqs=cCdmaPcfSoRpSessUpdReTxdReqs, cCdmaClusterCtrlAddressType=cCdmaClusterCtrlAddressType, cCdmaTransmittedMipPkts=cCdmaTransmittedMipPkts, cCdmaSoRpUpdHandoffBadReqFails=cCdmaSoRpUpdHandoffBadReqFails, cCdmaRegUpdAckInvOrderErrs=cCdmaRegUpdAckInvOrderErrs, cCdmaPcfSoRpUpdRpLifeExpReqs=cCdmaPcfSoRpUpdRpLifeExpReqs, cCdmaPppIpcpOptionIssueFailures=cCdmaPppIpcpOptionIssueFailures, cCdmaClusterCommon=cCdmaClusterCommon, cCdmaClusterTotalMembers=cCdmaClusterTotalMembers, cCdmaFlowVpdnFailures=cCdmaFlowVpdnFailures, cCdmaRPRegistrationStats=cCdmaRPRegistrationStats, cCdmaSessionUserFlowIpAddress=cCdmaSessionUserFlowIpAddress, cCdmaRpUpdIdentMismatchFailures=cCdmaRpUpdIdentMismatchFailures, cCdmaPppRenegAddrMismatchReqs=cCdmaPppRenegAddrMismatchReqs, cCdmaRegUpdAckNoSessionErrs=cCdmaRegUpdAckNoSessionErrs, cCdmaRpDeRegAcceptedReqs=cCdmaRpDeRegAcceptedReqs, cCdmaPcfMaxAllowedNotif=cCdmaPcfMaxAllowedNotif)
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-MIB", cCdmaRegReqAcctDupAttrErrs=cCdmaRegReqAcctDupAttrErrs, cCdmaRpRegAcceptedReqs=cCdmaRpRegAcceptedReqs, cCdmaPppNegoBapCons=cCdmaPppNegoBapCons, cCdmaPppAuthPapFailures=cCdmaPppAuthPapFailures, cCdmaSessionLowReached=cCdmaSessionLowReached, cCdmaRegReqInvSPIErrs=cCdmaRegReqInvSPIErrs, cCdmaRpUpdHandoffIdMismatchFails=cCdmaRpUpdHandoffIdMismatchFails, cCdmaPppCurrentConnections=cCdmaPppCurrentConnections, cCdmaRpRegBadCVSEFailures=cCdmaRpRegBadCVSEFailures, cCdmaClusterSessionLowReached=cCdmaClusterSessionLowReached, cCdmaSessUpdAckInvMSIDLenErrs=cCdmaSessUpdAckInvMSIDLenErrs, cCdmaEstablishedSessions=cCdmaEstablishedSessions, cCdmaRpUpdReceivedAcks=cCdmaRpUpdReceivedAcks, cCdmaRpDeRegHandoffDeniedReqs=cCdmaRpDeRegHandoffDeniedReqs, cCdmaPcfSoRpUpdRcvdAcks=cCdmaPcfSoRpUpdRcvdAcks, cCdmaPppConnectionFailures=cCdmaPppConnectionFailures, cCdmaFailHistPanId=cCdmaFailHistPanId, cCdmaSessionGREFromIPPkts=cCdmaSessionGREFromIPPkts, cCdmaTransmittedPmipPkts=cCdmaTransmittedPmipPkts, cCdmaPdsnMIBNotifs=cCdmaPdsnMIBNotifs, cCdmaPppLcpPhaseSentTermreqs=cCdmaPppLcpPhaseSentTermreqs, cCdmaAddressStaticVPDNs=cCdmaAddressStaticVPDNs, cCdmaPcfSoRpUpdDiscardedAcks=cCdmaPcfSoRpUpdDiscardedAcks, cCdmaPppLCPPdsnA10Releases=cCdmaPppLCPPdsnA10Releases, cCdmaFlowSimpleIpSuccesses=cCdmaFlowSimpleIpSuccesses, cCdmaPcfSoRpSessUpdIpAddr=cCdmaPcfSoRpSessUpdIpAddr, cCdmaRpRegInsuffResFailures=cCdmaRpRegInsuffResFailures, cCdmaPcfSoRpDeRegAirlinkStops=cCdmaPcfSoRpDeRegAirlinkStops, cCdmaPcfSoRpUpdBadReqFails=cCdmaPcfSoRpUpdBadReqFails, cCdmaPcfSoRpSessUpdTxdReqs=cCdmaPcfSoRpSessUpdTxdReqs, cCdmaRegUpdAckInvMSIDLenErrs=cCdmaRegUpdAckInvMSIDLenErrs, cCdmaClusterMemberAddress=cCdmaClusterMemberAddress, cCdmaPcfSoRpRegDeniedReqs=cCdmaPcfSoRpRegDeniedReqs, cCdmaMSIDFlowTotal=cCdmaMSIDFlowTotal, cCdmaRPRegValidRequests=cCdmaRPRegValidRequests, cCdmaReceivedMipKiloOctets=cCdmaReceivedMipKiloOctets, cCdmaInvGREProtoPktDiscards=cCdmaInvGREProtoPktDiscards, cCdmaPcfSoRpUpdReTxdReqs=cCdmaPcfSoRpUpdReTxdReqs, cCdmaPdsnMIBComplianceRev3=cCdmaPdsnMIBComplianceRev3, cCdmaPcfSoRpSessUpdIdMismatFails=cCdmaPcfSoRpSessUpdIdMismatFails, cCdmaPdsnMIBConformance=cCdmaPdsnMIBConformance, cCdmaRpRegBadReqFailures=cCdmaRpRegBadReqFailures, cCdmaServiceAffectedLevel=cCdmaServiceAffectedLevel, cCdmaTransmittedSDBPkts=cCdmaTransmittedSDBPkts, cCdmaSessUpdAckInvVSEErrs=cCdmaSessUpdAckInvVSEErrs, cCdmaSoRpUpdHandoffInitTxdReqs=cCdmaSoRpUpdHandoffInitTxdReqs, cCdmaSystemPdsnGroupRev2=cCdmaSystemPdsnGroupRev2, cCdmaAddressDynamicVPDNs=cCdmaAddressDynamicVPDNs, cCdmaSessionFlowTable=cCdmaSessionFlowTable, cCdmaClusterCtrlStatus=cCdmaClusterCtrlStatus, cCdmaPdsnStatusChange=cCdmaPdsnStatusChange, cCdmaRegReqInvVSEErrs=cCdmaRegReqInvVSEErrs, cCdmaSystemPdsnGroupRev5=cCdmaSystemPdsnGroupRev5, cCdmaRegReqMemFailErrs=cCdmaRegReqMemFailErrs, cCdmaFailSessionMsidType=cCdmaFailSessionMsidType, cCdmaRegReqInvVendorIDInVSEErrs=cCdmaRegReqInvVendorIDInVSEErrs, cCdmaRegReqAcctUnknwnAttrErrs=cCdmaRegReqAcctUnknwnAttrErrs, cCdmaPppCompressOtherCons=cCdmaPppCompressOtherCons, cCdmaRPRegReasonUnSpecFailures=cCdmaRPRegReasonUnSpecFailures, cCdmaRpUpdHandoffNotAckedReqs=cCdmaRpUpdHandoffNotAckedReqs, cCdmaRPRegReqErrors=cCdmaRPRegReqErrors, cCdmaRpInterPCFActiveHandoffs=cCdmaRpInterPCFActiveHandoffs, cCdmaPppLcpFailures=cCdmaPppLcpFailures, cCdmaFailSessionA11FaIp=cCdmaFailSessionA11FaIp, cCdmaPcfSoRpRegUnkPdsnFails=cCdmaPcfSoRpRegUnkPdsnFails, cCdmaRPRegAcceptedReplies=cCdmaRPRegAcceptedReplies, cCdmaSoRpUpdHandoffReaUnSpecFails=cCdmaSoRpUpdHandoffReaUnSpecFails, cCdmaPcfSoRpRegBadReqFails=cCdmaPcfSoRpRegBadReqFails, cCdmaPdsnPcfSoRpRegGroupSup1=cCdmaPdsnPcfSoRpRegGroupSup1, ciscoCdmaPdsnMIBObjects=ciscoCdmaPdsnMIBObjects, cCdmaAddressStaticPMIPs=cCdmaAddressStaticPMIPs, cCdmaClusterMemberLoad=cCdmaClusterMemberLoad, cCdmaNoGREKeyPktDiscards=cCdmaNoGREKeyPktDiscards, cCdmaServiceTotalOptions=cCdmaServiceTotalOptions, cCdmaRpSessUpdReasonUnSpecFailures=cCdmaRpSessUpdReasonUnSpecFailures, cCdmaRegReqDeRegNoSessionErrs=cCdmaRegReqDeRegNoSessionErrs, cCdmaRegReqInitRcvdSDBErrs=cCdmaRegReqInitRcvdSDBErrs, cCdmaClusterMemberStatus=cCdmaClusterMemberStatus, cCdmaRpReRegAcceptedReqs=cCdmaRpReRegAcceptedReqs, cCdmaRpDeRegDiscardedReqs=cCdmaRpDeRegDiscardedReqs, cCdmaRpSessUpdNotAckedReqs=cCdmaRpSessUpdNotAckedReqs, cCdmaPppAuthChapAttempts=cCdmaPppAuthChapAttempts, cCdmaRPRegBadCVSEFailures=cCdmaRPRegBadCVSEFailures, cCdmaPppRenegLcpIpcpReqs=cCdmaPppRenegLcpIpcpReqs, cCdmaRpRegStats=cCdmaRpRegStats, cCdmaPcfSoRpInitRegDiscardedReqs=cCdmaPcfSoRpInitRegDiscardedReqs, cCdmaPcfSoRpSessUpdParamNotUpdated=cCdmaPcfSoRpSessUpdParamNotUpdated, cCdmaSessionMaxAllowedNotif=cCdmaSessionMaxAllowedNotif, cCdmaServiceOptionIndex=cCdmaServiceOptionIndex, cCdmaPcfSoRpUpdIpAddr=cCdmaPcfSoRpUpdIpAddr, cCdmaPppConnectionOtherFailures=cCdmaPppConnectionOtherFailures, cCdmaPppSrvIntReleases=cCdmaPppSrvIntReleases, cCdmaPcfSoRpSessUpdServiceOption=cCdmaPcfSoRpSessUpdServiceOption, cCdmaRpRegReasonUnSpecFailures=cCdmaRpRegReasonUnSpecFailures, cCdmaFailHistServiceOption=cCdmaFailHistServiceOption, cCdmaSessionConnStartTime=cCdmaSessionConnStartTime, cCdmaRpUpdDeniedReqs=cCdmaRpUpdDeniedReqs, cCdmaRpUpdNotAckedReqs=cCdmaRpUpdNotAckedReqs, cCdmaRpSessUpdReasonParamNotUpdated=cCdmaRpSessUpdReasonParamNotUpdated, cCdmaPcfEntry=cCdmaPcfEntry, cCdmaPppEchoRequestTimeouts=cCdmaPppEchoRequestTimeouts, cCdmaPppEnterLcpNums=cCdmaPppEnterLcpNums, cCdmaSessionFlowTechnology=cCdmaSessionFlowTechnology, cCdmaPcfTotal=cCdmaPcfTotal, cCdmaFailHistCanId=cCdmaFailHistCanId, cCdmaPcfSoRpReRegDiscardedReqs=cCdmaPcfSoRpReRegDiscardedReqs, cCdmaPcfSoRpSessUpdStats=cCdmaPcfSoRpSessUpdStats, cCdmaPppCompressNegoFailures=cCdmaPppCompressNegoFailures, cCdmaRpRegReqMaxSessionReachedErrs=cCdmaRpRegReqMaxSessionReachedErrs, cCdmaInterPdsnHandoffs=cCdmaInterPdsnHandoffs, cCdmaRegReqGREKeyChngNoSetupErrs=cCdmaRegReqGREKeyChngNoSetupErrs, cCdmaSessUpdAckInvSPIErrs=cCdmaSessUpdAckInvSPIErrs, cCdmaPcfSoRpUpdMNAuthFails=cCdmaPcfSoRpUpdMNAuthFails, cCdmaDormantSessions=cCdmaDormantSessions, cCdmaRpRegUnknownPdsnFailures=cCdmaRpRegUnknownPdsnFailures, cCdmaRpUpdHandoffReaUnSpecFails=cCdmaRpUpdHandoffReaUnSpecFails, cCdmaRpSessUpdRNPDIT=cCdmaRpSessUpdRNPDIT, cCdmaSessionEntry=cCdmaSessionEntry, cCdmaPppLcpFailuresUnknown=cCdmaPppLcpFailuresUnknown, cCdmaPcfSoRpReRegAirlinkStops=cCdmaPcfSoRpReRegAirlinkStops, cCdmaRegReqInvMNIDTypeErrs=cCdmaRegReqInvMNIDTypeErrs, cCdmaSessionHighReached=cCdmaSessionHighReached, cCdmaFailHistFailType=cCdmaFailHistFailType, cCdmaPcfSoRpUpdStatsTable=cCdmaPcfSoRpUpdStatsTable, cCdmaInterPcfHandoffs=cCdmaInterPcfHandoffs, cCdmaFlowProxyIpFailures=cCdmaFlowProxyIpFailures, cCdmaRPUpdateStats=cCdmaRPUpdateStats, cCdmaPcfSoRpRegTBitNSetFails=cCdmaPcfSoRpRegTBitNSetFails, cCdmaPppMobileReleases=cCdmaPppMobileReleases, cCdmaClusterCtrlTable=cCdmaClusterCtrlTable, cCdmaPcfSoRpReRegAirlinkStarts=cCdmaPcfSoRpReRegAirlinkStarts, cCdmaPdsnPcfSoRpRegGroup=cCdmaPdsnPcfSoRpRegGroup, cCdmaRpUpdHandoffReTxdReqs=cCdmaRpUpdHandoffReTxdReqs, cCdmaPcfSoRpSessUpdAlwaysOn=cCdmaPcfSoRpSessUpdAlwaysOn, cCdmaSessUpdAckInvProtocolErrs=cCdmaSessUpdAckInvProtocolErrs, cCdmaFailHistBsid=cCdmaFailHistBsid, cCdmaPcfErrorTotal=cCdmaPcfErrorTotal, cCdmaSessionPdsnIp=cCdmaSessionPdsnIp, cCdmaSessionFormatErrorNotif=cCdmaSessionFormatErrorNotif, cCdmaRPRegUpdAckErrors=cCdmaRPRegUpdAckErrors, cCdmaPppAddrFilterReleases=cCdmaPppAddrFilterReleases, cCdmaPppReceivedEchoReplies=cCdmaPppReceivedEchoReplies, cCdmaPppConnectionsAborted=cCdmaPppConnectionsAborted, cCdmaPppAuthChapTimeouts=cCdmaPppAuthChapTimeouts, cCdmaPppAuthAAATimeouts=cCdmaPppAuthAAATimeouts, ciscoCdmaPdsnMIB=ciscoCdmaPdsnMIB, cCdmaRegReqStartOnActiveErrs=cCdmaRegReqStartOnActiveErrs, cCdmaPppAuthFailures=cCdmaPppAuthFailures, cCdmaSessUpdInternalErrs=cCdmaSessUpdInternalErrs, cCdmaPcfSoRpSessUpdAcptdReqs=cCdmaPcfSoRpSessUpdAcptdReqs, cCdmaRpSessUpdMNAuthenFailures=cCdmaRpSessUpdMNAuthenFailures, cCdmaNotifObjects=cCdmaNotifObjects, cCdmaRpHandoffRegAcceptedReqs=cCdmaRpHandoffRegAcceptedReqs, cCdmaPppLcpFailuresMaxRetrans=cCdmaPppLcpFailuresMaxRetrans, cCdmaPppStats=cCdmaPppStats, cCdmaSessionSentPkts=cCdmaSessionSentPkts, cCdmaClusterCtrlStatusChange2=cCdmaClusterCtrlStatusChange2, cCdmaTrafficStats=cCdmaTrafficStats, cCdmaPcfMaxAllowed=cCdmaPcfMaxAllowed, cCdmaRegReqInvProtocolErrs=cCdmaRegReqInvProtocolErrs, cCdmaPcfSoRpUpdNotAckedReqs=cCdmaPcfSoRpUpdNotAckedReqs, cCdmaRPDeRegAcceptedReplies=cCdmaRPDeRegAcceptedReplies, cCdmaSessionMoMtInd=cCdmaSessionMoMtInd, cCdmaNotifConfig=cCdmaNotifConfig, cCdmaRpUpdPPPtermReqs=cCdmaRpUpdPPPtermReqs, cCdmaPcfSoRpRegRcvdReqs=cCdmaPcfSoRpRegRcvdReqs, cCdmaPppLifetimeExpiryReleases=cCdmaPppLifetimeExpiryReleases, cCdmaRpReRegAirlinkStops=cCdmaRpReRegAirlinkStops, cCdmaRPRegMNAuthenFailures=cCdmaRPRegMNAuthenFailures, cCdmaNoSessionPktDiscards=cCdmaNoSessionPktDiscards, cCdmaRegReqInvFlagsErrs=cCdmaRegReqInvFlagsErrs, cCdmaServingPdsnHostname=cCdmaServingPdsnHostname, cCdmaSessionAddressingScheme=cCdmaSessionAddressingScheme, cCdmaPcfSoRpRegAcptdReqs=cCdmaPcfSoRpRegAcptdReqs, cCdmaPppAuthEapFailures=cCdmaPppAuthEapFailures, cCdmaPcfSoRpSessUpdNotAckedReqs=cCdmaPcfSoRpSessUpdNotAckedReqs, cCdmaPppCompressStackCons=cCdmaPppCompressStackCons, cCdmaPcfSessionMaxTotal=cCdmaPcfSessionMaxTotal, cCdmaPppConnectionInitiateReqs=cCdmaPppConnectionInitiateReqs, cCdmaRpHandoffRegReceivedReqs=cCdmaRpHandoffRegReceivedReqs, cCdmaRpUpdReTransmittedReqs=cCdmaRpUpdReTransmittedReqs, cCdmaSystemStatus=cCdmaSystemStatus, cCdmaPcfSoRpSessUpdBadReqFails=cCdmaPcfSoRpSessUpdBadReqFails, cCdmaPdsnMIBComplianceRev1=cCdmaPdsnMIBComplianceRev1, cCdmaClusterMemberStatusChange=cCdmaClusterMemberStatusChange, cCdmaPcfSoRpUpdIpAddrType=cCdmaPcfSoRpUpdIpAddrType, cCdmaPppAuthEapSuccesses=cCdmaPppAuthEapSuccesses, cCdmaFlowProxyIpSuccesses=cCdmaFlowProxyIpSuccesses, cCdmaSessionGREToIPPkts=cCdmaSessionGREToIPPkts, cCdmaPppIpcpFailuresUnknown=cCdmaPppIpcpFailuresUnknown, cCdmaAddressStaticMIPs=cCdmaAddressStaticMIPs, cCdmaPcfSoRpSessUpdStatsEntry=cCdmaPcfSoRpSessUpdStatsEntry, cCdmaPdsnMIBCompliance=cCdmaPdsnMIBCompliance, cCdmaRPUpdAcceptedReplies=cCdmaRPUpdAcceptedReplies, cCdmaRpUpdHandoffMNAuthenFails=cCdmaRpUpdHandoffMNAuthenFails, cCdmaRegReqDuplicateGREKeyErrs=cCdmaRegReqDuplicateGREKeyErrs, cCdmaPcfSoRpDeRegAcptdReqs=cCdmaPcfSoRpDeRegAcptdReqs, cCdmaPppBadLengthPktDiscards=cCdmaPppBadLengthPktDiscards, cCdmaPcfSoRpSessUpdReaUnSpecFails=cCdmaPcfSoRpSessUpdReaUnSpecFails, cCdmaSoRpUpdHandoffIdMismatchFails=cCdmaSoRpUpdHandoffIdMismatchFails, cCdmaActiveSessions=cCdmaActiveSessions, cCdmaSessUpdAckInvMNIDErrs=cCdmaSessUpdAckInvMNIDErrs, cCdmaPcfInfo=cCdmaPcfInfo, cCdmaPcfSoRpHandoffRegDeniedReqs=cCdmaPcfSoRpHandoffRegDeniedReqs, cCdmaPdsnMIBGroups=cCdmaPdsnMIBGroups, cCdmaStatusOOS2ISes=cCdmaStatusOOS2ISes, cCdmaPcfSoRpRegMNAuthFails=cCdmaPcfSoRpRegMNAuthFails, cCdmaPppRenegByMobileReqs=cCdmaPppRenegByMobileReqs, cCdmaSessionServiceOption=cCdmaSessionServiceOption, cCdmaPcfSoRpUpdTxdReqs=cCdmaPcfSoRpUpdTxdReqs, cCdmaPcfSoRpRegPcfUnknwnFails=cCdmaPcfSoRpRegPcfUnknwnFails, cCdmaSessionMaxAllowed=cCdmaSessionMaxAllowed, cCdmaPppAuthChapFailures=cCdmaPppAuthChapFailures, cCdmaRPSessUpdErrors=cCdmaRPSessUpdErrors, cCdmaPppRenegSuccesses=cCdmaPppRenegSuccesses, cCdmaReceivedPmipKiloOctets=cCdmaReceivedPmipKiloOctets, cCdmaPppAuthPdsnA10Releases=cCdmaPppAuthPdsnA10Releases, cCdmaPppAuthStats=cCdmaPppAuthStats, cCdmaServiceOptionTable=cCdmaServiceOptionTable, cCdmaTransmittedSDBOctets=cCdmaTransmittedSDBOctets, cCdmaSoRpUpdHandoffDiscardedAcks=cCdmaSoRpUpdHandoffDiscardedAcks, cCdmaInvCheckSumPktDiscards=cCdmaInvCheckSumPktDiscards, cCdmaRPRegUpdErrors=cCdmaRPRegUpdErrors, cCdmaSessionStatus=cCdmaSessionStatus, cCdmaPppCompressNegoCons=cCdmaPppCompressNegoCons, cCdmaSoRpUpdHandoffReceivedAcks=cCdmaSoRpUpdHandoffReceivedAcks, cCdmaSessUpdAckInvMNIDTypeErrs=cCdmaSessUpdAckInvMNIDTypeErrs, cCdmaPppNegoVjCompCons=cCdmaPppNegoVjCompCons, cCdmaPdsnMIBComplianceRev2=cCdmaPdsnMIBComplianceRev2, cCdmaRpDeRegAirlinkStops=cCdmaRpDeRegAirlinkStops, cCdmaSoRpUpdHandoffMNAuthenFails=cCdmaSoRpUpdHandoffMNAuthenFails, cCdmaPppLowerLayerReleaseFailures=cCdmaPppLowerLayerReleaseFailures, cCdmaRegReqInvAirlinkRecErrs=cCdmaRegReqInvAirlinkRecErrs, cCdmaSessionHaIpAddress=cCdmaSessionHaIpAddress, cCdmaRPUpdAdminProhibFailures=cCdmaRPUpdAdminProhibFailures, cCdmaSessionA11FaIp=cCdmaSessionA11FaIp, cCdmaPcfSoRpSessUpdIpAddrType=cCdmaPcfSoRpSessUpdIpAddrType, cCdmaPcfSoRpSessUpdDeniedReqs=cCdmaPcfSoRpSessUpdDeniedReqs, cCdmaFailSessionEsn=cCdmaFailSessionEsn, cCdmaPcfSoRpUpdAcptdReqs=cCdmaPcfSoRpUpdAcptdReqs, cCdmaPppLcpTermReleases=cCdmaPppLcpTermReleases, cCdmaRpRegNoRevTunnelFailures=cCdmaRpRegNoRevTunnelFailures, cCdmaRpUpdBadReqFailures=cCdmaRpUpdBadReqFailures, cCdmaRegReqInvAppSubTypeInVSEErrs=cCdmaRegReqInvAppSubTypeInVSEErrs, cCdmaSystemInfo=cCdmaSystemInfo, cCdmaPppAuthPhaseReceivedTermreqs=cCdmaPppAuthPhaseReceivedTermreqs, cCdmaPcfSoRpDeRegRcvdReqs=cCdmaPcfSoRpDeRegRcvdReqs, cCdmaAffectedAddress=cCdmaAffectedAddress, cCdmaRegUpdAckInvVSEErrs=cCdmaRegUpdAckInvVSEErrs, cCdmaPppIpcpPhaseSentTermreqs=cCdmaPppIpcpPhaseSentTermreqs, cCdmaPcfSoRpUpdOtherReaReqs=cCdmaPcfSoRpUpdOtherReaReqs, cCdmaNotifPdsnGroupRev2=cCdmaNotifPdsnGroupRev2, cCdmaPppMissEchoReleases=cCdmaPppMissEchoReleases, cCdmaRpReRegDeniedReqs=cCdmaRpReRegDeniedReqs)
mibBuilder.exportSymbols("CISCO-CDMA-PDSN-MIB", cCdmaRegUpdAckInvSPIErrs=cCdmaRegUpdAckInvSPIErrs, cCdmaPppEnterAuthNums=cCdmaPppEnterAuthNums, cCdmaPcfSoRpSessUpdRNPDIT=cCdmaPcfSoRpSessUpdRNPDIT, cCdmaPppLcpPhaseReceivedTermreqs=cCdmaPppLcpPhaseReceivedTermreqs, cCdmaAffectedMemberStatus=cCdmaAffectedMemberStatus, cCdmaPdsnPcfSoPppGroup=cCdmaPdsnPcfSoPppGroup, cCdmaRpUpdHandoffBadReqFails=cCdmaRpUpdHandoffBadReqFails, cCdmaRPSessUpdAckErrors=cCdmaRPSessUpdAckErrors, cCdmaSystemVersion=cCdmaSystemVersion, cCdmaPppPreLCPPcfA10Releases=cCdmaPppPreLCPPcfA10Releases, cCdmaRpSessUpdBadReqFailures=cCdmaRpSessUpdBadReqFailures, cCdmaAffectedAddressType=cCdmaAffectedAddressType, cCdmaPppRetransmittedEchoReqs=cCdmaPppRetransmittedEchoReqs, cCdmaFlowUnknownTypeFailures=cCdmaFlowUnknownTypeFailures, cCdmaPppIpcpFailures=cCdmaPppIpcpFailures, cCdmaPppSrvUnavailReleases=cCdmaPppSrvUnavailReleases, cCdmaPppAuthSkips=cCdmaPppAuthSkips, cCdmaPcfSoRpHandoffRegAcptdReqs=cCdmaPcfSoRpHandoffRegAcptdReqs, cCdmaAddressStaticSIPs=cCdmaAddressStaticSIPs, cCdmaRpUpdHandoffReceivedAcks=cCdmaRpUpdHandoffReceivedAcks, cCdmaPppIPCPPcfA10Releases=cCdmaPppIPCPPcfA10Releases, cCdmaPcfSoRpHandoffRegDiscardedReqs=cCdmaPcfSoRpHandoffRegDiscardedReqs, cCdmaPppRenegTotalReqs=cCdmaPppRenegTotalReqs, cCdmaSessUpdAckMissingSSEErrs=cCdmaSessUpdAckMissingSSEErrs, cCdmaSrEnabled=cCdmaSrEnabled, cCdmaRpRegIdMismatchFailures=cCdmaRpRegIdMismatchFailures, cCdmaRpDeRegHandoffAcceptedReqs=cCdmaRpDeRegHandoffAcceptedReqs, cCdmaRpSessUpdInitTransmittedReqs=cCdmaRpSessUpdInitTransmittedReqs, cCdmaRegRplyInternalErrs=cCdmaRegRplyInternalErrs, cCdmaRPRegUnknownHAAddrFailures=cCdmaRPRegUnknownHAAddrFailures, cCdmaPcfSoRpInitRegRcvdReqs=cCdmaPcfSoRpInitRegRcvdReqs, cCdmaRegReqInvOrderErrs=cCdmaRegReqInvOrderErrs, cCdmaPppCompressAscendCons=cCdmaPppCompressAscendCons, cCdmaRpUpdAcceptedReqs=cCdmaRpUpdAcceptedReqs, cCdmaMobileIpFlowTotal=cCdmaMobileIpFlowTotal, cCdmaPppSessTimeoutReleases=cCdmaPppSessTimeoutReleases, cCdmaRegReqStartBeforeSetupErrs=cCdmaRegReqStartBeforeSetupErrs, cCdmaFailSessionA11HaIp=cCdmaFailSessionA11HaIp, cCdmaSessionVJCompressEnabled=cCdmaSessionVJCompressEnabled, cCdmaPdsnMIBComplianceRev4=cCdmaPdsnMIBComplianceRev4, cCdmaPppAuthMsidSuccesses=cCdmaPppAuthMsidSuccesses, cCdmaPppSetupStats=cCdmaPppSetupStats, cCdmaPppAuthPapTimeouts=cCdmaPppAuthPapTimeouts, cCdmaPppAuthEapAttempts=cCdmaPppAuthEapAttempts, cCdmaRPUpdMNAuthenFailures=cCdmaRPUpdMNAuthenFailures, cCdmaClusterMemberInfo=cCdmaClusterMemberInfo, cCdmaPcfSoRpUpdIdMismatFails=cCdmaPcfSoRpUpdIdMismatFails, cCdmaVPDNFlowTotal=cCdmaVPDNFlowTotal, cCdmaPcfSoRpRegStats=cCdmaPcfSoRpRegStats, cCdmaClusterMemberEntry=cCdmaClusterMemberEntry, cCdmaPppInsufResReleases=cCdmaPppInsufResReleases, cCdmaSessionPdsnAuthenTimer=cCdmaSessionPdsnAuthenTimer, cCdmaAddressDynamicPMIPs=cCdmaAddressDynamicPMIPs, cCdmaSessionFaIp=cCdmaSessionFaIp, cCdmaRpUpdOtherReasonReqs=cCdmaRpUpdOtherReasonReqs, cCdmaFailHistInfo=cCdmaFailHistInfo, cCdmaRpSessUpdTransmittedReqs=cCdmaRpSessUpdTransmittedReqs, cCdmaRpInitRegDeniedReqs=cCdmaRpInitRegDeniedReqs, cCdmaRpRegReasonlUnSpecFailures=cCdmaRpRegReasonlUnSpecFailures, cCdmaRpUpdHandoffAcceptedReqs=cCdmaRpUpdHandoffAcceptedReqs, cCdmaRegReqAcctInvSeqNumErrs=cCdmaRegReqAcctInvSeqNumErrs, cCdmaPcfSoPppSetupStatsEntry=cCdmaPcfSoPppSetupStatsEntry, cCdmaSessUpdAckMissingRUAEErrs=cCdmaSessUpdAckMissingRUAEErrs, cCdmaRPRegTBitNotSetFailures=cCdmaRPRegTBitNotSetFailures, cCdmaRegUpdAckInvMNIDErrs=cCdmaRegUpdAckInvMNIDErrs, cCdmaRpUpdStats=cCdmaRpUpdStats, cCdmaPcfSoRpDeRegDiscardedReqs=cCdmaPcfSoRpDeRegDiscardedReqs, cCdmaPppConnectionSuccesses=cCdmaPppConnectionSuccesses, cCdmaPppNoRemoteIpAddressReleases=cCdmaPppNoRemoteIpAddressReleases, cCdmaReceivedSipKiloOctets=cCdmaReceivedSipKiloOctets, cCdmaPppIdleTimeoutReleases=cCdmaPppIdleTimeoutReleases, cCdmaRpUpdHandoffInitTxdReqs=cCdmaRpUpdHandoffInitTxdReqs, cCdmaRegReqInvMHAEKeyErrs=cCdmaRegReqInvMHAEKeyErrs, cCdmaRPRegIdentMismatchFailures=cCdmaRPRegIdentMismatchFailures, cCdmaSoRpUpdHandoffDeniedReqs=cCdmaSoRpUpdHandoffDeniedReqs, cCdmaThresholdConfig=cCdmaThresholdConfig, cCdmaSessionRegLifeTime=cCdmaSessionRegLifeTime, cCdmaRpHandoffRegDiscardedReqs=cCdmaRpHandoffRegDiscardedReqs, cCdmaRpDeRegReceivedReqs=cCdmaRpDeRegReceivedReqs, cCdmaPppIPCPPdsnA10Releases=cCdmaPppIPCPPdsnA10Releases, cCdmaRegReqMissingMHAEErrs=cCdmaRegReqMissingMHAEErrs, cCdmaSessionTotal=cCdmaSessionTotal, cCdmaSoRpUpdPcfHandoffs=cCdmaSoRpUpdPcfHandoffs, cCdmaPppLcpSuccesses=cCdmaPppLcpSuccesses, cCdmaRegUpdAckInvPakLenErrs=cCdmaRegUpdAckInvPakLenErrs, cCdmaReleasedSessions=cCdmaReleasedSessions, cCdmaRpRegDiscardedReqs=cCdmaRpRegDiscardedReqs, cCdmaRegReqInvMNIDErrs=cCdmaRegReqInvMNIDErrs, cCdmaClusterMemberTable=cCdmaClusterMemberTable, cCdmaSessionNai=cCdmaSessionNai, cCdmaRpUpdInitTransmittedReqs=cCdmaRpUpdInitTransmittedReqs, cCdmaPppNegoIpCons=cCdmaPppNegoIpCons, cCdmaActiveConnTime=cCdmaActiveConnTime, cCdmaFailSessionConnId=cCdmaFailSessionConnId, cCdmaSessionFlowCount=cCdmaSessionFlowCount, cCdmaPcfSoRpRegIdMismatFails=cCdmaPcfSoRpRegIdMismatFails, CCdmaServiceAffectedLevel=CCdmaServiceAffectedLevel, cCdmaClusterTotalControllers=cCdmaClusterTotalControllers, cCdmaRPUpdIdentMismatchFailures=cCdmaRPUpdIdentMismatchFailures, cCdmaSessionTable=cCdmaSessionTable, cCdmaSessionLowThreshold=cCdmaSessionLowThreshold, cCdmaPcfSoPppConnFails=cCdmaPcfSoPppConnFails, cCdmaRPRegBadRequestFailures=cCdmaRPRegBadRequestFailures, cCdmaPppAuthMschapSuccesses=cCdmaPppAuthMschapSuccesses, cCdmaFlowTypeStats=cCdmaFlowTypeStats, cCdmaPppOtherReasonReleases=cCdmaPppOtherReasonReleases, cCdmaFailHistFailTime=cCdmaFailHistFailTime, cCdmaSystemPdsnGroupSup1=cCdmaSystemPdsnGroupSup1, cCdmaRegUpdMemFailErrs=cCdmaRegUpdMemFailErrs, cCdmaRegReqInvMSIDLenErrs=cCdmaRegReqInvMSIDLenErrs, cCdmaPppAuthPhaseSentTermreqs=cCdmaPppAuthPhaseSentTermreqs, cCdmaRegRplyMemFailErrs=cCdmaRegRplyMemFailErrs, cCdmaPcfSoRpRegIpAddr=cCdmaPcfSoRpRegIpAddr, cCdmaRPUpdValidRequests=cCdmaRPUpdValidRequests, cCdmaPcfSoRpRegNoRsrcFails=cCdmaPcfSoRpRegNoRsrcFails, cCdmaFormatErrorNotifEnabled=cCdmaFormatErrorNotifEnabled, cCdmaPdsnMIBComplianceRev5=cCdmaPdsnMIBComplianceRev5, cCdmaRpHandoffRegDeniedReqs=cCdmaRpHandoffRegDeniedReqs, cCdmaFlowMobileIpFailures=cCdmaFlowMobileIpFailures, cCdmaRegUpdAckInvMNIDTypeErrs=cCdmaRegUpdAckInvMNIDTypeErrs)
