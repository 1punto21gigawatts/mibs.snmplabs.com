#
# PySNMP MIB module RADLAN-IPV6FHS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-IPV6FHS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:47:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
VlanId, PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "PortList", "VlanIndex")
VlanList3, VlanList4, VlanList2, VlanList1 = mibBuilder.importSymbols("RADLAN-BRIDGEMIBOBJECTS-MIB", "VlanList3", "VlanList4", "VlanList2", "VlanList1")
rndErrorDesc, rndErrorSeverity = mibBuilder.importSymbols("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc", "rndErrorSeverity")
rndNotifications, rnd, rlMacMulticast = mibBuilder.importSymbols("RADLAN-MIB", "rndNotifications", "rnd", "rlMacMulticast")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, TimeTicks, Counter32, Bits, MibIdentifier, Gauge32, ModuleIdentity, ObjectIdentity, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "TimeTicks", "Counter32", "Bits", "MibIdentifier", "Gauge32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Integer32")
RowStatus, TextualConvention, TruthValue, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "MacAddress", "DisplayString")
rlIpv6Fhs = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 215))
rlIpv6Fhs.setRevisions(('2012-12-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlIpv6Fhs.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlIpv6Fhs.setLastUpdated('201212120000Z')
if mibBuilder.loadTexts: rlIpv6Fhs.setOrganization('Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rlIpv6Fhs.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rlIpv6Fhs.setDescription('The private MIB module definition for IPv6 First Hop Security.')
class RlIpv6FhsSettingStatusType(TextualConvention, Integer32):
    description = 'The setting status type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("unspecified", -1), ("enabled", 1), ("disabled", 2))

class RlIpv6FhsSettingType(TextualConvention, Integer32):
    description = 'The setting type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("global", 2), ("vlan", 3), ("port", 4))

rlFirstHopSec = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 215, 1))
rlNdInspection = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 215, 2))
rlRaGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 215, 3))
rlNbrBindingIntegrity = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 215, 4))
rlDhcpGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 215, 5))
rlSourceGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 215, 6))
rlFirstHopSecPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 1), )
if mibBuilder.loadTexts: rlFirstHopSecPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyTable.setDescription('The table specifies first hop security per policy configurations.')
rlFirstHopSecPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 1, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecPolicyName"))
if mibBuilder.loadTexts: rlFirstHopSecPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyEntry.setDescription('The row definition for this table.')
rlFirstHopSecPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlFirstHopSecPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyName.setDescription('The first hop security policy name')
rlFirstHopSecPolicyLogDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 1, 1, 2), RlIpv6FhsSettingStatusType().clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPolicyLogDrop.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyLogDrop.setDescription('Enable/disable of the logging of dropped packets.')
rlFirstHopSecPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFirstHopSecPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlFirstHopSecPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 2), )
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyTable.setDescription('The table specifies first hop security policy attachment for ports.')
rlFirstHopSecPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecPortPolicyIfIndex"), (1, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecPortPolicyName"))
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyEntry.setDescription('The row definition for this table.')
rlFirstHopSecPortPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyIfIndex.setDescription("The port's interface index.")
rlFirstHopSecPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyName.setDescription('The first hop security policy name')
rlFirstHopSecPortPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlFirstHopSecPortPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlFirstHopSecPortPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlFirstHopSecPortPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlFirstHopSecPortPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPortPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlFirstHopSecPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 3), )
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortTable.setDescription('The table specifies first hop security policy attachment for ports.')
rlFirstHopSecPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecPolicyPortName"), (0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecPolicyPortIfIndex"))
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortEntry.setDescription('The row definition for this table.')
rlFirstHopSecPolicyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortName.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortName.setDescription('The first hop security policy name')
rlFirstHopSecPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortIfIndex.setDescription("The port's interface index.")
rlFirstHopSecPolicyPortVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlFirstHopSecPolicyPortVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlFirstHopSecPolicyPortVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlFirstHopSecPolicyPortVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyPortVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlFirstHopSecVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 4), )
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyTable.setDescription('The table specifies first hop security policy attachment for vlans.')
rlFirstHopSecVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 4, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecVlanPolicyVlanTag"))
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyEntry.setDescription('The row definition for this table.')
rlFirstHopSecVlanPolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyVlanTag.setDescription('The VLAN identifier.')
rlFirstHopSecVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyName.setDescription('The first hop security policy name')
rlFirstHopSecVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecVlanPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlFirstHopSecPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 5), )
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlanTable.setDescription('The table specifies first hop security policy attachment for vlans.')
rlFirstHopSecPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 5, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecPolicyVlanPolicyName"))
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlanEntry.setDescription('The row definition for this table.')
rlFirstHopSecPolicyVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlanPolicyName.setDescription('The first hop security policy name')
rlFirstHopSecPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlFirstHopSecPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlFirstHopSecPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlFirstHopSecPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlFirstHopSecEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 6), )
if mibBuilder.loadTexts: rlFirstHopSecEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlanTable.setDescription('A table contains only one entry of a static vlan list.')
rlFirstHopSecEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 6, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecEnableVlanIndex"))
if mibBuilder.loadTexts: rlFirstHopSecEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlanEntry.setDescription('Statically created by local or network management vlan list')
rlFirstHopSecEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlFirstHopSecEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlanIndex.setDescription('The table contains only one static entry.')
rlFirstHopSecEnableVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlFirstHopSecEnableVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlFirstHopSecEnableVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlFirstHopSecEnableVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecEnableVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlFirstHopSecActivePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 7), )
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyTable.setDescription('The table specifies first hop security per policy configurations.')
rlFirstHopSecActivePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecActivePolicyIfIndex"), (0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecActivePolicyVlanTag"))
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyEntry.setDescription('The row definition for this table.')
rlFirstHopSecActivePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyIfIndex.setDescription("The port's interface index.")
rlFirstHopSecActivePolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyVlanTag.setDescription('The VLAN identifier.')
rlFirstHopSecActivePolicyNamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyNamePort.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyNamePort.setDescription('The first hop security policy name attached to given interface.')
rlFirstHopSecActivePolicyNameVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyNameVlan.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyNameVlan.setDescription('The first hop security policy name attached to given vlan.')
rlFirstHopSecActivePolicyLogDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1, 5), RlIpv6FhsSettingStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyLogDrop.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyLogDrop.setDescription('Enable/disable of the logging of dropped packets.')
rlFirstHopSecActivePolicyLogDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 7, 1, 6), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyLogDropType.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecActivePolicyLogDropType.setDescription('rlFirstHopSecActivePolicyLogDrop setting type.')
rlFirstHopSecCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 8), )
if mibBuilder.loadTexts: rlFirstHopSecCountersTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersTable.setDescription('The table displays first hop security counters')
rlFirstHopSecCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecCountersIfIndex"))
if mibBuilder.loadTexts: rlFirstHopSecCountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersEntry.setDescription('The row definition for this table.')
rlFirstHopSecCountersIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlFirstHopSecCountersIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersIfIndex.setDescription('Interface index')
rlFirstHopSecCountersRxNdpRA = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpRA.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpRA.setDescription('Number of NDP Router Advertisement messages received on the interface.')
rlFirstHopSecCountersDropNdpRA = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpRA.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpRA.setDescription('Number of NDP Router Advertisement messages dropped on the interface.')
rlFirstHopSecCountersRxNdpRS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpRS.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpRS.setDescription('Number of NDP Router Solicitation messages received on the interface.')
rlFirstHopSecCountersDropNdpRS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpRS.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpRS.setDescription('Number of NDP Router Solicitation messages dropped on the interface.')
rlFirstHopSecCountersRxNdpNA = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpNA.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpNA.setDescription('Number of NDP Neighbor Advertisement messages received on the interface.')
rlFirstHopSecCountersDropNdpNA = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpNA.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpNA.setDescription('Number of NDP Neighbor Advertisement messages dropped on the interface.')
rlFirstHopSecCountersRxNdpNS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpNS.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpNS.setDescription('Number of NDP Neighbor Solicitation messages received on the interface.')
rlFirstHopSecCountersDropNdpNS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpNS.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpNS.setDescription('Number of NDP Neighbor Solicitation messages dropped on the interface.')
rlFirstHopSecCountersRxNdpRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpRedirect.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxNdpRedirect.setDescription('Number of NDP Redirect messages received on the interface.')
rlFirstHopSecCountersDropNdpRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpRedirect.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdpRedirect.setDescription('Number of NDP Redirect messages dropped on the interface.')
rlFirstHopSecCountersRxDhcpAdverise = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpAdverise.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpAdverise.setDescription('Number of DHCPv6 ADVERTISE messages received on the interface.')
rlFirstHopSecCountersDropDhcpAdverise = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpAdverise.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpAdverise.setDescription('Number of DHCPv6 ADVERTISE messages dropped on the interface.')
rlFirstHopSecCountersRxDhcpReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpReply.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpReply.setDescription('Number of DHCPv6 REPLY messages received on the interface.')
rlFirstHopSecCountersDropDhcpReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpReply.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpReply.setDescription('Number of DHCPv6 REPLY messages dropped on the interface.')
rlFirstHopSecCountersRxDhcpReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpReconfigure.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpReconfigure.setDescription('Number of DHCPv6 RECONFIGURE messages received on the interface.')
rlFirstHopSecCountersDropDhcpReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpReconfigure.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpReconfigure.setDescription('Number of DHCPv6 RECONFIGURE messages dropped on the interface.')
rlFirstHopSecCountersRxDhcpRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpRelayReply.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpRelayReply.setDescription('Number of DHCPv6 RELAY-REPLY messages received on the interface.')
rlFirstHopSecCountersDropDhcpRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpRelayReply.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpRelayReply.setDescription('Number of DHCPv6 RELAY-REPLY messages dropped on the interface.')
rlFirstHopSecCountersRxDhcpLeasequeryReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpLeasequeryReply.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpLeasequeryReply.setDescription('Number of DHCPv6 LEASEQUERY-REPLY messages received on the interface.')
rlFirstHopSecCountersDropDhcpLeasequeryReply = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpLeasequeryReply.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpLeasequeryReply.setDescription('Number of DHCPv6 LEASEQUERY-REPLY messages dropped on the interface.')
rlFirstHopSecCountersDropRaGuardUnauthorizedMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedMessage.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedMessage.setDescription('Number of dropped router messages received on host interface.')
rlFirstHopSecCountersDropRaGuardUnauthorizedHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedHopLimit.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedHopLimit.setDescription('Number of dropped RA messages due to unauthorized Cur-Hop-Limit.')
rlFirstHopSecCountersDropRaGuardUnauthorizedManagedConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedManagedConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedManagedConfigFlag.setDescription('Number of dropped RA messages due to unauthorized Managed config flag.')
rlFirstHopSecCountersDropRaGuardUnauthorizedOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedOtherConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedOtherConfigFlag.setDescription('Number of dropped RA messages due to unauthorized Other config flag.')
rlFirstHopSecCountersDropRaGuardUnauthorizedRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedRouterPreference.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedRouterPreference.setDescription('Number of dropped RA messages due to unauthorized router preference.')
rlFirstHopSecCountersDropRaGuardUnauthorizedAdvertisedPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedAdvertisedPrefix.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedAdvertisedPrefix.setDescription('Number of dropped RA messages due to unauthorized advertised prefix.')
rlFirstHopSecCountersDropRaGuardUnauthorizedSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropRaGuardUnauthorizedSourceAddress.setDescription('Number of dropped RA messages due to unauthorized source address.')
rlFirstHopSecCountersDropNdInspectionInvalidSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdInspectionInvalidSourceMac.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdInspectionInvalidSourceMac.setDescription('Number of dropped NDP messages due to invalid source MAC address.')
rlFirstHopSecCountersDropNdInspectionUnsecureMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdInspectionUnsecureMessage.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdInspectionUnsecureMessage.setDescription('Number of dropped NDP messages due to being unsecure.')
rlFirstHopSecCountersDropNdInspectionUnauthorizedSecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdInspectionUnauthorizedSecLevel.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNdInspectionUnauthorizedSecLevel.setDescription('Number of dropped NDP messages due to unauthorized CGA sec-level.')
rlFirstHopSecCountersDropDhcpGuardUnauthorizedMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedMessage.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedMessage.setDescription('Number of dropped DHCPv6 server messages on client interface.')
rlFirstHopSecCountersDropDhcpGuardUnauthorizedSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedSourceAddress.setDescription('Number of dropped DHCPv6 server messages due to unauthorized source address.')
rlFirstHopSecCountersDropDhcpGuardUnauthorizedServerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedServerPreference.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedServerPreference.setDescription('Number of dropped DHCPv6 server messages due to unauthorized server preference.')
rlFirstHopSecCountersDropDhcpGuardUnauthorizedAssignedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedAssignedAddress.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpGuardUnauthorizedAssignedAddress.setDescription('Number of dropped DHCPv6 server messages due to unauthorized address in IA_ADDR.')
rlFirstHopSecCountersDropSourceGuardNoBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropSourceGuardNoBinding.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropSourceGuardNoBinding.setDescription('Number of frame dropped by IPv6 Source Guard due to lack of binding in Neighbor Binding Table.')
rlFirstHopSecCountersDropNbrBindingIntegrityIllegalIcmpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNbrBindingIntegrityIllegalIcmpv6.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNbrBindingIntegrityIllegalIcmpv6.setDescription('Number of dropped ICMPv6 messages due to one of the following reasons: invalid source address, invalid destination address, invalid Hop-Limit, invalid ICMP code, invalid ICMP length, invalid ICMP checksum, invalid target address, invalid flag, invalid option.')
rlFirstHopSecCountersDropNbrBindingIntegrityIllegalDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNbrBindingIntegrityIllegalDhcpv6.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropNbrBindingIntegrityIllegalDhcpv6.setDescription('Number of dropped DHCPv6 messages due to one of the following reasons: invalid source address, invalid destination address, invalid Hop-Limit, invalid ICMP code, invalid ICMP length, invalid ICMP checksum, invalid target address, invalid flag, invalid option.')
rlFirstHopSecCountersRxDhcpRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpRelease.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpRelease.setDescription('Number of DHCPv6 RELEASE messages received on the interface.')
rlFirstHopSecCountersDropDhcpRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpRelease.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpRelease.setDescription('Number of DHCPv6 RELEASE messages dropped on the interface.')
rlFirstHopSecCountersRxDhcpDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpDecline.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersRxDhcpDecline.setDescription('Number of DHCPv6 DECLINE messages received on the interface.')
rlFirstHopSecCountersDropDhcpDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpDecline.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecCountersDropDhcpDecline.setDescription('Number of DHCPv6 DECLINE messages dropped on the interface.')
rlFirstHopSecLogDrop = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecLogDrop.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecLogDrop.setDescription('Enable/disable of the logging of dropped packets.')
rlFirstHopSecClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecClearCounters.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecClearCounters.setDescription('When this object is set to zero IPv6 First Hop Security Counters are cleared on all interfaces. When this object is set to a valid interface index then IPv6 First Hop Security counters are cleared on this interface. Reading this object has no effect.')
rlFirstHopSecErrorCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 1, 11), )
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersTable.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersTable.setDescription('The table displays first hop security error counters')
rlFirstHopSecErrorCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 1, 11, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlFirstHopSecErrorCountersIndex"))
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersEntry.setDescription('Static row for this table.')
rlFirstHopSecErrorCountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersIndex.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersIndex.setDescription('The table contains only one static entry.')
rlFirstHopSecErrorCountersNBTOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersNBTOverflow.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersNBTOverflow.setDescription('Counts Neighbor Binding Table overflow')
rlFirstHopSecErrorCountersNPTOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersNPTOverflow.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersNPTOverflow.setDescription('Counts Neighbor Prefix Table overflow')
rlFirstHopSecErrorCountersTcamOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersTcamOverflow.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecErrorCountersTcamOverflow.setDescription('Counts TCAM overflow')
rlFirstHopSecClearErrorCounters = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFirstHopSecClearErrorCounters.setStatus('current')
if mibBuilder.loadTexts: rlFirstHopSecClearErrorCounters.setDescription('When this object is set to true IPv6 First Hop Security Error Counters are cleared. Setting this object to false or reading this object has no effect.')
rlNdInspectionPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 1), )
if mibBuilder.loadTexts: rlNdInspectionPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyTable.setDescription('The table specifies ND inspection per policy configurations.')
rlNdInspectionPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlNdInspectionPolicyName"))
if mibBuilder.loadTexts: rlNdInspectionPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyEntry.setDescription('The row definition for this table.')
rlNdInspectionPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNdInspectionPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyName.setDescription('The ND inspection policy name')
rlNdInspectionPolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unspecified", -1), ("host", 1), ("router", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlNdInspectionPolicyDropUnsecured = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1, 3), RlIpv6FhsSettingStatusType().clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyDropUnsecured.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyDropUnsecured.setDescription('Enable/disable of dropping unsecured messages.')
rlNdInspectionPolicySecLevelMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicySecLevelMin.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicySecLevelMin.setDescription('The minimum security level parameter value when Cryptographically Generated Address (CGA) options are used. The value of -1 indicates unspecified value. The value of -2 indicates verification of security level is disabled.')
rlNdInspectionPolicyValidateSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1, 5), RlIpv6FhsSettingStatusType().clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyValidateSrcMac.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyValidateSrcMac.setDescription('Enable/disable validating of the source media access control (MAC) address against the link-layer address.')
rlNdInspectionPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNdInspectionPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNdInspectionPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 2), )
if mibBuilder.loadTexts: rlNdInspectionPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyTable.setDescription('The table specifies ND inspection policy attachment for ports.')
rlNdInspectionPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionPortPolicyIfIndex"), (1, "RADLAN-IPV6FHS-MIB", "rlNdInspectionPortPolicyName"))
if mibBuilder.loadTexts: rlNdInspectionPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyEntry.setDescription('The row definition for this table.')
rlNdInspectionPortPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlNdInspectionPortPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyIfIndex.setDescription("The port's interface index.")
rlNdInspectionPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNdInspectionPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyName.setDescription('The ND inspection policy name')
rlNdInspectionPortPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNdInspectionPortPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNdInspectionPortPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNdInspectionPortPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNdInspectionPortPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNdInspectionPortPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPortPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNdInspectionPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 3), )
if mibBuilder.loadTexts: rlNdInspectionPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortTable.setDescription('The table specifies ND inspection policy attachment for ports.')
rlNdInspectionPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionPolicyPortName"), (0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionPolicyPortIfIndex"))
if mibBuilder.loadTexts: rlNdInspectionPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortEntry.setDescription('The row definition for this table.')
rlNdInspectionPolicyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNdInspectionPolicyPortName.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortName.setDescription('The ND inspection policy name')
rlNdInspectionPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rlNdInspectionPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortIfIndex.setDescription("The port's interface index.")
rlNdInspectionPolicyPortVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNdInspectionPolicyPortVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNdInspectionPolicyPortVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNdInspectionPolicyPortVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyPortVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNdInspectionVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 4), )
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyTable.setDescription('The table specifies ND inspection policy attachment for vlans.')
rlNdInspectionVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 4, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionVlanPolicyVlanTag"))
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyEntry.setDescription('The row definition for this table.')
rlNdInspectionVlanPolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyVlanTag.setDescription('The VLAN identifier.')
rlNdInspectionVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyName.setDescription('The ND inspection policy name')
rlNdInspectionVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionVlanPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNdInspectionPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 5), )
if mibBuilder.loadTexts: rlNdInspectionPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlanTable.setDescription('The table specifies ND inspection policy attachment for vlans.')
rlNdInspectionPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 5, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlNdInspectionPolicyVlanPolicyName"))
if mibBuilder.loadTexts: rlNdInspectionPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlanEntry.setDescription('The row definition for this table.')
rlNdInspectionPolicyVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNdInspectionPolicyVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlanPolicyName.setDescription('The ND inspection policy name')
rlNdInspectionPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNdInspectionPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNdInspectionPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNdInspectionPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNdInspectionEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 6), )
if mibBuilder.loadTexts: rlNdInspectionEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlanTable.setDescription('A table contains only one entry of a static vlan list.')
rlNdInspectionEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 6, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionEnableVlanIndex"))
if mibBuilder.loadTexts: rlNdInspectionEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlanEntry.setDescription('Statically created by local or network management vlan list')
rlNdInspectionEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlNdInspectionEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlanIndex.setDescription('The table contains only one static entry.')
rlNdInspectionEnableVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionEnableVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNdInspectionEnableVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionEnableVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNdInspectionEnableVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionEnableVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNdInspectionEnableVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionEnableVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionEnableVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNdInspectionActivePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 2, 7), )
if mibBuilder.loadTexts: rlNdInspectionActivePolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyTable.setDescription('The table specifies ND inspection per policy configurations.')
rlNdInspectionActivePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionActivePolicyIfIndex"), (0, "RADLAN-IPV6FHS-MIB", "rlNdInspectionActivePolicyVlanTag"))
if mibBuilder.loadTexts: rlNdInspectionActivePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyEntry.setDescription('The row definition for this table.')
rlNdInspectionActivePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlNdInspectionActivePolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyIfIndex.setDescription("The port's interface index.")
rlNdInspectionActivePolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: rlNdInspectionActivePolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyVlanTag.setDescription('The VLAN identifier.')
rlNdInspectionActivePolicyNamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyNamePort.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyNamePort.setDescription('The ND inspection policy name attached to given interface.')
rlNdInspectionActivePolicyNameVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyNameVlan.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyNameVlan.setDescription('The ND inspection policy name attached to given vlan.')
rlNdInspectionActivePolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("host", 1), ("router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlNdInspectionActivePolicyDeviceRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 6), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDeviceRoleType.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDeviceRoleType.setDescription('rlNdInspectionActivePolicyDeviceRole setting type.')
rlNdInspectionActivePolicyDropUnsecured = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 7), RlIpv6FhsSettingStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDropUnsecured.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDropUnsecured.setDescription('Enable/disable of dropping unsecured messages.')
rlNdInspectionActivePolicyDropUnsecuredType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 8), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDropUnsecuredType.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyDropUnsecuredType.setDescription('rlNdInspectionActivePolicyDropUnsecured setting type.')
rlNdInspectionActivePolicySecLevelMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicySecLevelMin.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicySecLevelMin.setDescription('The minimum security level parameter value when Cryptographically Generated Address (CGA) options are used. The value of -2 indicates verification of security level is disabled.')
rlNdInspectionActivePolicySecLevelMinType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 10), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicySecLevelMinType.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicySecLevelMinType.setDescription('rlNdInspectionActivePolicySecLevelMin setting type.')
rlNdInspectionActivePolicyValidateSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 11), RlIpv6FhsSettingStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyValidateSrcMac.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyValidateSrcMac.setDescription('Enable/disable validating of the source media access control (MAC) address against the link-layer address.')
rlNdInspectionActivePolicyValidateSrcMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 2, 7, 1, 12), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNdInspectionActivePolicyValidateSrcMacType.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionActivePolicyValidateSrcMacType.setDescription('rlNdInspectionActivePolicyValidateSrcMac setting type.')
rlNdInspectionValidateSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionValidateSrcMac.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionValidateSrcMac.setDescription('Enable/disable validating of the source media access control (MAC) address against the link-layer address.')
rlNdInspectionDropUnsecured = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 2, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionDropUnsecured.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionDropUnsecured.setDescription('Global configuration of dropping unsecured messages. Unsecure messages are neighbor discovery messages with no or invalid CGA and RSA Signature options. The value true(1) means that unsecured messages are dropped; the value false(2) means that they are not.')
rlNdInspectionSecLevelMin = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 7), )).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNdInspectionSecLevelMin.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionSecLevelMin.setDescription('The minimum security level parameter value when Cryptographically Generated Address (CGA) options are used. The value -2 indicates verification of security level is disabled.')
rlNdInspectionMessageDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 228)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNdInspectionMessageDropTrap.setStatus('current')
if mibBuilder.loadTexts: rlNdInspectionMessageDropTrap.setDescription('Warning trap indicating that IPv6 ND Inspection has dropped a message.')
rlRaGuardPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 1), )
if mibBuilder.loadTexts: rlRaGuardPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyTable.setDescription('The table specifies RA guard per policy configurations.')
rlRaGuardPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlRaGuardPolicyName"))
if mibBuilder.loadTexts: rlRaGuardPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyEntry.setDescription('The row definition for this table.')
rlRaGuardPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlRaGuardPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyName.setDescription('The RA Guard policy name.')
rlRaGuardPolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unspecified", -1), ("host", 1), ("router", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlRaGuardPolicyHopLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyHopLimitMin.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyHopLimitMin.setDescription('Minimum hop-count limit. A value of -1 indicates unspecified value. A value of 0 indicates validation is disabled.')
rlRaGuardPolicyHopLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyHopLimitMax.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyHopLimitMax.setDescription('Maximum hop-count limit. A value of -1 indicates unspecified value. A value of 0 indicates validation is disabled.')
rlRaGuardPolicyManagedConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("unspecified", -1), ("disabled", 0), ("enabled-off", 1), ("enabled-on", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyManagedConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyManagedConfigFlag.setDescription('Configuration of -Managed address configuration- flag verification.')
rlRaGuardPolicyMatchRaAddrSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaAddrSpecified.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaAddrSpecified.setDescription('Indicates whether the rlRaGuardPolicyMatchRaAddr is specified')
rlRaGuardPolicyMatchRaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaAddr.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaAddr.setDescription("The IPv6 prefix list to be matched for router's source IPv6 address. Relevant only when rlRaGuardPolicyMatchRaAddrSpecified is true. The empty string means this validation is disabled.")
rlRaGuardPolicyMatchRaPrefixesSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaPrefixesSpecified.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaPrefixesSpecified.setDescription('Indicates whether the rlRaGuardPolicyMatchRaPrefixes is specified')
rlRaGuardPolicyMatchRaPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaPrefixes.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyMatchRaPrefixes.setDescription('The IPv6 prefix list to be matched for advertised prefixes. Relevant only when rlRaGuardPolicyMatchRaPrefixesSpecified is true. The empty string means this validation is disabled.')
rlRaGuardPolicyOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("unspecified", -1), ("disabled", 0), ("enabled-off", 1), ("enabled-on", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyOtherConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyOtherConfigFlag.setDescription('Configuration of -Other configuration- flag verification.')
rlRaGuardPolicyRouterPrefMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecified", -1), ("disabled", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyRouterPrefMin.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyRouterPrefMin.setDescription('Minimum advertised preference limit.')
rlRaGuardPolicyRouterPrefMax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecified", -1), ("disabled", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyRouterPrefMax.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyRouterPrefMax.setDescription('Maximum advertised preference limit. ')
rlRaGuardPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlRaGuardPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlRaGuardPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 2), )
if mibBuilder.loadTexts: rlRaGuardPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyTable.setDescription('The table specifies RA guard policy attachment for ports.')
rlRaGuardPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlRaGuardPortPolicyIfIndex"), (1, "RADLAN-IPV6FHS-MIB", "rlRaGuardPortPolicyName"))
if mibBuilder.loadTexts: rlRaGuardPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyEntry.setDescription('The row definition for this table.')
rlRaGuardPortPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlRaGuardPortPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyIfIndex.setDescription("The port's interface index.")
rlRaGuardPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlRaGuardPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyName.setDescription('The RA Guard policy name.')
rlRaGuardPortPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlRaGuardPortPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlRaGuardPortPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlRaGuardPortPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlRaGuardPortPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlRaGuardPortPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPortPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlRaGuardPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 3), )
if mibBuilder.loadTexts: rlRaGuardPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortTable.setDescription('The table specifies RA guard policy attachment for ports.')
rlRaGuardPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlRaGuardPolicyPortName"), (0, "RADLAN-IPV6FHS-MIB", "rlRaGuardPolicyPortIfIndex"))
if mibBuilder.loadTexts: rlRaGuardPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortEntry.setDescription('The row definition for this table.')
rlRaGuardPolicyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlRaGuardPolicyPortName.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortName.setDescription('The RA Guard policy name')
rlRaGuardPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rlRaGuardPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortIfIndex.setDescription("The port's interface index.")
rlRaGuardPolicyPortVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlRaGuardPolicyPortVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlRaGuardPolicyPortVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlRaGuardPolicyPortVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyPortVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlRaGuardVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 4), )
if mibBuilder.loadTexts: rlRaGuardVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardVlanPolicyTable.setDescription('The table specifies RA guard policy attachment for vlans.')
rlRaGuardVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 4, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlRaGuardVlanPolicyVlanTag"))
if mibBuilder.loadTexts: rlRaGuardVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardVlanPolicyEntry.setDescription('The row definition for this table.')
rlRaGuardVlanPolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: rlRaGuardVlanPolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardVlanPolicyVlanTag.setDescription('The VLAN identifier.')
rlRaGuardVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardVlanPolicyName.setDescription('The RA Guard policy name.')
rlRaGuardVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlRaGuardVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardVlanPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlRaGuardPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 5), )
if mibBuilder.loadTexts: rlRaGuardPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlanTable.setDescription('The table specifies RA guard policy attachment for vlans.')
rlRaGuardPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 5, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlRaGuardPolicyVlanPolicyName"))
if mibBuilder.loadTexts: rlRaGuardPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlanEntry.setDescription('The row definition for this table.')
rlRaGuardPolicyVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlRaGuardPolicyVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlanPolicyName.setDescription('The RA Guard policy name')
rlRaGuardPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlRaGuardPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlRaGuardPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlRaGuardPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlRaGuardEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 6), )
if mibBuilder.loadTexts: rlRaGuardEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlanTable.setDescription('A table contains only one entry of a static vlan list.')
rlRaGuardEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 6, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlRaGuardEnableVlanIndex"))
if mibBuilder.loadTexts: rlRaGuardEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlanEntry.setDescription('Statically created by local or network management vlan list')
rlRaGuardEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlRaGuardEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlanIndex.setDescription('The table contains only one static entry.')
rlRaGuardEnableVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardEnableVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlRaGuardEnableVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardEnableVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlRaGuardEnableVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardEnableVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlRaGuardEnableVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardEnableVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardEnableVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlRaGuardActivePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 3, 7), )
if mibBuilder.loadTexts: rlRaGuardActivePolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyTable.setDescription('The table specifies RA Guard per policy configurations.')
rlRaGuardActivePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlRaGuardActivePolicyIfIndex"), (0, "RADLAN-IPV6FHS-MIB", "rlRaGuardActivePolicyVlanTag"))
if mibBuilder.loadTexts: rlRaGuardActivePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyEntry.setDescription('The row definition for this table.')
rlRaGuardActivePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlRaGuardActivePolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyIfIndex.setDescription("The port's interface index.")
rlRaGuardActivePolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: rlRaGuardActivePolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyVlanTag.setDescription('The VLAN identifier.')
rlRaGuardActivePolicyNamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyNamePort.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyNamePort.setDescription('The RA Guard policy name attached to given interface.')
rlRaGuardActivePolicyNameVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyNameVlan.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyNameVlan.setDescription('The RA Guard policy name attached to given vlan.')
rlRaGuardActivePolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("host", 1), ("router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlRaGuardActivePolicyDeviceRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 6), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyDeviceRoleType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyDeviceRoleType.setDescription('rlRaGuardActivePolicyDeviceRole setting type.')
rlRaGuardActivePolicyHopLimitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMin.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMin.setDescription('Minimum hop-count limit. A value of 0 indicates validation is disabled.')
rlRaGuardActivePolicyHopLimitMinType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 8), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMinType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMinType.setDescription('rlRaGuardActivePolicyHopLimitMin setting type.')
rlRaGuardActivePolicyHopLimitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMax.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMax.setDescription('Maximum hop-count limit. A value of 0 indicates validation is disabled.')
rlRaGuardActivePolicyHopLimitMaxType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 10), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMaxType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyHopLimitMaxType.setDescription('rlRaGuardActivePolicyHopLimitMax setting type.')
rlRaGuardActivePolicyManagedConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled-off", 1), ("enabled-on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyManagedConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyManagedConfigFlag.setDescription('Configuration of -Managed address configuration- flag verification.')
rlRaGuardActivePolicyManagedConfigFlagType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 12), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyManagedConfigFlagType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyManagedConfigFlagType.setDescription('rlRaGuardActivePolicyManagedConfigFlag setting type.')
rlRaGuardActivePolicyMatchRaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaAddr.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaAddr.setDescription("The IPv6 prefix list to be matched for router's source IPv6 address. The empty string means this validation is disabled.")
rlRaGuardActivePolicyMatchRaAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 14), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaAddrType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaAddrType.setDescription('rlRaGuardActivePolicyMatchRaAddr setting type.')
rlRaGuardActivePolicyMatchRaPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaPrefixes.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaPrefixes.setDescription('The IPv6 prefix list to be matched for advertised prefixes. The empty string means this validation is disabled.')
rlRaGuardActivePolicyMatchRaPrefixesType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 16), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaPrefixesType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyMatchRaPrefixesType.setDescription('rlRaGuardActivePolicyMatchRaPrefixes setting type.')
rlRaGuardActivePolicyOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled-off", 1), ("enabled-on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyOtherConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyOtherConfigFlag.setDescription('Configuration of -Other configuration- flag verification.')
rlRaGuardActivePolicyOtherConfigFlagType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 18), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyOtherConfigFlagType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyOtherConfigFlagType.setDescription('rlRaGuardActivePolicyOtherConfigFlag setting type.')
rlRaGuardActivePolicyRouterPrefMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMin.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMin.setDescription('Minimum advertised preference limit.')
rlRaGuardActivePolicyRouterPrefMinType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 20), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMinType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMinType.setDescription('rlRaGuardActivePolicyRouterPrefMin setting type.')
rlRaGuardActivePolicyRouterPrefMax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMax.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMax.setDescription('Maximum advertised preference limit. ')
rlRaGuardActivePolicyRouterPrefMaxType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 3, 7, 1, 22), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMaxType.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardActivePolicyRouterPrefMaxType.setDescription('rlRaGuardActivePolicyRouterPrefMax setting type. ')
rlRaGuardHopLimitMin = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardHopLimitMin.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardHopLimitMin.setDescription('Minimum hop-count limit. A value of zero indicates that hop-count limit is not verified.')
rlRaGuardHopLimitMax = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardHopLimitMax.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardHopLimitMax.setDescription('Maximum hop-count limit. A value of zero indicates that hop-count limit is not verified.')
rlRaGuardManagedConfigFlag = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled-off", 1), ("enabled-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardManagedConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardManagedConfigFlag.setDescription('Global configuration of -Managed address configuration- flag verification.')
rlRaGuardOtherConfigFlag = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled-off", 1), ("enabled-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardOtherConfigFlag.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardOtherConfigFlag.setDescription('Global configuration of -Other configuration- flag verification.')
rlRaGuardRouterPrefMin = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardRouterPrefMin.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardRouterPrefMin.setDescription('Minimum advertised preference limit.')
rlRaGuardRouterPrefMax = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRaGuardRouterPrefMax.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardRouterPrefMax.setDescription('Maximum advertised preference limit.')
rlRaGuardMessageDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 229)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlRaGuardMessageDropTrap.setStatus('current')
if mibBuilder.loadTexts: rlRaGuardMessageDropTrap.setDescription('Warning trap indicating that IPv6 Ra Guard has dropped a message.')
rlNbrBindingIntegrityPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 1), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyTable.setDescription('The table specifies Neighbor Binding Integrity per policy configurations.')
rlNbrBindingIntegrityPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityPolicyName"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyName.setDescription('Neighbor Binding Integrity policy name.')
rlNbrBindingIntegrityPolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unspecified", -1), ("perimeter", 1), ("internal", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlNbrBindingIntegrityPolicyLogBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 3), RlIpv6FhsSettingStatusType().clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyLogBinding.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyLogBinding.setDescription('Enable/disable logging of Neighbor Binding Table events')
rlNbrBindingIntegrityPolicyMaxEntriesVlanLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyMaxEntriesVlanLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyMaxEntriesVlanLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same VLAN tag. The value of -1 indicates unspecified value. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityPolicyMaxEntriesInterfaceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyMaxEntriesInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyMaxEntriesInterfaceLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same interface identifier. The value of -1 indicates unspecified value. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityPolicyMaxEntriesMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyMaxEntriesMacLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyMaxEntriesMacLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same MAC address. The value of -1 indicates unspecified value. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityPolicyPrefixValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 8), RlIpv6FhsSettingStatusType().clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPrefixValidation.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPrefixValidation.setDescription('Enable/disable address prefix validation using Neighbor Prefix Table.')
rlNbrBindingIntegrityPolicyAddressConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 3, 4, 5, 7))).clone(namedValues=NamedValues(("unspecified", -1), ("autoconfig", 1), ("autoconfigAndManual", 3), ("dhcp", 4), ("autoconfigAndDhcp", 5), ("autoconfigManualAndDhcp", 7))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyAddressConfig.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyAddressConfig.setDescription('Specify the allowed methods for address binding in Neighbor Binding Table. autoconfig(1) refers to stateless address autoconfiguration. autoconfigAndManual(3) allows manual and stateless address autoconfiguration. dhcp(4) permits binding only from DHCP. autoconfigAndDhcp(5) binds from DHCP and stateless address autoconfiguration. autoconfigManualAndDhcp(7) binds from Manual, DHCP and stateless address autoconfiguration.')
rlNbrBindingIntegrityPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 2), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyTable.setDescription('The table specifies Neighbor Binding Integrity policy attachment for ports.')
rlNbrBindingIntegrityPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityPortPolicyIfIndex"), (1, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityPortPolicyName"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityPortPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyIfIndex.setDescription("The port's interface index.")
rlNbrBindingIntegrityPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyName.setDescription('The Neighbor Binding Integrity policy name.')
rlNbrBindingIntegrityPortPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNbrBindingIntegrityPortPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNbrBindingIntegrityPortPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNbrBindingIntegrityPortPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNbrBindingIntegrityPortPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPortPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 3), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortTable.setDescription('The table specifies Neighbor Binding Integrity policy attachment for ports.')
rlNbrBindingIntegrityPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityPolicyPortName"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityPolicyPortIfIndex"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityPolicyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortName.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortName.setDescription('The Neighbor Binding Integrity policy name')
rlNbrBindingIntegrityPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortIfIndex.setDescription("The port's interface index.")
rlNbrBindingIntegrityPolicyPortVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNbrBindingIntegrityPolicyPortVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNbrBindingIntegrityPolicyPortVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNbrBindingIntegrityPolicyPortVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyPortVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNbrBindingIntegrityVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 4), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyTable.setDescription('The table specifies Neighbor Binding Integrity policy attachment for vlans.')
rlNbrBindingIntegrityVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 4, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityVlanPolicyVlanTag"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityVlanPolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyVlanTag.setDescription('The VLAN identifier.')
rlNbrBindingIntegrityVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyName.setDescription('The Neighbor Binding Integrity policy name.')
rlNbrBindingIntegrityVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityVlanPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 5), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlanTable.setDescription('The table specifies Neighbor Binding Integrity policy attachment for vlans.')
rlNbrBindingIntegrityPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 5, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityPolicyVlanPolicyName"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlanEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityPolicyVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlanPolicyName.setDescription('The Neighbor Binding Integrity policy name')
rlNbrBindingIntegrityPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNbrBindingIntegrityPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNbrBindingIntegrityPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNbrBindingIntegrityPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNbrBindingIntegrityEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 6), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlanTable.setDescription('A table contains only one entry of a static vlan list.')
rlNbrBindingIntegrityEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 6, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityEnableVlanIndex"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlanEntry.setDescription('Statically created by local or network management vlan list')
rlNbrBindingIntegrityEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlanIndex.setDescription('The table contains only one static entry.')
rlNbrBindingIntegrityEnableVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlNbrBindingIntegrityEnableVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlNbrBindingIntegrityEnableVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlNbrBindingIntegrityEnableVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEnableVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlNbrBindingIntegrityBindingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 7), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingTable.setDescription('The table specifies Neighbor Binding Integrity binding table.')
rlNbrBindingIntegrityBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingVlanTag"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingSourceAddressType"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingSourceAddress"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityBindingVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 1), VlanId())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingVlanTag.setDescription("The binding entry's VLAN tag.")
rlNbrBindingIntegrityBindingSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 2), InetAddressType())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingSourceAddressType.setDescription("The binding entry's INET address type of the source. The only inet type that is supported is ipv6.")
rlNbrBindingIntegrityBindingSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 3), InetAddress())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingSourceAddress.setDescription("The binding entry's INET address of the source.")
rlNbrBindingIntegrityBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingIfIndex.setDescription("The binding entry's anchor interface.")
rlNbrBindingIntegrityBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingMacAddress.setDescription("The binding entry's anchor MAC Address.")
rlNbrBindingIntegrityBindingOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("ndp", 2), ("dhcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingOrigin.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingOrigin.setDescription("The binding entry's origin: local, static, ndp, dhcp.")
rlNbrBindingIntegrityBindingState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("valid", 0), ("tentative", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingState.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingState.setDescription("The binding entry's state: valid, tentative.")
rlNbrBindingIntegrityBindingExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingExpiryTime.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingExpiryTime.setDescription('The time in seconds until the entry is expired. A value of 4294967295 denotes infinite lifetime.')
rlNbrBindingIntegrityBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityBindingTCAMOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 7, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingTCAMOverflow.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingTCAMOverflow.setDescription('Signs if entry is configured in TCAM')
rlNbrBindingIntegrityClearTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 8), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearTable.setDescription('The table clears Neighbor Binding Integrity binding table according to configured filters.')
rlNbrBindingIntegrityClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityClearIndex"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityClearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearIndex.setDescription('The row index in the table.')
rlNbrBindingIntegrityClearVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearVlanTag.setDescription('Clear binding entries with this VLAN tag.')
rlNbrBindingIntegrityClearSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearSourceAddressType.setDescription('Clear binding entries with this source address type. The only inet type that is supported is ipv6.')
rlNbrBindingIntegrityClearSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearSourceAddress.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearSourceAddress.setDescription('Clear binding entries with this source address.')
rlNbrBindingIntegrityClearIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearIfIndex.setDescription('cClear binding entries with this anchor interface.')
rlNbrBindingIntegrityClearMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearMacAddress.setDescription('clear binding entries with this anchor MAC Address.')
rlNbrBindingIntegrityClearRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityClearBindMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ndp", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearBindMethod.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearBindMethod.setDescription('clear dynamic entries bound using the specified method.')
rlNbrBindingIntegrityBindingPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 18), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixTable.setDescription('The table specifies Neighbor Binding Integrity binding table.')
rlNbrBindingIntegrityBindingPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingPrefixVlanTag"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingPrefixAddressType"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingPrefixAddress"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityBindingPrefixLength"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityBindingPrefixVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 1), VlanId())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixVlanTag.setDescription("The binding prefix entry's VLAN tag.")
rlNbrBindingIntegrityBindingPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 2), InetAddressType())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixAddressType.setDescription("The binding prefix entry's INET address type. The only inet type that is supported is ipv6.")
rlNbrBindingIntegrityBindingPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 3), InetAddress())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixAddress.setDescription("The binding prefix entry's address.")
rlNbrBindingIntegrityBindingPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixLength.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixLength.setDescription('Indicates the number of leading one bits that form the mask to be logical-ANDed with the inet address before being compared to the value in the rlNbrBindingIntegrityBindingPrefixAddress field.')
rlNbrBindingIntegrityBindingPrefixOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixOrigin.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixOrigin.setDescription("The binding prefix entry's origin: static or dynamic")
rlNbrBindingIntegrityBindingPrefixAllowAutoconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixAllowAutoconfig.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixAllowAutoconfig.setDescription('Indicates whether the prefix can be used for stateless address auto-configuration.')
rlNbrBindingIntegrityBindingPrefixExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixExpiryTime.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixExpiryTime.setDescription('The time in seconds until the entry is expired. A value of 4294967295 denotes infinite lifetime.')
rlNbrBindingIntegrityBindingPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 18, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingPrefixRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityClearPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 19), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixTable.setDescription('The table clears Neighbor Binding Integrity Binding Prefix table according to configured filters.')
rlNbrBindingIntegrityClearPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityClearPrefixIndex"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityClearPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixIndex.setDescription('The row index in the table.')
rlNbrBindingIntegrityClearPrefixVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixVlanTag.setDescription('Clear binding prefix entries with this VLAN tag.')
rlNbrBindingIntegrityClearPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixAddressType.setDescription('Clear binding prefix entries with this address type. The only inet type that is supported is ipv6.')
rlNbrBindingIntegrityClearPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixAddress.setDescription('Clear binding prefix entries with this address prefix.')
rlNbrBindingIntegrityClearPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1, 5), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixLength.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixLength.setDescription('Indicates the number of leading one bits that form the mask to be logical-ANDed with the inet address before being compared to the value in the rlNbrBindingIntegrityClearPrefixAddress field.')
rlNbrBindingIntegrityClearPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 19, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearPrefixRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlNbrBindingIntegrityActivePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 4, 9), )
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyTable.setDescription('The table specifies Neighbor Binding Integrity per policy configurations.')
rlNbrBindingIntegrityActivePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityActivePolicyIfIndex"), (0, "RADLAN-IPV6FHS-MIB", "rlNbrBindingIntegrityActivePolicyVlanTag"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyEntry.setDescription('The row definition for this table.')
rlNbrBindingIntegrityActivePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyIfIndex.setDescription("The port's interface index.")
rlNbrBindingIntegrityActivePolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 2), VlanId())
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyVlanTag.setDescription('The VLAN identifier.')
rlNbrBindingIntegrityActivePolicyNamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyNamePort.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyNamePort.setDescription('The Neighbor Binding Integrity policy name attached to given interface.')
rlNbrBindingIntegrityActivePolicyNameVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyNameVlan.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyNameVlan.setDescription('The Neighbor Binding Integrity policy name attached to given vlan.')
rlNbrBindingIntegrityActivePolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perimeter", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlNbrBindingIntegrityActivePolicyDeviceRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 6), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyDeviceRoleType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyDeviceRoleType.setDescription('rlNbrBindingIntegrityActivePolicyDeviceRole setting type.')
rlNbrBindingIntegrityActivePolicyLogBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 7), RlIpv6FhsSettingStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyLogBinding.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyLogBinding.setDescription('Enable/disable logging of Neighbor Binding Table events.')
rlNbrBindingIntegrityActivePolicyLogBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 8), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyLogBindingType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyLogBindingType.setDescription('rlNbrBindingIntegrityActivePolicyLogBinding setting type.')
rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same VLAN tag. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 10), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimitType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimitType.setDescription('rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimit setting type.')
rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same interface identifier. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 12), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimitType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimitType.setDescription('rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimit setting type.')
rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same MAC address. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 14), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimitType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimitType.setDescription('rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimit setting type.')
rlNbrBindingIntegrityActivePolicyBindingLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyBindingLifetime.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyBindingLifetime.setDescription("Neighbor Binding entry's default lifetime in seconds.")
rlNbrBindingIntegrityActivePolicyBindingLifetimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 16), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyBindingLifetimeType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyBindingLifetimeType.setDescription('rlNbrBindingIntegrityActivePolicyBindingLifetime setting type.')
rlNbrBindingIntegrityActivePolicyPrefixValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 17), RlIpv6FhsSettingStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyPrefixValidation.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyPrefixValidation.setDescription('Enable/disable address prefix validation using Neighbor Prefix Table.')
rlNbrBindingIntegrityActivePolicyPrefixValidationType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 18), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyPrefixValidationType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyPrefixValidationType.setDescription('rlNbrBindingIntegrityActivePolicyPrefixValidation setting type.')
rlNbrBindingIntegrityActivePolicyAddressConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 7))).clone(namedValues=NamedValues(("autoconfig", 1), ("autoconfigAndManual", 3), ("dhcp", 4), ("autoconfigAndDhcp", 5), ("autoconfigManualAndDhcp", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyAddressConfig.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyAddressConfig.setDescription('Specify the allowed methods for address binding in Neighbor Binding Table. autoconfig(1) refers to stateless address autoconfiguration. autoconfigAndManual(3) allows manual and stateless address autoconfiguration. dhcp(4) permits binding only from DHCP. autoconfigAndDhcp(5) binds from DHCP and stateless address autoconfiguration. autoconfigManualAndDhcp(7) binds from Manual, DHCP and stateless address autoconfiguration.')
rlNbrBindingIntegrityActivePolicyAddressConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 4, 9, 1, 20), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyAddressConfigType.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityActivePolicyAddressConfigType.setDescription('rlNbrBindingIntegrityActivePolicyAddressConfig setting type.')
rlNbrBindingIntegrityBindingLifetime = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingLifetime.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityBindingLifetime.setDescription("Neighbor Binding entry's default lifetime in seconds.")
rlNbrBindingIntegrityLogBinding = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityLogBinding.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityLogBinding.setDescription('Enable/disable logging of Neighbor Binding Table events')
rlNbrBindingIntegrityMaxEntriesVlanLimit = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 65535), )).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityMaxEntriesVlanLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityMaxEntriesVlanLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same VLAN tag. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityMaxEntriesInterfaceLimit = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 65535), )).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityMaxEntriesInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityMaxEntriesInterfaceLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same interface identifier. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityMaxEntriesMacLimit = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 65535), )).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityMaxEntriesMacLimit.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityMaxEntriesMacLimit.setDescription('Indicates how many entries can be added to Neighbor Binding Table with the same MAC address. The value of -2 indicates there is no limit.')
rlNbrBindingIntegrityEntriesNum = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntriesNum.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntriesNum.setDescription('Number of entries in Neighbor Binding Table.')
rlNbrBindingIntegrityPrefixValidation = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPrefixValidation.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPrefixValidation.setDescription('Enable/disable address prefix validation using Neighbor Prefix Table.')
rlNbrBindingIntegrityAddressConfig = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 7))).clone(namedValues=NamedValues(("autoconfig", 1), ("autoconfigAndManual", 3), ("dhcp", 4), ("autoconfigAndDhcp", 5), ("autoconfigManualAndDhcp", 7))).clone('autoconfigAndManual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityAddressConfig.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityAddressConfig.setDescription('Specify the allowed methods for address binding in Neighbor Binding Table. autoconfig(1) refers to stateless address autoconfiguration. autoconfigAndManual(3) allows manual and stateless address autoconfiguration. dhcp(4) permits binding only from DHCP. autoconfigAndDhcp(5) binds from DHCP and stateless address autoconfiguration. autoconfigManualAndDhcp(7) binds from Manual, DHCP and stateless address autoconfiguration.')
rlNbrBindingIntegrityPrefixEntriesNum = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlNbrBindingIntegrityPrefixEntriesNum.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPrefixEntriesNum.setDescription('Number of entries in Neighbor Prefix Table.')
rlNbrBindingIntegrityClearDhcpRecoveryFile = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearDhcpRecoveryFile.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityClearDhcpRecoveryFile.setDescription("Clear neighbor binding integrity's DHCP recovery file. Setting a value of zero clears the information for all VLANs. Setting a non-zero value clears the information for a specific VLAN. Reading this object has not effect.")
rlNbrBindingIntegrityEntryAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 230)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryAddedTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryAddedTrap.setDescription('Information trap indicating that new binding entry was added to Neighbor Binding Table.')
rlNbrBindingIntegrityEntryStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 231)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryStateChangeTrap.setDescription('Information trap indicating that binding entry state was changed.')
rlNbrBindingIntegrityEntryAnchorChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 232)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryAnchorChangeTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryAnchorChangeTrap.setDescription('Information trap indicating that binding entry anchor was changed.')
rlNbrBindingIntegrityEntryDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 233)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryDeletedTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryDeletedTrap.setDescription('Information trap indicating that binding entry was deleted.')
rlNbrBindingIntegrityEntryLimitReachTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 234)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryLimitReachTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityEntryLimitReachTrap.setDescription('Warning trap indicating that a new entry was not inserted into Neighbor Binding table because of maximum limit has been reached.')
rlNbrBindingIntegrityOverflowTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 235)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityOverflowTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityOverflowTrap.setDescription('Warning trap indicating that a new entry was not inserted into Neighbor Binding table because of the Neighbor Binding table overflow.')
rlSrcGuardTCAMOverflowTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 238)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlSrcGuardTCAMOverflowTrap.setStatus('current')
if mibBuilder.loadTexts: rlSrcGuardTCAMOverflowTrap.setDescription('Warning trap indicating that a new Source Guard entry was not inserted into TCAM because of the lack of resources.')
rlNbrBindingIntegrityPrefixOverflowTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 239)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlNbrBindingIntegrityPrefixOverflowTrap.setStatus('current')
if mibBuilder.loadTexts: rlNbrBindingIntegrityPrefixOverflowTrap.setDescription('Warning trap indicating that a new entry was not inserted into Neighbor Prefix table because of the Neighbor Prefix table overflow.')
rlDhcpGuardPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 1), )
if mibBuilder.loadTexts: rlDhcpGuardPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyTable.setDescription('The table specifies DHCPv6 guard per policy configurations.')
rlDhcpGuardPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardPolicyName"))
if mibBuilder.loadTexts: rlDhcpGuardPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyEntry.setDescription('The row definition for this table.')
rlDhcpGuardPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlDhcpGuardPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyName.setDescription('The DHCPv6 guard policy name')
rlDhcpGuardPolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unspecified", -1), ("client", 1), ("server", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlDhcpGuardPolicyMatchServerAddrSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchServerAddrSpecified.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchServerAddrSpecified.setDescription('Indicates whether the rlDhcpGuardPolicyMatchServerAddr is specified.')
rlDhcpGuardPolicyMatchServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchServerAddr.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchServerAddr.setDescription('The IPv6 prefix list to be matched for IPv6 address in messages sent by DHCPv6 servers. Relevant only when rlDhcpGuardPolicyMatchServerAddrSpecified is true. The empty string means this validation is disabled.')
rlDhcpGuardPolicyMatchReplyAddrSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchReplyAddrSpecified.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchReplyAddrSpecified.setDescription('Indicates whether the rlDhcpGuardPolicyMatchReplyAddr is specified.')
rlDhcpGuardPolicyMatchReplyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchReplyAddr.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyMatchReplyAddr.setDescription('The IPv6 prefix list to be matched for assigned IPv6 addressed by DHCPv6 servers. Relevant only when rlDhcpGuardPolicyMatchReplyAddrSpecified is true. The empty string means this validation is disabled.')
rlDhcpGuardPolicyPrefMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyPrefMin.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPrefMin.setDescription('Minimum preference value limit. A value of -1 indicates unspecified value. A value of -2 indicates validation is disabled.')
rlDhcpGuardPolicyPrefMax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyPrefMax.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPrefMax.setDescription('Maximum preference value limit. A value of -1 indicates unspecified value. A value of -2 indicates validation is disabled.')
rlDhcpGuardPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDhcpGuardPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlDhcpGuardPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 2), )
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyTable.setDescription('The table specifies DHCPv6 guard policy attachment for ports.')
rlDhcpGuardPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardPortPolicyIfIndex"), (1, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardPortPolicyName"))
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyEntry.setDescription('The row definition for this table.')
rlDhcpGuardPortPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyIfIndex.setDescription("The port's interface index.")
rlDhcpGuardPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyName.setDescription('The DHCPv6 guard policy name')
rlDhcpGuardPortPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlDhcpGuardPortPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlDhcpGuardPortPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlDhcpGuardPortPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlDhcpGuardPortPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPortPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlDhcpGuardPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 3), )
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortTable.setDescription('The table specifies DHCPv6 guard policy attachment for ports.')
rlDhcpGuardPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardPolicyPortName"), (0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardPolicyPortIfIndex"))
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortEntry.setDescription('The row definition for this table.')
rlDhcpGuardPolicyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortName.setDescription('The DHCPv6 guard policy name')
rlDhcpGuardPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortIfIndex.setDescription("The port's interface index.")
rlDhcpGuardPolicyPortVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlDhcpGuardPolicyPortVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlDhcpGuardPolicyPortVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlDhcpGuardPolicyPortVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyPortVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlDhcpGuardVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 4), )
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyTable.setDescription('The table specifies DHCPv6 guard policy attachment for vlans.')
rlDhcpGuardVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 4, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardVlanPolicyVlanTag"))
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyEntry.setDescription('The row definition for this table.')
rlDhcpGuardVlanPolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyVlanTag.setDescription("The port's interface index.")
rlDhcpGuardVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyName.setDescription('The DHCPv6 guard policy name')
rlDhcpGuardVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardVlanPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlDhcpGuardPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 5), )
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlanTable.setDescription('The table specifies DHCPv6 guard policy attachment for vlans.')
rlDhcpGuardPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 5, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardPolicyVlanPolicyName"))
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlanEntry.setDescription('The row definition for this table.')
rlDhcpGuardPolicyVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlanPolicyName.setDescription('The DHCPv6 guard policy name')
rlDhcpGuardPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlDhcpGuardPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlDhcpGuardPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlDhcpGuardPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlDhcpGuardEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 6), )
if mibBuilder.loadTexts: rlDhcpGuardEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlanTable.setDescription('A table contains only one entry of a static vlan list.')
rlDhcpGuardEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 6, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardEnableVlanIndex"))
if mibBuilder.loadTexts: rlDhcpGuardEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlanEntry.setDescription('Statically created by local or network management vlan list')
rlDhcpGuardEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlDhcpGuardEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlanIndex.setDescription('The table contains only one static entry.')
rlDhcpGuardEnableVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlDhcpGuardEnableVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlDhcpGuardEnableVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlDhcpGuardEnableVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardEnableVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlDhcpGuardActivePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 5, 7), )
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyTable.setDescription('The table specifies DHCPv6 guard per policy configurations.')
rlDhcpGuardActivePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardActivePolicyIfIndex"), (0, "RADLAN-IPV6FHS-MIB", "rlDhcpGuardActivePolicyVlanTag"))
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyEntry.setDescription('The row definition for this table.')
rlDhcpGuardActivePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyIfIndex.setDescription("The port's interface index.")
rlDhcpGuardActivePolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyVlanTag.setDescription('The VLAN identifier.')
rlDhcpGuardActivePolicyNamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyNamePort.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyNamePort.setDescription('The DHCPv6 guard policy name attached to given interface.')
rlDhcpGuardActivePolicyNameVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyNameVlan.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyNameVlan.setDescription('The DHCPv6 guard policy name attached to given vlan.')
rlDhcpGuardActivePolicyDeviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyDeviceRole.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyDeviceRole.setDescription('Specify the role of the device attached.')
rlDhcpGuardActivePolicyDeviceRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 6), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyDeviceRoleType.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyDeviceRoleType.setDescription('rlDhcpGuardActivePolicyDeviceRole setting type.')
rlDhcpGuardActivePolicyMatchServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchServerAddr.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchServerAddr.setDescription('The IPv6 prefix list to be matched for IPv6 address in messages sent by DHCPv6 servers. The empty string means this validation is disabled.')
rlDhcpGuardActivePolicyMatchServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 8), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchServerAddrType.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchServerAddrType.setDescription('rlDhcpGuardActivePolicyMatchServerAddr setting type.')
rlDhcpGuardActivePolicyMatchReplyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchReplyAddr.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchReplyAddr.setDescription('The IPv6 prefix list to be matched for assigned IPv6 addressed by DHCPv6 servers. The empty string means this validation is disabled.')
rlDhcpGuardActivePolicyMatchReplyAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 10), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchReplyAddrType.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyMatchReplyAddrType.setDescription('rlDhcpGuardActivePolicyMatchReplyAddr setting type.')
rlDhcpGuardActivePolicyPrefMin = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMin.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMin.setDescription('Minimum preference value limit. A value of -2 indicates validation is disabled.')
rlDhcpGuardActivePolicyPrefMinType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 12), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMinType.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMinType.setDescription('rlDhcpGuardActivePolicyPrefMin setting type.')
rlDhcpGuardActivePolicyPrefMax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMax.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMax.setDescription('Maximum preference value limit. A value of -2 indicates validation is disabled.')
rlDhcpGuardActivePolicyPrefMaxType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 5, 7, 1, 14), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMaxType.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardActivePolicyPrefMaxType.setDescription('rlDhcpGuardActivePolicyPrefMax setting type.')
rlDhcpGuardPrefMin = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 255), )).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPrefMin.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPrefMin.setDescription('Minimum preference value limit. A value of -2 indicates validation is disabled.')
rlDhcpGuardPrefMax = MibScalar((1, 3, 6, 1, 4, 1, 89, 215, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-2, -2), ValueRangeConstraint(0, 255), )).clone(-2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlDhcpGuardPrefMax.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardPrefMax.setDescription('Maximum preference value limit. A value of -2 indicates validation is disabled.')
rlDhcpGuardMessageDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 236)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlDhcpGuardMessageDropTrap.setStatus('current')
if mibBuilder.loadTexts: rlDhcpGuardMessageDropTrap.setDescription('Warning trap indicating that IPv6 DHCP Guard has dropped a message.')
rlSourceGuardPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 1), )
if mibBuilder.loadTexts: rlSourceGuardPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyTable.setDescription('The table specifies Source Guard per policy configurations.')
rlSourceGuardPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 1, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlSourceGuardPolicyName"))
if mibBuilder.loadTexts: rlSourceGuardPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyEntry.setDescription('The row definition for this table.')
rlSourceGuardPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlSourceGuardPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyName.setDescription('The Source Guard policy name.')
rlSourceGuardPolicyTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 1, 1, 2), RlIpv6FhsSettingStatusType().clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPolicyTrusted.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyTrusted.setDescription('Indicates whether policy defines trusted functionality')
rlSourceGuardPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlSourceGuardPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlSourceGuardPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 2), )
if mibBuilder.loadTexts: rlSourceGuardPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyTable.setDescription('The table specifies Source Guard policy attachment for ports.')
rlSourceGuardPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardPortPolicyIfIndex"), (1, "RADLAN-IPV6FHS-MIB", "rlSourceGuardPortPolicyName"))
if mibBuilder.loadTexts: rlSourceGuardPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyEntry.setDescription('The row definition for this table.')
rlSourceGuardPortPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlSourceGuardPortPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyIfIndex.setDescription("The port's interface index.")
rlSourceGuardPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlSourceGuardPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyName.setDescription('The Source guard policy name')
rlSourceGuardPortPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlSourceGuardPortPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlSourceGuardPortPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlSourceGuardPortPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlSourceGuardPortPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlSourceGuardPortPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPortPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlSourceGuardPolicyPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 3), )
if mibBuilder.loadTexts: rlSourceGuardPolicyPortTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortTable.setDescription('The table specifies Source guard policy attachment for ports.')
rlSourceGuardPolicyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardPolicyPortName"), (0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardPolicyPortIfIndex"))
if mibBuilder.loadTexts: rlSourceGuardPolicyPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortEntry.setDescription('The row definition for this table.')
rlSourceGuardPolicyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlSourceGuardPolicyPortName.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortName.setDescription('The Source guard policy name')
rlSourceGuardPolicyPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rlSourceGuardPolicyPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortIfIndex.setDescription("The port's interface index.")
rlSourceGuardPolicyPortVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlSourceGuardPolicyPortVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlSourceGuardPolicyPortVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlSourceGuardPolicyPortVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyPortVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlSourceGuardVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 4), )
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyTable.setDescription('The table specifies Source Guard policy attachment for vlans.')
rlSourceGuardVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 4, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardVlanPolicyVlanTag"))
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyEntry.setDescription('The row definition for this table.')
rlSourceGuardVlanPolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyVlanTag.setDescription("The port's interface index.")
rlSourceGuardVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyName.setDescription('The Source guard policy name')
rlSourceGuardVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardVlanPolicyRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
rlSourceGuardPolicyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 5), )
if mibBuilder.loadTexts: rlSourceGuardPolicyVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlanTable.setDescription('The table specifies Source Guard policy attachment for vlans.')
rlSourceGuardPolicyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 5, 1), ).setIndexNames((1, "RADLAN-IPV6FHS-MIB", "rlSourceGuardPolicyVlanPolicyName"))
if mibBuilder.loadTexts: rlSourceGuardPolicyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlanEntry.setDescription('The row definition for this table.')
rlSourceGuardPolicyVlanPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlSourceGuardPolicyVlanPolicyName.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlanPolicyName.setDescription('The Source guard policy name')
rlSourceGuardPolicyVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlSourceGuardPolicyVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlSourceGuardPolicyVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlSourceGuardPolicyVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardPolicyVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlSourceGuardEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 6), )
if mibBuilder.loadTexts: rlSourceGuardEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlanTable.setDescription('A table contains only one entry of a static vlan list. The Source Guard enabled VLANs are set to 1s.')
rlSourceGuardEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 6, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardEnableVlanIndex"))
if mibBuilder.loadTexts: rlSourceGuardEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlanEntry.setDescription('Statically created by local or network management vlan list')
rlSourceGuardEnableVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("static", 1))))
if mibBuilder.loadTexts: rlSourceGuardEnableVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlanIndex.setDescription('The table contains only one static entry.')
rlSourceGuardEnableVlan1to1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardEnableVlan1to1024.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlan1to1024.setDescription('A list of vlans from 1 to 1024.')
rlSourceGuardEnableVlan1025to2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardEnableVlan1025to2048.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlan1025to2048.setDescription('A list of vlans from 1025 to 2048.')
rlSourceGuardEnableVlan2049to3072 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardEnableVlan2049to3072.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlan2049to3072.setDescription('A list of vlans from 2049 to 3072.')
rlSourceGuardEnableVlan3073to4094 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSourceGuardEnableVlan3073to4094.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardEnableVlan3073to4094.setDescription('A list of vlans from 3073 to 4094.')
rlSourceGuardActivePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 215, 6, 7), )
if mibBuilder.loadTexts: rlSourceGuardActivePolicyTable.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyTable.setDescription('The table specifies Source Guard Active Policy per port and VLAN.')
rlSourceGuardActivePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1), ).setIndexNames((0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardActivePolicyIfIndex"), (0, "RADLAN-IPV6FHS-MIB", "rlSourceGuardActivePolicyVlanTag"))
if mibBuilder.loadTexts: rlSourceGuardActivePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyEntry.setDescription('The row definition for this table.')
rlSourceGuardActivePolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlSourceGuardActivePolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyIfIndex.setDescription("The port's interface index.")
rlSourceGuardActivePolicyVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: rlSourceGuardActivePolicyVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyVlanTag.setDescription('The VLAN identifier.')
rlSourceGuardActivePolicyNamePort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardActivePolicyNamePort.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyNamePort.setDescription('The Source guard policy name attached to given interface.')
rlSourceGuardActivePolicyNameVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardActivePolicyNameVlan.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyNameVlan.setDescription('The Source Guard policy name attached to given vlan.')
rlSourceGuardActivePolicyTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1, 5), RlIpv6FhsSettingStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardActivePolicyTrusted.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyTrusted.setDescription('Indicates whether policy defines trusted functionality')
rlSourceGuardActivePolicyTrustedType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 215, 6, 7, 1, 6), RlIpv6FhsSettingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSourceGuardActivePolicyTrustedType.setStatus('current')
if mibBuilder.loadTexts: rlSourceGuardActivePolicyTrustedType.setDescription('rlSourceGuardActivePolicyNamePort setting type.')
rlSrcGuardMessageDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 237)).setObjects(("RADLAN-DEVICEPARAMS-MIB", "rndErrorDesc"), ("RADLAN-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlSrcGuardMessageDropTrap.setStatus('current')
if mibBuilder.loadTexts: rlSrcGuardMessageDropTrap.setDescription('Warning trap indicating that IPv6 Source Guard has dropped a message.')
mibBuilder.exportSymbols("RADLAN-IPV6FHS-MIB", rlNbrBindingIntegrityBindingPrefixAddress=rlNbrBindingIntegrityBindingPrefixAddress, rlDhcpGuardPolicyMatchReplyAddrSpecified=rlDhcpGuardPolicyMatchReplyAddrSpecified, rlDhcpGuardPolicyVlan2049to3072=rlDhcpGuardPolicyVlan2049to3072, rlRaGuardVlanPolicyTable=rlRaGuardVlanPolicyTable, rlSourceGuardPortPolicyRowStatus=rlSourceGuardPortPolicyRowStatus, rlNdInspectionPortPolicyName=rlNdInspectionPortPolicyName, rlNdInspectionPortPolicyVlan1025to2048=rlNdInspectionPortPolicyVlan1025to2048, rlNdInspectionActivePolicyTable=rlNdInspectionActivePolicyTable, rlDhcpGuardPolicyPortVlan2049to3072=rlDhcpGuardPolicyPortVlan2049to3072, rlFirstHopSecCountersDropNdInspectionUnauthorizedSecLevel=rlFirstHopSecCountersDropNdInspectionUnauthorizedSecLevel, rlRaGuardOtherConfigFlag=rlRaGuardOtherConfigFlag, rlFirstHopSecCountersEntry=rlFirstHopSecCountersEntry, rlFirstHopSecPolicyPortVlan1025to2048=rlFirstHopSecPolicyPortVlan1025to2048, rlRaGuardPolicyRouterPrefMin=rlRaGuardPolicyRouterPrefMin, rlNbrBindingIntegrityEnableVlanEntry=rlNbrBindingIntegrityEnableVlanEntry, rlFirstHopSecPortPolicyRowStatus=rlFirstHopSecPortPolicyRowStatus, rlNdInspectionVlanPolicyName=rlNdInspectionVlanPolicyName, rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimitType=rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimitType, rlDhcpGuardEnableVlan1to1024=rlDhcpGuardEnableVlan1to1024, rlSourceGuardPolicyVlanTable=rlSourceGuardPolicyVlanTable, rlNbrBindingIntegrityBindingPrefixEntry=rlNbrBindingIntegrityBindingPrefixEntry, rlFirstHopSecCountersRxDhcpReply=rlFirstHopSecCountersRxDhcpReply, rlDhcpGuardActivePolicyEntry=rlDhcpGuardActivePolicyEntry, rlNdInspectionPolicyPortVlan1025to2048=rlNdInspectionPolicyPortVlan1025to2048, rlRaGuardActivePolicyVlanTag=rlRaGuardActivePolicyVlanTag, rlNbrBindingIntegrityEnableVlanTable=rlNbrBindingIntegrityEnableVlanTable, rlDhcpGuardMessageDropTrap=rlDhcpGuardMessageDropTrap, rlDhcpGuardPolicyPrefMin=rlDhcpGuardPolicyPrefMin, rlRaGuardPortPolicyName=rlRaGuardPortPolicyName, rlFirstHopSecCountersDropNdpRS=rlFirstHopSecCountersDropNdpRS, rlDhcpGuardPolicyPortTable=rlDhcpGuardPolicyPortTable, rlFirstHopSecCountersDropRaGuardUnauthorizedSourceAddress=rlFirstHopSecCountersDropRaGuardUnauthorizedSourceAddress, rlFirstHopSecPortPolicyVlan1to1024=rlFirstHopSecPortPolicyVlan1to1024, rlRaGuardPolicyVlanPolicyName=rlRaGuardPolicyVlanPolicyName, rlFirstHopSecErrorCountersIndex=rlFirstHopSecErrorCountersIndex, rlFirstHopSecPolicyPortVlan3073to4094=rlFirstHopSecPolicyPortVlan3073to4094, rlFirstHopSecPolicyPortTable=rlFirstHopSecPolicyPortTable, rlNbrBindingIntegrityActivePolicyAddressConfigType=rlNbrBindingIntegrityActivePolicyAddressConfigType, rlNdInspectionActivePolicyIfIndex=rlNdInspectionActivePolicyIfIndex, rlDhcpGuardEnableVlanTable=rlDhcpGuardEnableVlanTable, rlNbrBindingIntegrityPolicyMaxEntriesInterfaceLimit=rlNbrBindingIntegrityPolicyMaxEntriesInterfaceLimit, rlRaGuardActivePolicyHopLimitMax=rlRaGuardActivePolicyHopLimitMax, rlFirstHopSecCountersDropRaGuardUnauthorizedAdvertisedPrefix=rlFirstHopSecCountersDropRaGuardUnauthorizedAdvertisedPrefix, rlFirstHopSecCountersDropRaGuardUnauthorizedManagedConfigFlag=rlFirstHopSecCountersDropRaGuardUnauthorizedManagedConfigFlag, rlRaGuardPolicyVlanTable=rlRaGuardPolicyVlanTable, rlFirstHopSecPolicyRowStatus=rlFirstHopSecPolicyRowStatus, rlSourceGuardPortPolicyVlan2049to3072=rlSourceGuardPortPolicyVlan2049to3072, rlDhcpGuardPrefMin=rlDhcpGuardPrefMin, rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimit=rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimit, rlNbrBindingIntegrityActivePolicyNamePort=rlNbrBindingIntegrityActivePolicyNamePort, rlNbrBindingIntegrityEnableVlan3073to4094=rlNbrBindingIntegrityEnableVlan3073to4094, rlRaGuardEnableVlan3073to4094=rlRaGuardEnableVlan3073to4094, rlRaGuardActivePolicyNameVlan=rlRaGuardActivePolicyNameVlan, rlFirstHopSecPortPolicyIfIndex=rlFirstHopSecPortPolicyIfIndex, rlNbrBindingIntegrityPolicyTable=rlNbrBindingIntegrityPolicyTable, rlRaGuardActivePolicyMatchRaAddrType=rlRaGuardActivePolicyMatchRaAddrType, rlNbrBindingIntegrityPolicyAddressConfig=rlNbrBindingIntegrityPolicyAddressConfig, rlNbrBindingIntegrityPolicyVlan1025to2048=rlNbrBindingIntegrityPolicyVlan1025to2048, rlRaGuardPolicyHopLimitMax=rlRaGuardPolicyHopLimitMax, rlNbrBindingIntegrityClearPrefixAddressType=rlNbrBindingIntegrityClearPrefixAddressType, rlFirstHopSecCountersTable=rlFirstHopSecCountersTable, rlNdInspectionActivePolicyDropUnsecured=rlNdInspectionActivePolicyDropUnsecured, rlFirstHopSecErrorCountersNPTOverflow=rlFirstHopSecErrorCountersNPTOverflow, rlRaGuardEnableVlan1025to2048=rlRaGuardEnableVlan1025to2048, rlNbrBindingIntegrity=rlNbrBindingIntegrity, rlRaGuardPortPolicyTable=rlRaGuardPortPolicyTable, rlDhcpGuardActivePolicyPrefMinType=rlDhcpGuardActivePolicyPrefMinType, rlFirstHopSecPortPolicyName=rlFirstHopSecPortPolicyName, rlRaGuardEnableVlanTable=rlRaGuardEnableVlanTable, rlFirstHopSecCountersDropDhcpGuardUnauthorizedAssignedAddress=rlFirstHopSecCountersDropDhcpGuardUnauthorizedAssignedAddress, rlFirstHopSecCountersRxNdpRS=rlFirstHopSecCountersRxNdpRS, rlDhcpGuardActivePolicyTable=rlDhcpGuardActivePolicyTable, rlNbrBindingIntegrityClearPrefixVlanTag=rlNbrBindingIntegrityClearPrefixVlanTag, rlNbrBindingIntegrityActivePolicyBindingLifetimeType=rlNbrBindingIntegrityActivePolicyBindingLifetimeType, rlFirstHopSecPortPolicyVlan1025to2048=rlFirstHopSecPortPolicyVlan1025to2048, rlFirstHopSecErrorCountersEntry=rlFirstHopSecErrorCountersEntry, rlDhcpGuardPolicyEntry=rlDhcpGuardPolicyEntry, rlNbrBindingIntegrityPortPolicyIfIndex=rlNbrBindingIntegrityPortPolicyIfIndex, rlFirstHopSecPolicyVlanPolicyName=rlFirstHopSecPolicyVlanPolicyName, rlNdInspectionEnableVlanIndex=rlNdInspectionEnableVlanIndex, rlDhcpGuardActivePolicyNameVlan=rlDhcpGuardActivePolicyNameVlan, rlNbrBindingIntegrityActivePolicyDeviceRole=rlNbrBindingIntegrityActivePolicyDeviceRole, rlDhcpGuardActivePolicyPrefMaxType=rlDhcpGuardActivePolicyPrefMaxType, rlNdInspectionPolicyVlanEntry=rlNdInspectionPolicyVlanEntry, rlRaGuardActivePolicyManagedConfigFlagType=rlRaGuardActivePolicyManagedConfigFlagType, rlSrcGuardTCAMOverflowTrap=rlSrcGuardTCAMOverflowTrap, rlNdInspectionPolicySecLevelMin=rlNdInspectionPolicySecLevelMin, rlRaGuardPolicyHopLimitMin=rlRaGuardPolicyHopLimitMin, rlNdInspectionPolicyVlanPolicyName=rlNdInspectionPolicyVlanPolicyName, rlFirstHopSecClearCounters=rlFirstHopSecClearCounters, rlRaGuardActivePolicyTable=rlRaGuardActivePolicyTable, rlRaGuardPolicyPortVlan1to1024=rlRaGuardPolicyPortVlan1to1024, rlNbrBindingIntegrityPolicyLogBinding=rlNbrBindingIntegrityPolicyLogBinding, rlNbrBindingIntegrityBindingMacAddress=rlNbrBindingIntegrityBindingMacAddress, rlRaGuardActivePolicyHopLimitMinType=rlRaGuardActivePolicyHopLimitMinType, rlFirstHopSecCountersRxDhcpDecline=rlFirstHopSecCountersRxDhcpDecline, rlRaGuardVlanPolicyName=rlRaGuardVlanPolicyName, rlRaGuardActivePolicyMatchRaAddr=rlRaGuardActivePolicyMatchRaAddr, rlDhcpGuardEnableVlan3073to4094=rlDhcpGuardEnableVlan3073to4094, rlRaGuardMessageDropTrap=rlRaGuardMessageDropTrap, rlDhcpGuardVlanPolicyName=rlDhcpGuardVlanPolicyName, rlDhcpGuardActivePolicyIfIndex=rlDhcpGuardActivePolicyIfIndex, rlFirstHopSecLogDrop=rlFirstHopSecLogDrop, rlFirstHopSecVlanPolicyTable=rlFirstHopSecVlanPolicyTable, rlFirstHopSecCountersIfIndex=rlFirstHopSecCountersIfIndex, rlSourceGuardEnableVlan1025to2048=rlSourceGuardEnableVlan1025to2048, rlRaGuardActivePolicyMatchRaPrefixesType=rlRaGuardActivePolicyMatchRaPrefixesType, rlFirstHopSecPolicyPortEntry=rlFirstHopSecPolicyPortEntry, rlNbrBindingIntegrityBindingPrefixVlanTag=rlNbrBindingIntegrityBindingPrefixVlanTag, rlNdInspectionActivePolicySecLevelMin=rlNdInspectionActivePolicySecLevelMin, rlFirstHopSecEnableVlan1025to2048=rlFirstHopSecEnableVlan1025to2048, rlSourceGuardPortPolicyTable=rlSourceGuardPortPolicyTable, rlNbrBindingIntegrityEntriesNum=rlNbrBindingIntegrityEntriesNum, rlNbrBindingIntegrityBindingVlanTag=rlNbrBindingIntegrityBindingVlanTag, rlFirstHopSecEnableVlanIndex=rlFirstHopSecEnableVlanIndex, rlNbrBindingIntegrityPolicyPortName=rlNbrBindingIntegrityPolicyPortName, rlFirstHopSecCountersDropSourceGuardNoBinding=rlFirstHopSecCountersDropSourceGuardNoBinding, rlNbrBindingIntegrityPolicyRowStatus=rlNbrBindingIntegrityPolicyRowStatus, rlNbrBindingIntegrityEntryDeletedTrap=rlNbrBindingIntegrityEntryDeletedTrap, rlNbrBindingIntegrityPolicyVlanEntry=rlNbrBindingIntegrityPolicyVlanEntry, rlNbrBindingIntegrityPrefixValidation=rlNbrBindingIntegrityPrefixValidation, rlSourceGuardPortPolicyVlan1025to2048=rlSourceGuardPortPolicyVlan1025to2048, rlNdInspectionVlanPolicyVlanTag=rlNdInspectionVlanPolicyVlanTag, rlNdInspectionVlanPolicyTable=rlNdInspectionVlanPolicyTable, rlNbrBindingIntegrityEntryAnchorChangeTrap=rlNbrBindingIntegrityEntryAnchorChangeTrap, rlRaGuardEnableVlan1to1024=rlRaGuardEnableVlan1to1024, rlNbrBindingIntegrityActivePolicyLogBindingType=rlNbrBindingIntegrityActivePolicyLogBindingType, rlFirstHopSecCountersDropDhcpGuardUnauthorizedServerPreference=rlFirstHopSecCountersDropDhcpGuardUnauthorizedServerPreference, rlFirstHopSecCountersRxDhcpAdverise=rlFirstHopSecCountersRxDhcpAdverise, rlRaGuardPolicyMatchRaPrefixes=rlRaGuardPolicyMatchRaPrefixes, rlNbrBindingIntegrityPortPolicyVlan1025to2048=rlNbrBindingIntegrityPortPolicyVlan1025to2048, rlNbrBindingIntegrityActivePolicyNameVlan=rlNbrBindingIntegrityActivePolicyNameVlan, rlNbrBindingIntegrityBindingTCAMOverflow=rlNbrBindingIntegrityBindingTCAMOverflow, rlDhcpGuardPolicyPortIfIndex=rlDhcpGuardPolicyPortIfIndex, rlDhcpGuardActivePolicyMatchReplyAddrType=rlDhcpGuardActivePolicyMatchReplyAddrType, rlFirstHopSecCountersDropRaGuardUnauthorizedMessage=rlFirstHopSecCountersDropRaGuardUnauthorizedMessage, rlSourceGuardEnableVlan3073to4094=rlSourceGuardEnableVlan3073to4094, rlFirstHopSecEnableVlan2049to3072=rlFirstHopSecEnableVlan2049to3072, rlNdInspectionPolicyTable=rlNdInspectionPolicyTable, rlNdInspectionPolicyRowStatus=rlNdInspectionPolicyRowStatus, rlRaGuardPolicyPortIfIndex=rlRaGuardPolicyPortIfIndex, rlNbrBindingIntegrityPortPolicyVlan3073to4094=rlNbrBindingIntegrityPortPolicyVlan3073to4094, rlRaGuardPolicyRowStatus=rlRaGuardPolicyRowStatus, rlFirstHopSecVlanPolicyVlanTag=rlFirstHopSecVlanPolicyVlanTag, rlNbrBindingIntegrityPolicyMaxEntriesVlanLimit=rlNbrBindingIntegrityPolicyMaxEntriesVlanLimit, rlDhcpGuardPolicyVlanTable=rlDhcpGuardPolicyVlanTable, rlSourceGuardVlanPolicyEntry=rlSourceGuardVlanPolicyEntry, rlSrcGuardMessageDropTrap=rlSrcGuardMessageDropTrap, rlNdInspectionVlanPolicyRowStatus=rlNdInspectionVlanPolicyRowStatus, rlDhcpGuardEnableVlan1025to2048=rlDhcpGuardEnableVlan1025to2048, rlFirstHopSecCountersDropDhcpReply=rlFirstHopSecCountersDropDhcpReply, rlDhcpGuardPolicyVlan1to1024=rlDhcpGuardPolicyVlan1to1024, rlSourceGuardPolicyPortEntry=rlSourceGuardPolicyPortEntry, rlDhcpGuardActivePolicyMatchServerAddrType=rlDhcpGuardActivePolicyMatchServerAddrType, rlFirstHopSecPortPolicyVlan2049to3072=rlFirstHopSecPortPolicyVlan2049to3072, rlRaGuardPortPolicyIfIndex=rlRaGuardPortPolicyIfIndex, rlFirstHopSecPolicyVlanEntry=rlFirstHopSecPolicyVlanEntry, rlSourceGuardPolicyPortVlan3073to4094=rlSourceGuardPolicyPortVlan3073to4094, rlNdInspectionPolicyValidateSrcMac=rlNdInspectionPolicyValidateSrcMac, rlNbrBindingIntegrityPolicyMaxEntriesMacLimit=rlNbrBindingIntegrityPolicyMaxEntriesMacLimit, rlFirstHopSecActivePolicyNamePort=rlFirstHopSecActivePolicyNamePort, rlDhcpGuardVlanPolicyVlanTag=rlDhcpGuardVlanPolicyVlanTag, rlNbrBindingIntegrityPolicyPortEntry=rlNbrBindingIntegrityPolicyPortEntry, rlNbrBindingIntegrityBindingPrefixTable=rlNbrBindingIntegrityBindingPrefixTable, rlNdInspectionActivePolicyDropUnsecuredType=rlNdInspectionActivePolicyDropUnsecuredType, rlSourceGuardPolicyPortName=rlSourceGuardPolicyPortName, rlDhcpGuardPolicyPortVlan3073to4094=rlDhcpGuardPolicyPortVlan3073to4094, rlFirstHopSecCountersDropNdpRedirect=rlFirstHopSecCountersDropNdpRedirect, rlFirstHopSecActivePolicyNameVlan=rlFirstHopSecActivePolicyNameVlan, rlSourceGuardVlanPolicyName=rlSourceGuardVlanPolicyName, rlFirstHopSecCountersDropDhcpReconfigure=rlFirstHopSecCountersDropDhcpReconfigure, rlNbrBindingIntegrityClearEntry=rlNbrBindingIntegrityClearEntry, rlSourceGuard=rlSourceGuard, rlDhcpGuardActivePolicyMatchReplyAddr=rlDhcpGuardActivePolicyMatchReplyAddr, rlNdInspectionActivePolicyValidateSrcMacType=rlNdInspectionActivePolicyValidateSrcMacType, rlFirstHopSecVlanPolicyRowStatus=rlFirstHopSecVlanPolicyRowStatus, rlNbrBindingIntegrityPolicyVlan2049to3072=rlNbrBindingIntegrityPolicyVlan2049to3072, rlFirstHopSecErrorCountersNBTOverflow=rlFirstHopSecErrorCountersNBTOverflow, rlRaGuardRouterPrefMax=rlRaGuardRouterPrefMax, rlNbrBindingIntegrityOverflowTrap=rlNbrBindingIntegrityOverflowTrap, rlDhcpGuardPortPolicyEntry=rlDhcpGuardPortPolicyEntry, rlSourceGuardEnableVlan2049to3072=rlSourceGuardEnableVlan2049to3072, rlNdInspectionPolicyPortVlan2049to3072=rlNdInspectionPolicyPortVlan2049to3072, rlRaGuardPolicyVlanEntry=rlRaGuardPolicyVlanEntry, rlNbrBindingIntegrityPortPolicyVlan2049to3072=rlNbrBindingIntegrityPortPolicyVlan2049to3072, rlRaGuardPortPolicyRowStatus=rlRaGuardPortPolicyRowStatus, rlDhcpGuardActivePolicyDeviceRole=rlDhcpGuardActivePolicyDeviceRole, rlNdInspectionPolicyPortVlan3073to4094=rlNdInspectionPolicyPortVlan3073to4094, rlNdInspectionPortPolicyVlan3073to4094=rlNdInspectionPortPolicyVlan3073to4094, rlDhcpGuardPolicyPrefMax=rlDhcpGuardPolicyPrefMax, rlNdInspectionEnableVlan3073to4094=rlNdInspectionEnableVlan3073to4094, rlNbrBindingIntegrityPolicyPrefixValidation=rlNbrBindingIntegrityPolicyPrefixValidation, rlFirstHopSecCountersRxDhcpReconfigure=rlFirstHopSecCountersRxDhcpReconfigure, rlNbrBindingIntegrityLogBinding=rlNbrBindingIntegrityLogBinding, rlDhcpGuardPolicyVlanPolicyName=rlDhcpGuardPolicyVlanPolicyName, rlFirstHopSecCountersDropNbrBindingIntegrityIllegalDhcpv6=rlFirstHopSecCountersDropNbrBindingIntegrityIllegalDhcpv6, rlDhcpGuardPrefMax=rlDhcpGuardPrefMax, rlNbrBindingIntegrityPolicyEntry=rlNbrBindingIntegrityPolicyEntry, rlSourceGuardPortPolicyIfIndex=rlSourceGuardPortPolicyIfIndex, rlNdInspectionPolicyEntry=rlNdInspectionPolicyEntry, rlNbrBindingIntegrityClearBindMethod=rlNbrBindingIntegrityClearBindMethod, rlFirstHopSecPortPolicyVlan3073to4094=rlFirstHopSecPortPolicyVlan3073to4094, rlFirstHopSecPolicyVlan2049to3072=rlFirstHopSecPolicyVlan2049to3072, rlFirstHopSec=rlFirstHopSec, rlNdInspectionEnableVlan2049to3072=rlNdInspectionEnableVlan2049to3072, rlDhcpGuardEnableVlanEntry=rlDhcpGuardEnableVlanEntry, rlNbrBindingIntegrityPolicyVlan3073to4094=rlNbrBindingIntegrityPolicyVlan3073to4094, rlNbrBindingIntegrityPortPolicyName=rlNbrBindingIntegrityPortPolicyName, rlNbrBindingIntegrityClearPrefixEntry=rlNbrBindingIntegrityClearPrefixEntry, rlFirstHopSecPolicyTable=rlFirstHopSecPolicyTable, rlNbrBindingIntegrityBindingState=rlNbrBindingIntegrityBindingState, rlNbrBindingIntegrityClearPrefixIndex=rlNbrBindingIntegrityClearPrefixIndex, rlNdInspectionPolicyPortName=rlNdInspectionPolicyPortName, rlRaGuardPolicyVlan3073to4094=rlRaGuardPolicyVlan3073to4094, rlDhcpGuardActivePolicyPrefMin=rlDhcpGuardActivePolicyPrefMin, rlNbrBindingIntegrityPolicyPortTable=rlNbrBindingIntegrityPolicyPortTable, rlNbrBindingIntegrityEnableVlanIndex=rlNbrBindingIntegrityEnableVlanIndex, rlNdInspectionPolicyVlan3073to4094=rlNdInspectionPolicyVlan3073to4094, rlSourceGuardEnableVlanTable=rlSourceGuardEnableVlanTable, rlNbrBindingIntegrityBindingRowStatus=rlNbrBindingIntegrityBindingRowStatus, rlRaGuardPortPolicyVlan1025to2048=rlRaGuardPortPolicyVlan1025to2048, rlNdInspectionActivePolicyNamePort=rlNdInspectionActivePolicyNamePort, rlDhcpGuardPolicyRowStatus=rlDhcpGuardPolicyRowStatus, rlFirstHopSecActivePolicyLogDropType=rlFirstHopSecActivePolicyLogDropType, rlNdInspectionEnableVlanEntry=rlNdInspectionEnableVlanEntry, rlRaGuardEnableVlanEntry=rlRaGuardEnableVlanEntry, rlFirstHopSecVlanPolicyName=rlFirstHopSecVlanPolicyName, rlRaGuardActivePolicyDeviceRole=rlRaGuardActivePolicyDeviceRole, rlDhcpGuardPortPolicyVlan1to1024=rlDhcpGuardPortPolicyVlan1to1024, rlRaGuardPolicyDeviceRole=rlRaGuardPolicyDeviceRole, rlNbrBindingIntegrityEntryAddedTrap=rlNbrBindingIntegrityEntryAddedTrap, rlDhcpGuardActivePolicyNamePort=rlDhcpGuardActivePolicyNamePort, rlSourceGuardPolicyPortVlan2049to3072=rlSourceGuardPolicyPortVlan2049to3072, rlNbrBindingIntegrityBindingTable=rlNbrBindingIntegrityBindingTable, rlSourceGuardPolicyVlan1to1024=rlSourceGuardPolicyVlan1to1024, rlNbrBindingIntegrityClearSourceAddressType=rlNbrBindingIntegrityClearSourceAddressType, rlSourceGuardPolicyEntry=rlSourceGuardPolicyEntry, rlRaGuardPolicyPortVlan2049to3072=rlRaGuardPolicyPortVlan2049to3072, rlSourceGuardPolicyVlanPolicyName=rlSourceGuardPolicyVlanPolicyName, rlNdInspectionPortPolicyEntry=rlNdInspectionPortPolicyEntry, rlSourceGuardPortPolicyVlan1to1024=rlSourceGuardPortPolicyVlan1to1024, rlRaGuardPolicyVlan2049to3072=rlRaGuardPolicyVlan2049to3072, rlDhcpGuardPolicyVlan1025to2048=rlDhcpGuardPolicyVlan1025to2048, rlSourceGuardPolicyPortVlan1to1024=rlSourceGuardPolicyPortVlan1to1024, rlNdInspectionPortPolicyVlan2049to3072=rlNdInspectionPortPolicyVlan2049to3072, rlSourceGuardVlanPolicyRowStatus=rlSourceGuardVlanPolicyRowStatus, rlFirstHopSecCountersDropRaGuardUnauthorizedRouterPreference=rlFirstHopSecCountersDropRaGuardUnauthorizedRouterPreference, rlFirstHopSecCountersDropNdInspectionUnsecureMessage=rlFirstHopSecCountersDropNdInspectionUnsecureMessage, rlNbrBindingIntegrityMaxEntriesInterfaceLimit=rlNbrBindingIntegrityMaxEntriesInterfaceLimit, rlSourceGuardActivePolicyTrustedType=rlSourceGuardActivePolicyTrustedType, rlNbrBindingIntegrityVlanPolicyTable=rlNbrBindingIntegrityVlanPolicyTable, rlNbrBindingIntegrityBindingPrefixExpiryTime=rlNbrBindingIntegrityBindingPrefixExpiryTime, rlDhcpGuardPolicyDeviceRole=rlDhcpGuardPolicyDeviceRole, rlFirstHopSecPolicyVlan1to1024=rlFirstHopSecPolicyVlan1to1024)
mibBuilder.exportSymbols("RADLAN-IPV6FHS-MIB", rlNdInspectionPolicyPortIfIndex=rlNdInspectionPolicyPortIfIndex, rlDhcpGuardPolicyVlanEntry=rlDhcpGuardPolicyVlanEntry, rlFirstHopSecPolicyPortVlan2049to3072=rlFirstHopSecPolicyPortVlan2049to3072, rlNbrBindingIntegrityPolicyPortVlan1025to2048=rlNbrBindingIntegrityPolicyPortVlan1025to2048, rlFirstHopSecCountersDropNdpNS=rlFirstHopSecCountersDropNdpNS, rlFirstHopSecPolicyVlan1025to2048=rlFirstHopSecPolicyVlan1025to2048, rlSourceGuardPolicyVlan3073to4094=rlSourceGuardPolicyVlan3073to4094, rlDhcpGuardPortPolicyTable=rlDhcpGuardPortPolicyTable, rlRaGuardHopLimitMax=rlRaGuardHopLimitMax, rlDhcpGuardVlanPolicyRowStatus=rlDhcpGuardVlanPolicyRowStatus, rlSourceGuardPolicyRowStatus=rlSourceGuardPolicyRowStatus, rlRaGuardPolicyTable=rlRaGuardPolicyTable, rlNbrBindingIntegrityPolicyPortVlan1to1024=rlNbrBindingIntegrityPolicyPortVlan1to1024, rlRaGuardActivePolicyEntry=rlRaGuardActivePolicyEntry, rlNdInspectionPolicyPortTable=rlNdInspectionPolicyPortTable, rlNdInspectionActivePolicyValidateSrcMac=rlNdInspectionActivePolicyValidateSrcMac, rlSourceGuardEnableVlanEntry=rlSourceGuardEnableVlanEntry, rlNbrBindingIntegrityBindingPrefixOrigin=rlNbrBindingIntegrityBindingPrefixOrigin, rlFirstHopSecCountersDropDhcpGuardUnauthorizedMessage=rlFirstHopSecCountersDropDhcpGuardUnauthorizedMessage, rlRaGuardPortPolicyVlan2049to3072=rlRaGuardPortPolicyVlan2049to3072, rlFirstHopSecEnableVlanTable=rlFirstHopSecEnableVlanTable, rlRaGuardActivePolicyRouterPrefMinType=rlRaGuardActivePolicyRouterPrefMinType, rlNbrBindingIntegrityMaxEntriesVlanLimit=rlNbrBindingIntegrityMaxEntriesVlanLimit, rlSourceGuardPolicyPortIfIndex=rlSourceGuardPolicyPortIfIndex, rlNdInspectionVlanPolicyEntry=rlNdInspectionVlanPolicyEntry, rlNbrBindingIntegrityEnableVlan1to1024=rlNbrBindingIntegrityEnableVlan1to1024, rlSourceGuardVlanPolicyVlanTag=rlSourceGuardVlanPolicyVlanTag, rlNbrBindingIntegrityEntryStateChangeTrap=rlNbrBindingIntegrityEntryStateChangeTrap, rlDhcpGuardActivePolicyVlanTag=rlDhcpGuardActivePolicyVlanTag, rlRaGuardActivePolicyHopLimitMaxType=rlRaGuardActivePolicyHopLimitMaxType, rlNbrBindingIntegrityBindingPrefixRowStatus=rlNbrBindingIntegrityBindingPrefixRowStatus, rlFirstHopSecCountersRxDhcpRelayReply=rlFirstHopSecCountersRxDhcpRelayReply, rlDhcpGuardPortPolicyIfIndex=rlDhcpGuardPortPolicyIfIndex, rlFirstHopSecErrorCountersTable=rlFirstHopSecErrorCountersTable, rlFirstHopSecActivePolicyLogDrop=rlFirstHopSecActivePolicyLogDrop, rlRaGuardPortPolicyVlan1to1024=rlRaGuardPortPolicyVlan1to1024, rlRaGuardPolicyName=rlRaGuardPolicyName, rlNdInspectionPolicyDropUnsecured=rlNdInspectionPolicyDropUnsecured, rlIpv6Fhs=rlIpv6Fhs, rlNbrBindingIntegrityClearPrefixRowStatus=rlNbrBindingIntegrityClearPrefixRowStatus, rlDhcpGuardPolicyVlan3073to4094=rlDhcpGuardPolicyVlan3073to4094, rlFirstHopSecActivePolicyIfIndex=rlFirstHopSecActivePolicyIfIndex, rlNbrBindingIntegrityPrefixEntriesNum=rlNbrBindingIntegrityPrefixEntriesNum, rlDhcpGuardPortPolicyVlan1025to2048=rlDhcpGuardPortPolicyVlan1025to2048, rlFirstHopSecPortPolicyTable=rlFirstHopSecPortPolicyTable, rlFirstHopSecEnableVlanEntry=rlFirstHopSecEnableVlanEntry, rlSourceGuardPolicyVlan1025to2048=rlSourceGuardPolicyVlan1025to2048, rlSourceGuardPolicyPortVlan1025to2048=rlSourceGuardPolicyPortVlan1025to2048, rlNbrBindingIntegrityPortPolicyTable=rlNbrBindingIntegrityPortPolicyTable, rlRaGuardActivePolicyManagedConfigFlag=rlRaGuardActivePolicyManagedConfigFlag, rlNbrBindingIntegrityClearMacAddress=rlNbrBindingIntegrityClearMacAddress, rlRaGuardActivePolicyDeviceRoleType=rlRaGuardActivePolicyDeviceRoleType, rlNdInspectionPolicyVlanTable=rlNdInspectionPolicyVlanTable, rlRaGuardPolicyMatchRaPrefixesSpecified=rlRaGuardPolicyMatchRaPrefixesSpecified, rlNbrBindingIntegrityActivePolicyPrefixValidation=rlNbrBindingIntegrityActivePolicyPrefixValidation, rlNdInspectionPolicyVlan1025to2048=rlNdInspectionPolicyVlan1025to2048, rlSourceGuardPolicyPortTable=rlSourceGuardPolicyPortTable, rlNbrBindingIntegrityVlanPolicyEntry=rlNbrBindingIntegrityVlanPolicyEntry, rlDhcpGuardActivePolicyPrefMax=rlDhcpGuardActivePolicyPrefMax, rlRaGuardPolicyVlan1to1024=rlRaGuardPolicyVlan1to1024, rlNbrBindingIntegrityClearDhcpRecoveryFile=rlNbrBindingIntegrityClearDhcpRecoveryFile, rlRaGuardPolicyEntry=rlRaGuardPolicyEntry, rlNbrBindingIntegrityMaxEntriesMacLimit=rlNbrBindingIntegrityMaxEntriesMacLimit, rlRaGuardActivePolicyRouterPrefMin=rlRaGuardActivePolicyRouterPrefMin, rlNbrBindingIntegrityClearSourceAddress=rlNbrBindingIntegrityClearSourceAddress, rlDhcpGuardPortPolicyVlan3073to4094=rlDhcpGuardPortPolicyVlan3073to4094, rlSourceGuardActivePolicyNameVlan=rlSourceGuardActivePolicyNameVlan, rlSourceGuardPolicyTable=rlSourceGuardPolicyTable, rlFirstHopSecPolicyLogDrop=rlFirstHopSecPolicyLogDrop, rlNbrBindingIntegrityActivePolicyBindingLifetime=rlNbrBindingIntegrityActivePolicyBindingLifetime, rlFirstHopSecCountersRxNdpNS=rlFirstHopSecCountersRxNdpNS, rlNbrBindingIntegrityClearRowStatus=rlNbrBindingIntegrityClearRowStatus, rlNdInspectionEnableVlan1to1024=rlNdInspectionEnableVlan1to1024, rlDhcpGuardVlanPolicyTable=rlDhcpGuardVlanPolicyTable, rlNbrBindingIntegrityActivePolicyAddressConfig=rlNbrBindingIntegrityActivePolicyAddressConfig, rlDhcpGuardPolicyPortVlan1to1024=rlDhcpGuardPolicyPortVlan1to1024, rlNbrBindingIntegrityClearIndex=rlNbrBindingIntegrityClearIndex, rlFirstHopSecCountersDropDhcpRelease=rlFirstHopSecCountersDropDhcpRelease, rlNbrBindingIntegrityBindingPrefixAllowAutoconfig=rlNbrBindingIntegrityBindingPrefixAllowAutoconfig, rlFirstHopSecEnableVlan1to1024=rlFirstHopSecEnableVlan1to1024, rlRaGuardVlanPolicyVlanTag=rlRaGuardVlanPolicyVlanTag, rlNbrBindingIntegrityVlanPolicyRowStatus=rlNbrBindingIntegrityVlanPolicyRowStatus, rlNbrBindingIntegrityPortPolicyVlan1to1024=rlNbrBindingIntegrityPortPolicyVlan1to1024, rlRaGuardActivePolicyHopLimitMin=rlRaGuardActivePolicyHopLimitMin, rlDhcpGuardPolicyPortEntry=rlDhcpGuardPolicyPortEntry, rlRaGuardHopLimitMin=rlRaGuardHopLimitMin, rlFirstHopSecErrorCountersTcamOverflow=rlFirstHopSecErrorCountersTcamOverflow, rlNbrBindingIntegrityPolicyName=rlNbrBindingIntegrityPolicyName, RlIpv6FhsSettingStatusType=RlIpv6FhsSettingStatusType, rlRaGuard=rlRaGuard, rlNdInspectionDropUnsecured=rlNdInspectionDropUnsecured, rlRaGuardEnableVlan2049to3072=rlRaGuardEnableVlan2049to3072, rlNbrBindingIntegrityEntryLimitReachTrap=rlNbrBindingIntegrityEntryLimitReachTrap, rlFirstHopSecPolicyPortIfIndex=rlFirstHopSecPolicyPortIfIndex, rlNdInspectionActivePolicyNameVlan=rlNdInspectionActivePolicyNameVlan, rlNbrBindingIntegrityBindingPrefixAddressType=rlNbrBindingIntegrityBindingPrefixAddressType, rlSourceGuardPortPolicyVlan3073to4094=rlSourceGuardPortPolicyVlan3073to4094, rlNbrBindingIntegrityBindingEntry=rlNbrBindingIntegrityBindingEntry, rlSourceGuardActivePolicyEntry=rlSourceGuardActivePolicyEntry, rlDhcpGuardPortPolicyRowStatus=rlDhcpGuardPortPolicyRowStatus, rlFirstHopSecCountersDropNdpNA=rlFirstHopSecCountersDropNdpNA, rlRaGuardActivePolicyMatchRaPrefixes=rlRaGuardActivePolicyMatchRaPrefixes, rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimitType=rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimitType, rlDhcpGuardVlanPolicyEntry=rlDhcpGuardVlanPolicyEntry, rlNdInspectionActivePolicyDeviceRoleType=rlNdInspectionActivePolicyDeviceRoleType, rlFirstHopSecCountersDropDhcpAdverise=rlFirstHopSecCountersDropDhcpAdverise, rlNdInspectionActivePolicyEntry=rlNdInspectionActivePolicyEntry, rlSourceGuardEnableVlanIndex=rlSourceGuardEnableVlanIndex, rlDhcpGuardPolicyName=rlDhcpGuardPolicyName, rlDhcpGuardActivePolicyMatchServerAddr=rlDhcpGuardActivePolicyMatchServerAddr, rlNbrBindingIntegrityActivePolicyIfIndex=rlNbrBindingIntegrityActivePolicyIfIndex, rlNdInspectionPolicyName=rlNdInspectionPolicyName, rlNdInspectionActivePolicySecLevelMinType=rlNdInspectionActivePolicySecLevelMinType, rlNbrBindingIntegrityClearPrefixAddress=rlNbrBindingIntegrityClearPrefixAddress, rlSourceGuardPolicyVlan2049to3072=rlSourceGuardPolicyVlan2049to3072, rlNdInspectionPolicyDeviceRole=rlNdInspectionPolicyDeviceRole, rlSourceGuardPolicyName=rlSourceGuardPolicyName, rlNdInspectionMessageDropTrap=rlNdInspectionMessageDropTrap, rlNbrBindingIntegrityPortPolicyRowStatus=rlNbrBindingIntegrityPortPolicyRowStatus, rlFirstHopSecPolicyName=rlFirstHopSecPolicyName, rlSourceGuardActivePolicyTrusted=rlSourceGuardActivePolicyTrusted, rlSourceGuardActivePolicyNamePort=rlSourceGuardActivePolicyNamePort, rlNdInspection=rlNdInspection, rlDhcpGuardEnableVlan2049to3072=rlDhcpGuardEnableVlan2049to3072, rlNdInspectionActivePolicyDeviceRole=rlNdInspectionActivePolicyDeviceRole, rlNdInspectionSecLevelMin=rlNdInspectionSecLevelMin, rlNbrBindingIntegrityBindingPrefixLength=rlNbrBindingIntegrityBindingPrefixLength, rlNdInspectionEnableVlan1025to2048=rlNdInspectionEnableVlan1025to2048, rlFirstHopSecPolicyVlanTable=rlFirstHopSecPolicyVlanTable, rlNbrBindingIntegrityPolicyPortVlan2049to3072=rlNbrBindingIntegrityPolicyPortVlan2049to3072, rlRaGuardPortPolicyVlan3073to4094=rlRaGuardPortPolicyVlan3073to4094, rlNdInspectionActivePolicyVlanTag=rlNdInspectionActivePolicyVlanTag, rlNbrBindingIntegrityActivePolicyVlanTag=rlNbrBindingIntegrityActivePolicyVlanTag, rlFirstHopSecCountersDropRaGuardUnauthorizedHopLimit=rlFirstHopSecCountersDropRaGuardUnauthorizedHopLimit, rlRaGuardEnableVlanIndex=rlRaGuardEnableVlanIndex, rlDhcpGuardPolicyPortVlan1025to2048=rlDhcpGuardPolicyPortVlan1025to2048, rlRaGuardActivePolicyOtherConfigFlagType=rlRaGuardActivePolicyOtherConfigFlagType, rlNbrBindingIntegrityClearTable=rlNbrBindingIntegrityClearTable, rlFirstHopSecCountersDropRaGuardUnauthorizedOtherConfigFlag=rlFirstHopSecCountersDropRaGuardUnauthorizedOtherConfigFlag, rlRaGuardManagedConfigFlag=rlRaGuardManagedConfigFlag, rlDhcpGuardPolicyTable=rlDhcpGuardPolicyTable, rlNbrBindingIntegrityBindingSourceAddress=rlNbrBindingIntegrityBindingSourceAddress, rlNbrBindingIntegrityClearPrefixLength=rlNbrBindingIntegrityClearPrefixLength, rlDhcpGuardActivePolicyDeviceRoleType=rlDhcpGuardActivePolicyDeviceRoleType, rlRaGuardPolicyVlan1025to2048=rlRaGuardPolicyVlan1025to2048, rlRaGuardPolicyPortTable=rlRaGuardPolicyPortTable, rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimitType=rlNbrBindingIntegrityActivePolicyMaxEntriesVlanLimitType, rlNbrBindingIntegrityBindingSourceAddressType=rlNbrBindingIntegrityBindingSourceAddressType, rlNbrBindingIntegrityPolicyVlanTable=rlNbrBindingIntegrityPolicyVlanTable, rlRaGuardPolicyPortName=rlRaGuardPolicyPortName, rlRaGuardActivePolicyOtherConfigFlag=rlRaGuardActivePolicyOtherConfigFlag, rlFirstHopSecActivePolicyEntry=rlFirstHopSecActivePolicyEntry, rlNdInspectionPortPolicyIfIndex=rlNdInspectionPortPolicyIfIndex, rlFirstHopSecCountersDropDhcpDecline=rlFirstHopSecCountersDropDhcpDecline, rlNdInspectionPortPolicyTable=rlNdInspectionPortPolicyTable, rlRaGuardActivePolicyIfIndex=rlRaGuardActivePolicyIfIndex, rlFirstHopSecActivePolicyVlanTag=rlFirstHopSecActivePolicyVlanTag, rlDhcpGuardPolicyMatchReplyAddr=rlDhcpGuardPolicyMatchReplyAddr, rlDhcpGuardPolicyMatchServerAddrSpecified=rlDhcpGuardPolicyMatchServerAddrSpecified, rlNbrBindingIntegrityActivePolicyDeviceRoleType=rlNbrBindingIntegrityActivePolicyDeviceRoleType, rlNbrBindingIntegrityClearVlanTag=rlNbrBindingIntegrityClearVlanTag, RlIpv6FhsSettingType=RlIpv6FhsSettingType, rlNbrBindingIntegrityAddressConfig=rlNbrBindingIntegrityAddressConfig, rlNdInspectionValidateSrcMac=rlNdInspectionValidateSrcMac, rlNdInspectionPortPolicyRowStatus=rlNdInspectionPortPolicyRowStatus, rlNbrBindingIntegrityPolicyVlan1to1024=rlNbrBindingIntegrityPolicyVlan1to1024, rlRaGuardRouterPrefMin=rlRaGuardRouterPrefMin, rlNbrBindingIntegrityPolicyPortIfIndex=rlNbrBindingIntegrityPolicyPortIfIndex, rlFirstHopSecCountersDropNbrBindingIntegrityIllegalIcmpv6=rlFirstHopSecCountersDropNbrBindingIntegrityIllegalIcmpv6, rlNbrBindingIntegrityEnableVlan2049to3072=rlNbrBindingIntegrityEnableVlan2049to3072, rlNbrBindingIntegrityVlanPolicyName=rlNbrBindingIntegrityVlanPolicyName, rlFirstHopSecEnableVlan3073to4094=rlFirstHopSecEnableVlan3073to4094, rlFirstHopSecCountersRxDhcpRelease=rlFirstHopSecCountersRxDhcpRelease, rlRaGuardVlanPolicyRowStatus=rlRaGuardVlanPolicyRowStatus, rlRaGuardPolicyMatchRaAddrSpecified=rlRaGuardPolicyMatchRaAddrSpecified, PYSNMP_MODULE_ID=rlIpv6Fhs, rlNbrBindingIntegrityPrefixOverflowTrap=rlNbrBindingIntegrityPrefixOverflowTrap, rlNdInspectionPolicyVlan2049to3072=rlNdInspectionPolicyVlan2049to3072, rlSourceGuardPortPolicyName=rlSourceGuardPortPolicyName, rlNdInspectionPortPolicyVlan1to1024=rlNdInspectionPortPolicyVlan1to1024, rlRaGuardPolicyOtherConfigFlag=rlRaGuardPolicyOtherConfigFlag, rlSourceGuardActivePolicyTable=rlSourceGuardActivePolicyTable, rlSourceGuardPortPolicyEntry=rlSourceGuardPortPolicyEntry, rlFirstHopSecCountersRxNdpNA=rlFirstHopSecCountersRxNdpNA, rlNbrBindingIntegrityBindingIfIndex=rlNbrBindingIntegrityBindingIfIndex, rlNbrBindingIntegrityVlanPolicyVlanTag=rlNbrBindingIntegrityVlanPolicyVlanTag, rlSourceGuardPolicyVlanEntry=rlSourceGuardPolicyVlanEntry, rlDhcpGuard=rlDhcpGuard, rlNbrBindingIntegrityPolicyVlanPolicyName=rlNbrBindingIntegrityPolicyVlanPolicyName, rlRaGuardActivePolicyNamePort=rlRaGuardActivePolicyNamePort, rlNbrBindingIntegrityEnableVlan1025to2048=rlNbrBindingIntegrityEnableVlan1025to2048, rlRaGuardActivePolicyRouterPrefMaxType=rlRaGuardActivePolicyRouterPrefMaxType, rlFirstHopSecCountersDropDhcpLeasequeryReply=rlFirstHopSecCountersDropDhcpLeasequeryReply, rlNdInspectionEnableVlanTable=rlNdInspectionEnableVlanTable, rlNbrBindingIntegrityActivePolicyLogBinding=rlNbrBindingIntegrityActivePolicyLogBinding, rlFirstHopSecPolicyPortVlan1to1024=rlFirstHopSecPolicyPortVlan1to1024, rlNbrBindingIntegrityPortPolicyEntry=rlNbrBindingIntegrityPortPolicyEntry, rlSourceGuardVlanPolicyTable=rlSourceGuardVlanPolicyTable, rlDhcpGuardPolicyPortName=rlDhcpGuardPolicyPortName, rlRaGuardPolicyMatchRaAddr=rlRaGuardPolicyMatchRaAddr, rlNbrBindingIntegrityActivePolicyTable=rlNbrBindingIntegrityActivePolicyTable, rlFirstHopSecCountersDropDhcpRelayReply=rlFirstHopSecCountersDropDhcpRelayReply, rlSourceGuardPolicyTrusted=rlSourceGuardPolicyTrusted, rlFirstHopSecCountersRxNdpRA=rlFirstHopSecCountersRxNdpRA, rlNbrBindingIntegrityPolicyDeviceRole=rlNbrBindingIntegrityPolicyDeviceRole, rlDhcpGuardPolicyMatchServerAddr=rlDhcpGuardPolicyMatchServerAddr, rlNbrBindingIntegrityActivePolicyEntry=rlNbrBindingIntegrityActivePolicyEntry, rlNdInspectionPolicyVlan1to1024=rlNdInspectionPolicyVlan1to1024, rlNbrBindingIntegrityBindingOrigin=rlNbrBindingIntegrityBindingOrigin, rlRaGuardPolicyRouterPrefMax=rlRaGuardPolicyRouterPrefMax, rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimit=rlNbrBindingIntegrityActivePolicyMaxEntriesInterfaceLimit, rlRaGuardActivePolicyRouterPrefMax=rlRaGuardActivePolicyRouterPrefMax, rlDhcpGuardPortPolicyName=rlDhcpGuardPortPolicyName, rlFirstHopSecPolicyPortName=rlFirstHopSecPolicyPortName, rlNbrBindingIntegrityClearIfIndex=rlNbrBindingIntegrityClearIfIndex, rlFirstHopSecPolicyEntry=rlFirstHopSecPolicyEntry, rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimit=rlNbrBindingIntegrityActivePolicyMaxEntriesMacLimit, rlFirstHopSecClearErrorCounters=rlFirstHopSecClearErrorCounters, rlNdInspectionPolicyPortEntry=rlNdInspectionPolicyPortEntry, rlFirstHopSecCountersDropNdpRA=rlFirstHopSecCountersDropNdpRA, rlNdInspectionPolicyPortVlan1to1024=rlNdInspectionPolicyPortVlan1to1024, rlRaGuardPolicyManagedConfigFlag=rlRaGuardPolicyManagedConfigFlag, rlRaGuardVlanPolicyEntry=rlRaGuardVlanPolicyEntry, rlNbrBindingIntegrityBindingLifetime=rlNbrBindingIntegrityBindingLifetime, rlFirstHopSecPolicyVlan3073to4094=rlFirstHopSecPolicyVlan3073to4094, rlFirstHopSecCountersDropDhcpGuardUnauthorizedSourceAddress=rlFirstHopSecCountersDropDhcpGuardUnauthorizedSourceAddress, rlFirstHopSecPortPolicyEntry=rlFirstHopSecPortPolicyEntry, rlRaGuardPolicyPortVlan1025to2048=rlRaGuardPolicyPortVlan1025to2048, rlDhcpGuardEnableVlanIndex=rlDhcpGuardEnableVlanIndex, rlRaGuardPolicyPortEntry=rlRaGuardPolicyPortEntry, rlFirstHopSecVlanPolicyEntry=rlFirstHopSecVlanPolicyEntry, rlDhcpGuardPortPolicyVlan2049to3072=rlDhcpGuardPortPolicyVlan2049to3072, rlSourceGuardEnableVlan1to1024=rlSourceGuardEnableVlan1to1024, rlFirstHopSecCountersRxDhcpLeasequeryReply=rlFirstHopSecCountersRxDhcpLeasequeryReply, rlRaGuardPolicyPortVlan3073to4094=rlRaGuardPolicyPortVlan3073to4094, rlSourceGuardActivePolicyIfIndex=rlSourceGuardActivePolicyIfIndex, rlFirstHopSecCountersRxNdpRedirect=rlFirstHopSecCountersRxNdpRedirect, rlSourceGuardActivePolicyVlanTag=rlSourceGuardActivePolicyVlanTag, rlFirstHopSecCountersDropNdInspectionInvalidSourceMac=rlFirstHopSecCountersDropNdInspectionInvalidSourceMac, rlNbrBindingIntegrityClearPrefixTable=rlNbrBindingIntegrityClearPrefixTable, rlNbrBindingIntegrityActivePolicyPrefixValidationType=rlNbrBindingIntegrityActivePolicyPrefixValidationType, rlRaGuardPortPolicyEntry=rlRaGuardPortPolicyEntry, rlNbrBindingIntegrityPolicyPortVlan3073to4094=rlNbrBindingIntegrityPolicyPortVlan3073to4094, rlFirstHopSecActivePolicyTable=rlFirstHopSecActivePolicyTable, rlNbrBindingIntegrityBindingExpiryTime=rlNbrBindingIntegrityBindingExpiryTime)
