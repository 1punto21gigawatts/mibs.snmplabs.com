#
# PySNMP MIB module NETSCREEN-SET-GEN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SET-GEN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
netscreenSetting, netscreenSettingMibModule = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter64, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, ModuleIdentity, IpAddress, Bits, iso, Gauge32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Bits", "iso", "Gauge32", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenSetGenMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 1))
netscreenSetGenMibModule.setRevisions(('2005-08-12 00:00', '2004-05-03 00:00', '2004-03-03 00:00', '2003-11-10 00:00', '2001-09-28 00:00', '2001-05-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenSetGenMibModule.setRevisionsDescriptions(('This module defines the object that are used to monitor all the configuration info', 'Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenSetGenMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenSetGenMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenSetGenMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenSetGenMibModule.setDescription('obsolete nsSetGenSysIp')
nsSetGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 1))
nsSetGenSysIp = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenSysIp.setStatus('obsolete')
if mibBuilder.loadTexts: nsSetGenSysIp.setDescription('System Ip address')
nsSetGenHostName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenHostName.setStatus('current')
if mibBuilder.loadTexts: nsSetGenHostName.setDescription('Host name of NetScreen device.')
nsSetGenDomain = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenDomain.setStatus('current')
if mibBuilder.loadTexts: nsSetGenDomain.setDescription('Domain name of NetScreen device.')
nsSetGenOpMode = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenOpMode.setStatus('current')
if mibBuilder.loadTexts: nsSetGenOpMode.setDescription('NetScreen device can work in one of the tree mode: transparent, NAT and route. This attribute indicates which operation mode it use.')
nsSetGenSwVer = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenSwVer.setStatus('current')
if mibBuilder.loadTexts: nsSetGenSwVer.setDescription('NetSceen OS version.')
nsSetGenLicInfo = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenLicInfo.setStatus('current')
if mibBuilder.loadTexts: nsSetGenLicInfo.setDescription('NetScreen OS license information.')
nsSetGenSCSAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenSCSAdminEnable.setStatus('current')
if mibBuilder.loadTexts: nsSetGenSCSAdminEnable.setDescription('enable Command Security Shell')
nsSetGenDropSelfLogPac = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetGenDropSelfLogPac.setStatus('current')
if mibBuilder.loadTexts: nsSetGenDropSelfLogPac.setDescription('Log Packets to Self that are dropped')
mibBuilder.exportSymbols("NETSCREEN-SET-GEN-MIB", nsSetGenDomain=nsSetGenDomain, nsSetGenOpMode=nsSetGenOpMode, nsSetGenLicInfo=nsSetGenLicInfo, nsSetGenSwVer=nsSetGenSwVer, nsSetGenHostName=nsSetGenHostName, nsSetGenDropSelfLogPac=nsSetGenDropSelfLogPac, netscreenSetGenMibModule=netscreenSetGenMibModule, nsSetGenSysIp=nsSetGenSysIp, nsSetGeneral=nsSetGeneral, nsSetGenSCSAdminEnable=nsSetGenSCSAdminEnable, PYSNMP_MODULE_ID=netscreenSetGenMibModule)
