#
# PySNMP MIB module MICOMBRGEXT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOMBRGEXT
# Produced by pysmi-0.3.4 at Wed May  1 14:12:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, Unsigned32, Bits, IpAddress, MibIdentifier, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Counter64, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Unsigned32", "Bits", "IpAddress", "MibIdentifier", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Counter64", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class Timeout(Integer32):
    pass

mcmBrg = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6))
mcmBrgGlobalParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1))
mcmBrgIPBridged = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("routed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgIPBridged.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgIPBridged.setDescription('NAME = ; DESC = IP is being bridged or Routed.; HELP = Is IP being Bridged or Routed?; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgNumInterfaces.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgNumInterfaces.setDescription('NAME = ; DESC = The number of ports(ethernet & wan) \\ that the access device has.; HELP = The number of ports this bridge has.; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgSpanEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgSpanEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSpanEnable.setDescription('NAME = ; DESC = The current state of the Spanning \\ tree Algorithm on the access device.; HELP = Spanning-Tree Algorithm Enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgSpoofEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgSpoofEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSpoofEnable.setDescription('NAME = ; DESC = IP-ARP spoofing -when enabled, access device \\ intercepts most ARP bcasts and handle them locally \\ to reduce the amount of bcast pkts fwded across WAN.; HELP = IP-ARP Spoofing Enabled?; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgAgeTime.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgAgeTime.setDescription('NAME = ; DESC = Aging time for dynamically learned devices \\ in forwarding Table.; HELP = The timeout period in seconds for aging \\ out dynamically learned forwarding \\ information. 802.1D-1990 recommends \\ a default of 300 seconds. Mirror object \\ of dot1dTpAgingTime.; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgMiscParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2))
mcmBrgDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgDebugEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgDebugEnable.setDescription('NAME = ; DESC = The access device capability to generate controlled \\ number of debugging messages to CLI for \\ the purpose of debugging some bridge \\ status.; HELP = Bridge Debugging Enabled?; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmBrgSpanDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpanDebugEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSpanDebugEnable.setDescription('NAME = ; DESC = The access device capability to debug spanning \\ tree algorithm.; HELP = Spanning-Tree Debugging Enabled?; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmBrgSpoofCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpoofCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSpoofCacheAge.setDescription('NAME = ; DESC = The aging time for entries in the ARP Spoof\\ cache table to specified by the cache timeout \\ to make room for active entries.; HELP = The Aging Time for the ARP Spoof Cache.; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgSpoofThresholdAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpoofThresholdAge.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSpoofThresholdAge.setDescription('NAME = ; DESC = The Aging Time for the ARP Spoofcache Threshold \\ in seconds.(60 .. 1800 sec).; HELP = The Aging Time for the ARP Spoof Threshold.; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgSpoofThresholdCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSpoofThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSpoofThresholdCount.setDescription('NAME = ; DESC = The ARP Spoof Threshold count- allows \\ the max number of consecutive outstanding \\ ARP request per destination node.; HELP = The ARP Spoof Threshold count.; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgConfPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3), )
if mibBuilder.loadTexts: mcmBrgConfPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortTable.setDescription('NAME = ; DESC = A config Table that contains port-specific \\ information for the access device Bridge \\ Configuration information.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgConfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgConfPortIndex"))
if mibBuilder.loadTexts: mcmBrgConfPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortEntry.setDescription('NAME = ; DESC = Configuration parameter information maintained by \\ each Port that are being used by the access \\ device.; HELP = ; CAPABILITIES = ;')
mcmBrgConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgConfPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortIndex.setDescription('NAME = ; DESC = The Port Index to which this entry pertains.; HELP = ; CAPABILITIES = ;')
mcmBrgConfPortPPA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgConfPortPPA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortPPA.setDescription('NAME = ; DESC = The Protocol Point of Access to which \\ this entry pertains.; HELP = ; CAPABILITIES = ;')
mcmBrgConfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("frameRelay", 3), ("internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBrgConfPortType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortType.setDescription('NAME = ; DESC = The Type of the interface this port \\ is attached to.; HELP = ; CAPABILITIES = ;')
mcmBrgConfPortMacFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortMacFilterFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortMacFilterFlag.setDescription('NAME = ; DESC = When MAC address filtering is needed on a \\ specific port, enable MAC filter Flag. \\ Otherwise, disable the MAC Filetr Flag.; HELP = Is MAC Filtering enabled?; CAPABILITIES = ;')
mcmBrgConfPortEtFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortEtFilterFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortEtFilterFlag.setDescription('NAME = ; DESC = When E-type filtering is needed on a specific \\ port, enable E-type filter Flag. Otherwise, \\ disable E-type Filter Flag.; HELP = Is E-type Filtering enabled?; CAPABILITIES = ;')
mcmBrgConfPortSapFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortSapFilterFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortSapFilterFlag.setDescription('NAME = ; DESC = When SAP filtering is needed on a specific \\ port, enable SAP filter flag. Otherwise, \\ disable the SAP filter flag.; HELP = Is SAP Filtering enabled?; CAPABILITIES = ;')
mcmBrgConfPortMacInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortMacInclExcl.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortMacInclExcl.setDescription('NAME = ; DESC = If Inclusive MAC filtering is set, only \\ addresses in the table are filtered/discarded.\\ If Exclusive, allow only addresses in the \\ table to be accepted/learned.; HELP = Inclusive or Exclusive Mac Filtering?; CAPABILITIES = ;')
mcmBrgConfPortEtInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortEtInclExcl.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortEtInclExcl.setDescription('NAME = ; DESC = If Inclusive E-Type filtering is set, only \\ E-Type in the table are filtered/discarded.\\ If Exclusive, allow only E-Type in the \\ table to be accepted/learned.; HELP = Inclusive or Exclusive Et Filtering?; CAPABILITIES = ;')
mcmBrgConfPortSapInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgConfPortSapInclExcl.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgConfPortSapInclExcl.setDescription('NAME = ; DESC = If Inclusive Sap Type filtering is set, only \\ Sap Types in the Table are filtered/discarded. \\ If Exclusive, allow only Sap Types in the \\ table to be accepted/learned.; HELP = Inclusive or Exclusive Sap Filtering?; CAPABILITIES = ;')
mcmBrgMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4), )
if mibBuilder.loadTexts: mcmBrgMacFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgMacFilterTable.setDescription('NAME = ; DESC = A table that contains port-specific \\ information for the access device MAC Filter \\ info including the source & destination.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgMacFilterPortIndex"), (0, "MICOMBRGEXT", "mcmBrgMacFilterNumber"))
if mibBuilder.loadTexts: mcmBrgMacFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgMacFilterEntry.setDescription('NAME = ; DESC = MAC Filter parameter information maintained by \\ every port that the access device uses.; HELP = ; CAPABILITIES = ;')
mcmBrgMacFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacFilterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgMacFilterPortIndex.setDescription('NAME = ; DESC = The Port Index particular to this entry.; HELP = ; CAPABILITIES = ;')
mcmBrgMacFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgMacFilterNumber.setDescription('NAME = ; DESC = The Filter number associated with the entry.; HELP = ; CAPABILITIES = ;')
mcmBrgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgMacAddress.setDescription('NAME = ; DESC = The MAC address(HW address) that needs to be \\ filtered.; HELP = ; CAPABILITIES = ;')
mcmBrgMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgMacType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgMacType.setDescription('NAME = ; DESC = Filter based on source MAC address or \\ destination MAC address.; HELP = The type of the MAC Address. By setting \\ it to invalid one can invalidate the \\ entry.; CAPABILITIES = ;')
mcmBrgEtFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5), )
if mibBuilder.loadTexts: mcmBrgEtFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterTable.setDescription('NAME = ; DESC = A table that contains port-specific \\ information for the access device \\ E-type Filter.; HELP = CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgEtFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgEtFilterPortIndex"), (0, "MICOMBRGEXT", "mcmBrgEtFilterNumber"))
if mibBuilder.loadTexts: mcmBrgEtFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterEntry.setDescription('NAME = ; DESC = A list of information maintained by \\ each port about the access device \\ E-type Filter parameters for that port.; HELP = CAPABILITIES = ;')
mcmBrgEtFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterPortIndex.setDescription('NAME = ; DESC = The port Index particular to this port.; HELP = ; CAPABILITIES = ;')
mcmBrgEtFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterNumber.setDescription('NAME = ; DESC = The Filter number associated with the \\ port Index.; HELP = ; CAPABILITIES = ;')
mcmBrgEtFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterStatus.setDescription('NAME = ; DESC = An indication as to whether the filter \\^M is specified as a single e-type or as a range of \\ as a range of e-types.; ; HELP = HELP = Setting the value tp invalid, has the effect of \\ the entry,; CAPABILITIES = ;')
mcmBrgEtFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterEType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterEType.setDescription('NAME = ; DESC = The singular e-type to be filtered.; HELP = The value of this object is valid only \\ if the mcmBrgEtFilterStatus (above) \\ is singular.; CAPABILITIES = ;')
mcmBrgEtFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterUpperRange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterUpperRange.setDescription('NAME = ; DESC = DESC = The Upper Range of the E-type to be \\ filtered. Range is between 0 - 65535.; HELP = This object is valid only if the \\ mcmBrgEtFilterStatus (above) is range.; CAPABILITIES = ;')
mcmBrgEtFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgEtFilterLowerRange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgEtFilterLowerRange.setDescription('NAME = ; DESC = The lower Range of the E-type to be \\ filtered. Range is between 0 - 65535.; HELP = This object is valid only \\ if the mcmBrgEtFilterStatus (above) \\ is range.; CAPABILITIES = ;')
mcmBrgSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6), )
if mibBuilder.loadTexts: mcmBrgSapFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterTable.setDescription('NAME = ; DESC = A table that contains port-specific \\ information for the access device E-type \\ Filter information. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgSapFilterPortIndex"), (0, "MICOMBRGEXT", "mcmBrgSapFilterNumber"))
if mibBuilder.loadTexts: mcmBrgSapFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterEntry.setDescription('NAME = ; DESC = A list of information maintained by \\ every port about the access device E-type Filter \\ parameters for that port. (Operational); HELP = ; CAPABILITIES = ;')
mcmBrgSapFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterPortIndex.setDescription('NAME = ; DESC = ; HELP = The Port Index to which this entry pertains.; CAPABILITIES = ;')
mcmBrgSapFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterNumber.setDescription('NAME = ; DESC = The Filter number associated with the \\ port Index.; HELP = ; CAPABILITIES = ;')
mcmBrgSapFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterStatus.setDescription('NAME = ; DESC = An indication as to whether the filter \\ is specified as a single e-type or \\ as a range of e-types.; HELP = Setting the value to invalid has the \\ effect of deleteing the entry.;; CAPABILITIES = ;')
mcmBrgSapFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterEType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterEType.setDescription('NAME = ; DESC = The singular e-type to be filtered.; HELP = The value of this object is valid only \\ if the mcmBrgSapFilterStatus (above) \\ is singular.; CAPABILITIES = ;')
mcmBrgSapFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterUpperRange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterUpperRange.setDescription('NAME = ; DESC = The Upper Range of the E-type to be \\ filtered.; HELP = This object is valid only if the \\ mcmBrgSapFilterStatus (above) \\ is range.; CAPABILITIES = ;')
mcmBrgSapFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgSapFilterLowerRange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmBrgSapFilterLowerRange.setDescription('NAME = ; DESC = The lower Range of the E-type to be \\ filtered.; HELP = This object is valid only if the \\ mcmBrgSapFilterStatus (above) \\ is range.; CAPABILITIES = ;')
nvmBrgGlobalParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7))
nvmBrgIPBridged = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("routed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgIPBridged.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgIPBridged.setDescription('NAME = ; DESC = IP is being bridged or Routed in the access device.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgNumInterfaces.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgNumInterfaces.setDescription('NAME = ; DESC = The number of ethernet and WAN ports that \\ the access device has.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgSpanEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpanEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSpanEnable.setDescription('NAME = ; DESC = The current state of the Spanning \\ tree Algorithm on the access device is enabled \\ or disabled.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgSpoofEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSpoofEnable.setDescription('NAME = ; DESC = IP-ARP spoofing -when enabled,access device intercepts\\ most ARP bcasts and handle them locally to \\ reduce the amount of bcast pkts fwded across WAN.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgAgeTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgAgeTime.setDescription('NAME = ; DESC = Aging time for dynamically learned devices \\ in forwarding Table.; HELP = The timeout period in seconds for aging \\ out dynamically learned forwarding \\ information. 802.1D-1990 recommends \\ a default of 300 seconds. Mirror object \\ of dot1dTpAgingTime.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgMiscParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8))
nvmBrgDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgDebugEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgDebugEnable.setDescription("NAME = ; DESC = The access device's capability to generate controlled \\ number of debugging messages to CLI for \\ the purpose of debugging some bridge \\ status.; HELP = Bridge Debugging Enabled?; CAPABILITIES = NET_CFG, VPN_DISP;")
nvmBrgSpanDebugEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpanDebugEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSpanDebugEnable.setDescription("NAME = ; DESC = The access device's capability to debug spanning \\ tree algorithm.; HELP = Spanning-Tree Debugging Enabled?; CAPABILITIES = NET_CFG, VPN_DISP;")
nvmBrgSpoofCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSpoofCacheAge.setDescription('NAME = ; DESC = The aging time for entries in the ARP Spoof\\ cache table to specified by the cache timeout \\ to make room for active entries.; HELP = The Aging Time for the ARP Spoof Cache.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgSpoofThresholdAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofThresholdAge.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSpoofThresholdAge.setDescription('NAME = ; DESC = The Aging Time for the ARP Spoofcache Threshold \\ in seconds.(60 .. 1800 sec); HELP = The Aging Time for the ARP Spoof Threshold.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgSpoofThresholdCount = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSpoofThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSpoofThresholdCount.setDescription('NAME = ; DESC = The ARP Spoof Threshold count- allows \\ the max number of consecutive outstanding \\ ARP request per dest node.; HELP = The ARP Spoof Threshold count.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgStpParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9))
nvmBrgPriority = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgPriority.setDescription('NAME = ; DESC = The value of the write-able portion \\ of the Bridge ID, i.e., the first two \\ octets of the (8 octet long) Bridge ID.; HELP = The other (last) 6 octets of the \\ Bridge ID are given by the value of \\ dot1dBaseBridgeAddress. This is Mirror \\ object to dot1dStpPriority.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 2), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMaxAge.setDescription('NAME = ; DESC = The maximum age of Spanning Tree Protocol \\ information learned from the network \\ on any port before it is discarded, \\ in units of hundredths of a second.; HELP = This is the programmed value of the \\ dot1dStpBridgeMaxAge.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgFwdDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgFwdDelay.setDescription('NAME = ; DESC = The value that all bridges use for \\ ForwardDelay when this bridge is \\ acting as the root.; HELP = Note that 802.1D-1990 specifies that \\ the range for this parameter is related \\ to the value of dot1dStpBridgeMaxAge. \\ The granularity of this timer is specified \\ by 802.1D-1990 to be 1 second. An agent \\ may return a badValue error if a set \\ is attempted to a value which is not \\ a whole number of seconds. Mirror object \\ of dot1dStpBridgeForwardDelay; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 9, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgHelloTime.setDescription('NAME = ; DESC = The value that all bridges use for HelloTime \\ when this bridge is acting as the root.; HELP = The granularity of this timer is specified \\ by 802.1D- 1990 to be 1 second. An \\ agent may return a badValue error if \\ a set is attempted to a value which \\ is not a whole number of seconds. Mirror \\ object of dot1dStpBridgeHelloTime.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgConfPortTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10), )
if mibBuilder.loadTexts: nvmBrgConfPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortTable.setDescription('NAME = ; DESC = A config table that contains port-specific \\ information for tha access device Bridge Configuration \\ information.; HELP = A table that contains port-specific \\ information for the access device Biidge Config \\ information.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgConfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgConfPortIndex"))
if mibBuilder.loadTexts: nvmBrgConfPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortEntry.setDescription('NAME = ; DESC = A list of information maintained by \\ each Port that are being used by the access device, \\ about conf. parameters for that port.; HELP = ; CAPABILITIES = ;')
nvmBrgConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortIndex.setDescription('NAME = ; DESC = The Port Index to which this entry pertains.; HELP = ; CAPABILITIES = ;')
nvmBrgConfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("wan", 2), ("frameRelay", 3), ("internal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortType.setDescription('NAME = ; DESC = The Type of the interface this port \\ is attached to. \\ This object only supported enumerations of \\ ethernet and frameRelay.; HELP = ; CAPABILITIES = ;')
nvmBrgConfPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortEnable.setDescription('NAME = ; DESC = The status of the Port is enabled/disabled.; HELP = Mirror object of dot1dStpPortEnable.; CAPABILITIES = ;')
nvmBrgConfPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortPriority.setDescription("NAME = ; DESC = The value of the priority field which \\ is contained in the first (in network \\ byte order) octet of the port ID.; HELP = It's the mirror object of dot1dStpPortPriority.; CAPABILITIES = ;")
nvmBrgConfPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortPathCost.setDescription('NAME = ; DESC = The contribution of this port to the \\ path cost of paths towards the spanning \\ tree root which include this port.; HELP = 802.1D-1990 recommends that the default \\ value of this parameter be in inverse \\ proportion to the speed of the attached \\ LAN. Mirror object of dot1dStpPortPathCost.; CAPABILITIES = ;')
nvmBrgConfPortMacFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortMacFilterFlag.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortMacFilterFlag.setDescription('NAME = ; DESC = When MAC address filtering is needed on a \\ specific port, enable MAC filter Flag. Otherwise, \\ disable the MAC Filetr Flag.; HELP = Is MAC Filtering enabled?; CAPABILITIES = ;')
nvmBrgConfPortEtFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortEtFilterFlag.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortEtFilterFlag.setDescription('NAME = ; DESC = When E-type filtering is needed on a specific \\ port, enable E-type filter Flag. Otherwise,When \\ disable E-type Filter Flag.; HELP = Is E-type Filtering enabled?; CAPABILITIES = ;')
nvmBrgConfPortSapFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortSapFilterFlag.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortSapFilterFlag.setDescription('NAME = ; DESC = When SAP filtering is needed on a specific \\ port, enable SAP filter flag. Otherwise, \\ disable the SAP filter flag.; HELP = Is SAP Filtering enabled?; CAPABILITIES = ;')
nvmBrgConfPortMacInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortMacInclExcl.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortMacInclExcl.setDescription('NAME = ; DESC = ; HELP = Inclusive or Exclusive Mac Filtering?; CAPABILITIES = ;')
nvmBrgConfPortEtInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortEtInclExcl.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortEtInclExcl.setDescription('NAME = ; DESC = ; HELP = Inclusive or Exclusive Et Filtering?; CAPABILITIES = ;')
nvmBrgConfPortSapInclExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inclusive", 1), ("exclusive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgConfPortSapInclExcl.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgConfPortSapInclExcl.setDescription('NAME = ; DESC = ; HELP = Inclusive or Exclusive Sap Filtering?; CAPABILITIES = ;')
nvmBrgMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11), )
if mibBuilder.loadTexts: nvmBrgMacFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMacFilterTable.setDescription('NAME = ; DESC = ; HELP = A table that contains port-specific \\ information for the access device MAC Filter \\ information.; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgMacFilterPortIndex"), (0, "MICOMBRGEXT", "nvmBrgMacFilterNumber"))
if mibBuilder.loadTexts: nvmBrgMacFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMacFilterEntry.setDescription('NAME = ; DESC = ; HELP = A list of information maintained by \\ every port about the access device MAC Filter \\ parameters for that port.; CAPABILITIES = ;')
nvmBrgMacFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacFilterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMacFilterPortIndex.setDescription('NAME = ; DESC = ; HELP = The Port Index to which this entry pertains.; CAPABILITIES = ;')
nvmBrgMacFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMacFilterNumber.setDescription('NAME = ; DESC = ; HELP = The Port Index to which this entry pertains.; CAPABILITIES = ;')
nvmBrgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMacAddress.setDescription('NAME = ; DESC = ; HELP = The MAC Address which needs to be filtered.; CAPABILITIES = ;')
nvmBrgMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgMacType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgMacType.setDescription('NAME = ; DESC = ; HELP = The type of the MAC Address. By setting \\ it to invalid one can invalidate the \\ entry.; CAPABILITIES = ;')
nvmBrgEtFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12), )
if mibBuilder.loadTexts: nvmBrgEtFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterTable.setDescription('NAME = ; DESC = DESC = A table that contains port-specific \\ information for the access device E-type Filter.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgEtFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgEtFilterPortIndex"), (0, "MICOMBRGEXT", "nvmBrgEtFilterNumber"))
if mibBuilder.loadTexts: nvmBrgEtFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterEntry.setDescription('NAME = ; DESC = A list of information maintained by \\ each port about the access device E-type Filter \\ parameters for that port.; Help = ; CAPABILITIES = ;')
nvmBrgEtFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterPortIndex.setDescription('NAME = ; DESC = The port Index particular to this port.; HELP = ; CAPABILITIES = ;')
nvmBrgEtFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterNumber.setDescription('NAME = ; DESC = The Filter number associated with the \\ port Index.; HELP = ; CAPABILITIES = ;')
nvmBrgEtFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterStatus.setDescription('NAME = ; DESC = An indication as to whether the filter \\ is specified as a single e-type or \\ as a range of e-types.; HELP = Setting the value to invalid has the \\ the effect of deleting the entry.; CAPABILITIES = ;')
nvmBrgEtFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterEType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterEType.setDescription('NAME = ; DESC = The singular e-type to be filters.; HELP = The value of this object is valid only \\ if the mcmBrgEtFilterStatus (above) \\ is singular.; CAPABILITIES = ;')
nvmBrgEtFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterUpperRange.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterUpperRange.setDescription('NAME = ; DESC = The Upper Range of the E-type to be \\ filtered. Range is between 0 - 65535.; HELP = This object is valid only if the \\ mcmBrgEtFilterStatus (above) is range.; CAPABILITIES = ;')
nvmBrgEtFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmBrgEtFilterLowerRange.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgEtFilterLowerRange.setDescription('NAME = ; DESC = The lower Range of the E-type to be \\ filtered. Range is between 0 - 65535.; HELP = This object is valid only \\ if the mcmBrgEtFilterStatus (above) \\ is range.; CAPABILITIES = ;')
nvmBrgSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13), )
if mibBuilder.loadTexts: nvmBrgSapFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterTable.setDescription('NAME = ; DESC = A table that contains port-specific \\ information for the access device E-type \\ Filter information.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmBrgSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1), ).setIndexNames((0, "MICOMBRGEXT", "nvmBrgSapFilterPortIndex"), (0, "MICOMBRGEXT", "nvmBrgSapFilterNumber"))
if mibBuilder.loadTexts: nvmBrgSapFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterEntry.setDescription('NAME = ; DESC = A list of information maintained by \\ every port about the access device E-type Filter \\ parameters for that port.; HELP = ; CAPABILITIES = ;')
nvmBrgSapFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterPortIndex.setDescription('NAME = ; DESC = The Port Index to which this entry pertains.; HELP = ; CAPABILITIES = ;')
nvmBrgSapFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterNumber.setDescription('NAME = ; DESC = The Filter number associated with the \\ port Index.; HELP = ; CAPABILITIES = ;')
nvmBrgSapFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singular", 1), ("range", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterStatus.setDescription('NAME = ; DESC = An indication as to whether the filter \\ is specified as a single e-type or \\ as a range of e-types.; HELP = Setting the value to invalid has the \\ effect of deleteing the entry.; CAPABILITIES = ;')
nvmBrgSapFilterEType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterEType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterEType.setDescription('NAME = ; DESC = The singular e-type to be filtered. \\ HELP = The value of this object is valid only \\ if the mcmBrgSapFilterStatus (above) \\ is singular.; CAPABILITIES = ;')
nvmBrgSapFilterUpperRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterUpperRange.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterUpperRange.setDescription('NAME = ; DESC = The Upper Range of the E-type to be \\ filtered.; HELP = This object is valid only if the \\ mcmBrgSapFilterStatus (above) \\ is range.; CAPABILITIES = ;')
nvmBrgSapFilterLowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmBrgSapFilterLowerRange.setStatus('mandatory')
if mibBuilder.loadTexts: nvmBrgSapFilterLowerRange.setDescription('NAME = ; DESC = The lower Range of the E-type to be \\ filtered.; HELP = This object is valid only if the \\ mcmBrgSapFilterStatus (above) \\ is range.; CAPABILITIES = ;')
mcmBrgCntr = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14))
mcmBrgPortCntrZeroTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1), )
if mibBuilder.loadTexts: mcmBrgPortCntrZeroTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgPortCntrZeroTable.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ A table that contains port-specific \\ information for access device Port Counter \\ Zeroing.; HELP =; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmBrgPortCntrZeroEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1), ).setIndexNames((0, "MICOMBRGEXT", "mcmBrgPortCntrZeroIndex"))
if mibBuilder.loadTexts: mcmBrgPortCntrZeroEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgPortCntrZeroEntry.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ A list of information maintained by \\ every port about the access device E-type Filter \\ parameters for that port.; HELP = ; CAPABILITIES = ;')
mcmBrgPortCntrZeroIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmBrgPortCntrZeroIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgPortCntrZeroIndex.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The Port Index to which this entry pertains.; HELP = ; CAPABILITIES = ;')
mcmBrgBasePortCounterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgBasePortCounterZero.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgBasePortCounterZero.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ When set to reset, the Base port Counters \\ should be zeroed out.; HELP = ; CAPABILITIES = ;')
mcmBrgStpPortCounterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgStpPortCounterZero.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgStpPortCounterZero.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ When set to reset, the spanning Tree port \\ counters will be zeroed out.; HELP = ; CAPABILITIES = ;')
mcmBrgTpPortCounterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgTpPortCounterZero.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgTpPortCounterZero.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ When set to reset, the Transparent port \\ counters will be zeroed out.; HELP = ; CAPABILITIES = ;')
mcmBrgCounterZero = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 2))
mcmBrgStpCounterZero = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgStpCounterZero.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgStpCounterZero.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ When set to reset, the spanning Tree port \\ counters will be zeroed out.; HELP = ; CAPABILITIES = ;')
mcmBrgTpCounterZero = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 6, 14, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmBrgTpCounterZero.setStatus('obsolete')
if mibBuilder.loadTexts: mcmBrgTpCounterZero.setDescription('NAME = ; DESC = This object was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ When set to reset, the Transparent port \\ counters will be zeroed out.; HELP = ; CAPABILITIES = ;')
mibBuilder.exportSymbols("MICOMBRGEXT", mcmBrgConfPortMacFilterFlag=mcmBrgConfPortMacFilterFlag, mcmBrgConfPortEntry=mcmBrgConfPortEntry, nvmBrgIPBridged=nvmBrgIPBridged, mcmBrgConfPortIndex=mcmBrgConfPortIndex, nvmBrgSapFilterTable=nvmBrgSapFilterTable, mcmBrgTpPortCounterZero=mcmBrgTpPortCounterZero, nvmBrgMacFilterTable=nvmBrgMacFilterTable, nvmBrgMacType=nvmBrgMacType, mcmBrgStpCounterZero=mcmBrgStpCounterZero, nvmBrgConfPortIndex=nvmBrgConfPortIndex, mcmBrgEtFilterLowerRange=mcmBrgEtFilterLowerRange, nvmBrgMacFilterEntry=nvmBrgMacFilterEntry, nvmBrgEtFilterPortIndex=nvmBrgEtFilterPortIndex, mcmBrgMacType=mcmBrgMacType, mcmBrgPortCntrZeroEntry=mcmBrgPortCntrZeroEntry, mcmBrgDebugEnable=mcmBrgDebugEnable, nvmBrgSapFilterEType=nvmBrgSapFilterEType, mcmBrgCounterZero=mcmBrgCounterZero, mcmBrgSpanDebugEnable=mcmBrgSpanDebugEnable, mcmBrgPortCntrZeroTable=mcmBrgPortCntrZeroTable, mcmBrgSapFilterEntry=mcmBrgSapFilterEntry, mcmBrgEtFilterPortIndex=mcmBrgEtFilterPortIndex, nvmBrgGlobalParamGroup=nvmBrgGlobalParamGroup, nvmBrgSpoofThresholdAge=nvmBrgSpoofThresholdAge, mcmBrgTpCounterZero=mcmBrgTpCounterZero, nvmBrgMaxAge=nvmBrgMaxAge, mcmBrgGlobalParamGroup=mcmBrgGlobalParamGroup, nvmBrgConfPortEntry=nvmBrgConfPortEntry, mcmBrgStpPortCounterZero=mcmBrgStpPortCounterZero, nvmBrgSpoofCacheAge=nvmBrgSpoofCacheAge, nvmBrgEtFilterEntry=nvmBrgEtFilterEntry, nvmBrgPriority=nvmBrgPriority, nvmBrgEtFilterEType=nvmBrgEtFilterEType, mcmBrgEtFilterTable=mcmBrgEtFilterTable, mcmBrgSapFilterEType=mcmBrgSapFilterEType, nvmBrgEtFilterNumber=nvmBrgEtFilterNumber, nvmBrgMacFilterPortIndex=nvmBrgMacFilterPortIndex, mcmBrgCntr=mcmBrgCntr, mcmBrgEtFilterNumber=mcmBrgEtFilterNumber, nvmBrgSapFilterLowerRange=nvmBrgSapFilterLowerRange, nvmBrgConfPortSapInclExcl=nvmBrgConfPortSapInclExcl, Timeout=Timeout, mcmBrgSpoofThresholdCount=mcmBrgSpoofThresholdCount, mcmBrgSapFilterStatus=mcmBrgSapFilterStatus, mcmBrgSapFilterLowerRange=mcmBrgSapFilterLowerRange, nvmBrgSapFilterStatus=nvmBrgSapFilterStatus, mcmBrgEtFilterUpperRange=mcmBrgEtFilterUpperRange, mcmBrgNumInterfaces=mcmBrgNumInterfaces, nvmBrgSapFilterEntry=nvmBrgSapFilterEntry, mcmBrgMacFilterNumber=mcmBrgMacFilterNumber, nvmBrgConfPortEtFilterFlag=nvmBrgConfPortEtFilterFlag, mcmBrgSapFilterUpperRange=mcmBrgSapFilterUpperRange, nvmBrgFwdDelay=nvmBrgFwdDelay, nvmBrgEtFilterStatus=nvmBrgEtFilterStatus, nvmBrgMiscParamGroup=nvmBrgMiscParamGroup, mcmBrgEtFilterStatus=mcmBrgEtFilterStatus, mcmBrgSapFilterPortIndex=mcmBrgSapFilterPortIndex, mcmBrgMacFilterEntry=mcmBrgMacFilterEntry, mcmBrgAgeTime=mcmBrgAgeTime, nvmBrgAgeTime=nvmBrgAgeTime, mcmBrgConfPortType=mcmBrgConfPortType, nvmBrgConfPortMacFilterFlag=nvmBrgConfPortMacFilterFlag, nvmBrgEtFilterTable=nvmBrgEtFilterTable, mcmBrgConfPortEtInclExcl=mcmBrgConfPortEtInclExcl, nvmBrgConfPortPriority=nvmBrgConfPortPriority, nvmBrgHelloTime=nvmBrgHelloTime, mcmBrgIPBridged=mcmBrgIPBridged, mcmBrg=mcmBrg, mcmBrgPortCntrZeroIndex=mcmBrgPortCntrZeroIndex, nvmBrgStpParamGroup=nvmBrgStpParamGroup, nvmBrgSapFilterPortIndex=nvmBrgSapFilterPortIndex, MacAddress=MacAddress, nvmBrgConfPortEnable=nvmBrgConfPortEnable, mcmBrgConfPortEtFilterFlag=mcmBrgConfPortEtFilterFlag, nvmBrgMacFilterNumber=nvmBrgMacFilterNumber, mcmBrgConfPortSapFilterFlag=mcmBrgConfPortSapFilterFlag, nvmBrgSpoofThresholdCount=nvmBrgSpoofThresholdCount, mcmBrgSapFilterNumber=mcmBrgSapFilterNumber, nvmBrgSpanEnable=nvmBrgSpanEnable, nvmBrgEtFilterUpperRange=nvmBrgEtFilterUpperRange, mcmBrgEtFilterEType=mcmBrgEtFilterEType, mcmBrgMacFilterTable=mcmBrgMacFilterTable, nvmBrgConfPortEtInclExcl=nvmBrgConfPortEtInclExcl, mcmBrgSapFilterTable=mcmBrgSapFilterTable, mcmBrgMacAddress=mcmBrgMacAddress, mcmBrgEtFilterEntry=mcmBrgEtFilterEntry, nvmBrgConfPortPathCost=nvmBrgConfPortPathCost, nvmBrgSapFilterUpperRange=nvmBrgSapFilterUpperRange, mcmBrgConfPortSapInclExcl=mcmBrgConfPortSapInclExcl, nvmBrgMacAddress=nvmBrgMacAddress, mcmBrgSpoofThresholdAge=mcmBrgSpoofThresholdAge, mcmBrgSpoofEnable=mcmBrgSpoofEnable, mcmBrgSpanEnable=mcmBrgSpanEnable, mcmBrgConfPortTable=mcmBrgConfPortTable, mcmBrgSpoofCacheAge=mcmBrgSpoofCacheAge, mcmBrgMacFilterPortIndex=mcmBrgMacFilterPortIndex, nvmBrgSpanDebugEnable=nvmBrgSpanDebugEnable, mcmBrgBasePortCounterZero=mcmBrgBasePortCounterZero, nvmBrgConfPortSapFilterFlag=nvmBrgConfPortSapFilterFlag, nvmBrgNumInterfaces=nvmBrgNumInterfaces, nvmBrgConfPortType=nvmBrgConfPortType, mcmBrgConfPortPPA=mcmBrgConfPortPPA, nvmBrgSpoofEnable=nvmBrgSpoofEnable, nvmBrgDebugEnable=nvmBrgDebugEnable, nvmBrgEtFilterLowerRange=nvmBrgEtFilterLowerRange, mcmBrgConfPortMacInclExcl=mcmBrgConfPortMacInclExcl, nvmBrgSapFilterNumber=nvmBrgSapFilterNumber, mcmBrgMiscParamGroup=mcmBrgMiscParamGroup, nvmBrgConfPortTable=nvmBrgConfPortTable, nvmBrgConfPortMacInclExcl=nvmBrgConfPortMacInclExcl)
