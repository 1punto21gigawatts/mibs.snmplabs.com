#
# PySNMP MIB module HPN-ICF-CATV-TRANSCEIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-CATV-TRANSCEIVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, Integer32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, iso, Bits, Unsigned32, Gauge32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Integer32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "iso", "Bits", "Unsigned32", "Gauge32", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpnicfCATVTransceiver = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94))
if mibBuilder.loadTexts: hpnicfCATVTransceiver.setLastUpdated('200807251008Z')
if mibBuilder.loadTexts: hpnicfCATVTransceiver.setOrganization('')
if mibBuilder.loadTexts: hpnicfCATVTransceiver.setContactInfo('')
if mibBuilder.loadTexts: hpnicfCATVTransceiver.setDescription(' The objects in this MIB module are used to manage and display common configuration for CATV(Community Antenna Television) transceiver module. ')
hpnicfCATVTransStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 1))
hpnicfCATVTransStatusScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 1, 1))
hpnicfCATVTransState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCATVTransState.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransState.setDescription(' The state of CATV transceiver. ')
hpnicfCATVTransInputPwr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 1, 1, 2), Integer32()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCATVTransInputPwr.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransInputPwr.setDescription(' The input power of CATV transceiver. If transceiver is not on site, the value should be zero. ')
hpnicfCATVTransOutputLevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 1, 1, 3), Integer32()).setUnits('dbuv').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCATVTransOutputLevel.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransOutputLevel.setDescription(' The output level of CATV transceiver. If transceiver is not on site, the value should be zero. ')
hpnicfCATVTransTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 1, 1, 4), Integer32()).setUnits('centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCATVTransTemperature.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransTemperature.setDescription(' The temperature of CATV transceiver. If transceiver is not on site, the value should be zero. ')
hpnicfCATVTransceiverMan = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 2))
hpnicfCATVTransCtrlScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 2, 1))
hpnicfCATVTransInputPwrLowerThr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 2, 1, 1), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCATVTransInputPwrLowerThr.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransInputPwrLowerThr.setDescription(" A threshold for the CATV transceiver's input power. When the input power of CATV transceiver is lower than threshold, a trap should be generated. ")
hpnicfCATVTransOutputLvlLowerThr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 2, 1, 2), Integer32()).setUnits('dbuv').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCATVTransOutputLvlLowerThr.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransOutputLvlLowerThr.setDescription(" A threshold for the CATV transceiver's output level. When the output level of CATV transceiver is lower than threshold, a trap should be generated. ")
hpnicfCATVTransTempratureUpperThr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 2, 1, 3), Integer32()).setUnits('').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCATVTransTempratureUpperThr.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransTempratureUpperThr.setDescription(" A threshold for the CATV transceiver's temperature. When the temperature of CATV transceiver is higher than threshold, a trap should be generated. ")
hpnicfCATVTansTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3))
hpnicfCATVTransTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0))
hpnicfCATVTransInputPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0, 1)).setObjects(("HPN-ICF-CATV-TRANSCEIVER-MIB", "hpnicfCATVTransInputPwr"))
if mibBuilder.loadTexts: hpnicfCATVTransInputPwrTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransInputPwrTrap.setDescription(' A hpnicfCATVTransInputPwrTrap notification is sent when the input power of CATV transceiver is lower than the threshold. ')
hpnicfCATVTransInputPwrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0, 2)).setObjects(("HPN-ICF-CATV-TRANSCEIVER-MIB", "hpnicfCATVTransInputPwr"))
if mibBuilder.loadTexts: hpnicfCATVTransInputPwrReTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransInputPwrReTrap.setDescription(' A hpnicfCATVTransInputPwrReTrap notification is sent when the input power of CATV transceiver recovered from the last trap. ')
hpnicfCATVTransOutputLvlTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0, 3)).setObjects(("HPN-ICF-CATV-TRANSCEIVER-MIB", "hpnicfCATVTransOutputLevel"))
if mibBuilder.loadTexts: hpnicfCATVTransOutputLvlTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransOutputLvlTrap.setDescription(' A hpnicfCATVTransOutputLvlTrap notification is sent when the output level of CATV transceiver is lower than the threshold. ')
hpnicfCATVTransOutputLvlReTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0, 4)).setObjects(("HPN-ICF-CATV-TRANSCEIVER-MIB", "hpnicfCATVTransOutputLevel"))
if mibBuilder.loadTexts: hpnicfCATVTransOutputLvlReTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransOutputLvlReTrap.setDescription(' A hpnicfCATVTransOutputLvlReTrap notification is sent when the output level of CATV transceiver recovered from the last trap. ')
hpnicfCATVTransTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0, 5)).setObjects(("HPN-ICF-CATV-TRANSCEIVER-MIB", "hpnicfCATVTransTemperature"))
if mibBuilder.loadTexts: hpnicfCATVTransTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransTemperatureTrap.setDescription(' A hpnicfCATVTransTemperatureTrap notification is sent when the temperature of CATV transceiver is higher than the threshold. ')
hpnicfCATVTransTemperatureReTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 94, 3, 0, 6)).setObjects(("HPN-ICF-CATV-TRANSCEIVER-MIB", "hpnicfCATVTransTemperature"))
if mibBuilder.loadTexts: hpnicfCATVTransTemperatureReTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfCATVTransTemperatureReTrap.setDescription(' A hpnicfCATVTransTemperatureReTrap notification is sent when the temperature of CATV transceiver recovered from the last trap. ')
mibBuilder.exportSymbols("HPN-ICF-CATV-TRANSCEIVER-MIB", PYSNMP_MODULE_ID=hpnicfCATVTransceiver, hpnicfCATVTransOutputLevel=hpnicfCATVTransOutputLevel, hpnicfCATVTansTrap=hpnicfCATVTansTrap, hpnicfCATVTransOutputLvlReTrap=hpnicfCATVTransOutputLvlReTrap, hpnicfCATVTransInputPwrLowerThr=hpnicfCATVTransInputPwrLowerThr, hpnicfCATVTransInputPwr=hpnicfCATVTransInputPwr, hpnicfCATVTransState=hpnicfCATVTransState, hpnicfCATVTransCtrlScalarObjects=hpnicfCATVTransCtrlScalarObjects, hpnicfCATVTransceiverMan=hpnicfCATVTransceiverMan, hpnicfCATVTransInputPwrReTrap=hpnicfCATVTransInputPwrReTrap, hpnicfCATVTransStatusScalarObjects=hpnicfCATVTransStatusScalarObjects, hpnicfCATVTransOutputLvlLowerThr=hpnicfCATVTransOutputLvlLowerThr, hpnicfCATVTransOutputLvlTrap=hpnicfCATVTransOutputLvlTrap, hpnicfCATVTransTemperatureReTrap=hpnicfCATVTransTemperatureReTrap, hpnicfCATVTransInputPwrTrap=hpnicfCATVTransInputPwrTrap, hpnicfCATVTransStatus=hpnicfCATVTransStatus, hpnicfCATVTransTemperature=hpnicfCATVTransTemperature, hpnicfCATVTransTempratureUpperThr=hpnicfCATVTransTempratureUpperThr, hpnicfCATVTransceiver=hpnicfCATVTransceiver, hpnicfCATVTransTemperatureTrap=hpnicfCATVTransTemperatureTrap, hpnicfCATVTransTrapPrefix=hpnicfCATVTransTrapPrefix)
