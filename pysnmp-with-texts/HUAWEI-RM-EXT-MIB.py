#
# PySNMP MIB module HUAWEI-RM-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-RM-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
entPhysicalIndex, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalName")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, Integer32, Counter64, IpAddress, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Gauge32, ObjectIdentity, TimeTicks, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "IpAddress", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Gauge32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Bits")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hwRmExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145))
hwRmExt.setRevisions(('2014-12-11 00:00', '2014-12-10 00:00', '2014-12-09 00:00', '2014-06-30 00:00', '2014-06-20 00:00', '2013-06-09 00:00', '2013-04-22 15:26', '2010-11-25 00:00', '2010-08-20 00:00', '2008-11-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwRmExt.setRevisionsDescriptions(('Version: V2.06, modify hwEvpnMacLimitTrapObjects to hwEvpnMacObjects, modify hwEvpnMacLimitTraps, add hwEvpnMacUpperLimitValue, hwEvpnMacLowerLimitValue, hwEvpnMacLimitValue.', 'Version: V2.05, Add hwEvpnMacLimitTrapObjects, hwEvpnMacLimitTraps, hwEvpnMacLimitConformance.', "updated the static-route description text , it's length change from 35 to 80.", 'golbal->global.', 'add hwRmInfo, hwIpv6PrefixLimitVpnName, hwL3vpnIpv6PrefixLimitTraps.', 'V1.4, destionation->destination.', 'V1.3, add IPv6 static route table mib.', 'V1.2, updated the description.', 'V1.1, modify format of enumerations and description.', 'V1.0, the first draft',))
if mibBuilder.loadTexts: hwRmExt.setLastUpdated('201412110000Z')
if mibBuilder.loadTexts: hwRmExt.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwRmExt.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwRmExt.setDescription('This mib file is used for Manage the static route table configuration.')
hwRmExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1))
hwStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1), )
if mibBuilder.loadTexts: hwStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteTable.setDescription('The table is used for creating static routes. The indexes of this table are hwStaticRouteSourceVpnName, hwStaticRouteDestIpAddr,hwStaticRouteDestMaskAddr, hwStaticRouteDestVpnName,hwStaticRouteNextHop,hwStaticRouteOutIfIndex.')
hwStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteSourceVpnName"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteDestIpAddr"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteDestMaskAddr"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteDestVpnName"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteNextHop"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteOutIfIndex"))
if mibBuilder.loadTexts: hwStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteEntry.setDescription('The table is used for creating static routes. The indexes of this entry are hwStaticRouteSourceVpnName, hwStaticRouteDestIpAddr,hwStaticRouteDestMaskAddr, hwStaticRouteDestVpnName,hwStaticRouteNextHop,hwStaticRouteOutIfIndex.')
hwStaticRouteSourceVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwStaticRouteSourceVpnName.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteSourceVpnName.setDescription('The source VPN of static routes.')
hwStaticRouteDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwStaticRouteDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDestIpAddr.setDescription('The destination IP address of this route.')
hwStaticRouteDestMaskAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwStaticRouteDestMaskAddr.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDestMaskAddr.setDescription('Indicate the mask of the destination address.')
hwStaticRouteDestVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwStaticRouteDestVpnName.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDestVpnName.setDescription('The destination VPN for gateway address.')
hwStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: hwStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteNextHop.setDescription('The next hop of static routes.')
hwStaticRouteOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 6), Unsigned32())
if mibBuilder.loadTexts: hwStaticRouteOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteOutIfIndex.setDescription('The out interface ifnet index of static routes.')
hwStaticRouteBfdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteBfdName.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteBfdName.setDescription('This object indicates the name of a BFD session to which static routes are to be bound.')
hwStaticRoutePrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRoutePrefer.setStatus('current')
if mibBuilder.loadTexts: hwStaticRoutePrefer.setDescription('The preference of static routes.')
hwStaticRouteDescrip = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteDescrip.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDescrip.setDescription('The description of the static routes.')
hwStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteRowStatus.setDescription('Indicates the row status. Options: 1. active(1) -when this leaf is queried, the value is fixed to active(1) 2. createAndGo(4) -create a static route 3. destroy(6) -delete a static route ')
hwRouteStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2), )
if mibBuilder.loadTexts: hwRouteStatTable.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatTable.setDescription('This entity is a route statistics table. The indexes of this table are hwRouteStatVpnName and hwRouteStatProtocolId.')
hwRouteStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwRouteStatVpnName"), (0, "HUAWEI-RM-EXT-MIB", "hwRouteStatProtocolId"))
if mibBuilder.loadTexts: hwRouteStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatEntry.setDescription('This entity is a route statistics table. The indexes of this entry are hwRouteStatVpnName and hwRouteStatProtocolId.')
hwRouteStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwRouteStatVpnName.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatVpnName.setDescription('The name of the VPN instance for static routes.')
hwRouteStatProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8))).clone(namedValues=NamedValues(("direct", 1), ("static", 2), ("ospf", 3), ("isis", 6), ("rip", 7), ("bgp", 8))))
if mibBuilder.loadTexts: hwRouteStatProtocolId.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatProtocolId.setDescription('Specifies the protocol ID of the route. Options: 1. direct(1) -indicates the direct route 2. static(2) -indicates the static route 3. ospf(3) -indicates the OSPF route 4. isis(6) -indicates the IS-IS route 5. rip(7) -indicates the RIP route 6. bgp(8) -indicates the BGP route')
hwRouteStatTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouteStatTotal.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatTotal.setDescription('Total number of routes of a protocol.')
hwRouteStatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouteStatActive.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatActive.setDescription('Total number of active routes of a protocol.')
hwRouteStatAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouteStatAdded.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatAdded.setDescription('Total number of added routes of a protocol.')
hwRouteStatDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouteStatDeleted.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatDeleted.setDescription('Total number of deleted routes of a protocol.')
hwRouteStatFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRouteStatFreed.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatFreed.setDescription('Total number of released routes of a protocol.')
hwIpv6RouteStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3), )
if mibBuilder.loadTexts: hwIpv6RouteStatTable.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatTable.setDescription('This entity is an IPv6 route statistics table. Supports the statistics of DIRECT/STATIC/BGP/OSPFv3/ISIS/RIPng routes. The indexes of this table are hwIpv6RouteStatVpnName and hwIpv6RouteStatProtocolId.')
hwIpv6RouteStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatVpnName"), (0, "HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatProtocolId"))
if mibBuilder.loadTexts: hwIpv6RouteStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatEntry.setDescription('This entity is an IPv6 route statistics table. Supports the statistics of DIRECT/STATIC/BGP/OSPFv3/ISIS/RIPng routes. The indexes of this entry are hwIpv6RouteStatVpnName and hwIpv6RouteStatProtocolId. ')
hwIpv6RouteStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwIpv6RouteStatVpnName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatVpnName.setDescription('The name of the IPv6 VPN instance for static routes.')
hwIpv6RouteStatProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8))).clone(namedValues=NamedValues(("direct", 1), ("static", 2), ("ospf", 3), ("isis", 6), ("rip", 7), ("bgp", 8))))
if mibBuilder.loadTexts: hwIpv6RouteStatProtocolId.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatProtocolId.setDescription('Specifies the protocol ID of the route. Options: 1. direct(1) -indicates the IPv6 direct route 2. static(2) -indicates the IPv6 static route 3. ospf(3) -indicates the IPv6 OSPF route 4. isis(6) -indicates the IPv6 IS-IS route 5. rip(7) -indicates the IPv6 RIP route 6. bgp(8) -indicates the IPv6 BGP route')
hwIpv6RouteStatTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6RouteStatTotal.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatTotal.setDescription('Total number of routes of a protocol.')
hwIpv6RouteStatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6RouteStatActive.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatActive.setDescription('Total number of active routes of a protocol.')
hwIpv6RouteStatAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6RouteStatAdded.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatAdded.setDescription('Total number of added routes of a protocol.')
hwIpv6RouteStatDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6RouteStatDeleted.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatDeleted.setDescription('Total number of deleted routes of a protocol.')
hwIpv6RouteStatFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6RouteStatFreed.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatFreed.setDescription('Total number of released routes of a protocol.')
hwStaticRouteExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4), )
if mibBuilder.loadTexts: hwStaticRouteExtTable.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteExtTable.setDescription('This entity is a static route table. Supports the create/destroy/modify/display operation on static routes and BFD session binding/unbinding with static routes. The indexes of this table are hwStaticRouteSourceVpnNameExt, hwStaticRouteDestIpAddrExt, hwStaticRouteDestMaskAddrExt, hwStaticRouteNextHopExt, and hwStaticRouteOutIfIndexExt. ')
hwStaticRouteExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteSourceVpnNameExt"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteDestIpAddrExt"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteDestMaskAddrExt"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteNextHopExt"), (0, "HUAWEI-RM-EXT-MIB", "hwStaticRouteOutIfIndexExt"))
if mibBuilder.loadTexts: hwStaticRouteExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteExtEntry.setDescription('This entity is a static route table. Supports the create/destroy/modify/display operation on static routes and BFD session binding/unbinding with static routes. The indexes of this entry are hwStaticRouteSourceVpnNameExt, hwStaticRouteDestIpAddrExt, hwStaticRouteDestMaskAddrExt, hwStaticRouteNextHopExt, and hwStaticRouteOutIfIndexExt.')
hwStaticRouteSourceVpnNameExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwStaticRouteSourceVpnNameExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteSourceVpnNameExt.setDescription('The name of source VPN for static route.')
hwStaticRouteDestIpAddrExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwStaticRouteDestIpAddrExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDestIpAddrExt.setDescription('The destination IP address of this route.')
hwStaticRouteDestMaskAddrExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwStaticRouteDestMaskAddrExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDestMaskAddrExt.setDescription('The mask of the destination address.')
hwStaticRouteNextHopExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwStaticRouteNextHopExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteNextHopExt.setDescription('The next hop of static route.')
hwStaticRouteOutIfIndexExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 5), Unsigned32())
if mibBuilder.loadTexts: hwStaticRouteOutIfIndexExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteOutIfIndexExt.setDescription('The ifnet index of the outgoing interface of static route.')
hwStaticRouteDestVpnNameExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteDestVpnNameExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDestVpnNameExt.setDescription('The name of the destination VPN for gateway address.')
hwStaticRouteBfdNameExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteBfdNameExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteBfdNameExt.setDescription('This object indicates the name of a BFD session to which static routes are to be bound.')
hwStaticRoutePreferExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRoutePreferExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRoutePreferExt.setDescription('The preference of static route.')
hwStaticRouteDescripExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteDescripExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteDescripExt.setDescription('The description of static route.')
hwStaticRouteRowStatusExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteRowStatusExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteRowStatusExt.setDescription('The operation for static route.')
hwStaticRoutePermanentExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("permanent", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRoutePermanentExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRoutePermanentExt.setDescription('Specifies the permanent-Advertising attribute of the static route: Options: 1. none(0) -indicates that the permanent-Advertising attribute is not specified 2. permanent(1) -indicates that the permanent-Advertising attribute is specified')
hwStaticRouteLdpSyncExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("ldpsync", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStaticRouteLdpSyncExt.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteLdpSyncExt.setDescription('Specifies the LdpSync-Advertising attribute of the static route: Options: 1. none(0) -indicates that the LdpSync-Advertising attribute is not specified 2. ldpsync(1) -indicates that the LdpSync-Advertising attribute is specified')
hwIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5), )
if mibBuilder.loadTexts: hwIpv6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteTable.setDescription('This entity is an IPv6 static route table. Supports the create/destroy/modify/display operation on static routes and BFD session binding/unbinding with static routes. ')
hwIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteSourceVpnName"), (0, "HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteDestIpAddr"), (0, "HUAWEI-RM-EXT-MIB", "hwIpv6StaticRoutePrefixLen"), (0, "HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteNextHop"), (0, "HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteOutIfIndex"))
if mibBuilder.loadTexts: hwIpv6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteEntry.setDescription('This entity is an IPv6 static route table. Supports the create/destroy/modify/display operation on Ipv6 static routes and BFD session binding/unbinding with static routes. ')
hwIpv6StaticRouteSourceVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwIpv6StaticRouteSourceVpnName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteSourceVpnName.setDescription('The name of source VPN for IPv6 static route.')
hwIpv6StaticRouteDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: hwIpv6StaticRouteDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteDestIpAddr.setDescription('The destination IPv6 address of this route.')
hwIpv6StaticRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwIpv6StaticRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRoutePrefixLen.setDescription('The mask length of the IPv6 address.')
hwIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 4), Ipv6Address())
if mibBuilder.loadTexts: hwIpv6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteNextHop.setDescription('The next hop of an IPv6 static route.')
hwIpv6StaticRouteOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 5), Unsigned32())
if mibBuilder.loadTexts: hwIpv6StaticRouteOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteOutIfIndex.setDescription('The interface index of the outgoing interface of an IPv6 static route.')
hwIpv6StaticRouteDestVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteDestVpnName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteDestVpnName.setDescription('The name of the destination VPN for IPv6 static route.')
hwIpv6StaticRouteBfdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteBfdName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteBfdName.setDescription('The name of a BFD session to which IPv6 static routes are to be bound.')
hwIpv6StaticRouteNqaAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteNqaAdminName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteNqaAdminName.setDescription('The admin name of a NQA to which IPv6 static routes are to be bound.')
hwIpv6StaticRouteNqaTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteNqaTestName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteNqaTestName.setDescription('The test name of a NQA to which IPv6 static routes are to be bound.')
hwIpv6StaticRoutePrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRoutePrefer.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRoutePrefer.setDescription('The preference of an IPv6 static route.')
hwIpv6StaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteTag.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteTag.setDescription('The tag of an IPv6 static route.')
hwIpv6StaticRouteDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteDescr.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteDescr.setDescription('The description of an IPv6 static route.')
hwIpv6StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 5, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpv6StaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteRowStatus.setDescription('The operation for an IPv6 static route.')
hwRmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 6))
hwIpv4PrefixNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv4PrefixNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixNum.setDescription('Total number of IPv4 prefix.')
hwIpv6PrefixNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 1, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6PrefixNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixNum.setDescription('Total number of IPv6 prefix.')
hwRmExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2))
hwRmExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 1))
hwRmExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 1, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwStaticRouteGroup"), ("HUAWEI-RM-EXT-MIB", "hwRouteStatGroup"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteExtGroup"), ("HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRmExtCompliance = hwRmExtCompliance.setStatus('current')
if mibBuilder.loadTexts: hwRmExtCompliance.setDescription('The compliance statement for Route Management MIB.')
hwRmExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2))
hwStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwStaticRouteBfdName"), ("HUAWEI-RM-EXT-MIB", "hwStaticRoutePrefer"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteDescrip"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStaticRouteGroup = hwStaticRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteGroup.setDescription('Static routes table group.')
hwRouteStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwRouteStatTotal"), ("HUAWEI-RM-EXT-MIB", "hwRouteStatActive"), ("HUAWEI-RM-EXT-MIB", "hwRouteStatAdded"), ("HUAWEI-RM-EXT-MIB", "hwRouteStatDeleted"), ("HUAWEI-RM-EXT-MIB", "hwRouteStatFreed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRouteStatGroup = hwRouteStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwRouteStatGroup.setDescription('Route statistic table group.')
hwIpv6RouteStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatTotal"), ("HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatActive"), ("HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatAdded"), ("HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatDeleted"), ("HUAWEI-RM-EXT-MIB", "hwIpv6RouteStatFreed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpv6RouteStatGroup = hwIpv6RouteStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpv6RouteStatGroup.setDescription('Route statistic table group.')
hwStaticRouteExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwStaticRouteDestVpnNameExt"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteBfdNameExt"), ("HUAWEI-RM-EXT-MIB", "hwStaticRoutePreferExt"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteRowStatusExt"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteDescripExt"), ("HUAWEI-RM-EXT-MIB", "hwStaticRoutePermanentExt"), ("HUAWEI-RM-EXT-MIB", "hwStaticRouteLdpSyncExt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStaticRouteExtGroup = hwStaticRouteExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwStaticRouteExtGroup.setDescription('Static route table group.')
hwIpv6StaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2, 5)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteDestVpnName"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteBfdName"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRoutePrefer"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteTag"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteRowStatus"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteNqaAdminName"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteNqaTestName"), ("HUAWEI-RM-EXT-MIB", "hwIpv6StaticRouteDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpv6StaticRouteGroup = hwIpv6StaticRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpv6StaticRouteGroup.setDescription('IPv6 static route table group.')
hwRmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 2, 2, 6)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRmInfoGroup = hwRmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwRmInfoGroup.setDescription('Route resource group.')
hwTunnelExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3))
hwTnl2L3vpnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 1), )
if mibBuilder.loadTexts: hwTnl2L3vpnTable.setStatus('current')
if mibBuilder.loadTexts: hwTnl2L3vpnTable.setDescription('This object indicates the tunnel ID and L3VPN table of this entity. The indexes of this table are hwL3vpnTnlId and hwVpnIndex.')
hwTnl2L3vpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 1, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwL3vpnTnlId"), (0, "HUAWEI-RM-EXT-MIB", "hwVpnIndex"))
if mibBuilder.loadTexts: hwTnl2L3vpnEntry.setStatus('current')
if mibBuilder.loadTexts: hwTnl2L3vpnEntry.setDescription('This object indicates the tunnel ID and L3VPN table of this entity. The indexes of this entry are hwL3vpnTnlId and hwVpnIndex.')
hwL3vpnTnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwL3vpnTnlId.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnTnlId.setDescription('The object indicates the tunnel ID.')
hwVpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: hwVpnIndex.setStatus('current')
if mibBuilder.loadTexts: hwVpnIndex.setDescription('The object indicates the VRF index of a VPN.')
hwVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnName.setStatus('current')
if mibBuilder.loadTexts: hwVpnName.setDescription('The object indicates the VPN name.')
hwTnl2VplsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2), )
if mibBuilder.loadTexts: hwTnl2VplsTable.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VplsTable.setDescription('The object indicates the tunnel ID and VPLS table of this entity. The indexes of this table are hwVplsTnlId and hwVplsVcId.')
hwTnl2VplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwVplsTnlId"), (0, "HUAWEI-RM-EXT-MIB", "hwVplsVcId"))
if mibBuilder.loadTexts: hwTnl2VplsEntry.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VplsEntry.setDescription('The object indicates the tunnel ID and VPLS table of this entity. The indexes of this entry are hwVplsTnlId and hwVplsVcId.')
hwVplsTnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwVplsTnlId.setStatus('current')
if mibBuilder.loadTexts: hwVplsTnlId.setDescription('The object indicates the tunnel ID.')
hwVplsVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwVplsVcId.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcId.setDescription('The object indicates the VC ID of a VPLS.')
hwVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hwVsiIndex.setDescription('The object indicates the VSI index of a VPLS.')
hwVsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVsiId.setStatus('current')
if mibBuilder.loadTexts: hwVsiId.setDescription('The object indicates the VSI ID of a VPLS.')
hwVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVsiName.setStatus('current')
if mibBuilder.loadTexts: hwVsiName.setDescription('The object indicates the VSI name of a VPLS.')
hwVplsVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsVcType.setStatus('current')
if mibBuilder.loadTexts: hwVplsVcType.setDescription('The object indicates the VC type of a VPLS.')
hwVplsPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVplsPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwVplsPeerIp.setDescription('The object indicates the peer IP address of a VPLS.')
hwTnl2Pwe3VllTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3), )
if mibBuilder.loadTexts: hwTnl2Pwe3VllTable.setStatus('current')
if mibBuilder.loadTexts: hwTnl2Pwe3VllTable.setDescription('The object indicates the tunnel ID and PWE3/VLL table of this entity. The indexes of this table are hwPwVllTnlId and hwAcIndex.')
hwTnl2Pwe3VllEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwPwVllTnlId"), (0, "HUAWEI-RM-EXT-MIB", "hwAcIndex"))
if mibBuilder.loadTexts: hwTnl2Pwe3VllEntry.setStatus('current')
if mibBuilder.loadTexts: hwTnl2Pwe3VllEntry.setDescription('The object indicates the tunnel ID and PWE3/VLL table of this entity. The indexes of this entry are hwPwVllTnlId and hwAcIndex.')
hwPwVllTnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwPwVllTnlId.setStatus('current')
if mibBuilder.loadTexts: hwPwVllTnlId.setDescription('The object indicates the tunnel ID.')
hwAcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwAcIndex.setStatus('current')
if mibBuilder.loadTexts: hwAcIndex.setDescription('The object indicates the AC index of a PWE3.')
hwPwVllIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVllIfName.setStatus('current')
if mibBuilder.loadTexts: hwPwVllIfName.setDescription('The object indicates the interface name of a PWE3.')
hwMasterSlaveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMasterSlaveFlag.setStatus('current')
if mibBuilder.loadTexts: hwMasterSlaveFlag.setDescription('The object indicates the master and slave flags of a PWE3.')
hwPwVllPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVllPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwPwVllPeerIp.setDescription('The object indicates the peer IP address of a PWE3.')
hwPwVllVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVllVcId.setStatus('current')
if mibBuilder.loadTexts: hwPwVllVcId.setDescription('The object indicates the VC ID of a PWE3.')
hwPwVllSvcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVllSvcFlag.setStatus('current')
if mibBuilder.loadTexts: hwPwVllSvcFlag.setDescription('This object indicates the type of a PWE3. Static PWs (1) Dynamic PWs (0)')
hwPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 255))).clone(namedValues=NamedValues(("frameRelayDlciMartini", 1), ("atmAal5SduVccTransport", 2), ("atmTransparentCellTransport", 3), ("vlan", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("cem", 8), ("atmN2OneVccCellTransport", 9), ("atmN2OneVpcCellTransport", 10), ("ipLayer2Transport", 11), ("atmOne2OneVccCellMode", 12), ("atmOne2OneVpcCellMode", 13), ("atmAal5PduVccTransport", 14), ("frameRelayPortMode", 15), ("cep", 16), ("saE1oP", 17), ("saT1oP", 18), ("saE3oP", 19), ("saT3oP", 20), ("cESoPsnBasicMode", 21), ("tDMoIPbasicMode", 22), ("l2VpnCESoPSNTDMwithCAS", 23), ("l2VpnTDMoIPTDMwithCAS", 24), ("frameRelayDlci", 25), ("ipInterworking", 64), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPwVcType.setStatus('current')
if mibBuilder.loadTexts: hwPwVcType.setDescription("Specifies an indication of the L2Vpn's VC encapsulation type: Options: 1: frameRelayDlciMartini(1) -indicates that the encapsulation type is Frame Relay DLCI(Martini Mode). 2: atmAal5SduVccTransport(2) -indicates that the encapsulation type is ATM AAL5 SDU VCC transport. 3: atmTransparentCellTransport(3) -indicates that the encapsulation type is ATM transparent cell transport. 4: vlan(4) -indicates that the encapsulation type is Vlan. 5: ethernet(5) -indicates that the encapsulation type is Ethernet. 6: hdlc(6) -indicates that the encapsulation type is HDLC. 7: ppp(7) -indicates that the encapsulation type is PPP. 8: cem(8) -indicates that the encapsulation type is SONET/SDH Circuit Emulation Service Over MPLS(CEM). 9: atmN2OneVccCellTransport(9) -indicates that the encapsulation type is ATM n-to-one VCC cell transport. 10: atmN2OneVpcCellTransport(10) -indicates that the encapsulation type is ATM n-to-one VPC cell transport. 11: ipLayer2Transport(11) -indicates that the encapsulation type is IP Layer2 Transport. 12: atmOne2OneVccCellMode(12) -indicates that the encapsulation type is ATM one-to-one VCC Cell Mode. 13: atmOne2OneVpcCellMode(13) -indicates that the encapsulation type is ATM one-to-one VPC Cell Mode. 14: atmAal5PduVccTransport(14) -indicates that the encapsulation type is ATM AAL5 PDU VCC transport. 15: frameRelayPortMode(15) -indicates that the encapsulation type is Frame-Relay Port mode. 16: cep(16) -indicates that the encapsulation type is SONET/SDH Circuit Emulation over Packet (CEP). 17: saE1oP(17) -indicates that the encapsulation type is Structure-agnostic E1 over Packet (SAE1oP). 18: saT1oP(18) -indicates that the encapsulation type is Structure-agnostic T1 (DS1) over Packet (SAT1oP). 19: saE3oP(19) -indicates that the encapsulation type is Structure-agnostic E3 over Packet (SAE3oP). 20: saT3oP(20) -indicates that the encapsulation type is Structure-agnostic T3 (DS3) over Packet (SAT3oP). 21: cESoPsnBasicMode(21) -indicates that the encapsulation type is CESoPSN basic mode. 22: tDMoIPbasicMode(22) -indicates that the encapsulation type is TDMoIP basic mode. 23: l2VpnCESoPSNTDMwithCAS(23) -indicates that the encapsulation type is CESoPSN TDM with CAS. 24: l2VpnTDMoIPTDMwithCAS(24) -indicates that the encapsulation type is TDMoIP TDM with CAS. 25: frameRelayDlci(25) -indicates that the encapsulation type is Frame Relay DLCI. 26: ipInterworking(64) -indicates that the encapsulation type is IP-interworking. 27: unknown(255) -indicates the unknown encapsulation type. ")
hwSvcReceiveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcReceiveLabel.setStatus('current')
if mibBuilder.loadTexts: hwSvcReceiveLabel.setDescription('This object indicates the inbound label.')
hwSvcTransmitLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSvcTransmitLabel.setStatus('current')
if mibBuilder.loadTexts: hwSvcTransmitLabel.setDescription('This object indicates the outbound label.')
hwTnlIf2TnlIdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 4), )
if mibBuilder.loadTexts: hwTnlIf2TnlIdTable.setStatus('current')
if mibBuilder.loadTexts: hwTnlIf2TnlIdTable.setDescription('This object indicates the tunnel interface and tunnel ID table of this entity. The index of this table is hwTunnelIf.')
hwTnlIf2TnlIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 4, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwTunnelIf"))
if mibBuilder.loadTexts: hwTnlIf2TnlIdEntry.setStatus('current')
if mibBuilder.loadTexts: hwTnlIf2TnlIdEntry.setDescription('This object indicates the tunnel interface and tunnel ID table of this entity. The index of this entry is hwTunnelIf.')
hwTunnelIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hwTunnelIf.setStatus('current')
if mibBuilder.loadTexts: hwTunnelIf.setDescription('The object indicates the tunnel interface name.')
hwTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwTunnelId.setDescription('The object indicates the tunnel ID.')
hwTnl2MultiHopPwe3Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 5), )
if mibBuilder.loadTexts: hwTnl2MultiHopPwe3Table.setStatus('current')
if mibBuilder.loadTexts: hwTnl2MultiHopPwe3Table.setDescription('This object indicates the tunnel ID and Multi-hop PWE3 table of this entity. The indexes of this table are hwMultiHopPwe3TnlId, hwMultiHopPwe3VcType, and hwMultiHopPwe3VcId.')
hwTnl2MultiHopPwe3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 5, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwMultiHopPwe3TnlId"), (0, "HUAWEI-RM-EXT-MIB", "hwMultiHopPwe3VcType"), (0, "HUAWEI-RM-EXT-MIB", "hwMultiHopPwe3VcId"))
if mibBuilder.loadTexts: hwTnl2MultiHopPwe3Entry.setStatus('current')
if mibBuilder.loadTexts: hwTnl2MultiHopPwe3Entry.setDescription('This object indicates the tunnel ID and Multi-hop PWE3 table of this entity. The indexes of this entry are hwMultiHopPwe3TnlId, hwMultiHopPwe3VcType, and hwMultiHopPwe3VcId.')
hwMultiHopPwe3TnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMultiHopPwe3TnlId.setStatus('current')
if mibBuilder.loadTexts: hwMultiHopPwe3TnlId.setDescription('The object indicates the tunnel ID.')
hwMultiHopPwe3VcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwMultiHopPwe3VcType.setStatus('current')
if mibBuilder.loadTexts: hwMultiHopPwe3VcType.setDescription('The object indicates the VC type of a Multi-hop PWE3.')
hwMultiHopPwe3VcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwMultiHopPwe3VcId.setStatus('current')
if mibBuilder.loadTexts: hwMultiHopPwe3VcId.setDescription('The object indicates the VC ID of a Multi-hop PWE3.')
hwMultiHopPwe3PeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 3, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMultiHopPwe3PeerIp.setStatus('current')
if mibBuilder.loadTexts: hwMultiHopPwe3PeerIp.setDescription('The object indicates the peer IP address of a Multi-hop PWE3.')
hwTunnelExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4))
hwTunnelExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 1))
hwTunnelExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 1, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwTnl2L3vpnGroup"), ("HUAWEI-RM-EXT-MIB", "hwTnl2VplsGroup"), ("HUAWEI-RM-EXT-MIB", "hwTnl2Pwe3VllGroup"), ("HUAWEI-RM-EXT-MIB", "hwTnlIf2TnlIdGroup"), ("HUAWEI-RM-EXT-MIB", "hwTnl2MultiHopPwe3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTunnelExtCompliance = hwTunnelExtCompliance.setStatus('current')
if mibBuilder.loadTexts: hwTunnelExtCompliance.setDescription('The object indicates the compliance statement for route management MIB.')
hwTunnelExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 2))
hwTnl2L3vpnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 2, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwVpnName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2L3vpnGroup = hwTnl2L3vpnGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnl2L3vpnGroup.setDescription('The object indicates the tunnel ID and L3VPN table group.')
hwTnl2VplsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 2, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwVsiIndex"), ("HUAWEI-RM-EXT-MIB", "hwVsiId"), ("HUAWEI-RM-EXT-MIB", "hwVsiName"), ("HUAWEI-RM-EXT-MIB", "hwVplsVcType"), ("HUAWEI-RM-EXT-MIB", "hwVplsPeerIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2VplsGroup = hwTnl2VplsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnl2VplsGroup.setDescription('The object indicates the tunnel ID and VPLS table group.')
hwTnl2Pwe3VllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 2, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMasterSlaveFlag"), ("HUAWEI-RM-EXT-MIB", "hwPwVllIfName"), ("HUAWEI-RM-EXT-MIB", "hwPwVllVcId"), ("HUAWEI-RM-EXT-MIB", "hwPwVllSvcFlag"), ("HUAWEI-RM-EXT-MIB", "hwPwVcType"), ("HUAWEI-RM-EXT-MIB", "hwSvcReceiveLabel"), ("HUAWEI-RM-EXT-MIB", "hwSvcTransmitLabel"), ("HUAWEI-RM-EXT-MIB", "hwPwVllPeerIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2Pwe3VllGroup = hwTnl2Pwe3VllGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnl2Pwe3VllGroup.setDescription('The object indicates the tunnel ID and PWE3/VLL table group.')
hwTnlIf2TnlIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 2, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwTunnelId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnlIf2TnlIdGroup = hwTnlIf2TnlIdGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnlIf2TnlIdGroup.setDescription('The object indicates the tunnel interface name and tunnel ID table group.')
hwTnl2MultiHopPwe3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 4, 2, 5)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMultiHopPwe3PeerIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnl2MultiHopPwe3Group = hwTnl2MultiHopPwe3Group.setStatus('current')
if mibBuilder.loadTexts: hwTnl2MultiHopPwe3Group.setDescription('The object indicates the tunnel ID and Multi-hop PWE3 table group.')
hwTnlGroupTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 5))
hwTnlDestination = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 5, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTnlDestination.setStatus('current')
if mibBuilder.loadTexts: hwTnlDestination.setDescription('The destination of the tunnel group.')
hwTnlPolicy = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTnlPolicy.setStatus('current')
if mibBuilder.loadTexts: hwTnlPolicy.setDescription('Tunnel policy name.')
hwTnlGroupTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 6))
hwTunnelGroupUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 6, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwTnlDestination"), ("HUAWEI-RM-EXT-MIB", "hwTnlPolicy"))
if mibBuilder.loadTexts: hwTunnelGroupUp.setStatus('current')
if mibBuilder.loadTexts: hwTunnelGroupUp.setDescription('Tunnels selected by the applications are defined by the next hop and the tunnel policy. If all the tunnels used for load balancing are Down, this trap will be sent to the user.')
hwTunnelGroupDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 6, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwTnlDestination"), ("HUAWEI-RM-EXT-MIB", "hwTnlPolicy"))
if mibBuilder.loadTexts: hwTunnelGroupDown.setStatus('current')
if mibBuilder.loadTexts: hwTunnelGroupDown.setDescription('Tunnels selected by the applications are defined by the next hop and the tunnel policy. If any one of the tunnels used for load balancing is Up, this trap will be sent to the user. ')
hwTnlGroupTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 7))
hwTnlGroupNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 7, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwTunnelGroupUp"), ("HUAWEI-RM-EXT-MIB", "hwTunnelGroupDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnlGroupNotificationGroup = hwTnlGroupNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnlGroupNotificationGroup.setDescription('The object indicates the Up/Down state of the tunnel group.')
hwTnlGroupObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 7, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwTnlDestination"), ("HUAWEI-RM-EXT-MIB", "hwTnlPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTnlGroupObjectGroup = hwTnlGroupObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwTnlGroupObjectGroup.setDescription('The object indicates the compliance statement for tunnel group trap.')
hwIpv4PrefixLimitTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 8))
hwCurIpv4PrefixNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 8, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCurIpv4PrefixNum.setStatus('current')
if mibBuilder.loadTexts: hwCurIpv4PrefixNum.setDescription('This object indicates the current number of IPv4 prefix.')
hwIpv4PrefixLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 8, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpv4PrefixLimitValue.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixLimitValue.setDescription('This object indicates the maximum number of IPv4 prefix can be added.')
hwIpv6PrefixLimitTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 9))
hwCurIpv6PrefixNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 9, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCurIpv6PrefixNum.setStatus('current')
if mibBuilder.loadTexts: hwCurIpv6PrefixNum.setDescription('This object indicates the current number of IPv6 prefix.')
hwIpv6PrefixLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 9, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpv6PrefixLimitValue.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixLimitValue.setDescription('This object indicates the maximum number of IPv6 prefix can be added.')
hwIpv6PrefixLimitVpnName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIpv6PrefixLimitVpnName.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixLimitVpnName.setDescription('The name of the IPv6 VPN instance for prefix limit.')
hwIpv4PrefixLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 10))
hwIpv4PrefixExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 10, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv4PrefixExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixExceed.setDescription('This notification is generated when the number of IPv4 prefixes exceeds or attempts to exceed the maximum allowed value as indicated by hwIpv4PrefixLimitValue.')
hwIpv4PrefixExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 10, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv4PrefixExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixExceedClear.setDescription('This notification is generated when the number of IPv4 prefixes exceeds the value indicated by hwIpv4PrefixLimitValue, and then falls below this value. A single notification MUST be generated when this threshold is exceeded, and no other notifications of this type should be issued until the value of hwCurIpv4PrefixNum has fallen below that of hwIpv4PrefixLimitValue.')
hwIpv4PrefixThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 10, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv4PrefixThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixThresholdExceed.setDescription('The number of IPv4 prefixes exceeded the threshold.')
hwIpv4PrefixThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 10, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv4PrefixThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixThresholdExceedClear.setDescription('The number of IPv4 prefixes falls below the threshold. ')
hwIpv6PrefixLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 11))
hwIpv6PrefixExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 11, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv6PrefixExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixExceed.setDescription('This notification is generated when the number of IPv6 prefixes exceeds or attempts to exceed the maximum allowed value as indicated by hwIpv6PrefixLimitValue.')
hwIpv6PrefixExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 11, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv6PrefixExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixExceedClear.setDescription('This notification is generated when the number of IPv6 prefixes exceeds the value indicated by hwIpv6PrefixLimitValue, and then falls below this value. A single notification MUST be generated when this threshold is exceeded, and no other notifications of this type should be issued until the value of hwCurIpv6PrefixNum has fallen below that of hwIpv6PrefixLimitValue.')
hwIpv6PrefixThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 11, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv6PrefixThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixThresholdExceed.setDescription('The number of IPv6 prefixes exceeded the threshold. ')
hwIpv6PrefixThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 11, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwIpv6PrefixThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixThresholdExceedClear.setDescription('The number of IPv6 prefixes falls below the threshold. ')
hwIpv4PrefixLimitConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 12))
hwIpv4PrefixLimitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 12, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixExceed"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixThresholdExceed"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixThresholdExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpv4PrefixLimitNotificationGroup = hwIpv4PrefixLimitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixLimitNotificationGroup.setDescription('The object indicates alarm of ipv4 prefixs.')
hwIpv4PrefixLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 12, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"), ("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpv4PrefixLimitObjectGroup = hwIpv4PrefixLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpv4PrefixLimitObjectGroup.setDescription('The object indicates the number of ipv4 prefixs.')
hwIpv6PrefixLimitConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 13))
hwIpv6PrefixLimitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 13, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixExceed"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixThresholdExceed"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixThresholdExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpv6PrefixLimitNotificationGroup = hwIpv6PrefixLimitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixLimitNotificationGroup.setDescription('The object indicates alarm of ipv4 prefixs.')
hwIpv6PrefixLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 13, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"), ("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpv6PrefixLimitObjectGroup = hwIpv6PrefixLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixLimitObjectGroup.setDescription('The object indicates the number of ipv6 prefixs.')
hwRmGresmTokenObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 14))
hwGresmTokenTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 14, 1), )
if mibBuilder.loadTexts: hwGresmTokenTable.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenTable.setDescription('Gresm token table.')
hwGresmTokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 14, 1, 1), ).setIndexNames((0, "HUAWEI-RM-EXT-MIB", "hwGresmTokenMode"), (0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwGresmTokenEntry.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenEntry.setDescription('Gresm token table.')
hwGresmTokenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("global1", 1), ("global2", 2), ("global3", 3), ("global4", 4), ("perborad", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwGresmTokenMode.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenMode.setDescription('Specifies the aolloc mode of token. Options: 1. global1(1) -indicates that the global table 1 2. global2(2) -indicates that the global table 2 3. global3(3) -indicates that the global table 3 4. global4(4) -indicates that the global table 4 5. perborad(5) -indicates that the per borad')
hwGresmTokenUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 14, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwGresmTokenUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenUsedNum.setDescription('The object identifies the number of tokens used currently.')
hwGresmTokenMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 14, 1, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwGresmTokenMaxValue.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenMaxValue.setDescription('This object indicates the max value of Token')
hwGresmTokenTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 15))
hwGresmTokenExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 15, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenUsedNum"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenMaxValue"))
if mibBuilder.loadTexts: hwGresmTokenExceed.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenExceed.setDescription('The token count reaches the upper limit.')
hwGresmTokenExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 15, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenUsedNum"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenMaxValue"))
if mibBuilder.loadTexts: hwGresmTokenExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenExceedClear.setDescription('The token count falls from the upper limit.')
hwGresmTokenThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 15, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenUsedNum"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenMaxValue"))
if mibBuilder.loadTexts: hwGresmTokenThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenThresholdExceed.setDescription('The token usage exceeds the threshold.')
hwGresmTokenThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 15, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenUsedNum"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenMaxValue"))
if mibBuilder.loadTexts: hwGresmTokenThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenThresholdExceedClear.setDescription('The token usage falls from the threshold.')
hwGresmTokenTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 16))
hwGresmTokenNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 16, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwGresmTokenExceed"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenThresholdExceed"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenThresholdExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGresmTokenNotificationGroup = hwGresmTokenNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenNotificationGroup.setDescription('The object indicates alarm of Token.')
hwGresmTokenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 16, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwGresmTokenMode"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenUsedNum"), ("HUAWEI-RM-EXT-MIB", "hwGresmTokenMaxValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGresmTokenGroup = hwGresmTokenGroup.setStatus('current')
if mibBuilder.loadTexts: hwGresmTokenGroup.setDescription('A collection of objects for Token alarm.')
hwRmExtRouteObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 17))
hwRmExtRouteTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 18))
hwRmExtRouteTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19))
hwPublicIpv4PrefixLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 1))
hwPublicIpv4PrefixExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 1, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv4PrefixExceed.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv4PrefixExceed.setDescription('This object indicates that the public IPv4 prefixes has exceeded the maximum value.')
hwPublicIpv4PrefixExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 1, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv4PrefixExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv4PrefixExceedClear.setDescription('This object indicates that the public IPv4 prefixes have resumed from exceeding the maximum vlaue.')
hwPublicIpv4PrefixThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 1, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv4PrefixThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv4PrefixThresholdExceed.setDescription('This object indicates that the public IPv4 prefixes has exceeded the threshold.')
hwPublicIpv4PrefixThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 1, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv4PrefixThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv4PrefixThresholdExceedClear.setDescription('This object indicates that the public IPv4 prefixes have resumed from exceeding the threshold. ')
hwPublicIpv6PrefixLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 2))
hwPublicIpv6PrefixExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 2, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv6PrefixExceed.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv6PrefixExceed.setDescription('This object indicates that the public IPv6 prefixes has exceeded the maximum vlaue.')
hwPublicIpv6PrefixExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 2, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv6PrefixExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv6PrefixExceedClear.setDescription('This object indicates that the public IPv6 prefixes have resumed from exceeding the maximum vlaue.')
hwPublicIpv6PrefixThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 2, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv6PrefixThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv6PrefixThresholdExceed.setDescription('This object indicates that the public IPv6 prefixes has exceeded the threshold. ')
hwPublicIpv6PrefixThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 2, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwPublicIpv6PrefixThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv6PrefixThresholdExceedClear.setDescription('This object indicates that the public IPv6 prefixes have resumed from exceeding the threshold. ')
hwL3vpnIpv6PrefixLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 3))
hwL3vpnIpv6PrefixExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 3, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitVpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixExceed.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixExceed.setDescription('This object indicates that the vpn instance IPv6 prefixes has exceeded the maximum vlaue.')
hwL3vpnIpv6PrefixExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 3, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitVpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixExceedClear.setDescription('This object indicates that the vpn instance IPv6 prefixes have resumed from exceeding the maximum vlaue.')
hwL3vpnIpv6PrefixThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 19, 3, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitVpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixThresholdExceed.setDescription('This object indicates that the vpn instance IPv6 prefixes has exceeded the threshold. ')
hwRmExtRouteConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20))
hwRmExtRouteCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwPublicIpv4PrefixLimitNotificationGroup"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv4PrefixLimitObjectGroup"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv6PrefixLimitNotificationGroup"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv6PrefixLimitObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRmExtRouteCompliances = hwRmExtRouteCompliances.setStatus('current')
if mibBuilder.loadTexts: hwRmExtRouteCompliances.setDescription('The compliance statement for HUAWEI-RM-EXT-MIB.')
hwRmExtRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2))
hwPublicIpv4PrefixLimitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 1))
hwPublicIpv4PrefixLimitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 1, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwPublicIpv4PrefixExceed"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv4PrefixExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv4PrefixThresholdExceed"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv4PrefixThresholdExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPublicIpv4PrefixLimitNotificationGroup = hwPublicIpv4PrefixLimitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv4PrefixLimitNotificationGroup.setDescription('The object indicates alarm of public ipv4 prefixs.')
hwPublicIpv4PrefixLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 1, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv4PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv4PrefixLimitValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPublicIpv4PrefixLimitObjectGroup = hwPublicIpv4PrefixLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv4PrefixLimitObjectGroup.setDescription('The object indicates the number of ipv4 prefixs.')
hwPublicIpv6PrefixLimitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 2))
hwPublicIpv6PrefixLimitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 2, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwPublicIpv6PrefixExceed"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv6PrefixExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv6PrefixThresholdExceed"), ("HUAWEI-RM-EXT-MIB", "hwPublicIpv6PrefixThresholdExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPublicIpv6PrefixLimitNotificationGroup = hwPublicIpv6PrefixLimitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv6PrefixLimitNotificationGroup.setDescription('The object indicates alarm of ipv6 prefixs.')
hwPublicIpv6PrefixLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 2, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPublicIpv6PrefixLimitObjectGroup = hwPublicIpv6PrefixLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPublicIpv6PrefixLimitObjectGroup.setDescription('The object indicates the number of ipv6 prefixs.')
hwL3vpnIpv6PrefixLimitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 3))
hwL3vpnIpv6PrefixLimitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 3, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwL3vpnIpv6PrefixExceed"), ("HUAWEI-RM-EXT-MIB", "hwL3vpnIpv6PrefixExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwL3vpnIpv6PrefixThresholdExceed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnIpv6PrefixLimitNotificationGroup = hwL3vpnIpv6PrefixLimitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixLimitNotificationGroup.setDescription('The object indicates alarm of ipv6 VPN instance prefixs.')
hwL3vpnIpv6PrefixLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 20, 2, 3, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitVpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurIpv6PrefixNum"), ("HUAWEI-RM-EXT-MIB", "hwIpv6PrefixLimitValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3vpnIpv6PrefixLimitObjectGroup = hwL3vpnIpv6PrefixLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwL3vpnIpv6PrefixLimitObjectGroup.setDescription('The object indicates the number of ipv6 VPN instance prefixs.')
hwEvpnMacObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 21))
hwMacLimitEvpnName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 21, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMacLimitEvpnName.setStatus('current')
if mibBuilder.loadTexts: hwMacLimitEvpnName.setDescription('The name of the EVPN instance for MAC limit.')
hwCurMacNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 21, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCurMacNum.setStatus('current')
if mibBuilder.loadTexts: hwCurMacNum.setDescription('This object indicates the current number of MAC addresses of the EVPN instance.')
hwEvpnMacUpperLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 21, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEvpnMacUpperLimitValue.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacUpperLimitValue.setDescription('This object indicates the upper limit value of MAC addresses of the EVPN instance.')
hwEvpnMacLowerLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 21, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEvpnMacLowerLimitValue.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacLowerLimitValue.setDescription('This object indicates the lower limit value of MAC addresses of the EVPN instance.')
hwEvpnMacLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 21, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEvpnMacLimitValue.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacLimitValue.setDescription('This object indicates the max value of MAC addresses of the EVPN instance.')
hwEvpnMacLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 22))
hwEvpnMacExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 22, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMacLimitEvpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurMacNum"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacLimitValue"))
if mibBuilder.loadTexts: hwEvpnMacExceed.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacExceed.setDescription('This object indicates that the number of MAC addresses of the EVPN instance has exceeded the maximum value.')
hwEvpnMacExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 22, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMacLimitEvpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurMacNum"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacLimitValue"))
if mibBuilder.loadTexts: hwEvpnMacExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacExceedClear.setDescription('This object indicates that the number of MAC addresses of the EVPN instance has resumed from exceeding the maximum value.')
hwEvpnMacThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 22, 3)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMacLimitEvpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurMacNum"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacLimitValue"))
if mibBuilder.loadTexts: hwEvpnMacThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacThresholdExceed.setDescription('This object indicates that the number of MAC addresses of the EVPN instance has exceeded the threshold value.')
hwEvpnMacThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 22, 4)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMacLimitEvpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurMacNum"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacLimitValue"))
if mibBuilder.loadTexts: hwEvpnMacThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacThresholdExceedClear.setDescription('This object indicates that the number of MAC addresses of the EVPN instance has resumed from exceeding the threshold value.')
hwEvpnMacLimitConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 23))
hwEvpnMacLimitNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 23, 1)).setObjects(("HUAWEI-RM-EXT-MIB", "hwEvpnMacExceed"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacExceedClear"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacThresholdExceed"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacThresholdExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEvpnMacLimitNotificationGroup = hwEvpnMacLimitNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacLimitNotificationGroup.setDescription('The object indicates the alarm of MAC addresses of the EVPN instance.')
hwEvpnMacLimitObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 145, 23, 2)).setObjects(("HUAWEI-RM-EXT-MIB", "hwMacLimitEvpnName"), ("HUAWEI-RM-EXT-MIB", "hwCurMacNum"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacUpperLimitValue"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacLowerLimitValue"), ("HUAWEI-RM-EXT-MIB", "hwEvpnMacLimitValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEvpnMacLimitObjectGroup = hwEvpnMacLimitObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwEvpnMacLimitObjectGroup.setDescription('The object indicates the number of MAC addresses of the EVPN instance.')
mibBuilder.exportSymbols("HUAWEI-RM-EXT-MIB", hwGresmTokenTraps=hwGresmTokenTraps, hwVpnIndex=hwVpnIndex, hwTnl2L3vpnEntry=hwTnl2L3vpnEntry, hwRouteStatEntry=hwRouteStatEntry, hwStaticRouteDestMaskAddr=hwStaticRouteDestMaskAddr, hwIpv6RouteStatTable=hwIpv6RouteStatTable, hwTnlIf2TnlIdEntry=hwTnlIf2TnlIdEntry, hwGresmTokenGroup=hwGresmTokenGroup, hwPublicIpv6PrefixLimitGroup=hwPublicIpv6PrefixLimitGroup, hwVplsVcId=hwVplsVcId, hwTnlDestination=hwTnlDestination, hwL3vpnIpv6PrefixExceed=hwL3vpnIpv6PrefixExceed, hwStaticRouteNextHop=hwStaticRouteNextHop, hwIpv6PrefixLimitValue=hwIpv6PrefixLimitValue, hwIpv6StaticRouteSourceVpnName=hwIpv6StaticRouteSourceVpnName, hwGresmTokenUsedNum=hwGresmTokenUsedNum, hwIpv6PrefixNum=hwIpv6PrefixNum, hwIpv6StaticRouteRowStatus=hwIpv6StaticRouteRowStatus, hwRmExt=hwRmExt, hwIpv6StaticRoutePrefixLen=hwIpv6StaticRoutePrefixLen, hwGresmTokenTrapConformance=hwGresmTokenTrapConformance, hwIpv6PrefixThresholdExceedClear=hwIpv6PrefixThresholdExceedClear, hwStaticRouteDestMaskAddrExt=hwStaticRouteDestMaskAddrExt, hwGresmTokenExceedClear=hwGresmTokenExceedClear, hwGresmTokenNotificationGroup=hwGresmTokenNotificationGroup, hwEvpnMacLimitValue=hwEvpnMacLimitValue, hwEvpnMacLimitTraps=hwEvpnMacLimitTraps, hwVplsTnlId=hwVplsTnlId, hwTunnelExtCompliance=hwTunnelExtCompliance, hwTnl2L3vpnGroup=hwTnl2L3vpnGroup, hwRouteStatAdded=hwRouteStatAdded, hwL3vpnIpv6PrefixLimitTraps=hwL3vpnIpv6PrefixLimitTraps, hwTnl2Pwe3VllTable=hwTnl2Pwe3VllTable, hwIpv6PrefixLimitObjectGroup=hwIpv6PrefixLimitObjectGroup, hwTnlGroupNotificationGroup=hwTnlGroupNotificationGroup, hwMultiHopPwe3VcId=hwMultiHopPwe3VcId, hwEvpnMacLowerLimitValue=hwEvpnMacLowerLimitValue, hwIpv4PrefixThresholdExceedClear=hwIpv4PrefixThresholdExceedClear, hwTnlIf2TnlIdTable=hwTnlIf2TnlIdTable, hwIpv6PrefixLimitTraps=hwIpv6PrefixLimitTraps, hwL3vpnIpv6PrefixExceedClear=hwL3vpnIpv6PrefixExceedClear, hwPwVllVcId=hwPwVllVcId, hwRmExtConformance=hwRmExtConformance, hwTnl2Pwe3VllEntry=hwTnl2Pwe3VllEntry, hwTnlGroupTraps=hwTnlGroupTraps, hwEvpnMacLimitConformance=hwEvpnMacLimitConformance, hwIpv6RouteStatEntry=hwIpv6RouteStatEntry, hwTunnelExtConformance=hwTunnelExtConformance, hwEvpnMacLimitObjectGroup=hwEvpnMacLimitObjectGroup, hwMultiHopPwe3VcType=hwMultiHopPwe3VcType, hwIpv6PrefixThresholdExceed=hwIpv6PrefixThresholdExceed, hwRouteStatVpnName=hwRouteStatVpnName, hwVpnName=hwVpnName, PYSNMP_MODULE_ID=hwRmExt, hwIpv6RouteStatFreed=hwIpv6RouteStatFreed, hwIpv4PrefixLimitTraps=hwIpv4PrefixLimitTraps, hwRmExtRouteCompliances=hwRmExtRouteCompliances, hwPublicIpv6PrefixExceed=hwPublicIpv6PrefixExceed, hwStaticRouteDescrip=hwStaticRouteDescrip, hwRmExtGroups=hwRmExtGroups, hwStaticRoutePreferExt=hwStaticRoutePreferExt, hwVsiIndex=hwVsiIndex, hwIpv6PrefixLimitVpnName=hwIpv6PrefixLimitVpnName, hwTnl2VplsEntry=hwTnl2VplsEntry, hwVplsPeerIp=hwVplsPeerIp, hwIpv6RouteStatDeleted=hwIpv6RouteStatDeleted, hwTnl2MultiHopPwe3Table=hwTnl2MultiHopPwe3Table, hwIpv4PrefixExceed=hwIpv4PrefixExceed, hwTnl2MultiHopPwe3Group=hwTnl2MultiHopPwe3Group, hwIpv4PrefixExceedClear=hwIpv4PrefixExceedClear, hwGresmTokenTable=hwGresmTokenTable, hwIpv6StaticRouteNextHop=hwIpv6StaticRouteNextHop, hwIpv6StaticRouteBfdName=hwIpv6StaticRouteBfdName, hwStaticRouteBfdNameExt=hwStaticRouteBfdNameExt, hwTunnelId=hwTunnelId, hwStaticRouteTable=hwStaticRouteTable, hwIpv4PrefixLimitTrapObjects=hwIpv4PrefixLimitTrapObjects, hwRouteStatProtocolId=hwRouteStatProtocolId, hwCurMacNum=hwCurMacNum, hwStaticRouteDestIpAddrExt=hwStaticRouteDestIpAddrExt, hwTunnelGroupDown=hwTunnelGroupDown, hwStaticRouteNextHopExt=hwStaticRouteNextHopExt, hwTnl2VplsGroup=hwTnl2VplsGroup, hwStaticRouteRowStatus=hwStaticRouteRowStatus, hwIpv6StaticRouteDestVpnName=hwIpv6StaticRouteDestVpnName, hwRmExtRouteGroup=hwRmExtRouteGroup, hwL3vpnIpv6PrefixLimitNotificationGroup=hwL3vpnIpv6PrefixLimitNotificationGroup, hwPwVcType=hwPwVcType, hwIpv4PrefixLimitValue=hwIpv4PrefixLimitValue, hwPwVllSvcFlag=hwPwVllSvcFlag, hwPublicIpv4PrefixThresholdExceedClear=hwPublicIpv4PrefixThresholdExceedClear, hwStaticRouteExtEntry=hwStaticRouteExtEntry, hwPublicIpv6PrefixThresholdExceed=hwPublicIpv6PrefixThresholdExceed, hwPublicIpv4PrefixLimitNotificationGroup=hwPublicIpv4PrefixLimitNotificationGroup, hwTnlGroupObjectGroup=hwTnlGroupObjectGroup, hwIpv6PrefixLimitNotificationGroup=hwIpv6PrefixLimitNotificationGroup, hwRmExtObjects=hwRmExtObjects, hwIpv6StaticRouteNqaAdminName=hwIpv6StaticRouteNqaAdminName, hwAcIndex=hwAcIndex, hwPublicIpv4PrefixExceed=hwPublicIpv4PrefixExceed, hwPublicIpv6PrefixLimitTraps=hwPublicIpv6PrefixLimitTraps, hwIpv6StaticRouteEntry=hwIpv6StaticRouteEntry, hwStaticRouteSourceVpnName=hwStaticRouteSourceVpnName, hwEvpnMacThresholdExceedClear=hwEvpnMacThresholdExceedClear, hwPublicIpv4PrefixExceedClear=hwPublicIpv4PrefixExceedClear, hwIpv6StaticRouteOutIfIndex=hwIpv6StaticRouteOutIfIndex, hwRmInfoGroup=hwRmInfoGroup, hwStaticRoutePermanentExt=hwStaticRoutePermanentExt, hwPublicIpv4PrefixThresholdExceed=hwPublicIpv4PrefixThresholdExceed, hwPublicIpv6PrefixLimitNotificationGroup=hwPublicIpv6PrefixLimitNotificationGroup, hwTunnelExtCompliances=hwTunnelExtCompliances, hwStaticRouteExtGroup=hwStaticRouteExtGroup, hwEvpnMacThresholdExceed=hwEvpnMacThresholdExceed, hwIpv6StaticRouteGroup=hwIpv6StaticRouteGroup, hwTnlPolicy=hwTnlPolicy, hwGresmTokenEntry=hwGresmTokenEntry, hwGresmTokenMode=hwGresmTokenMode, hwIpv6PrefixLimitTrapObjects=hwIpv6PrefixLimitTrapObjects, hwIpv6PrefixLimitConformance=hwIpv6PrefixLimitConformance, hwStaticRouteDestIpAddr=hwStaticRouteDestIpAddr, hwRmExtRouteTrapObjects=hwRmExtRouteTrapObjects, hwTnl2Pwe3VllGroup=hwTnl2Pwe3VllGroup, hwIpv6StaticRouteNqaTestName=hwIpv6StaticRouteNqaTestName, hwStaticRoutePrefer=hwStaticRoutePrefer, hwIpv4PrefixLimitConformance=hwIpv4PrefixLimitConformance, hwIpv6StaticRoutePrefer=hwIpv6StaticRoutePrefer, hwTnl2MultiHopPwe3Entry=hwTnl2MultiHopPwe3Entry, hwIpv6RouteStatActive=hwIpv6RouteStatActive, hwRmInfo=hwRmInfo, hwVsiId=hwVsiId, hwTnlIf2TnlIdGroup=hwTnlIf2TnlIdGroup, hwRmExtRouteObjects=hwRmExtRouteObjects, hwIpv6PrefixExceedClear=hwIpv6PrefixExceedClear, hwL3vpnTnlId=hwL3vpnTnlId, hwPublicIpv4PrefixLimitObjectGroup=hwPublicIpv4PrefixLimitObjectGroup, hwStaticRouteDestVpnNameExt=hwStaticRouteDestVpnNameExt, hwIpv4PrefixNum=hwIpv4PrefixNum, hwIpv6RouteStatAdded=hwIpv6RouteStatAdded, hwRmExtCompliances=hwRmExtCompliances, hwVplsVcType=hwVplsVcType, hwPublicIpv6PrefixExceedClear=hwPublicIpv6PrefixExceedClear, hwStaticRouteBfdName=hwStaticRouteBfdName, hwTunnelGroupUp=hwTunnelGroupUp, hwTunnelExtObjects=hwTunnelExtObjects, hwGresmTokenThresholdExceed=hwGresmTokenThresholdExceed, hwL3vpnIpv6PrefixThresholdExceed=hwL3vpnIpv6PrefixThresholdExceed, hwEvpnMacExceedClear=hwEvpnMacExceedClear, hwGresmTokenThresholdExceedClear=hwGresmTokenThresholdExceedClear, hwTnl2VplsTable=hwTnl2VplsTable, hwTnlGroupTrapConformance=hwTnlGroupTrapConformance, hwStaticRouteEntry=hwStaticRouteEntry, hwRmExtRouteConformance=hwRmExtRouteConformance, hwRouteStatFreed=hwRouteStatFreed, hwEvpnMacUpperLimitValue=hwEvpnMacUpperLimitValue, hwRmExtCompliance=hwRmExtCompliance, hwEvpnMacObjects=hwEvpnMacObjects, hwL3vpnIpv6PrefixLimitGroup=hwL3vpnIpv6PrefixLimitGroup, hwIpv6RouteStatGroup=hwIpv6RouteStatGroup, hwIpv6StaticRouteTable=hwIpv6StaticRouteTable, hwRouteStatTable=hwRouteStatTable, hwPublicIpv6PrefixLimitObjectGroup=hwPublicIpv6PrefixLimitObjectGroup, hwStaticRouteDescripExt=hwStaticRouteDescripExt, hwTunnelIf=hwTunnelIf, hwRouteStatTotal=hwRouteStatTotal, hwStaticRouteExtTable=hwStaticRouteExtTable, hwPwVllPeerIp=hwPwVllPeerIp, hwPublicIpv6PrefixThresholdExceedClear=hwPublicIpv6PrefixThresholdExceedClear, hwCurIpv4PrefixNum=hwCurIpv4PrefixNum, hwStaticRouteOutIfIndexExt=hwStaticRouteOutIfIndexExt, hwTunnelExtGroups=hwTunnelExtGroups, hwMultiHopPwe3PeerIp=hwMultiHopPwe3PeerIp, hwEvpnMacExceed=hwEvpnMacExceed, hwRouteStatGroup=hwRouteStatGroup, hwIpv6RouteStatTotal=hwIpv6RouteStatTotal, hwMacLimitEvpnName=hwMacLimitEvpnName, hwMasterSlaveFlag=hwMasterSlaveFlag, hwIpv6RouteStatProtocolId=hwIpv6RouteStatProtocolId, hwStaticRouteRowStatusExt=hwStaticRouteRowStatusExt, hwStaticRouteDestVpnName=hwStaticRouteDestVpnName, hwVsiName=hwVsiName, hwPwVllTnlId=hwPwVllTnlId, hwIpv6RouteStatVpnName=hwIpv6RouteStatVpnName, hwSvcTransmitLabel=hwSvcTransmitLabel, hwSvcReceiveLabel=hwSvcReceiveLabel, hwGresmTokenExceed=hwGresmTokenExceed, hwRouteStatDeleted=hwRouteStatDeleted, hwStaticRouteGroup=hwStaticRouteGroup, hwStaticRouteSourceVpnNameExt=hwStaticRouteSourceVpnNameExt, hwL3vpnIpv6PrefixLimitObjectGroup=hwL3vpnIpv6PrefixLimitObjectGroup, hwTnl2L3vpnTable=hwTnl2L3vpnTable, hwIpv6StaticRouteTag=hwIpv6StaticRouteTag, hwIpv6StaticRouteDescr=hwIpv6StaticRouteDescr, hwMultiHopPwe3TnlId=hwMultiHopPwe3TnlId, hwStaticRouteOutIfIndex=hwStaticRouteOutIfIndex, hwStaticRouteLdpSyncExt=hwStaticRouteLdpSyncExt, hwCurIpv6PrefixNum=hwCurIpv6PrefixNum, hwPwVllIfName=hwPwVllIfName, hwRouteStatActive=hwRouteStatActive, hwIpv4PrefixLimitNotificationGroup=hwIpv4PrefixLimitNotificationGroup, hwIpv4PrefixThresholdExceed=hwIpv4PrefixThresholdExceed, hwRmGresmTokenObjects=hwRmGresmTokenObjects, hwIpv6PrefixExceed=hwIpv6PrefixExceed, hwRmExtRouteTraps=hwRmExtRouteTraps, hwEvpnMacLimitNotificationGroup=hwEvpnMacLimitNotificationGroup, hwIpv4PrefixLimitObjectGroup=hwIpv4PrefixLimitObjectGroup, hwGresmTokenMaxValue=hwGresmTokenMaxValue, hwIpv6StaticRouteDestIpAddr=hwIpv6StaticRouteDestIpAddr, hwPublicIpv4PrefixLimitTraps=hwPublicIpv4PrefixLimitTraps, hwPublicIpv4PrefixLimitGroup=hwPublicIpv4PrefixLimitGroup, hwTnlGroupTrapObjects=hwTnlGroupTrapObjects)
