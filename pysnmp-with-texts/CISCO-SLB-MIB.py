#
# PySNMP MIB module CISCO-SLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SLB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, CiscoIpProtocol = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "CiscoIpProtocol")
entPhysicalParentRelPos, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalParentRelPos")
InetAddress, InetAddressPrefixLength, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter32, Counter64, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, iso, Bits, Unsigned32, MibIdentifier, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Counter64", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "iso", "Bits", "Unsigned32", "MibIdentifier", "ObjectIdentity", "TimeTicks")
DateAndTime, TimeInterval, TruthValue, TextualConvention, StorageType, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeInterval", "TruthValue", "TextualConvention", "StorageType", "DisplayString", "RowStatus")
ciscoSlbMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 161))
ciscoSlbMIB.setRevisions(('2008-05-15 00:00', '2008-04-15 00:00', '2008-02-12 00:00', '2007-06-20 00:00', '2007-04-20 00:00', '2006-10-26 00:00', '2006-01-13 00:00', '2005-03-31 00:00', '2002-03-18 00:00', '2002-01-15 15:00', '2000-10-20 00:00', '2000-05-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSlbMIB.setRevisionsDescriptions(('- Deprecated the object slbVServerBWRateLimitDropCounts. - Added following objects to slbVServerInfoTable slbVServerBandWidthRateLimitDropCounts slbVServerL4Decisions slbVServerL7Decisions slbVServerEstablishedConnections - Deprecated OBJECT-GROUP ciscoSlbVServerInfoGroupRev1 - Deprecated MODULE-COMPLIANCE ciscoSlbMIBComplianceRev5 - Added OBJECT-GROUP ciscoSlbVServerInfoGroupRev2 - Added MODULE-COMPLIANCE ciscoSlbMIBComplianceRev6.', "- Added enumeration 'inactive' and 'maxLoad' to SlbRealServerState TC.", '- Added following objects to slbVServerInfoTable slbVServerDroppedConnections slbVServerClientPacketCounts slbVServerPacketCounts slbVServerClientByteCounts slbVServerByteCounts slbVServerMaxConnLimitDropCounts slbVServerConnRateLimitDropCounts slbVServerBWRateLimitDropCounts - Deprecated OBJECT-GROUP ciscoSlbVServerInfoGroup - Deprecated MODULE-COMPLIANCE ciscoSlbMIBComplianceRev4 - Added OBJECT-GROUP ciscoSlbVServerInfoGroupRev1 - Added MODULE-COMPLIANCE ciscoSlbMIBComplianceRev5.', "- Added enumeration 'standby' to SlbRealServerState TC.", '- Added arpFailed enum to SlbRealServerState TC', '- Added following notifications ciscoSlbVirtualServerStateChange ciscoSlbRealServerStateChange - Added following groups ciscoSlbNotifObjectsGroup ciscoSlbNotifEnabledGroupRev2 ciscoSlbNotifGroupRev2 - Added following new objects to slbNotificationsObjects slbInetAddressType slbInetAddress slbName slbPort - Deprecated following notifications ciscoSlbRealStateChange ciscoSlbVirtualStateChange - Deprecated following objects under slbNotificationObjects cSlbVirtStateChangeNotifEnabled cSlbRealStateChangeNotifEnabled - Added following in Compliance/Conformance ciscoSlbMIBComplianceRev4 - Added following enums to SlbPredictor TC layer4PayloadHash responseTime leastBandwidth httpContentHash - DEFVAL value of the following objects are modified to avoid compilation errors slbStickyObjectRealIpAddress slbVirtualIpAddress', '- Added following enums to SlbPredictor TC leastLoaded httpCookieHash httpHeaderHash. - Increased the range for SlbServerString TC from 1..15 to 1..96. - Added following Tables: slbVServerInfoTable slbVServerIPTable - Added following Notifications: ciscoSlbVServerStateChange ciscoSlbVServerVIPStateChange - Added cSlbVServerStateChangeNotifEnabled object - Added following in Compliance/Conformance ciscoSlbMIBComplianceRev3.', 'Extending MIB to support the Server/Application State Protocol (SASP). The following tables were added to the MIB: - slbSaspTable - slbSaspAgentTable, - slbSaspGroupTable, - slbSaspMemberTable - slbSaspStatsTable', 'Defining more server states and predictor options for Content Switching Module (CSM) product.', 'Extending MIB to support GTP service. Updated SlbRealServerState and SlbVirtualServState with more states.', 'Extending MIB to support VirtualMask and service wsp.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSlbMIB.setLastUpdated('200805150000Z')
if mibBuilder.loadTexts: ciscoSlbMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSlbMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-slb@cisco.com')
if mibBuilder.loadTexts: ciscoSlbMIB.setDescription('The MIB for managing Server Load Balancing Manager(s), such as the Cisco IOS SLB product. This MIB includes instrumentation for the manager-side implementation of the Dynamic Feedback Protocol (DFP). A DFP uses the DFP protocol to communicate with DFP agents in order to obtain information about Servers. This MIB includes the objects required for implementing the load balancer management side of the Server/Application State Protocol (SASP). The load balancer is responsible for registering Members with a SASP-Agent. A Member is an entity that is defined on the load balancer to service Internet traffic. The responsibility of the Agent is to monitor the Members, and report a recommended weight to the load balancer. The weight is then used in load balancing decisions. Acronyms and terms: DFP Dynamic Feedback Protocol SASP Server to Application State Protocol GGSN Gateway GPRS Support Node GPRS General Packet Radio Service GTP GPRS Tunneling Protocol SASP Server/Application State Protocol SGSN Serving GPRS Support Node')
ciscoSlbMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1))
slbServerFarms = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2))
slbRealServers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3))
slbVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4))
slbConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5))
slbVirtualClients = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6))
slbStickyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7))
slbNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8))
slbDfpPassword = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 9))
slbDfpAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10))
slbDfpReal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11))
slbSasp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12))
slbSaspAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13))
slbSaspGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 14))
slbSaspMembers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15))
slbSaspStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16))
class SlbServerString(TextualConvention, OctetString):
    description = 'The configured name associated with an SLB object.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 96)

class SlbPasswordString(TextualConvention, OctetString):
    description = 'The string for the Dynamic Feedback Protocol (DFP) password. A zero-length value when writing this object will unset the password.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class SlbConnectionState(TextualConvention, Integer32):
    description = "The state for TCP, UDP, and WSP connections being load-balanced by the SLB feature. Each protocol uses a subset of these states. 'init' : Connection has seen traffic and is in the process of being load-balanced. 'synClient': SLB has seen a client SYN for this connection. 'synServer': SLB has seen a server SYN for this connection. 'synBoth' : SLB has seen both client and server SYNs for this connection. 'estab' : Connection is established. 'finClient': SLB has seen a client FIN for this connection. 'finServer': SLB has seen a server FIN for this connection. 'closing' : Connection is in the process of coming down. 'zombie' : Connection exists but is not in use, waiting for timers to expire. 'conclient': Session has seen a connection request from client. 'conserver': Session has seen a connection request from server."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("init", 1), ("synClient", 2), ("synServer", 3), ("synBoth", 4), ("estab", 5), ("finClient", 6), ("finServer", 7), ("closing", 8), ("zombie", 9), ("conclient", 10), ("conserver", 11))

class SlbPredictor(TextualConvention, Integer32):
    description = "The predictor represents the load-balancing algorithm being used on a server farm to distribute load evenly among real servers. 'roundRobin' : assign evenly amongst real servers. 'leastConns' : assign to the real server with the least number of current connections. 'ipHash' : assign based on the hash value of the source IP and destination IP address. 'ipHashSrc' : assign based on the hash value of the source IP address. 'ipHashDest' : assign based on the hash value of the destination IP address. 'urlHash' : assign based on the hash value of the URL string. 'forward' : forward the connection to the appropriate next-hop as determined by a routing lookup on the destination IP address. 'leastLoaded' : assign to a real server that is least loaded/busy. The load information is available from agents(DFP, SASP etc). 'httpCookieHash' : assign based on the hash value of the HTTP Cookie value. 'httpHeaderHash' : assign based on the hash value of the HTTP Header Name. 'layer4PayloadHash' : assign to real server based on the hash value (of configured attributes) of the layer 4 payload. 'responseTime' : assign to real server with lowest average response time(for the configured method). 'leastBandwidth' : assign to a real server which has least traffic/bandwidth in a given sampling period. 'httpContentHash' : assign to real server based on the hash value (of configured attributes) of the HTTP payload."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("roundRobin", 1), ("leastConns", 2), ("ipHash", 3), ("ipHashSrc", 4), ("ipHashDest", 5), ("urlHash", 6), ("forward", 7), ("leastLoaded", 8), ("httpCookieHash", 9), ("httpHeaderHash", 10), ("layer4PayloadHash", 11), ("responseTime", 12), ("leastBandwidth", 13), ("httpContentHash", 14))

class SlbRealServerState(TextualConvention, Integer32):
    description = "The server state represents the state of a real server being load-balanced by SLB. 'outOfService' : Server is not in use by SLB as a destination for client connections. This state can be written and read. 'inService' : Server is in use as a destination for SLB client connections. This state can be written and read. 'failed' : Server has failed and will not be retried for retry timer seconds. This state can only be read. 'readyToTest' : Server has failed and has an expired retry timer, test connections will begin flow to it soon. This state can only be read. 'testing' : Server has failed and been given another test connection, success of this connection is not known yet. This state can only be read. 'maxConnsThrottle' : Server has reached its maximum number of connections and is no longer being given connections. This state can only be read. 'maxClientsThrottle': Server has reached the maximum allowed clients. This state can only be read. 'dfpThrottle' : DFP has lowered the weight of this server to throttle level, so that no new connections will be assigned to it until DFP raises its weight. This state can only be read. 'probeFailed' : SLB probe to this this server has failed. No new connections will be assigned to it until a probe to this server succeeds. This state can only be read. 'probeTesting' : Server has received a test probe from SLB. This state can only be read. 'operWait' : Server is ready to go operational, but is waiting for the associated redirect virtual to be inservice. This state can only be read. 'testWait' : Server is ready to be tested. This state is applicable only when the server is used for http redirect load balancing. This state can only be read. 'inbandProbeFailed': Server has failed the inband Health Probe agent. This state can only be read. 'returnCodeFailed' : Server has been disabled because it returned an HTTP code that matched a configured value. This state can only be read. 'arpFailed' : ARP request to this server has failed. This state can only be read. 'standby' : Server is in standby state. No connections will be assigned to it, unless the primary server fails. This state can be written and read. 'inactive' : Server is disabled as it has become inactive such as in the case when the real server is not associated to any server farm.This state can only be read. 'maxLoad' : Server is disabled as it hit max-load. This state can only be read."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("outOfService", 1), ("inService", 2), ("failed", 3), ("readyToTest", 4), ("testing", 5), ("maxConnsThrottle", 6), ("maxClientsThrottle", 7), ("dfpThrottle", 8), ("probeFailed", 9), ("probeTesting", 10), ("operWait", 11), ("testWait", 12), ("inbandProbeFailed", 13), ("returnCodeFailed", 14), ("arpFailed", 15), ("standby", 16), ("inactive", 17), ("maxLoad", 18))

class SlbVirtualServState(TextualConvention, Integer32):
    description = "The state of SLB virtual server 'outOfService' : Virtual server is not active and is not affecting client traffic in any way. 'inService' : Virtual server is active and is load-balancing matching client traffic to available real servers. 'standby' : Virtual server is a backup for a virtual server on another SLB device, and is currently inactive. 'inOperReal' : Real server associated with this redirect virtual server is not operational. This state can only be read. 'stbInOperReal': Real server associated with this redirect virtual server is not operational, and this virtual server is in standby state. This state can only be read. 'testReal' : This is a redirect virtual server and the real server associated with it is being tested. This state can only be read. 'outOfMemory' : Virtual server is not enabled because it does not have enough memory to hold the configured matching policy information. This state can only be read."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("outOfService", 1), ("inService", 2), ("standby", 3), ("inOperReal", 4), ("stbInOperReal", 5), ("testReal", 6), ("outOfMemory", 7))

class SlbVirtualService(TextualConvention, Integer32):
    description = "The special service configured for this virtual server. Such a specification ensures that session(s) for a given protocol are tracked and assigned to the same real machine. These services include: 'ftp' : File Transfer Protocol 'wsp' : Wireless Session Protocol 'gtp' : GPRS Tunnelling Protocol 'rtsp': Real-Time Streaming Protocol"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("ftp", 2), ("wsp", 3), ("gtp", 4), ("rtsp", 5))

class SlbDfpAgentState(TextualConvention, Integer32):
    description = "The status of a remote Dynamic Feedback Protocol (DFP) agent as it appears to a local DFP manager. 'notOpen' : The initial state when the DFP Agent block is instantiated. 'trying' : The state when the Agent tries to open the socket to the DFP manger. 'connecting' : The state when the Agent opens the socket, and is connecting to the DFP manager. 'open' : The state when an Agent is talking to the DFP manager. This is the desirable place to be. 'failed' : The state when there is an error in the data, or when the maximum number of retries is reached. 'securityError' : The state when there is a security error in the received message. Either there is no security vector when one was required, or the MD5 string in the message did not match the expected result (password not correct)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notOpen", 1), ("trying", 2), ("connecting", 3), ("open", 4), ("failed", 5), ("securityError", 6))

class SlbSaspLBHealth(TextualConvention, Integer32):
    description = "The Load Balancer Health that is reported to the SASP Agent in the Set Load Balancer State Message. This value represents the load balancers ability to handle SASP messages. 'other' : The load balancer health when none of the other values apply. 'idle' : SASP is enabled on the load balancer, but no SASP Agents or Members are configured. 'down' : The load balancer cannot handle any SASP messages at this time. 'saturated' : The load balancer is failing to process SASP messages in a timely manner, and messages are being lost. 'overUsed' : The load balancer is failing to process SASP messages in a timely manner. 'msgLimitReached': The load balancer has reached it functional limit in its ability to handle SASP messages. Additional work should be avoided. 'heavyLoad' : A plethora of SASP messages are sent and received for a modest to large number of SASP Agents and Members. 'moderateLoad' : SASP messages are sent on a regular basis for a small to modest number of SASP Agents and Members. 'lightLoad' : SASP messages are sent and received on a consistent basis, over a long period of time, for a small number of SASP Agents and Members. 'healthy' : SASP messages are sporadically being sent and received by the load balancer for a small number of SASP Agents and Members."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("idle", 2), ("down", 3), ("saturated", 4), ("overUsed", 5), ("msgLimitReached", 6), ("heavyLoad", 7), ("moderateLoad", 8), ("lightLoad", 9), ("healthy", 10))

class SlbSaspRedundancy(TextualConvention, Integer32):
    description = "The redundancy state of the Load Balancer. 'other' : The redundant state of the Load Balancer when none of the other states apply. 'master' : The redundant state of the Load Balancer if it is not in a redundant setup, or is the active system used in a redundant setup. 'backup' : The redundant state of the Load Balancer if it is the idle system in a redundant setup."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("master", 2), ("backup", 3))

class SlbSaspAgentState(TextualConvention, Integer32):
    description = "The status of a remote Server Application State Protocol (SASP) Agent as it appears to a local SASP manager. 'other' : The state the Agent enters when none of the other states apply. 'initialized' : The initial state when the SASP Agent memory is created. 'closed' : The state the SASP Agent enters when the SASP functionality is disabled, but the Agent has not been removed. 'trying' : The state when the Agent tries to open the socket to the SASP manger. 'connecting' : The state when the SASP Manager opens the socket, and is connecting to the SASP Agent. 'established' : The state when an Agent is communicating with the SASP manager. This is the desirable place to be. 'downTrying' : The state when there is a communication failure with the SASP Agent, and the load balancer is attempting to reconnect to the Agent. 'downDuplicate' : The Agent enters this state if a duplicate load balancer identifier is detected on the network. 'down' : The state of the Agent when there is a communication failure, and the load balancer is unable to re-establish the connection."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("other", 1), ("initialized", 2), ("closed", 3), ("trying", 4), ("connecting", 5), ("established", 6), ("downTrying", 7), ("downDuplicate", 8), ("down", 9))

class SlbNatSetting(TextualConvention, Integer32):
    description = "The current network address translation (NAT) setting for a server farm. 'noNat' : The server farm is not configured for NAT. 'clientNat' : The server farm is configured to translate client IP addresses. 'serverNat' : The server farm is configured to translate server IP addresses. 'clientAndServerNat': The server farm is configured to translate client and server IP addresses."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noNat", 1), ("clientNat", 2), ("serverNat", 3), ("clientAndServerNat", 4))

slbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1), )
if mibBuilder.loadTexts: slbStatsTable.setStatus('current')
if mibBuilder.loadTexts: slbStatsTable.setDescription('A table of SLB statistics for all local SLB entities.')
slbStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"))
if mibBuilder.loadTexts: slbStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatsTableEntry.setDescription('A list of SLB statistics for a particular SLB entity.')
slbEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: slbEntity.setStatus('current')
if mibBuilder.loadTexts: slbEntity.setDescription("The SLB instance reference number for this server. This allows multiple SLB's to exist on the same SNMP system. This object's value generally corresponds to the slot number where the module resides.")
slbStatsUnassistedSwitchingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsUnassistedSwitchingPkts.setStatus('current')
if mibBuilder.loadTexts: slbStatsUnassistedSwitchingPkts.setDescription("The number of packets forwarded by the Software Load Balancing manager's software.")
slbStatsUnassistedSwitchingHCPks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsUnassistedSwitchingHCPks.setStatus('current')
if mibBuilder.loadTexts: slbStatsUnassistedSwitchingHCPks.setDescription("The number of packets forwarded by the Software Load Balancing manager's software. This is the 64-bit version of slbStatsUnassistedPkts.")
slbStatsAssistedSwitchingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsAssistedSwitchingPkts.setStatus('current')
if mibBuilder.loadTexts: slbStatsAssistedSwitchingPkts.setDescription('The number of packets handled by SLB which were switched via the highest-performance switching path.')
slbStatsAssistedSwitchingHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsAssistedSwitchingHCPkts.setStatus('current')
if mibBuilder.loadTexts: slbStatsAssistedSwitchingHCPkts.setDescription('The number of packets handled by SLB which were switched via the highest-performance switching path. This is the 64-bit version of slbStatsAssistedSwitchingPkts.')
slbStatsCreatedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 6), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsCreatedConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsCreatedConnections.setDescription('The number of TCP and UDP connections created since SLB was configured. TCP connections are created after seeing a SYN for a connection. UDP connections are created based on the source and destination and are removed based on a timer.')
slbStatsCreatedHCConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 7), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsCreatedHCConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsCreatedHCConnections.setDescription('The number of connections created by SLB since it was configured. TCP connections are created after seeing a SYN for a connection. UDP connections are created based on the source and destination and are removed based on a timer. This is the 64-bit version of slbStatsCreatedConnections.')
slbStatsEstablishedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 8), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsEstablishedConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsEstablishedConnections.setDescription('The number of connections established through SLB (reached the ESTAB state). TCP connections reach the ESTAB state after a SYN - SYN/ACK exchange. UDP connections reach the ESTAB state after data is sent from the client or server.')
slbStatsEstablishedHCConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 9), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsEstablishedHCConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsEstablishedHCConnections.setDescription('The number of connections established through SLB (reached the ESTAB state). TCP connections reach the ESTAB state after a SYN - SYN/ACK exchange. UDP connections reach the ESTAB state after data is sent from the client or server. This is the 64-bit version of slbStatsEstablisedConnections.')
slbStatsDestroyedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 10), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsDestroyedConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsDestroyedConnections.setDescription('The number of TCP and UDP connections destroyed by SLB, either by TCPIP teardown or timeout. UDP connections can only be timed out.')
slbStatsDestroyedHCConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 11), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsDestroyedHCConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsDestroyedHCConnections.setDescription('The number of TCP and UDP connections destroyed by SLB, either by TCPIP teardown or timeout. UDP connections can only be timed out. This is the 64-bit version of slbStatsDestroyedConnections.')
slbStatsReassignedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 12), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsReassignedConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsReassignedConnections.setDescription('The number of TCP and UDP connections reassigned from one real server to another.')
slbStatsReassignedHCConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 13), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsReassignedHCConnections.setStatus('current')
if mibBuilder.loadTexts: slbStatsReassignedHCConnections.setDescription('The number of TCP and UDP connections reassigned from one real server to another. This is the 64-bit version of slbStatsReassignedConnections.')
slbStatsZombies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 14), Counter32()).setUnits('zombies').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsZombies.setStatus('current')
if mibBuilder.loadTexts: slbStatsZombies.setDescription('The number of TCP and UDP connections currently in the zombie state waiting for timers to expire.')
slbStatsHCZombies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 1, 1, 1, 15), Counter64()).setUnits('zombies').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsHCZombies.setStatus('current')
if mibBuilder.loadTexts: slbStatsHCZombies.setDescription('The number of TCP and UDP connections currently in the zombie state waiting for timers to expire. This is the 64-bit version of slbStatsZombies.')
slbServerFarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1), )
if mibBuilder.loadTexts: slbServerFarmTable.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmTable.setDescription("This is a table of server farms, each of which is a group of real servers to be used by SLB for load balancing. Columnar objects can be modified when the row is 'active'. Rows can be created and destroyed. Entries are added to this table via slbServerFarmRowStatus in accordance with the RowStatus convention.")
slbServerFarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbServerFarmName"))
if mibBuilder.loadTexts: slbServerFarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmTableEntry.setDescription('Information about a particular server farm served by a particular local SLB entity.')
slbServerFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: slbServerFarmName.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmName.setDescription('The name of server farm.')
slbServerFarmPredictor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1, 2), SlbPredictor().clone('roundRobin')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerFarmPredictor.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmPredictor.setDescription('The load balancing algorithm in use by the server farm for its real servers for the local SLB entity.')
slbServerFarmNat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1, 3), SlbNatSetting().clone('noNat')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerFarmNat.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmNat.setDescription('The type of NAT employed by the local SLB entity for servers in this server farm.')
slbServerFarmNumberOfRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerFarmNumberOfRealServers.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmNumberOfRealServers.setDescription('The number of real servers in this server farm.')
slbServerFarmBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerFarmBindId.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmBindId.setDescription("slbServerFarmBindId is used to identify one or more real servers for which slbDfpRealWeight applies to the real server's slbRealOperWeight. The identification is done by finding rows in slbServerFarmTable for which slbServerFarmBindId matches slbDfpRealBindId. For each identified server farm, extract the slbServerFarmName and use this value together with slbDfpRealIpAddress and slbDfpRealPort to identify the row in slbRealTable.")
slbServerFarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerFarmRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbServerFarmRowStatus.setDescription('The object is used by a management station to create or delete the row entry in slbServerFarmTable following the RowStatus textual convention.')
slbRealTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1), )
if mibBuilder.loadTexts: slbRealTable.setStatus('current')
if mibBuilder.loadTexts: slbRealTable.setDescription("A table of real servers. Columnar objects can be modified when the row is 'active'. Rows can be created and destroyed. Entries are added to this table via slbRealRowStatus in accordance with the RowStatus convention.")
slbRealTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbRealServerFarmName"), (0, "CISCO-SLB-MIB", "slbRealIpAddress"), (0, "CISCO-SLB-MIB", "slbRealPort"))
if mibBuilder.loadTexts: slbRealTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbRealTableEntry.setDescription('Information about a particular real server in a particular server farm, served by a particular local SLB entity.')
slbRealServerFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: slbRealServerFarmName.setStatus('current')
if mibBuilder.loadTexts: slbRealServerFarmName.setDescription("The real server's server farm name.")
slbRealIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: slbRealIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbRealIpAddress.setDescription('The IP address of real server.')
slbRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 3), CiscoPort())
if mibBuilder.loadTexts: slbRealPort.setReference('slbServerFarmNat')
if mibBuilder.loadTexts: slbRealPort.setStatus('current')
if mibBuilder.loadTexts: slbRealPort.setDescription('The TCP or UDP port of real server. This is used if SLB NAT is configured (see slbServerFarmNat). If SLB is not using NAT, this value will be 0.')
slbRealState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 4), SlbRealServerState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealState.setStatus('current')
if mibBuilder.loadTexts: slbRealState.setDescription('The current state of real server.')
slbRealNumberOfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealNumberOfConnections.setStatus('current')
if mibBuilder.loadTexts: slbRealNumberOfConnections.setDescription('The number TCP and UDP connections currently assigned to this real server.')
slbRealNumberOfDummyConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealNumberOfDummyConnections.setStatus('current')
if mibBuilder.loadTexts: slbRealNumberOfDummyConnections.setDescription('The current number of idle dummy connections that are not in use but are reserved for this real server to accomplish slow-start.')
slbRealMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 7), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealMaxConnections.setStatus('current')
if mibBuilder.loadTexts: slbRealMaxConnections.setDescription('The configured maximum number of concurrent connections which SLB will deliver to this real server.')
slbRealAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealAdminWeight.setStatus('current')
if mibBuilder.loadTexts: slbRealAdminWeight.setDescription('The user configured weight of the real server for the load-balancing algorithms. A weight of zero indicates that no new connections will be assigned to this real server. Higher weight values indicate to the load-balancing algorithms a higher availability of this real server to accept more work.')
slbRealOperWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealOperWeight.setStatus('current')
if mibBuilder.loadTexts: slbRealOperWeight.setDescription('The actual operating weight of the real server used by the load-balancing algorithms. This can be adjusted dynamically by DFP. A weight of zero indicates that no new connections will be assigned to this real server. Higher weight values indicate to the load-balancing algorithms a higher availability of this real server to accept more work.')
slbRealMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealMetric.setStatus('current')
if mibBuilder.loadTexts: slbRealMetric.setDescription('The value used by the least connections load-balancing algorithm. It is the number of connections divided by the actual operating weight. New connections will be given to the server with the smaller metric.')
slbRealReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 11), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealReassign.setStatus('current')
if mibBuilder.loadTexts: slbRealReassign.setDescription('The number of consecutive TCP SYNs sent to the real server with no answer before reassigning the connection to another real server.')
slbRealRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 12), TimeInterval().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealRetryInterval.setStatus('current')
if mibBuilder.loadTexts: slbRealRetryInterval.setDescription('The time interval between retries while the server is in the Failed state.')
slbRealFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 13), Unsigned32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealFailedConnections.setStatus('current')
if mibBuilder.loadTexts: slbRealFailedConnections.setDescription('The number of failed connections after which the real server goes to Failed state. A failed connection is when a SYN timeouts or a RST is received from the real server.')
slbRealFailedClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 14), Unsigned32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealFailedClients.setStatus('current')
if mibBuilder.loadTexts: slbRealFailedClients.setDescription('The number of connections with distinct client IP addresses which need to fail on this real server before it goes to Failed state. A failed connection is when a SYN timeouts or a RST is received from the real server.')
slbRealConsecutiveFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealConsecutiveFails.setStatus('current')
if mibBuilder.loadTexts: slbRealConsecutiveFails.setDescription('The number of connection failures to this real server without a successful connection. A failed connection is when a SYN timeouts or a RST is received from the real server.')
slbRealTotalFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealTotalFails.setStatus('current')
if mibBuilder.loadTexts: slbRealTotalFails.setDescription('The total number of times this real server has failed since the creation of this row.')
slbRealRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbRealRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbRealRowStatus.setDescription('The object used by a management station to create or delete the row entry in slbRealTable following the RowStatus textual convention.')
slbRealTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealTotalConnections.setStatus('current')
if mibBuilder.loadTexts: slbRealTotalConnections.setDescription('The number of assigned connections handled by this real server since this server was configured.')
slbRealHCTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealHCTotalConnections.setStatus('current')
if mibBuilder.loadTexts: slbRealHCTotalConnections.setDescription('The number of assigned connections handled by this real server since this server was configured. This is the 64-bit version of slbRealTotalConnections.')
slbVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1), )
if mibBuilder.loadTexts: slbVirtualServerTable.setStatus('current')
if mibBuilder.loadTexts: slbVirtualServerTable.setDescription("Table of virtual servers. Columnar objects can be modified when the row is 'active'. Rows can be created and destroyed. Entries are added to this table via slbVirtualRowStatus in accordance with the RowStatus convention.")
slbVirtualServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbVirtualServerName"))
if mibBuilder.loadTexts: slbVirtualServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbVirtualServerTableEntry.setDescription('Information about a particular virtual server served by a particular local SLB entity.')
slbVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: slbVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: slbVirtualServerName.setDescription('The name of the virtual server.')
slbVirtualServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 2), SlbVirtualServState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualServerState.setStatus('current')
if mibBuilder.loadTexts: slbVirtualServerState.setDescription('The state of virtual server.')
slbVirtualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtualIndex.setStatus('current')
if mibBuilder.loadTexts: slbVirtualIndex.setDescription('The index assigned to a virtual server, used to correlate connections with virtual servers.')
slbVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbVirtualIpAddress.setDescription('The IP address of this virtual server.')
slbVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 5), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualPort.setStatus('current')
if mibBuilder.loadTexts: slbVirtualPort.setDescription('The port of this virtual server.')
slbVirtualProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 6), CiscoIpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualProtocol.setStatus('current')
if mibBuilder.loadTexts: slbVirtualProtocol.setDescription('The protocol for this virtual server.')
slbVirtualService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 7), SlbVirtualService().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualService.setStatus('current')
if mibBuilder.loadTexts: slbVirtualService.setDescription("The service setting for this virtual server. Setting this to other than 'none' results in an association being formed between clients using this service and this virtual server. Subsequent packets from clients requiring this service will be forwarded to the nominated real server.")
slbVirtualAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualAdvertise.setStatus('current')
if mibBuilder.loadTexts: slbVirtualAdvertise.setDescription("The setting for virtual address advertising. It is set to 'true' if this virtual server has added a static route to the routing table attracting traffic destined for slbVirtualIpAddress.")
slbVirtualFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 9), SlbServerString().clone('               ')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualFarmName.setStatus('current')
if mibBuilder.loadTexts: slbVirtualFarmName.setDescription('The name of virtual server farm bound to this virtual server.')
slbVirtualDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualDelayTimer.setStatus('current')
if mibBuilder.loadTexts: slbVirtualDelayTimer.setDescription('The amount of time this SLB entity will maintain TCP connection context after a connection has terminated.')
slbVirtualIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualIdleTimer.setStatus('current')
if mibBuilder.loadTexts: slbVirtualIdleTimer.setDescription("The amount of time this SLB entity will maintain connection information in the absence of packet activity for a connection. When the service is configured as 'gtp', this is the amount of time the SLB entity will forward SGSN retries for a SLB session to the same GGSN")
slbVirtualStickyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 12), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualStickyTimer.setStatus('current')
if mibBuilder.loadTexts: slbVirtualStickyTimer.setDescription("The amount of time that a connection's real server is remembered after a connection has terminated.")
slbVirtualStickyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualStickyGroup.setStatus('current')
if mibBuilder.loadTexts: slbVirtualStickyGroup.setDescription("The group ID associated with the 'sticky group' that this virtual server is placed in. A value of zero indicates that no 'sticky group' is associated with this virtual server.")
slbVirtualSynguardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualSynguardCount.setStatus('current')
if mibBuilder.loadTexts: slbVirtualSynguardCount.setDescription('The number of unanswered SYNs that are allowed to be outstanding to this virtual server. After this number is reached, SYNs are dropped depending on the value of slbVirtualSynguardPeriod.')
slbVirtualSynguardPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 15), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualSynguardPeriod.setStatus('current')
if mibBuilder.loadTexts: slbVirtualSynguardPeriod.setDescription('The interval of time that this virtual server can have outstanding unanswered SYNs. This is used with slbVirtualSynguardCount to limit outstanding SYNs.')
slbVirtualRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbVirtualRowStatus.setDescription('This object is used by a management station to create or delete the row entry in slbVirtualServerTable following the RowStatus textual convention.')
slbVirtualNumberOfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtualNumberOfConnections.setStatus('current')
if mibBuilder.loadTexts: slbVirtualNumberOfConnections.setDescription('The number of currently assigned connections being handled by this virtual server.')
slbVirtualTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtualTotalConnections.setStatus('current')
if mibBuilder.loadTexts: slbVirtualTotalConnections.setDescription('The number of assigned connections handled by this virtual server since this server was configured.')
slbVirtualHCTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtualHCTotalConnections.setStatus('current')
if mibBuilder.loadTexts: slbVirtualHCTotalConnections.setDescription('The number of assigned connections handled by this virtual server since this server was configured. This is the 64-bit version of slbVirtualTotalConnections.')
slbVirtualMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 1, 1, 20), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualMask.setStatus('current')
if mibBuilder.loadTexts: slbVirtualMask.setDescription('The IP subnet mask which is applied to the address of this virtual server for traffic filtering.')
slbVServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2), )
if mibBuilder.loadTexts: slbVServerInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbVServerInfoTable.setDescription('This table provides information on virtual servers.')
slbVServerInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbVServerIndex"))
if mibBuilder.loadTexts: slbVServerInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbVServerInfoTableEntry.setDescription('An entry in virtual server table. An entry gets created when class map is associated with policy map. An entry gets deleted when a class-map is disassociated with the policy-map.')
slbVServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: slbVServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbVServerIndex.setDescription('An unique identifier for the virtual server. This value is unique for a combination of class map and a policy map.')
slbVServerClassMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerClassMap.setStatus('current')
if mibBuilder.loadTexts: slbVServerClassMap.setDescription('This object contains the class map in which this virtual server is associated with it. A class-map is used to classify a set of traffic with which actions may be associated.')
slbVServerPolicyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerPolicyMap.setStatus('current')
if mibBuilder.loadTexts: slbVServerPolicyMap.setDescription('This object identifies the policy map. A policy-map can be used to identify various policies such as security policies or load balancing policies. A class map can be associated with a policy map.')
slbVServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 4), SlbVirtualServState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerState.setStatus('current')
if mibBuilder.loadTexts: slbVServerState.setDescription('The state of virtual server.')
slbVServerStateChangeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerStateChangeDescr.setStatus('current')
if mibBuilder.loadTexts: slbVServerStateChangeDescr.setDescription('This object contains the descriptive text qualifying the reason for the value in slbVServerState. Examples: OK Policy not configured Server Farm failed Real Server failed.')
slbVServerNumberOfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerNumberOfConnections.setStatus('current')
if mibBuilder.loadTexts: slbVServerNumberOfConnections.setDescription('The number of currently assigned connections being handled by this virtual server.')
slbVServerTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerTotalConnections.setStatus('current')
if mibBuilder.loadTexts: slbVServerTotalConnections.setDescription('The number of assigned connections handled by this virtual server since this server was configured.')
slbVServerDroppedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 8), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerDroppedConnections.setStatus('current')
if mibBuilder.loadTexts: slbVServerDroppedConnections.setDescription('The total number of connections dropped by this virtual server due to all reasons. Some of the reasons are - when the interface goes down. - when there are no active serverfarm(s)in policy. - when rserver in the serverfarm goes outofservice. - when the virtual server reaches maximum connections. - when the virtual server crosses the connection rate limit. Hence, the value of this object includes counters reported in following objects: -slbVServerMaxConnLimitDropCounts -slbVServerConnRateLimitDropCounts.')
slbVServerClientPacketCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerClientPacketCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerClientPacketCounts.setDescription('The number of packets sent to virtual server from client. Client is a system which sends requests to the virtual server.')
slbVServerPacketCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerPacketCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerPacketCounts.setDescription('The number of packets sent to virtual server from real server.')
slbVServerClientByteCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerClientByteCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerClientByteCounts.setDescription('The number of bytes sent to virtual server from client. Client is a system which sends requests to the virtual server.')
slbVServerByteCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 12), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerByteCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerByteCounts.setDescription('The number of bytes sent to virtual-server from real-server.')
slbVServerMaxConnLimitDropCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 13), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerMaxConnLimitDropCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerMaxConnLimitDropCounts.setDescription('The number of connections dropped after virtual-server reached maximum number of connections.')
slbVServerConnRateLimitDropCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 14), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerConnRateLimitDropCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerConnRateLimitDropCounts.setDescription('The number of connections dropped if virtual-server receives more number of connections per second than the configured rate limit.')
slbVServerBWRateLimitDropCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 15), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerBWRateLimitDropCounts.setStatus('deprecated')
if mibBuilder.loadTexts: slbVServerBWRateLimitDropCounts.setDescription("The number of connections dropped if accumulated bandwidth in all the connections to virtual-server crosses the configured bandwidth. This object has been deprecated because it doesn't give number of connections dropped but it gives number of bytes dropped. This object has been replaced by slbVServerBandWidthRateLimitDropCounts.")
slbVServerBandWidthRateLimitDropCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 16), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerBandWidthRateLimitDropCounts.setStatus('current')
if mibBuilder.loadTexts: slbVServerBandWidthRateLimitDropCounts.setDescription('The number of bytes dropped if accumulated bandwidth in all the connections to virtual-server crosses the configured bandwidth.')
slbVServerL4Decisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 17), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerL4Decisions.setStatus('current')
if mibBuilder.loadTexts: slbVServerL4Decisions.setDescription('The number of layer4 loadbalance decisions made by this virtual server.')
slbVServerL7Decisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 18), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerL7Decisions.setStatus('current')
if mibBuilder.loadTexts: slbVServerL7Decisions.setDescription('The total number of layer7 loadbalance decisions made by this virtual server.')
slbVServerEstablishedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 2, 1, 19), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVServerEstablishedConnections.setStatus('current')
if mibBuilder.loadTexts: slbVServerEstablishedConnections.setDescription('The total number of successfully established connections to this virtual server.')
slbVServerIPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3), )
if mibBuilder.loadTexts: slbVServerIPTable.setStatus('current')
if mibBuilder.loadTexts: slbVServerIPTable.setDescription('This table contains the IP Addresses configured for virtual servers. A virtual server can have more than one IP Address configured in it.')
slbVServerIPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbVServerIndex"), (0, "CISCO-SLB-MIB", "slbVServerObjectIndex"))
if mibBuilder.loadTexts: slbVServerIPTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbVServerIPTableEntry.setDescription('An entry in the virtual server IP table. Each entry contains virtual server attributes that are used for server loadbalancing decisions.')
slbVServerObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: slbVServerObjectIndex.setStatus('current')
if mibBuilder.loadTexts: slbVServerObjectIndex.setDescription('The index identifying an entry applicable to the same virtual server identified by slbVServerIndex.')
slbVServerIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: slbVServerIpAddressType.setDescription('The type of IP address configured in slbVServerIpAddress.')
slbVServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbVServerIpAddress.setDescription('The IP address of the virtual server. The type of IP address is provided in slbVServerIpAddressType.')
slbVServerIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 4), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerIpMask.setStatus('current')
if mibBuilder.loadTexts: slbVServerIpMask.setDescription('This object is subnet mask for the slbVServerIpAddress. The IP subnet mask is applied to the address of this virtual server for traffic filtering. The value 0 is used to specifiy that the address mask of the virtual server is unknown or not used.')
slbVServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 5), CiscoIpProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerProtocol.setStatus('current')
if mibBuilder.loadTexts: slbVServerProtocol.setDescription('The protocol for the virtual server IP address.')
slbVServerPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerPortLow.setStatus('current')
if mibBuilder.loadTexts: slbVServerPortLow.setDescription('This object identifies the port number of the virtual server that is used in loadbalancing decisions. This has to be less than or equal to slbVServerPortHigh.')
slbVServerPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerPortHigh.setStatus('current')
if mibBuilder.loadTexts: slbVServerPortHigh.setDescription('This object identifies the upper bound of the port number of the virtual server that is used in loadbalancing decisions. This has to be greater than or equal to slbVServerPortLow.')
slbVServerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 8), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerStorageType.setStatus('current')
if mibBuilder.loadTexts: slbVServerStorageType.setDescription('The storage type for this conceptual row.')
slbVServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 4, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbVServerRowStatus.setDescription('This object is used to create/delete entries in this table.')
slbConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1), )
if mibBuilder.loadTexts: slbConnectionTable.setStatus('current')
if mibBuilder.loadTexts: slbConnectionTable.setDescription('Table of connections being load-balanced by SLB.')
slbConnectionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbConnectionIndex"), (0, "CISCO-SLB-MIB", "slbConnectionVirtualIpAddress"), (0, "CISCO-SLB-MIB", "slbConnectionVirtualPort"), (0, "CISCO-SLB-MIB", "slbConnectionProtocol"), (0, "CISCO-SLB-MIB", "slbConnectionClientIpAddr"), (0, "CISCO-SLB-MIB", "slbConnectionClientPort"))
if mibBuilder.loadTexts: slbConnectionTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbConnectionTableEntry.setDescription('A list of attributes for a particular SLB connection.')
slbConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: slbConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: slbConnectionIndex.setDescription('The index to internal structures for the connection.')
slbConnectionVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: slbConnectionVirtualIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbConnectionVirtualIpAddress.setDescription('The IP address of the virtual server.')
slbConnectionVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 3), CiscoPort())
if mibBuilder.loadTexts: slbConnectionVirtualPort.setStatus('current')
if mibBuilder.loadTexts: slbConnectionVirtualPort.setDescription('The port of the virtual server.')
slbConnectionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 4), CiscoIpProtocol())
if mibBuilder.loadTexts: slbConnectionProtocol.setStatus('current')
if mibBuilder.loadTexts: slbConnectionProtocol.setDescription('The connection protocol.')
slbConnectionClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: slbConnectionClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbConnectionClientIpAddr.setDescription('The client IP address.')
slbConnectionClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 6), CiscoPort())
if mibBuilder.loadTexts: slbConnectionClientPort.setStatus('current')
if mibBuilder.loadTexts: slbConnectionClientPort.setDescription('The client port.')
slbConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 7), SlbConnectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbConnectionState.setStatus('current')
if mibBuilder.loadTexts: slbConnectionState.setDescription('The current state of this connection.')
slbConnectionRealIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbConnectionRealIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbConnectionRealIpAddr.setDescription('The IP Address of the real server to which this client is being load-balanced.')
slbConnectionServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 9), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbConnectionServerPort.setStatus('current')
if mibBuilder.loadTexts: slbConnectionServerPort.setDescription('The port number at the real server to which this client is being load-balanced.')
slbConnectionNumCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbConnectionNumCacheEntries.setStatus('current')
if mibBuilder.loadTexts: slbConnectionNumCacheEntries.setDescription('The number of netflow cache entries for this connection. An entry for a terminated connection cannot be deleted while this number is non-zero.')
slbConnectionSynCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbConnectionSynCount.setStatus('current')
if mibBuilder.loadTexts: slbConnectionSynCount.setDescription('The number of SYNs seen from client.')
slbVirtualClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6, 1), )
if mibBuilder.loadTexts: slbVirtualClientTable.setStatus('current')
if mibBuilder.loadTexts: slbVirtualClientTable.setDescription("Table of virtual clients for a particular virtual server. Columnar objects can be modified when the row is 'active'. Entries are added to this table via slbVirtualClientRowStatus in accordance with the RowStatus convention.")
slbVirtualClientTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbVirtualServerName"), (0, "CISCO-SLB-MIB", "slbVirtualClientIpAddress"), (0, "CISCO-SLB-MIB", "slbVirtualClientMask"))
if mibBuilder.loadTexts: slbVirtualClientTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbVirtualClientTableEntry.setDescription('Information about a particular client range for a virtual server served by a particular local SLB entity. If client ranges overlap, the entry with the longest match will be used.')
slbVirtualClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: slbVirtualClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbVirtualClientIpAddress.setDescription('The IP address of the client. It is used along with the slbVirtualClientMask to represent subsets of client traffic being handled by the particular virtual server.')
slbVirtualClientMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: slbVirtualClientMask.setStatus('current')
if mibBuilder.loadTexts: slbVirtualClientMask.setDescription('The general purpose mask of the client. It is used along with the slbVirtualClientIpAddress to represent subsets of client traffic being handled by the particular virtual server.')
slbVirtualClientExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualClientExclude.setStatus('current')
if mibBuilder.loadTexts: slbVirtualClientExclude.setDescription('The truth value that determines if the client range should be included or excluded on the virtual server.')
slbVirtualClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbVirtualClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbVirtualClientRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbVirtualClientTable following the RowStatus textual convention.')
slbStickyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1), )
if mibBuilder.loadTexts: slbStickyObjectTable.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectTable.setDescription("Table of sticky objects. Sticky objects allow related connections to be sent to the same real server on a per client basis. Sticky objects are useful for FTP and SSL connections. Columnar objects can be modified when the row is 'active'. Entries are added to this table via slbStickyObjectRowStatus in accordance with the RowStatus convention.")
slbStickyObjectTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbStickyObjectGroupId"), (0, "CISCO-SLB-MIB", "slbStickyObjectClientIpAddress"))
if mibBuilder.loadTexts: slbStickyObjectTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectTableEntry.setDescription('Information about a particular sticky object for clients at a particular IP address served by a particular local SLB entity.')
slbStickyObjectGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: slbStickyObjectGroupId.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectGroupId.setDescription('The group ID for this sticky object.')
slbStickyObjectClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: slbStickyObjectClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectClientIpAddress.setDescription('The client IP address with which this object is associated.')
slbStickyObjectRealIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbStickyObjectRealIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectRealIpAddress.setDescription('The real server IP address selected for all clients bound to this sticky object.')
slbStickyObjectConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStickyObjectConnectionCount.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectConnectionCount.setDescription('The number of connections currently associated with this sticky object.')
slbStickyObjectFtpControlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStickyObjectFtpControlCount.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectFtpControlCount.setDescription('The number of FTP control connections currently associated with this sticky object.')
slbStickyObjectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 7, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbStickyObjectRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbStickyObjectRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbStickyObjectTable following the RowStatus textual convention.')
cSlbVirtStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSlbVirtStateChangeNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cSlbVirtStateChangeNotifEnabled.setDescription("The virtual server notification truth value. 'true' Indicates that ciscoSlbVirtualStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoSlbVirtualStateChange notification generation is disabled.")
cSlbRealStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSlbRealStateChangeNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cSlbRealStateChangeNotifEnabled.setDescription("The real server notification truth value. 'true' Indicates that ciscoSlbRealStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoSlbRealStateChange notification generation is disabled.")
cSlbVServerStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSlbVServerStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cSlbVServerStateChangeNotifEnabled.setDescription("The virtual server notification truth value. This object controls the generation of following notifications: ciscoSlbVServerStateChange ciscoSlbVServerVIPStateChange 'true' Indicates whether notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates notification should not be generated. That is, the notification generation is disabled.")
cSlbVirtualServerStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSlbVirtualServerStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cSlbVirtualServerStateChangeNotifEnabled.setDescription("The virtual server notification truth value. 'true' Indicates that ciscoSlbVirtualServerStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoSlbVirtualServerStateChange notification generation is disabled.")
cSlbRealServerStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSlbRealServerStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cSlbRealServerStateChangeNotifEnabled.setDescription("The real server notification truth value. 'true' Indicates that ciscoSlbRealServerStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoSlbRealServerStateChange notification generation is disabled.")
slbInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 6), InetAddressType().clone('ipv4')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slbInetAddressType.setStatus('current')
if mibBuilder.loadTexts: slbInetAddressType.setDescription('The type of IP address configured in slbInetAddress.')
slbInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 7), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slbInetAddress.setStatus('current')
if mibBuilder.loadTexts: slbInetAddress.setDescription('This object contains IP address of slb object. Slb object can be a real server identified by slbRealIpAddress or virtual server identified by slbVirtualServerName. The type of Ip address is provided in slbInetAddressType.')
slbName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 8), SlbServerString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slbName.setStatus('current')
if mibBuilder.loadTexts: slbName.setDescription('This object contains the name of slb object. Slb object can be a real server identified by slbRealIpAddress or virtual server identified by slbVirtualServerName.')
slbPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 8, 9), CiscoPort()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slbPort.setStatus('current')
if mibBuilder.loadTexts: slbPort.setDescription('This object contains port value of slb object. Slb object can be a real server identified by slbRealIpAddress or virtual server identified by slbVirtualServerName.')
slbDfpPasswordTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 9, 1), )
if mibBuilder.loadTexts: slbDfpPasswordTable.setStatus('current')
if mibBuilder.loadTexts: slbDfpPasswordTable.setDescription("A table of password values which a local Server Load Balancing Manager uses so that it can communicate with remote DFP agents. Entries are added to this table via slbDfpPasswordRowStatus in accordance with the RowStatus convention. Columnar objects can be modified when in row is 'active'. Rows can be created and destroyed.")
slbDfpPasswordTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"))
if mibBuilder.loadTexts: slbDfpPasswordTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbDfpPasswordTableEntry.setDescription('An entry in this table represents the password used by a particular DFP manager (identified by slbEntity) when it exchanges messages with DFP agents.')
slbDfpPasswordPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 9, 1, 1, 1), SlbPasswordString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpPasswordPending.setStatus('current')
if mibBuilder.loadTexts: slbDfpPasswordPending.setDescription('The pending password which will be used by DFP for MD5 authentication within password timeout ticks. When read, this object returns a zero-length string and writing a zero-length string unsets the password. If this object is modified twice within the time interval given by slbDfpPasswordTimeout, the password and timeout of the first modification are forgotten and replaced by the password and timeout of the second.')
slbDfpPasswordTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 9, 1, 1, 2), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpPasswordTimeout.setStatus('current')
if mibBuilder.loadTexts: slbDfpPasswordTimeout.setDescription('The time interval between the setting of the pending password and the removal of the current password.')
slbDfpPasswordRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 9, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpPasswordRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbDfpPasswordRowStatus.setDescription('The object is used by a management station to create or delete the row entry in slbDfpPasswordTable following the RowStatus textual convention.')
slbDfpAgentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1), )
if mibBuilder.loadTexts: slbDfpAgentTable.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentTable.setDescription("A table of remote DFP agents with which the local DFP managers communicate. Rows can be created and destroyed. Columnar objects can be modified when the row is 'active'. Entries are added to this table via slbDfpAgentRowStatus in accordance with the RowStatus convention.")
slbDfpAgentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbDfpAgentIpAddress"), (0, "CISCO-SLB-MIB", "slbDfpAgentPort"))
if mibBuilder.loadTexts: slbDfpAgentTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentTableEntry.setDescription('Information about the communication between a local DFP manager and a particular remote DFP agent.')
slbDfpAgentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: slbDfpAgentIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentIpAddress.setDescription("The DFP agent's IP address.")
slbDfpAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 2), CiscoPort())
if mibBuilder.loadTexts: slbDfpAgentPort.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentPort.setDescription("The DFP agent's port.")
slbDfpAgentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 3), SlbDfpAgentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbDfpAgentState.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentState.setDescription('The state of the DFP agent.')
slbDfpAgentTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 4), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpAgentTimeout.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentTimeout.setDescription('Time interval during which the agent must send at least one message to the manager.')
slbDfpAgentRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpAgentRetryCount.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentRetryCount.setDescription("The number of times the manager will attempt to re-establish a connection with the agent. If this value is exceeded, the agent is placed in 'failed' state, and the manager does not attempt to re-establish a connection with the agent.")
slbDfpAgentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 6), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpAgentInterval.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentInterval.setDescription('Time interval before SLB retries connecting to a DFP agent.')
slbDfpAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 10, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpAgentRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbDfpAgentRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbDfpAgentTable following the RowStatus textual convention.')
slbDfpRealTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1), )
if mibBuilder.loadTexts: slbDfpRealTable.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealTable.setDescription("A table containing information about Real Servers obtained through communications between local DFP manager and remote DFP agents. Rows can be created and destroyed. Columnar objects can be modified when the row is 'active'. Entries are added to this table via slbDfpRowStatus in accordance with the RowStatus convention.")
slbDfpRealTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbDfpRealIpAddress"), (0, "CISCO-SLB-MIB", "slbDfpRealProtocol"), (0, "CISCO-SLB-MIB", "slbDfpRealPort"), (0, "CISCO-SLB-MIB", "slbDfpRealBindId"))
if mibBuilder.loadTexts: slbDfpRealTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealTableEntry.setDescription("Information about a particular real server, within one or more server farms (identified with 'bindId'), reported by a DFP agent for a particular local SLB entity. The real servers are identified by finding rows in slbServerFarmTable for which slbServerFarmBindId matches slbDfpRealBindId. For each identified server farm, extract the slbServerFarmName and use this value together with slbDfpRealIpAddress and slbDfpRealPort to identify the row in slbRealTable.")
slbDfpRealIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: slbDfpRealIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealIpAddress.setDescription("The DFP agent's IP address")
slbDfpRealProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1, 2), CiscoIpProtocol())
if mibBuilder.loadTexts: slbDfpRealProtocol.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealProtocol.setDescription('The protocol of the real server.')
slbDfpRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1, 3), CiscoPort())
if mibBuilder.loadTexts: slbDfpRealPort.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealPort.setDescription('The port number of the real server.')
slbDfpRealBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: slbDfpRealBindId.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealBindId.setDescription('The Bind ID identifies one or more server farms to which the real server belongs. The real servers are identified by finding rows in slbServerFarmTable for which slbServerFarmBindId matches slbDfpRealBindId. For each identified server farm, extract the slbServerFarmName and use this value together with slbDfpRealIpAddress and slbDfpRealPort to identify the row in slbRealTable.')
slbDfpRealWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpRealWeight.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealWeight.setDescription('The weight of the real server reported from a DFP agent. The weight represents a relative capacity to accept new connections.')
slbDfpRealRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 11, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbDfpRealRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbDfpRealRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbDfpRealTable following the RowStatus textual convention.')
slbSaspTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1), )
if mibBuilder.loadTexts: slbSaspTable.setStatus('current')
if mibBuilder.loadTexts: slbSaspTable.setDescription('An entry containing information about the Server Application State Protocol (SASP). There is only one entry for each load balancer. This entry is created by the load balancer during initialization.')
slbSaspTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"))
if mibBuilder.loadTexts: slbSaspTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbSaspTableEntry.setDescription('Information for a particular local SLB entity using the SASP functionality. The SASP entry is identified by the slbEntity. The SASP entry includes all of the relevant information needed to run SASP on this particular slbEntity.')
slbSaspIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSaspIdentifier.setStatus('current')
if mibBuilder.loadTexts: slbSaspIdentifier.setDescription("The unique identifier required by SASP for all load balancers. In a redundant system, where there is a master and backup load balancer, each load balancer must have different identifiers. The slbSaspIdentifier may only be changed when the slbSaspEnabled object is false. The default value of the slbSaspIdentfier is 'Cisco-<LB>', where <LB> is the Cisco acronoym for the load balancer.")
slbSaspEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSaspEnabled.setStatus('current')
if mibBuilder.loadTexts: slbSaspEnabled.setDescription("Indicates whether the SASP functionality is currently in use by the load balancer. 'true' The SASP functionality is enabled on the load balancer. 'false' The SASP functionality is disabled on the load balancer.")
slbSaspHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1, 3), SlbSaspLBHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspHealth.setStatus('current')
if mibBuilder.loadTexts: slbSaspHealth.setDescription("The health value reported to the SASP Agents via the Set Load Balancer State Message. The value represents the load balancer's ability to handle SASP messages.")
slbSaspRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1, 4), SlbSaspRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspRedundancy.setStatus('current')
if mibBuilder.loadTexts: slbSaspRedundancy.setDescription("The Load Balancer's state in a redundant setup. The Load Balancer may still contact the SASP Agents, which are defined in the slbSaspAgentTable, regardless of the state. This is possible because every Load Balancer contacting a SASP Agent is required to have it's own unique identifier. Therefore, the master and backup Load Balancer MUST have different unique identifiers.")
slbSaspMaxAgents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMaxAgents.setStatus('current')
if mibBuilder.loadTexts: slbSaspMaxAgents.setDescription('The maximum number of SASP Agents that can be configured on the Load Balancer. The SASP Agents are configured via the slbSaspAgentTable.')
slbSaspMaxLbWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 12, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMaxLbWeight.setStatus('current')
if mibBuilder.loadTexts: slbSaspMaxLbWeight.setDescription("The maximum weight supported by the Load Balancer. Any weight reported for a SASP Member, which can be found within the slbSaspMemberSaspWeight object, MUST be converted to the Load Balancer's weight range. The minimum weight for a Load Balancer MUST be zero. A weight of zero indicates that the SASP Member is down and that the Member is not going to receive new connections.")
slbSaspAgentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1), )
if mibBuilder.loadTexts: slbSaspAgentTable.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentTable.setDescription("A table containing information about the SASP Agents. Rows can be created and destroyed. Columnar objects can be modified when the row is 'active'. Entries are added to this table via slbSaspAgentRowStatus. A SASP Agent is an application or device that is responsible for aggregating information regarding the performance of a SASP Member. The information is used to calculate a weight that is reported to the load balancer.")
slbSaspAgentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbSaspAgentIpAddressType"), (0, "CISCO-SLB-MIB", "slbSaspAgentIpAddress"), (0, "CISCO-SLB-MIB", "slbSaspAgentPort"))
if mibBuilder.loadTexts: slbSaspAgentTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentTableEntry.setDescription('The SASP Agent entry provides information for a particular SASP Agent on a local SLB entity. The objects provide the contact information and the current connection state of the Agent.')
slbSaspAgentIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: slbSaspAgentIpAddressType.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentIpAddressType.setDescription('Defines the IP address type used by the slbSaspAgentIpAddress.')
slbSaspAgentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: slbSaspAgentIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentIpAddress.setDescription('The IP address of the SASP Agent that is used for weight reporting.')
slbSaspAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: slbSaspAgentPort.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentPort.setDescription('The TCP Port number used when connecting to a SASP Agent.')
slbSaspAgentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbSaspAgentLabel.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentLabel.setDescription('A label that can be assigned by the user for the SASP Agent during entry creation. The label should be in a human readable form that describes the SASP Agent. The description could be the physical location of the Agent or some other field relevant to the user. The label is provided for informational purposes only, and it does not affect the operation of the SASP Agent.')
slbSaspAgentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 5), SlbSaspAgentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspAgentState.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentState.setDescription('The current connection state of the SASP Agent. The load balancer does not give up trying to reach the SASP Agent when it is down.')
slbSaspAgentLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspAgentLastStateChange.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentLastStateChange.setDescription('Displays the date and time of the last state change that was incurred by the Agent. The time that is reported is only local time, so the timezone portion of the DateAndTime TC will not be specified.')
slbSaspAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 13, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbSaspAgentRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbSaspAgentRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbSaspAgentTable following the RowStatus textual convention.')
slbSaspGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 14, 1), )
if mibBuilder.loadTexts: slbSaspGroupTable.setStatus('current')
if mibBuilder.loadTexts: slbSaspGroupTable.setDescription('A table containing information about the SASP Groups. Rows can be created and destroyed. Entries are added to this table via slbSaspGroupRowStatus. A SASP Group is a logical entity used within the SASP implementation to group SASP Members that are equivalent in function.')
slbSaspGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 14, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbSaspGroupName"))
if mibBuilder.loadTexts: slbSaspGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbSaspGroupTableEntry.setDescription('The SASP Group table provides the information for a particular group associated with a SASP Agent on a local SLB entity.')
slbSaspGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 14, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: slbSaspGroupName.setStatus('current')
if mibBuilder.loadTexts: slbSaspGroupName.setDescription('The SASP group represents the group of SASP Members that have the same functional capabilities.')
slbSaspGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 14, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbSaspGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbSaspGroupRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbSaspGroupTable following the RowStatus textual convention. Removing the group from this table would have the effect of removing all of the SASP Members associated with this group from the SASP Member table.')
slbSaspMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1), )
if mibBuilder.loadTexts: slbSaspMemberTable.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberTable.setDescription("A table containing information about the SASP Members. Rows can be created and destroyed. Columnar objects can be modified when the row is 'active'. Entries are added to this table via slbSaspMemberRowStatus. A SASP Member is an entity configured on the load balancer to help distribute the load for one or more services.")
slbSaspMemberTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbSaspAgentIpAddressType"), (0, "CISCO-SLB-MIB", "slbSaspAgentIpAddress"), (0, "CISCO-SLB-MIB", "slbSaspAgentPort"), (0, "CISCO-SLB-MIB", "slbSaspGroupName"), (0, "CISCO-SLB-MIB", "slbSaspMemberIpAddressType"), (0, "CISCO-SLB-MIB", "slbSaspMemberIpAddress"), (0, "CISCO-SLB-MIB", "slbSaspMemberPort"), (0, "CISCO-SLB-MIB", "slbSaspMemberProtocol"))
if mibBuilder.loadTexts: slbSaspMemberTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberTableEntry.setDescription('The SASP Member table provides information about a particular SASP Member associated with a SASP Agent. Each entry contains all of the weight information that is necessary to use SASP on the load balancer. It is important that the SASP Member only report to one SASP Agent. This will avoid any weight reporting issues that may arise when the SASP Agent communicates with the load balancer.')
slbSaspMemberIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: slbSaspMemberIpAddressType.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberIpAddressType.setDescription('Defines the IP address type of the slbSaspMemberIpAddress.')
slbSaspMemberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: slbSaspMemberIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberIpAddress.setDescription("The IP address of the member. The IP address, along with the port and protocol type, is registered with the SASP Agent. The SASP Agent includes this information when reporting the weights for each member in either the 'Get Weights Reply' or the 'Send Weights Message'.")
slbSaspMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: slbSaspMemberPort.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberPort.setDescription("The TCP or UDP port number associated with the slbSaspMemberIpAddress. The port number, along with the IP address and protocol type, is registered with the SASP Agent. The SASP Agent includes this information when reporting the weights for each member in either the 'Get Weights Reply' or the 'Send Weights Message'.")
slbSaspMemberProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 4), CiscoIpProtocol())
if mibBuilder.loadTexts: slbSaspMemberProtocol.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberProtocol.setDescription("The IP protocol type that is associated with the slbSaspMemberIpAddress and slbSaspMemberPort. The protocol type, along with the IP address and port number, is registered with the SASP Agent. The SASP Agent includes this information when reporting the weights for each member in either the 'Get Weights Reply' or the 'Send Weights Message'.")
slbSaspMemberSaspWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMemberSaspWeight.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberSaspWeight.setDescription("The reported weight by the SASP Agent. The weights are reported via the 'Send Weights Message' or in the 'Get Weights Reply'. The reported weight MUST be converted to be within the Load Balancer's supported weight range, specified by the slbSaspMaxLbWeight object. The resulting weight value will be stored in the slbSaspMemberConvertedWeight object.")
slbSaspMemberConfidentWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMemberConfidentWeight.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberConfidentWeight.setDescription("Represents the SASP Agent's confidence in the reported weight. 'true' Indicates the slbSaspMemberSaspWeight value is accurate and reflects the up-to-date real-time statistics collected by the SASP Agent. 'false' Indicates the SASP Agent is guessing the weight of the member based on prior knowledge. It is at the load balancer's discretion whether or not to use this weight. If not, the default weight must be used (slbSaspMemberDefaultWeight).")
slbSaspMemberConvertedWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMemberConvertedWeight.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberConvertedWeight.setDescription("The SASP weight converted to the local load balancer weight range. The load balancer's weight range is implementation dependent, as is the formula used to convert the weight. The following formula is an example weight conversion that could be used by the load balancer: answer => slbSaspMemberConvertedWeight maxLbWgt => slbSaspMaxLbWeight mbrSaspWgt => slbSaspMemberSaspWeight answer = ((mbrSaspWgt * maxLbWgt) / 65535) + 1 Note: There are two edge cases that need to be considered; when the mbrSaspWgt is 0 and 65535. If the mbrSaspWgt is 0, then the converted weight must also be 0 (the result of the calculation would be 1). If the mbrSaspWgt is 65535, then the converted weight must be the load balancers maximum weight (the result of the calculation would be the load balancers maxiumum weight plus 1).")
slbSaspMemberDefaultWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbSaspMemberDefaultWeight.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberDefaultWeight.setDescription('The default weight assigned to the member if any SASP Agent weight reporting failure occurs. If there is a communication failure or if the slbSaspMemberConfidentWeight is false, then the load balancer should use this weight as its fallback weight when making load balancing decisions.')
slbSaspMemberWeightChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMemberWeightChanges.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberWeightChanges.setDescription('The total number of times the weight has been modified by the SASP Agent.')
slbSaspMemberLastWeightChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspMemberLastWeightChange.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberLastWeightChange.setDescription('Displays the date and time of the last weight change. The time that is reported is only local time, so the timezone portion of the DateAndTime TC will not be specified. If there have been no reports, the empty string is returned.')
slbSaspMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 15, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbSaspMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbSaspMemberRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in slbSaspMemberTable following the RowStatus textual convention.')
slbSaspStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1), )
if mibBuilder.loadTexts: slbSaspStatsTable.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTable.setDescription('A table containing information about the Server Application State Protocol Statistics. Rows are created and destroyed when an entry for the slbSaspAgentTable is created or destroy via the slbSaspAgentRowStatus.')
slbSaspStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbSaspAgentIpAddressType"), (0, "CISCO-SLB-MIB", "slbSaspAgentIpAddress"), (0, "CISCO-SLB-MIB", "slbSaspAgentPort"))
if mibBuilder.loadTexts: slbSaspStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTableEntry.setDescription('Each entry corresponds to a SASP Agent from the slbSaspAgentTable. Each entry contains statistics related to the transmitted and received SASP messages. A slbSaspStatsTableEntry cannot exist without a corresponding entry in the slbSaspAgentTable.')
slbSaspStatsTxRegMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsTxRegMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTxRegMsgs.setDescription('The total number of SASP Registration Requests transmitted from the load balancer to the SASP Agent. The registration message informs the Agent to start reporting the server weight for each member listed in the message.')
slbSaspStatsTxDeregMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsTxDeregMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTxDeregMsgs.setDescription('The total number of SASP Deregistration Requests transmitted from the load balancer to the SASP Agent. The deregistration message informs the Agent to stop reporting the server weight for each member listed in the message.')
slbSaspStatsTxGetWeightMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsTxGetWeightMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTxGetWeightMsgs.setDescription('The total number of SASP Get Weight Requests transmitted from the load balancer to the SASP Agent. The get weights message is only used when the load balancer is actively retrieving the weight for each member.')
slbSaspStatsTxSetLBStateMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsTxSetLBStateMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTxSetLBStateMsgs.setDescription("The total number of SASP Set Load Balancer State Requests transmitted from the load balancer to the SASP Agent. The message is used to inform the SASP Agent of the load balancer's health and its current options.")
slbSaspStatsTxSetMemStateMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsTxSetMemStateMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsTxSetMemStateMsgs.setDescription('The total number of SASP Set Member State Requests transmitted from the load balancer to the SASP Agent. This message is used to inform the SASP Agent that a member has either been activated, or has dropped out of service.')
slbSaspStatsRxSendWeightMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsRxSendWeightMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsRxSendWeightMsgs.setDescription('The total number of SASP Send Weight Messages received from the SASP Agent. This message is used to update the member weights when the load balancer is passively retrieving them.')
slbSaspStatsRxRegMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsRxRegMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsRxRegMsgs.setDescription('The total number of SASP Registration Replies received from the SASP Agent. This response indicates whether the transmitted registration request was successful, or had a failure.')
slbSaspStatsRxDeregMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsRxDeregMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsRxDeregMsgs.setDescription('The total number of SASP Deregistration Replies received from the SASP Agent. This response indicates whether the transmitted request was successful, or had a failure.')
slbSaspStatsRxGetWeightMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsRxGetWeightMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsRxGetWeightMsgs.setDescription('The total number of SASP Get Weight Replies received from the SASP Agent. This response contains the current weights for the requested members. This message is used when the load balancer is actively retrieving member weights.')
slbSaspStatsRxSetLBStateMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsRxSetLBStateMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsRxSetLBStateMsgs.setDescription('The total number of SASP Set Load Balancer State Replies received from the SASP Agent. The response indicates whether the transmitted request was successful, or had a failure.')
slbSaspStatsRxSetMemStateMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 161, 1, 16, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSaspStatsRxSetMemStateMsgs.setStatus('current')
if mibBuilder.loadTexts: slbSaspStatsRxSetMemStateMsgs.setDescription('The total number of SASP Set Member State Replies received from the SASP Agent. The response indicates whether the transmitted request was successful, or had a failure.')
ciscoSlbMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 2))
ciscoSlbMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0))
ciscoSlbVirtualStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 1)).setObjects(("CISCO-SLB-MIB", "slbVirtualServerState"))
if mibBuilder.loadTexts: ciscoSlbVirtualStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbVirtualStateChange.setDescription('The notification generated when a virtual server changes to a new state. The value of slbVirtualServerState indicates the new state.')
ciscoSlbRealStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 2)).setObjects(("CISCO-SLB-MIB", "slbRealState"))
if mibBuilder.loadTexts: ciscoSlbRealStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbRealStateChange.setDescription('The notification generated when a real server changes to a new state. The value of slbRealServerState indicates the new state.')
ciscoSlbSaspStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 3)).setObjects(("CISCO-SLB-MIB", "slbSaspEnabled"))
if mibBuilder.loadTexts: ciscoSlbSaspStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspStateChange.setDescription('The notification generated when the SASP functionality has been enabled or disabled on the Load Balancer.')
ciscoSlbSaspAgentStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 4)).setObjects(("CISCO-SLB-MIB", "slbSaspAgentState"))
if mibBuilder.loadTexts: ciscoSlbSaspAgentStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspAgentStateChange.setDescription('The notification generated when a SASP Agent changes to a new state.')
ciscoSlbVServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 5)).setObjects(("CISCO-SLB-MIB", "slbVServerState"), ("CISCO-SLB-MIB", "slbVServerStateChangeDescr"), ("CISCO-SLB-MIB", "slbVServerClassMap"), ("CISCO-SLB-MIB", "slbVServerPolicyMap"))
if mibBuilder.loadTexts: ciscoSlbVServerStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVServerStateChange.setDescription('The notification generated when a virtual server state is changed.')
ciscoSlbVServerVIPStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 6)).setObjects(("CISCO-SLB-MIB", "slbVServerState"), ("CISCO-SLB-MIB", "slbVServerStateChangeDescr"), ("CISCO-SLB-MIB", "slbVServerClassMap"), ("CISCO-SLB-MIB", "slbVServerPolicyMap"), ("CISCO-SLB-MIB", "slbVServerIpAddressType"), ("CISCO-SLB-MIB", "slbVServerIpAddress"), ("CISCO-SLB-MIB", "slbVServerProtocol"))
if mibBuilder.loadTexts: ciscoSlbVServerVIPStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVServerVIPStateChange.setDescription('The notification generated when configuration or association of virtual server IP address(VIP) changes.')
ciscoSlbVirtualServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 7)).setObjects(("ENTITY-MIB", "entPhysicalParentRelPos"), ("CISCO-SLB-MIB", "slbVirtualServerState"), ("CISCO-SLB-MIB", "slbVirtualIpAddress"), ("CISCO-SLB-MIB", "slbVirtualProtocol"), ("CISCO-SLB-MIB", "slbVirtualPort"), ("CISCO-SLB-MIB", "slbName"))
if mibBuilder.loadTexts: ciscoSlbVirtualServerStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVirtualServerStateChange.setDescription('This notification is generated when a virtual server changes to a new state. - entPhysicalParentRelPos contains the slot number of the module. - slbVirtualServerState contains the new state of the virtual server identified by slbVirtualServerName. - slbVirtualIpAddress contains the ip address of the virtual server identified by slbVirtualServerName. - slbVirtualProtocol contains the protocol of the virtual server identified by slbVirtualServerName. - slbVirtualPort contains the port number of the virtual server identified by slbVirtualServerName. - slbName contains the name of the virtual server identified by slbVirtualServerName.')
ciscoSlbRealServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 161, 2, 0, 8)).setObjects(("ENTITY-MIB", "entPhysicalParentRelPos"), ("CISCO-SLB-MIB", "slbRealState"), ("CISCO-SLB-MIB", "slbInetAddressType"), ("CISCO-SLB-MIB", "slbInetAddress"), ("CISCO-SLB-MIB", "slbPort"), ("CISCO-SLB-MIB", "slbName"))
if mibBuilder.loadTexts: ciscoSlbRealServerStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbRealServerStateChange.setDescription('This notification is generated when a real server changes to a new state. - entPhysicalParentRelPos contains the slot number of the module. - slbRealState contains the new state of real server identified by slbRealIpAddress. - slbInetAddressType contains the type of IP address configured in slbInetAddress. - slbInetAddress contains the ip address of the real server identified by the INDEX object slbRealIpAddress. - slbPort contains the TCP/UDP port of the real server identified by the INDEX object slbRealPort. - slbName contains the serverfarm name atached to to the real server identified by the INDEX object slbRealServerFarmName.')
ciscoSlbMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 3))
ciscoSlbMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1))
ciscoSlbMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2))
ciscoSlbMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 1)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBCompliance = ciscoSlbMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 2)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBComplianceRev1 = ciscoSlbMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 3)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroupGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspMemberGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBComplianceRev2 = ciscoSlbMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 4)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroupGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspMemberGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerInfoGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerIPGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBComplianceRev3 = ciscoSlbMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 5)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbNotifGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroupGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspMemberGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerInfoGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerIPGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBComplianceRev4 = ciscoSlbMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 6)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbNotifGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroupGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspMemberGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerInfoGroupRev1"), ("CISCO-SLB-MIB", "ciscoSlbVServerIPGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBComplianceRev5 = ciscoSlbMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 1, 7)).setObjects(("CISCO-SLB-MIB", "ciscoSlbStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpPasswordGroup"), ("CISCO-SLB-MIB", "ciscoSlbServerFarmsGroup"), ("CISCO-SLB-MIB", "ciscoSlbRealServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbConnectionsGroup"), ("CISCO-SLB-MIB", "ciscoSlbStickyObjectsGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbDfpRealGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifEnabledGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbNotifGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspAgentGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspGroupGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspMemberGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspStatsGroup"), ("CISCO-SLB-MIB", "ciscoSlbSaspNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualServersGroup"), ("CISCO-SLB-MIB", "ciscoSlbVirtualClientsGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerInfoGroupRev2"), ("CISCO-SLB-MIB", "ciscoSlbVServerIPGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifEnabledGroup"), ("CISCO-SLB-MIB", "ciscoSlbVServerNotifGroup"), ("CISCO-SLB-MIB", "ciscoSlbNotifObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbMIBComplianceRev6 = ciscoSlbMIBComplianceRev6.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbMIBComplianceRev6.setDescription('The compliance statement for entities which implement the Cisco SLB MIB')
ciscoSlbStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 1)).setObjects(("CISCO-SLB-MIB", "slbStatsUnassistedSwitchingPkts"), ("CISCO-SLB-MIB", "slbStatsUnassistedSwitchingHCPks"), ("CISCO-SLB-MIB", "slbStatsAssistedSwitchingPkts"), ("CISCO-SLB-MIB", "slbStatsAssistedSwitchingHCPkts"), ("CISCO-SLB-MIB", "slbStatsCreatedConnections"), ("CISCO-SLB-MIB", "slbStatsCreatedHCConnections"), ("CISCO-SLB-MIB", "slbStatsEstablishedConnections"), ("CISCO-SLB-MIB", "slbStatsEstablishedHCConnections"), ("CISCO-SLB-MIB", "slbStatsDestroyedConnections"), ("CISCO-SLB-MIB", "slbStatsDestroyedHCConnections"), ("CISCO-SLB-MIB", "slbStatsReassignedConnections"), ("CISCO-SLB-MIB", "slbStatsReassignedHCConnections"), ("CISCO-SLB-MIB", "slbStatsZombies"), ("CISCO-SLB-MIB", "slbStatsHCZombies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbStatsGroup = ciscoSlbStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbStatsGroup.setDescription('SLB Statistic objects.')
ciscoSlbServerFarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 2)).setObjects(("CISCO-SLB-MIB", "slbServerFarmPredictor"), ("CISCO-SLB-MIB", "slbServerFarmNat"), ("CISCO-SLB-MIB", "slbServerFarmNumberOfRealServers"), ("CISCO-SLB-MIB", "slbServerFarmBindId"), ("CISCO-SLB-MIB", "slbServerFarmRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbServerFarmsGroup = ciscoSlbServerFarmsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbServerFarmsGroup.setDescription('The SLB serverfarm objects.')
ciscoSlbRealServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 3)).setObjects(("CISCO-SLB-MIB", "slbRealState"), ("CISCO-SLB-MIB", "slbRealNumberOfConnections"), ("CISCO-SLB-MIB", "slbRealNumberOfDummyConnections"), ("CISCO-SLB-MIB", "slbRealMaxConnections"), ("CISCO-SLB-MIB", "slbRealAdminWeight"), ("CISCO-SLB-MIB", "slbRealOperWeight"), ("CISCO-SLB-MIB", "slbRealMetric"), ("CISCO-SLB-MIB", "slbRealReassign"), ("CISCO-SLB-MIB", "slbRealRetryInterval"), ("CISCO-SLB-MIB", "slbRealFailedConnections"), ("CISCO-SLB-MIB", "slbRealFailedClients"), ("CISCO-SLB-MIB", "slbRealConsecutiveFails"), ("CISCO-SLB-MIB", "slbRealTotalFails"), ("CISCO-SLB-MIB", "slbRealRowStatus"), ("CISCO-SLB-MIB", "slbRealTotalConnections"), ("CISCO-SLB-MIB", "slbRealHCTotalConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbRealServersGroup = ciscoSlbRealServersGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbRealServersGroup.setDescription('The SLB real server objects.')
ciscoSlbVirtualServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 4)).setObjects(("CISCO-SLB-MIB", "slbVirtualServerState"), ("CISCO-SLB-MIB", "slbVirtualIndex"), ("CISCO-SLB-MIB", "slbVirtualIpAddress"), ("CISCO-SLB-MIB", "slbVirtualPort"), ("CISCO-SLB-MIB", "slbVirtualProtocol"), ("CISCO-SLB-MIB", "slbVirtualService"), ("CISCO-SLB-MIB", "slbVirtualAdvertise"), ("CISCO-SLB-MIB", "slbVirtualFarmName"), ("CISCO-SLB-MIB", "slbVirtualDelayTimer"), ("CISCO-SLB-MIB", "slbVirtualIdleTimer"), ("CISCO-SLB-MIB", "slbVirtualStickyTimer"), ("CISCO-SLB-MIB", "slbVirtualStickyGroup"), ("CISCO-SLB-MIB", "slbVirtualSynguardCount"), ("CISCO-SLB-MIB", "slbVirtualSynguardPeriod"), ("CISCO-SLB-MIB", "slbVirtualRowStatus"), ("CISCO-SLB-MIB", "slbVirtualNumberOfConnections"), ("CISCO-SLB-MIB", "slbVirtualTotalConnections"), ("CISCO-SLB-MIB", "slbVirtualHCTotalConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVirtualServersGroup = ciscoSlbVirtualServersGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVirtualServersGroup.setDescription('The SLB virtual server objects.')
ciscoSlbConnectionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 5)).setObjects(("CISCO-SLB-MIB", "slbConnectionState"), ("CISCO-SLB-MIB", "slbConnectionRealIpAddr"), ("CISCO-SLB-MIB", "slbConnectionServerPort"), ("CISCO-SLB-MIB", "slbConnectionNumCacheEntries"), ("CISCO-SLB-MIB", "slbConnectionSynCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbConnectionsGroup = ciscoSlbConnectionsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbConnectionsGroup.setDescription('The SLB connection objects.')
ciscoSlbVirtualClientsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 6)).setObjects(("CISCO-SLB-MIB", "slbVirtualClientExclude"), ("CISCO-SLB-MIB", "slbVirtualClientRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVirtualClientsGroup = ciscoSlbVirtualClientsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVirtualClientsGroup.setDescription('The SLB virtual client objects.')
ciscoSlbStickyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 7)).setObjects(("CISCO-SLB-MIB", "slbStickyObjectRealIpAddress"), ("CISCO-SLB-MIB", "slbStickyObjectConnectionCount"), ("CISCO-SLB-MIB", "slbStickyObjectFtpControlCount"), ("CISCO-SLB-MIB", "slbStickyObjectRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbStickyObjectsGroup = ciscoSlbStickyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbStickyObjectsGroup.setDescription('The SLB sticky objects.')
ciscoSlbDfpPasswordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 8)).setObjects(("CISCO-SLB-MIB", "slbDfpPasswordPending"), ("CISCO-SLB-MIB", "slbDfpPasswordTimeout"), ("CISCO-SLB-MIB", "slbDfpPasswordRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbDfpPasswordGroup = ciscoSlbDfpPasswordGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbDfpPasswordGroup.setDescription('SLB DFP password objects.')
ciscoSlbDfpAgentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 9)).setObjects(("CISCO-SLB-MIB", "slbDfpAgentState"), ("CISCO-SLB-MIB", "slbDfpAgentTimeout"), ("CISCO-SLB-MIB", "slbDfpAgentRetryCount"), ("CISCO-SLB-MIB", "slbDfpAgentInterval"), ("CISCO-SLB-MIB", "slbDfpAgentRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbDfpAgentGroup = ciscoSlbDfpAgentGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbDfpAgentGroup.setDescription('The SLB DFP agent objects.')
ciscoSlbDfpRealGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 10)).setObjects(("CISCO-SLB-MIB", "slbDfpRealWeight"), ("CISCO-SLB-MIB", "slbDfpRealRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbDfpRealGroup = ciscoSlbDfpRealGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbDfpRealGroup.setDescription('The SLB DFP real server objects.')
ciscoSlbNotifEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 11)).setObjects(("CISCO-SLB-MIB", "cSlbVirtStateChangeNotifEnabled"), ("CISCO-SLB-MIB", "cSlbRealStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbNotifEnabledGroup = ciscoSlbNotifEnabledGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbNotifEnabledGroup.setDescription('The SLB Notification Truth Value objects.')
ciscoSlbVirtualServersAddGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 12)).setObjects(("CISCO-SLB-MIB", "slbVirtualMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVirtualServersAddGroup = ciscoSlbVirtualServersAddGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVirtualServersAddGroup.setDescription('A collection of additional SlbVirtualServer objects used to further define an Slb virtual server.')
ciscoSlbNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 13)).setObjects(("CISCO-SLB-MIB", "ciscoSlbVirtualStateChange"), ("CISCO-SLB-MIB", "ciscoSlbRealStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbNotifGroup = ciscoSlbNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbNotifGroup.setDescription('A collection of objects providing SLB notifications.')
ciscoSlbSaspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 14)).setObjects(("CISCO-SLB-MIB", "slbSaspIdentifier"), ("CISCO-SLB-MIB", "slbSaspEnabled"), ("CISCO-SLB-MIB", "slbSaspHealth"), ("CISCO-SLB-MIB", "slbSaspRedundancy"), ("CISCO-SLB-MIB", "slbSaspMaxAgents"), ("CISCO-SLB-MIB", "slbSaspMaxLbWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbSaspGroup = ciscoSlbSaspGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspGroup.setDescription('The SLB SASP objects.')
ciscoSlbSaspAgentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 15)).setObjects(("CISCO-SLB-MIB", "slbSaspAgentLabel"), ("CISCO-SLB-MIB", "slbSaspAgentState"), ("CISCO-SLB-MIB", "slbSaspAgentLastStateChange"), ("CISCO-SLB-MIB", "slbSaspAgentRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbSaspAgentGroup = ciscoSlbSaspAgentGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspAgentGroup.setDescription('The SLB SASP Agent objects.')
ciscoSlbSaspGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 16)).setObjects(("CISCO-SLB-MIB", "slbSaspGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbSaspGroupGroup = ciscoSlbSaspGroupGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspGroupGroup.setDescription('The SLB SASP Group objects.')
ciscoSlbSaspMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 17)).setObjects(("CISCO-SLB-MIB", "slbSaspMemberSaspWeight"), ("CISCO-SLB-MIB", "slbSaspMemberConfidentWeight"), ("CISCO-SLB-MIB", "slbSaspMemberConvertedWeight"), ("CISCO-SLB-MIB", "slbSaspMemberDefaultWeight"), ("CISCO-SLB-MIB", "slbSaspMemberWeightChanges"), ("CISCO-SLB-MIB", "slbSaspMemberLastWeightChange"), ("CISCO-SLB-MIB", "slbSaspMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbSaspMemberGroup = ciscoSlbSaspMemberGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspMemberGroup.setDescription('The SLB SASP Member objects.')
ciscoSlbSaspStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 18)).setObjects(("CISCO-SLB-MIB", "slbSaspStatsTxRegMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsTxDeregMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsTxGetWeightMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsTxSetLBStateMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsTxSetMemStateMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsRxSendWeightMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsRxRegMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsRxDeregMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsRxGetWeightMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsRxSetLBStateMsgs"), ("CISCO-SLB-MIB", "slbSaspStatsRxSetMemStateMsgs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbSaspStatsGroup = ciscoSlbSaspStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspStatsGroup.setDescription('A collection of objects providing SLB SASP statistics.')
ciscoSlbSaspNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 19)).setObjects(("CISCO-SLB-MIB", "ciscoSlbSaspStateChange"), ("CISCO-SLB-MIB", "ciscoSlbSaspAgentStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbSaspNotifGroup = ciscoSlbSaspNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbSaspNotifGroup.setDescription('A collection of objects providing SASP notifications.')
ciscoSlbVServerInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 21)).setObjects(("CISCO-SLB-MIB", "slbVServerClassMap"), ("CISCO-SLB-MIB", "slbVServerPolicyMap"), ("CISCO-SLB-MIB", "slbVServerState"), ("CISCO-SLB-MIB", "slbVServerStateChangeDescr"), ("CISCO-SLB-MIB", "slbVServerNumberOfConnections"), ("CISCO-SLB-MIB", "slbVServerTotalConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVServerInfoGroup = ciscoSlbVServerInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbVServerInfoGroup.setDescription('The list of objects that are applicable to virtual server statistics.')
ciscoSlbVServerIPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 22)).setObjects(("CISCO-SLB-MIB", "slbVServerIpAddressType"), ("CISCO-SLB-MIB", "slbVServerIpAddress"), ("CISCO-SLB-MIB", "slbVServerIpMask"), ("CISCO-SLB-MIB", "slbVServerProtocol"), ("CISCO-SLB-MIB", "slbVServerPortLow"), ("CISCO-SLB-MIB", "slbVServerPortHigh"), ("CISCO-SLB-MIB", "slbVServerStorageType"), ("CISCO-SLB-MIB", "slbVServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVServerIPGroup = ciscoSlbVServerIPGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVServerIPGroup.setDescription('The list of objects that are applicable to virtual server identified by IP Address/Port.')
ciscoSlbVServerNotifEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 23)).setObjects(("CISCO-SLB-MIB", "cSlbVServerStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVServerNotifEnabledGroup = ciscoSlbVServerNotifEnabledGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVServerNotifEnabledGroup.setDescription('The object used for enabling/disabling Virtual Server notifications.')
ciscoSlbVServerNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 24)).setObjects(("CISCO-SLB-MIB", "ciscoSlbVServerStateChange"), ("CISCO-SLB-MIB", "ciscoSlbVServerVIPStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVServerNotifGroup = ciscoSlbVServerNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVServerNotifGroup.setDescription('A collection of objects providing Virtual Server notifications.')
ciscoSlbNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 25)).setObjects(("CISCO-SLB-MIB", "slbInetAddressType"), ("CISCO-SLB-MIB", "slbInetAddress"), ("CISCO-SLB-MIB", "slbName"), ("CISCO-SLB-MIB", "slbPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbNotifObjectsGroup = ciscoSlbNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbNotifObjectsGroup.setDescription('A collection of generic objects that are applicable to slb module.')
ciscoSlbNotifEnabledGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 26)).setObjects(("CISCO-SLB-MIB", "cSlbVirtualServerStateChangeNotifEnabled"), ("CISCO-SLB-MIB", "cSlbRealServerStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbNotifEnabledGroupRev2 = ciscoSlbNotifEnabledGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbNotifEnabledGroupRev2.setDescription('The SLB Notification Truth Value objects.')
ciscoSlbNotifGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 27)).setObjects(("CISCO-SLB-MIB", "ciscoSlbVirtualServerStateChange"), ("CISCO-SLB-MIB", "ciscoSlbRealServerStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbNotifGroupRev2 = ciscoSlbNotifGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbNotifGroupRev2.setDescription('A collection of objects providing SLB notifications.')
ciscoSlbVServerInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 28)).setObjects(("CISCO-SLB-MIB", "slbVServerClassMap"), ("CISCO-SLB-MIB", "slbVServerPolicyMap"), ("CISCO-SLB-MIB", "slbVServerState"), ("CISCO-SLB-MIB", "slbVServerStateChangeDescr"), ("CISCO-SLB-MIB", "slbVServerNumberOfConnections"), ("CISCO-SLB-MIB", "slbVServerTotalConnections"), ("CISCO-SLB-MIB", "slbVServerDroppedConnections"), ("CISCO-SLB-MIB", "slbVServerClientPacketCounts"), ("CISCO-SLB-MIB", "slbVServerPacketCounts"), ("CISCO-SLB-MIB", "slbVServerClientByteCounts"), ("CISCO-SLB-MIB", "slbVServerByteCounts"), ("CISCO-SLB-MIB", "slbVServerMaxConnLimitDropCounts"), ("CISCO-SLB-MIB", "slbVServerConnRateLimitDropCounts"), ("CISCO-SLB-MIB", "slbVServerBWRateLimitDropCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVServerInfoGroupRev1 = ciscoSlbVServerInfoGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSlbVServerInfoGroupRev1.setDescription('The list of objects that are applicable to virtual server statistics.')
ciscoSlbVServerInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 161, 3, 2, 29)).setObjects(("CISCO-SLB-MIB", "slbVServerClassMap"), ("CISCO-SLB-MIB", "slbVServerPolicyMap"), ("CISCO-SLB-MIB", "slbVServerState"), ("CISCO-SLB-MIB", "slbVServerStateChangeDescr"), ("CISCO-SLB-MIB", "slbVServerNumberOfConnections"), ("CISCO-SLB-MIB", "slbVServerTotalConnections"), ("CISCO-SLB-MIB", "slbVServerDroppedConnections"), ("CISCO-SLB-MIB", "slbVServerClientPacketCounts"), ("CISCO-SLB-MIB", "slbVServerPacketCounts"), ("CISCO-SLB-MIB", "slbVServerClientByteCounts"), ("CISCO-SLB-MIB", "slbVServerByteCounts"), ("CISCO-SLB-MIB", "slbVServerMaxConnLimitDropCounts"), ("CISCO-SLB-MIB", "slbVServerConnRateLimitDropCounts"), ("CISCO-SLB-MIB", "slbVServerBandWidthRateLimitDropCounts"), ("CISCO-SLB-MIB", "slbVServerL4Decisions"), ("CISCO-SLB-MIB", "slbVServerL7Decisions"), ("CISCO-SLB-MIB", "slbVServerEstablishedConnections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSlbVServerInfoGroupRev2 = ciscoSlbVServerInfoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoSlbVServerInfoGroupRev2.setDescription('The list of objects that are applicable to virtual server statistics.')
mibBuilder.exportSymbols("CISCO-SLB-MIB", slbInetAddressType=slbInetAddressType, slbSaspAgentTable=slbSaspAgentTable, slbVirtualSynguardCount=slbVirtualSynguardCount, slbRealFailedClients=slbRealFailedClients, ciscoSlbSaspMemberGroup=ciscoSlbSaspMemberGroup, ciscoSlbSaspNotifGroup=ciscoSlbSaspNotifGroup, slbDfpAgentPort=slbDfpAgentPort, slbSaspMemberIpAddressType=slbSaspMemberIpAddressType, slbDfpRealWeight=slbDfpRealWeight, slbVirtualFarmName=slbVirtualFarmName, slbSaspStatsTableEntry=slbSaspStatsTableEntry, slbStickyObjectRowStatus=slbStickyObjectRowStatus, slbSaspGroupTableEntry=slbSaspGroupTableEntry, slbVServerByteCounts=slbVServerByteCounts, SlbServerString=SlbServerString, slbVirtualNumberOfConnections=slbVirtualNumberOfConnections, slbDfpAgentInterval=slbDfpAgentInterval, slbVServerClientByteCounts=slbVServerClientByteCounts, ciscoSlbConnectionsGroup=ciscoSlbConnectionsGroup, slbConnectionRealIpAddr=slbConnectionRealIpAddr, ciscoSlbSaspGroupGroup=ciscoSlbSaspGroupGroup, slbSaspStatsTxSetMemStateMsgs=slbSaspStatsTxSetMemStateMsgs, ciscoSlbRealServerStateChange=ciscoSlbRealServerStateChange, ciscoSlbMIBComplianceRev4=ciscoSlbMIBComplianceRev4, slbVServerClientPacketCounts=slbVServerClientPacketCounts, slbSaspMemberProtocol=slbSaspMemberProtocol, slbVServerInfoTableEntry=slbVServerInfoTableEntry, slbName=slbName, slbRealOperWeight=slbRealOperWeight, slbRealFailedConnections=slbRealFailedConnections, ciscoSlbVServerNotifGroup=ciscoSlbVServerNotifGroup, slbDfpAgents=slbDfpAgents, slbVServerState=slbVServerState, slbVirtualDelayTimer=slbVirtualDelayTimer, slbVServerIndex=slbVServerIndex, slbSaspAgentIpAddressType=slbSaspAgentIpAddressType, slbVServerBWRateLimitDropCounts=slbVServerBWRateLimitDropCounts, slbStickyObjectTable=slbStickyObjectTable, slbDfpRealPort=slbDfpRealPort, ciscoSlbMIBComplianceRev1=ciscoSlbMIBComplianceRev1, slbSaspMemberRowStatus=slbSaspMemberRowStatus, slbNotificationObjects=slbNotificationObjects, slbVirtualClients=slbVirtualClients, slbVirtualStickyGroup=slbVirtualStickyGroup, slbVirtualMask=slbVirtualMask, slbSaspStatsTxGetWeightMsgs=slbSaspStatsTxGetWeightMsgs, slbDfpReal=slbDfpReal, slbConnectionState=slbConnectionState, slbServerFarmNumberOfRealServers=slbServerFarmNumberOfRealServers, slbRealAdminWeight=slbRealAdminWeight, slbVServerMaxConnLimitDropCounts=slbVServerMaxConnLimitDropCounts, slbVServerProtocol=slbVServerProtocol, slbVirtualPort=slbVirtualPort, slbVirtualServerTable=slbVirtualServerTable, slbSasp=slbSasp, SlbConnectionState=SlbConnectionState, slbStatsZombies=slbStatsZombies, cSlbRealServerStateChangeNotifEnabled=cSlbRealServerStateChangeNotifEnabled, slbRealNumberOfDummyConnections=slbRealNumberOfDummyConnections, slbSaspStatsTxRegMsgs=slbSaspStatsTxRegMsgs, ciscoSlbDfpPasswordGroup=ciscoSlbDfpPasswordGroup, slbStatsAssistedSwitchingPkts=slbStatsAssistedSwitchingPkts, slbDfpAgentTimeout=slbDfpAgentTimeout, slbVServerL4Decisions=slbVServerL4Decisions, slbSaspStatsTxDeregMsgs=slbSaspStatsTxDeregMsgs, slbEntity=slbEntity, SlbVirtualServState=SlbVirtualServState, slbVServerIPTableEntry=slbVServerIPTableEntry, ciscoSlbVServerInfoGroupRev1=ciscoSlbVServerInfoGroupRev1, slbStatsTable=slbStatsTable, slbSaspGroupTable=slbSaspGroupTable, slbRealReassign=slbRealReassign, ciscoSlbStatsGroup=ciscoSlbStatsGroup, slbSaspMembers=slbSaspMembers, slbConnectionVirtualIpAddress=slbConnectionVirtualIpAddress, slbSaspMaxLbWeight=slbSaspMaxLbWeight, ciscoSlbMIBComplianceRev3=ciscoSlbMIBComplianceRev3, slbSaspMemberLastWeightChange=slbSaspMemberLastWeightChange, slbRealRetryInterval=slbRealRetryInterval, SlbSaspRedundancy=SlbSaspRedundancy, slbRealTotalConnections=slbRealTotalConnections, slbDfpPasswordTable=slbDfpPasswordTable, slbDfpAgentState=slbDfpAgentState, slbStickyObjectFtpControlCount=slbStickyObjectFtpControlCount, slbVirtualProtocol=slbVirtualProtocol, slbStatsUnassistedSwitchingPkts=slbStatsUnassistedSwitchingPkts, slbConnectionVirtualPort=slbConnectionVirtualPort, slbSaspMemberSaspWeight=slbSaspMemberSaspWeight, slbServerFarmBindId=slbServerFarmBindId, ciscoSlbNotifEnabledGroup=ciscoSlbNotifEnabledGroup, slbSaspStatsRxDeregMsgs=slbSaspStatsRxDeregMsgs, ciscoSlbVServerInfoGroupRev2=ciscoSlbVServerInfoGroupRev2, slbConnections=slbConnections, slbVServerStorageType=slbVServerStorageType, ciscoSlbVServerInfoGroup=ciscoSlbVServerInfoGroup, slbVServerConnRateLimitDropCounts=slbVServerConnRateLimitDropCounts, slbRealTableEntry=slbRealTableEntry, slbConnectionTableEntry=slbConnectionTableEntry, slbRealServerFarmName=slbRealServerFarmName, slbConnectionClientPort=slbConnectionClientPort, slbSaspGroupRowStatus=slbSaspGroupRowStatus, slbSaspMemberPort=slbSaspMemberPort, slbSaspAgents=slbSaspAgents, slbVirtualServers=slbVirtualServers, PYSNMP_MODULE_ID=ciscoSlbMIB, slbVServerTotalConnections=slbVServerTotalConnections, slbVServerRowStatus=slbVServerRowStatus, slbSaspMaxAgents=slbSaspMaxAgents, slbStats=slbStats, slbSaspAgentState=slbSaspAgentState, slbVirtualClientIpAddress=slbVirtualClientIpAddress, slbStatsAssistedSwitchingHCPkts=slbStatsAssistedSwitchingHCPkts, slbDfpRealBindId=slbDfpRealBindId, ciscoSlbMIBConformance=ciscoSlbMIBConformance, slbVirtualAdvertise=slbVirtualAdvertise, slbSaspGroups=slbSaspGroups, ciscoSlbNotifGroup=ciscoSlbNotifGroup, ciscoSlbVServerIPGroup=ciscoSlbVServerIPGroup, slbVirtualClientMask=slbVirtualClientMask, slbVirtualServerState=slbVirtualServerState, slbSaspAgentRowStatus=slbSaspAgentRowStatus, ciscoSlbStickyObjectsGroup=ciscoSlbStickyObjectsGroup, slbStatsCreatedHCConnections=slbStatsCreatedHCConnections, slbSaspStatsRxSetMemStateMsgs=slbSaspStatsRxSetMemStateMsgs, slbRealHCTotalConnections=slbRealHCTotalConnections, ciscoSlbRealServersGroup=ciscoSlbRealServersGroup, ciscoSlbMIBNotifications=ciscoSlbMIBNotifications, slbStatsUnassistedSwitchingHCPks=slbStatsUnassistedSwitchingHCPks, slbServerFarmTableEntry=slbServerFarmTableEntry, slbRealMaxConnections=slbRealMaxConnections, slbVirtualRowStatus=slbVirtualRowStatus, slbInetAddress=slbInetAddress, slbSaspAgentIpAddress=slbSaspAgentIpAddress, slbServerFarmTable=slbServerFarmTable, slbSaspMemberTable=slbSaspMemberTable, ciscoSlbVirtualServersAddGroup=ciscoSlbVirtualServersAddGroup, ciscoSlbMIBCompliance=ciscoSlbMIBCompliance, slbVServerPolicyMap=slbVServerPolicyMap, slbStatsHCZombies=slbStatsHCZombies, slbVServerDroppedConnections=slbVServerDroppedConnections, ciscoSlbRealStateChange=ciscoSlbRealStateChange, slbRealRowStatus=slbRealRowStatus, ciscoSlbMIBObjects=ciscoSlbMIBObjects, slbRealTotalFails=slbRealTotalFails, cSlbVirtStateChangeNotifEnabled=cSlbVirtStateChangeNotifEnabled, slbDfpPasswordTimeout=slbDfpPasswordTimeout, slbVServerIPTable=slbVServerIPTable, slbDfpPasswordPending=slbDfpPasswordPending, slbServerFarmNat=slbServerFarmNat, ciscoSlbMIBCompliances=ciscoSlbMIBCompliances, ciscoSlbSaspStatsGroup=ciscoSlbSaspStatsGroup, slbStatsTableEntry=slbStatsTableEntry, slbSaspStatsRxSetLBStateMsgs=slbSaspStatsRxSetLBStateMsgs, slbRealIpAddress=slbRealIpAddress, slbSaspEnabled=slbSaspEnabled, slbVServerPortHigh=slbVServerPortHigh, slbSaspStats=slbSaspStats, slbStickyObjectClientIpAddress=slbStickyObjectClientIpAddress, slbVirtualClientTable=slbVirtualClientTable, slbSaspMemberConfidentWeight=slbSaspMemberConfidentWeight, slbConnectionClientIpAddr=slbConnectionClientIpAddr, slbRealConsecutiveFails=slbRealConsecutiveFails, slbStatsCreatedConnections=slbStatsCreatedConnections, slbVirtualIpAddress=slbVirtualIpAddress, slbServerFarmRowStatus=slbServerFarmRowStatus, slbRealNumberOfConnections=slbRealNumberOfConnections, slbVServerBandWidthRateLimitDropCounts=slbVServerBandWidthRateLimitDropCounts, ciscoSlbNotifObjectsGroup=ciscoSlbNotifObjectsGroup, slbStatsReassignedConnections=slbStatsReassignedConnections, slbPort=slbPort, ciscoSlbMIBComplianceRev6=ciscoSlbMIBComplianceRev6, slbSaspRedundancy=slbSaspRedundancy, slbVServerInfoTable=slbVServerInfoTable, ciscoSlbVServerStateChange=ciscoSlbVServerStateChange, slbStickyObjectConnectionCount=slbStickyObjectConnectionCount, ciscoSlbMIBNotificationPrefix=ciscoSlbMIBNotificationPrefix, slbStickyObjectRealIpAddress=slbStickyObjectRealIpAddress, slbSaspAgentPort=slbSaspAgentPort, SlbSaspAgentState=SlbSaspAgentState, slbRealPort=slbRealPort, ciscoSlbVServerVIPStateChange=ciscoSlbVServerVIPStateChange, ciscoSlbVirtualClientsGroup=ciscoSlbVirtualClientsGroup, ciscoSlbDfpAgentGroup=ciscoSlbDfpAgentGroup, slbDfpRealTableEntry=slbDfpRealTableEntry, slbStatsEstablishedConnections=slbStatsEstablishedConnections, ciscoSlbVirtualServersGroup=ciscoSlbVirtualServersGroup, slbVirtualService=slbVirtualService, slbDfpPasswordTableEntry=slbDfpPasswordTableEntry, ciscoSlbVServerNotifEnabledGroup=ciscoSlbVServerNotifEnabledGroup, slbVServerEstablishedConnections=slbVServerEstablishedConnections, slbSaspTable=slbSaspTable, SlbSaspLBHealth=SlbSaspLBHealth, slbVirtualStickyTimer=slbVirtualStickyTimer, ciscoSlbVirtualServerStateChange=ciscoSlbVirtualServerStateChange, slbVServerPacketCounts=slbVServerPacketCounts, slbDfpRealIpAddress=slbDfpRealIpAddress, slbVServerIpMask=slbVServerIpMask, slbSaspTableEntry=slbSaspTableEntry, slbSaspHealth=slbSaspHealth, slbSaspAgentTableEntry=slbSaspAgentTableEntry, slbVServerIpAddressType=slbVServerIpAddressType, slbSaspIdentifier=slbSaspIdentifier, cSlbVirtualServerStateChangeNotifEnabled=cSlbVirtualServerStateChangeNotifEnabled, slbDfpAgentRowStatus=slbDfpAgentRowStatus, slbConnectionSynCount=slbConnectionSynCount, slbSaspMemberIpAddress=slbSaspMemberIpAddress, slbStatsDestroyedConnections=slbStatsDestroyedConnections, slbVirtualIdleTimer=slbVirtualIdleTimer, slbStickyObjectGroupId=slbStickyObjectGroupId, cSlbRealStateChangeNotifEnabled=cSlbRealStateChangeNotifEnabled, ciscoSlbNotifGroupRev2=ciscoSlbNotifGroupRev2, slbStatsReassignedHCConnections=slbStatsReassignedHCConnections, slbRealState=slbRealState, ciscoSlbSaspGroup=ciscoSlbSaspGroup, ciscoSlbNotifEnabledGroupRev2=ciscoSlbNotifEnabledGroupRev2, slbServerFarms=slbServerFarms, slbVirtualClientExclude=slbVirtualClientExclude, slbDfpRealRowStatus=slbDfpRealRowStatus, slbServerFarmName=slbServerFarmName, slbDfpPassword=slbDfpPassword, slbVServerPortLow=slbVServerPortLow, slbDfpAgentRetryCount=slbDfpAgentRetryCount, SlbPasswordString=SlbPasswordString, SlbPredictor=SlbPredictor, slbVirtualHCTotalConnections=slbVirtualHCTotalConnections, slbSaspMemberConvertedWeight=slbSaspMemberConvertedWeight, slbStickyObjects=slbStickyObjects, slbVirtualTotalConnections=slbVirtualTotalConnections, slbVirtualClientTableEntry=slbVirtualClientTableEntry, slbSaspAgentLastStateChange=slbSaspAgentLastStateChange, slbConnectionTable=slbConnectionTable, slbSaspStatsTxSetLBStateMsgs=slbSaspStatsTxSetLBStateMsgs, slbStatsDestroyedHCConnections=slbStatsDestroyedHCConnections, slbSaspStatsRxSendWeightMsgs=slbSaspStatsRxSendWeightMsgs, slbVServerObjectIndex=slbVServerObjectIndex, ciscoSlbSaspAgentStateChange=ciscoSlbSaspAgentStateChange, slbServerFarmPredictor=slbServerFarmPredictor, ciscoSlbVirtualStateChange=ciscoSlbVirtualStateChange, slbVirtualServerTableEntry=slbVirtualServerTableEntry, slbDfpPasswordRowStatus=slbDfpPasswordRowStatus, slbDfpAgentIpAddress=slbDfpAgentIpAddress, slbVirtualSynguardPeriod=slbVirtualSynguardPeriod, slbDfpRealProtocol=slbDfpRealProtocol, ciscoSlbServerFarmsGroup=ciscoSlbServerFarmsGroup, slbVServerL7Decisions=slbVServerL7Decisions, slbVServerClassMap=slbVServerClassMap, SlbRealServerState=SlbRealServerState, SlbVirtualService=SlbVirtualService, slbRealMetric=slbRealMetric, slbVirtualServerName=slbVirtualServerName, slbVirtualIndex=slbVirtualIndex, slbVServerNumberOfConnections=slbVServerNumberOfConnections, slbConnectionServerPort=slbConnectionServerPort, slbSaspAgentLabel=slbSaspAgentLabel)
mibBuilder.exportSymbols("CISCO-SLB-MIB", slbStatsEstablishedHCConnections=slbStatsEstablishedHCConnections, slbConnectionProtocol=slbConnectionProtocol, slbSaspGroupName=slbSaspGroupName, ciscoSlbMIBGroups=ciscoSlbMIBGroups, ciscoSlbMIBComplianceRev5=ciscoSlbMIBComplianceRev5, ciscoSlbMIB=ciscoSlbMIB, cSlbVServerStateChangeNotifEnabled=cSlbVServerStateChangeNotifEnabled, slbSaspMemberDefaultWeight=slbSaspMemberDefaultWeight, SlbNatSetting=SlbNatSetting, slbRealTable=slbRealTable, slbVServerStateChangeDescr=slbVServerStateChangeDescr, slbVirtualClientRowStatus=slbVirtualClientRowStatus, slbConnectionIndex=slbConnectionIndex, slbSaspMemberTableEntry=slbSaspMemberTableEntry, slbSaspMemberWeightChanges=slbSaspMemberWeightChanges, ciscoSlbDfpRealGroup=ciscoSlbDfpRealGroup, slbSaspStatsRxGetWeightMsgs=slbSaspStatsRxGetWeightMsgs, slbDfpAgentTable=slbDfpAgentTable, ciscoSlbMIBComplianceRev2=ciscoSlbMIBComplianceRev2, slbConnectionNumCacheEntries=slbConnectionNumCacheEntries, slbDfpRealTable=slbDfpRealTable, slbDfpAgentTableEntry=slbDfpAgentTableEntry, slbRealServers=slbRealServers, slbVServerIpAddress=slbVServerIpAddress, slbSaspStatsTable=slbSaspStatsTable, SlbDfpAgentState=SlbDfpAgentState, ciscoSlbSaspStateChange=ciscoSlbSaspStateChange, ciscoSlbSaspAgentGroup=ciscoSlbSaspAgentGroup, slbStickyObjectTableEntry=slbStickyObjectTableEntry, slbSaspStatsRxRegMsgs=slbSaspStatsRxRegMsgs)
