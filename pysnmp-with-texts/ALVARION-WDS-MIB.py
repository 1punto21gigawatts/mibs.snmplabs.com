#
# PySNMP MIB module ALVARION-WDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALVARION-WDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alvarionMgmtV2, = mibBuilder.importSymbols("ALVARION-SMI", "alvarionMgmtV2")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Integer32, Gauge32, iso, Bits, Counter64, NotificationType, ObjectIdentity, IpAddress, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Integer32", "Gauge32", "iso", "Bits", "Counter64", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier", "TimeTicks")
TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
alvarionWdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33))
if mibBuilder.loadTexts: alvarionWdsMIB.setLastUpdated('200710310000Z')
if mibBuilder.loadTexts: alvarionWdsMIB.setOrganization('Alvarion Ltd.')
if mibBuilder.loadTexts: alvarionWdsMIB.setContactInfo('Alvarion Ltd. Postal: 21a HaBarzel St. P.O. Box 13139 Tel-Aviv 69710 Israel Phone: +972 3 645 6262')
if mibBuilder.loadTexts: alvarionWdsMIB.setDescription('Alvarion WDS MIB.')
alvarionWdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1))
coWDSInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 1))
coWDSRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2))
coWDSGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3))
coWDSLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4))
coWDSNetworkScanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5))
coWDSNumberOfGroup = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSNumberOfGroup.setStatus('current')
if mibBuilder.loadTexts: coWDSNumberOfGroup.setDescription('Number of WDS groups supported by the product.')
coWDSDynamicModeImplemented = MibScalar((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSDynamicModeImplemented.setStatus('current')
if mibBuilder.loadTexts: coWDSDynamicModeImplemented.setDescription('Indicates if dynamic WDS mode is available in the product.')
coWDSRadioTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1), )
if mibBuilder.loadTexts: coWDSRadioTable.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioTable.setDescription('Conceptual table for the ACK distance parameter.')
coWDSRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSRadioIndex"))
if mibBuilder.loadTexts: coWDSRadioEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioEntry.setDescription('An Entry (conceptual row) in the ACK distance Table. coWDSRadioIndex - Radio number where the ACK distance is applied.')
coWDSRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coWDSRadioIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioIndex.setDescription('Radio number.')
coWDSRadioAckDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1, 2), Unsigned32()).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSRadioAckDistance.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioAckDistance.setDescription('Maximum distance between the device and the remote peers.')
coWDSRadioQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("vlan", 2), ("veryHigh", 3), ("high", 4), ("normal", 5), ("low", 6), ("diffSrv", 7), ("tos", 8), ("ipQos", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSRadioQoS.setStatus('current')
if mibBuilder.loadTexts: coWDSRadioQoS.setDescription('QoS priority mechanism used to maps the traffic to one of the four WMM traffic queues.')
coWDSGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1), )
if mibBuilder.loadTexts: coWDSGroupTable.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupTable.setDescription('Conceptual table for the WDS Groups. This table contains the six WDS Groups configuration information.')
coWDSGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSGroupIndex"))
if mibBuilder.loadTexts: coWDSGroupEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupEntry.setDescription('An Entry (conceptual row) in the WDS Group Table. coWDSGroupIndex - Uniquely identify a WDS group inside the WDS group table.')
coWDSGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: coWDSGroupIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupIndex.setDescription('The auxiliary variable used to identify instances of WDS groups.')
coWDSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupName.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupName.setDescription('Friendly name of the WDS group.')
coWDSGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupState.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupState.setDescription('Specifies if the WDS group is active in the radios.')
coWDSGroupSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupSecurity.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupSecurity.setDescription('Specifies the encryption used by the WDS group.')
coWDSGroupAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupAddressing.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupAddressing.setDescription('Specifies if the WDS group is static or dynamic.')
coWDSGroupStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupStaticMacAddress.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupStaticMacAddress.setDescription('For static WDS group, this object specify the MAC address of the remote WDS device.')
coWDSGroupDynamicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupDynamicMode.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupDynamicMode.setDescription('Specifies the mode of the dynamic WDS group.')
coWDSGroupDynamicGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSGroupDynamicGroupId.setStatus('current')
if mibBuilder.loadTexts: coWDSGroupDynamicGroupId.setDescription('Specifies the group identifier of the dynamic WDS group.')
coWDSLinkTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1), )
if mibBuilder.loadTexts: coWDSLinkTable.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkTable.setDescription('Conceptual table for the WDS links. This table contains up to 54 WDS links status information.')
coWDSLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSGroupIndex"), (0, "ALVARION-WDS-MIB", "coWDSLinkIndex"))
if mibBuilder.loadTexts: coWDSLinkEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkEntry.setDescription('An Entry (conceptual row) in the WDS Link Table. coWDSGroupIndex - Uniquely identify a WDS group inside the WDS group table. coWDSLinkIndex - Uniquely identify a WDS link inside a WDS group.')
coWDSLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: coWDSLinkIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkIndex.setDescription('The auxiliary variable used to identify instances of WDS links.')
coWDSLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("acquiring", 2), ("inactive", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkState.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkState.setDescription('Specifies the state of the WDS link.')
coWDSLinkRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRadio.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkRadio.setDescription('Radio number where the WDS peer was detected.')
coWDSLinkPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkPeerMacAddress.setDescription('MAC address of the WDS peer.')
coWDSLinkMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkMaster.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkMaster.setDescription('Determine if this link is a link to a master. Providing upstream network access.')
coWDSLinkAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkAuthorized.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkAuthorized.setDescription('Encryption, if any, can proceed.')
coWDSLinkEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkEncryption.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkEncryption.setDescription('Specifies the encryption used by the WDS link.')
coWDSLinkIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkIdleTime.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkIdleTime.setDescription('Inactivity time.')
coWDSLinkSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkSNR.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkSNR.setDescription('Signal noise ratio of the WDS peer.')
coWDSLinkTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 10), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkTxRate.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkTxRate.setDescription('Current transmit rate of the WDS peer.')
coWDSLinkRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 11), Unsigned32()).setUnits('500Kb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkRxRate.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkRxRate.setDescription('Current receive rate of the WDS peer.')
coWDSLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSLinkIfIndex.setDescription('ifIndex of the associated interface in the ifTable.')
coWDSNetworkScanTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1), )
if mibBuilder.loadTexts: coWDSNetworkScanTable.setStatus('current')
if mibBuilder.loadTexts: coWDSNetworkScanTable.setDescription('Conceptual table for the WDS network scans.')
coWDSNetworkScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1), ).setIndexNames((0, "ALVARION-WDS-MIB", "coWDSScanRadioIndex"), (0, "ALVARION-WDS-MIB", "coWDSScanPeerIndex"))
if mibBuilder.loadTexts: coWDSNetworkScanEntry.setStatus('current')
if mibBuilder.loadTexts: coWDSNetworkScanEntry.setDescription('An Entry (conceptual row) in the WDS Network Scan Table. coWDSScanRadioIndex - Radio number where the WDS peer was detected. coWDSScanPeerIndex - Uniquely identify a WDS peer on a radio inside the WDS network scan table.')
coWDSScanRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: coWDSScanRadioIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSScanRadioIndex.setDescription('Radio number where the WDS peer was detected.')
coWDSScanPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: coWDSScanPeerIndex.setStatus('current')
if mibBuilder.loadTexts: coWDSScanPeerIndex.setDescription('Uniquely identify a WDS peer on a radio.')
coWDSScanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanGroupId.setStatus('current')
if mibBuilder.loadTexts: coWDSScanGroupId.setDescription('Group id used by the WDS peer.')
coWDSScanPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: coWDSScanPeerMacAddress.setDescription('MAC address of the WDS peer.')
coWDSScanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanChannel.setStatus('current')
if mibBuilder.loadTexts: coWDSScanChannel.setDescription('Channel on which the peer is transmitting.')
coWDSScanSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 92))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanSNR.setStatus('current')
if mibBuilder.loadTexts: coWDSScanSNR.setDescription('Signal noise ratio of the WDS peer.')
coWDSScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("alternateMaster", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanMode.setStatus('current')
if mibBuilder.loadTexts: coWDSScanMode.setDescription('Current mode of the WDS peer.')
coWDSScanAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 1, 5, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coWDSScanAvailable.setStatus('current')
if mibBuilder.loadTexts: coWDSScanAvailable.setDescription('Peer is accepting connections.')
alvarionWdsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2))
alvarionWdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 1))
alvarionWdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2))
alvarionWdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 1, 1)).setObjects(("ALVARION-WDS-MIB", "alvarionWDSInfoMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSRadioMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSGroupMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSLinkMIBGroup"), ("ALVARION-WDS-MIB", "alvarionWDSScanMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWdsMIBCompliance = alvarionWdsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alvarionWdsMIBCompliance.setDescription('The compliance statement for the WDS MIB.')
alvarionWDSInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 1)).setObjects(("ALVARION-WDS-MIB", "coWDSNumberOfGroup"), ("ALVARION-WDS-MIB", "coWDSDynamicModeImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSInfoMIBGroup = alvarionWDSInfoMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionWDSInfoMIBGroup.setDescription('A collection of scalar objects for WDS.')
alvarionWDSRadioMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 2)).setObjects(("ALVARION-WDS-MIB", "coWDSRadioAckDistance"), ("ALVARION-WDS-MIB", "coWDSRadioQoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSRadioMIBGroup = alvarionWDSRadioMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionWDSRadioMIBGroup.setDescription('A collection of objects for the WDS radios.')
alvarionWDSGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 3)).setObjects(("ALVARION-WDS-MIB", "coWDSGroupName"), ("ALVARION-WDS-MIB", "coWDSGroupState"), ("ALVARION-WDS-MIB", "coWDSGroupSecurity"), ("ALVARION-WDS-MIB", "coWDSGroupAddressing"), ("ALVARION-WDS-MIB", "coWDSGroupStaticMacAddress"), ("ALVARION-WDS-MIB", "coWDSGroupDynamicMode"), ("ALVARION-WDS-MIB", "coWDSGroupDynamicGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSGroupMIBGroup = alvarionWDSGroupMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionWDSGroupMIBGroup.setDescription('A collection of objects for the WDS groups.')
alvarionWDSLinkMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 4)).setObjects(("ALVARION-WDS-MIB", "coWDSLinkState"), ("ALVARION-WDS-MIB", "coWDSLinkRadio"), ("ALVARION-WDS-MIB", "coWDSLinkPeerMacAddress"), ("ALVARION-WDS-MIB", "coWDSLinkMaster"), ("ALVARION-WDS-MIB", "coWDSLinkAuthorized"), ("ALVARION-WDS-MIB", "coWDSLinkEncryption"), ("ALVARION-WDS-MIB", "coWDSLinkIdleTime"), ("ALVARION-WDS-MIB", "coWDSLinkSNR"), ("ALVARION-WDS-MIB", "coWDSLinkTxRate"), ("ALVARION-WDS-MIB", "coWDSLinkRxRate"), ("ALVARION-WDS-MIB", "coWDSLinkIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSLinkMIBGroup = alvarionWDSLinkMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionWDSLinkMIBGroup.setDescription('A collection of objects for the WDS links.')
alvarionWDSScanMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 33, 2, 2, 5)).setObjects(("ALVARION-WDS-MIB", "coWDSScanGroupId"), ("ALVARION-WDS-MIB", "coWDSScanPeerMacAddress"), ("ALVARION-WDS-MIB", "coWDSScanChannel"), ("ALVARION-WDS-MIB", "coWDSScanSNR"), ("ALVARION-WDS-MIB", "coWDSScanMode"), ("ALVARION-WDS-MIB", "coWDSScanAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionWDSScanMIBGroup = alvarionWDSScanMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionWDSScanMIBGroup.setDescription('A collection of objects for the WDS network scan.')
mibBuilder.exportSymbols("ALVARION-WDS-MIB", coWDSGroupAddressing=coWDSGroupAddressing, coWDSNetworkScanGroup=coWDSNetworkScanGroup, coWDSScanGroupId=coWDSScanGroupId, coWDSScanAvailable=coWDSScanAvailable, coWDSNumberOfGroup=coWDSNumberOfGroup, coWDSGroupSecurity=coWDSGroupSecurity, coWDSScanRadioIndex=coWDSScanRadioIndex, coWDSLinkAuthorized=coWDSLinkAuthorized, coWDSScanPeerMacAddress=coWDSScanPeerMacAddress, coWDSGroupStaticMacAddress=coWDSGroupStaticMacAddress, coWDSGroupDynamicGroupId=coWDSGroupDynamicGroupId, coWDSLinkGroup=coWDSLinkGroup, coWDSLinkTxRate=coWDSLinkTxRate, coWDSScanMode=coWDSScanMode, coWDSGroupName=coWDSGroupName, coWDSLinkRadio=coWDSLinkRadio, coWDSScanChannel=coWDSScanChannel, coWDSRadioIndex=coWDSRadioIndex, alvarionWdsMIB=alvarionWdsMIB, coWDSGroupTable=coWDSGroupTable, coWDSLinkState=coWDSLinkState, coWDSLinkIdleTime=coWDSLinkIdleTime, coWDSLinkIfIndex=coWDSLinkIfIndex, alvarionWDSGroupMIBGroup=alvarionWDSGroupMIBGroup, coWDSLinkEntry=coWDSLinkEntry, coWDSLinkPeerMacAddress=coWDSLinkPeerMacAddress, alvarionWDSInfoMIBGroup=alvarionWDSInfoMIBGroup, coWDSLinkTable=coWDSLinkTable, coWDSScanSNR=coWDSScanSNR, coWDSLinkIndex=coWDSLinkIndex, alvarionWDSRadioMIBGroup=alvarionWDSRadioMIBGroup, coWDSRadioEntry=coWDSRadioEntry, coWDSGroupIndex=coWDSGroupIndex, coWDSScanPeerIndex=coWDSScanPeerIndex, alvarionWDSScanMIBGroup=alvarionWDSScanMIBGroup, alvarionWdsMIBConformance=alvarionWdsMIBConformance, PYSNMP_MODULE_ID=alvarionWdsMIB, coWDSRadioTable=coWDSRadioTable, coWDSInfoGroup=coWDSInfoGroup, alvarionWdsMIBCompliances=alvarionWdsMIBCompliances, alvarionWdsMIBCompliance=alvarionWdsMIBCompliance, coWDSRadioQoS=coWDSRadioQoS, coWDSGroupState=coWDSGroupState, coWDSLinkRxRate=coWDSLinkRxRate, coWDSDynamicModeImplemented=coWDSDynamicModeImplemented, alvarionWDSLinkMIBGroup=alvarionWDSLinkMIBGroup, coWDSLinkSNR=coWDSLinkSNR, coWDSGroupEntry=coWDSGroupEntry, coWDSGroupGroup=coWDSGroupGroup, coWDSLinkEncryption=coWDSLinkEncryption, coWDSRadioGroup=coWDSRadioGroup, coWDSRadioAckDistance=coWDSRadioAckDistance, coWDSNetworkScanEntry=coWDSNetworkScanEntry, alvarionWdsMIBGroups=alvarionWdsMIBGroups, coWDSLinkMaster=coWDSLinkMaster, coWDSGroupDynamicMode=coWDSGroupDynamicMode, coWDSNetworkScanTable=coWDSNetworkScanTable, alvarionWdsMIBObjects=alvarionWdsMIBObjects)
