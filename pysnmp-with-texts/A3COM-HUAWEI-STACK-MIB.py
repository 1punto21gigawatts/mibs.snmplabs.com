#
# PySNMP MIB module A3COM-HUAWEI-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-STACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:07:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Gauge32, ObjectIdentity, Counter32, NotificationType, iso, MibIdentifier, Unsigned32, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Gauge32", "ObjectIdentity", "Counter32", "NotificationType", "iso", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cStack = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91))
h3cStack.setRevisions(('2008-04-30 16:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cStack.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cStack.setLastUpdated('200804301650Z')
if mibBuilder.loadTexts: h3cStack.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cStack.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cStack.setDescription('This MIB is used to manage STM (Stack Topology Management) information for IRF (Intelligent Resilient Framework) device. This MIB is applicable to products which support IRF. Some objects in this MIB may be used only for some specific products, so users should refer to the related documents to acquire more detailed information.')
h3cStackGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1))
h3cStackMaxMember = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackMaxMember.setStatus('current')
if mibBuilder.loadTexts: h3cStackMaxMember.setDescription('The maximum number of members in a stack.')
h3cStackMemberNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackMemberNum.setStatus('current')
if mibBuilder.loadTexts: h3cStackMemberNum.setDescription('The number of members currently in a stack.')
h3cStackMaxConfigPriority = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackMaxConfigPriority.setStatus('current')
if mibBuilder.loadTexts: h3cStackMaxConfigPriority.setDescription('The highest priority that can be configured for a member in a stack.')
h3cStackAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStackAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: h3cStackAutoUpdate.setDescription('The function for automatically updating the image from master to slave. When a new device tries to join a stack, the image version is checked. When this function is enabled, if the image version of the new device is different from that of the master, the image of the new device will be updated to be consistent with that of the master. When this function is disabled, the new device can not join the stack if the image version of the new device is different from that of the master. disabled: disable auto update function enabled: enable auto update function')
h3cStackMacPersistence = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPersist", 1), ("persistForSixMin", 2), ("persistForever", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStackMacPersistence.setStatus('current')
if mibBuilder.loadTexts: h3cStackMacPersistence.setDescription('The mode of bridge MAC address persistence. When a stack starts, the bridge MAC address of master board will be used as that of the stack. If the master board leaves the stack, the bridge MAC address of the stack will change based on the mode of bridge MAC address persistence. notPersist: The bridge MAC address of the new master board will be used as that of the stack immediately. persistForSixMin: The bridge MAC address will be reserved for six minutes. In this period, if the master board which has left the stack rejoins the stack, the bridge MAC address of the stack will not change. Otherwise, the bridge MAC address of the new master board will be used as that of the stack. persistForever: Whether the master leaves or not, the bridge MAC address of the stack will never change.')
h3cStackLinkDelayInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStackLinkDelayInterval.setStatus('current')
if mibBuilder.loadTexts: h3cStackLinkDelayInterval.setDescription('The delay time for a device in a stack to report the change of stack port link status. If the delay time is configured, a device in a stack will not report the change immediately when the stack port link status changes to down. During the delay period, if the stack port link status is resumed, the device will ignore the current change of the stack port link status. If the stack port link status is not resumed after the delay time, the device will report the change. 0 means no delay, namely, the device will report the change as soon as the stack port link status changes to down. 0: no delay 1-30000(ms): delay time')
h3cStackTopology = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chainConn", 1), ("ringConn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackTopology.setStatus('current')
if mibBuilder.loadTexts: h3cStackTopology.setDescription('The topology of the stack. chainConn: chain connection ringConn: ring connection')
h3cStackDeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2), )
if mibBuilder.loadTexts: h3cStackDeviceConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cStackDeviceConfigTable.setDescription('This table contains objects to manage device information in a stack.')
h3cStackDeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: h3cStackDeviceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cStackDeviceConfigEntry.setDescription('This table contains objects to manage device information in a stack.')
h3cStackMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackMemberID.setStatus('current')
if mibBuilder.loadTexts: h3cStackMemberID.setDescription('The member ID of the device in a stack.')
h3cStackConfigMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStackConfigMemberID.setStatus('current')
if mibBuilder.loadTexts: h3cStackConfigMemberID.setDescription('The configured member ID of the device. The valid value ranges from 1 to the value of h3cStackMaxMember. After the member ID is configured for a device, if this ID is not the same with that of another device, the ID will be used as the member ID of the device when the device reboots. If a same ID exists, the member ID of the device will be set as another exclusive ID automatically.')
h3cStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStackPriority.setStatus('current')
if mibBuilder.loadTexts: h3cStackPriority.setDescription('The priority of a device in a stack. The valid value ranges from 1 to the value of h3cStackMaxConfigPriority.')
h3cStackPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackPortNum.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortNum.setDescription('The number of stack ports which is enabled in a device.')
h3cStackPortMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackPortMaxNum.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortMaxNum.setDescription('The maximum number of stack ports in a device.')
h3cStackBoardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 3), )
if mibBuilder.loadTexts: h3cStackBoardConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cStackBoardConfigTable.setDescription('This table contains objects to manage board information of the device in a stack.')
h3cStackBoardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: h3cStackBoardConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cStackBoardConfigEntry.setDescription('This table contains objects to manage board information of the device in a stack.')
h3cStackBoardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("loading", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackBoardRole.setStatus('current')
if mibBuilder.loadTexts: h3cStackBoardRole.setDescription('The role of the board in a stack. slave: slave board master: master board loading: slave board whose image version is different from that of the master board. other: other')
h3cStackBoardBelongtoMember = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackBoardBelongtoMember.setStatus('current')
if mibBuilder.loadTexts: h3cStackBoardBelongtoMember.setDescription('The member ID of the device where the current board resides in a stack.')
h3cStackPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 4), )
if mibBuilder.loadTexts: h3cStackPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortInfoTable.setDescription('This table contains objects to manage stack port information of a device in a stack.')
h3cStackPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-STACK-MIB", "h3cStackMemberID"), (0, "A3COM-HUAWEI-STACK-MIB", "h3cStackPortIndex"))
if mibBuilder.loadTexts: h3cStackPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortInfoEntry.setDescription('This table contains objects to manage stack port information of a device in a stack.')
h3cStackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 4, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cStackPortIndex.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortIndex.setDescription('The index of a stack port of the device in a stack.')
h3cStackPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackPortEnable.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortEnable.setDescription("The status of the stack port of the device in a stack. If no physical port is added to the stack port, its status is 'disabled'; otherwise, its status is 'enabled'. disabled: The stack port is disabled. enabled: The stack port is enabled.")
h3cStackPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("silent", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackPortStatus.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortStatus.setDescription('The link status of the stack port of the device in a stack. up: The link status of a stack port with reasonable physical connection is up. down: The link status of a stack port without physical connection is down. silent: The link status of a stack port which can not be used normally is silent. disabled: The link status of a stack port in disabled status is disabled.')
h3cStackNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cStackNeighbor.setStatus('current')
if mibBuilder.loadTexts: h3cStackNeighbor.setDescription("The member ID of the stack port's neighbor in a stack. 0 means no neighbor exists.")
h3cStackPhyPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 5), )
if mibBuilder.loadTexts: h3cStackPhyPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cStackPhyPortInfoTable.setDescription('This table contains objects to manage the information for physical ports which can be used for physical connection of stack port in a stack.')
h3cStackPhyPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: h3cStackPhyPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cStackPhyPortInfoEntry.setDescription('This table contains objects to manage the information for physical ports which can be used for physical connection of stack port in a stack.')
h3cStackBelongtoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cStackBelongtoPort.setStatus('current')
if mibBuilder.loadTexts: h3cStackBelongtoPort.setDescription('The index of the stack port to which the physical port is added. 0 means the physical port is not added to any stack port. The value will be valid after the device in the stack reboots.')
h3cStackTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 6))
h3cStackTrapOjbects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 6, 0))
h3cStackPortLinkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 6, 0, 1)).setObjects(("A3COM-HUAWEI-STACK-MIB", "h3cStackMemberID"), ("A3COM-HUAWEI-STACK-MIB", "h3cStackPortIndex"), ("A3COM-HUAWEI-STACK-MIB", "h3cStackPortStatus"))
if mibBuilder.loadTexts: h3cStackPortLinkStatusChange.setStatus('current')
if mibBuilder.loadTexts: h3cStackPortLinkStatusChange.setDescription('The h3cStackPortLinkStatusChange trap indicates that the link status of the stack port has changed.')
h3cStackTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 91, 6, 0, 2)).setObjects(("A3COM-HUAWEI-STACK-MIB", "h3cStackTopology"))
if mibBuilder.loadTexts: h3cStackTopologyChange.setStatus('current')
if mibBuilder.loadTexts: h3cStackTopologyChange.setDescription('The h3cStackTopologyChange trap indicates that the topology type of the stack has changed.')
mibBuilder.exportSymbols("A3COM-HUAWEI-STACK-MIB", h3cStackPortInfoTable=h3cStackPortInfoTable, h3cStackMacPersistence=h3cStackMacPersistence, h3cStackTopology=h3cStackTopology, PYSNMP_MODULE_ID=h3cStack, h3cStackDeviceConfigEntry=h3cStackDeviceConfigEntry, h3cStackPhyPortInfoTable=h3cStackPhyPortInfoTable, h3cStackPhyPortInfoEntry=h3cStackPhyPortInfoEntry, h3cStackBelongtoPort=h3cStackBelongtoPort, h3cStackPriority=h3cStackPriority, h3cStackDeviceConfigTable=h3cStackDeviceConfigTable, h3cStackMaxConfigPriority=h3cStackMaxConfigPriority, h3cStackTrapOjbects=h3cStackTrapOjbects, h3cStackPortIndex=h3cStackPortIndex, h3cStackBoardBelongtoMember=h3cStackBoardBelongtoMember, h3cStackMaxMember=h3cStackMaxMember, h3cStackNeighbor=h3cStackNeighbor, h3cStackTrap=h3cStackTrap, h3cStackBoardRole=h3cStackBoardRole, h3cStackBoardConfigEntry=h3cStackBoardConfigEntry, h3cStackMemberNum=h3cStackMemberNum, h3cStackPortEnable=h3cStackPortEnable, h3cStackBoardConfigTable=h3cStackBoardConfigTable, h3cStackPortStatus=h3cStackPortStatus, h3cStackPortMaxNum=h3cStackPortMaxNum, h3cStackPortNum=h3cStackPortNum, h3cStackAutoUpdate=h3cStackAutoUpdate, h3cStackPortInfoEntry=h3cStackPortInfoEntry, h3cStackGlobalConfig=h3cStackGlobalConfig, h3cStackLinkDelayInterval=h3cStackLinkDelayInterval, h3cStackConfigMemberID=h3cStackConfigMemberID, h3cStack=h3cStack, h3cStackPortLinkStatusChange=h3cStackPortLinkStatusChange, h3cStackMemberID=h3cStackMemberID, h3cStackTopologyChange=h3cStackTopologyChange)
