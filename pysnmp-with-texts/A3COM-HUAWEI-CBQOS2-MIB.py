#
# PySNMP MIB module A3COM-HUAWEI-CBQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-CBQOS2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:03:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, TimeTicks, MibIdentifier, NotificationType, Bits, ObjectIdentity, Unsigned32, ModuleIdentity, Gauge32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "TimeTicks", "MibIdentifier", "NotificationType", "Bits", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter64", "Integer32")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
h3cCBQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2))
if mibBuilder.loadTexts: h3cCBQos2.setLastUpdated('200507300000Z')
if mibBuilder.loadTexts: h3cCBQos2.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cCBQos2.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: h3cCBQos2.setDescription('This MIB contains objects to manage configuration and monitor running state for Class Based QoS feature. ********************************* MIB Tables ********************************** This MIB consists of the following tables: 1 : h3cCBQoSClassifierCfgInfoTable 2 : h3cCBQoSMatchRuleCfgInfoTable 3 : h3cCBQoSBehaviorCfgInfoTable 4 : h3cCBQoSCarCfgInfoTable 5 : h3cCBQoSAggregativeCarCfgInfoTable 6 : h3cCBQoSGtsCfgInfoTable 7 : h3cCBQoSRemarkCfgInfoTable 8 : h3cCBQoSQueueCfgInfoTable 9 : h3cCBQoSWredCfgInfoTable 10: h3cCBQoSWredClassCfgInfoTable 11: h3cCBQoSPolicyRouteCfgInfoTable 12: h3cCBQoSNatCfgInfoTable 13: h3cCBQoSFirewallCfgInfoTable 14: h3cCBQoSSamplingCfgInfoTable 15: h3cCBQoSAccountCfgInfoTable 16: h3cCBQoSRedirectCfgInfoTable 17: h3cCBQoSPriorityMapCfgInfoTable 18: h3cCBQoSPolicyCfgInfoTable 19: h3cCBQoSPolicyClassCfgInfoTable 20: h3cCBQoSIfApplyPolicyTable 21: h3cCBQoSAtmPvcApplyPolicyTable 22: h3cCBQoSVlanApplyPolicyTable 23: h3cCBQoSFrClassApplyPolicyTable 24: h3cCBQoSFrPvcApplyPolicyTable 25: h3cCBQoSIfCbqRunInfoTable 26: h3cCBQoSIfClassMatchRunInfoTable 27: h3cCBQoSIfCarRunInfoTable 28: h3cCBQoSIfGtsRunInfoTable 29: h3cCBQoSIfRemarkRunInfoTable 30: h3cCBQoSIfQueueRunInfoTable 31: h3cCBQoSIfWredRunInfoTable 32: h3cCBQoSIfAccountingRunInfoTable 33: h3cCBQoSAtmPvcCbqRunInfoTable 34: h3cCBQoSAtmPvcClassMatchRunInfoTable 35: h3cCBQoSAtmPvcCarRunInfoTable 36: h3cCBQoSAtmPvcGtsRunInfoTable 37: h3cCBQoSAtmPvcRemarkRunInfoTable 38: h3cCBQoSAtmPvcQueueRunInfoTable 39: h3cCBQoSAtmPvcWredRunInfoTable 40: h3cCBQoSAtmPvcAccountingRunInfoTable 41: h3cCBQoSFrPvcCbqRunInfoTable 42: h3cCBQoSFrPvcClassMatchRunInfoTable 43: h3cCBQoSFrPvcCarRunInfoTable 44: h3cCBQoSFrPvcGtsRunInfoTable 45: h3cCBQoSFrPvcRemarkRunInfoTable 46: h3cCBQoSFrPvcQueueRunInfoTable 47: h3cCBQoSFrPvcWredRunInfoTable 48: h3cCBQoSFrPvcAccountingRunInfoTable 49: h3cCBQoSIfVlanClassMatchRunInfoTable 50: h3cCBQoSIfVlanAccountingRunInfoTable 51: h3cCBQoSMirrorCfgInfoTable 52: h3cCBQoSGlobalApplyTable 53: h3cCBQoSNestCfgInfoTable 54: h3cCBQoSApplyObjectTable 55: h3cCBQoSIntApplyObjectTable 56: h3cCBQoSVlanApplyObjectTable 57: h3cCBQoSPvcApplyObjectTable 58: h3cCBQoSCbqRunInfoTable 59: h3cCBQoSClassMatchRunInfoTable 60: h3cCBQoSCarRunInfoTable 61: h3cCBQoSGtsRunInfoTable 62: h3cCBQoSRemarkRunInfoTable 63: h3cCBQoSQueueRunInfoTable 64: h3cCBQoSWredRunInfoTable 65: h3cCBQoSAccountingRunInfoTable 66: h3cCBQoSApplyingStatusObjects 67: h3cCBQoSNotifications ')
h3cQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65))
class MatchRuleType(TextualConvention, Integer32):
    description = 'Type of Match Rule. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("matchRuleAny", 1), ("matchRuleIpv4Acl", 2), ("matchRuleIPv6Acl", 3), ("matchRuleIPv4Protocol", 4), ("matchRuleIPv6Protocol", 5), ("matchRuleIPXProtocol", 6), ("matchRuleDscp", 7), ("matchRuleIpPre", 8), ("matchRuleVlan8021p", 9), ("matchRuleMplsExp", 10), ("matchRuleAtmClp", 11), ("matchRuleFrDe", 12), ("matchRuleSourceMac", 13), ("matchRuleDestinationMac", 14), ("matchRuleQosLocalID", 15), ("matchRuleClassifier", 16), ("matchRuleInboundInterface", 17), ("matchRuleRtpPort", 18), ("matchRuleSourceIp", 19), ("matchRuleVlanID", 20), ("matchRuleTopMostVlanID", 21), ("matchRuleLocalPrecedence", 22), ("matchRuleDropPriority", 23), ("matchRuleBittorrent", 24), ("matchRuleServiceDot1p", 25))

class CarAction(TextualConvention, Integer32):
    description = 'The actions taken when packets conforming or exceeding the configured committed information rate(CIR).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16), ("remark-local-pre-pass", 17), ("remark-drop-pre-pass", 18))

class RemarkType(TextualConvention, Integer32):
    description = 'Type of remark.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("typeIpPrecedence", 1), ("typeDscp", 2), ("typeMplsExp", 3), ("typeVlan8021p", 4), ("typeAtmClp", 5), ("typeFrDe", 6), ("typeVlanID", 7), ("typeQosLocalID", 8), ("typeDropPrecedence", 9), ("typeLocalPrecedence", 10), ("typeTopMostVlanID", 11))

class WredType(TextualConvention, Integer32):
    description = 'WRED type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("typeIpPrecBased", 1), ("typeDscpBased", 2), ("typeDropLevelBased", 3), ("typeAtmClpBased", 4), ("typeVlan8021pBased", 5), ("typeMplsExpBased", 6))

class QueueType(TextualConvention, Integer32):
    description = 'Queueing Type: EF:(1) AF:(2) WFQ:(3) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ef", 1), ("af", 2), ("wfq", 3))

class QueueBandwidthUnit(TextualConvention, Integer32):
    description = 'Bandwidth Unit: Absolute, Unit : Kbps(1) Percent, Unit : %(2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unitUnavailable", 0), ("unitAbsolute", 1), ("unitPercent", 2))

class DirectionType(TextualConvention, Integer32):
    description = 'The direction of policy apply on at interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class ApplyObjectType(TextualConvention, Integer32):
    description = 'Type of QoS apply object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("interface", 1), ("vlan", 2), ("atmPvc", 3), ("frDlci", 4))

h3cCBQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1))
h3cCBQoSClassifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1))
h3cCBQoSClassifierIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassifierIndexNext.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierIndexNext.setDescription('This object contains an appropriate value to be used for h3cCBQoSClassifierIndex when creating rows in the h3cCBQoSClassifierCfgInfoTable. Begin with 22. ')
h3cCBQoSClassifierCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2), )
if mibBuilder.loadTexts: h3cCBQoSClassifierCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierCfgInfoTable.setDescription('A table of Traffic Classifier configuration information.')
h3cCBQoSClassifierCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSClassifierIndex"))
if mibBuilder.loadTexts: h3cCBQoSClassifierCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierCfgInfoEntry.setDescription('Traffic Classifier Configuration Information Entry.')
h3cCBQoSClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierIndex.setDescription('Index of Traffic Classifier. Begin with 0.')
h3cCBQoSClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSClassifierName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierName.setDescription('Name of Traffic Classifier.')
h3cCBQoSClassifierRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassifierRuleCount.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierRuleCount.setDescription('The counter of match rules of Traffic classifier.')
h3cCBQoSClassifierOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSClassifierOperator.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierOperator.setDescription('Operator of the match rules of traffic classifier. Software QoS supports and, or. Hardware QoS supports and. ')
h3cCBQoSClassifierLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unavailable", 1), ("l2", 2), ("l3", 3), ("both", 4))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSClassifierLayer.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierLayer.setDescription("Configuration layer of traffic classifier. Only hardware QoS support it. 1(unavailable) is returned only when getting value from software QoS. 1(unavailable) can't be set. ")
h3cCBQoSClassifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassifierType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierType.setDescription('The type of classifier.')
h3cCBQosClassifierMatchRuleNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQosClassifierMatchRuleNextIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQosClassifierMatchRuleNextIndex.setDescription('This object contains an appropriate value to be used for h3cCBQoSMatchRuleIndex when creating rows in the h3cCBQoSMatchRuleCfgInfoTable. Begin with 0. If the value of this node is 65535, it indicates creating a row in h3cCBQoSMatchRuleCfgInfoTable is not permitted. ')
h3cCBQoSClassifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSClassifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassifierRowStatus.setDescription('RowStatus.')
h3cCBQoSMatchRuleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3), )
if mibBuilder.loadTexts: h3cCBQoSMatchRuleCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleCfgInfoTable.setDescription('A table of Match Rule configuration information.')
h3cCBQoSMatchRuleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSClassifierIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: h3cCBQoSMatchRuleCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleCfgInfoEntry.setDescription('Match Rule Configuration Information Entry.')
h3cCBQoSMatchRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIndex.setDescription('Index of Match Rule.')
h3cCBQoSMatchRuleIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIfNot.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIfNot.setDescription('Whether the if-match rule is a match or matchNot statement. Software QoS supports match, matchNot. Hardware QoS supports match. ')
h3cCBQoSMatchRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 3), MatchRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchRuleType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleType.setDescription('Type of Match Rule.')
h3cCBQoSMatchRuleStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchRuleStringValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleStringValue.setDescription("Value of Match Rule. SourceMAC: SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match source-mac 0101-0202-0303' DestinationMAC: SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match destination-mac 0101-0202-0303' Classifier: SIZE (1..31) classifier name InboundInterface: SIZE (1..47) interface description TopMostVlanID, VlanID:SIZE(1..39), up to 8 value can be input; for example: 1#11#111#1111 means the match rule if 'if-match vlanid 1 11 111 1111' SourceIp: SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match source-ip mac-address 0101-0202-0303' other types: Set is not permitted. Zero-length String will be returned when getting. ")
h3cCBQoSMatchRuleIntValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIntValue1.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIntValue1.setDescription("Value of Match Rule. IPv4 ACL: 2000~5999 IPv6 ACL: 2000~3999; 10000~42767 Software QoS: 2000~3999 Hardware Qos: 10000~42767 RtpPort: start-port: 2000~65535 IpPrec: value: 0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match ip-prec 0 1 4 6' Dscp: value:0~63,up to 8 value can be input. The bit set to 1 of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 32~63. The bit set to 1 of h3cCBQoSMatchRuleIntValue2 is used to indicate the value 0~31. for example: 0x80000003 means the match rule is 'if-match dscp 32 33 63' Vlan8021p: value:0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match customer-dot1p 0 1 4 6' MplsExp: value:0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of h3cCBQoSMatchRuleIntValue1 is used to indicate the 8 value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match mpls 0 1 4 6' SourceIp: 1~4095 QosLocalID: 1~4095 AtmClp: 0~1 FrDe: 0~1 LocalPrecedence: 0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match localprecedence 0 1 4 6' DropPriority: 0~2, up to 3 value can be input. The bit set to 1 of the last 3 bits of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 0~2. ServiceDot1p: 0~7, up to 8 value can be input. The bit set to 1 of the last 8 bits of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match service-dot1p 0 1 4 6' other types: Set is not permitted. 0xffffffff will be returned when getting. ")
h3cCBQoSMatchRuleIntValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIntValue2.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleIntValue2.setDescription("Value of Match Rule. RtpPort(3): end-port: 2000~65535 Dscp(6): value:0~63,up to 8 value can be input. The bit set to 1 of h3cCBQoSMatchRuleIntValue1 is used to indicate the value 32~63. The bit set to 1 of h3cCBQoSMatchRuleIntValue2 is used to indicate the value 0~31. for example: 0x80000003 means the match rule is 'if-match dscp 0 1 31' other types: Set is not permitted. 0xffffffff will be returned when getting. ")
h3cCBQoSMatchIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchIpAddressType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchIpAddressType.setDescription('A value that represents a type of Internet address. unknown(0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address which is not in one of the formats defined below. ipv4(1) An IPv4 address as defined by the InetAddressIPv4 textual convention. ipv6(2) A global IPv6 address as defined by the InetAddressIPv6 textual convention. ipv4z(3) A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. ipv6z(4) A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. dns(16) A DNS domain name as defined by the InetAddressDNS textual convention. Value of match rule. SourceIp support this node. other types: Set is not permitted. Unknown will be returned when getting. ')
h3cCBQoSMatchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchIpAddress.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchIpAddress.setDescription('Denotes a generic Internet address. SourceIP support this node. other types: Set is not permitted. NULL will be returned when getting. ')
h3cCBQoSMatchRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMatchRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMatchRuleRowStatus.setDescription('RowStatus.')
h3cCBQoSBehaviorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2))
h3cCBQoSBehaviorIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSBehaviorIndexNext.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorIndexNext.setDescription('This object contains an appropriate value to be used for h3cCBQoSBehaviorIndex when creating rows in the h3cCBQoSBehaviorCfgInfoTable.')
h3cCBQoSBehaviorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 2), )
if mibBuilder.loadTexts: h3cCBQoSBehaviorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorCfgInfoTable.setDescription('A table of Traffic Behavior configuration information.')
h3cCBQoSBehaviorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSBehaviorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorCfgInfoEntry.setDescription('Traffic Behavior Configuration Information Entry.')
h3cCBQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorIndex.setDescription('Index of Traffic Behavior.')
h3cCBQoSBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSBehaviorName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorName.setDescription('Name of Traffic Behavior.')
h3cCBQoSBehaviorType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSBehaviorType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorType.setDescription('Type of behavior.')
h3cCBQoSBehaviorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSBehaviorRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSBehaviorRowStatus.setDescription('RowStatus.')
h3cCBQoSCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3), )
if mibBuilder.loadTexts: h3cCBQoSCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarCfgInfoTable.setDescription('A table of CAR feature configuration information.')
h3cCBQoSCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
h3cCBQoSCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarCir.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarCir.setDescription('Committed Information Rate. Unit: kbps.')
h3cCBQoSCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarCbs.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarCbs.setDescription('Committed Burst Size. Unit: byte.')
h3cCBQoSCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarEbs.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarEbs.setDescription("Excess Burst Size. Unit: byte. Only software QoS support this node. 4294967295 is returned only when getting value from hardware QoS. 4294967295 can't be set.")
h3cCBQoSCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarPir.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarPir.setDescription("Peak Information Rate. Unit: kbps. Only hardware QoS support this node. 4294967295 is returned only when getting value from software QoS. 4294967295 can't be set.")
h3cCBQoSCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarPbs.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarPbs.setDescription("Peak Burst Size. Unit: byte. Only hardware QoS support this node. 4294967295 is returned only when getting value from software QoS. 4294967295 can't be set.")
h3cCBQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 6), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarGreenAction.setDescription('Green Action Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark IP Precedence, remark DSCP, remark MPLS EXP. ')
h3cCBQoSCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. 255 can't be set. ")
h3cCBQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 8), CarAction().clone('remark')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarYellowAction.setDescription("Yellow Action: Only hardware QoS support this node. Hardware QoS support pass, discard, remark. invalid is returned only when getting value from software QoS. invalid can't be set. ")
h3cCBQoSCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarYellowRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set.")
h3cCBQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 10), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarRedAction.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRedAction.setDescription('Red Action: Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark IP Precedence, remark DSCP, remark MPLS EXP. ')
h3cCBQoSCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set.")
h3cCBQoSCarPolicedPriorityMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("policed-service-map", 1), ("local-precedence-dot1p-map", 2), ("drop-precedence-map", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarPolicedPriorityMapType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarPolicedPriorityMapType.setDescription('Type of priority map.')
h3cCBQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRowStatus.setDescription('RowStatus.')
h3cCBQoSAggregativeCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 4), )
if mibBuilder.loadTexts: h3cCBQoSAggregativeCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAggregativeCarCfgInfoTable.setDescription('A table of aggregative CAR applied CBQ feature configuration information. Aggregative CAR is managed by A3COM-HUAWEI-IFQOS2-MIB. So, you can use A3COM-HUAWEI-IFQOS2-MIB to get some details information about aggregative CAR. ')
h3cCBQoSAggregativeCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSCarAggregativeCarIndex"))
if mibBuilder.loadTexts: h3cCBQoSAggregativeCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAggregativeCarCfgInfoEntry.setDescription('Aggregative CAR feature applied CBQ configuration information entry.')
h3cCBQoSCarAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSCarAggregativeCarIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarAggregativeCarIndex.setDescription('Index of aggregative CAR. It is equal to h3cIfQoSAggregativeCarIndex at A3COM-HUAWEI-IFQOS2-MIB. ')
h3cCBQoSCarAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarAggregativeCarName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarAggregativeCarName.setDescription('Name of aggregative CAR. It is equal to h3cIfQoSAggregativeCarName at A3COM-HUAWEI-IFQOS2-MIB. ')
h3cCBQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSAggregativeCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAggregativeCarRowStatus.setDescription('RowStatus.')
h3cCBQoSGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5), )
if mibBuilder.loadTexts: h3cCBQoSGtsCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsCfgInfoTable.setDescription('A table of GTS feature configuration information.')
h3cCBQoSGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSGtsCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsCfgInfoEntry.setDescription('GTS Configuration Information Entry.')
h3cCBQoSGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGtsCir.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsCir.setDescription('Committed Information Rate. Unit: kbps')
h3cCBQoSGtsCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGtsCbs.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsCbs.setDescription('Committed Burst Size. Unit: byte default: max(cir*1/2,15000)')
h3cCBQoSGtsEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGtsEbs.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsEbs.setDescription('Excess Burst Size. Unit: byte')
h3cCBQoSGtsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGtsQueueLength.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsQueueLength.setDescription('The length of GTS buffer.')
h3cCBQoSGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGtsRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsRowStatus.setDescription('RowStatus.')
h3cCBQoSRemarkCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 6), )
if mibBuilder.loadTexts: h3cCBQoSRemarkCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkCfgInfoTable.setDescription('A table of Remarking feature configuration information.')
h3cCBQoSRemarkCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSRemarkType"))
if mibBuilder.loadTexts: h3cCBQoSRemarkCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkCfgInfoEntry.setDescription('Remarking Configuration Information Entry.')
h3cCBQoSRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 6, 1, 1), RemarkType())
if mibBuilder.loadTexts: h3cCBQoSRemarkType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkType.setDescription('Remark type.')
h3cCBQoSRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRemarkValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkValue.setDescription('Value to remark: for IpPrecedence: 0~7 for Dscp: 0~63 for MplsExp: 0~7 for Vlan8021p: 0~7 for AtmClp: 0~1 for FrDe: 0~1 for VlanID: 1~4094 for QosLocalID: 1~4095 for DropPrecedence: 0~2 for LocalPrecedence: 0~7 for TopMostVlanID: 1~4094 ')
h3cCBQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkRowStatus.setDescription('RowStatus')
h3cCBQoSQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7), )
if mibBuilder.loadTexts: h3cCBQoSQueueCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueCfgInfoTable.setDescription('A table of queue feature configuration information.')
h3cCBQoSQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSQueueCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueCfgInfoEntry.setDescription('Queue Configuration Information Entry.')
h3cCBQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 1), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueType.setDescription('Queueing Type: EF:(1) AF:(2) WFQ:(3)')
h3cCBQoSQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("typeUnavailable", 0), ("typeTailDrop", 1), ("typeWred", 2))).clone('typeTailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueDropType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueDropType.setDescription("The drop type of queue. Only valid for AF and WFQ queue. typeUnavailable is returned only when getting value about EF queue. typeUnavailable can't be set.")
h3cCBQoSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 512), ValueRangeConstraint(2147483647, 2147483647), )).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueLength.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueLength.setDescription("The length of QueueLength. Only valid for tail-drop type of AF and WFQ queue. 2147483647 is returned only when getting value about EF queue or WRED type of AF and WFQ queue. 2147483647 can't be set.")
h3cCBQoSQueueBandwidthUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 4), QueueBandwidthUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueBandwidthUnit.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueBandwidthUnit.setDescription("Bandwidth Unit: Absolute, Unit Kbps (1) Percent, Unit % (2) Only valid for EF and AF queue. 0 is returned only when getting value about WFQ queue. 0 can't be set. ")
h3cCBQoSQueueBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000000), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueBandwidthValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueBandwidthValue.setDescription("Bandwidth value: Absolute value: 8~10000000. Unit: Kbps Percent value: 1~100. Only valid for EF and AF queue. 2147483647 is returned only when getting value about WFQ queue. 2147483647 can't be set.")
h3cCBQoSQueueCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(32, 1000000000), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueCbs.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueCbs.setDescription("Committed Burst Size. Unit: byte. Only valid for EF queue. Default: If the value of 'h3cCBQoSQueueBandwidthValue * 25' is between 1500 and 2000000, the default value of this object is 'h3cCBQoSQueueBandwidthValue * 25';If the value of 'h3cCBQoSQueueBandwidthValue * 25' is larger than or equal to 2000000, the default value of this object is 2000000; If the value of 'h3cCBQoSQueueBandwidthValue * 25' is less than or equal to 1500, the default value of this object is 1500. 2147483647 is returned only when getting value about AF or WFQ queue. 2147483647 can't be set.")
h3cCBQoSQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("unavailable", 0), ("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096))).clone('a256')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueQueueNumber.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueQueueNumber.setDescription("Max number of hashed queues (a power of 2). Only valid for WFQ. 'unavailable' is returned only when getting value about AF or EF queue. 'unavailable' can't be set.")
h3cCBQoSQueueCbsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 500), ValueRangeConstraint(2147483647, 2147483647), )).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueCbsRatio.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueCbsRatio.setDescription("Committed Burst Size Ratio. CBS = CBS_Ratio * Bandwidth(k bps) Only valid for EF queue. 2147483647 is returned only when getting value about AF or WFQ queue. 2147483647 can't be set. ")
h3cCBQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueRowStatus.setDescription('RowStatus.')
h3cCBQoSWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 8), )
if mibBuilder.loadTexts: h3cCBQoSWredCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredCfgInfoTable.setDescription('A table of WRED configuration information.')
h3cCBQoSWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSWredCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredCfgInfoEntry.setDescription('WRED Configuration Information Entry.')
h3cCBQoSWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 8, 1, 1), WredType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCBQoSWredType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredType.setDescription('WRED type.')
h3cCBQoSWredWeightConst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCBQoSWredWeightConst.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredWeightConst.setDescription('Specify weight for calculating mean queue depth.')
h3cCBQoSWredClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 9), )
if mibBuilder.loadTexts: h3cCBQoSWredClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredClassCfgInfoTable.setDescription('A table of WRED configuration information.')
h3cCBQoSWredClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSWredClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredClassCfgInfoEntry.setDescription('WRED Class Configuration Information Entry.')
h3cCBQoSWredClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: h3cCBQoSWredClassValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredClassValue.setDescription('The class value. For IP precedence based WRED, the class is IP precedence, and range is 0~7. For DSCP based WRED, the class is DSCP, and range is 0~63. ')
h3cCBQoSWredClassLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCBQoSWredClassLowLimit.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredClassLowLimit.setDescription('The low limit of queue depth.')
h3cCBQoSWredClassHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCBQoSWredClassHighLimit.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredClassHighLimit.setDescription('The high limit of queue depth.')
h3cCBQoSWredClassDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCBQoSWredClassDiscardProb.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredClassDiscardProb.setDescription('The discard probability denominator.')
h3cCBQoSPolicyRouteCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 10), )
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteCfgInfoTable.setDescription('A table of Policy Routing configuration information.')
h3cCBQoSPolicyRouteCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 10, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteCfgInfoEntry.setDescription('Policy Routeing Configuration Information Entry.')
h3cCBQoSPolicyRouteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 10, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteIpAddrType.setDescription('Type of InetAddress.')
h3cCBQoSPolicyRouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 10, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteNexthop.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteNexthop.setDescription('The next-hop ip address for redirection.')
h3cCBQoSPolicyRouteBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("notbackup", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteBackup.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteBackup.setDescription('Whether forward the packet according to the routing table When the next-hop IP address for redirection is not valid. Backup means forwarding. NoBackup means not forwarding. ')
h3cCBQoSPolicyRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRouteRowStatus.setDescription('RowStatus.')
h3cCBQoSNatCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 11), )
if mibBuilder.loadTexts: h3cCBQoSNatCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNatCfgInfoTable.setDescription('A table of Nat configuration information.')
h3cCBQoSNatCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 11, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSNatCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNatCfgInfoEntry.setDescription('Nat Configuration Information Entry.')
h3cCBQoSNatMainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNatMainNumber.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNatMainNumber.setDescription('The main ISP number.')
h3cCBQoSNatBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNatBackupNumber.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNatBackupNumber.setDescription('The backup ISP number')
h3cCBQoSNatServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNatServiceClass.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNatServiceClass.setDescription('The service class.')
h3cCBQoSNatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNatRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNatRowStatus.setDescription('RowStatus.')
h3cCBQoSFirewallCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 12), )
if mibBuilder.loadTexts: h3cCBQoSFirewallCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFirewallCfgInfoTable.setDescription('A table of firewall configuration information.')
h3cCBQoSFirewallCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 12, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSFirewallCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFirewallCfgInfoEntry.setDescription('Firewall configuration information entry.')
h3cCBQoSFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSFirewallAction.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFirewallAction.setDescription('The firewall action ')
h3cCBQoSFirewallRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSFirewallRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFirewallRowStatus.setDescription('RowStatus.')
h3cCBQoSSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 13), )
if mibBuilder.loadTexts: h3cCBQoSSamplingCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSSamplingCfgInfoTable.setDescription('A table of sampling configuration information.')
h3cCBQoSSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 13, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSSamplingCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSSamplingCfgInfoEntry.setDescription('Sampling configuration information entry.')
h3cCBQoSSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSSamplingNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSSamplingNum.setDescription('The sampling number.')
h3cCBQoSSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSSamplingRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSSamplingRowStatus.setDescription('RowStatus.')
h3cCBQoSAccountCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 14), )
if mibBuilder.loadTexts: h3cCBQoSAccountCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountCfgInfoTable.setDescription('A table of account configuration information.')
h3cCBQoSAccountCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 14, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSAccountCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountCfgInfoEntry.setDescription('Account configuration information entry.')
h3cCBQoSAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 14, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSAccounting.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccounting.setDescription('Account action.')
h3cCBQoSAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSAccountRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountRowStatus.setDescription('RowStatus.')
h3cCBQoSRedirectCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15), )
if mibBuilder.loadTexts: h3cCBQoSRedirectCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectCfgInfoTable.setDescription('A table of redirect configuration information.')
h3cCBQoSRedirectCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSRedirectCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectCfgInfoEntry.setDescription('Redirect configuration information entry.')
h3cCBQoSRedirectType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpu", 1), ("interface", 2), ("nextHop", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectType.setDescription('The type of redirect.')
h3cCBQoSRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectIfIndex.setDescription('ifIndex. Only the value of h3cCBQoSRedirectType is interface, can be set this node. ')
h3cCBQoSRedirectIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectIpAddressType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectIpAddressType.setDescription('A value that represents a type of Internet address. unknown(0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address which is not in one of the formats defined below. ipv4(1) An IPv4 address as defined by the InetAddressIPv4 textual convention. ipv6(2) A global IPv6 address as defined by the InetAddressIPv6 textual convention. ipv4z(3) A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. ipv6z(4) A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. dns(16) A DNS domain name as defined by the InetAddressDNS textual convention. Now supports ipv4 and ipv6. Only the value of h3cCBQoSRedirectType is next-hop, can be set this node and h3cCBQoSRedirectIpAddress1 or h3cCBQoSRedirectIpAddress2. ')
h3cCBQoSRedirectIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectIpAddress1.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectIpAddress1.setDescription('IP Address. If the value of h3cCBQoSRedirectType is not next-hop, Zero-length String will be returned when getting. If the value of h3cCBQoSRedirectIpAddressType is ipv6, this node is set necessarily. ')
h3cCBQoSRedirectIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectIpAddress2.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectIpAddress2.setDescription('IP Address. If the value of h3cCBQoSRedirectType is not next-hop, Zero-length String will be returned when getting. If the value of h3cCBQoSRedirectIpAddressType is ipv6, this node is set optionally. ')
h3cCBQoSRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectRowStatus.setDescription('RowStatus.')
h3cCBQoSRedirectIpv6Interface1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectIpv6Interface1.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectIpv6Interface1.setDescription('IfIndex for ipv6 next hop . If and only if the value of h3cCBQoSRedirectIpAddressType is ipv6 and h3cCBQoSRedirectIpAddress1 is set, this node can be set. ')
h3cCBQoSRedirectIpv6Interface2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 15, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSRedirectIpv6Interface2.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRedirectIpv6Interface2.setDescription('IfIndex for ipv6 next hop . If and only if the value of h3cCBQoSRedirectIpAddressType is ipv6 and h3cCBQoSRedirectIpAddress2 is set, this node can be set. ')
h3cCBQoSPriorityMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16), )
if mibBuilder.loadTexts: h3cCBQoSPriorityMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapCfgInfoTable.setDescription('A table of priority map configuration information.')
h3cCBQoSPriorityMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSPriorityMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapCfgInfoEntry.setDescription('priority map configuration information entry.')
h3cCBQoSPriorityMapImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("dscp", 2), ("dot1p", 3), ("exp", 4), ("ipPrecedence", 5), ("localPrecedence", 6), ("dropPrecedence", 7))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPriorityMapImportType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapImportType.setDescription('Import type of map.')
h3cCBQoSPriorityMapExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("dscp", 2), ("dot1p", 3), ("exp", 4), ("ipPrecedence", 5), ("localPrecedence", 6), ("dropPrecedence", 7))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPriorityMapExportType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapExportType.setDescription('Export type of map.')
h3cCBQoSPriorityMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPriorityMapGroupIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapGroupIndex.setDescription('Index of map group. Map group is managed by A3COM-HUAWEI-IFQOS2-MIB. ')
h3cCBQoSPriorityMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPriorityMapGroupName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapGroupName.setDescription('Name of map group. Map group is managed by A3COM-HUAWEI-IFQOS2-MIB. ')
h3cCBQoSPriorityMapAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("autoDscp", 2), ("autoDot1p", 3), ("autoMplsExp", 4), ("autoIp", 5))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPriorityMapAuto.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapAuto.setDescription('Type of priority MAP.')
h3cCBQoSPriorityMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPriorityMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPriorityMapRowStatus.setDescription('RowStatus.')
h3cCBQoSMirrorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 17), )
if mibBuilder.loadTexts: h3cCBQoSMirrorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMirrorCfgInfoTable.setDescription('A table of flow mirror configuration information.')
h3cCBQoSMirrorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 17, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSMirrorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMirrorCfgInfoEntry.setDescription('Flow mirror configuration information entry.')
h3cCBQoSMirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("cpu", 2), ("vlan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMirrorType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMirrorType.setDescription('Type of flow mirror.')
h3cCBQoSMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMirrorIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMirrorIfIndex.setDescription("IfIndex of destination interface. Only the value of h3cCBQoSMirrorType is interface, can be set this node. For example: 1#11#111#1111 means the flow mirror destination ifindex is 1,11,111 and 1111. '#' is list separator for all IfIndex value. ")
h3cCBQoSMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMirrorVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMirrorVlanID.setDescription('Destination vlan of flow mirror, Only the value of h3cCBQoSMirrorType is vlan, can be set this node. ')
h3cCBQoSMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 17, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSMirrorRowStatus.setDescription('RowStatus.')
h3cCBQoSNestCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18), )
if mibBuilder.loadTexts: h3cCBQoSNestCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestCfgInfoTable.setDescription('Insert a service VLAN tag or customer VLAN tag into a packet. A VLAN tag contains the VLAN ID field and the 802.1p priority field. Both the service VLAN ID and the customer VLAN ID can not be set at the same time. One of them must be set. The 802.1p priority of the service VLAN tag and that of the customer VLAN tag can be set optionally. However, both of them can not be set at the same time. The new setting overwrites the previous one.')
h3cCBQoSNestCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSNestCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestCfgInfoEntry.setDescription('VLAN nesting table entry.')
h3cCBQoSNestServiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestServiceVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestServiceVlanID.setDescription('VLAN ID of the service VLAN tag to be inserted. If the customer VLAN tag has been configured, 65535 is returned for the service VLAN ID. The service VLAN ID can not be set to 65535.')
h3cCBQoSNestServiceDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestServiceDot1pValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestServiceDot1pValue.setDescription('802.1p priority value in the service VLAN tag to be inserted. If the 802.1p priority is not set, 65535 is returned. The 802.1p priority value can not be set to 65535.')
h3cCBQoSNestCustomerVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestCustomerVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestCustomerVlanID.setDescription('VLAN ID of the customer VLAN tag to be inserted. If the service VLAN tag has been configured, 65535 is returned for the customer VLAN ID. The customer VLAN ID can not be set to 65535.')
h3cCBQoSNestCustomerDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestCustomerDot1pValue.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestCustomerDot1pValue.setDescription('802.1p priority value in the customer VLAN tag to be inserted. If the 802.1p priority is not set, 65535 is returned. The 802.1p priority value can not be set to 65535.')
h3cCBQoSNestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 18, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestRowStatus.setDescription('RowStatus')
h3cCBQoSNestPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 19), )
if mibBuilder.loadTexts: h3cCBQoSNestPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyCfgInfoTable.setDescription('This table is used for configuring nest policy.')
h3cCBQoSNestPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 19, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: h3cCBQoSNestPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyCfgInfoEntry.setDescription('Nest policy configuration entry.')
h3cCBQoSNestPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 19, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyName.setDescription('Name of the nested policy.')
h3cCBQoSNestPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSNestPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyRowStatus.setDescription('RowStatus')
h3cCBQoSPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3))
h3cCBQoSPolicyIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyIndexNext.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyIndexNext.setDescription('This object contains an appropriate value to be used for h3cCBQoSPolicyIndex when creating rows in the h3cCBQoSPolicyCfgInfoTable. Begin with 1.')
h3cCBQoSPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2), )
if mibBuilder.loadTexts: h3cCBQoSPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyCfgInfoTable.setDescription('A table of QoS policy configuration information.')
h3cCBQoSPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyIndex"))
if mibBuilder.loadTexts: h3cCBQoSPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyCfgInfoEntry.setDescription('Traffic policy configuration information entry.')
h3cCBQoSPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyIndex.setDescription('Index of Traffic Policy.')
h3cCBQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyName.setDescription('Name of Traffic Policy.')
h3cCBQoSPolicyClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCount.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCount.setDescription('The counter of policy classes of policy.')
h3cCBQoSPolicyConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unavailable", 0), ("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyConfigMode.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyConfigMode.setDescription("Configuration mode of Traffic Policy. Only hardware QoS support this node. 'unavailable' is returned only when getting value from software QoS. 'unavailable' can't be set.")
h3cCBQoSPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyType.setDescription('Type of policy.')
h3cCBQoSPolicyClassNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassNextIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassNextIndex.setDescription('This object contains an appropriate value to be used for h3cCBQoSPolicyClassIndex when creating rows in the h3cCBQoSPolicyClassCfgInfoTable. Begin with 1. If the value of this node is 65535, it indicates creating a row in h3cCBQoSPolicyClassCfgInfoTable is not permitted. ')
h3cCBQoSPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyRowStatus.setDescription('RowStatus.')
h3cCBQoSPolicyClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3), )
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCfgInfoTable.setDescription('A table of QoS Policy classifier-behavior configuration information.')
h3cCBQoSPolicyClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCfgInfoEntry.setDescription('Traffic policy classifier-behavior configuration information entry.')
h3cCBQoSPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassIndex.setDescription('PolicyClass Index in a QoS policy.')
h3cCBQoSPolicyClassClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassClassifierIndex.setDescription('Index of classifier applied by a policy. It should exist in h3cCBQoSClassifierCfgInfoTable.')
h3cCBQoSPolicyClassClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassClassifierName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassClassifierName.setDescription('Name of classifier applied by a policy. It is corresponding to h3cCBQoSPolicyClassClassifierIndex.')
h3cCBQoSPolicyClassBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassBehaviorIndex.setDescription('Index of Behavior applied by a policy. It should exist in h3cCBQoSBehaviorCfgInfoTable.')
h3cCBQoSPolicyClassBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassBehaviorName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassBehaviorName.setDescription('Name of Behavior applied by a policy. It is corresponding to h3cCBQoSPolicyClassBehaviorIndex.')
h3cCBQoSPolicyClassPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassPrecedence.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassPrecedence.setDescription("The Precedence of the class in the policy. Only hardware QoS support this node. 2147483647 is returned only when getting value from software QoS. 2147483647 can't be set.")
h3cCBQoSPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassRowStatus.setDescription('RowStatus.')
h3cCBQoSPolicyClassMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modeNo", 1), ("modeDot1q", 2))).clone('modeNo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassMode.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassMode.setDescription('Set the mode of the classifier-behavior association. The default mode modeNo is a normal mode. modeDot1q indicates that the association is used for VLAN mapping.')
h3cCBQoSPolicyClassCfgOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCfgOrder.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPolicyClassCfgOrder.setDescription('A QoS policy contains multiple classifier-behavior associations. A node indicates the configuration order of the corresponding classifier-behavior association.')
h3cCBQoSApplyPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4))
h3cCBQoSIfApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1), )
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyTable.setDescription('A table of QoS policy instance.')
h3cCBQoSIfApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyEntry.setDescription('Policy applied on interface Configuration Information Entry.')
h3cCBQoSIfApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyIfIndex.setDescription('Interface Index, equal to ifIndex.')
h3cCBQoSIfApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1, 1, 2), DirectionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2) ')
h3cCBQoSIfApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyName.setDescription('Name of Traffic Policy.')
h3cCBQoSIfApplyPolicyEnableDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("true", 2), ("false", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyEnableDynamic.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyEnableDynamic.setDescription("If the value of it is specified 'true',Enable dynamic qos policy. 'unavailable' is returned if device don't support dynamic QoS. 'unavailable' can't be set. ")
h3cCBQoSIfApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfApplyPolicyRowStatus.setDescription('RowStatus.')
h3cCBQoSAtmPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
h3cCBQoSAtmPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyEntry.setDescription('Policy applied on ATM PVC Configuration Information Entry.')
h3cCBQoSAtmPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyIfIndex.setDescription('ATM Interface Index, equal to ifIndex.')
h3cCBQoSAtmPvcApplyPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyVPI.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyVPI.setDescription('VPI value of ATM Interface.')
h3cCBQoSAtmPvcApplyPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyVCI.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyVCI.setDescription('VCI value of ATM Interface.')
h3cCBQoSAtmPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1, 4), DirectionType())
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
h3cCBQoSAtmPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
h3cCBQoSAtmPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcApplyPolicyRowStatus.setDescription('RowStatus')
h3cCBQoSVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3), )
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyTable.setDescription('A table of QoS policy instance.')
h3cCBQoSVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyEntry.setDescription('Policy applied on Ethernet VLAN Configuration Information Entry.')
h3cCBQoSVlanApplyPolicyVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyVlanid.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyVlanid.setDescription('Vlan of Ethernet Interface.')
h3cCBQoSVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3, 1, 2), DirectionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
h3cCBQoSVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyName.setDescription('Name of Traffic Policy.')
h3cCBQoSVlanApplyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPriority.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPriority.setDescription('The priority of policy.')
h3cCBQoSVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyPolicyRowStatus.setDescription('RowStatus.')
h3cCBQoSFrClassApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 4), )
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyTable.setDescription('A table of QoS policy instance.')
h3cCBQoSFrClassApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrClassApplyPolicyFrClassName"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrClassApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyEntry.setDescription('Policy applied on FR class Configuration Information Entry.')
h3cCBQoSFrClassApplyPolicyFrClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyFrClassName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyFrClassName.setDescription('The name of FR class.')
h3cCBQoSFrClassApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 4, 1, 2), DirectionType())
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
h3cCBQoSFrClassApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyName.setDescription('Name of Traffic Policy.')
h3cCBQoSFrClassApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrClassApplyPolicyRowStatus.setDescription('RowStatus.')
h3cCBQoSFrPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
h3cCBQoSFrPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyEntry.setDescription('Policy applied on FR PVC Configuration Information Entry.')
h3cCBQoSFrPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyIfIndex.setDescription('Fr Interface Index, equal to ifIndex.')
h3cCBQoSFrPvcApplyPolicyDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyDlciNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyDlciNum.setDescription('Fr DLCI number.')
h3cCBQoSFrPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5, 1, 3), DirectionType())
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
h3cCBQoSFrPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
h3cCBQoSFrPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcApplyPolicyRowStatus.setDescription('RowStatus.')
h3cCBQoSGlobalApplyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 6), )
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyTable.setDescription('A table of QoS policies applied globally. A QoS policy applied globally takes effect on all ports of the device.')
h3cCBQoSGlobalApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSGlobalApplyDirection"))
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyEntry.setDescription('A global policy entry.')
h3cCBQoSGlobalApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 6, 1, 1), DirectionType())
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
h3cCBQoSGlobalApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyName.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyName.setDescription('Name of a global policy.')
h3cCBQoSGlobalApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 4, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGlobalApplyRowStatus.setDescription('RowStatus.')
h3cCBQoSApplyPolicyStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5))
h3cCBQoSIfStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1))
h3cCBQoSIfCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: h3cCBQoSIfCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqRunInfoTable.setDescription('A table of interface CBQ Running statistics. When policy using queue behavior is applied on interface the interface will using Class Based Queuing.')
h3cCBQoSIfCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqRunInfoEntry.setDescription('Interface CBQ statistics entry.')
h3cCBQoSIfCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqQueueSize.setDescription('Packet number of CBQ queue')
h3cCBQoSIfCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqDiscard.setDescription("The number of discarded packets which couldn't be enqueued.")
h3cCBQoSIfCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqEfQueueSize.setDescription('Packet number of EF queue.')
h3cCBQoSIfCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqAfQueueSize.setDescription('Packet number of AF queue.')
h3cCBQoSIfCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeQueueSize.setDescription('Packet number of BE queue.')
h3cCBQoSIfCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeActiveQueueNum.setDescription('The Packet number of Active BE Queue.')
h3cCBQoSIfCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeMaxActiveQueueNum.setDescription('The max Packet number of Active BE Queue.')
h3cCBQoSIfCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqBeTotalQueueNum.setDescription('The total Packet number of BE Queue.')
h3cCBQoSIfCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCbqAfAllocatedQueueNum.setDescription('The Allocated Packet number of AF Queue.')
h3cCBQoSIfClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on the interface.')
h3cCBQoSIfClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchRunInfoEntry.setDescription("Classifier's matching statistics information entry.")
h3cCBQoSIfClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
h3cCBQoSIfClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy. Only software QoS support this node.')
h3cCBQoSIfClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfClassAverageRate.setDescription('Average rate matching a class of the last 5 minutes.')
h3cCBQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3), )
if mibBuilder.loadTexts: h3cCBQoSIfCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on the interface.')
h3cCBQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarRunInfoEntry.setDescription('CAR statistics information entry.')
h3cCBQoSIfCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarGreenPackets.setDescription('Number of green packets.')
h3cCBQoSIfCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarGreenBytes.setDescription('Number of green bytes.')
h3cCBQoSIfCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarRedPackets.setDescription('Number of red packets.')
h3cCBQoSIfCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarRedBytes.setDescription('Number of red bytes.')
h3cCBQoSIfCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarYellowPackets.setDescription('Number of yellow packets.')
h3cCBQoSIfCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfCarYellowBytes.setDescription('Number of yellow bytes.')
h3cCBQoSIfGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4), )
if mibBuilder.loadTexts: h3cCBQoSIfGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on the interface.')
h3cCBQoSIfGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsRunInfoEntry.setDescription('GTS statistics entry.')
h3cCBQoSIfGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsPassedPackets.setDescription('Number of packets passed by GTS.')
h3cCBQoSIfGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
h3cCBQoSIfGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
h3cCBQoSIfGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
h3cCBQoSIfGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
h3cCBQoSIfGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
h3cCBQoSIfGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfGtsQueueSize.setDescription('Packet number of GTS queue.')
h3cCBQoSIfRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 5), )
if mibBuilder.loadTexts: h3cCBQoSIfRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on the interface.')
h3cCBQoSIfRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
h3cCBQoSIfRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfRemarkedPackets.setDescription('Number of packets remarked.')
h3cCBQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6), )
if mibBuilder.loadTexts: h3cCBQoSIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on the interface.')
h3cCBQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueRunInfoEntry.setDescription('Queue statistics entry.')
h3cCBQoSIfQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
h3cCBQoSIfQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
h3cCBQoSIfQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
h3cCBQoSIfQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
h3cCBQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
h3cCBQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
h3cCBQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 7), )
if mibBuilder.loadTexts: h3cCBQoSIfWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on the interface.')
h3cCBQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSIfWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfWredRunInfoEntry.setDescription('WRED statistics entry.')
h3cCBQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfWredRandomDiscardedPackets.setDescription('Number of packets that random-discarded by WRED.')
h3cCBQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfWredTailDiscardedPackets.setDescription('Number of packets that tail-discarded by WRED.')
h3cCBQoSIfAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 8), )
if mibBuilder.loadTexts: h3cCBQoSIfAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the interface.')
h3cCBQoSIfAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSIfAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfAccountingRunInfoEntry.setDescription('Account statistics entry.')
h3cCBQoSIfAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfAccountingPackets.setDescription('Number of packets.')
h3cCBQoSIfAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIfAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfAccountingBytes.setDescription('Number of bytes.')
h3cCBQoSAtmPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2))
h3cCBQoSAtmPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqRunInfoTable.setDescription('A table of ATM PVC CBQ Running statistics. When policy using queue behavior is applied on ATM PVC. ATM PVC will using Class Based Queuing.')
h3cCBQoSAtmPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
h3cCBQoSAtmPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqQueueSize.setDescription('Packet number of CBQ queue.')
h3cCBQoSAtmPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqDiscard.setDescription("The number of discarded packets which couldn't be enqueued.")
h3cCBQoSAtmPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqEfQueueSize.setDescription('Packet number of EF queue.')
h3cCBQoSAtmPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqAfQueueSize.setDescription('Packet number of AF queue.')
h3cCBQoSAtmPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeQueueSize.setDescription('Packet number of BE queue.')
h3cCBQoSAtmPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeActiveQueueNum.setDescription('The packet number of Active Be Queue.')
h3cCBQoSAtmPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeMaxActiveQueueNum.setDescription('The max packet number of Active Be Queue.')
h3cCBQoSAtmPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqBeTotalQueueNum.setDescription('The total packet number of Be Queue.')
h3cCBQoSAtmPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCbqAfAllocatedQueueNum.setDescription('The Allocated packet number of AF Queue.')
h3cCBQoSAtmPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on ATM PVC.')
h3cCBQoSAtmPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
h3cCBQoSAtmPvcClassMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchPackets.setDescription('Number of packets matching a class in a QoS policy.')
h3cCBQoSAtmPvcClassMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassMatchBytes.setDescription('Number of bytes matching a class in a QoS policy.')
h3cCBQoSAtmPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcClassAverageRate.setDescription('Average rate matching a class in the last 5 minutes.')
h3cCBQoSAtmPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on ATM PVC.')
h3cCBQoSAtmPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
h3cCBQoSAtmPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarConformPackets.setDescription('Number of packets that conforming specified CIR.')
h3cCBQoSAtmPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarConformBytes.setDescription('Number of bytes that conforming specified CIR.')
h3cCBQoSAtmPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarExceedPackets.setDescription('Number of packets exceeded CIR.')
h3cCBQoSAtmPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcCarExceedBytes.setDescription('Number of bytes exceeded CIR.')
h3cCBQoSAtmPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on ATM PVC.')
h3cCBQoSAtmPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
h3cCBQoSAtmPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
h3cCBQoSAtmPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
h3cCBQoSAtmPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
h3cCBQoSAtmPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
h3cCBQoSAtmPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
h3cCBQoSAtmPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
h3cCBQoSAtmPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcGtsQueueSize.setDescription('packet number of GTS queue.')
h3cCBQoSAtmPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 5), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on ATM PVC.')
h3cCBQoSAtmPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
h3cCBQoSAtmPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcRemarkedPackets.setDescription('Number of packets remarked.')
h3cCBQoSAtmPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on ATM PVC.')
h3cCBQoSAtmPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
h3cCBQoSAtmPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
h3cCBQoSAtmPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
h3cCBQoSAtmPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
h3cCBQoSAtmPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
h3cCBQoSAtmPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueDiscardedPackets.setDescription('Number of packets discard when enqueued by discard method.')
h3cCBQoSAtmPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcQueueDiscardedBytes.setDescription('Number of bytes discard when enqueued by discard method.')
h3cCBQoSAtmPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 7), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on ATM PVC.')
h3cCBQoSAtmPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
h3cCBQoSAtmPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
h3cCBQoSAtmPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
h3cCBQoSAtmPvcAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 8), )
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the ATM PVC.')
h3cCBQoSAtmPvcAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVPI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyVCI"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSAtmPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingRunInfoEntry.setDescription('Account statistics entry.')
h3cCBQoSAtmPvcAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingPackets.setDescription('Number of packets.')
h3cCBQoSAtmPvcAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAtmPvcAccountingBytes.setDescription('Number of bytes.')
h3cCBQoSFrPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3))
h3cCBQoSFrPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqRunInfoTable.setDescription('A table of FR PVC CBQ Running statistics. When policy using queue behavior is applied on FR PVC will using Class Based Queuing.')
h3cCBQoSFrPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
h3cCBQoSFrPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqQueueSize.setDescription('Packet number of CBQ queue.')
h3cCBQoSFrPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqDiscard.setDescription('The number of discarded packets which could not be enqueued.')
h3cCBQoSFrPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqEfQueueSize.setDescription('Packet number of EF queue.')
h3cCBQoSFrPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqAfQueueSize.setDescription('Packet number of AF queue.')
h3cCBQoSFrPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeQueueSize.setDescription('Packet number of BE queue.')
h3cCBQoSFrPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeActiveQueueNum.setDescription('The packet number of Active Be Queue.')
h3cCBQoSFrPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeMaxActiveQueueNum.setDescription('The max packet number of Active Be Queue.')
h3cCBQoSFrPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqBeTotalQueueNum.setDescription('The total packet number of Be Queue.')
h3cCBQoSFrPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCbqAfAllocatedQueueNum.setDescription('The Allocated packet number of AF Queue.')
h3cCBQoSFrPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 2), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on FR PVC.')
h3cCBQoSFrPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
h3cCBQoSFrPvcClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
h3cCBQoSFrPvcClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy.')
h3cCBQoSFrPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcClassAverageRate.setDescription('Average rate matching a class of the last 5 minutes.')
h3cCBQoSFrPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 3), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on FR PVC.')
h3cCBQoSFrPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
h3cCBQoSFrPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarConformPackets.setDescription('Number of packets conform CIR.')
h3cCBQoSFrPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarConformBytes.setDescription('Number of bytes conform CIR.')
h3cCBQoSFrPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarExceedPackets.setDescription('Number of packets exceed CIR.')
h3cCBQoSFrPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcCarExceedBytes.setDescription('Number of bytes exceed CIR.')
h3cCBQoSFrPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on FR PVC.')
h3cCBQoSFrPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
h3cCBQoSFrPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
h3cCBQoSFrPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
h3cCBQoSFrPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
h3cCBQoSFrPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
h3cCBQoSFrPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
h3cCBQoSFrPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
h3cCBQoSFrPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcGtsQueueSize.setDescription('Packet number of GTS queue.')
h3cCBQoSFrPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 5), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on FR PVC.')
h3cCBQoSFrPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
h3cCBQoSFrPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcRemarkedPackets.setDescription('Number of packets remarked.')
h3cCBQoSFrPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on FR PVC.')
h3cCBQoSFrPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
h3cCBQoSFrPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
h3cCBQoSFrPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueMatchedBytes.setDescription('Number of bytes matched to en-queue.')
h3cCBQoSFrPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueEnqueuedPackets.setDescription('Number of packets en-queued.')
h3cCBQoSFrPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
h3cCBQoSFrPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
h3cCBQoSFrPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
h3cCBQoSFrPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 7), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on FR PVC. ')
h3cCBQoSFrPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
h3cCBQoSFrPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
h3cCBQoSFrPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
h3cCBQoSFrPvcAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 8), )
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the interface.')
h3cCBQoSFrPvcAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDlciNum"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSFrPvcApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingRunInfoEntry.setDescription('Account statistics entry.')
h3cCBQoSFrPvcAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingPackets.setDescription('Number of packets.')
h3cCBQoSFrPvcAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSFrPvcAccountingBytes.setDescription('Number of bytes.')
h3cCBQoSVlanStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4))
h3cCBQoSVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 1), )
if mibBuilder.loadTexts: h3cCBQoSVlanClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on Ethernet VLAN. ')
h3cCBQoSVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSVlanClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
h3cCBQoSVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSVlanClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
h3cCBQoSVlanAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 2), )
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the interface.')
h3cCBQoSVlanAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyVlanid"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyDirection"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingRunInfoEntry.setDescription('Account statistics entry.')
h3cCBQoSVlanAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingPackets.setDescription('Number of packets.')
h3cCBQoSVlanAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanAccountingBytes.setDescription('Number of bytes.')
h3cCBQoSApplyPolicyIndexObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5))
h3cCBQoSApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: h3cCBQoSApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectTable.setDescription('A table of QoS apply object index. It provides the function of querying the information of QoS apply object, which consists of interface type, interface index, ATM PVC, FR DLCI and nesting policy index, using QoS apply object index.')
h3cCBQoSApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"))
if mibBuilder.loadTexts: h3cCBQoSApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectEntry.setDescription('QoS apply object index entry.')
h3cCBQoSApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cCBQoSApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectIndex.setDescription('QoS apply object index. It represents the unique identifier of QoS policy applied position. It generates when QoS policy is applied considering ifIndex, VLAN ID, ATM PVC, FR DLCI and policy nesting.')
h3cCBQoSApplyObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 2), ApplyObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyObjectType.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectType.setDescription('Apply object type.')
h3cCBQoSApplyObjectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyObjectDirection.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectDirection.setDescription('The direction of QoS apply object.')
h3cCBQoSApplyObjectMainSite = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyObjectMainSite.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectMainSite.setDescription('Its value depends on h3cCBQoSApplyObjectType. It represents VLAN ID When h3cCBQoSApplyObjectType is vlan(2), otherwise it represents ifIndex.')
h3cCBQoSApplyObjectSubChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyObjectSubChannel.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectSubChannel.setDescription("Its value depends on h3cCBQoSApplyObjectType. It represents the value of VPI/VCI, of which high 16-bits is VPI and low 16-bits is VCI, when h3cCBQoSApplyObjectType is atmPvc(3). It represents the value of data link connection identifier in FR network, when h3cCBQoSApplyObjectType is frDlci(4). Otherwise the value is '0xFFFFFFFF'.")
h3cCBQoSApplyObjectSubClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyObjectSubClass.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectSubClass.setDescription("The value represents level-1 sub class index when the QoS apply object is level-2 or level-3 nesting policy. Otherwise the value is '0xFFFFFFFF'.")
h3cCBQoSApplyObjectSubClassSec = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyObjectSubClassSec.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyObjectSubClassSec.setDescription("The value represents level-2 sub class index when the QoS apply object is level-3 nesting policy. Otherwise the value is '0xFFFFFFFF'.")
h3cCBQoSIntApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 2), )
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectTable.setDescription('A table used for querying the QoS apply object indexes by interface index. It is suitable for querying QoS apply object indexes for policies applied on Ethernet ports, ATM ports and FR ports.')
h3cCBQoSIntApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIntApplyObjectIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectEntry.setDescription('QoS apply object on interface index querying entry.')
h3cCBQoSIntApplyObjectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectIfIndex.setDescription('Interface index.')
h3cCBQoSIntApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIntApplyObjectIndex.setDescription('QoS apply object index.')
h3cCBQoSVlanApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 3), )
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectTable.setDescription('A table used for querying the QoS apply object indexes by VLAN ID and policy direction. It is suitable for querying QoS apply object indexes for policies applied on VLANs. If the value of h3cCBQoSVlanApplyObjectVlanID is 0, it means querying Qos apply object index for policy applied on global.')
h3cCBQoSVlanApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyObjectVlanID"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectEntry.setDescription('VLAN apply object entry.')
h3cCBQoSVlanApplyObjectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectVlanID.setDescription('VLAN ID.')
h3cCBQoSVlanApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanApplyObjectIndex.setDescription('QoS apply object index.')
h3cCBQoSPvcApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 4), )
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectTable.setDescription('A table used for querying the QoS apply object indexes by ATM PVC or FR DLCI, ifIndex and policy direction. It is suitable for querying QoS apply object indexes for policies applied on ATM PVCs or FR DLCIs.')
h3cCBQoSPvcApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPvcApplyObjectIfIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPvcApplyObjectPvcID"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectEntry.setDescription('QoS apply object querying entry for ATM PVC or FR DLCI.')
h3cCBQoSPvcApplyObjectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectIfIndex.setDescription('Interface index.')
h3cCBQoSPvcApplyObjectPvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectPvcID.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectPvcID.setDescription('If the QoS apply object queried is a ATM PVC, its input value represents a VPI/VCI. If the QoS apply object queried is a FR DLCI, its input value represents a value of FR DLCI.')
h3cCBQoSPvcApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSPvcApplyObjectIndex.setDescription('QoS apply object index.')
h3cCBQoSNestPolicyApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 5), )
if mibBuilder.loadTexts: h3cCBQoSNestPolicyApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyApplyObjectTable.setDescription('A table used for querying the nested QoS policy apply object indexes. It is suitable for querying nested QoS apply object indexes for policies applied on ifIndex, VLAN ID, ATM PVC or FR DLCI.')
h3cCBQoSNestPolicyApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSNestPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSNestPolicyApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyApplyObjectEntry.setDescription('QoS apply object on policy querying entry.')
h3cCBQoSNestPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cCBQoSNestPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyClassIndex.setDescription('Policyclass index in father policy.')
h3cCBQoSNestPolicyApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 5, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSNestPolicyApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSNestPolicyApplyObjectIndex.setDescription('QoS apply object index of the son policy.')
h3cCBQoSStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6))
h3cCBQoSCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: h3cCBQoSCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqRunInfoTable.setDescription('A table of CBQ running statistics. When policy using queue behavior is applied on QoS apply object, the QoS apply object will use Class Based Queuing.')
h3cCBQoSCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"))
if mibBuilder.loadTexts: h3cCBQoSCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqRunInfoEntry.setDescription('CBQ statistics entry of QoS apply object.')
h3cCBQoSCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqQueueSize.setDescription('Number of packets in CBQ queue.')
h3cCBQoSCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqDiscard.setDescription("Number of discarded packets which couldn't queue.")
h3cCBQoSCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqEfQueueSize.setDescription('Number of packets in EF queue.')
h3cCBQoSCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqAfQueueSize.setDescription('Number of packets in AF queue.')
h3cCBQoSCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqBeQueueSize.setDescription('Number of packets in BE Queue.')
h3cCBQoSCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqBeActiveQueueNum.setDescription('Number of Active BE Queues.')
h3cCBQoSCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqBeMaxActiveQueueNum.setDescription('The max number of Active BE Queues.')
h3cCBQoSCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqBeTotalQueueNum.setDescription('Number of total BE Queues.')
h3cCBQoSCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCbqAfAllocatedQueueNum.setDescription('Number of allocated AF Queues.')
h3cCBQoSClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: h3cCBQoSClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassMatchRunInfoTable.setDescription('A table of running statistics for matching a classifier on a QoS apply object.')
h3cCBQoSClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassMatchRunInfoEntry.setDescription("Classifier's matching statistics information entry.")
h3cCBQoSClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
h3cCBQoSClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy.')
h3cCBQoSClassFwdPktpps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassFwdPktpps.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassFwdPktpps.setDescription('Average number of packets macthing the class forwarded per second in the last interval. Unit: pps.')
h3cCBQoSClassFwdPktbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassFwdPktbps.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassFwdPktbps.setDescription('Average bits of packets matching the class forwarded per second in the last interval. Unit: bps.')
h3cCBQoSClassDropPktpps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassDropPktpps.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassDropPktpps.setDescription('Average number of packets matching the class dropped per second in the last interval. Unit: pps.')
h3cCBQoSClassDropPktbps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassDropPktbps.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassDropPktbps.setDescription('Average bits of packets matching the class dropped per second in the last interval. Unit: bps.')
h3cCBQoSClassFlowStatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassFlowStatInterval.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassFlowStatInterval.setDescription('Interval of collecting traffic statistics. Unit: minute.')
h3cCBQoSClassBehaviorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSClassBehaviorStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSClassBehaviorStatus.setDescription('Classifier-behavior applying status.')
h3cCBQoSCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3), )
if mibBuilder.loadTexts: h3cCBQoSCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRunInfoTable.setDescription('A table of running statistics for CAR on a QoS apply object.')
h3cCBQoSCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRunInfoEntry.setDescription('CAR statistics information entry.')
h3cCBQoSCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarGreenPackets.setDescription('Number of green packets.')
h3cCBQoSCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarGreenBytes.setDescription('Number of green bytes.')
h3cCBQoSCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRedPackets.setDescription('Number of red packets.')
h3cCBQoSCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarRedBytes.setDescription('Number of red bytes.')
h3cCBQoSCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarYellowPackets.setDescription('Number of yellow packets.')
h3cCBQoSCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSCarYellowBytes.setDescription('Number of yellow bytes.')
h3cCBQoSGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4), )
if mibBuilder.loadTexts: h3cCBQoSGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsRunInfoTable.setDescription('A table of running statistics for GTS on a QoS apply object.')
h3cCBQoSGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsRunInfoEntry.setDescription('GTS statistics entry.')
h3cCBQoSGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsPassedPackets.setDescription('Number of packets passed by GTS.')
h3cCBQoSGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
h3cCBQoSGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
h3cCBQoSGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
h3cCBQoSGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
h3cCBQoSGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
h3cCBQoSGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSGtsQueueSize.setDescription('Number of packets in GTS queue.')
h3cCBQoSRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 5), )
if mibBuilder.loadTexts: h3cCBQoSRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkRunInfoTable.setDescription('A table of running statistics for remarking on a QoS apply object.')
h3cCBQoSRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
h3cCBQoSRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSRemarkedPackets.setDescription('Number of remarked packets.')
h3cCBQoSQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6), )
if mibBuilder.loadTexts: h3cCBQoSQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueRunInfoTable.setDescription('A table of running statistics for queue on a QoS apply object.')
h3cCBQoSQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueRunInfoEntry.setDescription('Queue statistics entry.')
h3cCBQoSQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueMatchedPackets.setDescription('Number of packets matched to queue.')
h3cCBQoSQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueMatchedBytes.setDescription('Number of bytes matched to queue.')
h3cCBQoSQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueEnqueuedPackets.setDescription('Number of packets queued.')
h3cCBQoSQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueEnqueuedBytes.setDescription('Number of bytes queued.')
h3cCBQoSQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueDiscardedPackets.setDescription('Number of packets discarded when queued by discard method.')
h3cCBQoSQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSQueueDiscardedBytes.setDescription('Number of bytes discarded when queued by discard method.')
h3cCBQoSWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 7), )
if mibBuilder.loadTexts: h3cCBQoSWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredRunInfoTable.setDescription('A table of running statistics for WRED on a QoS apply object.')
h3cCBQoSWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSWredClassValue"))
if mibBuilder.loadTexts: h3cCBQoSWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredRunInfoEntry.setDescription('WRED statistics entry.')
h3cCBQoSWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredRandomDiscardedPackets.setDescription('Number of packets random-discarded by WRED.')
h3cCBQoSWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
h3cCBQoSAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 8), )
if mibBuilder.loadTexts: h3cCBQoSAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountingRunInfoTable.setDescription('A table of running statistics for account on a QoS apply object.')
h3cCBQoSAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSApplyObjectIndex"), (0, "A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: h3cCBQoSAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountingRunInfoEntry.setDescription('Account statistics entry.')
h3cCBQoSAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountingPackets.setDescription('Number of packets matching a class in QoS policy.')
h3cCBQoSAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 5, 6, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSAccountingBytes.setDescription('Number of bytes matching a class in QoS policy.')
h3cCBQoSApplyingStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 6))
h3cCBQoSApplyingStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("busy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCBQoSApplyingStatus.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSApplyingStatus.setDescription('This object shows the status of the system when applying policy. It is forbidden to set or read in this MIB module except current table when the value is busy.')
h3cCBQoSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 7))
h3cCBQoSNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 7, 0))
h3cCBQoSIfPolicyChanged = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 7, 0, 1)).setObjects(("A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyIfIndex"), ("A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSIfPolicyChanged.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSIfPolicyChanged.setDescription('This notification will be sent when the applying status of the policy on the interface is changed.')
h3cCBQoSVlanPolicyChanged = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 65, 2, 1, 7, 0, 2)).setObjects(("A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyVlanid"), ("A3COM-HUAWEI-CBQOS2-MIB", "h3cCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: h3cCBQoSVlanPolicyChanged.setStatus('current')
if mibBuilder.loadTexts: h3cCBQoSVlanPolicyChanged.setDescription('This notification will be sent when the applying status of the policy on the VLAN is changed.')
mibBuilder.exportSymbols("A3COM-HUAWEI-CBQOS2-MIB", h3cCBQoSIfCbqAfQueueSize=h3cCBQoSIfCbqAfQueueSize, h3cCBQoSApplyPolicyIndexObjects=h3cCBQoSApplyPolicyIndexObjects, h3cCBQoSWredWeightConst=h3cCBQoSWredWeightConst, h3cCBQoSFrPvcCarConformBytes=h3cCBQoSFrPvcCarConformBytes, h3cCBQoSClassifierRowStatus=h3cCBQoSClassifierRowStatus, h3cCBQoSFrPvcQueueRunInfoEntry=h3cCBQoSFrPvcQueueRunInfoEntry, h3cCBQoSFrPvcWredRunInfoEntry=h3cCBQoSFrPvcWredRunInfoEntry, h3cCBQoSCarPir=h3cCBQoSCarPir, h3cCBQoSQueueDropType=h3cCBQoSQueueDropType, h3cCBQoSClassifierOperator=h3cCBQoSClassifierOperator, h3cCBQoSClassifierType=h3cCBQoSClassifierType, h3cCBQoSNatServiceClass=h3cCBQoSNatServiceClass, h3cCBQoSFrPvcClassMatchedBytes=h3cCBQoSFrPvcClassMatchedBytes, h3cCBQoSPriorityMapCfgInfoTable=h3cCBQoSPriorityMapCfgInfoTable, h3cCBQoSNestServiceDot1pValue=h3cCBQoSNestServiceDot1pValue, h3cCBQoSClassifierLayer=h3cCBQoSClassifierLayer, h3cCBQoSMirrorCfgInfoEntry=h3cCBQoSMirrorCfgInfoEntry, h3cCBQoSFrPvcAccountingPackets=h3cCBQoSFrPvcAccountingPackets, h3cCBQoSCbqRunInfoEntry=h3cCBQoSCbqRunInfoEntry, h3cQos2=h3cQos2, h3cCBQoSFrPvcStaticsObjects=h3cCBQoSFrPvcStaticsObjects, h3cCBQoSCarYellowAction=h3cCBQoSCarYellowAction, h3cCBQoSIfApplyPolicyDirection=h3cCBQoSIfApplyPolicyDirection, h3cCBQoSIfStaticsObjects=h3cCBQoSIfStaticsObjects, h3cCBQoSAtmPvcWredRunInfoEntry=h3cCBQoSAtmPvcWredRunInfoEntry, h3cCBQoSAggregativeCarCfgInfoTable=h3cCBQoSAggregativeCarCfgInfoTable, h3cCBQoSIfQueueDiscardedPackets=h3cCBQoSIfQueueDiscardedPackets, h3cCBQoSIfRemarkRunInfoEntry=h3cCBQoSIfRemarkRunInfoEntry, h3cCBQoSAtmPvcApplyPolicyRowStatus=h3cCBQoSAtmPvcApplyPolicyRowStatus, h3cCBQoSIfApplyPolicyName=h3cCBQoSIfApplyPolicyName, h3cCBQoSBehaviorCfgInfoTable=h3cCBQoSBehaviorCfgInfoTable, h3cCBQoSVlanAccountingBytes=h3cCBQoSVlanAccountingBytes, h3cCBQoSGtsCfgInfoEntry=h3cCBQoSGtsCfgInfoEntry, h3cCBQoSCbqQueueSize=h3cCBQoSCbqQueueSize, h3cCBQoSIfQueueDiscardedBytes=h3cCBQoSIfQueueDiscardedBytes, h3cCBQoSPolicyClassClassifierIndex=h3cCBQoSPolicyClassClassifierIndex, h3cCBQoSIfPolicyChanged=h3cCBQoSIfPolicyChanged, h3cCBQoSFrClassApplyPolicyTable=h3cCBQoSFrClassApplyPolicyTable, h3cCBQoSVlanAccountingRunInfoTable=h3cCBQoSVlanAccountingRunInfoTable, h3cCBQoSFrPvcCbqQueueSize=h3cCBQoSFrPvcCbqQueueSize, h3cCBQoSAtmPvcGtsDelayedBytes=h3cCBQoSAtmPvcGtsDelayedBytes, h3cCBQoSPolicyClassRowStatus=h3cCBQoSPolicyClassRowStatus, h3cCBQoSNotificationsPrefix=h3cCBQoSNotificationsPrefix, h3cCBQoSPolicyRouteRowStatus=h3cCBQoSPolicyRouteRowStatus, h3cCBQoSCarAggregativeCarName=h3cCBQoSCarAggregativeCarName, h3cCBQoSNestCfgInfoTable=h3cCBQoSNestCfgInfoTable, h3cCBQoSIfCbqBeMaxActiveQueueNum=h3cCBQoSIfCbqBeMaxActiveQueueNum, h3cCBQoSRemarkRowStatus=h3cCBQoSRemarkRowStatus, h3cCBQoSIfAccountingBytes=h3cCBQoSIfAccountingBytes, h3cCBQoSFrPvcAccountingRunInfoTable=h3cCBQoSFrPvcAccountingRunInfoTable, h3cCBQoSPolicyCfgInfoEntry=h3cCBQoSPolicyCfgInfoEntry, h3cCBQoSIfCbqRunInfoEntry=h3cCBQoSIfCbqRunInfoEntry, h3cCBQoSPolicyClassCount=h3cCBQoSPolicyClassCount, h3cCBQoSMatchRuleCfgInfoEntry=h3cCBQoSMatchRuleCfgInfoEntry, h3cCBQoSAtmPvcQueueRunInfoTable=h3cCBQoSAtmPvcQueueRunInfoTable, h3cCBQoSAggregativeCarCfgInfoEntry=h3cCBQoSAggregativeCarCfgInfoEntry, h3cCBQoSIfGtsDiscardedBytes=h3cCBQoSIfGtsDiscardedBytes, h3cCBQoSNestPolicyApplyObjectTable=h3cCBQoSNestPolicyApplyObjectTable, h3cCBQoSMirrorCfgInfoTable=h3cCBQoSMirrorCfgInfoTable, h3cCBQoSIfCarRunInfoEntry=h3cCBQoSIfCarRunInfoEntry, h3cCBQoSWredClassValue=h3cCBQoSWredClassValue, h3cCBQoSIfApplyPolicyEntry=h3cCBQoSIfApplyPolicyEntry, h3cCBQoSWredType=h3cCBQoSWredType, h3cCBQoSFrPvcWredRunInfoTable=h3cCBQoSFrPvcWredRunInfoTable, h3cCBQoSFrPvcCbqBeTotalQueueNum=h3cCBQoSFrPvcCbqBeTotalQueueNum, h3cCBQoSIfAccountingRunInfoEntry=h3cCBQoSIfAccountingRunInfoEntry, h3cCBQoSClassMatchRunInfoEntry=h3cCBQoSClassMatchRunInfoEntry, h3cCBQoSVlanApplyPolicyRowStatus=h3cCBQoSVlanApplyPolicyRowStatus, h3cCBQoSRedirectType=h3cCBQoSRedirectType, h3cCBQoSApplyObjectSubClassSec=h3cCBQoSApplyObjectSubClassSec, QueueBandwidthUnit=QueueBandwidthUnit, h3cCBQoSCarAggregativeCarIndex=h3cCBQoSCarAggregativeCarIndex, h3cCBQoSAtmPvcQueueMatchedBytes=h3cCBQoSAtmPvcQueueMatchedBytes, h3cCBQoSGtsRunInfoTable=h3cCBQoSGtsRunInfoTable, h3cCBQoSFrPvcWredTailDiscardedPackets=h3cCBQoSFrPvcWredTailDiscardedPackets, h3cCBQoSPolicyClassBehaviorName=h3cCBQoSPolicyClassBehaviorName, h3cCBQoSAtmPvcCbqEfQueueSize=h3cCBQoSAtmPvcCbqEfQueueSize, h3cCBQoSFrPvcCbqBeActiveQueueNum=h3cCBQoSFrPvcCbqBeActiveQueueNum, h3cCBQoSClassifierObjects=h3cCBQoSClassifierObjects, h3cCBQoSPolicyIndex=h3cCBQoSPolicyIndex, h3cCBQoSIfWredRunInfoEntry=h3cCBQoSIfWredRunInfoEntry, h3cCBQoSCarRedPackets=h3cCBQoSCarRedPackets, h3cCBQoSFrPvcApplyPolicyRowStatus=h3cCBQoSFrPvcApplyPolicyRowStatus, h3cCBQoSGlobalApplyRowStatus=h3cCBQoSGlobalApplyRowStatus, h3cCBQoSFrPvcGtsDelayedPackets=h3cCBQoSFrPvcGtsDelayedPackets, h3cCBQoSAccountingBytes=h3cCBQoSAccountingBytes, h3cCBQoSCarPolicedPriorityMapType=h3cCBQoSCarPolicedPriorityMapType, h3cCBQoSClassDropPktbps=h3cCBQoSClassDropPktbps, h3cCBQoSApplyingStatus=h3cCBQoSApplyingStatus, h3cCBQoSCarCfgInfoEntry=h3cCBQoSCarCfgInfoEntry, h3cCBQoSNestServiceVlanID=h3cCBQoSNestServiceVlanID, h3cCBQoSNatRowStatus=h3cCBQoSNatRowStatus, h3cCBQoSRedirectIpv6Interface1=h3cCBQoSRedirectIpv6Interface1, h3cCBQoSVlanApplyPolicyEntry=h3cCBQoSVlanApplyPolicyEntry, h3cCBQoSQueueDiscardedBytes=h3cCBQoSQueueDiscardedBytes, h3cCBQoSGtsDelayedBytes=h3cCBQoSGtsDelayedBytes, h3cCBQoSAccountingPackets=h3cCBQoSAccountingPackets, h3cCBQoSFrPvcApplyPolicyEntry=h3cCBQoSFrPvcApplyPolicyEntry, h3cCBQoSApplyObjectEntry=h3cCBQoSApplyObjectEntry, h3cCBQoSFrPvcAccountingBytes=h3cCBQoSFrPvcAccountingBytes, h3cCBQoSVlanApplyPolicyTable=h3cCBQoSVlanApplyPolicyTable, h3cCBQoSNestPolicyCfgInfoEntry=h3cCBQoSNestPolicyCfgInfoEntry, h3cCBQoSFrPvcClassAverageRate=h3cCBQoSFrPvcClassAverageRate, h3cCBQoSFrPvcGtsPassedBytes=h3cCBQoSFrPvcGtsPassedBytes, h3cCBQoSIfCbqBeTotalQueueNum=h3cCBQoSIfCbqBeTotalQueueNum, h3cCBQoSGtsPassedPackets=h3cCBQoSGtsPassedPackets, h3cCBQoSFrPvcApplyPolicyDirection=h3cCBQoSFrPvcApplyPolicyDirection, h3cCBQoSClassDropPktpps=h3cCBQoSClassDropPktpps, h3cCBQoSWredCfgInfoTable=h3cCBQoSWredCfgInfoTable, h3cCBQoSIfClassMatchRunInfoTable=h3cCBQoSIfClassMatchRunInfoTable, h3cCBQoSFrPvcGtsPassedPackets=h3cCBQoSFrPvcGtsPassedPackets, h3cCBQoSAtmPvcRemarkedPackets=h3cCBQoSAtmPvcRemarkedPackets, h3cCBQoSMatchRuleStringValue=h3cCBQoSMatchRuleStringValue, h3cCBQoSWredClassLowLimit=h3cCBQoSWredClassLowLimit, h3cCBQoSRedirectIpAddress1=h3cCBQoSRedirectIpAddress1, h3cCBQoSAtmPvcCarConformBytes=h3cCBQoSAtmPvcCarConformBytes, h3cCBQoSNestPolicyApplyObjectIndex=h3cCBQoSNestPolicyApplyObjectIndex, h3cCBQoSWredClassCfgInfoTable=h3cCBQoSWredClassCfgInfoTable, h3cCBQoSAccountingRunInfoEntry=h3cCBQoSAccountingRunInfoEntry, h3cCBQoSAggregativeCarRowStatus=h3cCBQoSAggregativeCarRowStatus, h3cCBQoSAtmPvcCbqAfQueueSize=h3cCBQoSAtmPvcCbqAfQueueSize, h3cCBQoSIfGtsQueueSize=h3cCBQoSIfGtsQueueSize, h3cCBQoSIfClassAverageRate=h3cCBQoSIfClassAverageRate, h3cCBQoSAtmPvcGtsRunInfoTable=h3cCBQoSAtmPvcGtsRunInfoTable, h3cCBQoSFrClassApplyPolicyEntry=h3cCBQoSFrClassApplyPolicyEntry, h3cCBQoSIfApplyPolicyTable=h3cCBQoSIfApplyPolicyTable, h3cCBQoSQueueCbs=h3cCBQoSQueueCbs, h3cCBQoSIfAccountingRunInfoTable=h3cCBQoSIfAccountingRunInfoTable, h3cCBQoSIfGtsRunInfoEntry=h3cCBQoSIfGtsRunInfoEntry, h3cCBQoSVlanClassMatchedPackets=h3cCBQoSVlanClassMatchedPackets, h3cCBQoSCarGreenPackets=h3cCBQoSCarGreenPackets, h3cCBQoSIfWredRunInfoTable=h3cCBQoSIfWredRunInfoTable, h3cCBQoSVlanClassMatchRunInfoEntry=h3cCBQoSVlanClassMatchRunInfoEntry, QueueType=QueueType, h3cCBQoSMirrorType=h3cCBQoSMirrorType, h3cCBQoSIfCarRunInfoTable=h3cCBQoSIfCarRunInfoTable, h3cCBQoSGtsDelayedPackets=h3cCBQoSGtsDelayedPackets, h3cCBQoSAtmPvcCarRunInfoEntry=h3cCBQoSAtmPvcCarRunInfoEntry, h3cCBQoSCarRedRemarkValue=h3cCBQoSCarRedRemarkValue, h3cCBQoSPvcApplyObjectTable=h3cCBQoSPvcApplyObjectTable, h3cCBQoSCarGreenBytes=h3cCBQoSCarGreenBytes, h3cCBQoSApplyObjectSubClass=h3cCBQoSApplyObjectSubClass, h3cCBQoSBehaviorIndexNext=h3cCBQoSBehaviorIndexNext, h3cCBQoSPolicyClassBehaviorIndex=h3cCBQoSPolicyClassBehaviorIndex, h3cCBQoSFrPvcCbqDiscard=h3cCBQoSFrPvcCbqDiscard, h3cCBQoSBehaviorIndex=h3cCBQoSBehaviorIndex, h3cCBQoSAccountingRunInfoTable=h3cCBQoSAccountingRunInfoTable, h3cCBQoSVlanApplyObjectIndex=h3cCBQoSVlanApplyObjectIndex, h3cCBQoSAtmPvcRemarkRunInfoTable=h3cCBQoSAtmPvcRemarkRunInfoTable, h3cCBQoSPolicyClassMode=h3cCBQoSPolicyClassMode, h3cCBQoSCbqEfQueueSize=h3cCBQoSCbqEfQueueSize, h3cCBQoSNotifications=h3cCBQoSNotifications, h3cCBQoSFirewallCfgInfoEntry=h3cCBQoSFirewallCfgInfoEntry, h3cCBQoSAtmPvcGtsQueueSize=h3cCBQoSAtmPvcGtsQueueSize, h3cCBQoSIfQueueRunInfoEntry=h3cCBQoSIfQueueRunInfoEntry, h3cCBQoSFrPvcGtsDelayedBytes=h3cCBQoSFrPvcGtsDelayedBytes, h3cCBQoSWredRunInfoEntry=h3cCBQoSWredRunInfoEntry, h3cCBQoSIntApplyObjectIfIndex=h3cCBQoSIntApplyObjectIfIndex, h3cCBQoSCarYellowPackets=h3cCBQoSCarYellowPackets, h3cCBQoSNestPolicyClassIndex=h3cCBQoSNestPolicyClassIndex, h3cCBQoSRemarkRunInfoEntry=h3cCBQoSRemarkRunInfoEntry, h3cCBQoSAtmPvcCbqBeMaxActiveQueueNum=h3cCBQoSAtmPvcCbqBeMaxActiveQueueNum, h3cCBQoSSamplingNum=h3cCBQoSSamplingNum, h3cCBQoSIfWredRandomDiscardedPackets=h3cCBQoSIfWredRandomDiscardedPackets, h3cCBQoSMirrorIfIndex=h3cCBQoSMirrorIfIndex, h3cCBQoSCarYellowRemarkValue=h3cCBQoSCarYellowRemarkValue, h3cCBQoSAtmPvcClassMatchRunInfoEntry=h3cCBQoSAtmPvcClassMatchRunInfoEntry, h3cCBQoSIfRemarkRunInfoTable=h3cCBQoSIfRemarkRunInfoTable, h3cCBQoSFrClassApplyPolicyName=h3cCBQoSFrClassApplyPolicyName, h3cCBQoSSamplingRowStatus=h3cCBQoSSamplingRowStatus, h3cCBQoSPvcApplyObjectPvcID=h3cCBQoSPvcApplyObjectPvcID, h3cCBQoSIfCbqRunInfoTable=h3cCBQoSIfCbqRunInfoTable, h3cCBQoSFrPvcQueueEnqueuedBytes=h3cCBQoSFrPvcQueueEnqueuedBytes, h3cCBQoSAtmPvcGtsRunInfoEntry=h3cCBQoSAtmPvcGtsRunInfoEntry, h3cCBQoSClassBehaviorStatus=h3cCBQoSClassBehaviorStatus, h3cCBQoSFrPvcQueueMatchedPackets=h3cCBQoSFrPvcQueueMatchedPackets, h3cCBQoSGlobalApplyEntry=h3cCBQoSGlobalApplyEntry, h3cCBQoSIfCarGreenBytes=h3cCBQoSIfCarGreenBytes, h3cCBQoSClassifierIndexNext=h3cCBQoSClassifierIndexNext, h3cCBQoSBehaviorObjects=h3cCBQoSBehaviorObjects, h3cCBQoSBehaviorRowStatus=h3cCBQoSBehaviorRowStatus, h3cCBQoSVlanClassMatchRunInfoTable=h3cCBQoSVlanClassMatchRunInfoTable, h3cCBQoSCarCfgInfoTable=h3cCBQoSCarCfgInfoTable, h3cCBQoSQueueBandwidthValue=h3cCBQoSQueueBandwidthValue, h3cCBQoSPolicyCfgInfoTable=h3cCBQoSPolicyCfgInfoTable, h3cCBQoSAtmPvcWredTailDiscardedPackets=h3cCBQoSAtmPvcWredTailDiscardedPackets, h3cCBQoSFrClassApplyPolicyRowStatus=h3cCBQoSFrClassApplyPolicyRowStatus, h3cCBQoSFrPvcGtsRunInfoEntry=h3cCBQoSFrPvcGtsRunInfoEntry, h3cCBQoSMatchRuleIfNot=h3cCBQoSMatchRuleIfNot, h3cCBQoSRedirectIfIndex=h3cCBQoSRedirectIfIndex, h3cCBQoSIfCarRedBytes=h3cCBQoSIfCarRedBytes, h3cCBQoSFrPvcCbqRunInfoTable=h3cCBQoSFrPvcCbqRunInfoTable, h3cCBQoSGlobalApplyTable=h3cCBQoSGlobalApplyTable, h3cCBQoSIfApplyPolicyRowStatus=h3cCBQoSIfApplyPolicyRowStatus, h3cCBQoSStaticsObjects=h3cCBQoSStaticsObjects, h3cCBQoSFrPvcCbqAfQueueSize=h3cCBQoSFrPvcCbqAfQueueSize, h3cCBQoSVlanApplyObjectEntry=h3cCBQoSVlanApplyObjectEntry, h3cCBQoSIfQueueMatchedPackets=h3cCBQoSIfQueueMatchedPackets, h3cCBQoSAtmPvcCbqDiscard=h3cCBQoSAtmPvcCbqDiscard, h3cCBQoSPriorityMapGroupIndex=h3cCBQoSPriorityMapGroupIndex, h3cCBQos2=h3cCBQos2, h3cCBQoSSamplingCfgInfoTable=h3cCBQoSSamplingCfgInfoTable, h3cCBQoSAtmPvcClassMatchRunInfoTable=h3cCBQoSAtmPvcClassMatchRunInfoTable, h3cCBQoSFrPvcGtsDiscardedPackets=h3cCBQoSFrPvcGtsDiscardedPackets, h3cCBQoSGtsCbs=h3cCBQoSGtsCbs, h3cCBQoSAtmPvcWredRunInfoTable=h3cCBQoSAtmPvcWredRunInfoTable, h3cCBQoSCarRedAction=h3cCBQoSCarRedAction, h3cCBQoSGtsQueueSize=h3cCBQoSGtsQueueSize, h3cCBQoSFrPvcClassMatchRunInfoEntry=h3cCBQoSFrPvcClassMatchRunInfoEntry, h3cCBQoSGtsRunInfoEntry=h3cCBQoSGtsRunInfoEntry, h3cCBQoSPolicyRouteIpAddrType=h3cCBQoSPolicyRouteIpAddrType, h3cCBQoSIfCbqBeQueueSize=h3cCBQoSIfCbqBeQueueSize, h3cCBQoSFrPvcCarExceedBytes=h3cCBQoSFrPvcCarExceedBytes, h3cCBQoSNatCfgInfoTable=h3cCBQoSNatCfgInfoTable, h3cCBQoSNestCfgInfoEntry=h3cCBQoSNestCfgInfoEntry, h3cCBQoSRemarkedPackets=h3cCBQoSRemarkedPackets, h3cCBQoSFrPvcQueueRunInfoTable=h3cCBQoSFrPvcQueueRunInfoTable, MatchRuleType=MatchRuleType, h3cCBQoSQueueQueueNumber=h3cCBQoSQueueQueueNumber, h3cCBQoSRedirectRowStatus=h3cCBQoSRedirectRowStatus, h3cCBQoSMatchRuleIntValue2=h3cCBQoSMatchRuleIntValue2, h3cCBQoSPriorityMapAuto=h3cCBQoSPriorityMapAuto, h3cCBQoSIfCarYellowBytes=h3cCBQoSIfCarYellowBytes, h3cCBQoSIfGtsPassedPackets=h3cCBQoSIfGtsPassedPackets, h3cCBQoSNestPolicyRowStatus=h3cCBQoSNestPolicyRowStatus, h3cCBQoSPolicyRouteCfgInfoTable=h3cCBQoSPolicyRouteCfgInfoTable, h3cCBQoSIfQueueEnqueuedPackets=h3cCBQoSIfQueueEnqueuedPackets, h3cCBQoSIntApplyObjectEntry=h3cCBQoSIntApplyObjectEntry, h3cCBQoSRemarkRunInfoTable=h3cCBQoSRemarkRunInfoTable, h3cCBQoSAtmPvcApplyPolicyTable=h3cCBQoSAtmPvcApplyPolicyTable, h3cCBQoSIntApplyObjectTable=h3cCBQoSIntApplyObjectTable, h3cCBQoSFrPvcQueueDiscardedBytes=h3cCBQoSFrPvcQueueDiscardedBytes, h3cCBQoSIfCbqAfAllocatedQueueNum=h3cCBQoSIfCbqAfAllocatedQueueNum, h3cCBQoSAtmPvcApplyPolicyVPI=h3cCBQoSAtmPvcApplyPolicyVPI, h3cCBQoSFrPvcApplyPolicyIfIndex=h3cCBQoSFrPvcApplyPolicyIfIndex, h3cCBQoSAtmPvcGtsPassedPackets=h3cCBQoSAtmPvcGtsPassedPackets, h3cCBQoSVlanApplyPriority=h3cCBQoSVlanApplyPriority, h3cCBQoSPolicyRouteCfgInfoEntry=h3cCBQoSPolicyRouteCfgInfoEntry, h3cCBQoSFirewallRowStatus=h3cCBQoSFirewallRowStatus, h3cCBQoSIfQueueRunInfoTable=h3cCBQoSIfQueueRunInfoTable, h3cCBQoSClassMatchedBytes=h3cCBQoSClassMatchedBytes, h3cCBQoSCarYellowBytes=h3cCBQoSCarYellowBytes, h3cCBQoSIfApplyPolicyEnableDynamic=h3cCBQoSIfApplyPolicyEnableDynamic, h3cCBQoSVlanApplyPolicyDirection=h3cCBQoSVlanApplyPolicyDirection, h3cCBQoSIfGtsDelayedPackets=h3cCBQoSIfGtsDelayedPackets, h3cCBQoSQueueBandwidthUnit=h3cCBQoSQueueBandwidthUnit, h3cCBQoSApplyPolicyStaticsObjects=h3cCBQoSApplyPolicyStaticsObjects, h3cCBQoSGtsPassedBytes=h3cCBQoSGtsPassedBytes, h3cCBQoSAccountCfgInfoTable=h3cCBQoSAccountCfgInfoTable, h3cCBQoSWredRandomDiscardedPackets=h3cCBQoSWredRandomDiscardedPackets, h3cCBQoSPolicyClassCfgInfoEntry=h3cCBQoSPolicyClassCfgInfoEntry, h3cCBQoSIfCbqBeActiveQueueNum=h3cCBQoSIfCbqBeActiveQueueNum, h3cCBQoSVlanAccountingRunInfoEntry=h3cCBQoSVlanAccountingRunInfoEntry, h3cCBQoSCbqAfAllocatedQueueNum=h3cCBQoSCbqAfAllocatedQueueNum)
mibBuilder.exportSymbols("A3COM-HUAWEI-CBQOS2-MIB", h3cCBQoSAtmPvcApplyPolicyIfIndex=h3cCBQoSAtmPvcApplyPolicyIfIndex, h3cCBQoSAtmPvcAccountingPackets=h3cCBQoSAtmPvcAccountingPackets, h3cCBQoSApplyObjectDirection=h3cCBQoSApplyObjectDirection, h3cCBQoSFrPvcRemarkedPackets=h3cCBQoSFrPvcRemarkedPackets, h3cCBQoSMatchIpAddressType=h3cCBQoSMatchIpAddressType, h3cCBQoSNestPolicyCfgInfoTable=h3cCBQoSNestPolicyCfgInfoTable, h3cCBQoSClassFlowStatInterval=h3cCBQoSClassFlowStatInterval, h3cCBQoSWredRunInfoTable=h3cCBQoSWredRunInfoTable, h3cCBQoSFirewallCfgInfoTable=h3cCBQoSFirewallCfgInfoTable, h3cCBQoSMatchRuleIntValue1=h3cCBQoSMatchRuleIntValue1, h3cCBQoSVlanAccountingPackets=h3cCBQoSVlanAccountingPackets, h3cCBQoSAtmPvcCarRunInfoTable=h3cCBQoSAtmPvcCarRunInfoTable, h3cCBQoSCbqBeActiveQueueNum=h3cCBQoSCbqBeActiveQueueNum, h3cCBQoSAtmPvcClassMatchBytes=h3cCBQoSAtmPvcClassMatchBytes, h3cCBQoSGtsEbs=h3cCBQoSGtsEbs, h3cCBQoSCarRunInfoEntry=h3cCBQoSCarRunInfoEntry, h3cCBQoSCarRedBytes=h3cCBQoSCarRedBytes, h3cCBQoSQueueLength=h3cCBQoSQueueLength, h3cCBQoSGtsCfgInfoTable=h3cCBQoSGtsCfgInfoTable, h3cCBQoSFrPvcRemarkRunInfoEntry=h3cCBQoSFrPvcRemarkRunInfoEntry, h3cCBQoSRemarkCfgInfoTable=h3cCBQoSRemarkCfgInfoTable, h3cCBQoSAtmPvcQueueDiscardedBytes=h3cCBQoSAtmPvcQueueDiscardedBytes, h3cCBQoSQueueCfgInfoTable=h3cCBQoSQueueCfgInfoTable, h3cCBQoSCarGreenAction=h3cCBQoSCarGreenAction, h3cCBQoSAtmPvcCbqBeTotalQueueNum=h3cCBQoSAtmPvcCbqBeTotalQueueNum, h3cCBQoSAtmPvcApplyPolicyEntry=h3cCBQoSAtmPvcApplyPolicyEntry, CarAction=CarAction, h3cCBQoSPriorityMapExportType=h3cCBQoSPriorityMapExportType, h3cCBQoSWredClassHighLimit=h3cCBQoSWredClassHighLimit, h3cCBQoSNatBackupNumber=h3cCBQoSNatBackupNumber, h3cCBQoSNestCustomerVlanID=h3cCBQoSNestCustomerVlanID, h3cCBQoSIntApplyObjectIndex=h3cCBQoSIntApplyObjectIndex, h3cCBQoSApplyPolicyObjects=h3cCBQoSApplyPolicyObjects, h3cCBQoSPolicyClassCfgInfoTable=h3cCBQoSPolicyClassCfgInfoTable, h3cCBQoSPriorityMapImportType=h3cCBQoSPriorityMapImportType, h3cCBQoSCbqRunInfoTable=h3cCBQoSCbqRunInfoTable, h3cCBQoSPriorityMapRowStatus=h3cCBQoSPriorityMapRowStatus, h3cCBQoSIfGtsPassedBytes=h3cCBQoSIfGtsPassedBytes, h3cCBQoSPolicyType=h3cCBQoSPolicyType, h3cCBQoSAccountCfgInfoEntry=h3cCBQoSAccountCfgInfoEntry, h3cCBQoSNestPolicyApplyObjectEntry=h3cCBQoSNestPolicyApplyObjectEntry, h3cCBQoSApplyObjectType=h3cCBQoSApplyObjectType, h3cCBQoSPolicyClassCfgOrder=h3cCBQoSPolicyClassCfgOrder, h3cCBQoSGlobalApplyName=h3cCBQoSGlobalApplyName, h3cCBQoSRedirectIpAddress2=h3cCBQoSRedirectIpAddress2, h3cCBQoSClassFwdPktbps=h3cCBQoSClassFwdPktbps, WredType=WredType, h3cCBQoSFrPvcWredRandomDiscardedPackets=h3cCBQoSFrPvcWredRandomDiscardedPackets, h3cCBQoSWredTailDiscardedPackets=h3cCBQoSWredTailDiscardedPackets, h3cCBQoSAtmPvcCbqBeQueueSize=h3cCBQoSAtmPvcCbqBeQueueSize, h3cCBQoSFrPvcCbqBeMaxActiveQueueNum=h3cCBQoSFrPvcCbqBeMaxActiveQueueNum, h3cCBQoSAtmPvcQueueRunInfoEntry=h3cCBQoSAtmPvcQueueRunInfoEntry, h3cCBQoSGlobalApplyDirection=h3cCBQoSGlobalApplyDirection, h3cCBQoSAtmPvcQueueEnqueuedBytes=h3cCBQoSAtmPvcQueueEnqueuedBytes, h3cCBQoSFrPvcCbqBeQueueSize=h3cCBQoSFrPvcCbqBeQueueSize, h3cCBQoSFrPvcCarRunInfoTable=h3cCBQoSFrPvcCarRunInfoTable, h3cCBQoSIfRemarkedPackets=h3cCBQoSIfRemarkedPackets, h3cCBQoSWredClassDiscardProb=h3cCBQoSWredClassDiscardProb, h3cCBQoSBehaviorName=h3cCBQoSBehaviorName, h3cCBQoSBehaviorCfgInfoEntry=h3cCBQoSBehaviorCfgInfoEntry, h3cCBQoSAtmPvcClassMatchPackets=h3cCBQoSAtmPvcClassMatchPackets, h3cCBQoSQueueRunInfoTable=h3cCBQoSQueueRunInfoTable, h3cCBQoSBehaviorType=h3cCBQoSBehaviorType, h3cCBQoSFirewallAction=h3cCBQoSFirewallAction, h3cCBQoSIfClassMatchedBytes=h3cCBQoSIfClassMatchedBytes, h3cCBQoSPolicyName=h3cCBQoSPolicyName, h3cCBQoSVlanApplyObjectTable=h3cCBQoSVlanApplyObjectTable, h3cCBQoSFrPvcGtsQueueSize=h3cCBQoSFrPvcGtsQueueSize, h3cCBQoSVlanApplyPolicyVlanid=h3cCBQoSVlanApplyPolicyVlanid, h3cCBQoSIfGtsRunInfoTable=h3cCBQoSIfGtsRunInfoTable, h3cCBQoSClassMatchRunInfoTable=h3cCBQoSClassMatchRunInfoTable, h3cCBQoSWredCfgInfoEntry=h3cCBQoSWredCfgInfoEntry, h3cCBQoSAtmPvcCbqRunInfoEntry=h3cCBQoSAtmPvcCbqRunInfoEntry, h3cCBQoSAtmPvcApplyPolicyName=h3cCBQoSAtmPvcApplyPolicyName, h3cCBQoSRedirectIpv6Interface2=h3cCBQoSRedirectIpv6Interface2, h3cCBQoSAtmPvcStaticsObjects=h3cCBQoSAtmPvcStaticsObjects, h3cCBQoSCbqBeTotalQueueNum=h3cCBQoSCbqBeTotalQueueNum, h3cCBQoSClassifierName=h3cCBQoSClassifierName, h3cCBQoSCarCbs=h3cCBQoSCarCbs, h3cCBQoSFrPvcCarRunInfoEntry=h3cCBQoSFrPvcCarRunInfoEntry, h3cCBQoSAtmPvcQueueMatchedPackets=h3cCBQoSAtmPvcQueueMatchedPackets, h3cCBQoSMatchRuleRowStatus=h3cCBQoSMatchRuleRowStatus, h3cCBQoSMirrorVlanID=h3cCBQoSMirrorVlanID, h3cCBQoSGtsDiscardedPackets=h3cCBQoSGtsDiscardedPackets, h3cCBQoSRedirectCfgInfoTable=h3cCBQoSRedirectCfgInfoTable, h3cCBQoSFrPvcAccountingRunInfoEntry=h3cCBQoSFrPvcAccountingRunInfoEntry, h3cCBQoSRemarkType=h3cCBQoSRemarkType, h3cCBQoSAtmPvcAccountingRunInfoEntry=h3cCBQoSAtmPvcAccountingRunInfoEntry, h3cCBQoSPolicyRouteNexthop=h3cCBQoSPolicyRouteNexthop, h3cCBQoSNatCfgInfoEntry=h3cCBQoSNatCfgInfoEntry, h3cCBQoSGtsRowStatus=h3cCBQoSGtsRowStatus, ApplyObjectType=ApplyObjectType, h3cCBQosClassifierMatchRuleNextIndex=h3cCBQosClassifierMatchRuleNextIndex, h3cCBQoSFrClassApplyPolicyFrClassName=h3cCBQoSFrClassApplyPolicyFrClassName, h3cCBQoSPolicyClassIndex=h3cCBQoSPolicyClassIndex, h3cCBQoSAtmPvcAccountingBytes=h3cCBQoSAtmPvcAccountingBytes, DirectionType=DirectionType, h3cCBQoSIfApplyPolicyIfIndex=h3cCBQoSIfApplyPolicyIfIndex, RemarkType=RemarkType, h3cCBQoSPvcApplyObjectEntry=h3cCBQoSPvcApplyObjectEntry, h3cCBQoSIfCbqQueueSize=h3cCBQoSIfCbqQueueSize, h3cCBQoSPolicyClassPrecedence=h3cCBQoSPolicyClassPrecedence, h3cCBQoSPriorityMapGroupName=h3cCBQoSPriorityMapGroupName, h3cCBQoSClassMatchedPackets=h3cCBQoSClassMatchedPackets, h3cCBQoSFrPvcRemarkRunInfoTable=h3cCBQoSFrPvcRemarkRunInfoTable, h3cCBQoSIfCbqDiscard=h3cCBQoSIfCbqDiscard, h3cCBQoSRemarkValue=h3cCBQoSRemarkValue, h3cCBQoSCbqBeMaxActiveQueueNum=h3cCBQoSCbqBeMaxActiveQueueNum, h3cCBQoSGtsQueueLength=h3cCBQoSGtsQueueLength, h3cCBQoSMatchRuleType=h3cCBQoSMatchRuleType, h3cCBQoSFrPvcCbqEfQueueSize=h3cCBQoSFrPvcCbqEfQueueSize, h3cCBQoSFrPvcGtsDiscardedBytes=h3cCBQoSFrPvcGtsDiscardedBytes, h3cCBQoSAtmPvcQueueDiscardedPackets=h3cCBQoSAtmPvcQueueDiscardedPackets, h3cCBQoSClassifierIndex=h3cCBQoSClassifierIndex, h3cCBQoSQueueMatchedPackets=h3cCBQoSQueueMatchedPackets, h3cCBQoSAtmPvcRemarkRunInfoEntry=h3cCBQoSAtmPvcRemarkRunInfoEntry, h3cCBQoSObjects=h3cCBQoSObjects, h3cCBQoSQueueCfgInfoEntry=h3cCBQoSQueueCfgInfoEntry, h3cCBQoSNestPolicyName=h3cCBQoSNestPolicyName, h3cCBQoSQueueEnqueuedPackets=h3cCBQoSQueueEnqueuedPackets, h3cCBQoSCarGreenRemarkValue=h3cCBQoSCarGreenRemarkValue, PYSNMP_MODULE_ID=h3cCBQos2, h3cCBQoSAtmPvcGtsDelayedPackets=h3cCBQoSAtmPvcGtsDelayedPackets, h3cCBQoSPolicyClassNextIndex=h3cCBQoSPolicyClassNextIndex, h3cCBQoSCbqDiscard=h3cCBQoSCbqDiscard, h3cCBQoSApplyObjectIndex=h3cCBQoSApplyObjectIndex, h3cCBQoSQueueRunInfoEntry=h3cCBQoSQueueRunInfoEntry, h3cCBQoSCbqBeQueueSize=h3cCBQoSCbqBeQueueSize, h3cCBQoSCarEbs=h3cCBQoSCarEbs, h3cCBQoSApplyObjectMainSite=h3cCBQoSApplyObjectMainSite, h3cCBQoSFrPvcQueueDiscardedPackets=h3cCBQoSFrPvcQueueDiscardedPackets, h3cCBQoSPolicyIndexNext=h3cCBQoSPolicyIndexNext, h3cCBQoSIfGtsDelayedBytes=h3cCBQoSIfGtsDelayedBytes, h3cCBQoSClassifierCfgInfoTable=h3cCBQoSClassifierCfgInfoTable, h3cCBQoSVlanPolicyChanged=h3cCBQoSVlanPolicyChanged, h3cCBQoSIfQueueMatchedBytes=h3cCBQoSIfQueueMatchedBytes, h3cCBQoSAtmPvcApplyPolicyVCI=h3cCBQoSAtmPvcApplyPolicyVCI, h3cCBQoSAtmPvcCarConformPackets=h3cCBQoSAtmPvcCarConformPackets, h3cCBQoSNestRowStatus=h3cCBQoSNestRowStatus, h3cCBQoSAtmPvcCbqQueueSize=h3cCBQoSAtmPvcCbqQueueSize, h3cCBQoSAtmPvcGtsDiscardedBytes=h3cCBQoSAtmPvcGtsDiscardedBytes, h3cCBQoSCarCir=h3cCBQoSCarCir, h3cCBQoSIfCarYellowPackets=h3cCBQoSIfCarYellowPackets, h3cCBQoSClassifierRuleCount=h3cCBQoSClassifierRuleCount, h3cCBQoSAtmPvcAccountingRunInfoTable=h3cCBQoSAtmPvcAccountingRunInfoTable, h3cCBQoSCarRunInfoTable=h3cCBQoSCarRunInfoTable, h3cCBQoSIfGtsDiscardedPackets=h3cCBQoSIfGtsDiscardedPackets, h3cCBQoSAtmPvcQueueEnqueuedPackets=h3cCBQoSAtmPvcQueueEnqueuedPackets, h3cCBQoSIfClassMatchRunInfoEntry=h3cCBQoSIfClassMatchRunInfoEntry, h3cCBQoSAtmPvcGtsPassedBytes=h3cCBQoSAtmPvcGtsPassedBytes, h3cCBQoSClassifierCfgInfoEntry=h3cCBQoSClassifierCfgInfoEntry, h3cCBQoSVlanApplyPolicyName=h3cCBQoSVlanApplyPolicyName, h3cCBQoSApplyObjectSubChannel=h3cCBQoSApplyObjectSubChannel, h3cCBQoSFrPvcCbqRunInfoEntry=h3cCBQoSFrPvcCbqRunInfoEntry, h3cCBQoSAtmPvcCbqRunInfoTable=h3cCBQoSAtmPvcCbqRunInfoTable, h3cCBQoSAtmPvcCarExceedBytes=h3cCBQoSAtmPvcCarExceedBytes, h3cCBQoSNestCustomerDot1pValue=h3cCBQoSNestCustomerDot1pValue, h3cCBQoSFrPvcApplyPolicyDlciNum=h3cCBQoSFrPvcApplyPolicyDlciNum, h3cCBQoSGtsDiscardedBytes=h3cCBQoSGtsDiscardedBytes, h3cCBQoSQueueEnqueuedBytes=h3cCBQoSQueueEnqueuedBytes, h3cCBQoSMirrorRowStatus=h3cCBQoSMirrorRowStatus, h3cCBQoSAtmPvcCbqAfAllocatedQueueNum=h3cCBQoSAtmPvcCbqAfAllocatedQueueNum, h3cCBQoSMatchRuleIndex=h3cCBQoSMatchRuleIndex, h3cCBQoSNatMainNumber=h3cCBQoSNatMainNumber, h3cCBQoSIfQueueEnqueuedBytes=h3cCBQoSIfQueueEnqueuedBytes, h3cCBQoSPolicyRouteBackup=h3cCBQoSPolicyRouteBackup, h3cCBQoSPvcApplyObjectIndex=h3cCBQoSPvcApplyObjectIndex, h3cCBQoSIfCarGreenPackets=h3cCBQoSIfCarGreenPackets, h3cCBQoSQueueMatchedBytes=h3cCBQoSQueueMatchedBytes, h3cCBQoSAccountRowStatus=h3cCBQoSAccountRowStatus, h3cCBQoSFrClassApplyPolicyDirection=h3cCBQoSFrClassApplyPolicyDirection, h3cCBQoSIfWredTailDiscardedPackets=h3cCBQoSIfWredTailDiscardedPackets, h3cCBQoSMatchRuleCfgInfoTable=h3cCBQoSMatchRuleCfgInfoTable, h3cCBQoSPvcApplyObjectIfIndex=h3cCBQoSPvcApplyObjectIfIndex, h3cCBQoSGtsCir=h3cCBQoSGtsCir, h3cCBQoSFrPvcCbqAfAllocatedQueueNum=h3cCBQoSFrPvcCbqAfAllocatedQueueNum, h3cCBQoSRemarkCfgInfoEntry=h3cCBQoSRemarkCfgInfoEntry, h3cCBQoSAtmPvcGtsDiscardedPackets=h3cCBQoSAtmPvcGtsDiscardedPackets, h3cCBQoSCarPbs=h3cCBQoSCarPbs, h3cCBQoSPolicyClassClassifierName=h3cCBQoSPolicyClassClassifierName, h3cCBQoSPolicyObjects=h3cCBQoSPolicyObjects, h3cCBQoSAtmPvcApplyPolicyDirection=h3cCBQoSAtmPvcApplyPolicyDirection, h3cCBQoSIfCbqEfQueueSize=h3cCBQoSIfCbqEfQueueSize, h3cCBQoSCarRowStatus=h3cCBQoSCarRowStatus, h3cCBQoSQueueRowStatus=h3cCBQoSQueueRowStatus, h3cCBQoSFrPvcGtsRunInfoTable=h3cCBQoSFrPvcGtsRunInfoTable, h3cCBQoSAccounting=h3cCBQoSAccounting, h3cCBQoSQueueType=h3cCBQoSQueueType, h3cCBQoSAtmPvcCbqBeActiveQueueNum=h3cCBQoSAtmPvcCbqBeActiveQueueNum, h3cCBQoSVlanStaticsObjects=h3cCBQoSVlanStaticsObjects, h3cCBQoSFrPvcApplyPolicyTable=h3cCBQoSFrPvcApplyPolicyTable, h3cCBQoSFrPvcCarExceedPackets=h3cCBQoSFrPvcCarExceedPackets, h3cCBQoSPolicyRowStatus=h3cCBQoSPolicyRowStatus, h3cCBQoSFrPvcApplyPolicyName=h3cCBQoSFrPvcApplyPolicyName, h3cCBQoSSamplingCfgInfoEntry=h3cCBQoSSamplingCfgInfoEntry, h3cCBQoSPolicyConfigMode=h3cCBQoSPolicyConfigMode, h3cCBQoSRedirectIpAddressType=h3cCBQoSRedirectIpAddressType, h3cCBQoSQueueDiscardedPackets=h3cCBQoSQueueDiscardedPackets, h3cCBQoSAtmPvcClassAverageRate=h3cCBQoSAtmPvcClassAverageRate, h3cCBQoSAtmPvcWredRandomDiscardedPackets=h3cCBQoSAtmPvcWredRandomDiscardedPackets, h3cCBQoSVlanApplyObjectVlanID=h3cCBQoSVlanApplyObjectVlanID, h3cCBQoSIfClassMatchedPackets=h3cCBQoSIfClassMatchedPackets, h3cCBQoSAtmPvcCarExceedPackets=h3cCBQoSAtmPvcCarExceedPackets, h3cCBQoSFrPvcQueueEnqueuedPackets=h3cCBQoSFrPvcQueueEnqueuedPackets, h3cCBQoSMatchIpAddress=h3cCBQoSMatchIpAddress, h3cCBQoSCbqAfQueueSize=h3cCBQoSCbqAfQueueSize, h3cCBQoSIfCarRedPackets=h3cCBQoSIfCarRedPackets, h3cCBQoSApplyObjectTable=h3cCBQoSApplyObjectTable, h3cCBQoSFrPvcClassMatchRunInfoTable=h3cCBQoSFrPvcClassMatchRunInfoTable, h3cCBQoSFrPvcCarConformPackets=h3cCBQoSFrPvcCarConformPackets, h3cCBQoSWredClassCfgInfoEntry=h3cCBQoSWredClassCfgInfoEntry, h3cCBQoSFrPvcClassMatchedPackets=h3cCBQoSFrPvcClassMatchedPackets, h3cCBQoSRedirectCfgInfoEntry=h3cCBQoSRedirectCfgInfoEntry, h3cCBQoSQueueCbsRatio=h3cCBQoSQueueCbsRatio, h3cCBQoSPriorityMapCfgInfoEntry=h3cCBQoSPriorityMapCfgInfoEntry, h3cCBQoSClassFwdPktpps=h3cCBQoSClassFwdPktpps, h3cCBQoSFrPvcQueueMatchedBytes=h3cCBQoSFrPvcQueueMatchedBytes, h3cCBQoSApplyingStatusObjects=h3cCBQoSApplyingStatusObjects, h3cCBQoSIfAccountingPackets=h3cCBQoSIfAccountingPackets)
