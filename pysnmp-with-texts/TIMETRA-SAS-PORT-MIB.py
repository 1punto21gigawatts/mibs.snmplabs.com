#
# PySNMP MIB module TIMETRA-SAS-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-SAS-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:22:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
pethPsePortIndex, pethPsePortPowerClassifications, pethPsePortEntry, pethPsePortDetectionStatus = mibBuilder.importSymbols("POWER-ETHERNET-MIB", "pethPsePortIndex", "pethPsePortPowerClassifications", "pethPsePortEntry", "pethPsePortDetectionStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, TimeTicks, MibIdentifier, ObjectIdentity, Integer32, Bits, NotificationType, iso, ModuleIdentity, Counter64, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Integer32", "Bits", "NotificationType", "iso", "ModuleIdentity", "Counter64", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TimeStamp, RowPointer, TimeInterval, DisplayString, MacAddress, RowStatus, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowPointer", "TimeInterval", "DisplayString", "MacAddress", "RowStatus", "TextualConvention", "TruthValue", "DateAndTime")
TmnxMDAChanType, tmnxHwNotification, tmnxHwObjs, TmnxAlarmState, TmnxPortAdminStatus, tmnxHwConformance, tmnxChassisIndex, tmnxChassisNotifyChassisId = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "TmnxMDAChanType", "tmnxHwNotification", "tmnxHwObjs", "TmnxAlarmState", "TmnxPortAdminStatus", "tmnxHwConformance", "tmnxChassisIndex", "tmnxChassisNotifyChassisId")
timetraSRMIBModules, = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
tmnxDS1Entry, tmnxPortPortID, tmnxPortEtherEntry, tmnxPortEntry, tmnxPortNotifyPortId, tmnxDS1PortEntry = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "tmnxDS1Entry", "tmnxPortPortID", "tmnxPortEtherEntry", "tmnxPortEntry", "tmnxPortNotifyPortId", "tmnxDS1PortEntry")
timetraSASObjs, timetraSASConfs, timetraSASNotifyPrefix, timetraSASModules = mibBuilder.importSymbols("TIMETRA-SAS-GLOBAL-MIB", "timetraSASObjs", "timetraSASConfs", "timetraSASNotifyPrefix", "timetraSASModules")
TmnxEncapVal, TmnxActionType, TNamedItemOrEmpty, TNetworkIngressMeterId, TmnxPortID, TQueueId, TmnxServId, TItemLongDescription, TPortSchedulerPIR, TItemDescription, ServObjDesc, TFCName, TmnxOperState, TNamedItem, TPortSchedulerCIR = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxEncapVal", "TmnxActionType", "TNamedItemOrEmpty", "TNetworkIngressMeterId", "TmnxPortID", "TQueueId", "TmnxServId", "TItemLongDescription", "TPortSchedulerPIR", "TItemDescription", "ServObjDesc", "TFCName", "TmnxOperState", "TNamedItem", "TPortSchedulerCIR")
tmnxSASPortMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 6, 2, 1, 1, 6))
tmnxSASPortMIBModule.setRevisions(('1908-01-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxSASPortMIBModule.setRevisionsDescriptions(('Rev 1.0 09 Jan 2008 00:00 This is the 1.0 release of the TIMETRA-SAS-GLOBAL-MIB.',))
if mibBuilder.loadTexts: tmnxSASPortMIBModule.setLastUpdated('0701010000Z')
if mibBuilder.loadTexts: tmnxSASPortMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: tmnxSASPortMIBModule.setContactInfo('Alcatel 7x50 Support Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: tmnxSASPortMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the hardware components of the Alcatel 7x50 device. Copyright 2003-2014 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel's proprietary intellectual property. Alcatel retains all title and ownership in the Specification, including any revisions. Alcatel grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxSASPortObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2))
tmnxSASPortNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 3))
tmnxSASPortStatsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 4))
tmnxSASPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2))
portShgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6), )
if mibBuilder.loadTexts: portShgInfoTable.setStatus('current')
if mibBuilder.loadTexts: portShgInfoTable.setDescription('A table that contains port split-horizon group information. ')
portShgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6, 1), ).setIndexNames((1, "TIMETRA-SAS-PORT-MIB", "portShgName"))
if mibBuilder.loadTexts: portShgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: portShgInfoEntry.setDescription('Split-horizon group information about a TLS service.')
portShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: portShgName.setStatus('current')
if mibBuilder.loadTexts: portShgName.setDescription('The value of the object portShgName specifies the name of the split-horizon group. ')
portShgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portShgRowStatus.setStatus('current')
if mibBuilder.loadTexts: portShgRowStatus.setDescription('The value of the object portShgRowStatus specifies the status of this row. The only values supported during a set operation are createAndGo(4) and destroy(6). To delete an entry from this table, there should be no port Bindings refering to it.')
portShgInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShgInstanceId.setStatus('current')
if mibBuilder.loadTexts: portShgInstanceId.setDescription('The value of the object portShgInstanceId indicates the instance identifier for the split horizon group.')
portShgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portShgDescription.setStatus('current')
if mibBuilder.loadTexts: portShgDescription.setDescription('The value of the object portShgDescription specifies generic information about this split-horizon group.')
portShgLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 6, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShgLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: portShgLastMgmtChange.setDescription('The value of the object portShgLastMgmtChange indicates the value of sysUpTime at the time of the most recent management-initiated change to this split-horizon group.')
sasTmnxPortExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2), )
if mibBuilder.loadTexts: sasTmnxPortExtnTable.setStatus('current')
if mibBuilder.loadTexts: sasTmnxPortExtnTable.setDescription('This table has additional information about the 7210 platforms')
sasTmnxPortExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1), )
tmnxPortEntry.registerAugmentions(("TIMETRA-SAS-PORT-MIB", "sasTmnxPortExtnEntry"))
sasTmnxPortExtnEntry.setIndexNames(*tmnxPortEntry.getIndexNames())
if mibBuilder.loadTexts: sasTmnxPortExtnEntry.setStatus('current')
if mibBuilder.loadTexts: sasTmnxPortExtnEntry.setDescription("Each row entry represents a port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Before an IOM tmnxMDAEntry can be deleted from the tmnxMDATable, its supported 'tmnxPortEntries' must be in the proper state for removal.")
tmnxPortUplinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortUplinkMode.setStatus('current')
if mibBuilder.loadTexts: tmnxPortUplinkMode.setDescription("If the tmnxPortUplinkMode is set to true when the tmnxPortMode is set to 'access(1)' and the port acts as an uplink. 'tmnxPortEncaptype' must also be configured 'qinqEncap' when using access port as uplink port.")
tmnxPortAccessEgressQoSPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAccessEgressQoSPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQoSPolicyId.setDescription('Qos Policy ID for Access Egress Port')
tmnxPortNetworkQoSPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortNetworkQoSPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetworkQoSPolicyId.setDescription('Port Network Policy ID ')
tmnxPortShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortShgName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortShgName.setDescription('Split horizon group to be attached to this port')
tmnxPortUseDei = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortUseDei.setStatus('current')
if mibBuilder.loadTexts: tmnxPortUseDei.setDescription('Enable/disable DEI based policing.')
tmnxPortOperGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortOperGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortOperGrpName.setDescription('System oper group to be attached to this port')
tmnxPortMonitorOperGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 2, 1, 7), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMonitorOperGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortMonitorOperGrpName.setDescription('System monitor oper group to be attached to this port')
tmnxSASPortNetIngressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3), )
if mibBuilder.loadTexts: tmnxSASPortNetIngressStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressStatsTable.setDescription('Defines the Alcatel SAS series network port ingress statistics table for providing, via SNMP, the capability of retrieving the traffic statistics for the physical Meters being used for the ports to forward the network ingress traffic.')
tmnxSASPortNetIngressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-SAS-PORT-MIB", "tmnxSASPortNetIngressMeterIndex"))
if mibBuilder.loadTexts: tmnxSASPortNetIngressStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressStatsEntry.setDescription('Defines an entry in tmnxSASPortNetIngressStatsTable. Entries are created and deleted by the system depending on the meter policy being used at the specific port.')
tmnxSASPortNetIngressMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3, 1, 1), TNetworkIngressMeterId())
if mibBuilder.loadTexts: tmnxSASPortNetIngressMeterIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressMeterIndex.setDescription("'tmnxSASPortNetIngressQueueIndex' serves as the tertiary index. When used in conjunction with tmnxChassisIndex and tmnxPortPortID, it uniquely identifies a network ingress meter for the specified port in the managed system.")
tmnxSASPortNetIngressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdInProfPkts.setDescription('tmnxSASPortNetIngressFwdInProfPkts indicates the number of conforming network ingress packets forwarded on this port using this meter.')
tmnxSASPortNetIngressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdOutProfPkts.setDescription('tmnxSASPortNetIngressFwdOutProfPkts indicates the number of exceeding network ingress packets forwarded on this port using this meter.')
tmnxSASPortNetIngressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdInProfOcts.setDescription('tmnxSASPortNetIngressFwdInProfOcts indicates the number of conforming network ingress octets forwarded on this port using this meter.')
tmnxSASPortNetIngressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortNetIngressFwdOutProfOcts.setDescription('tmnxSASPortNetIngressFwdOutProfOcts indicates the number of exceeding network ingress octets forwarded on this port using this meter.')
sasTmnxPortEtherExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4), )
if mibBuilder.loadTexts: sasTmnxPortEtherExtnTable.setStatus('current')
if mibBuilder.loadTexts: sasTmnxPortEtherExtnTable.setDescription('This table has additional information about the 7210 platforms')
sasTmnxPortEtherExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1), )
tmnxPortEtherEntry.registerAugmentions(("TIMETRA-SAS-PORT-MIB", "sasTmnxPortEtherExtnEntry"))
sasTmnxPortEtherExtnEntry.setIndexNames(*tmnxPortEtherEntry.getIndexNames())
if mibBuilder.loadTexts: sasTmnxPortEtherExtnEntry.setStatus('current')
if mibBuilder.loadTexts: sasTmnxPortEtherExtnEntry.setDescription("Each row entry represents an Ethernet port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Before an IOM 'cardEntry' can be deleted from the tmnxMDATable, its supported 'tmnxPortEntries' and 'tmnxPortEtherEntries' must be in the proper state for removal. The tmnxPortEtherEntry contains attributes that are unique to the Ethernet TmnxPortType.")
tmnxPortEtherEgressMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(32, 16384), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherEgressMaxBurst.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherEgressMaxBurst.setDescription('Controls the amount of burst the egress port can generate. Its configured in terms of Kilo bits.Its an optional parameter. And cannot be used without egress-rate being set.')
tmnxPortStatsQueue1PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue1PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue1PktsFwd.setDescription("If tmnxPortStatsQueue1PktsFwd is set to 'true', count the egress packets with forwarding class value '0'.")
tmnxPortStatsQueue2PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue2PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue2PktsFwd.setDescription("If tmnxPortStatsQueue2PktsFwd is set to 'true', count the egress packets with forwarding class value '1'.")
tmnxPortStatsQueue3PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue3PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue3PktsFwd.setDescription("If tmnxPortStatsQueue3PktsFwd is set to 'true', count the egress packets with forwarding class value '2'.")
tmnxPortStatsQueue4PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue4PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue4PktsFwd.setDescription("If tmnxPortStatsQueue4PktsFwd is set to 'true', count the egress packets with forwarding class value '3'.")
tmnxPortStatsQueue5PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue5PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue5PktsFwd.setDescription("If tmnxPortStatsQueue5PktsFwd is set to 'true', count the egress packets with forwarding class value '5'.")
tmnxPortStatsQueue6PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue6PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue6PktsFwd.setDescription("If tmnxPortStatsQueue6PktsFwd is set to 'true', count the egress packets with forwarding class value '6'.")
tmnxPortStatsQueue7PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue7PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue7PktsFwd.setDescription("If tmnxPortStatsQueue7PktsFwd is set to 'true', count the egress packets with forwarding class value '7'.")
tmnxPortStatsQueue8PktsFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortStatsQueue8PktsFwd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsQueue8PktsFwd.setDescription("If tmnxPortStatsQueue8PktsFwd is set to 'true', count the egress packets with forwarding class value '8'.")
tmnxPortEtherEgrSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fc-based", 1), ("sap-based", 2))).clone('fc-based')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherEgrSchedMode.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherEgrSchedMode.setDescription("tmnxPortEtherEgrSchedMode sets the SAP egress scheduler mode. In 'fc-based' mode the prority of all the egress queues across all the SAPs are considered to determine the next queue to schedule. In 'sap-based' mode the scheduler uses the priority of all the egress queues in a SAP to determine the next queue to schedule and uses round-robin scheduling mechanism to schedule each of the SAP")
tmnxPortEtherLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("none", 0), ("internal", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherLoopback.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherLoopback.setDescription('If tmnxPortEtherLoopback is set to internal, the ethernet port is set to loopback mode. none will clear the loopback')
tmnxPortEtherIpMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9000), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherIpMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherIpMTU.setDescription('tmnxPortEtherIpMTU is the IP MTU for interfaces using this port')
tmnxPortEtherClockConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("automatic", 1), ("manual-master", 2), ("manual-slave", 3))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherClockConfig.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherClockConfig.setDescription("When the value of tmnxPortEtherClockConfig is 'automatic' the Ethernet interface will automatically negotiate clock mastership along with other link parameters with the far end. Depending upon the capabilities of the two ends, one will be master the other will be slave for clocking. When the value of tmnxPortEtherClockConfig is 'manual-master', the Ethernet interface will negotiate other link parameters with the far end except clock mastership. It assumes clock mastership and want the other end to be slave. When the value is 'manual-slave' this ethernet interface chooses to be slave and wants the far end to assume clock mastership. For 10 baseT and 100 baseT ethernet interfaces, value of this variable should be 'none', as this will not be applicable for those interfaces.")
tmnxPortLoopbckServId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 14), TmnxServId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoopbckServId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoopbckServId.setDescription('Loopback Service Id')
tmnxPortLoopbckSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 15), TmnxPortID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoopbckSapPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoopbckSapPortId.setDescription('Loopback Sap Port Id')
tmnxPortLoopbckSapEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 16), TmnxEncapVal()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoopbckSapEncapVal.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoopbckSapEncapVal.setDescription('Loopback Sap Encapsulation')
tmnxPortLoopbckSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 17), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoopbckSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoopbckSrcMacAddr.setDescription('Loopback Source Mac Address')
tmnxPortLoopbckDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 18), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoopbckDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoopbckDstMacAddr.setDescription('Loopback Destination Mac Address')
tmnxPortAccEgrSapQosMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAccEgrSapQosMarking.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccEgrSapQosMarking.setDescription('Port Ethernet Access Egress Sap Qos Marking')
tmnxPortLldpTnlNrstBrdgeDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLldpTnlNrstBrdgeDstMac.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLldpTnlNrstBrdgeDstMac.setDescription("If tmnxPortLldpTnlNrstBrdgeDstMac is set to 'true' and admin status is disabled lldp pkts will be tunnelled")
tmnxPortEtherDe1OutProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDe1OutProfile.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDe1OutProfile.setDescription('The value of tmnxPortEtherDe1OutProfile if enabled will consider the value of the DEI(CFI) bit of the incoming packet , which if 1 will result in the packet being classified as out-profile and in-profile otherwise')
tmnxPortEtherNwAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100000000), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherNwAggRateLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherNwAggRateLimit.setDescription('The value of tmnxPortEtherNwAggRateLimit in kbps is used to cap network traffic on a hybrid port.')
tmnxPortEtherNwAggRateLimitCir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherNwAggRateLimitCir.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherNwAggRateLimitCir.setDescription('The value of tmnxPortEtherNwAggRateLimit in kbps is used to cap network traffic cir rate on a hybrid port.')
tmnxPortEtherNwAggRateLimitPir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 10000000), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherNwAggRateLimitPir.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherNwAggRateLimitPir.setDescription('The value of tmnxPortEtherNwAggRateLimit in kbps is used to cap network traffic cir rate on a hybrid port.')
tmnxPortEtherDcommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherDcommStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDcommStatus.setDescription('The value of tmnxPortEtherDcommStatus is true if this port is decommissioned')
tmnxPortEtherMulticastIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2-mc", 1), ("ip-mc", 2))).clone('l2-mc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherMulticastIngress.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherMulticastIngress.setDescription('Defines multicast ingress lookup type')
tmnxPortAccessEgressQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7), )
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsTable.setDescription('Defines the Alcatel SAS series access port egress statistics table for providing, via SNMP, the capability of retrieving the traffic statistics for the physical queues being used for the ports to forward the access egress traffic.')
tmnxPortAccessEgressQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsIndex"))
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsEntry.setDescription('Defines an entry in tmnxPortAccessEgressQueueStatsTable. Entries are created and deleted by the system depending on the queue policy being used at the specific port.')
tmnxPortAccessEgressQueueStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsIndex.setDescription("'tmnxPortAccessEgressQueueIndex' serves as the tertiary index. When used in conjunction with tmnxChassisIndex and tmnxPortPortID, it uniquely identifies a access egress queue for the specified port in the managed system.")
tmnxPortAccessEgressQueueStatsFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsFwdPkts.setDescription('tmnxPortAccessEgressQueueStatsFwdPkts indicates the number of forwarded access egress packets forwarded on this port using this queue.')
tmnxPortAccessEgressQueueStatsFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsFwdOcts.setDescription('tmnxPortAccessEgressQueueStatsFwdOcts indicates the number of forward access egress octets forwarded on this port using this queue.')
tmnxPortAccessEgressQueueStatsDroPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsDroPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsDroPkts.setDescription('tmnxPortAccessEgressQueueStatsDroPkts indicates the number of dropped access egress packets on this port using this queue.')
tmnxPortAccessEgressQueueStatsDroOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsDroOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAccessEgressQueueStatsDroOcts.setDescription('tmnxPortAccessEgressQueueStatsDroOcts indicates the number of dropped network egress octets on this port using this queue.')
tmnxPortNetEgressQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8), )
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsTable.setDescription('Defines the Alcatel SAS series network port egress statistics table for providing, via SNMP, the capability of retrieving the traffic statistics for the physical queues being used for the ports to forward the network egress traffic.')
tmnxPortNetEgressQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsIndex"))
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsEntry.setDescription('Defines an entry in tmnxPortNetEgressQueueStatsTable. Entries are created and deleted by the system depending on the queue policy being used at the specific port.')
tmnxPortNetEgressQueueStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsIndex.setDescription('tmnxPortNetEgressQueueStatsIndex serves as the tertiary index. When used in conjunction with tmnxChassisIndex and tmnxPortPortID, it uniquely identifies a network egress queue for the specified port in the managed system.')
tmnxPortNetEgressQueueStatsFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsFwdPkts.setDescription('tmnxPortNetEgressQueueStatsFwdPkts indicates the number of forwarded network egress packets on this port using this queue.')
tmnxPortNetEgressQueueStatsFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsFwdOcts.setDescription('tmnxPortNetEgressQueueStatsFwdOcts indicates the number of forwarded network egress octets on this port using this queue.')
tmnxPortNetEgressQueueStatsDroPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsDroPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsDroPkts.setDescription('tmnxPortNetEgressQueueStatsDroPkts indicates the number of dropped network egress packets on this port using this queue.')
tmnxPortNetEgressQueueStatsDroOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsDroOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsDroOcts.setDescription('tmnxPortNetEgressQueueStatsDroOcts indicates the number of dropped network egress octets on this port using this queue.')
tmnxPortNetEgressQueueStatsInProfDroPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsInProfDroPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsInProfDroPkts.setDescription('tmnxPortNetEgressQueueStatsInProfDroPkts indicates the number of dropped network egress octets on this port using this in-profile queue.')
tmnxPortNetEgressQueueStatsInProfDroOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsInProfDroOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsInProfDroOcts.setDescription('tmnxPortNetEgressQueueStatsInProfDroOcts indicates the number of dropped network egress octets on this port using this in-profile queue.')
tmnxPortNetEgressQueueStatsOutProfDroPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsOutProfDroPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsOutProfDroPkts.setDescription('tmnxPortNetEgressQueueStatsOutProfDroPkts indicates the number of dropped network egress octets on this port using this out-profile queue.')
tmnxPortNetEgressQueueStatsOutProfDroOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsOutProfDroOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueStatsOutProfDroOcts.setDescription('tmnxPortNetEgressQueueStatsOutProfDroOcts indicates the number of dropped network egress octets on this port using this out-profile queue.')
aluExtTmnxDS1PortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 9), )
if mibBuilder.loadTexts: aluExtTmnxDS1PortTable.setStatus('current')
if mibBuilder.loadTexts: aluExtTmnxDS1PortTable.setDescription('The aluExtTmnxDS1PortTable has an entry for a DS1 physical port.')
aluExtTmnxDS1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 9, 1), )
tmnxDS1PortEntry.registerAugmentions(("TIMETRA-SAS-PORT-MIB", "aluExtTmnxDS1PortEntry"))
aluExtTmnxDS1PortEntry.setIndexNames(*tmnxDS1PortEntry.getIndexNames())
if mibBuilder.loadTexts: aluExtTmnxDS1PortEntry.setStatus('current')
if mibBuilder.loadTexts: aluExtTmnxDS1PortEntry.setDescription('Each row entry represents extended functionality of a physical DS1 port on Alcatel-Lucent 7210 SAS devices. Entries cannot be created or deleted via SNMP SET operations. Entries in this table will be created or deleted automatically when entries in the tmnxDS1PortTable are created or deleted.')
aluExtDS1PortLineImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("impedance75Ohms", 1), ("impedance100Ohms", 2), ("impedance120Ohms", 3))).clone('impedance100Ohms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aluExtDS1PortLineImpedance.setStatus('current')
if mibBuilder.loadTexts: aluExtDS1PortLineImpedance.setDescription('The value of aluExtDS1PortLineImpedance indicates the current line impedance set on the physical T1/E1 port. T1 Ports may only be configured to have an impedance of 100 Ohms. E1 Ports may be configured to have an impledance of either 75 or 120 Ohms where the default impedance is 120 Ohms.')
aluPortAcrClkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10), )
if mibBuilder.loadTexts: aluPortAcrClkStatsTable.setStatus('current')
if mibBuilder.loadTexts: aluPortAcrClkStatsTable.setDescription('Defines the Alcatel-Lucent SAR series port adaptive clock recovery (ACR) statistics table for providing, via SNMP, the capability of retrieving statistical information relating to clock that is derived from the ACR CPIPE PW.')
aluPortAcrClkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: aluPortAcrClkStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aluPortAcrClkStatsEntry.setDescription('Defines an entry in aluPortAcrClkStatsTable. Entries are created and deleted by the system depending port configuration.')
aluLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: aluLastUpdateTime.setDescription('The last time the ACR statistics were updated')
aluTotalMinutesIn24Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluTotalMinutesIn24Hour.setStatus('current')
if mibBuilder.loadTexts: aluTotalMinutesIn24Hour.setDescription('The number of minutes in alu24HourFreqOffsetMeanPpb and alu24HourFreqOffsetStdDevPpb')
aluCurrent24HourFreqOffsetMeanPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent24HourFreqOffsetMeanPpb.setStatus('current')
if mibBuilder.loadTexts: aluCurrent24HourFreqOffsetMeanPpb.setDescription('aluCurrent24HourFreqOffsetMeanPpb indicates the mean frequency offset from the local oscillator clock in parts per billion for up to the last 24 hour.')
aluCurrent24HourFreqOffsetStdDevPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent24HourFreqOffsetStdDevPpb.setStatus('current')
if mibBuilder.loadTexts: aluCurrent24HourFreqOffsetStdDevPpb.setDescription('aluCurrent24HourFreqOffsetStdDevPpb indicates the standard deviation of the frequency offset from the local oscillator clock in parts per billion for up to the last 24 hour.')
aluMaxShortIntervalMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluMaxShortIntervalMinutes.setStatus('current')
if mibBuilder.loadTexts: aluMaxShortIntervalMinutes.setDescription("'aluMaxShortIntervalMinutes' the maximum number of 'aluStatsShortIntervalIndexes'.")
aluTotalShortIntervalMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluTotalShortIntervalMinutes.setStatus('current')
if mibBuilder.loadTexts: aluTotalShortIntervalMinutes.setDescription("'aluTotalShortIntervalMinutes' is the number of 'aluStatsShortIntervalIndexes' that have valid statistics")
aluCurrent1MinValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent1MinValidData.setStatus('current')
if mibBuilder.loadTexts: aluCurrent1MinValidData.setDescription('This variable indicates if the data for the first interval is valid.')
aluCurrent1MinPhaseErrorMeanPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent1MinPhaseErrorMeanPpb.setStatus('current')
if mibBuilder.loadTexts: aluCurrent1MinPhaseErrorMeanPpb.setDescription('The mean phase error from the local oscillator clock in parts per billion during the first interval.')
aluCurrent1MinPhaseErrorStdDevNs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent1MinPhaseErrorStdDevNs.setStatus('current')
if mibBuilder.loadTexts: aluCurrent1MinPhaseErrorStdDevNs.setDescription('The standard deviation of the phase error from the local oscillator clock in nano seconds during the first interval.')
aluCurrent1MinPhaseErrorMeanNs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent1MinPhaseErrorMeanNs.setStatus('current')
if mibBuilder.loadTexts: aluCurrent1MinPhaseErrorMeanNs.setDescription('The mean of the phase error from the local oscillator clock in nano seconds during the first interval.')
aluCurrent1MinFreqOffsetMeanPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent1MinFreqOffsetMeanPpb.setStatus('current')
if mibBuilder.loadTexts: aluCurrent1MinFreqOffsetMeanPpb.setDescription('The mean frequency offset from the local oscillator clock in parts per billion during the first interval.')
aluCurrent1MinFreqOffsetStdDevPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 10, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluCurrent1MinFreqOffsetStdDevPpb.setStatus('current')
if mibBuilder.loadTexts: aluCurrent1MinFreqOffsetStdDevPpb.setDescription('The standard deviation of the frequency offset from the local oscillator clock in nano seconds during the first interval.')
aluPortAcrClkStatsShortIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11), )
if mibBuilder.loadTexts: aluPortAcrClkStatsShortIntervalTable.setStatus('current')
if mibBuilder.loadTexts: aluPortAcrClkStatsShortIntervalTable.setDescription('The Port ACR Clock Interval Table contains various statistics collected by each adaptively timed port over the previous 15 minutes. The past 15 minutes are broken into 15 1 minute intervals. Each row in this table represents one such interval (identified by aluAcrClkIntervalNumber).')
aluPortAcrClkStatsShortIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-SAS-PORT-MIB", "aluIntervalNumber"))
if mibBuilder.loadTexts: aluPortAcrClkStatsShortIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: aluPortAcrClkStatsShortIntervalEntry.setDescription('An entry in the Port ACR Clock Interval table.')
aluIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: aluIntervalNumber.setDescription('A number between 1 and 15, where 1 is the most recently completed 1 minute interval and 15 is the 1 minutes interval completed 14 minutes prior to interval 1.')
aluIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: aluIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
aluIntervalUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalUpdateTime.setStatus('current')
if mibBuilder.loadTexts: aluIntervalUpdateTime.setDescription('The update time of the ACR interval statistics')
aluIntervalPhaseErrorMeanPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalPhaseErrorMeanPpb.setStatus('current')
if mibBuilder.loadTexts: aluIntervalPhaseErrorMeanPpb.setDescription('The mean phase error from the local oscillator clock in parts per billion during the interval.')
aluIntervalPhaseErrorStdDevNs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalPhaseErrorStdDevNs.setStatus('current')
if mibBuilder.loadTexts: aluIntervalPhaseErrorStdDevNs.setDescription('The standard deviation of the phase error from the local oscillator clock in nano seconds during the interval.')
aluIntervalPhaseErrorMeanNs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalPhaseErrorMeanNs.setStatus('current')
if mibBuilder.loadTexts: aluIntervalPhaseErrorMeanNs.setDescription('The mean of the phase error from the local oscillator clock in nano seconds during the interval.')
aluIntervalFreqOffsetMeanPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalFreqOffsetMeanPpb.setStatus('current')
if mibBuilder.loadTexts: aluIntervalFreqOffsetMeanPpb.setDescription('The mean frequency offset from the local oscillator clock in parts per billion during the interval.')
aluIntervalFreqOffsetStdDevPpb = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluIntervalFreqOffsetStdDevPpb.setStatus('current')
if mibBuilder.loadTexts: aluIntervalFreqOffsetStdDevPpb.setDescription('The standard deviation of the frequency offset from the local oscillator clock in nano seconds during the interval.')
aluExtTmnxDS1Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 12), )
if mibBuilder.loadTexts: aluExtTmnxDS1Table.setStatus('current')
if mibBuilder.loadTexts: aluExtTmnxDS1Table.setDescription('The aluExtTmnxDS1Table has an entry for a DS1 physical port or channel.')
aluExtTmnxDS1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 12, 1), )
tmnxDS1Entry.registerAugmentions(("TIMETRA-SAS-PORT-MIB", "aluExtTmnxDS1Entry"))
aluExtTmnxDS1Entry.setIndexNames(*tmnxDS1Entry.getIndexNames())
if mibBuilder.loadTexts: aluExtTmnxDS1Entry.setStatus('current')
if mibBuilder.loadTexts: aluExtTmnxDS1Entry.setDescription('Each row entry represents extended functionality of a DS1 physical port or channel on Alcatel-Lucent 7210 SAS devices. Entries cannot be created or deleted via SNMP SET operations. Entries in this table will be created or deleted automatically when entries in the tmnxDS1Table are created or deleted.')
aluExtDS1SignalBitsState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluExtDS1SignalBitsState.setStatus('current')
if mibBuilder.loadTexts: aluExtDS1SignalBitsState.setDescription("aluExtDS1SignalBitsState is an array of bytes used to indicate the current state of the ABCD signalling bits for all timeslots of a DS1/E1. The first half of the array or the 32 most significant bytes describe the RX ABCD bits. The other half describes the TX ABCD bits. In each half of the array, every byte represents a particular timeslot. The most significant byte represents timeslot 1. The least significant byte represents timeslot 32. The byte arrangement is as follows: array index: | 0 1 ... 30 31 | 32 33 ... 62 63 | timeslot: | 1 2 ... 31 32 | 1 2 ... 31 32 | | <---- RX -----> | <---- TX -----> | Each byte carries ABCD bits in the least significant nibble. The byte's most significant bit indicates the validity of the ABCD bits. The bit arrangement is as follows: bit pos: | 7 6 5 4 3 2 1 0 | | V x x x A B C D | 'V' - validity (0 = invalid, 1 = valid) 'x' - don't care ABCD bits are marked invalid for a variety of situations (eg. tmnxDS1SignalMode not configured for CAS, timeslot(s) not configured as part of a channel-group, DS1/E1 status not up, etc.). For CAS DS1 SF, only the AB signalling bits are supported. The remaining 2 least significant bits in the nibble are undefined. ")
aluExtPethPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 13), )
if mibBuilder.loadTexts: aluExtPethPsePortTable.setStatus('current')
if mibBuilder.loadTexts: aluExtPethPsePortTable.setDescription('The aluExtPethPsePortTable has an entry for a table of objects that display and control the power characteristics of power Ethernet ports on a Power Source Entity (PSE) device.')
aluExtPethPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 13, 1), )
pethPsePortEntry.registerAugmentions(("TIMETRA-SAS-PORT-MIB", "aluExtPethPsePortEntry"))
aluExtPethPsePortEntry.setIndexNames(*pethPsePortEntry.getIndexNames())
if mibBuilder.loadTexts: aluExtPethPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: aluExtPethPsePortEntry.setDescription('Each row entry represents the extended functionality of a power Ethernet port')
aluExtPethPsePortFaultReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 1), ("dcp", 2), ("hicap", 3), ("rlow", 4), ("detok", 5), ("rhigh", 6), ("open", 7), ("dcn", 8), ("tstart", 9), ("icv", 10), ("tcut", 11), ("dis", 12), ("sup", 13), ("pdeny", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluExtPethPsePortFaultReason.setStatus('current')
if mibBuilder.loadTexts: aluExtPethPsePortFaultReason.setDescription('Reason for a detection status failure: none (1) dcp (2) - Positive DC supply connected at the port hicap (3) - High Capacitance at the port rlow (4) - Low Resistance at the port detok (5) - detection ok rhigh (6) - High resistance at the port open (7) - open circuit dcn (8) - Low impedence to Vee at the port tstart (9) - Startup failure at the port icv (10) - Current limit disconnect timeout at the port tcut (11) - Overcurrent and current limit violation at the port dis (12) - DC load disconnect sup (13) - Supply fault at the PSE device pdeny (14) - Power Denied')
aluExtPethPsePortPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("standard", 2), ("plus", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aluExtPethPsePortPowerLevel.setStatus('current')
if mibBuilder.loadTexts: aluExtPethPsePortPowerLevel.setDescription("none (1) The interface does not provide the PoE function. standard (2) The interface provides the standard PoE power level. plus (3) The interface provides the higher power 'Poe Plus' PSE function")
aluExtPethPsePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aluExtPethPsePortOperStatus.setStatus('current')
if mibBuilder.loadTexts: aluExtPethPsePortOperStatus.setDescription('The operational status of the port PSE.')
pethPsePortEventInfo = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 14), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pethPsePortEventInfo.setStatus('current')
if mibBuilder.loadTexts: pethPsePortEventInfo.setDescription('The operational status of the port PSE.')
tmnxVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 15), )
if mibBuilder.loadTexts: tmnxVirtualPortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxVirtualPortTable.setDescription('The port table has an entry for each virtual port')
tmnxVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 15, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-SAS-PORT-MIB", "tmnxVirtualPortPortID"))
if mibBuilder.loadTexts: tmnxVirtualPortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxVirtualPortEntry.setDescription('Each row entry represents a virtual port')
tmnxVirtualPortPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 15, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: tmnxVirtualPortPortID.setStatus('current')
if mibBuilder.loadTexts: tmnxVirtualPortPortID.setDescription('tmnxVirtualPortPortID is an index into this table')
tmnxVirtualPortInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-in-use", 1), ("mirror", 2), ("macswap", 3), ("testhead", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVirtualPortInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxVirtualPortInUse.setDescription('tmnxVirtualPortInUse describes whether the virtual port is used by an application or not.')
tmnxVirtualPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one-gig", 1), ("ten-gig", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVirtualPortSpeed.setStatus('current')
if mibBuilder.loadTexts: tmnxVirtualPortSpeed.setDescription('tmnxVirtualPortSpeed describes the speed of the virtual ports.')
aluExtPethPsePortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 3, 1)).setObjects(("POWER-ETHERNET-MIB", "pethPsePortDetectionStatus"), ("POWER-ETHERNET-MIB", "pethPsePortPowerClassifications"), ("TIMETRA-SAS-PORT-MIB", "aluExtPethPsePortFaultReason"), ("TIMETRA-SAS-PORT-MIB", "aluExtPethPsePortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: aluExtPethPsePortStatusChange.setStatus('current')
if mibBuilder.loadTexts: aluExtPethPsePortStatusChange.setDescription('Generated when there is a change in Power Classification, Detection Status, Fault Reason, or Oper Status on a PoE port.')
tmnxSASPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 1))
tmnxSASPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2))
tmnxSASPortV1v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 1)).setObjects(("TIMETRA-SAS-PORT-MIB", "tmnxPortUplinkMode"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQoSPolicyId"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetworkQoSPolicyId"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortShgName"), ("TIMETRA-SAS-PORT-MIB", "portShgRowStatus"), ("TIMETRA-SAS-PORT-MIB", "portShgInstanceId"), ("TIMETRA-SAS-PORT-MIB", "portShgDescription"), ("TIMETRA-SAS-PORT-MIB", "portShgLastMgmtChange"), ("TIMETRA-SAS-PORT-MIB", "tmnxSASPortNetIngressFwdInProfPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxSASPortNetIngressFwdOutProfPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxSASPortNetIngressFwdInProfOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxSASPortNetIngressFwdOutProfOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherEgressMaxBurst"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue1PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue2PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue3PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue4PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue5PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue6PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue7PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortStatsQueue8PktsFwd"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV1v0Group = tmnxSASPortV1v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV1v0Group.setDescription(' sas group object definition ')
tmnxSASPortV1v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 2)).setObjects(("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsFwdPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsFwdOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsFwdPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsFwdOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsInProfDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsInProfDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsOutProfDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsOutProfDroOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV1v1Group = tmnxSASPortV1v1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV1v1Group.setDescription(' sas group object definition ')
tmnxSASPortV2v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 3)).setObjects(("TIMETRA-SAS-PORT-MIB", "aluExtDS1PortLineImpedance"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherEgrSchedMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV2v0Group = tmnxSASPortV2v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV2v0Group.setDescription(' SAS group object definitions for 2.0 release')
tmnxSASPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 6)).setObjects(("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherClockConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV3v0Group = tmnxSASPortV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV3v0Group.setDescription(' SAS group object definitions for 3.0 release')
aluPortAcrClkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 4)).setObjects(("TIMETRA-SAS-PORT-MIB", "aluLastUpdateTime"), ("TIMETRA-SAS-PORT-MIB", "aluTotalMinutesIn24Hour"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent24HourFreqOffsetMeanPpb"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent24HourFreqOffsetStdDevPpb"), ("TIMETRA-SAS-PORT-MIB", "aluMaxShortIntervalMinutes"), ("TIMETRA-SAS-PORT-MIB", "aluTotalShortIntervalMinutes"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent1MinValidData"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent1MinPhaseErrorMeanPpb"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent1MinPhaseErrorStdDevNs"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent1MinPhaseErrorMeanNs"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent1MinFreqOffsetMeanPpb"), ("TIMETRA-SAS-PORT-MIB", "aluCurrent1MinFreqOffsetStdDevPpb"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalNumber"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalValidData"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalUpdateTime"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalPhaseErrorMeanPpb"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalPhaseErrorStdDevNs"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalPhaseErrorMeanNs"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalFreqOffsetMeanPpb"), ("TIMETRA-SAS-PORT-MIB", "aluIntervalFreqOffsetStdDevPpb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aluPortAcrClkStatsGroup = aluPortAcrClkStatsGroup.setStatus('current')
if mibBuilder.loadTexts: aluPortAcrClkStatsGroup.setDescription('The group of objects supporting retrieval of the ACR clock statistic on Alcatel-Lucent SAR series systems')
tmnxSASPortV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 5)).setObjects(("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsFwdPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsFwdOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccessEgressQueueStatsDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsFwdPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsFwdOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsInProfDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsInProfDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsOutProfDroPkts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortNetEgressQueueStatsOutProfDroOcts"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherIpMTU"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherClockConfig"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortLoopbckServId"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortLoopbckSapPortId"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortLoopbckSapEncapVal"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortLoopbckSrcMacAddr"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortLoopbckDstMacAddr"), ("TIMETRA-SAS-PORT-MIB", "tmnxPortAccEgrSapQosMarking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV4v0Group = tmnxSASPortV4v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV4v0Group.setDescription(' sas group object definition ')
tmnxSASPortV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 7)).setObjects(("TIMETRA-SAS-PORT-MIB", "tmnxPortLldpTnlNrstBrdgeDstMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV5v0Group = tmnxSASPortV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV5v0Group.setDescription(' sas 5.0 release, group object definition ')
tmnxSASPortV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 2, 2, 8)).setObjects(("TIMETRA-SAS-PORT-MIB", "tmnxPortEtherNwAggRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSASPortV6v0Group = tmnxSASPortV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSASPortV6v0Group.setDescription(' sas 6.0 release, group object definition ')
mibBuilder.exportSymbols("TIMETRA-SAS-PORT-MIB", portShgDescription=portShgDescription, tmnxPortEtherLoopback=tmnxPortEtherLoopback, tmnxPortEtherNwAggRateLimitCir=tmnxPortEtherNwAggRateLimitCir, tmnxPortAccessEgressQueueStatsTable=tmnxPortAccessEgressQueueStatsTable, tmnxSASPortNetIngressFwdInProfPkts=tmnxSASPortNetIngressFwdInProfPkts, aluExtPethPsePortStatusChange=aluExtPethPsePortStatusChange, portShgName=portShgName, tmnxPortEtherEgrSchedMode=tmnxPortEtherEgrSchedMode, tmnxSASPortV4v0Group=tmnxSASPortV4v0Group, aluExtPethPsePortEntry=aluExtPethPsePortEntry, tmnxPortLoopbckSrcMacAddr=tmnxPortLoopbckSrcMacAddr, portShgRowStatus=portShgRowStatus, portShgInfoTable=portShgInfoTable, tmnxPortStatsQueue2PktsFwd=tmnxPortStatsQueue2PktsFwd, tmnxPortAccessEgressQueueStatsIndex=tmnxPortAccessEgressQueueStatsIndex, tmnxVirtualPortPortID=tmnxVirtualPortPortID, tmnxPortEtherNwAggRateLimit=tmnxPortEtherNwAggRateLimit, tmnxPortAccessEgressQueueStatsEntry=tmnxPortAccessEgressQueueStatsEntry, tmnxPortAccessEgressQueueStatsFwdPkts=tmnxPortAccessEgressQueueStatsFwdPkts, tmnxPortLoopbckDstMacAddr=tmnxPortLoopbckDstMacAddr, tmnxPortNetEgressQueueStatsOutProfDroPkts=tmnxPortNetEgressQueueStatsOutProfDroPkts, tmnxPortAccessEgressQueueStatsDroOcts=tmnxPortAccessEgressQueueStatsDroOcts, aluExtTmnxDS1PortTable=aluExtTmnxDS1PortTable, aluExtTmnxDS1PortEntry=aluExtTmnxDS1PortEntry, tmnxPortLoopbckSapPortId=tmnxPortLoopbckSapPortId, tmnxPortAccessEgressQueueStatsDroPkts=tmnxPortAccessEgressQueueStatsDroPkts, tmnxPortAccessEgressQueueStatsFwdOcts=tmnxPortAccessEgressQueueStatsFwdOcts, aluPortAcrClkStatsEntry=aluPortAcrClkStatsEntry, aluIntervalUpdateTime=aluIntervalUpdateTime, tmnxPortLoopbckSapEncapVal=tmnxPortLoopbckSapEncapVal, tmnxPortUplinkMode=tmnxPortUplinkMode, pethPsePortEventInfo=pethPsePortEventInfo, tmnxPortMonitorOperGrpName=tmnxPortMonitorOperGrpName, aluCurrent1MinFreqOffsetMeanPpb=aluCurrent1MinFreqOffsetMeanPpb, tmnxPortNetEgressQueueStatsInProfDroPkts=tmnxPortNetEgressQueueStatsInProfDroPkts, tmnxPortNetEgressQueueStatsDroPkts=tmnxPortNetEgressQueueStatsDroPkts, tmnxPortStatsQueue6PktsFwd=tmnxPortStatsQueue6PktsFwd, tmnxPortEtherMulticastIngress=tmnxPortEtherMulticastIngress, portShgInfoEntry=portShgInfoEntry, tmnxPortStatsQueue8PktsFwd=tmnxPortStatsQueue8PktsFwd, tmnxSASPortConformance=tmnxSASPortConformance, tmnxPortEtherNwAggRateLimitPir=tmnxPortEtherNwAggRateLimitPir, tmnxSASPortNetIngressFwdOutProfOcts=tmnxSASPortNetIngressFwdOutProfOcts, tmnxSASPortV6v0Group=tmnxSASPortV6v0Group, tmnxPortEtherDcommStatus=tmnxPortEtherDcommStatus, aluExtDS1SignalBitsState=aluExtDS1SignalBitsState, tmnxPortLldpTnlNrstBrdgeDstMac=tmnxPortLldpTnlNrstBrdgeDstMac, tmnxPortNetworkQoSPolicyId=tmnxPortNetworkQoSPolicyId, aluExtPethPsePortPowerLevel=aluExtPethPsePortPowerLevel, aluCurrent24HourFreqOffsetMeanPpb=aluCurrent24HourFreqOffsetMeanPpb, sasTmnxPortEtherExtnTable=sasTmnxPortEtherExtnTable, tmnxSASPortStatsObjs=tmnxSASPortStatsObjs, tmnxPortStatsQueue4PktsFwd=tmnxPortStatsQueue4PktsFwd, tmnxPortNetEgressQueueStatsOutProfDroOcts=tmnxPortNetEgressQueueStatsOutProfDroOcts, tmnxSASPortCompliances=tmnxSASPortCompliances, portShgLastMgmtChange=portShgLastMgmtChange, aluTotalShortIntervalMinutes=aluTotalShortIntervalMinutes, tmnxSASPortNetIngressFwdOutProfPkts=tmnxSASPortNetIngressFwdOutProfPkts, tmnxSASPortV2v0Group=tmnxSASPortV2v0Group, aluIntervalValidData=aluIntervalValidData, tmnxSASPortMIBModule=tmnxSASPortMIBModule, tmnxSASPortNetIngressStatsTable=tmnxSASPortNetIngressStatsTable, aluIntervalNumber=aluIntervalNumber, tmnxPortNetEgressQueueStatsEntry=tmnxPortNetEgressQueueStatsEntry, aluCurrent1MinValidData=aluCurrent1MinValidData, aluLastUpdateTime=aluLastUpdateTime, tmnxSASPortV1v0Group=tmnxSASPortV1v0Group, aluExtPethPsePortOperStatus=aluExtPethPsePortOperStatus, tmnxPortShgName=tmnxPortShgName, tmnxSASPortNetIngressFwdInProfOcts=tmnxSASPortNetIngressFwdInProfOcts, sasTmnxPortEtherExtnEntry=sasTmnxPortEtherExtnEntry, tmnxSASPortNetIngressStatsEntry=tmnxSASPortNetIngressStatsEntry, tmnxPortStatsQueue7PktsFwd=tmnxPortStatsQueue7PktsFwd, aluCurrent1MinPhaseErrorStdDevNs=aluCurrent1MinPhaseErrorStdDevNs, tmnxPortNetEgressQueueStatsDroOcts=tmnxPortNetEgressQueueStatsDroOcts, aluIntervalFreqOffsetStdDevPpb=aluIntervalFreqOffsetStdDevPpb, aluCurrent1MinPhaseErrorMeanPpb=aluCurrent1MinPhaseErrorMeanPpb, tmnxSASPortV3v0Group=tmnxSASPortV3v0Group, aluExtPethPsePortTable=aluExtPethPsePortTable, aluIntervalPhaseErrorStdDevNs=aluIntervalPhaseErrorStdDevNs, tmnxPortNetEgressQueueStatsInProfDroOcts=tmnxPortNetEgressQueueStatsInProfDroOcts, aluPortAcrClkStatsTable=aluPortAcrClkStatsTable, tmnxPortNetEgressQueueStatsFwdPkts=tmnxPortNetEgressQueueStatsFwdPkts, aluPortAcrClkStatsShortIntervalEntry=aluPortAcrClkStatsShortIntervalEntry, tmnxPortStatsQueue3PktsFwd=tmnxPortStatsQueue3PktsFwd, aluCurrent1MinFreqOffsetStdDevPpb=aluCurrent1MinFreqOffsetStdDevPpb, tmnxSASPortNotificationObjects=tmnxSASPortNotificationObjects, tmnxPortEtherDe1OutProfile=tmnxPortEtherDe1OutProfile, tmnxSASPortV5v0Group=tmnxSASPortV5v0Group, aluTotalMinutesIn24Hour=aluTotalMinutesIn24Hour, aluMaxShortIntervalMinutes=aluMaxShortIntervalMinutes, aluExtDS1PortLineImpedance=aluExtDS1PortLineImpedance, tmnxSASPortGroups=tmnxSASPortGroups, tmnxVirtualPortEntry=tmnxVirtualPortEntry, tmnxVirtualPortTable=tmnxVirtualPortTable, tmnxPortAccessEgressQoSPolicyId=tmnxPortAccessEgressQoSPolicyId, tmnxPortNetEgressQueueStatsTable=tmnxPortNetEgressQueueStatsTable, aluPortAcrClkStatsShortIntervalTable=aluPortAcrClkStatsShortIntervalTable, tmnxSASPortV1v1Group=tmnxSASPortV1v1Group, tmnxPortStatsQueue5PktsFwd=tmnxPortStatsQueue5PktsFwd, aluIntervalPhaseErrorMeanPpb=aluIntervalPhaseErrorMeanPpb, PYSNMP_MODULE_ID=tmnxSASPortMIBModule, tmnxPortAccEgrSapQosMarking=tmnxPortAccEgrSapQosMarking, tmnxPortEtherIpMTU=tmnxPortEtherIpMTU, tmnxPortStatsQueue1PktsFwd=tmnxPortStatsQueue1PktsFwd, tmnxPortEtherClockConfig=tmnxPortEtherClockConfig, tmnxVirtualPortSpeed=tmnxVirtualPortSpeed, tmnxPortUseDei=tmnxPortUseDei, tmnxPortOperGrpName=tmnxPortOperGrpName, tmnxVirtualPortInUse=tmnxVirtualPortInUse, tmnxSASPortNetIngressMeterIndex=tmnxSASPortNetIngressMeterIndex, tmnxPortLoopbckServId=tmnxPortLoopbckServId, aluExtPethPsePortFaultReason=aluExtPethPsePortFaultReason, aluCurrent1MinPhaseErrorMeanNs=aluCurrent1MinPhaseErrorMeanNs, tmnxSASPortObjs=tmnxSASPortObjs, aluExtTmnxDS1Table=aluExtTmnxDS1Table, aluCurrent24HourFreqOffsetStdDevPpb=aluCurrent24HourFreqOffsetStdDevPpb, aluPortAcrClkStatsGroup=aluPortAcrClkStatsGroup, aluExtTmnxDS1Entry=aluExtTmnxDS1Entry, tmnxPortNetEgressQueueStatsIndex=tmnxPortNetEgressQueueStatsIndex, tmnxPortEtherEgressMaxBurst=tmnxPortEtherEgressMaxBurst, tmnxPortNetEgressQueueStatsFwdOcts=tmnxPortNetEgressQueueStatsFwdOcts, sasTmnxPortExtnTable=sasTmnxPortExtnTable, portShgInstanceId=portShgInstanceId, aluIntervalPhaseErrorMeanNs=aluIntervalPhaseErrorMeanNs, aluIntervalFreqOffsetMeanPpb=aluIntervalFreqOffsetMeanPpb, sasTmnxPortExtnEntry=sasTmnxPortExtnEntry)
