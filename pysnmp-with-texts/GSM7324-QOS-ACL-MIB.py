#
# PySNMP MIB module GSM7324-QOS-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSM7324-QOS-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
gsm7324QOS, = mibBuilder.importSymbols("GSM7324-QOS-MIB", "gsm7324QOS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Bits, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Bits", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter64", "iso")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
gsm7324QOSACL = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2))
gsm7324QOSACL.setRevisions(('2003-05-06 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gsm7324QOSACL.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: gsm7324QOSACL.setLastUpdated('200305061200Z')
if mibBuilder.loadTexts: gsm7324QOSACL.setOrganization('Netgear')
if mibBuilder.loadTexts: gsm7324QOSACL.setContactInfo('')
if mibBuilder.loadTexts: gsm7324QOSACL.setDescription('')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
if mibBuilder.loadTexts: aclTable.setDescription('A table of ACL instances.')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1, 1), ).setIndexNames((0, "GSM7324-QOS-ACL-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
if mibBuilder.loadTexts: aclEntry.setDescription('')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
if mibBuilder.loadTexts: aclStatus.setDescription('Status of this instance. active(1) - this ACL instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIndex.setStatus('current')
if mibBuilder.loadTexts: aclIndex.setDescription('The ACL index this instance is associated with.')
aclIfTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2), )
if mibBuilder.loadTexts: aclIfTable.setStatus('current')
if mibBuilder.loadTexts: aclIfTable.setDescription('A table of ACL interface instances.')
aclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1), ).setIndexNames((0, "GSM7324-QOS-ACL-MIB", "aclIndex"), (0, "GSM7324-QOS-ACL-MIB", "aclIfIndex"), (0, "GSM7324-QOS-ACL-MIB", "aclIfDirection"))
if mibBuilder.loadTexts: aclIfEntry.setStatus('current')
if mibBuilder.loadTexts: aclIfEntry.setDescription('')
aclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIfIndex.setStatus('current')
if mibBuilder.loadTexts: aclIfIndex.setDescription('The interface this ACL instance is associated with.')
aclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclIfDirection.setStatus('current')
if mibBuilder.loadTexts: aclIfDirection.setDescription('The direction this ACL instance applies.')
aclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIfStatus.setStatus('current')
if mibBuilder.loadTexts: aclIfStatus.setDescription('Status of this instance. active(1) - this ACL index instance is active createAndGo(4) - set to this value to assign an interface to an ACL destroy(6) - set to this value to remove an interface to an ACL')
aclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3), )
if mibBuilder.loadTexts: aclRuleTable.setStatus('current')
if mibBuilder.loadTexts: aclRuleTable.setDescription('A table of ACL Rules instances.')
aclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1), ).setIndexNames((0, "GSM7324-QOS-ACL-MIB", "aclIndex"), (0, "GSM7324-QOS-ACL-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: aclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclRuleEntry.setDescription('A table of ACL Classification Rules')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: aclRuleIndex.setDescription('The index of this instance.')
aclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAction.setStatus('current')
if mibBuilder.loadTexts: aclRuleAction.setDescription('The type of action this rule should perform.')
aclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: aclRuleProtocol.setDescription('icmp - 1 igmp - 2 ip - 4 tcp - 6 udp - 17 All values from 1 to 255 are valid.')
aclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setDescription('The Source IP Address used in the ACL Classification.')
aclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcIpMask.setDescription('The Source IP Mask used in the ACL Classification.')
aclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4Port.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcL4Port.setDescription('The Source Port Number (Layer 4) used in the ACL Classification.')
aclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setDescription('The Source Port Number(Layer 4) range start.')
aclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setDescription('The Source Port Number(Layer 4) range end.')
aclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestIpAddress.setDescription('The Destination IP Address used in the ACL Classification.')
aclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpMask.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestIpMask.setDescription('The Destination IP Mask used in the ACL Classification.')
aclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4Port.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestL4Port.setDescription('The Destination Port (Layer 4) used in ACl classification.')
aclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setDescription('The Destination Port (Layer 4) starting range used in ACL classification.')
aclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setDescription('The Destination Port (Layer 4) ending range used in ACL classification.')
aclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIPDSCP.setStatus('current')
if mibBuilder.loadTexts: aclRuleIPDSCP.setDescription('The Differentiated Services Code Point value.')
aclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: aclRuleIpPrecedence.setDescription('The Type of Service (TOS) IP Precedence value.')
aclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosBits.setStatus('current')
if mibBuilder.loadTexts: aclRuleIpTosBits.setDescription('The Type of Service (TOS) Bits value.')
aclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosMask.setStatus('current')
if mibBuilder.loadTexts: aclRuleIpTosMask.setDescription('The Type of Service (TOS) Mask value.')
aclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclRuleStatus.setDescription('Status of this instance. active(1) - this ACL Rule is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
mibBuilder.exportSymbols("GSM7324-QOS-ACL-MIB", aclIfDirection=aclIfDirection, aclRuleDestL4PortRangeEnd=aclRuleDestL4PortRangeEnd, aclRuleIpTosMask=aclRuleIpTosMask, aclRuleTable=aclRuleTable, aclRuleSrcIpMask=aclRuleSrcIpMask, aclEntry=aclEntry, aclRuleDestL4Port=aclRuleDestL4Port, aclRuleSrcL4PortRangeStart=aclRuleSrcL4PortRangeStart, aclRuleAction=aclRuleAction, PYSNMP_MODULE_ID=gsm7324QOSACL, aclRuleIPDSCP=aclRuleIPDSCP, aclIfIndex=aclIfIndex, aclRuleIpPrecedence=aclRuleIpPrecedence, gsm7324QOSACL=gsm7324QOSACL, aclTable=aclTable, aclRuleDestL4PortRangeStart=aclRuleDestL4PortRangeStart, aclRuleDestIpMask=aclRuleDestIpMask, aclStatus=aclStatus, aclRuleStatus=aclRuleStatus, aclIndex=aclIndex, aclRuleIndex=aclRuleIndex, aclRuleSrcL4Port=aclRuleSrcL4Port, aclIfEntry=aclIfEntry, aclRuleSrcIpAddress=aclRuleSrcIpAddress, aclRuleSrcL4PortRangeEnd=aclRuleSrcL4PortRangeEnd, aclRuleEntry=aclRuleEntry, aclRuleIpTosBits=aclRuleIpTosBits, aclIfTable=aclIfTable, aclRuleProtocol=aclRuleProtocol, aclRuleDestIpAddress=aclRuleDestIpAddress, aclIfStatus=aclIfStatus)
