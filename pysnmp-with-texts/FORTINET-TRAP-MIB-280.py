#
# PySNMP MIB module FORTINET-TRAP-MIB-280 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-TRAP-MIB-280
# Produced by pysmi-0.3.4 at Wed May  1 13:14:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
fnTraps, fnIpsSigSrcIp, fnSysSerial, fnIpsSigId = mibBuilder.importSymbols("FORTINET-MIB-280", "fnTraps", "fnIpsSigSrcIp", "fnSysSerial", "fnIpsSigId")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Integer32, ModuleIdentity, Unsigned32, NotificationType, TimeTicks, MibIdentifier, Bits, iso, Gauge32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Integer32", "ModuleIdentity", "Unsigned32", "NotificationType", "TimeTicks", "MibIdentifier", "Bits", "iso", "Gauge32", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fnTrapCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 101)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapCpuHigh.setStatus('current')
if mibBuilder.loadTexts: fnTrapCpuHigh.setDescription('Trap being sent if CPU usage becomes too high')
fnTrapMemLow = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 102)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapMemLow.setStatus('current')
if mibBuilder.loadTexts: fnTrapMemLow.setDescription('Trap being sent if memory usage becomes too high')
fnTrapLogFull = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 103)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapLogFull.setStatus('current')
if mibBuilder.loadTexts: fnTrapLogFull.setDescription('Trap being sent if log becomes full')
fnTrapIpChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 201)).setObjects(("FORTINET-MIB-280", "fnSysSerial"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fnTrapIpChange.setStatus('current')
if mibBuilder.loadTexts: fnTrapIpChange.setDescription('Trap being sent when IP address of the specified interface has been changed')
fnTrapVpnTunUp = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 301)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapVpnTunUp.setStatus('current')
if mibBuilder.loadTexts: fnTrapVpnTunUp.setDescription('Trap being sent when VPN tunnel is brought up')
fnTrapVpnTunDown = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 302)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapVpnTunDown.setStatus('current')
if mibBuilder.loadTexts: fnTrapVpnTunDown.setDescription('Trap being sent when VPN tunnel is brought down')
fnTrapHaSwitch = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 401)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapHaSwitch.setStatus('current')
if mibBuilder.loadTexts: fnTrapHaSwitch.setDescription('Trap being sent when the HA cluster master changes')
fnTrapHaStateChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 402)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapHaStateChange.setStatus('current')
if mibBuilder.loadTexts: fnTrapHaStateChange.setDescription('Trap being sent when the HA cluster member changes its state')
fnTrapIdsSynFlood = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 501)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapIdsSynFlood.setStatus('current')
if mibBuilder.loadTexts: fnTrapIdsSynFlood.setDescription('Trap being sent when SYN flood attack is detected')
fnTrapIdsPortScan = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 502)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapIdsPortScan.setStatus('current')
if mibBuilder.loadTexts: fnTrapIdsPortScan.setDescription('Trap being sent when port scan attack is detected')
fnTrapIpsSignature = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 503)).setObjects(("FORTINET-MIB-280", "fnSysSerial"), ("FORTINET-MIB-280", "fnIpsSigId"), ("FORTINET-MIB-280", "fnIpsSigSrcIp"))
if mibBuilder.loadTexts: fnTrapIpsSignature.setStatus('current')
if mibBuilder.loadTexts: fnTrapIpsSignature.setDescription('Trap being sent when IPS signature is detected')
fnTrapIpsAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 504)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapIpsAnomaly.setStatus('current')
if mibBuilder.loadTexts: fnTrapIpsAnomaly.setDescription('Trap being sent when IPS anomaly is detected')
fnTrapAvEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 601)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapAvEvent.setStatus('current')
if mibBuilder.loadTexts: fnTrapAvEvent.setDescription('Trap being sent when antivirus scanner detects a virus')
fnTrapBridge = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 701)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapBridge.setStatus('current')
if mibBuilder.loadTexts: fnTrapBridge.setDescription('Trap being sent by FortiBridge when detecting a FortiGate failure')
fnTrapImTableFull = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 801)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapImTableFull.setStatus('current')
if mibBuilder.loadTexts: fnTrapImTableFull.setDescription('Trap sent when Instant Message white/black list table is full')
fnTrapFlgEventCount = NotificationType((1, 3, 6, 1, 4, 1, 12356, 0, 901)).setObjects(("FORTINET-MIB-280", "fnSysSerial"))
if mibBuilder.loadTexts: fnTrapFlgEventCount.setStatus('current')
if mibBuilder.loadTexts: fnTrapFlgEventCount.setDescription('Trap sent when FortiLog event number exceeds limit')
mibBuilder.exportSymbols("FORTINET-TRAP-MIB-280", fnTrapLogFull=fnTrapLogFull, fnTrapIpsSignature=fnTrapIpsSignature, fnTrapIpsAnomaly=fnTrapIpsAnomaly, fnTrapImTableFull=fnTrapImTableFull, fnTrapHaSwitch=fnTrapHaSwitch, fnTrapVpnTunUp=fnTrapVpnTunUp, fnTrapVpnTunDown=fnTrapVpnTunDown, fnTrapBridge=fnTrapBridge, fnTrapCpuHigh=fnTrapCpuHigh, fnTrapHaStateChange=fnTrapHaStateChange, fnTrapIpChange=fnTrapIpChange, fnTrapFlgEventCount=fnTrapFlgEventCount, fnTrapIdsSynFlood=fnTrapIdsSynFlood, fnTrapIdsPortScan=fnTrapIdsPortScan, fnTrapMemLow=fnTrapMemLow, fnTrapAvEvent=fnTrapAvEvent)
