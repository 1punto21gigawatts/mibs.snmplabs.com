#
# PySNMP MIB module NETI-EVT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-EVT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:19:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Bits, Gauge32, ModuleIdentity, ObjectIdentity, Integer32, iso, NotificationType, IpAddress, MibIdentifier, Unsigned32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Bits", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Integer32", "iso", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString, DateAndTime, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue", "RowPointer")
nevtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 2, 1))
nevtMIB.setRevisions(('2015-03-03 16:00', '2013-06-03 11:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nevtMIB.setRevisionsDescriptions(('Added objects for holding purpose text of managed object; nevtEventPurpose, nevtAlarmPurose and nevtActiveAlarmPurpose. The objects are added to nevtEventTable, nevtAlarmTable and the nevtActiveAlarmTable and to all event and alarm notification. The nevtTrapPurpose has been marked as obsoleted. Corrected spelling on descriptions. Removed the Conformance group. Removed dependency and import from NETI-COMMON-MIB.', 'This MIB replaces the NETI-EVENT-MIB. This MIB has the same objects as the NETI-EVENT-MIB, revision 201105031000Z, but this MIB registers new descriptor for each of the objects. This violates RFC2578, ch 3.6, item 1, where it is stated that only one descriptor can be registered to an object. However, item 2 states that it is allowed to assign additional descriptors to an object, from which it follows that any object can be referred to by different descriptors. The NETI-EVENT-MIB contains registered descriptors that are in conflict with descriptors in other standard MIBs. This conflict can cause problems in network management systems that rely on that a descriptor uniquely identifies a single object. The least costly solution to this problem this was determined to be to simply register new descriptors for all objects. All the objects in this MIB are binary compatible with the descriptions in NETI-EVENT-MIB, meaning that any network management system may choose to continue to use the NETI-EVENT-MIB, or to use this NETI-EVT-MIB.',))
if mibBuilder.loadTexts: nevtMIB.setLastUpdated('201503031600Z')
if mibBuilder.loadTexts: nevtMIB.setOrganization('Net Insight AB')
if mibBuilder.loadTexts: nevtMIB.setContactInfo('Net Insight AB Box 42093 SE-126 14 Stockholm Sweden Tel +46-8-685 0400 info@netinsight.se')
if mibBuilder.loadTexts: nevtMIB.setDescription('MIB containing event and alarm information. The MIB contains tables for events and alarms, and defined notifications for events and alarms. nevtEventTable. Table with the last number of events. The event table contains the events that are sent as SNMP notifications. These events indicate change of alarms, or change in other tables defined in other MIBs, that uses the mechanism in this MIB to notify a table change. If a notification receiver misses notifications, it can retrieve the lost notifications from this table. nevtAlarmTable. Table with all active alarms, and the last historic alarms. The alarm table holds all active alarms, and possibly also a number of the last cleared alarms. nevtActiveAlarmTable. Table will all active (non-clear) alarms. The active alarm table holds only the active alarms.')
netinsight = MibIdentifier((1, 3, 6, 1, 4, 1, 2928))
netiGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2))
nevtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1))
nevtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2))
nevtConformanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 3))
class NevtEventType(TextualConvention, Integer32):
    description = "The type of event. 'created', 'modified' and 'deleted' indicates status of a conceptual row in a table. If the event represents an alarm, the type is 'none'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("created", 1), ("modified", 2), ("deleted", 3))

class NevtAlarmType(TextualConvention, Integer32):
    description = "The alarm type as specified in CCITT Rec. X.733(1992 E)|ISO/EIC 10164-4:1992 (E). Alarm type 'unknown' may be set if the alarm type can not be determined, or when an event is not caused by an alarm."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("communication", 1), ("qualityOfService", 2), ("processingError", 3), ("equipment", 4), ("environmental", 5))

class NevtAlarmSeverity(TextualConvention, Integer32):
    description = "The alarm severity as specified in CCITT Rec. X.733(1992 E)|ISO/EIC 10164-4:1992 (E). Alarm severity 'unknown' may be set if the alarm type can not be determined, or when the event is not caused by an alarm."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("indeterminate", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("cleared", 6))

class NevtAlarmCause(TextualConvention, Integer32):
    description = "The alarm cause 1-57 as specified in CCITT Rec. X.733(1992 E)|ISO/EIC 10164-4:1992 (E). Alarm cause 'unknown' may be set if the cause can not be determined, or if the event was not caused by an alarm. (0 and 58 and above are proprietary)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69))
    namedValues = NamedValues(("unknown", 0), ("adapterError", 1), ("applicationSubsystemFailure", 2), ("bandwidthReduced", 3), ("callEstablishmentError", 4), ("communicationsProtocolError", 5), ("communicationsSubsystemFailure", 6), ("configurationOrCustomizationError", 7), ("congestion", 8), ("corruptData", 9), ("cpuCyclesLimitExceeded", 10), ("datasetOrModemError", 11), ("degradedSignal", 12), ("dTEDCEInterfaceError", 13), ("enclosureDoorOpen", 14), ("equipmentMalfunction", 15), ("excessiveVibration", 16), ("fileError", 17), ("fireDetected", 18), ("floodDetected", 19), ("framingError", 20), ("heatingOrVentilationOrCoolingSystemProblem", 21), ("humidityUnacceptable", 22), ("inputOutputDeviceError", 23), ("inputDeviceError", 24), ("lANError", 25), ("leakDetected", 26), ("localNodeTransmissionError", 27), ("lossOfFrame", 28), ("lossOfSignal", 29), ("materialSupplyExhausted", 30), ("multiplexerProblem", 31), ("outOfMemory", 32), ("outputDeviceError", 33), ("performanceDegraded", 34), ("powerProblem", 35), ("pressureUnacceptable", 36), ("processorProblem", 37), ("pumpFailure", 38), ("queueSizeExceeded", 39), ("receiveFailure", 40), ("receiverFailure", 41), ("remoteNodeTransmissionError", 42), ("resourceAtOrNearingCapacity", 43), ("responseTimeExcessive", 44), ("retransmissionRateExcessive", 45), ("softwareError", 46), ("softwareProgramAbnormallyTerminated", 47), ("softwareProgramError", 48), ("storageCapacityProblem", 49), ("temperatureUnacceptable", 50), ("thresholdCrossed", 51), ("timingProblem", 52), ("toxicLeakDetected", 53), ("transmitFailure", 54), ("transmitterFailure", 55), ("underlyingResourceUnavailable", 56), ("versionMismatch", 57), ("phyLossOfSignal", 58), ("phyLossOfFrame", 59), ("phyAlarmIndicationSignal", 60), ("phyRemoteDefectIndication", 61), ("phySignalFailure", 62), ("phySignalDegraded", 63), ("testmodeEntered", 64), ("serviceUnavailable", 65), ("alarmIndicationSignal", 66), ("remoteDefectIndication", 67), ("replaceableUnitMissing", 68), ("replaceableUnitProblem", 69))

nevtSequenceCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtSequenceCounter.setStatus('current')
if mibBuilder.loadTexts: nevtSequenceCounter.setDescription("The index of the latest sent event defined as notifications in this mib. By examine his object, the notification receiver can determine whether it has missed any notifications. The counter resets to zero at cold start, indicating that no events has been sent, and that the event table is empty. The counter will wrap and restart at value `1' when it passes its maximum value")
nevtLastChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: nevtLastChangedTime.setDescription('The time when an event was last changed, and a notification was sent.')
nevtEventTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3), )
if mibBuilder.loadTexts: nevtEventTable.setStatus('current')
if mibBuilder.loadTexts: nevtEventTable.setDescription('Table containing the most recent events. The maximum size of the table depends on the implementation')
nevtEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1), ).setIndexNames((0, "NETI-EVT-MIB", "nevtEventIndex"))
if mibBuilder.loadTexts: nevtEventEntry.setStatus('current')
if mibBuilder.loadTexts: nevtEventEntry.setDescription('One entry in the table holds one event. Events are either created by the agent when a conceptual row has been changed in a table defined in another mib, or when an alarm status is changed in the alarm table defined in this mib.')
nevtEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventIndex.setStatus('current')
if mibBuilder.loadTexts: nevtEventIndex.setDescription('Arbitrary index for an entry in the event table. The eventIndex follows the nevtSequenceCounter as such that the nevtSequenceCounter refers to the last event in the table')
nevtEventObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventObject.setStatus('current')
if mibBuilder.loadTexts: nevtEventObject.setDescription('A pointer to the conceptual row of the object that caused this event. If the object is unavailable, the value is { 0 0 }.')
nevtEventObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventObjectName.setStatus('current')
if mibBuilder.loadTexts: nevtEventObjectName.setDescription('A text describing the object that caused the event in a for humans more readable form. If not set then this object contains a zero-length string.')
nevtEventAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 4), NevtAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventAlarmType.setStatus('current')
if mibBuilder.loadTexts: nevtEventAlarmType.setDescription('This is the event type as specified in NevtAlarmType.')
nevtEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 5), NevtEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventType.setStatus('current')
if mibBuilder.loadTexts: nevtEventType.setDescription('This is the event type as specified in NevtEventType.')
nevtEventCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 6), NevtAlarmCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventCause.setStatus('current')
if mibBuilder.loadTexts: nevtEventCause.setDescription('The alarm cause as specified in NevtAlarmCause.')
nevtEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 7), NevtAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventSeverity.setStatus('current')
if mibBuilder.loadTexts: nevtEventSeverity.setDescription('The alarm severity as specified in NevtAlarmSeverity.')
nevtEventText = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventText.setStatus('current')
if mibBuilder.loadTexts: nevtEventText.setDescription('A text describing the event in a for humans more readable form.')
nevtEventCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventCreatedTime.setStatus('current')
if mibBuilder.loadTexts: nevtEventCreatedTime.setDescription('The time when the event was created.')
nevtEventPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtEventPurpose.setStatus('current')
if mibBuilder.loadTexts: nevtEventPurpose.setDescription('The purpose text inherited from the object to which the event belongs. The purpose is usually a user-supplied text describing the object. The purpose is assigned on the object. If an object does not have a purpose, then this is the empty string.')
nevtAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4), )
if mibBuilder.loadTexts: nevtAlarmTable.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmTable.setDescription('Table containing alarms and their status. The maximum size of the table depends on the implementation.')
nevtAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1), ).setIndexNames((0, "NETI-EVT-MIB", "nevtAlarmIndex"))
if mibBuilder.loadTexts: nevtAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmEntry.setDescription('One entry in the table holds one alarm. The table contains all active alarms, and depending on the implementation, it may contian none, some or several cleared alarms.')
nevtAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmIndex.setDescription('Arbitrary index for an entry in the alarm table.')
nevtAlarmObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmObject.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmObject.setDescription('A pointer to the conceptual row of the object that caused this alarm. If the object is unavailable, the value is { 0 0 }.')
nevtAlarmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmObjectName.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmObjectName.setDescription('A text describing the object in a more readable form. If not set then this object contains a zero-length string.')
nevtAlarmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 4), NevtAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmAlarmType.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmAlarmType.setDescription('The alarm type as specified in NevtAlarmType.')
nevtAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 5), NevtAlarmCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmCause.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmCause.setDescription('The alarm cause as specified in NevtAlarmCause.')
nevtAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 6), NevtAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmSeverity.setDescription('The alarm severity as specified in NevtAlarmSeverity.')
nevtAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmText.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmText.setDescription('A text describing the alarm in a more readable form.')
nevtAlarmLastChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmLastChangedTime.setDescription('The time when the alarm was changed, i.e. when the alarm was created, or nevtAlarmSeverity or nevtAlarmAcknowledged was changed.')
nevtAlarmAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nevtAlarmAcknowledged.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmAcknowledged.setDescription("The acknowledgement status of the alarm. This is set to `true' to indicate that the alarm is is acknowledged, and set to `false' to clear the acknowledge.")
nevtAlarmCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmCreatedTime.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmCreatedTime.setDescription('The time when the alarm was created.')
nevtAlarmPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtAlarmPurpose.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmPurpose.setDescription('The purpose text inherited from the object to which the alarm belongs. The purpose is usually a user-supplied text describing the object. The purpose is assigned on the object. If an object does not have a purpose, then this is the empty string.')
nevtActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6), )
if mibBuilder.loadTexts: nevtActiveAlarmTable.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmTable.setDescription('Table containing alarms and their status. The maximum size of the table depends on the implementation.')
nevtActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1), ).setIndexNames((0, "NETI-EVT-MIB", "nevtActiveAlarmIndex"))
if mibBuilder.loadTexts: nevtActiveAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmEntry.setDescription('One entry in the table holds one alarm. The table contains only active alarms.')
nevtActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmIndex.setDescription('Arbitrary index for an entry in the alarm table.')
nevtActiveAlarmObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmObject.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmObject.setDescription('A pointer to the conceptual row of the object that caused this alarm. If the object is unavailable, the value is { 0 0 }.')
nevtActiveAlarmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmObjectName.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmObjectName.setDescription('A text describing the object in a more readable form. If not set then this object contains a zero-length string.')
nevtActiveAlarmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 4), NevtAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmAlarmType.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmAlarmType.setDescription('The alarm type as specified in NevtAlarmType.')
nevtActiveAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 5), NevtAlarmCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmCause.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmCause.setDescription('The alarm cause as specified in NevtAlarmCause.')
nevtActiveAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 6), NevtAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmSeverity.setDescription('The alarm severity as specified in NevtAlarmSeverity.')
nevtActiveAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmText.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmText.setDescription('A text describing the alarm in a more readable form.')
nevtActiveAlarmLastChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmLastChangedTime.setDescription('The time when the alarm was changed, i.e. when the alarm was created, or nevtActiveAlarmSeverity or nevtActiveAlarmAcknowledged was changed.')
nevtActiveAlarmAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nevtActiveAlarmAcknowledged.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmAcknowledged.setDescription("The acknowledgement status of the alarm. This is set to 'true' to indicate that the alarm is is acknowledged, and set to 'false' to clear the acknowledge.")
nevtActiveAlarmCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmCreatedTime.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmCreatedTime.setDescription('The time when the alarm was created.')
nevtActiveAlarmPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtActiveAlarmPurpose.setStatus('current')
if mibBuilder.loadTexts: nevtActiveAlarmPurpose.setDescription('The purpose text inherited from the object to which the alarm belongs. The purpose is usually a user-supplied text describing the object. The purpose is assigned on the object. If an object does not have a purpose, then this is the empty string.')
nevtAlarmCountersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5))
nevtCriticalCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtCriticalCounter.setStatus('current')
if mibBuilder.loadTexts: nevtCriticalCounter.setDescription("The number of active alarms with the severity 'critical'.")
nevtMajorCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtMajorCounter.setStatus('current')
if mibBuilder.loadTexts: nevtMajorCounter.setDescription("The number of active alarms with the severity 'major'.")
nevtMinorCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtMinorCounter.setStatus('current')
if mibBuilder.loadTexts: nevtMinorCounter.setDescription("The number of active alarms with the severity 'minor'.")
nevtWarningCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtWarningCounter.setStatus('current')
if mibBuilder.loadTexts: nevtWarningCounter.setDescription("The number of active alarms with the severity 'warning'.")
nevtIndeterminateCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nevtIndeterminateCounter.setStatus('current')
if mibBuilder.loadTexts: nevtIndeterminateCounter.setDescription("The number of active alarms with the severity 'indeterminate'.")
nevtNotificationObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 7))
nevtTrapPurpose = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 7, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nevtTrapPurpose.setStatus('obsolete')
if mibBuilder.loadTexts: nevtTrapPurpose.setDescription('Indicates the purpose of a managed object to where a trap belongs. This OID may be appended to traps in the nevtNotifications group at the discretion of the SNMP agent.')
nevtAlarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 1)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmCritical.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmCritical.setDescription("Notification for an alarm with severity 'critical'.")
nevtAlarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 2)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmMajor.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmMajor.setDescription("Notification for an alarm with severity 'major'.")
nevtAlarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 3)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmMinor.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmMinor.setDescription("Notification for an alarm with severity 'minor'.")
nevtAlarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 4)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmWarning.setDescription("Notification for an alarm with severity 'warning'.")
nevtAlarmIndeterminate = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 5)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmIndeterminate.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmIndeterminate.setDescription("Notification for an alarm with severity 'indeterminate'.")
nevtAlarmUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 6)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmUnknown.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmUnknown.setDescription('Notification for an alarm with unknown severity.')
nevtAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 7)).setObjects(("NETI-EVT-MIB", "nevtEventIndex"), ("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventAlarmType"), ("NETI-EVT-MIB", "nevtEventCause"), ("NETI-EVT-MIB", "nevtEventSeverity"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtAlarmClear.setStatus('current')
if mibBuilder.loadTexts: nevtAlarmClear.setDescription('Notification for a cleared alarm.')
nevtGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 8)).setObjects(("NETI-EVT-MIB", "nevtEventObject"), ("NETI-EVT-MIB", "nevtEventObjectName"), ("NETI-EVT-MIB", "nevtEventType"), ("NETI-EVT-MIB", "nevtEventText"), ("NETI-EVT-MIB", "nevtEventCreatedTime"), ("NETI-EVT-MIB", "nevtSequenceCounter"), ("NETI-EVT-MIB", "nevtEventPurpose"))
if mibBuilder.loadTexts: nevtGenericEvent.setStatus('current')
if mibBuilder.loadTexts: nevtGenericEvent.setDescription('Notification for a generic event.')
mibBuilder.exportSymbols("NETI-EVT-MIB", nevtMajorCounter=nevtMajorCounter, NevtAlarmType=NevtAlarmType, nevtEventCause=nevtEventCause, nevtAlarmSeverity=nevtAlarmSeverity, nevtAlarmIndeterminate=nevtAlarmIndeterminate, nevtAlarmCritical=nevtAlarmCritical, nevtCriticalCounter=nevtCriticalCounter, nevtActiveAlarmPurpose=nevtActiveAlarmPurpose, nevtAlarmAcknowledged=nevtAlarmAcknowledged, nevtActiveAlarmIndex=nevtActiveAlarmIndex, nevtActiveAlarmSeverity=nevtActiveAlarmSeverity, netinsight=netinsight, nevtEventObjectName=nevtEventObjectName, netiGeneric=netiGeneric, nevtWarningCounter=nevtWarningCounter, nevtEventIndex=nevtEventIndex, nevtActiveAlarmLastChangedTime=nevtActiveAlarmLastChangedTime, nevtEventTable=nevtEventTable, nevtEventAlarmType=nevtEventAlarmType, nevtActiveAlarmEntry=nevtActiveAlarmEntry, nevtEventObject=nevtEventObject, nevtEventCreatedTime=nevtEventCreatedTime, nevtAlarmWarning=nevtAlarmWarning, NevtAlarmSeverity=NevtAlarmSeverity, nevtNotifications=nevtNotifications, nevtActiveAlarmCause=nevtActiveAlarmCause, nevtEventText=nevtEventText, nevtLastChangedTime=nevtLastChangedTime, nevtActiveAlarmCreatedTime=nevtActiveAlarmCreatedTime, nevtAlarmMajor=nevtAlarmMajor, nevtAlarmMinor=nevtAlarmMinor, nevtActiveAlarmText=nevtActiveAlarmText, nevtActiveAlarmAlarmType=nevtActiveAlarmAlarmType, nevtAlarmAlarmType=nevtAlarmAlarmType, nevtGenericEvent=nevtGenericEvent, nevtConformanceGroups=nevtConformanceGroups, nevtEventEntry=nevtEventEntry, nevtAlarmEntry=nevtAlarmEntry, nevtNotificationObjectsGroup=nevtNotificationObjectsGroup, nevtMIB=nevtMIB, nevtAlarmText=nevtAlarmText, PYSNMP_MODULE_ID=nevtMIB, nevtAlarmObject=nevtAlarmObject, nevtAlarmPurpose=nevtAlarmPurpose, nevtAlarmCountersGroup=nevtAlarmCountersGroup, nevtTrapPurpose=nevtTrapPurpose, nevtAlarmCreatedTime=nevtAlarmCreatedTime, nevtAlarmUnknown=nevtAlarmUnknown, nevtIndeterminateCounter=nevtIndeterminateCounter, nevtEventPurpose=nevtEventPurpose, nevtAlarmIndex=nevtAlarmIndex, nevtSequenceCounter=nevtSequenceCounter, NevtEventType=NevtEventType, nevtActiveAlarmObjectName=nevtActiveAlarmObjectName, nevtAlarmObjectName=nevtAlarmObjectName, nevtAlarmCause=nevtAlarmCause, nevtActiveAlarmAcknowledged=nevtActiveAlarmAcknowledged, NevtAlarmCause=NevtAlarmCause, nevtEventType=nevtEventType, nevtAlarmTable=nevtAlarmTable, nevtActiveAlarmTable=nevtActiveAlarmTable, nevtObjects=nevtObjects, nevtMinorCounter=nevtMinorCounter, nevtEventSeverity=nevtEventSeverity, nevtActiveAlarmObject=nevtActiveAlarmObject, nevtAlarmLastChangedTime=nevtAlarmLastChangedTime, nevtAlarmClear=nevtAlarmClear)
