#
# PySNMP MIB module NETWORK-APPLIANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETWORK-APPLIANCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, Bits, ObjectIdentity, Gauge32, Integer32, Counter64, IpAddress, enterprises, Counter32, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, snmpModules, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Bits", "ObjectIdentity", "Gauge32", "Integer32", "Counter64", "IpAddress", "enterprises", "Counter32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "snmpModules", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
netappModuleId = ModuleIdentity((1, 3, 6, 1, 6, 3, 789))
if mibBuilder.loadTexts: netappModuleId.setLastUpdated('200703010000Z')
if mibBuilder.loadTexts: netappModuleId.setOrganization('Network Appliance')
if mibBuilder.loadTexts: netappModuleId.setContactInfo('www.netapp.com')
if mibBuilder.loadTexts: netappModuleId.setDescription('The mib module for netapp SNMPv2 entities')
netapp = MibIdentifier((1, 3, 6, 1, 4, 1, 789))
netapp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1))
netappProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2))
netappDataFabricManager = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 3))
netappSupportConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 4))
netappFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 1))
netappNetCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 2))
netappClusteredFiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 3))
netappNode = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 2, 4))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 1))
sysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2))
nfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3))
quota = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 4))
filesys = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5))
raid = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6))
cifs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7))
netcache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8))
snapmirror = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 9))
ndmp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 10))
fabric = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 11))
dafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12))
vi = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13))
backup = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14))
vfiler = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 16))
blocks = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17))
nfscache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18))
snapvault = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 19))
ftpd = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 20))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22))
sis = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 23))
compress = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 24))
productType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eisaBased", 1), ("pciBased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
if mibBuilder.loadTexts: productType.setDescription('The product type representing the target platform.')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
if mibBuilder.loadTexts: productVersion.setDescription('Version String for the Software Running on this platform.')
productId = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productId.setStatus('current')
if mibBuilder.loadTexts: productId.setDescription('The System ID of this system.')
productVendor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("dell", 2), ("ibm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVendor.setStatus('current')
if mibBuilder.loadTexts: productVendor.setDescription('The vendor id of this system, indicating the company that has supplied the product.')
productModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productModel.setStatus('current')
if mibBuilder.loadTexts: productModel.setDescription('The model name of the system. Examples are FAS980 and FAS3050.')
productFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: productFirmwareVersion.setDescription('Version string for the Firmware running on this platform.')
productGuiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productGuiUrl.setStatus('current')
if mibBuilder.loadTexts: productGuiUrl.setDescription('The complete URL used to access the administrative GUI for a browser-based interface.')
productApiUrl = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productApiUrl.setStatus('current')
if mibBuilder.loadTexts: productApiUrl.setDescription('The complete URL used to access the administrative API for a programmatic interface.')
productSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNum.setStatus('current')
if mibBuilder.loadTexts: productSerialNum.setDescription('The product serial number. Returns unknown if it cannot be determined.')
productPartnerSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPartnerSerialNum.setStatus('current')
if mibBuilder.loadTexts: productPartnerSerialNum.setDescription("The partner's serial number, not applicable if there is no partner, and unknown if it cannot be determined.")
productCPUArch = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x86", 1), ("alpha", 2), ("mips", 3), ("sparc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productCPUArch.setStatus('current')
if mibBuilder.loadTexts: productCPUArch.setDescription('The CPU architecture type of this appliance')
productTrapData = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTrapData.setStatus('current')
if mibBuilder.loadTexts: productTrapData.setDescription('This returns a static string. This object is used as a placeholder for enterprise traps.')
productMachineType = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMachineType.setStatus('current')
if mibBuilder.loadTexts: productMachineType.setDescription('The machine type of the system. Examples are FAS980 and FAS3050.')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 1))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 2))
cf = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 3))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 4))
nvram = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 5))
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 6))
autosupport = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 2, 7))
cpuUpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUpTime.setStatus('current')
if mibBuilder.loadTexts: cpuUpTime.setDescription('The time (in hundredths of a second) that the CPU has been up since the last boot.')
cpuBusyTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTime.setStatus('current')
if mibBuilder.loadTexts: cpuBusyTime.setDescription('The time (in hundredths of a second) that the CPU has been doing useful work since the last boot.')
cpuBusyTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuBusyTimePerCent.setStatus('current')
if mibBuilder.loadTexts: cpuBusyTimePerCent.setDescription('The percent of time that the CPU has been doing useful work since the last time a client requested the cpuBusyTimePerCent.')
cpuIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTime.setStatus('current')
if mibBuilder.loadTexts: cpuIdleTime.setDescription('The time (in hundredths of a second) that the CPU has been idle since the last boot.')
cpuIdleTimePerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIdleTimePerCent.setStatus('current')
if mibBuilder.loadTexts: cpuIdleTimePerCent.setDescription('The percent of time that the CPU has been idle since the last time a client requested the cpuBusyTimePerCent.')
cpuCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCount.setStatus('current')
if mibBuilder.loadTexts: cpuCount.setDescription('The number of CPUs in the system.')
cpuSwitchInvocations = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuSwitchInvocations.setStatus('current')
if mibBuilder.loadTexts: cpuSwitchInvocations.setDescription('The number of sk_switch invocations.')
cpuContextSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuContextSwitches.setStatus('current')
if mibBuilder.loadTexts: cpuContextSwitches.setDescription('The number of hardware context switches.')
cpuInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuInterrupts.setStatus('current')
if mibBuilder.loadTexts: cpuInterrupts.setDescription('The number of interrupts during a CP.')
cpuNonCPInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterrupts.setStatus('current')
if mibBuilder.loadTexts: cpuNonCPInterrupts.setDescription('The number of interrupts not during a CP.')
cpuCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCPInterruptPercent.setStatus('current')
if mibBuilder.loadTexts: cpuCPInterruptPercent.setDescription(' The percentage of time handling CP interrupts.')
cpuNonCPInterruptPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setStatus('current')
if mibBuilder.loadTexts: cpuNonCPInterruptPercent.setDescription(' The percentage of time handling non-cp interrupts.')
cpuTotalDomainSwitches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setStatus('current')
if mibBuilder.loadTexts: cpuTotalDomainSwitches.setDescription(' The total number of Domain Switches.')
miscNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNfsOps.setStatus('deprecated')
if mibBuilder.loadTexts: miscNfsOps.setDescription('The total number of Server side NFS calls since the last boot')
miscNetRcvdKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetRcvdKB.setStatus('deprecated')
if mibBuilder.loadTexts: miscNetRcvdKB.setDescription('The total number of KBytes received on all the network interfaces, since the last boot.')
miscNetSentKB = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscNetSentKB.setStatus('deprecated')
if mibBuilder.loadTexts: miscNetSentKB.setDescription('The total number of KBytes transmitted on all the network interfaces, since the last boot.')
miscGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: miscGlobalStatus.setDescription('This indicates the overall status of the appliance. The algorithm to determine the value uses both hardware status (e.g. the number of failed fans) and volume status (e.g. number of volumes that are full). The algorithm is subject to change in future releases, but the range of values will not change.')
miscHighNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNfsOps.setStatus('current')
if mibBuilder.loadTexts: miscHighNfsOps.setDescription('The total number of Server side NFS calls since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowNfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNfsOps.setStatus('current')
if mibBuilder.loadTexts: miscLowNfsOps.setDescription('The total number of Server side NFS calls since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighCifsOps.setStatus('current')
if mibBuilder.loadTexts: miscHighCifsOps.setDescription('The total number of Server side CIFS calls since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowCifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowCifsOps.setStatus('current')
if mibBuilder.loadTexts: miscLowCifsOps.setDescription('The total number of Server side CIFS calls since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighHttpOps.setStatus('current')
if mibBuilder.loadTexts: miscHighHttpOps.setDescription('The total number of HTTP operations received since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowHttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowHttpOps.setStatus('current')
if mibBuilder.loadTexts: miscLowHttpOps.setDescription('The total number of HTTP operations received since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: miscHighNetRcvdBytes.setDescription('The total number of bytes received on all the network interfaces, since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowNetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: miscLowNetRcvdBytes.setDescription('The total number of bytes received on all the network interfaces, since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighNetSentBytes.setStatus('current')
if mibBuilder.loadTexts: miscHighNetSentBytes.setDescription('The total number of bytes transmitted on all the network interfaces, since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowNetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowNetSentBytes.setStatus('current')
if mibBuilder.loadTexts: miscLowNetSentBytes.setDescription('The total number of bytes transmitted on all the network interfaces, since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskReadBytes.setStatus('current')
if mibBuilder.loadTexts: miscHighDiskReadBytes.setDescription('The total number of bytes read from disk since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowDiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskReadBytes.setStatus('current')
if mibBuilder.loadTexts: miscLowDiskReadBytes.setDescription('The total number of bytes read from disk since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setStatus('current')
if mibBuilder.loadTexts: miscHighDiskWriteBytes.setDescription('The total number of bytes written to disk since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowDiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setStatus('current')
if mibBuilder.loadTexts: miscLowDiskWriteBytes.setDescription('The total number of bytes written to disk since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeReadBytes.setStatus('current')
if mibBuilder.loadTexts: miscHighTapeReadBytes.setDescription('The total number of bytes read from tape since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowTapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeReadBytes.setStatus('current')
if mibBuilder.loadTexts: miscLowTapeReadBytes.setDescription('The total number of bytes read from tape since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscHighTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setStatus('current')
if mibBuilder.loadTexts: miscHighTapeWriteBytes.setDescription('The total number of bytes written to tape since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
miscLowTapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setStatus('current')
if mibBuilder.loadTexts: miscLowTapeWriteBytes.setDescription('The total number of bytes written to tape since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
miscCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCacheAge.setStatus('current')
if mibBuilder.loadTexts: miscCacheAge.setDescription("Age in minutes of the oldest read-only blocks in the buffer cache. This indicates how fast read operations are cycling through system memory; when the appliance is reading very large files (larger than the machine's memory size), buffer cache age will be very low.")
miscCorrectedMachineChecks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setStatus('current')
if mibBuilder.loadTexts: miscCorrectedMachineChecks.setDescription('Number of corrected machine checks since the last boot.')
miscGlobalStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscGlobalStatusMessage.setStatus('current')
if mibBuilder.loadTexts: miscGlobalStatusMessage.setDescription('A string describing the global status, including a description of the condition (if any) that caused the status to be anything other than ok(3).')
miscWindowsSetupWizardVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setStatus('current')
if mibBuilder.loadTexts: miscWindowsSetupWizardVersion.setDescription('The version number of Windows Setup Wizard required to configure the appliance. Windows Setup Wizard with a version number lower than this integer is not capable of configuring the appliance.')
misc64NfsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NfsOps.setStatus('current')
if mibBuilder.loadTexts: misc64NfsOps.setDescription('The total number of Server side NFS calls since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64CifsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64CifsOps.setStatus('current')
if mibBuilder.loadTexts: misc64CifsOps.setDescription('The total number of Server side CIFS calls since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64HttpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64HttpOps.setStatus('current')
if mibBuilder.loadTexts: misc64HttpOps.setDescription('The total number of HTTP operations received since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64NetRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NetRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: misc64NetRcvdBytes.setDescription('The total number of bytes received on all the network interfaces, since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64NetSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64NetSentBytes.setStatus('current')
if mibBuilder.loadTexts: misc64NetSentBytes.setDescription('The total number of bytes transmitted on all the network interfaces, since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64DiskReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64DiskReadBytes.setStatus('current')
if mibBuilder.loadTexts: misc64DiskReadBytes.setDescription('The total number of bytes read from disk since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64DiskWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64DiskWriteBytes.setStatus('current')
if mibBuilder.loadTexts: misc64DiskWriteBytes.setDescription('The total number of bytes written to disk since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64TapeReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64TapeReadBytes.setStatus('current')
if mibBuilder.loadTexts: misc64TapeReadBytes.setDescription('The total number of bytes read from tape since the last boot. This object returns all of the 64 bit unsigned integer.')
misc64TapeWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 2, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: misc64TapeWriteBytes.setStatus('current')
if mibBuilder.loadTexts: misc64TapeWriteBytes.setDescription('The total number of bytes written to tape since the last boot. This object returns all of the 64 bit unsigned integer.')
cfSettings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("enabled", 2), ("disabled", 3), ("takeoverByPartnerDisabled", 4), ("thisNodeDead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSettings.setStatus('current')
if mibBuilder.loadTexts: cfSettings.setDescription('Clustered Failover configuration settings. The value notConfigured(1) indicates that the cluster is not licensed. The thisNodeDead(5) setting indicates that this node has been taken over.')
cfState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dead", 1), ("canTakeover", 2), ("cannotTakeover", 3), ("takeover", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfState.setStatus('current')
if mibBuilder.loadTexts: cfState.setDescription('Clustered Failover state.')
cfCannotTakeoverCause = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("unknownReason", 2), ("disabledByOperator", 3), ("interconnectOffline", 4), ("disabledByPartner", 5), ("takeoverFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCannotTakeoverCause.setStatus('current')
if mibBuilder.loadTexts: cfCannotTakeoverCause.setDescription('The reason this node cannot takeover its partner')
cfPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maybeDown", 1), ("ok", 2), ("dead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerStatus.setStatus('current')
if mibBuilder.loadTexts: cfPartnerStatus.setDescription('This is the status last returned by the Clustered Failover partner.')
cfPartnerLastStatusUpdate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setStatus('current')
if mibBuilder.loadTexts: cfPartnerLastStatusUpdate.setDescription('If non-zero, the absolute time of the last update from the Clustered Failover partner.')
cfPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerName.setStatus('current')
if mibBuilder.loadTexts: cfPartnerName.setDescription('Hostname for Clustered Failover partner.')
cfPartnerSysid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPartnerSysid.setStatus('current')
if mibBuilder.loadTexts: cfPartnerSysid.setDescription('System ID for Clustered Failover partner.')
cfInterconnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("down", 2), ("partialFailure", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfInterconnectStatus.setStatus('current')
if mibBuilder.loadTexts: cfInterconnectStatus.setDescription('The current status of the interconnect. The partialFailure(3) status indicates that one of the links in the interconnect hardware is down.')
envOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envOverTemperature.setStatus('current')
if mibBuilder.loadTexts: envOverTemperature.setDescription('An indication of whether the hardware is currently operating outside of its recommended temperature range. The hardware will shutdown if the temperature exceeds critical thresholds.')
envFailedFanCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanCount.setStatus('current')
if mibBuilder.loadTexts: envFailedFanCount.setDescription('Count of the number of chassis fans which are not operating within the recommended RPM range.')
envFailedFanMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedFanMessage.setStatus('current')
if mibBuilder.loadTexts: envFailedFanMessage.setDescription('Text message describing the current condition of chassis fans. This is useful only if envFailedFanCount is not zero.')
envFailedPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setStatus('current')
if mibBuilder.loadTexts: envFailedPowerSupplyCount.setDescription('Count of the number of power supplies which are in degraded mode.')
envFailedPowerSupplyMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setStatus('current')
if mibBuilder.loadTexts: envFailedPowerSupplyMessage.setDescription('Text message describing the state of any power supplies which are currently degraded. This is useful only if envFailedPowerSupplyCount is not zero.')
nvramBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("partiallyDischarged", 2), ("fullyDischarged", 3), ("notPresent", 4), ("nearEndOfLife", 5), ("atEndOfLife", 6), ("unknown", 7), ("overCharged", 8), ("fullyCharged", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvramBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: nvramBatteryStatus.setDescription("An indication of the current status of the NVRAM battery or batteries. Batteries which are fully or partially discharged may not fully protect the system during a crash. The end-of-life status values are based on the manufacturer's recommended life for the batteries.")
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTime.setStatus('current')
if mibBuilder.loadTexts: cpTime.setDescription('The time (in hundredths of a second) since boot during which the system has had a consistency point (cp) operation in progress.')
cpFromTimerOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromTimerOps.setStatus('current')
if mibBuilder.loadTexts: cpFromTimerOps.setDescription('The number of consistency point operations since boot that were caused by timer.')
cpFromSnapshotOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSnapshotOps.setStatus('current')
if mibBuilder.loadTexts: cpFromSnapshotOps.setDescription('The number of consistency point operations since boot that were caused by snapshot operation.')
cpFromLowWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowWaterOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowWaterOps.setDescription('The number of consistency point operations since boot that were caused by low water mark.')
cpFromHighWaterOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromHighWaterOps.setStatus('current')
if mibBuilder.loadTexts: cpFromHighWaterOps.setDescription('The number of consistency point operations since boot that were caused by high water mark.')
cpFromLogFullOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLogFullOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLogFullOps.setDescription('The number of consistency point operations since boot that were caused by nv-log full.')
cpFromCpOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpOps.setStatus('current')
if mibBuilder.loadTexts: cpFromCpOps.setDescription('The number of back to back consistency point operations since boot.')
cpTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotalOps.setStatus('current')
if mibBuilder.loadTexts: cpTotalOps.setDescription('The total number of consistency point operations since boot.')
cpFromFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromFlushOps.setStatus('current')
if mibBuilder.loadTexts: cpFromFlushOps.setDescription('The number of consistency point operations since boot that were caused by flushing unlogged write data.')
cpFromSyncOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromSyncOps.setStatus('current')
if mibBuilder.loadTexts: cpFromSyncOps.setDescription('The number of consistency point operations since boot that were caused by file system sync requests.')
cpFromLowVbufOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowVbufOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowVbufOps.setDescription('The number of consistency point operations since boot that were caused by low virtual buffers.')
cpFromCpDeferredOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromCpDeferredOps.setStatus('current')
if mibBuilder.loadTexts: cpFromCpDeferredOps.setDescription('The number of back to back consistency point operations since boot that were deferred.')
cpFromLowDatavecsOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setStatus('current')
if mibBuilder.loadTexts: cpFromLowDatavecsOps.setDescription('The number of consistency point operations since boot that were caused by low datavecs.')
autosupportStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("smtpFailure", 2), ("postFailure", 3), ("smtpPostFailure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatus.setStatus('current')
if mibBuilder.loadTexts: autosupportStatus.setDescription('An indication of the current status of autosupport on the appliance. describes the success or failure of most recent attempts to send autosupports.')
autosupportStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportStatusMessage.setStatus('current')
if mibBuilder.loadTexts: autosupportStatusMessage.setDescription('A string describing the autosupport status, including a description of the condition (if any) that caused the status to be anything other than ok(1).')
autosupportSuccessfulSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportSuccessfulSends.setStatus('current')
if mibBuilder.loadTexts: autosupportSuccessfulSends.setDescription('Count of the number of autosupport messages successfully sent since the last reset.')
autosupportFailedSends = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autosupportFailedSends.setStatus('current')
if mibBuilder.loadTexts: autosupportFailedSends.setDescription('Count of the number of autosupport messages not sent successfully since the last reset.')
curNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1))
totNfs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2))
nfsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 3))
rpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1))
nfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2))
nfsPerClient = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3))
rpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcCalls.setStatus('current')
if mibBuilder.loadTexts: rpcCalls.setDescription('The total number of RPC calls received, since the last time the statistics were cleared.')
rpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadCalls.setStatus('current')
if mibBuilder.loadTexts: rpcBadCalls.setDescription('The total number of calls rejected by the RPC layer, since the last time the statistics were cleared.')
rpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcNullRecvs.setStatus('current')
if mibBuilder.loadTexts: rpcNullRecvs.setDescription('The number of times an RPC call was not available when it was thought to be received, since the last time the statistics were cleared.')
rpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcBadLens.setStatus('current')
if mibBuilder.loadTexts: rpcBadLens.setDescription('The number of RPC calls received with a length shorter than a minimum-sized RPC call, since the last time the statistics were cleared.')
rpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: rpcServXDRCalls.setDescription('The number of RPC calls received whose header could not be XDR decoded, since the last time the statistics were cleared.')
rcpTcpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpCalls.setStatus('current')
if mibBuilder.loadTexts: rcpTcpCalls.setDescription('The total number of RPC calls received for the TCP protocol, since the last time the statistics were cleared.')
rcpTcpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadCalls.setStatus('current')
if mibBuilder.loadTexts: rcpTcpBadCalls.setDescription('The total number of calls rejected by the RPC layer for the TCP protocol, since the last time the statistics were cleared.')
rcpTcpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpNullRecvs.setStatus('current')
if mibBuilder.loadTexts: rcpTcpNullRecvs.setDescription('The number of times an RPC call for the TCP protocol was not available when it was thought to be received, since the last time the statistics were cleared.')
rcpTcpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpBadLens.setStatus('current')
if mibBuilder.loadTexts: rcpTcpBadLens.setDescription('The number of RPC calls for the TCP protocol received with a length shorter than a minimum-sized RPC call, since the last time the statistics were cleared.')
rcpTcpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: rcpTcpServXDRCalls.setDescription('The number of RPC calls for the TCP protocol received whose header could not be XDR decoded, since the last time the statistics were cleared.')
rpcUdpCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpCalls.setStatus('current')
if mibBuilder.loadTexts: rpcUdpCalls.setDescription('The total number of RPC calls received for the UDP protocol, since the last time the statistics were cleared.')
rpcUdpBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadCalls.setStatus('current')
if mibBuilder.loadTexts: rpcUdpBadCalls.setDescription('The total number of calls rejected by the RPC layer for the UDP protocol, since the last time the statistics were cleared.')
rpcUdpNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpNullRecvs.setStatus('current')
if mibBuilder.loadTexts: rpcUdpNullRecvs.setDescription('The number of times an RPC call for the UDP protocol was not available when it was thought to be received, since the last time the statistics were cleared.')
rpcUdpBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpBadLens.setStatus('current')
if mibBuilder.loadTexts: rpcUdpBadLens.setDescription('The number of RPC calls for the UDP protocol received with a length shorter than a minimum-sized RPC call, since the last time the statistics were cleared.')
rpcUdpServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: rpcUdpServXDRCalls.setDescription('The number of RPC calls for the UDP protocol received whose header could not be XDR decoded, since the last time the statistics were cleared.')
nfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCalls.setStatus('current')
if mibBuilder.loadTexts: nfsCalls.setDescription('The total number of NFS calls received, since the last time the statistics were cleared.')
nfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsServBadCalls.setStatus('current')
if mibBuilder.loadTexts: nfsServBadCalls.setDescription('The total number of received NFS calls rejected, since the last time the statistics were cleared.')
nfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3))
nfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4))
replyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5))
nfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6))
v2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1))
v2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2))
v2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3))
v2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4))
v2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cNulls.setStatus('current')
if mibBuilder.loadTexts: v2cNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure, since the last time the statistics were cleared.')
v2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure, since the last time the statistics were cleared.')
v2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure, since the last time the statistics were cleared.')
v2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRoots.setStatus('current')
if mibBuilder.loadTexts: v2cRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure, since the last time the statistics were cleared.')
v2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLookups.setStatus('current')
if mibBuilder.loadTexts: v2cLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure, since the last time the statistics were cleared.')
v2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2cReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure, since the last time the statistics were cleared.')
v2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReads.setStatus('current')
if mibBuilder.loadTexts: v2cReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure, since the last time the statistics were cleared.')
v2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2cWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure, since the last time the statistics were cleared.')
v2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cWrites.setStatus('current')
if mibBuilder.loadTexts: v2cWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure, since the last time the statistics were cleared.')
v2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cCreates.setStatus('current')
if mibBuilder.loadTexts: v2cCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure, since the last time the statistics were cleared.')
v2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRemoves.setStatus('current')
if mibBuilder.loadTexts: v2cRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure, since the last time the statistics were cleared.')
v2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRenames.setStatus('current')
if mibBuilder.loadTexts: v2cRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure, since the last time the statistics were cleared.')
v2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cLinks.setStatus('current')
if mibBuilder.loadTexts: v2cLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure, since the last time the statistics were cleared.')
v2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2cSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, since the last time the statistics were cleared.')
v2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2cMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure, since the last time the statistics were cleared.')
v2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2cRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure, since the last time the statistics were cleared.')
v2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2cReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure, since the last time the statistics were cleared.')
v2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cStatfss.setStatus('current')
if mibBuilder.loadTexts: v2cStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, since the last time the statistics were cleared.')
v2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pNulls.setStatus('current')
if mibBuilder.loadTexts: v2pNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2pGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2pSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRoots.setStatus('current')
if mibBuilder.loadTexts: v2pRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLookups.setStatus('current')
if mibBuilder.loadTexts: v2pLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2pReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReads.setStatus('current')
if mibBuilder.loadTexts: v2pReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2pWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pWrites.setStatus('current')
if mibBuilder.loadTexts: v2pWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pCreates.setStatus('current')
if mibBuilder.loadTexts: v2pCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRemoves.setStatus('current')
if mibBuilder.loadTexts: v2pRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRenames.setStatus('current')
if mibBuilder.loadTexts: v2pRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pLinks.setStatus('current')
if mibBuilder.loadTexts: v2pLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2pSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2pMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2pRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2pReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2pStatfss.setStatus('current')
if mibBuilder.loadTexts: v2pStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure as a percentage of total NFS calls received, since the last time the statistics were cleared.')
v2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccNulls.setStatus('current')
if mibBuilder.loadTexts: v2ccNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2ccGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2ccSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRoots.setStatus('current')
if mibBuilder.loadTexts: v2ccRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLookups.setStatus('current')
if mibBuilder.loadTexts: v2ccLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2ccReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReads.setStatus('current')
if mibBuilder.loadTexts: v2ccReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2ccWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccWrites.setStatus('current')
if mibBuilder.loadTexts: v2ccWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccCreates.setStatus('current')
if mibBuilder.loadTexts: v2ccCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRemoves.setStatus('current')
if mibBuilder.loadTexts: v2ccRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRenames.setStatus('current')
if mibBuilder.loadTexts: v2ccRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccLinks.setStatus('current')
if mibBuilder.loadTexts: v2ccLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2ccSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2ccMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2ccRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2ccReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2ccStatfss.setStatus('current')
if mibBuilder.loadTexts: v2ccStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpNulls.setStatus('current')
if mibBuilder.loadTexts: v2cpNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cpGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: v2cpSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRoots.setStatus('current')
if mibBuilder.loadTexts: v2cpRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLookups.setStatus('current')
if mibBuilder.loadTexts: v2cpLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: v2cpReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReads.setStatus('current')
if mibBuilder.loadTexts: v2cpReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrcaches.setStatus('current')
if mibBuilder.loadTexts: v2cpWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpWrites.setStatus('current')
if mibBuilder.loadTexts: v2cpWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpCreates.setStatus('current')
if mibBuilder.loadTexts: v2cpCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRemoves.setStatus('current')
if mibBuilder.loadTexts: v2cpRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRenames.setStatus('current')
if mibBuilder.loadTexts: v2cpRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpLinks.setStatus('current')
if mibBuilder.loadTexts: v2cpLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: v2cpSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: v2cpMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: v2cpRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: v2cpReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2cpStatfss.setStatus('current')
if mibBuilder.loadTexts: v2cpStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1))
v3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2))
v3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3))
v3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4))
v3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cNulls.setStatus('current')
if mibBuilder.loadTexts: v3cNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, since the last time the statistics were cleared.')
v3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, since the last time the statistics were cleared.')
v3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, since the last time the statistics were cleared.')
v3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLookups.setStatus('current')
if mibBuilder.loadTexts: v3cLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, since the last time the statistics were cleared.')
v3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cAccesss.setStatus('current')
if mibBuilder.loadTexts: v3cAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, since the last time the statistics were cleared.')
v3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3cReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, since the last time the statistics were cleared.')
v3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReads.setStatus('current')
if mibBuilder.loadTexts: v3cReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, since the last time the statistics were cleared.')
v3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cWrites.setStatus('current')
if mibBuilder.loadTexts: v3cWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, since the last time the statistics were cleared.')
v3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCreates.setStatus('current')
if mibBuilder.loadTexts: v3cCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, since the last time the statistics were cleared.')
v3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3cMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, since the last time the statistics were cleared.')
v3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3cSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, since the last time the statistics were cleared.')
v3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cMknods.setStatus('current')
if mibBuilder.loadTexts: v3cMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, since the last time the statistics were cleared.')
v3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRemoves.setStatus('current')
if mibBuilder.loadTexts: v3cRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, since the last time the statistics were cleared.')
v3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3cRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, since the last time the statistics were cleared.')
v3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cRenames.setStatus('current')
if mibBuilder.loadTexts: v3cRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, since the last time the statistics were cleared.')
v3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cLinks.setStatus('current')
if mibBuilder.loadTexts: v3cLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, since the last time the statistics were cleared.')
v3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3cReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, since the last time the statistics were cleared.')
v3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3cReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, since the last time the statistics were cleared.')
v3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsstats.setStatus('current')
if mibBuilder.loadTexts: v3cFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, since the last time the statistics were cleared.')
v3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3cFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, since the last time the statistics were cleared.')
v3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3cPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, since the last time the statistics were cleared.')
v3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cCommits.setStatus('current')
if mibBuilder.loadTexts: v3cCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, since the last time the statistics were cleared.')
v3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pNulls.setStatus('current')
if mibBuilder.loadTexts: v3pNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3pGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3pSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLookups.setStatus('current')
if mibBuilder.loadTexts: v3pLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pAccesss.setStatus('current')
if mibBuilder.loadTexts: v3pAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3pReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReads.setStatus('current')
if mibBuilder.loadTexts: v3pReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pWrites.setStatus('current')
if mibBuilder.loadTexts: v3pWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCreates.setStatus('current')
if mibBuilder.loadTexts: v3pCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3pMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3pSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pMknods.setStatus('current')
if mibBuilder.loadTexts: v3pMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRemoves.setStatus('current')
if mibBuilder.loadTexts: v3pRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3pRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pRenames.setStatus('current')
if mibBuilder.loadTexts: v3pRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pLinks.setStatus('current')
if mibBuilder.loadTexts: v3pLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3pReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3pReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsstats.setStatus('current')
if mibBuilder.loadTexts: v3pFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3pFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3pPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3pCommits.setStatus('current')
if mibBuilder.loadTexts: v3pCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, as a percentage of the total NFS calls received, since the last time the statistics were cleared.')
v3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccNulls.setStatus('current')
if mibBuilder.loadTexts: v3ccNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3ccGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3ccSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLookups.setStatus('current')
if mibBuilder.loadTexts: v3ccLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccAccesss.setStatus('current')
if mibBuilder.loadTexts: v3ccAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3ccReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReads.setStatus('current')
if mibBuilder.loadTexts: v3ccReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccWrites.setStatus('current')
if mibBuilder.loadTexts: v3ccWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCreates.setStatus('current')
if mibBuilder.loadTexts: v3ccCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3ccMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3ccSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccMknods.setStatus('current')
if mibBuilder.loadTexts: v3ccMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRemoves.setStatus('current')
if mibBuilder.loadTexts: v3ccRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3ccRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccRenames.setStatus('current')
if mibBuilder.loadTexts: v3ccRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccLinks.setStatus('current')
if mibBuilder.loadTexts: v3ccLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3ccReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3ccReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsstats.setStatus('current')
if mibBuilder.loadTexts: v3ccFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3ccFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3ccPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3ccCommits.setStatus('current')
if mibBuilder.loadTexts: v3ccCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, that did not result in the filesystem blocking to read from disk, since the last time the statistics were cleared.')
v3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpNulls.setStatus('current')
if mibBuilder.loadTexts: v3cpNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cpGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: v3cpSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLookups.setStatus('current')
if mibBuilder.loadTexts: v3cpLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpAccesss.setStatus('current')
if mibBuilder.loadTexts: v3cpAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: v3cpReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReads.setStatus('current')
if mibBuilder.loadTexts: v3cpReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpWrites.setStatus('current')
if mibBuilder.loadTexts: v3cpWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCreates.setStatus('current')
if mibBuilder.loadTexts: v3cpCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: v3cpMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: v3cpSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpMknods.setStatus('current')
if mibBuilder.loadTexts: v3cpMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRemoves.setStatus('current')
if mibBuilder.loadTexts: v3cpRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: v3cpRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpRenames.setStatus('current')
if mibBuilder.loadTexts: v3cpRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpLinks.setStatus('current')
if mibBuilder.loadTexts: v3cpLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: v3cpReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: v3cpReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsstats.setStatus('current')
if mibBuilder.loadTexts: v3cpFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpFsinfos.setStatus('current')
if mibBuilder.loadTexts: v3cpFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpPathconfs.setStatus('current')
if mibBuilder.loadTexts: v3cpPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
v3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3cpCommits.setStatus('current')
if mibBuilder.loadTexts: v3cpCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last time the statistics were cleared.')
rcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcInProgressHits.setStatus('current')
if mibBuilder.loadTexts: rcInProgressHits.setDescription('The number of NFS requests that were dropped, for calls already in progress, since the last time the statistics were cleared.')
rcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcDelayHits.setDescription('The number of NFS requests that were dropped, for replies already generated within a short interval, since the last time the statistics were cleared. These stats are deprecated. A value of zero will always be returned for these stats.')
rcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMisses.setStatus('current')
if mibBuilder.loadTexts: rcMisses.setDescription('The number of NFS requests received for which there were no corresponding entries already in the Reply Cache, since the last time the statistics were cleared.')
rcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcNonIdemDoneHits.setDescription('The number of NFS requests received that resulted in replies being replayed from the Reply Cache, since the last time the statistics were cleared.')
rcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcNonIdemNotDoneHits.setDescription('The number of NFS requests received for calls that resulted in this request being processed as a new request even when a corresponding entry existed in the Reply Cache, since the last time the statistics were cleared.')
rcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: rcTcpInProgressHits.setDescription('The number of NFS requests that were dropped for the TCP protocol, for calls already in progress, since the last time the statistics were cleared.')
rcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcTcpDelayHits.setDescription('The number of NFS requests that were dropped for the TCP protocol, for replies already generated within a short interval, since the last time the statistics were cleared. These stats are deprecated. A value of zero will always be returned for these stats.')
rcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpMisses.setStatus('current')
if mibBuilder.loadTexts: rcTcpMisses.setDescription('The number of NFS requests received for the TCP protocol for which there were no corresponding entries already in the Reply Cache, since the last time the statistics were cleared.')
rcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcTcpNonIdemDoneHits.setDescription('The number of NFS requests received for the TCP protocol that resulted in replies being replayed from the Reply Cache, since the last time the statistics were cleared.')
rcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcTcpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the TCP protocol for calls that resulted in this request being processed as a new request even when a corresponding entry existed in the Reply Cache, since the last time the statistics were cleared.')
rcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: rcUdpInProgressHits.setDescription('The number of NFS requests that were dropped for the UDP protocol, for calls already in progress, since the last time the statistics were cleared.')
rcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: rcUdpDelayHits.setDescription('The number of NFS requests that were dropped for the UDP protocol, for replies already generated within a short interval, since the last time the statistics were cleared. These stats are deprecated. A value of zero will always be returned for these stats.')
rcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpMisses.setStatus('current')
if mibBuilder.loadTexts: rcUdpMisses.setDescription('The number of NFS requests received for the UDP protocol for which there were no corresponding entries already in the Reply Cache, since the last time the statistics were cleared.')
rcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcUdpNonIdemDoneHits.setDescription('The number of NFS requests received for the UDP protocol that resulted in replies being replayed from the Reply Cache, since the last time the statistics were cleared.')
rcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: rcUdpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the UDP protocol for calls that resulted in this request being processed as a new request even when a corresponding entry existed in the Reply Cache, since the last time the statistics were cleared.')
v2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1))
v2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2))
v3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3))
v3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4))
v2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read512Calls.setStatus('current')
if mibBuilder.loadTexts: v2Read512Calls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 0-511 bytes.')
v2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read1KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 512-1023 bytes.')
v2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read2KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 1K-2047 bytes.')
v2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read4KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 2K-4095 bytes.')
v2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read8KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 4K-8191 bytes.')
v2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read16KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 8K-16383 bytes.')
v2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read32KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 16K-32767 bytes.')
v2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read64KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 32K-65535 bytes.')
v2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Read128KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last zeroing with request sizes between 64K-131071 bytes.')
v2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write512Calls.setStatus('current')
if mibBuilder.loadTexts: v2Write512Calls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 0-511 bytes.')
v2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write1KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 512-1023 bytes.')
v2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write2KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 1K-2047 bytes.')
v2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write4KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 2K-4095 bytes.')
v2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write8KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 4K-8191 bytes.')
v2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write16KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 8K-16383 bytes.')
v2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write32KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 16K-32767 bytes.')
v2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write64KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 32K-65535 bytes.')
v2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v2Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: v2Write128KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last zeroing with request sizes between 64K-131071 bytes.')
v3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read512Calls.setStatus('current')
if mibBuilder.loadTexts: v3Read512Calls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 0-511 bytes.')
v3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read1KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 512-1023 bytes.')
v3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read2KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 1K-2047 bytes.')
v3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read4KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 2K-4095 bytes.')
v3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read8KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 4K-8191 bytes.')
v3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read16KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 8K-16383 bytes.')
v3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read32KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 16K-32767 bytes.')
v3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read64KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 32K-65535 bytes.')
v3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Read128KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last zeroing with request sizes between 64K-131071 bytes.')
v3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write512Calls.setStatus('current')
if mibBuilder.loadTexts: v3Write512Calls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 0-511 bytes.')
v3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write1KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 512-1023 bytes.')
v3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write2KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 1K-2047 bytes.')
v3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write4KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 2K-4095 bytes.')
v3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write8KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 4K-8191 bytes.')
v3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write16KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 8K-16383 bytes.')
v3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write32KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 16K-32767 bytes.')
v3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write64KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 32K-65535 bytes.')
v3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v3Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: v3Write128KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last zeroing with request sizes between 64K-131071 bytes.')
pclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: pclTable.setStatus('current')
if mibBuilder.loadTexts: pclTable.setDescription('Provide a report of per-client NFS statistics since the last time the statistics were cleared.')
pclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "pclIpAddr"))
if mibBuilder.loadTexts: pclEntry.setStatus('current')
if mibBuilder.loadTexts: pclEntry.setDescription('Provide a report of NFS statistics for the referenced NFS client since the last time the statistics were cleared.')
pclIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclIpAddr.setStatus('current')
if mibBuilder.loadTexts: pclIpAddr.setDescription('The IP address of the referenced client.')
pclRpcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcCalls.setStatus('current')
if mibBuilder.loadTexts: pclRpcCalls.setDescription('The total number of RPC calls received from the referenced client, since the last time the statistics were cleared.')
pclRpcBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadCalls.setStatus('current')
if mibBuilder.loadTexts: pclRpcBadCalls.setDescription('The total number of calls received from the referenced client that were rejected by the RPC layer, since the last time the statistics were cleared.')
pclRpcNullRecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcNullRecvs.setStatus('current')
if mibBuilder.loadTexts: pclRpcNullRecvs.setDescription('The number of times an RPC call was not available when it was thought to be received from referenced client, since the last time the statistics were cleared.')
pclRpcBadLens = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcBadLens.setStatus('current')
if mibBuilder.loadTexts: pclRpcBadLens.setDescription('The number of RPC calls received from the referenced client with a length shorter than a minimum-sized RPC call, since the last time the statistics were cleared.')
pclRpcServXDRCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclRpcServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: pclRpcServXDRCalls.setDescription('The number of RPC calls received from the referenced client whose header could not be XDR decoded, since the last time the statistics were cleared.')
pclNfsCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsCalls.setDescription('The total number of NFS calls received from the referenced client, since the last time the statistics were cleared.')
pclNfsServBadCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsServBadCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsServBadCalls.setDescription('The total number of NFS calls received from the referenced client that were rejected, since the last time the statistics were cleared.')
pclNfsV2Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Nulls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Nulls.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_NULL (Do Nothing) procedure, since the last time the statistics were cleared.')
pclNfsV2Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Getattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Getattrs.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_GETATTR (Get File Attributes) procedure, since the last time the statistics were cleared.')
pclNfsV2Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Setattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Setattrs.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_SETATTR (Set File Attributes) procedure, since the last time the statistics were cleared.')
pclNfsV2Roots = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Roots.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Roots.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_ROOT (Get Filesystem Root) procedure, since the last time the statistics were cleared.')
pclNfsV2Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Lookups.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Lookups.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_LOOKUP (Look Up File Name) procedure, since the last time the statistics were cleared.')
pclNfsV2Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Readlinks.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_READLINK (Read From Symbolic Link) procedure, since the last time the statistics were cleared.')
pclNfsV2Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Reads.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Reads.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_READ (Read From File) procedure, since the last time the statistics were cleared.')
pclNfsV2Wrcaches = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Wrcaches.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_WRITECACHE (Write to Cache) procedure, since the last time the statistics were cleared.')
pclNfsV2Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Writes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Writes.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_WRITE (Write to File) procedure, since the last time the statistics were cleared.')
pclNfsV2Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Creates.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Creates.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_CREATE (Create File) procedure, since the last time the statistics were cleared.')
pclNfsV2Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Removes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Removes.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_REMOVE (Remove File) procedure, since the last time the statistics were cleared.')
pclNfsV2Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Renames.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Renames.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_RENAME (Rename File) procedure, since the last time the statistics were cleared.')
pclNfsV2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Links.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Links.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_LINK (Create Link to File) procedure, since the last time the statistics were cleared.')
pclNfsV2Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Symlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Symlinks.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, since the last time the statistics were cleared.')
pclNfsV2Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Mkdirs.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_MKDIR (Create Directory) procedure, since the last time the statistics were cleared.')
pclNfsV2Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Rmdirs.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_RMDIR (Remove Directory) procedure, since the last time the statistics were cleared.')
pclNfsV2Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Readdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Readdirs.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_READDIR (Read From Directory) procedure, since the last time the statistics were cleared.')
pclNfsV2Statfss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Statfss.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Statfss.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, since the last time the statistics were cleared.')
pclNfsV3Nulls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Nulls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Nulls.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_NULL (Do Nothing) procedure, since the last time the statistics were cleared.')
pclNfsV3Getattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Getattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Getattrs.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_GETATTR (Get File Attributes) procedure, since the last time the statistics were cleared.')
pclNfsV3Setattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Setattrs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Setattrs.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_SETATTR (Set File Attributes) procedure, since the last time the statistics were cleared.')
pclNfsV3Lookups = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Lookups.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Lookups.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_LOOKUP (Lookup Filename) procedure, since the last time the statistics were cleared.')
pclNfsV3Accesss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Accesss.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Accesss.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_ACCESS (Check Access Permission) procedure, since the last time the statistics were cleared.')
pclNfsV3Readlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Readlinks.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, since the last time the statistics were cleared.')
pclNfsV3Reads = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Reads.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Reads.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READ (Read From File) procedure, since the last time the statistics were cleared.')
pclNfsV3Writes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Writes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Writes.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_WRITE (Write to File) procedure, since the last time the statistics were cleared.')
pclNfsV3Creates = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Creates.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Creates.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_CREATE (Create a File) procedure, since the last time the statistics were cleared.')
pclNfsV3Mkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Mkdirs.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_MKDIR (Create a Directory) procedure, since the last time the statistics were cleared.')
pclNfsV3Symlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Symlinks.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Symlinks.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, since the last time the statistics were cleared.')
pclNfsV3Mknods = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Mknods.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Mknods.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_MKNOD (Create a Special Device) procedure, since the last time the statistics were cleared.')
pclNfsV3Removes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Removes.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Removes.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_REMOVE (Remove a File) procedure, since the last time the statistics were cleared.')
pclNfsV3Rmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Rmdirs.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_RMDIR (Remove a Directory) procedure, since the last time the statistics were cleared.')
pclNfsV3Renames = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Renames.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Renames.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_RENAME (Rename a File or Directory) procedure, since the last time the statistics were cleared.')
pclNfsV3Links = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Links.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Links.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_LINK (Create Link to an Object) procedure, since the last time the statistics were cleared.')
pclNfsV3Readdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Readdirs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Readdirs.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READDIR (Read From Directory) procedure, since the last time the statistics were cleared.')
pclNfsV3ReaddirPluss = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReaddirPluss.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, since the last time the statistics were cleared.')
pclNfsV3Fsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsstats.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Fsstats.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, since the last time the statistics were cleared.')
pclNfsV3Fsinfos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Fsinfos.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_FSINFO (Get Static File System Information) procedure, since the last time the statistics were cleared.')
pclNfsV3Pathconfs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Pathconfs.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, since the last time the statistics were cleared.')
pclNfsV3Commits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Commits.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Commits.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, since the last time the statistics were cleared.')
pclPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclPerCent.setStatus('current')
if mibBuilder.loadTexts: pclPerCent.setDescription('The number of the total NFS calls for the referenced client as a percentage of the total NFS calls received from all clients, since the last time the statistics were cleared.')
pclNfsV2NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2NullPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_NULL (Do Nothing) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2GetattrPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_GETATTR (Get File Attributes) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2SetattrPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_SETATTR (Set File Attributes) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2RootPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RootPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_ROOT (Get Filesystem Root) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2LookupPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_LOOKUP (Look Up File Name) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2ReadlinkPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_READLINK (Read From Symbolic Link) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2ReadPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_READ (Read From File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2WrcachePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2WrcachePerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_WRITECACHE (Write to Cache) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2WritePerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_WRITE (Write to File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2CreatePerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_CREATE (Create File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RemovePerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_REMOVE (Remove File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RenamePerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_RENAME (Rename File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2LinkPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_LINK (Create Link to File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2SymlinkPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2MkdirPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_MKDIR (Create Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2RmdirPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_RMDIR (Remove Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2ReaddirPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_READDIR (Read From Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2StatfsPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2StatfsPerCent.setDescription('The number of NFS Version 2 calls received from the referenced client for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3NullPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3NullPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_NULL (Do Nothing) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3GetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3GetattrPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_GETATTR (Get File Attributes) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3SetattrPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3SetattrPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_SETATTR (Set File Attributes) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3LookupPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3LookupPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_LOOKUP (Lookup Filename) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3AccessPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3AccessPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_ACCESS (Check Access Permission) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3ReadlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReadlinkPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3ReadPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReadPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READ (Read From File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3WritePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3WritePerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_WRITE (Write to File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3CreatePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3CreatePerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_CREATE (Create a File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3MkdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3MkdirPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_MKDIR (Create a Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3SymlinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3SymlinkPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3MknodPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3MknodPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_MKNOD (Create a Special Device) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3RemovePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3RemovePerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_REMOVE (Remove a File) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3RmdirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3RmdirPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_RMDIR (Remove a Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3RenamePerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3RenamePerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_RENAME (Rename a File or Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3LinkPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3LinkPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_LINK (Create Link to an Object) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3ReaddirPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReaddirPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READDIR (Read From Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3ReaddirPlusPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3ReaddirPlusPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3FsstatPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3FsstatPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3FsinfoPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3FsinfoPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_FSINFO (Get Static File System Information) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3PathconfPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3PathconfPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV3CommitPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3CommitPerCent.setDescription('The number of NFS Version 3 calls received from the referenced client for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, as a percentage of the total calls received from this client, since the last time the statistics were cleared.')
pclNfsV2Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read512Calls.setDescription('The number of NFS Version 2 read calls with request sizes between 0-511 bytes received from this client.')
pclNfsV2Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read1KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 512-1023 bytes received from this client.')
pclNfsV2Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read2KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 1K-2047 bytes received from this client.')
pclNfsV2Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read4KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 2K-4095 bytes received from this client.')
pclNfsV2Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read8KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 4K-8191 bytes received from this client.')
pclNfsV2Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read16KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 8K-16383 bytes received from this client.')
pclNfsV2Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read32KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 16K-32767 bytes received from this client.')
pclNfsV2Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read64KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 32K-65535 bytes received from this client.')
pclNfsV2Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Read128KCalls.setDescription('The number of NFS Version 2 read calls with request sizes between 64K-131071 bytes received from this client.')
pclNfsV2Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write512Calls.setDescription('The number of NFS Version 2 write calls with request sizes between 0-511 bytes received from this client.')
pclNfsV2Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write1KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 512-1023 bytes received from this client.')
pclNfsV2Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write2KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 1K-2047 bytes received from this client.')
pclNfsV2Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write4KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 2K-4095 bytes received from this client.')
pclNfsV2Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write8KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 4K-8191 bytes received from this client.')
pclNfsV2Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write16KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 8K-16383 bytes received from this client.')
pclNfsV2Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write32KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 16K-32767 bytes received from this client.')
pclNfsV2Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write64KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 32K-65535 bytes received from this client.')
pclNfsV2Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV2Write128KCalls.setDescription('The number of NFS Version 2 write calls with request sizes between 64K-131071 bytes received from this client.')
pclNfsV3Read512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read512Calls.setDescription('The number of NFS Version 3 read calls with request sizes between 0-511 bytes received from this client.')
pclNfsV3Read1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read1KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 512-1023 bytes received from this client.')
pclNfsV3Read2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read2KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 1K-2047 bytes received from this client.')
pclNfsV3Read4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read4KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 2K-4095 bytes received from this client.')
pclNfsV3Read8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read8KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 4K-8191 bytes received from this client.')
pclNfsV3Read16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read16KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 8K-16383 bytes received from this client.')
pclNfsV3Read32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read32KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 16K-32767 bytes received from this client.')
pclNfsV3Read64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read64KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 32K-65535 bytes received from this client.')
pclNfsV3Read128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Read128KCalls.setDescription('The number of NFS Version 3 read calls with request sizes between 64K-131071 bytes received from this client.')
pclNfsV3Write512Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write512Calls.setDescription('The number of NFS Version 3 write calls with request sizes between 0-511 bytes received from this client.')
pclNfsV3Write1KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write1KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 512-1023 bytes received from this client.')
pclNfsV3Write2KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write2KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 1K-2047 bytes received from this client.')
pclNfsV3Write4KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write4KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 2K-4095 bytes received from this client.')
pclNfsV3Write8KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write8KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 4K-8191 bytes received from this client.')
pclNfsV3Write16KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write16KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 8K-16383 bytes received from this client.')
pclNfsV3Write32KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write32KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 16K-32767 bytes received from this client.')
pclNfsV3Write64KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write64KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 32K-65535 bytes received from this client.')
pclNfsV3Write128KCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 1, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: pclNfsV3Write128KCalls.setDescription('The number of NFS Version 3 write calls with request sizes between 64K-131071 bytes received from this client.')
pclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pclNumber.setStatus('current')
if mibBuilder.loadTexts: pclNumber.setDescription('Number of entries in the pclTable table.')
trpcServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1))
tnfsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2))
trpcCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcCalls.setStatus('current')
if mibBuilder.loadTexts: trpcCalls.setDescription('The total number of RPC calls received, since the last boot.')
trpcBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadCalls.setStatus('current')
if mibBuilder.loadTexts: trpcBadCalls.setDescription('The total number of calls rejected by the RPC layer, since the last boot.')
trpcNullRecvs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcNullRecvs.setStatus('current')
if mibBuilder.loadTexts: trpcNullRecvs.setDescription('The number of times an RPC call was not available when it was thought to be received, since the last boot.')
trpcBadLens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcBadLens.setStatus('current')
if mibBuilder.loadTexts: trpcBadLens.setDescription('The number of RPC calls received with a length shorter than a minimum-sized RPC call, since the last boot.')
trpcServXDRCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trpcServXDRCalls.setStatus('current')
if mibBuilder.loadTexts: trpcServXDRCalls.setDescription('The number of RPC calls received whose header could not be XDR decoded, since the last boot.')
tnfsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsCalls.setStatus('current')
if mibBuilder.loadTexts: tnfsCalls.setDescription('The total number of NFS calls received, since last boot.')
tnfsServBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnfsServBadCalls.setStatus('current')
if mibBuilder.loadTexts: tnfsServBadCalls.setDescription('The total number of received NFS calls rejected, since last boot.')
tnfsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3))
tnfsV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4))
treplyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5))
tnfsrwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6))
tv2Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1))
tv2Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2))
tv2CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3))
tv2CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4))
tv2cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cNulls.setStatus('current')
if mibBuilder.loadTexts: tv2cNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure, since the last boot.')
tv2cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure, since the last boot.')
tv2cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure, since the the last boot.')
tv2cRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRoots.setStatus('current')
if mibBuilder.loadTexts: tv2cRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure, since the last boot.')
tv2cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLookups.setStatus('current')
if mibBuilder.loadTexts: tv2cLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure, since the last boot.')
tv2cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure, since the last boot.')
tv2cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReads.setStatus('current')
if mibBuilder.loadTexts: tv2cReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure, since the last boot.')
tv2cWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2cWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure, since the last boot.')
tv2cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cWrites.setStatus('current')
if mibBuilder.loadTexts: tv2cWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure, since the last boot.')
tv2cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cCreates.setStatus('current')
if mibBuilder.loadTexts: tv2cCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure, since the last boot.')
tv2cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2cRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure, since the last boot.')
tv2cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRenames.setStatus('current')
if mibBuilder.loadTexts: tv2cRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure, since the last boot.')
tv2cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cLinks.setStatus('current')
if mibBuilder.loadTexts: tv2cLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure, since the last boot.')
tv2cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, since the last boot.')
tv2cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure, since the last boot.')
tv2cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure, since the last boot.')
tv2cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2cReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure, since the last boot.')
tv2cStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2cStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, since the last boot.')
tv2pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pNulls.setStatus('current')
if mibBuilder.loadTexts: tv2pNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2pGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2pSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRoots.setStatus('current')
if mibBuilder.loadTexts: tv2pRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLookups.setStatus('current')
if mibBuilder.loadTexts: tv2pLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2pReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReads.setStatus('current')
if mibBuilder.loadTexts: tv2pReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2pWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pWrites.setStatus('current')
if mibBuilder.loadTexts: tv2pWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pCreates.setStatus('current')
if mibBuilder.loadTexts: tv2pCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2pRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRenames.setStatus('current')
if mibBuilder.loadTexts: tv2pRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pLinks.setStatus('current')
if mibBuilder.loadTexts: tv2pLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2pSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2pMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2pRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2pReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure as a percentage of total NFS calls received, since the last boot.')
tv2pStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2pStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2pStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure as a percentage of total NFS calls received, since the last boot.')
tv2ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccNulls.setStatus('current')
if mibBuilder.loadTexts: tv2ccNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2ccGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2ccSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRoots.setStatus('current')
if mibBuilder.loadTexts: tv2ccRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLookups.setStatus('current')
if mibBuilder.loadTexts: tv2ccLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2ccReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReads.setStatus('current')
if mibBuilder.loadTexts: tv2ccReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2ccWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccWrites.setStatus('current')
if mibBuilder.loadTexts: tv2ccWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccCreates.setStatus('current')
if mibBuilder.loadTexts: tv2ccCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2ccRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRenames.setStatus('current')
if mibBuilder.loadTexts: tv2ccRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccLinks.setStatus('current')
if mibBuilder.loadTexts: tv2ccLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2ccSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2ccMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2ccRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2ccReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2ccStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2ccStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2ccStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv2cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpNulls.setStatus('current')
if mibBuilder.loadTexts: tv2cpNulls.setDescription('The number of NFS Version 2 calls received for the NFSPROC_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cpGetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv2cpSetattrs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpRoots = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRoots.setStatus('current')
if mibBuilder.loadTexts: tv2cpRoots.setDescription('The number of NFS Version 2 calls received for the NFSPROC_ROOT (Get Filesystem Root) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLookups.setStatus('current')
if mibBuilder.loadTexts: tv2cpLookups.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LOOKUP (Look Up File Name) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cpReadlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READLINK (Read From Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReads.setStatus('current')
if mibBuilder.loadTexts: tv2cpReads.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpWrcaches = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrcaches.setStatus('current')
if mibBuilder.loadTexts: tv2cpWrcaches.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITECACHE (Write to Cache) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpWrites.setStatus('current')
if mibBuilder.loadTexts: tv2cpWrites.setDescription('The number of NFS Version 2 calls received for the NFSPROC_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpCreates.setStatus('current')
if mibBuilder.loadTexts: tv2cpCreates.setDescription('The number of NFS Version 2 calls received for the NFSPROC_CREATE (Create File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRemoves.setStatus('current')
if mibBuilder.loadTexts: tv2cpRemoves.setDescription('The number of NFS Version 2 calls received for the NFSPROC_REMOVE (Remove File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRenames.setStatus('current')
if mibBuilder.loadTexts: tv2cpRenames.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RENAME (Rename File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpLinks.setStatus('current')
if mibBuilder.loadTexts: tv2cpLinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_LINK (Create Link to File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv2cpSymlinks.setDescription('The number of NFS Version 2 calls received for the NFSPROC_SYMLINK (Create Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cpMkdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_MKDIR (Create Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv2cpRmdirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_RMDIR (Remove Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv2cpReaddirs.setDescription('The number of NFS Version 2 calls received for the NFSPROC_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv2cpStatfss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 3, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2cpStatfss.setStatus('current')
if mibBuilder.loadTexts: tv2cpStatfss.setDescription('The number of NFS Version 2 calls received for the NFSPROC_STATFS (Get Filesystem Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1))
tv3Percent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2))
tv3CachedCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3))
tv3CachedPerCent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4))
tv3cNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cNulls.setStatus('current')
if mibBuilder.loadTexts: tv3cNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, since the last boot.')
tv3cGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, since the last boot.')
tv3cSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, since the last boot.')
tv3cLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLookups.setStatus('current')
if mibBuilder.loadTexts: tv3cLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, since the last boot.')
tv3cAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3cAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, since the last boot.')
tv3cReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, since the last boot.')
tv3cReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReads.setStatus('current')
if mibBuilder.loadTexts: tv3cReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, since the last boot.')
tv3cWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cWrites.setStatus('current')
if mibBuilder.loadTexts: tv3cWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, since the last boot.')
tv3cCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCreates.setStatus('current')
if mibBuilder.loadTexts: tv3cCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, since the last boot.')
tv3cMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, since the last boot.')
tv3cSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, since the last boot.')
tv3cMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cMknods.setStatus('current')
if mibBuilder.loadTexts: tv3cMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, since the last boot.')
tv3cRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3cRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, since the last boot.')
tv3cRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, since the last boot.')
tv3cRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cRenames.setStatus('current')
if mibBuilder.loadTexts: tv3cRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, since the last boot.')
tv3cLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cLinks.setStatus('current')
if mibBuilder.loadTexts: tv3cLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, since the last boot.')
tv3cReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3cReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, since the last boot.')
tv3cReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3cReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, since the last boot.')
tv3cFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3cFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, since the last boot.')
tv3cFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3cFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, since the last boot.')
tv3cPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3cPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, since the last boot.')
tv3cCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cCommits.setStatus('current')
if mibBuilder.loadTexts: tv3cCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, since the last boot.')
tv3pNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pNulls.setStatus('current')
if mibBuilder.loadTexts: tv3pNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3pGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3pSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLookups.setStatus('current')
if mibBuilder.loadTexts: tv3pLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3pAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3pReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReads.setStatus('current')
if mibBuilder.loadTexts: tv3pReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pWrites.setStatus('current')
if mibBuilder.loadTexts: tv3pWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCreates.setStatus('current')
if mibBuilder.loadTexts: tv3pCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3pMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3pSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pMknods.setStatus('current')
if mibBuilder.loadTexts: tv3pMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3pRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3pRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pRenames.setStatus('current')
if mibBuilder.loadTexts: tv3pRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pLinks.setStatus('current')
if mibBuilder.loadTexts: tv3pLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3pReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3pReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3pFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3pFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3pPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3pCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3pCommits.setStatus('current')
if mibBuilder.loadTexts: tv3pCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, as a percentage of the total NFS calls received, since the last boot.')
tv3ccNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccNulls.setStatus('current')
if mibBuilder.loadTexts: tv3ccNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3ccGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3ccSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLookups.setStatus('current')
if mibBuilder.loadTexts: tv3ccLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3ccAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3ccReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReads.setStatus('current')
if mibBuilder.loadTexts: tv3ccReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccWrites.setStatus('current')
if mibBuilder.loadTexts: tv3ccWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCreates.setStatus('current')
if mibBuilder.loadTexts: tv3ccCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3ccMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3ccSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccMknods.setStatus('current')
if mibBuilder.loadTexts: tv3ccMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3ccRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3ccRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccRenames.setStatus('current')
if mibBuilder.loadTexts: tv3ccRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccLinks.setStatus('current')
if mibBuilder.loadTexts: tv3ccLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3ccReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3ccReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIRPLUS (Extended Read from Directory) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3ccFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3ccFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3ccPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3ccCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3ccCommits.setStatus('current')
if mibBuilder.loadTexts: tv3ccCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, that did not result in the filesystem blocking to read from disk, since the last boot.')
tv3cpNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpNulls.setStatus('current')
if mibBuilder.loadTexts: tv3cpNulls.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_NULL (Do Nothing) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpGetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cpGetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_GETATTR (Get File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpSetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSetattrs.setStatus('current')
if mibBuilder.loadTexts: tv3cpSetattrs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SETATTR (Set File Attributes) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLookups.setStatus('current')
if mibBuilder.loadTexts: tv3cpLookups.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LOOKUP (Lookup Filename) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpAccesss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpAccesss.setStatus('current')
if mibBuilder.loadTexts: tv3cpAccesss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_ACCESS (Check Access Permission) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpReadlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReadlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cpReadlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READLINK (Read from Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last last boot.')
tv3cpReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReads.setStatus('current')
if mibBuilder.loadTexts: tv3cpReads.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READ (Read From File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpWrites.setStatus('current')
if mibBuilder.loadTexts: tv3cpWrites.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_WRITE (Write to File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCreates.setStatus('current')
if mibBuilder.loadTexts: tv3cpCreates.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_CREATE (Create a File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpMkdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMkdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cpMkdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKDIR (Create a Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpSymlinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpSymlinks.setStatus('current')
if mibBuilder.loadTexts: tv3cpSymlinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_SYMLINK (Create a Symbolic Link) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpMknods = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpMknods.setStatus('current')
if mibBuilder.loadTexts: tv3cpMknods.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_MKNOD (Create a Special Device) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRemoves.setStatus('current')
if mibBuilder.loadTexts: tv3cpRemoves.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_REMOVE (Remove a File) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpRmdirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRmdirs.setStatus('current')
if mibBuilder.loadTexts: tv3cpRmdirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RMDIR (Remove a Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpRenames.setStatus('current')
if mibBuilder.loadTexts: tv3cpRenames.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_RENAME (Rename a File or Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpLinks.setStatus('current')
if mibBuilder.loadTexts: tv3cpLinks.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_LINK (Create Link to an Object) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpReaddirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirs.setStatus('current')
if mibBuilder.loadTexts: tv3cpReaddirs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READDIR (Read From Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpReaddirPluss = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpReaddirPluss.setStatus('current')
if mibBuilder.loadTexts: tv3cpReaddirPluss.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_READIRPLUS (Extended Read from Directory) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpFsstats = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsstats.setStatus('current')
if mibBuilder.loadTexts: tv3cpFsstats.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSSTAT (Get Dynamic File System Information) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpFsinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpFsinfos.setStatus('current')
if mibBuilder.loadTexts: tv3cpFsinfos.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_FSINFO (Get Static File System Information) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpPathconfs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpPathconfs.setStatus('current')
if mibBuilder.loadTexts: tv3cpPathconfs.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_PATHCONF (Retrieve POSIX Information) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
tv3cpCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 4, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3cpCommits.setStatus('current')
if mibBuilder.loadTexts: tv3cpCommits.setDescription('The number of NFS Version 3 calls received for the NFSPROC3_COMMIT (Commit Cached Data on a Server to Stable Storage) procedure, that did not result in the filesystem blocking to read from disk, as a percentage of the total number of calls received for this procedure, since the last boot.')
trcInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcInProgressHits.setStatus('current')
if mibBuilder.loadTexts: trcInProgressHits.setDescription('The number of NFS requests that were dropped, for calls already in progress, since the last boot.')
trcDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcDelayHits.setDescription('The number of NFS requests that were dropped, for replies already generated within a short interval, since the last boot. These stats are deprecated. A value of zero will always be returned for these stats.')
trcMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcMisses.setStatus('current')
if mibBuilder.loadTexts: trcMisses.setDescription('The number of NFS requests received for which there were no corresponding entries already in the Reply Cache, since the last boot.')
trcNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcNonIdemDoneHits.setDescription('The number of NFS requests received that resulted in replies being replayed from the Reply Cache, since the last boot.')
trcNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcNonIdemNotDoneHits.setDescription('The number of NFS requests received for calls that resulted in this request being processed as a new request even when a corresponding entry existed in the Reply Cache, since the last boot.')
trcTcpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: trcTcpInProgressHits.setDescription('The number of NFS requests that were dropped for the TCP protocol, for calls already in progress, since the last boot.')
trcTcpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcTcpDelayHits.setDescription('The number of NFS requests that were dropped for the TCP protocol, for replies already generated within a short interval, since the last boot. These stats are deprecated. A value of zero will always be returned for these stats.')
trcTcpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpMisses.setStatus('current')
if mibBuilder.loadTexts: trcTcpMisses.setDescription('The number of NFS requests received for the TCP protocol for which there were no corresponding entries already in the Reply Cache, since the last boot.')
trcTcpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcTcpNonIdemDoneHits.setDescription('The number of NFS requests received for the TCP protocol that resulted in replies being replayed from the Reply Cache, since the last boot.')
trcTcpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcTcpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the TCP protocol for calls that resulted in this request being processed as a new request even when a corresponding entry existed in the Reply Cache, since the last boot.')
trcUdpInProgressHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpInProgressHits.setStatus('current')
if mibBuilder.loadTexts: trcUdpInProgressHits.setDescription('The number of NFS requests that were dropped for the UDP protocol, for calls already in progress, since the last boot.')
trcUdpDelayHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpDelayHits.setStatus('deprecated')
if mibBuilder.loadTexts: trcUdpDelayHits.setDescription('The number of NFS requests that were dropped for the UDP protocol, for replies already generated within a short interval, since the last boot. These stats are deprecated. A value of zero will always be returned for these stats.')
trcUdpMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpMisses.setStatus('current')
if mibBuilder.loadTexts: trcUdpMisses.setDescription('The number of NFS requests received for the UDP protocol for which there were no corresponding entries already in the Reply Cache, since the last boot.')
trcUdpNonIdemDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcUdpNonIdemDoneHits.setDescription('The number of NFS requests received for the UDP protocol that resulted in replies being replayed from the Reply Cache, since the last boot.')
trcUdpNonIdemNotDoneHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setStatus('current')
if mibBuilder.loadTexts: trcUdpNonIdemNotDoneHits.setDescription('The number of NFS requests received for the UDP protocol for calls that resulted in this request being processed as a new request even when a corresponding entry existed in the Reply Cache, since the last boot.')
tv2ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1))
tv2WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2))
tv3ReadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3))
tv3WriteStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4))
tv2Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read512Calls.setStatus('current')
if mibBuilder.loadTexts: tv2Read512Calls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 0-511 bytes.')
tv2Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read1KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 512-1023 bytes.')
tv2Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read2KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 1K-2047 bytes.')
tv2Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read4KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 2K-4095 bytes.')
tv2Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read8KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 4K-8191 bytes.')
tv2Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read16KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 8K-16383 bytes.')
tv2Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read32KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 16K-32767 bytes.')
tv2Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read64KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 32K-65535 bytes.')
tv2Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Read128KCalls.setDescription('The number of NFS Version 2 read calls received by the server since last boot with request sizes between 64K-131071 bytes.')
tv2Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write512Calls.setStatus('current')
if mibBuilder.loadTexts: tv2Write512Calls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 0-511 bytes.')
tv2Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write1KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 512-1023 bytes.')
tv2Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write2KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 1K-2047 bytes.')
tv2Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write4KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 2K-4095 bytes.')
tv2Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write8KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 4K-8191 bytes.')
tv2Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write16KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 8K-16383 bytes.')
tv2Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write32KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 16K-32767 bytes.')
tv2Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write64KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 32K-65535 bytes.')
tv2Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv2Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv2Write128KCalls.setDescription('The number of NFS Version 2 write calls received by the server since last boot with request sizes between 64K-131071 bytes.')
tv3Read512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read512Calls.setStatus('current')
if mibBuilder.loadTexts: tv3Read512Calls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 0-511 bytes.')
tv3Read1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read1KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 512-1023 bytes.')
tv3Read2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read2KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 1K-2047 bytes.')
tv3Read4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read4KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 2K-4095 bytes.')
tv3Read8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read8KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 4K-8191 bytes.')
tv3Read16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read16KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 8K-16383 bytes.')
tv3Read32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read32KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 16K-32767 bytes.')
tv3Read64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read64KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 32K-65535 bytes.')
tv3Read128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Read128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Read128KCalls.setDescription('The number of NFS Version 3 read calls received by the server since last boot with request sizes between 64K-131071 bytes.')
tv3Write512Calls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write512Calls.setStatus('current')
if mibBuilder.loadTexts: tv3Write512Calls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 0-511 bytes.')
tv3Write1KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write1KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write1KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 512-1023 bytes.')
tv3Write2KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write2KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write2KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 1K-2047 bytes.')
tv3Write4KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write4KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write4KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 2K-4095 bytes.')
tv3Write8KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write8KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write8KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 4K-8191 bytes.')
tv3Write16KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write16KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write16KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 8K-16383 bytes.')
tv3Write32KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write32KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write32KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 16K-32767 bytes.')
tv3Write64KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write64KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write64KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 32K-65535 bytes.')
tv3Write128KCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 2, 2, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tv3Write128KCalls.setStatus('current')
if mibBuilder.loadTexts: tv3Write128KCalls.setDescription('The number of NFS Version 3 write calls received by the server since last boot with request sizes between 64K-131071 bytes.')
nfsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: nfsIsLicensed.setDescription('Whether the nfs protocol is licensed on the filer.')
quotaState = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaState.setStatus('deprecated')
if mibBuilder.loadTexts: quotaState.setDescription("Indicates whether the root volume's quotas are ON, OFF or initializing. This object is deprecated - use qvStateTable.qvStateStat instead.")
quotaInitPercent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: quotaInitPercent.setStatus('deprecated')
if mibBuilder.loadTexts: quotaInitPercent.setDescription('Indicates percentage of root volume quota computation done while quotas are in initializing state. This object is deprecated - use qvStateTable.qvInitPercent instead.')
qrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 3), )
if mibBuilder.loadTexts: qrTable.setStatus('deprecated')
if mibBuilder.loadTexts: qrTable.setDescription('Provide a report of the current file and space consumption for each user or group with a quota in /etc/quotas. All quotas are displayed regardless of volume, and no volume information is given. This table is deprecated - use qrVTable instead.')
qrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrIndex"))
if mibBuilder.loadTexts: qrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: qrEntry.setDescription('Provide a report of the current file and space consumption for a referenced entry with a quota in the file /etc/quotas. All quotas are displayed regardless of volume, and no volume information is given. This object is deprecated - use qrVEntry instead.')
qrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: qrIndex.setDescription('A number that identifies this entry in the file /etc/quotas.')
qrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qrTypeUser", 1), ("qrTypeGroup", 2), ("qrTypeTree", 3), ("qrTypeUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrType.setStatus('deprecated')
if mibBuilder.loadTexts: qrType.setDescription('Identifies the kind of quota for this qrEntry.')
qrId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrId.setStatus('deprecated')
if mibBuilder.loadTexts: qrId.setDescription("The UID (user's numerical ID) or the GID (numerical ID of the group that a user belongs to), as applicable, associated with this qrEntry.")
qrKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrKBytesUsed.setDescription('The current number of KBytes used for this qrEntry.')
qrKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrKBytesLimit.setDescription('The limit of KBytes that can be used for this qrEntry.')
qrFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrFilesUsed.setDescription('The current number of files used for this qrEntry.')
qrFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrFileLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrFileLimit.setDescription('The limit of files that can be used for this qrEntry.')
qrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrPathName.setStatus('deprecated')
if mibBuilder.loadTexts: qrPathName.setDescription('A textual string that contains the path corresponding to this qrEntry.')
qvStateTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 4), )
if mibBuilder.loadTexts: qvStateTable.setStatus('current')
if mibBuilder.loadTexts: qvStateTable.setDescription('Provide a report of the current quota state of each volume in the system.')
qvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qvStateVolume"))
if mibBuilder.loadTexts: qvStateEntry.setStatus('current')
if mibBuilder.loadTexts: qvStateEntry.setDescription('Provide a report of the current quota state of each volume in the system.')
qvStateVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateVolume.setStatus('current')
if mibBuilder.loadTexts: qvStateVolume.setDescription("A number that identifies this volume. The mapping of this number to actual volumes may change if volumes are added or deleted. Use qvStateName to unambiguously identify a volume. The mapping established by this object is the same as the mapping of qrVVolume (below) to actual volumes. For instance, if a qvStateVolume value of '5' represents the volume 'vol2', a value of '5' in qrVVolume also represents the volume 'vol2'.")
qvStateName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateName.setStatus('current')
if mibBuilder.loadTexts: qvStateName.setDescription('Indicates the name of this volume.')
qvStateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("quotaStateOff", 1), ("quotaStateOn", 2), ("quotaStateInit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateStat.setStatus('current')
if mibBuilder.loadTexts: qvStateStat.setDescription('Indicates whether quotas are ON, OFF or initializing.')
qvStateInitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qvStateInitPercent.setStatus('current')
if mibBuilder.loadTexts: qvStateInitPercent.setDescription('Indicates percentage of quota computation done while quotas are in initializing state.')
qrVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 5), )
if mibBuilder.loadTexts: qrVTable.setStatus('deprecated')
if mibBuilder.loadTexts: qrVTable.setDescription('Provide a report of the current file and space consumption for each user or group with a quota in /etc/quotas.')
qrVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrVVolume"), (0, "NETWORK-APPLIANCE-MIB", "qrVIndex"))
if mibBuilder.loadTexts: qrVEntry.setStatus('deprecated')
if mibBuilder.loadTexts: qrVEntry.setDescription('Provide a report of the current file and space consumption for a referenced entry with a quota in the file /etc/quotas. Indices select the volume of the quota and the quota entry itself.')
qrVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIndex.setStatus('deprecated')
if mibBuilder.loadTexts: qrVIndex.setDescription('A number that identifies this entry in the file /etc/quotas in the given volume.')
qrVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrVTypeUser", 1), ("qrVTypeGroup", 2), ("qrVTypeTree", 3), ("qrVTypeUserDefault", 4), ("qrVTypeGroupDefault", 5), ("qrVTypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVType.setStatus('deprecated')
if mibBuilder.loadTexts: qrVType.setDescription('Identifies the kind of quota for this qrVEntry.')
qrVId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVId.setStatus('deprecated')
if mibBuilder.loadTexts: qrVId.setDescription("The UID (user's numerical ID) or the GID (numerical ID of the group that a user belongs to), as applicable, associated with this qrVEntry. Check the qrVIdType field to see if this field is valid.")
qrVKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesUsed.setDescription('The current number of KBytes used for this qrVEntry.')
qrVKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesLimit.setDescription('The limit of KBytes that can be used for this qrVEntry.')
qrVFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFilesUsed.setDescription('The current number of files used for this qrVEntry.')
qrVFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimit.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFileLimit.setDescription('The limit of files that can be used for this qrVEntry.')
qrVPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVPathName.setStatus('deprecated')
if mibBuilder.loadTexts: qrVPathName.setDescription('A textual string that contains the path corresponding to this qrVEntry.')
qrVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVVolume.setStatus('deprecated')
if mibBuilder.loadTexts: qrVVolume.setDescription('A number that identifies the volume for which this quota is in effect on. The volume that this value represents can be determined by checking the value of qvStateName (above) with qvStateVolume set to the value found here.')
qrVTree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVTree.setStatus('deprecated')
if mibBuilder.loadTexts: qrVTree.setDescription('A string that indicates which qtree this quota belongs to.')
qrVIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrVIdValid", 1), ("qrVSidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVIdType.setStatus('deprecated')
if mibBuilder.loadTexts: qrVIdType.setDescription('A value that indicates which ID field is valid.')
qrVSid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVSid.setStatus('deprecated')
if mibBuilder.loadTexts: qrVSid.setDescription('The one or more IDs associated with this qrVEntry. If the qrVentry is associated with a Windows ID, the text form of the Windows ID (the SID) is here. If the qrVEntry is associated with more than one id, this contains a blank separated list of those IDs. Check the qrVIdType field to see if this field is valid.')
qrVKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesThreshold.setDescription('A number of KBytes that when used by this entry produces a warning message.')
qrVKBytesLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setStatus('deprecated')
if mibBuilder.loadTexts: qrVKBytesLimitSoft.setDescription('The limit of KBytes that can be used for this qrVEntry before a warning message and SNMP trap is produced.')
qrVFileLimitSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrVFileLimitSoft.setStatus('deprecated')
if mibBuilder.loadTexts: qrVFileLimitSoft.setDescription('The limit of files that can be used for this qrVEntry before a warning message and SNMP trap is produced.')
qrV2Table = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 4, 6), )
if mibBuilder.loadTexts: qrV2Table.setStatus('current')
if mibBuilder.loadTexts: qrV2Table.setDescription('Provide a report of the current file and space consumption for each user or group with a quota in /etc/quotas.')
qrV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qrV2Volume"), (0, "NETWORK-APPLIANCE-MIB", "qrV2Index"))
if mibBuilder.loadTexts: qrV2Entry.setStatus('current')
if mibBuilder.loadTexts: qrV2Entry.setDescription('Provide a report of the current file and space consumption for a referenced entry with a quota in the file /etc/quotas. Indices select the volume of the quota and the quota entry itself.')
qrV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Index.setStatus('current')
if mibBuilder.loadTexts: qrV2Index.setDescription('A number that identifies this entry in the file /etc/quotas in the given volume.')
qrV2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("qrV2TypeUser", 1), ("qrV2TypeGroup", 2), ("qrV2TypeTree", 3), ("qrV2TypeUserDefault", 4), ("qrV2TypeGroupDefault", 5), ("qrV2TypeUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Type.setStatus('current')
if mibBuilder.loadTexts: qrV2Type.setDescription('Identifies the kind of quota for this qrV2Entry.')
qrV2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Id.setStatus('current')
if mibBuilder.loadTexts: qrV2Id.setDescription("The UID (user's numerical ID) or the GID (numerical ID of the group that a user belongs to), as applicable, associated with this qrV2Entry. Check the qrV2IdType field to see if this field is valid.")
qrV2HighKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setStatus('current')
if mibBuilder.loadTexts: qrV2HighKBytesUsed.setDescription('The current number of KBytes used for this qrV2Entry. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
qrV2LowKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setStatus('current')
if mibBuilder.loadTexts: qrV2LowKBytesUsed.setDescription('The current number of KBytes used for this qrV2Entry. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
qrV2QuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2QuotaUnlimited.setDescription("This flag designates whether or not the size based quota limit for this qrV2Entry is unlimited. If false(1) then qrV2*KBytesLimit OID's are valid, if true(0) then qrV2*KBytesLimit OID's are unused and will return 0.")
qrV2HighKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2HighKBytesLimit.setDescription('The limit of KBytes that can be used for this qrV2Entry. This object returns the most significant 32 bits of the 64 bit unsigned integer. This will return 0 if qrV2QuotaUnlimited is true.')
qrV2LowKBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2LowKBytesLimit.setDescription('The limit of KBytes that can be used for this qrV2Entry. This object returns the least significant 32 bits of the 64 bit unsigned integer. This will return 0 if qrV2QuotaUnlimited is true.')
qrV2FilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FilesUsed.setStatus('current')
if mibBuilder.loadTexts: qrV2FilesUsed.setDescription('The current number of files used for this qrV2Entry.')
qrV2FileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2FileQuotaUnlimited.setDescription('This flag designates whether or not the file based quota limit for this qrV2Entry is unlimited. If false(1) then qrV2FileLimit is valid, if true(0) qrV2FileLimit will return 0.')
qrV2FileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2FileLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2FileLimit.setDescription('The limit of files that can be used for this qrV2Entry.')
qrV2PathName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2PathName.setStatus('current')
if mibBuilder.loadTexts: qrV2PathName.setDescription('A textual string that contains the path corresponding to this qrV2Entry.')
qrV2Volume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Volume.setStatus('current')
if mibBuilder.loadTexts: qrV2Volume.setDescription('A number that identifies the volume for which this quota is in effect on. The volume that this value represents can be determined by checking the value of qvStateName (above) with qvStateVolume set to the value found here.')
qrV2Tree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Tree.setStatus('current')
if mibBuilder.loadTexts: qrV2Tree.setDescription('A string that indicates which qtree this quota belongs to.')
qrV2IdType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qrV2IdValid", 1), ("qrV2SidValid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2IdType.setStatus('current')
if mibBuilder.loadTexts: qrV2IdType.setDescription('A value that indicates which ID field is valid.')
qrV2Sid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2Sid.setStatus('current')
if mibBuilder.loadTexts: qrV2Sid.setDescription('The one or more IDs associated with this qrV2Entry. If the qrV2entry is associated with a Windows ID, the text form of the Windows ID (the SID) is here. If the qrV2Entry is associated with more than one id, this contains a blank separated list of those IDs. Check the qrV2IdType field to see if this field is valid.')
qrV2ThresholdUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2ThresholdUnlimited.setDescription("This flag designates whether or not the size based threshold limit for this qrV2Entry is unlimited. If false(1) then qrV2*KBytesThreshold OID's are valid, if true(0) then qrV2*KBytesThreshold OID's are unused and will return 0.")
qrV2HighKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setStatus('current')
if mibBuilder.loadTexts: qrV2HighKBytesThreshold.setDescription('A number of KBytes that when used by this entry produces a warning message. This object returns the most significant 32 bits of the 64 bit unsigned integer. This will return 0 if qrV2ThresholdUnlimited is true.')
qrV2LowKBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setStatus('current')
if mibBuilder.loadTexts: qrV2LowKBytesThreshold.setDescription('A number of KBytes that when used by this entry produces a warning message. This object returns the least significant 32 bits of the 64 bit unsigned integer. This will return 0 if qrV2ThresholdUnlimited is true.')
qrV2SoftQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2SoftQuotaUnlimited.setDescription("This flag designates whether or not the size based soft quota limit for this qrV2Entry is unlimited. If false(1) then qrV2*KBytesSoftLimit OID's are valid, if true(0) the qrV2*KBytesSoftLimit OID's are unused and will return 0.")
qrV2HighKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2HighKBytesSoftLimit.setDescription('The limit of KBytes that can be used for this qrV2Entry before a warning message and SNMP trap is produced. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
qrV2LowKBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2LowKBytesSoftLimit.setDescription('The limit of KBytes that can be used for this qrV2Entry before a warning message and SNMP trap is produced. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
qrV2SoftFileQuotaUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setStatus('current')
if mibBuilder.loadTexts: qrV2SoftFileQuotaUnlimited.setDescription('This flag designates whether or not the file based soft quota limit for this qrV2Entry is unlimited. If false(1) then qrV2SoftFileLimit is valid, if true(0) qrV2SoftFileLimit is unused and will return 0.')
qrV2SoftFileLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV2SoftFileLimit.setStatus('current')
if mibBuilder.loadTexts: qrV2SoftFileLimit.setDescription('The limit of files that can be used for this qrV2Entry before a warning message and SNMP trap is produced. This will return 0 if qrV2SoftFileQuotaUnlimited is true.')
qrV264KBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesUsed.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesUsed.setDescription('The current number of KBytes used for this qrV2Entry. This object returns all of the 64 bit unsigned integer.')
qrV264KBytesLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesLimit.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesLimit.setDescription('The limit of KBytes that can be used for this qrV2Entry. This object returns all of the 64 bit unsigned integer. This will return 0 if qrV2QuotaUnlimited is true.')
qrV264KBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesThreshold.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesThreshold.setDescription('A number of KBytes that when used by this entry produces a warning message. This object returns the all of the 64 bit unsigned integer. This will return 0 if qrV2ThresholdUnlimited is true.')
qrV264KBytesSoftLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 4, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qrV264KBytesSoftLimit.setStatus('current')
if mibBuilder.loadTexts: qrV264KBytesSoftLimit.setDescription('The limit of KBytes that can be used for this qrV2Entry before a warning message and SNMP trap is produced. This object returns all of the 64 bit unsigned integer.')
filesysMaxfilesAvail = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesAvail.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesAvail.setDescription('The count of the maximum number of files allowable on the root volume. This object is deprecated - use dfEntry.dfMaxFilesAvail instead.')
filesysMaxfilesUsed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesUsed.setDescription('The count of the number of files currently in use on the root volume. This object is deprecated - use dfEntry.dfMaxFilesUsed instead.')
filesysMaxfilesPossible = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesysMaxfilesPossible.setStatus('deprecated')
if mibBuilder.loadTexts: filesysMaxfilesPossible.setDescription('The largest value to which the filesysMaxfilesAvail parameter above can be increased by reconfiguration on the root volume. This object is deprecated - use dfEntry.dfMaxFilesPossible.')
dfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 4), )
if mibBuilder.loadTexts: dfTable.setStatus('current')
if mibBuilder.loadTexts: dfTable.setDescription('Provide a report of the available disk space on the file systems. The tables shows the available disk space for volumes as well as aggregates.')
snapshot = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 5))
dfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dfIndex"))
if mibBuilder.loadTexts: dfEntry.setStatus('current')
if mibBuilder.loadTexts: dfEntry.setDescription('Provide a report of the available disk space on the referenced file system.')
dfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfIndex.setStatus('current')
if mibBuilder.loadTexts: dfIndex.setDescription('A number that identifies this entry for the referenced file system.')
dfFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfFileSys.setStatus('current')
if mibBuilder.loadTexts: dfFileSys.setDescription('The name for the referenced file system.')
dfKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesTotal.setStatus('deprecated')
if mibBuilder.loadTexts: dfKBytesTotal.setDescription('The total capacity in KBytes for the referenced file system.')
dfKBytesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesUsed.setStatus('deprecated')
if mibBuilder.loadTexts: dfKBytesUsed.setDescription('The total disk space in KBytes that is in use on the referenced file system.')
dfKBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfKBytesAvail.setStatus('deprecated')
if mibBuilder.loadTexts: dfKBytesAvail.setDescription('The total disk space in KBytes that is free for use on the referenced file system.')
dfPerCentKBytesCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setStatus('current')
if mibBuilder.loadTexts: dfPerCentKBytesCapacity.setDescription('The percentage of disk space currently in use on the referenced file system.')
dfInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesUsed.setStatus('current')
if mibBuilder.loadTexts: dfInodesUsed.setDescription('The total number of inodes in use on the referenced file system.')
dfInodesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInodesFree.setStatus('current')
if mibBuilder.loadTexts: dfInodesFree.setDescription('The total number of inodes that are available for use on the referenced file system.')
dfPerCentInodeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setStatus('current')
if mibBuilder.loadTexts: dfPerCentInodeCapacity.setDescription('The percentage of disk space currently in use based on inode counts, on the referenced file system.')
dfMountedOn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMountedOn.setStatus('current')
if mibBuilder.loadTexts: dfMountedOn.setDescription('The name of the file on which this file system is mounted.')
dfMaxFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesAvail.setStatus('current')
if mibBuilder.loadTexts: dfMaxFilesAvail.setDescription('The count of the maximum number of files allowable on the referenced file system.')
dfMaxFilesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesUsed.setStatus('current')
if mibBuilder.loadTexts: dfMaxFilesUsed.setDescription('The count of the number of files currently in use on the referenced file system.')
dfMaxFilesPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMaxFilesPossible.setStatus('current')
if mibBuilder.loadTexts: dfMaxFilesPossible.setDescription('The largest value to which the filesysMaxfilesAvail parameter above can be increased by reconfiguration on the referenced file system.')
dfHighTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighTotalKBytes.setStatus('current')
if mibBuilder.loadTexts: dfHighTotalKBytes.setDescription('The total capacity in KBytes for the referenced file system. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
dfLowTotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowTotalKBytes.setStatus('current')
if mibBuilder.loadTexts: dfLowTotalKBytes.setDescription('The total capacity in KBytes for the referenced file system. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
dfHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighUsedKBytes.setStatus('current')
if mibBuilder.loadTexts: dfHighUsedKBytes.setDescription('The total disk space in KBytes that is in use on the referenced file system. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
dfLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowUsedKBytes.setStatus('current')
if mibBuilder.loadTexts: dfLowUsedKBytes.setDescription('The total disk space in KBytes that is in use on the referenced file system. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
dfHighAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighAvailKBytes.setStatus('current')
if mibBuilder.loadTexts: dfHighAvailKBytes.setDescription('The total disk space in KBytes that is free for use on the referenced file system. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
dfLowAvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowAvailKBytes.setStatus('current')
if mibBuilder.loadTexts: dfLowAvailKBytes.setDescription('The total disk space in KBytes that is free for use on the referenced file system. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
dfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unmounted", 1), ("mounted", 2), ("frozen", 3), ("destroying", 4), ("creating", 5), ("mounting", 6), ("unmounting", 7), ("nofsinfo", 8), ("replaying", 9), ("replayed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfStatus.setStatus('current')
if mibBuilder.loadTexts: dfStatus.setDescription('The status of the file system.')
dfMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("uninitialized", 2), ("needcpcheck", 3), ("cpcheckwait", 4), ("unmirrored", 5), ("normal", 6), ("degraded", 7), ("resyncing", 8), ("failed", 9), ("limbo", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfMirrorStatus.setStatus('current')
if mibBuilder.loadTexts: dfMirrorStatus.setDescription('Overall mirror status of the file system.')
dfPlexCount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPlexCount.setStatus('current')
if mibBuilder.loadTexts: dfPlexCount.setDescription('Number of plexes in this file system.')
dfType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfType.setStatus('current')
if mibBuilder.loadTexts: dfType.setDescription('Indicates the type of container.')
dfHighSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighSisSharedKBytes.setStatus('current')
if mibBuilder.loadTexts: dfHighSisSharedKBytes.setDescription('The total amount of data in KBytes that is shared by more that one instance on the referenced file system. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
dfLowSisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowSisSharedKBytes.setStatus('current')
if mibBuilder.loadTexts: dfLowSisSharedKBytes.setDescription('The total amount of data in KBytes that is shared by more that one instance on the referenced file system. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
dfHighSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfHighSisSavedKBytes.setStatus('current')
if mibBuilder.loadTexts: dfHighSisSavedKBytes.setDescription('The total disk space in KBytes that is saved by storing only one copy of the duplicated blocks on the referenced file system. The object returns the most significant 32 bits of the 64 bit unsigned integer.')
dfLowSisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLowSisSavedKBytes.setStatus('current')
if mibBuilder.loadTexts: dfLowSisSavedKBytes.setDescription('The total disk space in KBytes that is saved by storing only one copy of the duplicated blocks on the referenced file system. The object returns the least significant 32 bits of the 64 bit unsigned integer.')
dfPerCentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPerCentSaved.setStatus('current')
if mibBuilder.loadTexts: dfPerCentSaved.setDescription('The percentage of disk space saved by eliminating the duplicated blocks on the referenced file system.')
df64TotalKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64TotalKBytes.setStatus('current')
if mibBuilder.loadTexts: df64TotalKBytes.setDescription('The total capacity in KBytes for the referenced file system. This object returns all of the 64 bit unsigned integer.')
df64UsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64UsedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64UsedKBytes.setDescription('The total disk space in KBytes that is in use on the referenced file system. This object returns all of the 64 bit unsigned integer.')
df64AvailKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64AvailKBytes.setStatus('current')
if mibBuilder.loadTexts: df64AvailKBytes.setDescription('The total disk space in KBytes that is free for use on the referenced file system. This object returns all of the 64 bit unsigned integer.')
df64SisSharedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64SisSharedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64SisSharedKBytes.setDescription('The total amount of data in KBytes that is shared by more that one instance on the referenced file system. This object returns all of the 64 bit unsigned integer.')
df64SisSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 4, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: df64SisSavedKBytes.setStatus('current')
if mibBuilder.loadTexts: df64SisSavedKBytes.setDescription('The total disk space in KBytes that is saved by storing only one copy of the duplicated blocks on the referenced file system. The object returns all of the 64 bit unsigned integer.')
slTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1), )
if mibBuilder.loadTexts: slTable.setStatus('deprecated')
if mibBuilder.loadTexts: slTable.setDescription('Provide a report of the snapshots on the root volume. This table is deprecated - use slVTable instead.')
slEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slIndex"))
if mibBuilder.loadTexts: slEntry.setStatus('deprecated')
if mibBuilder.loadTexts: slEntry.setDescription('Provide a report on a given snapshot on the root volume. This object is deprecated - use slVEntry instead.')
slIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slIndex.setStatus('deprecated')
if mibBuilder.loadTexts: slIndex.setDescription('A number that identifies this entry for the referenced file system.')
slMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMonth.setStatus('deprecated')
if mibBuilder.loadTexts: slMonth.setDescription('The month in which the snapshot was created.')
slDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDay.setStatus('deprecated')
if mibBuilder.loadTexts: slDay.setDescription('The day on which the snapshot was created.')
slHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slHour.setStatus('deprecated')
if mibBuilder.loadTexts: slHour.setDescription('The hour in which the snapshot was created.')
slMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slMinutes.setStatus('deprecated')
if mibBuilder.loadTexts: slMinutes.setDescription('The minute in which the snapshot was created.')
slName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slName.setStatus('deprecated')
if mibBuilder.loadTexts: slName.setDescription('The name of the referenced snapshot.')
slVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2), )
if mibBuilder.loadTexts: slVTable.setStatus('current')
if mibBuilder.loadTexts: slVTable.setDescription('Provide a report of the snapshots on the file systems.')
slVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slVVolume"), (0, "NETWORK-APPLIANCE-MIB", "slVIndex"))
if mibBuilder.loadTexts: slVEntry.setStatus('current')
if mibBuilder.loadTexts: slVEntry.setDescription('Provide a report on a given snapshot on the file system. Indices select the volume of the snapshot and the snapshot entry itself.')
slVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVIndex.setStatus('current')
if mibBuilder.loadTexts: slVIndex.setDescription('A number that identifies this entry for the referenced file system.')
slVMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMonth.setStatus('current')
if mibBuilder.loadTexts: slVMonth.setDescription('The month in which the snapshot was created.')
slVDay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVDay.setStatus('current')
if mibBuilder.loadTexts: slVDay.setDescription('The day on which the snapshot was created.')
slVHour = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVHour.setStatus('current')
if mibBuilder.loadTexts: slVHour.setDescription('The hour in which the snapshot was created.')
slVMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVMinutes.setStatus('current')
if mibBuilder.loadTexts: slVMinutes.setDescription('The minute in which the snapshot was created.')
slVName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVName.setStatus('current')
if mibBuilder.loadTexts: slVName.setDescription('The name of the referenced snapshot.')
slVVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolume.setStatus('current')
if mibBuilder.loadTexts: slVVolume.setDescription('A number that identifies the volume / aggregate that contains this snapshot.')
slVNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVNumber.setStatus('current')
if mibBuilder.loadTexts: slVNumber.setDescription('Number of snapshots for this volume / aggregate.')
slVVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVVolumeName.setStatus('current')
if mibBuilder.loadTexts: slVVolumeName.setDescription('The name of the volume / aggregate. This does not have a /vol/ prefix.')
slVType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("traditionalVolume", 1), ("flexibleVolume", 2), ("aggregate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slVType.setStatus('current')
if mibBuilder.loadTexts: slVType.setDescription('Indicates the type of container for this snapshot.')
slQTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3), )
if mibBuilder.loadTexts: slQTable.setStatus('current')
if mibBuilder.loadTexts: slQTable.setDescription('Provide a report of the snapshots and their contents on the file systems.')
slQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "slQVolume"), (0, "NETWORK-APPLIANCE-MIB", "slQQtree"), (0, "NETWORK-APPLIANCE-MIB", "slQIndex"))
if mibBuilder.loadTexts: slQEntry.setStatus('current')
if mibBuilder.loadTexts: slQEntry.setDescription('Provide a report on a given snapshot for a given qtree on the file system. Indices select the volume and qtree of the snapshot and the snapshot entry itself.')
slQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQIndex.setStatus('current')
if mibBuilder.loadTexts: slQIndex.setDescription('A number that identifies this entry for the referenced file system.')
slQVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolume.setStatus('current')
if mibBuilder.loadTexts: slQVolume.setDescription('A number that identifies the volume that contains this snapshot.')
slQQtree = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtree.setStatus('current')
if mibBuilder.loadTexts: slQQtree.setDescription('A number that identifies the qtree that contains this snapshot.')
slQSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotName.setStatus('current')
if mibBuilder.loadTexts: slQSnapshotName.setDescription('The name of the referenced snapshot.')
slQSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSnapshotTime.setStatus('current')
if mibBuilder.loadTexts: slQSnapshotTime.setDescription('Time of the snapshot on the system. The time in seconds since January 1, 1970.')
slQQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeName.setStatus('current')
if mibBuilder.loadTexts: slQQtreeName.setDescription('A string that indicates which qtree is in this snapshot')
slQQtreeContent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replica", 1), ("transitioning", 2), ("original", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQQtreeContent.setStatus('current')
if mibBuilder.loadTexts: slQQtreeContent.setDescription('The content of the qtree tree')
slQSource = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSource.setStatus('current')
if mibBuilder.loadTexts: slQSource.setDescription("The source of this qtree for a replicated qtree. '-' for a original qtree.")
slQSourceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQSourceTime.setStatus('current')
if mibBuilder.loadTexts: slQSourceTime.setDescription('Time of the source snapshot for a replicated qtree. Time of the current snapshot for an original qtree. The time in seconds since January 1, 1970. 0 if the qtree is in a transitioning stage')
slQVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slQVolumeName.setStatus('current')
if mibBuilder.loadTexts: slQVolumeName.setDescription('The name of the volume. This does not have a /vol/ prefix.')
dfNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfNumber.setStatus('current')
if mibBuilder.loadTexts: dfNumber.setDescription('Number of entries in the dfTable table.')
fsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 5, 7))
fsOverallStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("nearlyFull", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsOverallStatus.setStatus('current')
if mibBuilder.loadTexts: fsOverallStatus.setDescription("An indication of overall file system health. 'ok' indicates that all file systems have adequate space. 'nearlyFull' means that one or more is nearly full (more than 95% full). 'full' means that one or more are more than 98% full.")
fsStatusMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsStatusMessage.setStatus('current')
if mibBuilder.loadTexts: fsStatusMessage.setDescription('A string indicating any file systems which are full or nearly full.')
fsMaxUsedBytesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setStatus('current')
if mibBuilder.loadTexts: fsMaxUsedBytesPerCent.setDescription('The percentage of space currently in use by the file system which is most full.')
fsMaxUsedInodesPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setStatus('current')
if mibBuilder.loadTexts: fsMaxUsedInodesPerCent.setDescription('The percentage of inodes currently in use by the file system which is most full.')
fsMaxUsedReservedPerCent = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsMaxUsedReservedPerCent.setStatus('current')
if mibBuilder.loadTexts: fsMaxUsedReservedPerCent.setDescription('The percentage of reserved space currently in use by the file system which is most full.')
volTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 8), )
if mibBuilder.loadTexts: volTable.setStatus('current')
if mibBuilder.loadTexts: volTable.setDescription('List the volumes defined on the system, including offline volumes.')
volEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "volIndex"))
if mibBuilder.loadTexts: volEntry.setStatus('current')
if mibBuilder.loadTexts: volEntry.setDescription('Provide details about a particular volume.')
volIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volIndex.setStatus('current')
if mibBuilder.loadTexts: volIndex.setDescription('A number that identifies this volume. The volIndex is not related to any other table defined in this MIB, and may change as volumes are created and destroyed.')
volName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volName.setStatus('current')
if mibBuilder.loadTexts: volName.setDescription('Name of the volume. This includes no /vol/ prefix.')
volFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volFSID.setStatus('current')
if mibBuilder.loadTexts: volFSID.setDescription('Unique identifier for this volume.')
volOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOwningHost.setStatus('current')
if mibBuilder.loadTexts: volOwningHost.setDescription('Indication of which host owns this volume.')
volState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volState.setStatus('current')
if mibBuilder.loadTexts: volState.setDescription("State of the volume, such as 'online' or 'offline'.")
volStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volStatus.setStatus('current')
if mibBuilder.loadTexts: volStatus.setDescription("Status of the volume, such as 'normal' or 'reconstructing'. May include several values separated by comma and space.")
volOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volOptions.setStatus('current')
if mibBuilder.loadTexts: volOptions.setDescription("Options associated with the volume, such as 'root' and 'nosnapdir=off'. May include several values separated by comma.")
volUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volUUID.setStatus('current')
if mibBuilder.loadTexts: volUUID.setDescription('A unique id associated with the volume.')
volAggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volAggrName.setStatus('current')
if mibBuilder.loadTexts: volAggrName.setDescription('Name of the aggregate this flexible volume is a part of.')
volType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("flexible", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volType.setStatus('current')
if mibBuilder.loadTexts: volType.setDescription('Type of this volume, older volumes are traditional while newer volumes contained in aggregates are flexible.')
volClone = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volClone.setStatus('current')
if mibBuilder.loadTexts: volClone.setDescription('True indicates flexible volume is a clone.')
volCloneOf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneOf.setStatus('current')
if mibBuilder.loadTexts: volCloneOf.setDescription('Name of flexible volume this flexible volume is a clone of.')
volCloneSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volCloneSnap.setStatus('current')
if mibBuilder.loadTexts: volCloneSnap.setDescription('Name of original cloned snapshot.')
volNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volNumber.setStatus('current')
if mibBuilder.loadTexts: volNumber.setDescription('Number of volumes in the volTable.')
qtreeTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 10), )
if mibBuilder.loadTexts: qtreeTable.setStatus('current')
if mibBuilder.loadTexts: qtreeTable.setDescription('Provide a list of the qtrees on the system.')
qtreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "qtreeVolume"), (0, "NETWORK-APPLIANCE-MIB", "qtreeIndex"))
if mibBuilder.loadTexts: qtreeEntry.setStatus('current')
if mibBuilder.loadTexts: qtreeEntry.setDescription('Provide details about a particular qtree.')
qtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeIndex.setStatus('current')
if mibBuilder.loadTexts: qtreeIndex.setDescription('Index into the qtree table.')
qtreeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolume.setStatus('current')
if mibBuilder.loadTexts: qtreeVolume.setDescription('A number that identifies the volume that contains this qtree.')
qtreeVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeVolumeName.setStatus('current')
if mibBuilder.loadTexts: qtreeVolumeName.setDescription('The name of the volume that contains this qtree. This includes no /vol/prefix.')
qtreeId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeId.setStatus('current')
if mibBuilder.loadTexts: qtreeId.setDescription('The Id number of the qtree.')
qtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeName.setStatus('current')
if mibBuilder.loadTexts: qtreeName.setDescription('The name of the qtree.')
qtreeStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unix", 1), ("ntfs", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStyle.setStatus('current')
if mibBuilder.loadTexts: qtreeStyle.setDescription('The security style of the qtree.')
qtreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("snapmirrored", 2), ("snapvaulted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeStatus.setStatus('current')
if mibBuilder.loadTexts: qtreeStatus.setDescription('The status of the qtree.')
qtreeOplock = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qtreeOplock.setStatus('current')
if mibBuilder.loadTexts: qtreeOplock.setDescription('An indication of whether the oplocks is enabled or not for this qtree.')
aggrTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 5, 11), )
if mibBuilder.loadTexts: aggrTable.setStatus('current')
if mibBuilder.loadTexts: aggrTable.setDescription('List the aggregates defined on the system, including offline aggregates.')
aggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "aggrIndex"))
if mibBuilder.loadTexts: aggrEntry.setStatus('current')
if mibBuilder.loadTexts: aggrEntry.setDescription('Provide details about a particular aggregate.')
aggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrIndex.setStatus('current')
if mibBuilder.loadTexts: aggrIndex.setDescription('A number that identifies this aggregate. The aggrIndex is not related to any other table defined in this MIB, and may change as aggregates are created and destroyed.')
aggrName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrName.setStatus('current')
if mibBuilder.loadTexts: aggrName.setDescription('Name of the aggregate. This includes no /vol/ prefix.')
aggrFSID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFSID.setStatus('current')
if mibBuilder.loadTexts: aggrFSID.setDescription('Unique identifier for this aggregate.')
aggrOwningHost = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOwningHost.setStatus('current')
if mibBuilder.loadTexts: aggrOwningHost.setDescription('Indication of which host owns this aggregate.')
aggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrState.setStatus('current')
if mibBuilder.loadTexts: aggrState.setDescription("State of the aggregate, such as 'online' or 'offline'.")
aggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrStatus.setStatus('current')
if mibBuilder.loadTexts: aggrStatus.setDescription("Status of the aggregate, such as 'normal' or 'reconstructing'. May include several values separated by comma and space.")
aggrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrOptions.setStatus('current')
if mibBuilder.loadTexts: aggrOptions.setDescription('Options associated with the aggregate.')
aggrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrUUID.setStatus('current')
if mibBuilder.loadTexts: aggrUUID.setDescription('A unique id associated with the aggregate.')
aggrFlexvollist = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrFlexvollist.setStatus('current')
if mibBuilder.loadTexts: aggrFlexvollist.setDescription('List of all the flexible volumes within this aggregate.')
aggrType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("aggregate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrType.setStatus('current')
if mibBuilder.loadTexts: aggrType.setDescription('Type of this container, containers containing flexible volumes are aggregate.')
aggrRaidType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 5, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrRaidType.setStatus('current')
if mibBuilder.loadTexts: aggrRaidType.setDescription("Type of raid protection of the aggregate, such as 'raid0', 'mirrored raid0', 'raid4', 'mirrored raid4', 'raid_dp', 'mirrored raid_dp'.")
aggrNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggrNumber.setStatus('current')
if mibBuilder.loadTexts: aggrNumber.setDescription('Number of aggregates in the aggrTable.')
raidTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 1), )
if mibBuilder.loadTexts: raidTable.setStatus('deprecated')
if mibBuilder.loadTexts: raidTable.setDescription('Display RAID configuration information for the root volume. This table is deprecated - use raidVTable instead.')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidEntry.setStatus('deprecated')
if mibBuilder.loadTexts: raidEntry.setDescription('Display RAID configuration information for the referenced disk drive. This only works for disks contained within the root volume, and will include spare drives. This object is deprecated - use raidVEntry instead.')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('deprecated')
if mibBuilder.loadTexts: raidIndex.setDescription('A number that identifies this entry for the referenced disk drive.')
raidDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskName.setStatus('deprecated')
if mibBuilder.loadTexts: raidDiskName.setDescription('The name identifying the referenced disk drive.')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("addingSpare", 7), ("spare", 8), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('deprecated')
if mibBuilder.loadTexts: raidStatus.setDescription('The status of the referenced disk drive.')
raidDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidDiskId.setStatus('deprecated')
if mibBuilder.loadTexts: raidDiskId.setDescription('The disk identifier for the referenced disk drive.')
raidScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiAdapter.setStatus('deprecated')
if mibBuilder.loadTexts: raidScsiAdapter.setDescription('The identifier of the SCSI adapter for the referenced disk drive.')
raidScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidScsiId.setStatus('deprecated')
if mibBuilder.loadTexts: raidScsiId.setDescription('The identifier for the referenced disk drive on the referenced SCSI adapter.')
raidUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedMb.setStatus('deprecated')
if mibBuilder.loadTexts: raidUsedMb.setDescription('The number of MBytes currently in use on the referenced disk drive.')
raidUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidUsedBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidUsedBlocks.setDescription('The number of Blocks currently in use on the referenced disk drive.')
raidTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalMb.setStatus('deprecated')
if mibBuilder.loadTexts: raidTotalMb.setDescription('The number of MBytes physically available on the referenced disk drive.')
raidTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidTotalBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: raidTotalBlocks.setDescription('The number of Blocks physically available on the referenced disk drive.')
raidCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidCompletionPerCent.setStatus('deprecated')
if mibBuilder.loadTexts: raidCompletionPerCent.setDescription('In the case when reconstruction/adding a spare, verification or scrubbing is in progress, the percent of such reconstruction, verification or scrubbing that has been completed on the referenced disk drive.')
raidVTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 2), )
if mibBuilder.loadTexts: raidVTable.setStatus('current')
if mibBuilder.loadTexts: raidVTable.setDescription('Display RAID configuration information.')
raidVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidVVol"), (0, "NETWORK-APPLIANCE-MIB", "raidVGroup"), (0, "NETWORK-APPLIANCE-MIB", "raidVIndex"))
if mibBuilder.loadTexts: raidVEntry.setStatus('current')
if mibBuilder.loadTexts: raidVEntry.setDescription('Display RAID configuration information for the referenced volume, raid group, and disk drive.')
raidVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVIndex.setStatus('current')
if mibBuilder.loadTexts: raidVIndex.setDescription('A number that identifies this disk drive within the given volume and RAID group.')
raidVDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskName.setStatus('current')
if mibBuilder.loadTexts: raidVDiskName.setDescription('The name identifying the referenced disk drive.')
raidVStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVStatus.setStatus('current')
if mibBuilder.loadTexts: raidVStatus.setDescription('The status of the referenced disk drive.')
raidVDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskId.setStatus('current')
if mibBuilder.loadTexts: raidVDiskId.setDescription('The disk identifier for the referenced disk drive.')
raidVScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiAdapter.setStatus('current')
if mibBuilder.loadTexts: raidVScsiAdapter.setDescription('The identifier of the SCSI adapter for the referenced disk drive.')
raidVScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVScsiId.setStatus('current')
if mibBuilder.loadTexts: raidVScsiId.setDescription('The identifier for the referenced disk drive on the referenced SCSI adapter.')
raidVUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedMb.setStatus('current')
if mibBuilder.loadTexts: raidVUsedMb.setDescription('The number of MBytes currently in use on the referenced disk drive.')
raidVUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVUsedBlocks.setStatus('current')
if mibBuilder.loadTexts: raidVUsedBlocks.setDescription('The number of Blocks currently in use on the referenced disk drive.')
raidVTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalMb.setStatus('current')
if mibBuilder.loadTexts: raidVTotalMb.setDescription('The number of MBytes physically available on the referenced disk drive.')
raidVTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVTotalBlocks.setStatus('current')
if mibBuilder.loadTexts: raidVTotalBlocks.setDescription('The number of Blocks physically available on the referenced disk drive.')
raidVCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVCompletionPerCent.setStatus('current')
if mibBuilder.loadTexts: raidVCompletionPerCent.setDescription('In the case when rapid raid recovery, disk copy, reconstruction/adding a spare, verification or scrubbing is in progress, the percent of such copy, reconstruction, verification or scrubbing that has been completed on the referenced disk drive.')
raidVVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVVol.setStatus('current')
if mibBuilder.loadTexts: raidVVol.setDescription("A number that identifies the volume that this entry belongs to. The first volume is '1'.")
raidVGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroup.setStatus('current')
if mibBuilder.loadTexts: raidVGroup.setDescription("A number that identifies the RAID group within the given volume that this entry belongs to. The first RAID group is '1', and number across all plexes.")
raidVDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskNumber.setStatus('current')
if mibBuilder.loadTexts: raidVDiskNumber.setDescription('The number of disks within this RAID group.')
raidVGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVGroupNumber.setStatus('current')
if mibBuilder.loadTexts: raidVGroupNumber.setDescription('The number of RAID groups within this volume.')
raidVDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPort.setStatus('current')
if mibBuilder.loadTexts: raidVDiskPort.setDescription('A number that indicates which port of the disk is being used by the primary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
raidVSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskName.setStatus('current')
if mibBuilder.loadTexts: raidVSecondaryDiskName.setDescription('The name identifying the secondary path to the referenced disk drive.')
raidVSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setStatus('current')
if mibBuilder.loadTexts: raidVSecondaryDiskPort.setDescription('A number that indicates which port of the disk is being used by the secondary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
raidVShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVShelf.setStatus('current')
if mibBuilder.loadTexts: raidVShelf.setDescription('Number identifying the shelf where the disk is located.')
raidVBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVBay.setStatus('current')
if mibBuilder.loadTexts: raidVBay.setDescription('Number identifying the disk bay within the shelf where the disk is located.')
raidVPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlex.setStatus('current')
if mibBuilder.loadTexts: raidVPlex.setDescription("A number that identifies the plex within the given volume that this entry belongs to. The first plex is '1'.")
raidVPlexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexGroup.setStatus('current')
if mibBuilder.loadTexts: raidVPlexGroup.setDescription("A number that identifies the RAID group within the given plex that this entry belongs to. The first RAID group is '1'.")
raidVPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexNumber.setStatus('current')
if mibBuilder.loadTexts: raidVPlexNumber.setDescription('The number of plexes within this volume. This number is always 1 or 2.')
raidVPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVPlexName.setStatus('current')
if mibBuilder.loadTexts: raidVPlexName.setDescription("A name that identifies the plex that this entry belongs to. A plex name can be anything, but is usually a string like 'plex0' or 'plex1'.")
raidVSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVSectorSize.setStatus('current')
if mibBuilder.loadTexts: raidVSectorSize.setDescription("A number that specifies bytes per sector for this entry. Values are '512' or '520'.")
raidVDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: raidVDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
raidVDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskVendor.setStatus('current')
if mibBuilder.loadTexts: raidVDiskVendor.setDescription('The vendor of the referenced disk drive.')
raidVDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskModel.setStatus('current')
if mibBuilder.loadTexts: raidVDiskModel.setDescription('Model string of the referenced disk drive.')
raidVDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: raidVDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
raidVDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskRPM.setStatus('current')
if mibBuilder.loadTexts: raidVDiskRPM.setDescription('RPM of the referenced disk drive.')
raidVDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskType.setStatus('current')
if mibBuilder.loadTexts: raidVDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, or ATA.')
raidVDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskPool.setStatus('current')
if mibBuilder.loadTexts: raidVDiskPool.setDescription('A name that identifies the disk pool that this entry belongs to.')
raidVDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setStatus('current')
if mibBuilder.loadTexts: raidVDiskCopyDestDiskName.setDescription('When raidVStatus value is prefailed, this string identifies the name of the disk which is the copy target of the referenced prefailed disk.')
spareTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 3), )
if mibBuilder.loadTexts: spareTable.setStatus('current')
if mibBuilder.loadTexts: spareTable.setDescription('Display spare disk configuration information.')
spareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "spareIndex"))
if mibBuilder.loadTexts: spareEntry.setStatus('current')
if mibBuilder.loadTexts: spareEntry.setDescription('Display configuration information for the referenced spare disk drive.')
spareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareIndex.setStatus('current')
if mibBuilder.loadTexts: spareIndex.setDescription('A number that identifies this entry for the referenced disk drive in the list of spare disk drives.')
spareDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskName.setStatus('current')
if mibBuilder.loadTexts: spareDiskName.setDescription('The name identifying the referenced spare disk drive.')
spareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("spare", 1), ("addingspare", 2), ("bypassed", 3), ("unknown", 4), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareStatus.setStatus('current')
if mibBuilder.loadTexts: spareStatus.setDescription('The status of the referenced spare disk drive.')
spareDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskId.setStatus('current')
if mibBuilder.loadTexts: spareDiskId.setDescription('The disk identifier for the referenced spare disk drive.')
spareScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiAdapter.setStatus('current')
if mibBuilder.loadTexts: spareScsiAdapter.setDescription('The identifier of the SCSI adapter for the referenced spare disk drive.')
spareScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareScsiId.setStatus('current')
if mibBuilder.loadTexts: spareScsiId.setDescription('The identifier for the referenced spare disk drive on the referenced SCSI adapter.')
spareTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalMb.setStatus('current')
if mibBuilder.loadTexts: spareTotalMb.setDescription('The number of MBytes physically available on the referenced spare disk drive.')
spareTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareTotalBlocks.setStatus('current')
if mibBuilder.loadTexts: spareTotalBlocks.setDescription('The number of Blocks physically available on the referenced spare disk drive.')
spareDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskPort.setStatus('current')
if mibBuilder.loadTexts: spareDiskPort.setDescription('A number that indicates which port of the disk is being used by the primary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
spareSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskName.setStatus('current')
if mibBuilder.loadTexts: spareSecondaryDiskName.setDescription('The name identifying the secondary path to the referenced disk drive.')
spareSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSecondaryDiskPort.setStatus('current')
if mibBuilder.loadTexts: spareSecondaryDiskPort.setDescription('A number that indicates which port of the disk is being used by the secondary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
spareShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareShelf.setStatus('current')
if mibBuilder.loadTexts: spareShelf.setDescription('Number identifying the shelf where the disk is located.')
spareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareBay.setStatus('current')
if mibBuilder.loadTexts: spareBay.setDescription('Number identifying the disk bay within the shelf where the disk is located.')
sparePool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sparePool.setStatus('current')
if mibBuilder.loadTexts: sparePool.setDescription('A name that identifies the disk pool that this entry belongs to.')
spareSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareSectorSize.setStatus('current')
if mibBuilder.loadTexts: spareSectorSize.setDescription("A number that specifies bytes per sector for this entry. Values are '512' or '520'.")
spareDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: spareDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
spareDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskVendor.setStatus('current')
if mibBuilder.loadTexts: spareDiskVendor.setDescription('The vendor of the referenced disk drive.')
spareDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskModel.setStatus('current')
if mibBuilder.loadTexts: spareDiskModel.setDescription('Model string of the referenced disk drive.')
spareDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: spareDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
spareDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskRPM.setStatus('current')
if mibBuilder.loadTexts: spareDiskRPM.setDescription('RPM of the referenced disk drive.')
spareDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareDiskType.setStatus('current')
if mibBuilder.loadTexts: spareDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, or ATA.')
diskSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 6, 4))
diskTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotalCount.setStatus('current')
if mibBuilder.loadTexts: diskTotalCount.setDescription('The total number of disks on the system.')
diskActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskActiveCount.setStatus('current')
if mibBuilder.loadTexts: diskActiveCount.setDescription('The number of disks which are currently active, including parity disks.')
diskReconstructingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingCount.setStatus('current')
if mibBuilder.loadTexts: diskReconstructingCount.setDescription('The number of disks which are currently being reconstructed.')
diskReconstructingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskReconstructingParityCount.setStatus('current')
if mibBuilder.loadTexts: diskReconstructingParityCount.setDescription('The number of parity disks which are currently being reconstructed.')
diskVerifyingParityCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVerifyingParityCount.setStatus('current')
if mibBuilder.loadTexts: diskVerifyingParityCount.setDescription('The number of parity disks which are currently being verified.')
diskScrubbingCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskScrubbingCount.setStatus('current')
if mibBuilder.loadTexts: diskScrubbingCount.setDescription('The number of disks which are currently being scrubbed.')
diskFailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedCount.setStatus('current')
if mibBuilder.loadTexts: diskFailedCount.setDescription('The number of disks which are currently broken.')
diskSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSpareCount.setStatus('current')
if mibBuilder.loadTexts: diskSpareCount.setDescription('The number of available spare disks.')
diskAddingSpareCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAddingSpareCount.setStatus('current')
if mibBuilder.loadTexts: diskAddingSpareCount.setDescription('The number of spare disks which are currently being added into a RAID group.')
diskFailedMessage = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFailedMessage.setStatus('current')
if mibBuilder.loadTexts: diskFailedMessage.setDescription('If diskFailedCount is non-zero, this is a string describing the failed disk or disks. Each failed disk is described with a sentence like Parity disk in volume vol0, RAID group 1, failed. or Disk on adapter 8a, shelf 1, bay 0, failed.')
diskPrefailedCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPrefailedCount.setStatus('current')
if mibBuilder.loadTexts: diskPrefailedCount.setDescription('The number of disks which are prefailed and marked for rapid raid recovery.')
raidVNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVNumber.setStatus('current')
if mibBuilder.loadTexts: raidVNumber.setDescription('Number of entries in the raidVTable table. This is the number of volumes in the system.')
spareNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spareNumber.setStatus('current')
if mibBuilder.loadTexts: spareNumber.setDescription('Number of entries in the spareTable table.')
otherDiskNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskNumber.setStatus('current')
if mibBuilder.loadTexts: otherDiskNumber.setDescription('Number of entries in the otherDiskTable table.')
raidPNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPNumber.setStatus('current')
if mibBuilder.loadTexts: raidPNumber.setDescription('Number of entries in the raidPTable table. This is the number of volumes in the system.')
otherDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 9), )
if mibBuilder.loadTexts: otherDiskTable.setStatus('current')
if mibBuilder.loadTexts: otherDiskTable.setDescription('Display out-of-service disk configuration information.')
otherDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "otherDiskIndex"))
if mibBuilder.loadTexts: otherDiskEntry.setStatus('current')
if mibBuilder.loadTexts: otherDiskEntry.setDescription('Display configuration information for the referenced disk drive.')
otherDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskIndex.setStatus('current')
if mibBuilder.loadTexts: otherDiskIndex.setDescription('A number that identifies this entry for the referenced disk drive in the list of out-of-service diskdrives. Out-of-service disks include all disks that are not in service in a raid group or available as a spare disk.')
otherDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskName.setStatus('current')
if mibBuilder.loadTexts: otherDiskDiskName.setDescription('The name identifying the referenced disk drive.')
otherDiskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broken", 1), ("bypassed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskStatus.setStatus('current')
if mibBuilder.loadTexts: otherDiskStatus.setDescription('The status of the referenced disk drive.')
otherDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskId.setStatus('current')
if mibBuilder.loadTexts: otherDiskDiskId.setDescription('The disk identifier for the referenced disk drive.')
otherDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiAdapter.setStatus('current')
if mibBuilder.loadTexts: otherDiskScsiAdapter.setDescription('The identifier of the SCSI adapter for the referenced disk drive.')
otherDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskScsiId.setStatus('current')
if mibBuilder.loadTexts: otherDiskScsiId.setDescription('The identifier for the referenced disk drive on the referenced SCSI adapter.')
otherDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalMb.setStatus('current')
if mibBuilder.loadTexts: otherDiskTotalMb.setDescription('The number of MBytes physically available on the referenced disk drive.')
otherDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskTotalBlocks.setStatus('current')
if mibBuilder.loadTexts: otherDiskTotalBlocks.setDescription('The number of Blocks physically available on the referenced disk drive.')
otherDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskDiskPort.setStatus('current')
if mibBuilder.loadTexts: otherDiskDiskPort.setDescription('A number that indicates which port of the disk is being used by the primary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
otherDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setStatus('current')
if mibBuilder.loadTexts: otherDiskSecondaryDiskName.setDescription('The name identifying the secondary path to the referenced disk drive.')
otherDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setStatus('current')
if mibBuilder.loadTexts: otherDiskSecondaryDiskPort.setDescription('A number that indicates which port of the disk is being used by the secondary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
otherDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskShelf.setStatus('current')
if mibBuilder.loadTexts: otherDiskShelf.setDescription('Number identifying the shelf where the disk is located.')
otherDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskBay.setStatus('current')
if mibBuilder.loadTexts: otherDiskBay.setDescription('Number identifying the disk bay within the shelf where the disk is located.')
otherDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskPool.setStatus('current')
if mibBuilder.loadTexts: otherDiskPool.setDescription('A name that identifies the disk pool that this entry belongs to.')
otherDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSectorSize.setStatus('current')
if mibBuilder.loadTexts: otherDiskSectorSize.setDescription("A number that specifies bytes per sector for this entry. Values are '512' or '520'.")
otherDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: otherDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
otherDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskVendor.setStatus('current')
if mibBuilder.loadTexts: otherDiskVendor.setDescription('The vendor of the referenced disk drive.')
otherDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskModel.setStatus('current')
if mibBuilder.loadTexts: otherDiskModel.setDescription('Model string of the referenced disk drive.')
otherDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: otherDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
otherDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskRPM.setStatus('current')
if mibBuilder.loadTexts: otherDiskRPM.setDescription('RPM of the referenced disk drive.')
otherDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 9, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherDiskType.setStatus('current')
if mibBuilder.loadTexts: otherDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, or ATA.')
raidPTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 10), )
if mibBuilder.loadTexts: raidPTable.setStatus('current')
if mibBuilder.loadTexts: raidPTable.setDescription('Display RAID configuration information.')
raidPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "raidPVol"), (0, "NETWORK-APPLIANCE-MIB", "raidPPlex"), (0, "NETWORK-APPLIANCE-MIB", "raidPGroup"), (0, "NETWORK-APPLIANCE-MIB", "raidPIndex"))
if mibBuilder.loadTexts: raidPEntry.setStatus('current')
if mibBuilder.loadTexts: raidPEntry.setDescription('Display RAID configuration information for the referenced volume, plex, raid group, and disk drive.')
raidPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPIndex.setStatus('current')
if mibBuilder.loadTexts: raidPIndex.setDescription('A number that identifies this disk drive within the given volume and RAID group.')
raidPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("reconstructionInProgress", 2), ("parityReconstructionInProgress", 3), ("parityVerificationInProgress", 4), ("scrubbingInProgress", 5), ("failed", 6), ("prefailed", 9), ("offline", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPStatus.setStatus('current')
if mibBuilder.loadTexts: raidPStatus.setDescription('The status of the referenced disk drive.')
raidPVol = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPVol.setStatus('current')
if mibBuilder.loadTexts: raidPVol.setDescription("A number that identifies the volume that this entry belongs to. The first volume is '1'.")
raidPPlex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlex.setStatus('current')
if mibBuilder.loadTexts: raidPPlex.setDescription("A number that identifies the plex that this entry belongs to. The first plex is '1'.")
raidPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroup.setStatus('current')
if mibBuilder.loadTexts: raidPGroup.setDescription("A number that identifies the RAID group within the given plex that this entry belongs to. The first RAID group is '1'.")
raidPPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexNumber.setStatus('current')
if mibBuilder.loadTexts: raidPPlexNumber.setDescription('The number of plexes within this volume. This number is always 1 or 2.')
raidPGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPGroupNumber.setStatus('current')
if mibBuilder.loadTexts: raidPGroupNumber.setDescription('The number of RAID groups within this plex.')
raidPDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskNumber.setStatus('current')
if mibBuilder.loadTexts: raidPDiskNumber.setDescription('The number of disks within this RAID group.')
raidPPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPPlexName.setStatus('current')
if mibBuilder.loadTexts: raidPPlexName.setDescription("A name that identifies the plex that this entry belongs to. A plex name can be anything, but is usually a string like 'plex0' or 'plex1'.")
raidPDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskName.setStatus('current')
if mibBuilder.loadTexts: raidPDiskName.setDescription('The name identifying the referenced disk drive.')
raidPDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPort.setStatus('current')
if mibBuilder.loadTexts: raidPDiskPort.setDescription('A number that indicates which port of the disk is being used by the primary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
raidPSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskName.setStatus('current')
if mibBuilder.loadTexts: raidPSecondaryDiskName.setDescription('The name identifying the secondary path to the referenced disk drive.')
raidPSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setStatus('current')
if mibBuilder.loadTexts: raidPSecondaryDiskPort.setDescription('A number that indicates which port of the disk is being used by the secondary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
raidPScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiAdapter.setStatus('current')
if mibBuilder.loadTexts: raidPScsiAdapter.setDescription('The identifier of the SCSI adapter for the referenced disk drive.')
raidPScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPScsiId.setStatus('current')
if mibBuilder.loadTexts: raidPScsiId.setDescription('The identifier for the referenced disk drive on the referenced SCSI adapter.')
raidPDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskId.setStatus('current')
if mibBuilder.loadTexts: raidPDiskId.setDescription('The disk identifier for the referenced disk drive.')
raidPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPShelf.setStatus('current')
if mibBuilder.loadTexts: raidPShelf.setDescription('Number identifying the shelf where the disk is located.')
raidPBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPBay.setStatus('current')
if mibBuilder.loadTexts: raidPBay.setDescription('Number identifying the disk bay within the shelf where the disk is located.')
raidPSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPSectorSize.setStatus('current')
if mibBuilder.loadTexts: raidPSectorSize.setDescription("A number that specifies bytes per sector for this entry. Values are '512' or '520'.")
raidPUsedMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedMb.setStatus('current')
if mibBuilder.loadTexts: raidPUsedMb.setDescription('The number of MBytes currently in use on the referenced disk drive.')
raidPUsedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPUsedBlocks.setStatus('current')
if mibBuilder.loadTexts: raidPUsedBlocks.setDescription('The number of Blocks currently in use on the referenced disk drive.')
raidPTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalMb.setStatus('current')
if mibBuilder.loadTexts: raidPTotalMb.setDescription('The number of MBytes physically available on the referenced disk drive.')
raidPTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPTotalBlocks.setStatus('current')
if mibBuilder.loadTexts: raidPTotalBlocks.setDescription('The number of Blocks physically available on the referenced disk drive.')
raidPCompletionPerCent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPCompletionPerCent.setStatus('current')
if mibBuilder.loadTexts: raidPCompletionPerCent.setDescription('In the case when rapid raid recovery, disk copy, reconstruction or adding a spare, verification or scrubbing is in progress, the percent of such copy, reconstruction, verification or scrubbing that has been completed on the referenced disk drive.')
raidPDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: raidPDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
raidPDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskVendor.setStatus('current')
if mibBuilder.loadTexts: raidPDiskVendor.setDescription('The vendor of the referenced disk drive.')
raidPDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskModel.setStatus('current')
if mibBuilder.loadTexts: raidPDiskModel.setDescription('Model string of the referenced disk drive.')
raidPDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: raidPDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
raidPDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskRPM.setStatus('current')
if mibBuilder.loadTexts: raidPDiskRPM.setDescription('RPM of the referenced disk drive.')
raidPDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskType.setStatus('current')
if mibBuilder.loadTexts: raidPDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, or ATA.')
raidPDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskPool.setStatus('current')
if mibBuilder.loadTexts: raidPDiskPool.setDescription('A name that identifies the disk pool that this entry belongs to.')
raidPDiskCopyDestDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 10, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setStatus('current')
if mibBuilder.loadTexts: raidPDiskCopyDestDiskName.setDescription('When raidPStatus value is prefailed, this string identifies the name of the disk which is the copy target of the referenced prefailed disk.')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 11), )
if mibBuilder.loadTexts: plexTable.setStatus('current')
if mibBuilder.loadTexts: plexTable.setDescription('A table containing plex specific information.')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "plexIndex"))
if mibBuilder.loadTexts: plexEntry.setStatus('current')
if mibBuilder.loadTexts: plexEntry.setDescription('Provide a report on file system plexes.')
plexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexIndex.setStatus('current')
if mibBuilder.loadTexts: plexIndex.setDescription('A number that identifies this entry for the referenced plex.')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('current')
if mibBuilder.loadTexts: plexName.setDescription('The identifier of the plex.')
plexVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexVolName.setStatus('current')
if mibBuilder.loadTexts: plexVolName.setDescription('The volume to which this plex belongs.')
plexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("resyncing", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStatus.setStatus('current')
if mibBuilder.loadTexts: plexStatus.setDescription('The status of the plex.')
plexPercentResyncing = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexPercentResyncing.setStatus('current')
if mibBuilder.loadTexts: plexPercentResyncing.setDescription('If the plex is resyncing, the percent completion of the resync.')
outOfDateDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskCount.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskCount.setDescription('Number of entries in the outOfDateDiskTable table.')
outOfDateDiskTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 6, 13), )
if mibBuilder.loadTexts: outOfDateDiskTable.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskTable.setDescription('Display out-of-date disk information.')
outOfDateDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "outOfDateDiskIndex"))
if mibBuilder.loadTexts: outOfDateDiskEntry.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskEntry.setDescription('Display information for the referenced out-of-date disk.')
outOfDateDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskIndex.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskIndex.setDescription('A number that identifies this entry for the referenced disk drive in the list of out-of-date diskdrives.')
outOfDateDiskDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskName.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskDiskName.setDescription('The name identifying the referenced disk drive.')
outOfDateDiskDiskId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskId.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskDiskId.setDescription('The disk identifier for the referenced disk drive.')
outOfDateDiskScsiAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskScsiAdapter.setDescription('The identifier of the SCSI adapter for the referenced disk drive.')
outOfDateDiskScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskScsiId.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskScsiId.setDescription('The identifier for the referenced disk drive on the referenced SCSI adapter.')
outOfDateDiskTotalMb = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskTotalMb.setDescription('The number of MBytes physically available on the referenced disk drive.')
outOfDateDiskTotalBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskTotalBlocks.setDescription('The number of Blocks physically available on the referenced disk drive.')
outOfDateDiskDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskDiskPort.setDescription('A number that indicates which port of the disk is being used by the primary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
outOfDateDiskSecondaryDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskName.setDescription('The name identifying the secondary path to the referenced disk drive.')
outOfDateDiskSecondaryDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portA", 1), ("portB", 2), ("portSingle", 3), ("portNone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskSecondaryDiskPort.setDescription('A number that indicates which port of the disk is being used by the secondary path to the disk. For a dual-ported disk, values of portA and portB indicate which port is being used. If the disk only has a single port, the value is portSingle, and if the port is not active, the value is portNone.')
outOfDateDiskShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskShelf.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskShelf.setDescription('Number identifying the shelf where the disk is located.')
outOfDateDiskBay = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskBay.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskBay.setDescription('Number identifying the disk bay within the shelf where the disk is located.')
outOfDateDiskPool = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskPool.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskPool.setDescription('A name that identifies the disk pool that this entry belongs to.')
outOfDateDiskSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskSectorSize.setDescription("A number that specifies bytes per sector for this entry. Values are '512' or '520'.")
outOfDateDiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskSerialNumber.setDescription('Serial number of the referenced disk drive.')
outOfDateDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskVendor.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskVendor.setDescription('The vendor of the referenced disk drive.')
outOfDateDiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskModel.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskModel.setDescription('Model string of the referenced disk drive.')
outOfDateDiskFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskFirmwareRevision.setDescription('Firmware revision number of the referenced disk drive.')
outOfDateDiskRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskRPM.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskRPM.setDescription('RPM of the referenced disk drive.')
outOfDateDiskType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 6, 13, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outOfDateDiskType.setStatus('current')
if mibBuilder.loadTexts: outOfDateDiskType.setDescription('Interface type of the referenced disk drive. e.g SCSI, or ATA.')
cifsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 1))
cifsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 2))
cifsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3))
cifsMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 4))
cifsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsIsEnabled.setDescription('Whether the CIFS protocol is active on the filer.')
cifsIsLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLoginEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsIsLoginEnabled.setDescription('Whether new CIFS connections to the filer are currently allowed.')
cifsHostName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsHostName.setStatus('current')
if mibBuilder.loadTexts: cifsHostName.setDescription('The host name used by the CIFS protocol on this filer.')
cifsAltNames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAltNames.setStatus('current')
if mibBuilder.loadTexts: cifsAltNames.setDescription('Alternate names recognized by the filer.')
cifsDomainJoined = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainJoined.setStatus('current')
if mibBuilder.loadTexts: cifsDomainJoined.setDescription('Has the filer joined an NT domain? If this value is true, cifsDomainName will contain the name of the domain. Otherwise, the filer may have joined a WorkGroup, and cifsWGName will contain the name of the WorkGroup. ')
cifsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDomainName.setStatus('current')
if mibBuilder.loadTexts: cifsDomainName.setDescription('The domain name used by the CIFS protocol on this filer.')
cifsWGName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWGName.setStatus('current')
if mibBuilder.loadTexts: cifsWGName.setDescription('The workgroup name (if any) used by the CIFS protocol on this filer.')
cifsDCName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDCName.setStatus('current')
if mibBuilder.loadTexts: cifsDCName.setDescription('The name of the Domain Controller used by this filer to authenticate users and file requests.')
cifsIsWinsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsWinsEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsIsWinsEnabled.setDescription('True if WINS name resolution is enabled on the filer.')
cifsWinsServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWinsServers.setStatus('current')
if mibBuilder.loadTexts: cifsWinsServers.setDescription('The name(s) of the WINS servers registered with the filer.')
cifsSecurityModel = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unix", 1), ("pc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSecurityModel.setStatus('current')
if mibBuilder.loadTexts: cifsSecurityModel.setDescription('Which type of authentication semantics (Unix or PC) are in use for PC access to Unix files on the filer. If Unix semantics are in use, no ACL on a Unix file is ever checked. If PC semantics are in use, the share level ACL on the share containing the file is used for authentication instead of the group portion of the permissions on the file.')
cifsPCGenericUser = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPCGenericUser.setStatus('current')
if mibBuilder.loadTexts: cifsPCGenericUser.setDescription('The name of the generic PC user, if any. This username is used for CIFS access by Unix users who have not authenticated through CIFS or NT.')
cifsOplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOplocksEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsOplocksEnabled.setDescription('Whether oplocks are enabled on the filer.')
cifsLevel2OplocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsLevel2OplocksEnabled.setDescription('Whether level 2 oplocks are enabled on the filer.')
cifsPreserveCase = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPreserveCase", 1), ("preserveCase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPreserveCase.setStatus('current')
if mibBuilder.loadTexts: cifsPreserveCase.setDescription('If this option is set to preserve-case (the default), all filename references will be case preserving. Otherwise, they are forced to lowercase.')
cifsSymlinksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinksEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsSymlinksEnabled.setDescription('If this option is enabled, CIFS accesses will follow symbolic links using Unix semantics.')
cifsSymlinkCycleProtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEnabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsSymlinkCycleProtEnabled.setDescription('If this option is enabled, CIFS accesses will through symbolic links will check for cycles in the link graph.')
cifsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: cifsIsLicensed.setDescription('Whether the CIFS protocol is licensed on the filer.')
cifsPerClientStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: cifsPerClientStatsEnabled.setDescription('True when cifs.per_client_stats are being collected.')
cifsStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsStatus.setStatus('current')
if mibBuilder.loadTexts: cifsStatus.setDescription('Encoding of CIFS startup state on the filer.')
cifsNeedPW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNeedPW.setStatus('current')
if mibBuilder.loadTexts: cifsNeedPW.setDescription('Does the administrative password need to be set before start?')
cifsTimeToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTimeToShutdown.setStatus('current')
if mibBuilder.loadTexts: cifsTimeToShutdown.setDescription('Time remaining until CIFS shutdown')
cifsMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxConnections.setStatus('current')
if mibBuilder.loadTexts: cifsMaxConnections.setDescription('The maximum number of simultaneous CIFS connections allowed on the filer.')
cifsMaxTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxTrees.setStatus('current')
if mibBuilder.loadTexts: cifsMaxTrees.setDescription('The maximum number of simultaneous CIFS trees allowed on the filer.')
cifsMaxShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxShares.setStatus('current')
if mibBuilder.loadTexts: cifsMaxShares.setDescription('The maximum number of simultaneous CIFS shares allowed on the filer.')
cifsMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxFiles.setStatus('current')
if mibBuilder.loadTexts: cifsMaxFiles.setDescription('The maximum number of concurrently open CIFS files and directories allowed on the filer.')
cifsMaxACLs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxACLs.setStatus('current')
if mibBuilder.loadTexts: cifsMaxACLs.setDescription('This object is deprecated, and always has a value of 0.')
cifsConnectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsConnectedUsers.setStatus('current')
if mibBuilder.loadTexts: cifsConnectedUsers.setDescription('The current number of CIFS users on the filer.')
cifsNTrees = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNTrees.setStatus('current')
if mibBuilder.loadTexts: cifsNTrees.setDescription('The current number of CIFS trees on the filer.')
cifsNShares = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNShares.setStatus('current')
if mibBuilder.loadTexts: cifsNShares.setDescription('The current number of CIFS shares on the filer.')
cifsNSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNSessions.setStatus('current')
if mibBuilder.loadTexts: cifsNSessions.setDescription('The current number of active CIFS sessions on the filer.')
cifsNOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenFiles.setStatus('current')
if mibBuilder.loadTexts: cifsNOpenFiles.setDescription('The number of open CIFS files and directories on the filer.')
cifsNOpenDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOpenDirs.setStatus('current')
if mibBuilder.loadTexts: cifsNOpenDirs.setDescription('The number of open CIFS directories on the filer.')
cifsNOplockBreakWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setStatus('current')
if mibBuilder.loadTexts: cifsNOplockBreakWaits.setDescription('The number of open files waiting for oplock break messages to be sent.')
cifsNOplockAckWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNOplockAckWaits.setStatus('current')
if mibBuilder.loadTexts: cifsNOplockAckWaits.setDescription('The number of open files waiting for acknowledgements to oplock break messages.')
cifsSuspectOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSuspectOps.setStatus('current')
if mibBuilder.loadTexts: cifsSuspectOps.setDescription('A smoothed average of the number of events per second of the type frequently seen during virus attacks.')
cifsNDomainControllers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNDomainControllers.setStatus('current')
if mibBuilder.loadTexts: cifsNDomainControllers.setDescription('The number of Domain Controllers found.')
cifsServ = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1))
cifsOps = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1))
cifsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2))
cifsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3))
cifsObsReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4))
cifsObsPercent = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5))
cifsTotalOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalOps.setStatus('current')
if mibBuilder.loadTexts: cifsTotalOps.setDescription('The number of CIFS operations done by the filer, since the last time the statistics were cleared.')
cifsTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsTotalCalls.setStatus('current')
if mibBuilder.loadTexts: cifsTotalCalls.setDescription('The total number of CIFS calls received, since the last time the statistics were cleared. This is the number of cifsTotalOps plus the number of miscellaneous operations that are not logged which were received in that time period.')
cifsBadCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsBadCalls.setStatus('current')
if mibBuilder.loadTexts: cifsBadCalls.setDescription('The total number of received CIFS calls rejected, since the last time the statistics were cleared.')
cifsGetAttrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsGetAttrs.setStatus('current')
if mibBuilder.loadTexts: cifsGetAttrs.setDescription('The total number of CIFS operations to get the attributes on a file or directory, since the last time the statistics were reset.')
cifsReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsReads.setStatus('current')
if mibBuilder.loadTexts: cifsReads.setDescription('The total number of CIFS Read operations on a file or directory, since the last time the statistics were reset.')
cifsWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWrites.setStatus('current')
if mibBuilder.loadTexts: cifsWrites.setDescription('The total number of CIFS write operations on a file or directory, since the last time the statistics were reset.')
cifsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsLocks.setStatus('current')
if mibBuilder.loadTexts: cifsLocks.setDescription('The number of CIFS file locking requests since the last time the statistics were reset.')
cifsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpens.setStatus('current')
if mibBuilder.loadTexts: cifsOpens.setDescription('The number of calls, via CIFS, to open a file or directory, since the last time the statistics were reset.')
cifsDirOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDirOps.setStatus('current')
if mibBuilder.loadTexts: cifsDirOps.setDescription('The number of CIFS directory operations, since the last time the statistics were reset.')
cifsOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOthers.setStatus('current')
if mibBuilder.loadTexts: cifsOthers.setDescription("The number of CIFS operations, since the last time the statistics were reset, that don't fall into the categories for GetAttr, Read, Write, Lock, DirOp and Open.")
smbNegProts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProts.setStatus('current')
if mibBuilder.loadTexts: smbNegProts.setDescription('The number of SMB NEGOTIATE requests, since the last time the statistics were cleared.')
smbSessionSetupAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXs.setStatus('current')
if mibBuilder.loadTexts: smbSessionSetupAndXs.setDescription('The number of SMB SESSION_SETUP_ANDX requests, since the last time the statistics were cleared.')
smbLogoffAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXs.setStatus('current')
if mibBuilder.loadTexts: smbLogoffAndXs.setDescription('The number of SMB LOGOFF_ANDX requests, since the last time the statistics were cleared.')
smbTreeConnectAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXs.setStatus('current')
if mibBuilder.loadTexts: smbTreeConnectAndXs.setDescription('The number of SMB TREE_CONNECT_ANDX requests, since the last time the statistics were cleared.')
smbTreeDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnects.setStatus('current')
if mibBuilder.loadTexts: smbTreeDisconnects.setDescription('The number of SMB TREE_DISCONNECT requests, since the last time the statistics were cleared.')
smbTrans2QueryFSInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFSInfos.setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION requests, since the last time the statistics were cleared.')
smbEchos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchos.setStatus('current')
if mibBuilder.loadTexts: smbEchos.setDescription('The number of SMB ECHO requests, since the last time the statistics were cleared.')
smbNTCancels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancels.setStatus('current')
if mibBuilder.loadTexts: smbNTCancels.setDescription('The number of SMB NT_CANCEL requests, since the last time the statistics were cleared.')
smbNTCreateAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCreateAndXs.setStatus('current')
if mibBuilder.loadTexts: smbNTCreateAndXs.setDescription('The number of SMB NT_CREATE_ANDX requests, since the last time the statistics were cleared.')
smbNTTransactCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactCreates.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactCreates.setDescription('The number of SMB NT_TRANSACT_CREATE requests, since the last time the statistics were cleared.')
smbCreateTemporaries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaries.setStatus('current')
if mibBuilder.loadTexts: smbCreateTemporaries.setDescription('The SMB CREATE_TEMPORARY operation is not presently supported, so this value should always be zero.')
smbReadAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXs.setStatus('current')
if mibBuilder.loadTexts: smbReadAndXs.setDescription('The number of SMB READ_ANDX requests, since the last time the statistics were cleared.')
smbWriteAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXs.setStatus('current')
if mibBuilder.loadTexts: smbWriteAndXs.setDescription('The number of SMB WRITE_ANDX requests, since the last time the statistics were cleared.')
smbLockingAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXs.setStatus('current')
if mibBuilder.loadTexts: smbLockingAndXs.setDescription('The number of SMB LOCKING_ANDX requests, since the last time the statistics were cleared.')
smbSeeks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeeks.setStatus('current')
if mibBuilder.loadTexts: smbSeeks.setDescription('The number of SMB SEEK requests, since the last time the statistics were cleared.')
smbFlushes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushes.setStatus('current')
if mibBuilder.loadTexts: smbFlushes.setDescription('The number of SMB FLUSH requests, since the last time the statistics were cleared.')
smbCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCloses.setStatus('current')
if mibBuilder.loadTexts: smbCloses.setDescription('The number of SMB CLOSE requests, since the last time the statistics were cleared.')
smbDeletes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletes.setStatus('current')
if mibBuilder.loadTexts: smbDeletes.setDescription('The number of SMB DELETE requests, since the last time the statistics were cleared.')
smbRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenames.setStatus('current')
if mibBuilder.loadTexts: smbRenames.setDescription('The number of SMB RENAME requests, since the last time the statistics were cleared.')
smbMoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMoves.setStatus('current')
if mibBuilder.loadTexts: smbMoves.setDescription('The SMB MOVE request is not presently supported, so this value should always be zero.')
smbCopies = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopies.setStatus('current')
if mibBuilder.loadTexts: smbCopies.setDescription('The SMB COPY request is not presently supported, so this value should always be zero.')
smbTrans2QueryPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryPathInfos.setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION requests, since the last time the statistics were cleared.')
smbTrans2QueryFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFileInfos.setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION requests, since the last time the statistics were cleared.')
smbTrans2SetPathInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetPathInfos.setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION requests, since the last time the statistics were cleared.')
smbTrans2SetFileInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetFileInfos.setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION requests, since the last time the statistics were cleared.')
smbDeleteDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirs.setStatus('current')
if mibBuilder.loadTexts: smbDeleteDirs.setDescription('The number of SMB DELETE_DIRECTORY requests, since the last time the statistics were cleared.')
smbCheckDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirs.setStatus('current')
if mibBuilder.loadTexts: smbCheckDirs.setDescription('The SMB COPY request is not presently supported, so this value should always be zero.')
smbTrans2FindFirst2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindFirst2s.setDescription('The number of SMB TRANS2_FIND_FIRST2 requests, since the last time the statistics were cleared.')
smbTrans2FindNext2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2s.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindNext2s.setDescription('The number of SMB TRANS2_FIND_NEXT2 requests, since the last time the statistics were cleared.')
smbFindClose2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2s.setStatus('current')
if mibBuilder.loadTexts: smbFindClose2s.setDescription('The number of SMB FIND_CLOSE2 requests, since the last time the statistics were cleared.')
smbNTTransactNotifyChgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactNotifyChgs.setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE requests, since the last time the statistics were cleared.')
smbTrans2GetDFSReferrals = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setStatus('current')
if mibBuilder.loadTexts: smbTrans2GetDFSReferrals.setDescription('The SMB TRANS2_GET_DFS_REFERRAL request is not presently supported, so this value should always be zero.')
smbTrans2ReportDFSIncs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setStatus('current')
if mibBuilder.loadTexts: smbTrans2ReportDFSIncs.setDescription('The SMB TRANS2_REPORT_DFS_INCONSISTENCY request is not presently supported, so this value should always be zero.')
smbOpenPrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFiles.setStatus('current')
if mibBuilder.loadTexts: smbOpenPrintFiles.setDescription('The SMB OPEN_PRINT_FILE request is not supported, so this value should always be zero.')
smbGetPrintQueues = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueues.setStatus('current')
if mibBuilder.loadTexts: smbGetPrintQueues.setDescription('The SMB GET_PRINT_QUEUE request is not supported, so this value should always be zero.')
smbNTTransactIoctls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctls.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactIoctls.setDescription('The number of SMB NT_TRANSACT_IOCTL requests, since the last time the statistics were cleared.')
smbNTTransactQuerySecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactQuerySecDescs.setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC requests, since the last time the statistics were cleared.')
smbNTTransactSetSecDescs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactSetSecDescs.setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC requests, since the last time the statistics were cleared.')
smbTrans2CreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirs.setStatus('current')
if mibBuilder.loadTexts: smbTrans2CreateDirs.setDescription('The number of SMB TRANS2_CREATE_DIRECTORY requests, since the last time the statistics were cleared.')
smbNTCancelCNs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNs.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelCNs.setDescription('The number of SMB NT_CANCEL requests against change notifications since the last time the statistics were cleared.')
smbNTCancelOthers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 2, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOthers.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelOthers.setDescription('The number of SMB NT_CANCEL requests against operations other than change notifications, since the last time the statistics were cleared.')
obsSmbClosePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setStatus('current')
if mibBuilder.loadTexts: obsSmbClosePrintFiles.setDescription('The number of SMB CLOSE_PRINT_FILE requests, since the last time the statistics were cleared.')
obsSmbCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreates.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreates.setDescription('The number of SMB CREATE requests, since the last time the statistics were cleared.')
obsSmbCreateDirs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirs.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateDirs.setDescription('The number of SMB CREATE_DIRECTORY requests, since the last time the statistics were cleared.')
obsSmbCreateNews = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNews.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateNews.setDescription('The number of SMB CREATE_NEW requests, since the last time the statistics were cleared.')
obsSmbLockAndReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReads.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockAndReads.setDescription('The number of SMB LOCK_AND_READ requests, since the last time the statistics were cleared.')
obsSmbLockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRanges.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockByteRanges.setDescription('The number of SMB LOCK_BYTE_RANGE requests, since the last time the statistics were cleared.')
obsSmbOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpens.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpens.setDescription('The number of SMB OPEN requests, since the last time the statistics were cleared.')
obsSmbOpenAndXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXs.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpenAndXs.setDescription('The number of SMB OPEN_ANDX requests, since the last time the statistics were cleared.')
obsSmbProcessExits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExits.setStatus('current')
if mibBuilder.loadTexts: obsSmbProcessExits.setDescription('The number of SMB PROCESS_EXIT requests, since the last time the statistics were cleared.')
obsSmbQueryInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfos.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfos.setDescription('The number of SMB QUERY_INFORMATION requests, since the last time the statistics were cleared.')
obsSmbQueryInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfo2s.setDescription('The number of SMB QUERY_INFORMATION2 requests, since the last time the statistics were cleared.')
obsSmbReads = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReads.setStatus('current')
if mibBuilder.loadTexts: obsSmbReads.setDescription('The number of SMB READ requests, since the last time the statistics were cleared.')
obsSmbReadMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXs.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadMPXs.setDescription('The SMB READ_MPX request is not supported, so this value should always be zero.')
obsSmbReadRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRaws.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadRaws.setDescription('The number of SMB READ_RAW requests, since the last time the statistics were cleared.')
obsSmbSearchs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchs.setStatus('current')
if mibBuilder.loadTexts: obsSmbSearchs.setDescription('The number of SMB SEARCH requests, since the last time the statistics were cleared.')
obsSmbSetInfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfos.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfos.setDescription('The number of SMB SET_INFORMATION requests, since the last time the statistics were cleared.')
obsSmbSetInfo2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2s.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfo2s.setDescription('The number of SMB SET_INFORMATION2 requests, since the last time the statistics were cleared.')
obsSmbQueryInfoDisks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfoDisks.setDescription('The number of SMB QUERY_INFORMATION_DISK requests, since the last time the statistics were cleared.')
obsSmbTrans2Open2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setStatus('current')
if mibBuilder.loadTexts: obsSmbTrans2Open2s.setDescription('The number of SMB TRANS2_OPEN2 requests, since the last time the statistics were cleared.')
obsSmbTreeConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnects.setStatus('current')
if mibBuilder.loadTexts: obsSmbTreeConnects.setDescription('The number of SMB TREE_CONNECT requests, since the last time the statistics were cleared.')
obsSmbUnlockByteRanges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setStatus('current')
if mibBuilder.loadTexts: obsSmbUnlockByteRanges.setDescription('The number of SMB UNLOCK_BYTE_RANGE requests, since the last time the statistics were cleared.')
obsSmbWrites = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWrites.setStatus('current')
if mibBuilder.loadTexts: obsSmbWrites.setDescription('The number of SMB WRITE requests, since the last time the statistics were cleared.')
obsSmbWriteAndUnlocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndUnlocks.setDescription('The number of SMB WRITE_AND_UNLOCK requests, since the last time the statistics were cleared.')
obsSmbWriteAndCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndCloses.setDescription('The number of SMB WRITE_AND_CLOSE requests, since the last time the statistics were cleared.')
obsSmbWriteMPXs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXs.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteMPXs.setDescription('The SMB WRITE_MPX request is not supported, so this value should always be zero.')
obsSmbWritePrintFiles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setStatus('current')
if mibBuilder.loadTexts: obsSmbWritePrintFiles.setDescription('The SMB WRITE_PRINT_FILE request is not supported, so this value should always be zero.')
obsSmbWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRaws.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteRaws.setDescription('The number of SMB WRITE_RAW requests, since the last time the statistics were cleared.')
smbNegProtPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNegProtPct.setStatus('current')
if mibBuilder.loadTexts: smbNegProtPct.setDescription('The number of SMB NEGOTIATE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbSessionSetupAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbSessionSetupAndXPct.setDescription('The number of SMB SESSION_SETUP_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbLogoffAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLogoffAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbLogoffAndXPct.setDescription('The number of SMB LOGOFF_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTreeConnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbTreeConnectAndXPct.setDescription('The number of SMB TREE_CONNECT_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTreeDisconnectAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbTreeDisconnectAndXPct.setDescription('The number of SMB TREE_DISCONNECT_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2QueryFSInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFSInfoPct.setDescription('The number of SMB TRANS2_QUERY_FS_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbEchoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbEchoPct.setStatus('current')
if mibBuilder.loadTexts: smbEchoPct.setDescription('The number of SMB ECHO requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTCancelPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelPct.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelPct.setDescription('The number of SMB NT_CANCEL requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbCreateAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbCreateAndXPct.setDescription('The number of SMB NT_CREATE_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTransactCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTransactCreatePct.setStatus('current')
if mibBuilder.loadTexts: smbTransactCreatePct.setDescription('The number of SMB NT_TRANSACT_CREATE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbCreateTemporaryPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCreateTemporaryPct.setStatus('current')
if mibBuilder.loadTexts: smbCreateTemporaryPct.setDescription('The number of SMB CREATE_TEMPORARY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbReadAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbReadAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbReadAndXPct.setDescription('The number of SMB READ_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbWriteAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbWriteAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbWriteAndXPct.setDescription('The number of SMB WRITE_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbLockingAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbLockingAndXPct.setStatus('current')
if mibBuilder.loadTexts: smbLockingAndXPct.setDescription('The number of SMB LOCKING_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbSeekPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbSeekPct.setStatus('current')
if mibBuilder.loadTexts: smbSeekPct.setDescription('The number of SMB SEEK requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbFlushPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFlushPct.setStatus('current')
if mibBuilder.loadTexts: smbFlushPct.setDescription('The number of SMB FLUSH requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbClosePct.setStatus('current')
if mibBuilder.loadTexts: smbClosePct.setDescription('The number of SMB CLOSE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbDeletePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeletePct.setStatus('current')
if mibBuilder.loadTexts: smbDeletePct.setDescription('The number of SMB DELETE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbRenamePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbRenamePct.setStatus('current')
if mibBuilder.loadTexts: smbRenamePct.setDescription('The number of SMB RENAME requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbMovePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbMovePct.setStatus('current')
if mibBuilder.loadTexts: smbMovePct.setDescription('The number of SMB MOVE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbCopyPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCopyPct.setStatus('current')
if mibBuilder.loadTexts: smbCopyPct.setDescription('The number of SMB COPY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2QueryPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryPathInfoPct.setDescription('The number of SMB TRANS2_QUERY_PATH_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2QueryFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2QueryFileInfoPct.setDescription('The number of SMB TRANS2_QUERY_FILE_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2SetPathInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetPathInfoPct.setDescription('The number of SMB TRANS2_SET_PATH_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2SetFileInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2SetFileInfoPct.setDescription('The number of SMB TRANS2_SET_FILE_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbDeleteDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbDeleteDirPct.setStatus('current')
if mibBuilder.loadTexts: smbDeleteDirPct.setDescription('The number of SMB DELETE_DIRECTORY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbCheckDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbCheckDirPct.setStatus('current')
if mibBuilder.loadTexts: smbCheckDirPct.setDescription('The number of SMB CHECK_DIRECTORY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2FindFirst2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindFirst2Pct.setDescription('The number of SMB TRANS2_FIND_FIRST2 requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2FindNext2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2FindNext2Pct.setDescription('The number of SMB TRANS2_FIND_NEXT2 requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbFindClose2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbFindClose2Pct.setStatus('current')
if mibBuilder.loadTexts: smbFindClose2Pct.setDescription('The number of SMB FIND_CLOSE2 requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTTransactNotifyChgPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactNotifyChgPct.setDescription('The number of SMB NT_TRANSACT_NOTIFY_CHANGE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2GetDFSReferralPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2GetDFSReferralPct.setDescription('The number of SMB TRANS2_GET_DFS_REFERRAL requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2ReportDFSIncPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2ReportDFSIncPct.setDescription('The number of SMB TRANS2_REPORT_DFS_INCONSISTENCY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbOpenPrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbOpenPrintFilePct.setStatus('current')
if mibBuilder.loadTexts: smbOpenPrintFilePct.setDescription('The number of SMB OPEN_PRINT_FILE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbGetPrintQueuePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbGetPrintQueuePct.setStatus('current')
if mibBuilder.loadTexts: smbGetPrintQueuePct.setDescription('The number of SMB GET_PRINT_QUEUE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTTransactIoctlPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactIoctlPct.setDescription('The number of SMB NT_TRANSACT_IOCTL requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTTransactQuerySecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactQuerySecDescPct.setDescription('The number of SMB NT_TRANSACT_QUERY_SECURITY_DESC requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTTransactSetSecDescPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setStatus('current')
if mibBuilder.loadTexts: smbNTTransactSetSecDescPct.setDescription('The number of SMB NT_TRANSACT_SET_SECURITY_DESC requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbTrans2CreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setStatus('current')
if mibBuilder.loadTexts: smbTrans2CreateDirPct.setDescription('The number of SMB TRANS2_CREATE_DIRECTORY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTCancelCNPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelCNPct.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelCNPct.setDescription('The number of SMB NT_CANCEL requests against change notifications, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
smbNTCancelOtherPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smbNTCancelOtherPct.setStatus('current')
if mibBuilder.loadTexts: smbNTCancelOtherPct.setDescription('The number of SMB NT_CANCEL requests against calls other than change notifications, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbClosePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbClosePrintFilePct.setDescription('The number of SMB CLOSE_PRINT_FILE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbCreatePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreatePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreatePct.setDescription('The number of SMB CREATE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbCreateDirPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateDirPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateDirPct.setDescription('The number of SMB CREATE_DIRECTORY requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbCreateNewPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbCreateNewPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbCreateNewPct.setDescription('The number of SMB CREATE_NEW requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbLockAndReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockAndReadPct.setDescription('The number of SMB LOCK_AND_READ requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbLockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbLockByteRangePct.setDescription('The number of SMB LOCK_BYTE_RANGE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbOpenPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpenPct.setDescription('The number of SMB OPEN requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbOpenAndXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbOpenAndXPct.setDescription('The number of SMB OPEN_ANDX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbProcessExitPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbProcessExitPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbProcessExitPct.setDescription('The number of SMB PROCESS_EXIT requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbQueryInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfoPct.setDescription('The number of SMB QUERY_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbQueryInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfo2Pct.setDescription('The number of SMB QUERY_INFORMATION2 requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbReadPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadPct.setDescription('The number of SMB READ requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbReadMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadMPXPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadMPXPct.setDescription('The number of SMB READ_MPX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbReadRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbReadRawPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbReadRawPct.setDescription('The number of SMB READ_RAW requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbSearchPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSearchPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbSearchPct.setDescription('The number of SMB SEARCH requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbSetInfoPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfoPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfoPct.setDescription('The number of SMB SET_INFORMATION requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbSetInfo2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setStatus('current')
if mibBuilder.loadTexts: obsSmbSetInfo2Pct.setDescription('The number of SMB SET_INFORMATION2 requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbQueryInfoDiskPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbQueryInfoDiskPct.setDescription('The number of SMB QUERY_INFORMATION_DISK requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbTrans2Open2Pct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setStatus('current')
if mibBuilder.loadTexts: obsSmbTrans2Open2Pct.setDescription('The number of SMB TRANS2_OPEN2 requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbTreeConnectPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbTreeConnectPct.setDescription('The number of SMB TREE_CONNECT requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbUnlockByteRangePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbUnlockByteRangePct.setDescription('The number of SMB UNLOCK_BYTE_RANGE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbWritePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWritePct.setDescription('The number of SMB WRITE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbWriteAndUnlockPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndUnlockPct.setDescription('The number of SMB WRITE_AND_UNLOCK requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbWriteAndClosePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteAndClosePct.setDescription('The number of SMB WRITE_AND_CLOSE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbWriteMPXPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteMPXPct.setDescription('The number of SMB WRITE_MPX requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbWritePrintFilePct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWritePrintFilePct.setDescription('The number of SMB WRITE_PRINT_FILE requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
obsSmbWriteRawPct = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 3, 1, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obsSmbWriteRawPct.setStatus('current')
if mibBuilder.loadTexts: obsSmbWriteRawPct.setDescription('The number of SMB WRITE_RAW requests, as a percentage of total CIFS calls received, since the last time the statistics were cleared.')
cifsCancelLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCancelLocks.setStatus('current')
if mibBuilder.loadTexts: cifsCancelLocks.setDescription('Undocumented')
cifsWaitLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsWaitLocks.setStatus('current')
if mibBuilder.loadTexts: cifsWaitLocks.setDescription('Undocumented')
cifsCopyToAligns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCopyToAligns.setStatus('current')
if mibBuilder.loadTexts: cifsCopyToAligns.setDescription('Undocumented')
cifsAlignedSmalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmalls.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedSmalls.setDescription('Undocumented')
cifsAlignedLarges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLarges.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedLarges.setDescription('Undocumented')
cifsAlignedSmallRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedSmallRels.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedSmallRels.setDescription('Undocumented')
cifsAlignedLargeRels = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsAlignedLargeRels.setStatus('current')
if mibBuilder.loadTexts: cifsAlignedLargeRels.setDescription('Undocumented')
cifsMbufWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMbufWaits.setStatus('current')
if mibBuilder.loadTexts: cifsMbufWaits.setDescription('Undocumented')
cifsNbtWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNbtWaits.setStatus('current')
if mibBuilder.loadTexts: cifsNbtWaits.setDescription('Undocumented')
cifsCwaWaits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsCwaWaits.setStatus('current')
if mibBuilder.loadTexts: cifsCwaWaits.setDescription('Undocumented')
cifsMultipleVCs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMultipleVCs.setStatus('current')
if mibBuilder.loadTexts: cifsMultipleVCs.setDescription('Undocumented')
cifsPDCUpcalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsPDCUpcalls.setStatus('current')
if mibBuilder.loadTexts: cifsPDCUpcalls.setDescription('Undocumented')
cifsQueuedWriteRaws = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setStatus('current')
if mibBuilder.loadTexts: cifsQueuedWriteRaws.setDescription('Undocumented')
cifsNBTDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsNBTDisconnects.setStatus('current')
if mibBuilder.loadTexts: cifsNBTDisconnects.setDescription('Undocumented')
cifsSMBDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSMBDisconnects.setStatus('current')
if mibBuilder.loadTexts: cifsSMBDisconnects.setDescription('Undocumented')
cifsDupDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsDupDisconnects.setStatus('current')
if mibBuilder.loadTexts: cifsDupDisconnects.setDescription('Undocumented')
cifsOpLkBatchToL2s = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkBatchToL2s.setDescription('Undocumented')
cifsOpLkBatchToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkBatchToNones.setDescription('Undocumented')
cifsOpLkL2ToNones = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkL2ToNones.setDescription('Undocumented')
cifsOpLkNoBreakAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkNoBreakAcks.setDescription('Undocumented')
cifsOpLkIgnoredAcks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkIgnoredAcks.setDescription('Undocumented')
cifsOpLkMultiWaiters = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkMultiWaiters.setDescription('Undocumented')
cifsSharingErrorRetries = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsSharingErrorRetries.setStatus('current')
if mibBuilder.loadTexts: cifsSharingErrorRetries.setDescription('Undocumented')
cifsOpLkWaiterTimedOuts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkWaiterTimedOuts.setDescription('Undocumented')
cifsOpLkDelayedBreaks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkDelayedBreaks.setDescription('Undocumented')
cifsOpLkEarlyNFSs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkEarlyNFSs.setDescription('Undocumented')
cifsOpLkNFSWaiteds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setStatus('current')
if mibBuilder.loadTexts: cifsOpLkNFSWaiteds.setDescription('Undocumented')
cifsMaxNFSBkWaiterCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setStatus('current')
if mibBuilder.loadTexts: cifsMaxNFSBkWaiterCount.setDescription('Undocumented')
cifsClearTextPasswd = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 7, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifsClearTextPasswd.setStatus('current')
if mibBuilder.loadTexts: cifsClearTextPasswd.setDescription('This indicates whether the cifs clients are using clear text passwords when authenticating with the filer. If cifsDomainJoined is false and this variable is also false, then the filer is using NT Security from a local user list.')
ncOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1))
ncInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2))
ncStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3))
ncIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncIsEnabled.setDescription('Whether Netcache is enabled on this system.')
ncIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncIsLicensed.setDescription('Whether Netcache is licensed on this system.')
ncDnsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3))
ncDnsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncDnsIsEnabled.setDescription('Whether the Domain Name System (DNS) is enabled on this system.')
ncHttpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4))
ncHttpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncHttpIsEnabled.setDescription('Whether HTTP is enabled on this system.')
ncNntpOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5))
ncNntpIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncNntpIsEnabled.setDescription('Whether NNTP is enabled on this system.')
ncNntpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncNntpIsLicensed.setDescription('Whether NNTP is licensed on this system.')
ncStreamingOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6))
ncStreamingMmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsIsEnabled.setDescription('Whether Microsoft Media Services (MMS) is enabled on this system.')
ncStreamingMmsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsIsLicensed.setDescription('Whether Microsoft Windows Media Service (MMS) is licensed on this system.')
ncStreamingMmsProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsProIsLicensed.setDescription('Whether Microsoft Windows Media Service Pro (MMS) is licensed on this system.')
ncStreamingRtspIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspIsEnabled.setDescription('Whether the Real Time Streaming Protocol (RTSP) is enabled on this system.')
ncStreamingQuickTimeIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQuickTimeIsLicensed.setDescription('Whether QuickTime is licensed on this system.')
ncStreamingRealIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealIsLicensed.setDescription('Whether Real Media streaming is licensed on this system.')
ncStreamingMmsUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsUltraIsLicensed.setDescription('Whether Microsoft Windows Media Service Ultra (MMS) is licensed on this system.')
ncStreamingRealProIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealProIsLicensed.setDescription('Whether Real Media Pro streaming is licensed on this system.')
ncStreamingRealUltraIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealUltraIsLicensed.setDescription('Whether Real Media Ultra streaming is licensed on this system.')
ncIcapOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7))
ncIcapIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncIcapIsEnabled.setDescription('Whether ICAP v0.95 is enabled on this system.')
ncIcapIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncIcapIsLicensed.setDescription('Whether ICAP is licensed on this system.')
ncIcapv1IsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncIcapv1IsEnabled.setDescription('Whether ICAP v1.0 is enabled on this system.')
ncGrmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8))
ncGrmServerOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1))
ncGrmAgentOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2))
ncGrmServerIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncGrmServerIsEnabled.setDescription('Whether the Global Request Manager (GRM) Server is enabled on this system.')
ncGrmServerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncGrmServerIsLicensed.setDescription('Whether the Global Request Manager (GRM) Server is licensed on this system.')
ncGrmAgentIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncGrmAgentIsEnabled.setDescription('Whether the Global Request Manager (GRM) Agent enabled on this system.')
ncGrmAgentIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncGrmAgentIsLicensed.setDescription('Whether the Global Request Manager (GRM) Agent is licensed on this system.')
ncCdOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9))
ncCdIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCdIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncCdIsEnabled.setDescription('Whether Content Director is enabled on this system.')
ncHttpsProxyOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10))
ncHttpsProxyIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncHttpsProxyIsEnabled.setDescription('Whether HTTPS is enabled on this system.')
ncHttpsProxyIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setStatus('current')
if mibBuilder.loadTexts: ncHttpsProxyIsLicensed.setDescription('Whether HTTPS is licensed on this system.')
ncCmsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11))
ncCmsIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncCmsIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncCmsIsEnabled.setDescription('Whether CMS is enabled on this system.')
ncVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncVersion.setStatus('current')
if mibBuilder.loadTexts: ncVersion.setDescription('The Netcache version string.')
ncAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncAdminPort.setStatus('current')
if mibBuilder.loadTexts: ncAdminPort.setDescription('Netcache Admin Port number - this is the first in the list of admin ports configured for the NetCache.')
accelmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3))
amNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amNumber.setStatus('current')
if mibBuilder.loadTexts: amNumber.setDescription('The number of entries in the acceleration monitor table.')
amMonitor = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitor.setStatus('current')
if mibBuilder.loadTexts: amMonitor.setDescription('Variable for user defined SNMP traps to monitor whether there has been a status change of any of the acceleration servers that netcache is probing.')
amMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amMonitorString.setStatus('current')
if mibBuilder.loadTexts: amMonitorString.setDescription("Used in conjunction with amMonitor. This returns a string in format of: 'IP:port status' which reports the status of all the servers netcache is accelerating as of last status change.")
amTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4), )
if mibBuilder.loadTexts: amTable.setStatus('current')
if mibBuilder.loadTexts: amTable.setDescription('A list of acceleration server and port entries. The number of entries is given by the value of amNumber.')
amEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "amIndex"))
if mibBuilder.loadTexts: amEntry.setStatus('current')
if mibBuilder.loadTexts: amEntry.setDescription('An acceleration monitor entry contains: the server IP address, server port and the status.')
amIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amIndex.setStatus('current')
if mibBuilder.loadTexts: amIndex.setDescription(' A unique value for each entry in the acceleration monitor table.')
amAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amAddress.setStatus('current')
if mibBuilder.loadTexts: amAddress.setDescription('The IP address of the acceleration server the NetCache is monitoring.')
amPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amPort.setStatus('current')
if mibBuilder.loadTexts: amPort.setDescription('The corresponding port on the server that NetCache is monitoring.')
amStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("up", 2), ("down", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amStatus.setStatus('current')
if mibBuilder.loadTexts: amStatus.setDescription('The status of the service running on the server. active - in queue but no probes done yet. up - the server is reachable and responding to probes. down - the server is unreachable. inactive - monitoring is disabled.')
ncLocalConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigChanged.setStatus('current')
if mibBuilder.loadTexts: ncLocalConfigChanged.setDescription('Whether the local configuration file on NetCache was changed without using DFM configuration management.')
ncLocalConfigVersion = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncLocalConfigVersion.setStatus('current')
if mibBuilder.loadTexts: ncLocalConfigVersion.setDescription("The current cache configuration's version.")
grmMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6))
grmMonitorToggle = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("togglea", 1), ("toggleb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorToggle.setStatus('current')
if mibBuilder.loadTexts: grmMonitorToggle.setDescription('Variable for user defined SNMP traps to monitor whether there has been a status change of any of the GRM agents reporting to this GRM server.')
grmMonitorString = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: grmMonitorString.setStatus('current')
if mibBuilder.loadTexts: grmMonitorString.setDescription("Used in conjunction with grmMonitor. This returns a string in format of: 'IP status.' which reports the status of all the GRM agents reporting to this GRM server as of last status change.")
takeoverinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7))
takeoverAddrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverAddrs.setStatus('current')
if mibBuilder.loadTexts: takeoverAddrs.setDescription('Indicates the list of interfaces and their corresponding IP addresses of the partner NetCache that this appliance has taken over.')
takeoverMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("takingover", 2), ("takenover", 3), ("giveback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverMode.setStatus('current')
if mibBuilder.loadTexts: takeoverMode.setDescription('Indicates the current takeover mode of this appliance.')
takeoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("unknown", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: takeoverStatus.setStatus('current')
if mibBuilder.loadTexts: takeoverStatus.setDescription("Indicates the current status of the takeover partner of this appliance. up(1) indicates that the takeover partner is reachable. unknown(2) indicates that an unknown error occured. failed(3) indicates that the partner has failed, takeoverAddrs indicates the partner's IP address this appliance has taken over.")
ncObjectsStored = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncObjectsStored.setStatus('current')
if mibBuilder.loadTexts: ncObjectsStored.setDescription('The total number of objects stored currently.')
ncBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncBytesToClients.setDescription('Total bytes sent to clients')
ncBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncBytesFromClients.setDescription('Total bytes received from clients')
ncBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncBytesToServers.setDescription('Total bytes sent to servers')
ncBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncBytesFromServers.setDescription('Total bytes received from servers')
ncHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6))
ncHttpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalRequests.setDescription('Total HTTP requests so far')
ncHttpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHitRequests.setStatus('current')
if mibBuilder.loadTexts: ncHttpHitRequests.setDescription('HTTP requests that resulted in hits so far')
ncHttpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpMissRequests.setStatus('current')
if mibBuilder.loadTexts: ncHttpMissRequests.setDescription('HTTP requests that resulted in misses so far')
ncHttpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpServConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpServConns.setDescription('Number of currently open TCP/IP connections to HTTP servers (active and idle)')
ncHttpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpCliConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpCliConns.setDescription('Number of currently open TCP/IP connections to HTTP clients (active and idle)')
ncHttpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncHttpBWSavings.setDescription('Bandwidth savings for HTTP requests')
ncHttpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncHttpObjHitrate.setDescription('Object Hitrate HTTP requests')
ncHttpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncHttpRespTimePerByte.setDescription('Response time in milliseconds per byte for HTTP requests.')
ncHttpAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpAvgRespTime.setDescription('Average response time in milliseconds for all HTTP requests.')
ncHttpAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpAvgHitRespTime.setDescription('Average response time in milliseconds for HTTP hit requests.')
ncHttpAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpAvgMissRespTime.setDescription('Average response time in milliseconds for HTTP miss requests.')
ncHttpInstAvgRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpInstAvgRespTime.setDescription('Average response time in milliseconds for all HTTP requests during the last 60 seconds.')
ncHttpInstAvgHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpInstAvgHitRespTime.setDescription('Average response time in milliseconds for HTTP hit requests during the last 60 seconds.')
ncHttpInstAvgMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpInstAvgMissRespTime.setDescription('Average response time in milliseconds for HTTP miss requests during the last 60 seconds.')
ncHttpTotalRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalRespTime.setDescription('Total fetch time in milliseconds for HTTP requests')
ncHttpTotalHitRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalHitRespTime.setDescription('Total fetch time in milliseconds for HTTP HIT requests')
ncHttpTotalMissRespTime = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setStatus('current')
if mibBuilder.loadTexts: ncHttpTotalMissRespTime.setDescription('Total fetch time in milliseconds for HTTP MISS requests')
ncHttpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesToClients.setDescription('Total HTTP bytes sent to clients')
ncHttpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesFromClients.setDescription('Total HTTP bytes received from clients')
ncHttpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesToServers.setDescription('Total HTTP bytes sent to servers')
ncHttpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncHttpBytesFromServers.setDescription('Total HTTP bytes received from servers')
ncHttpHighTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpHighTotalRespTimes.setDescription('Total fetch time in milliseconds for HTTP requests. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ncHttpLowTotalRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpLowTotalRespTimes.setDescription('Total fetch time in milliseconds for HTTP requests. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ncHttpHighTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpHighTotalHitRespTimes.setDescription('Total fetch time in milliseconds for HTTP HIT requests. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ncHttpLowTotalHitRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpLowTotalHitRespTimes.setDescription('Total fetch time in milliseconds for HTTP HIT requests. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ncHttpHighTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpHighTotalMissRespTimes.setDescription('Total fetch time in milliseconds for HTTP MISS requests. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ncHttpLowTotalMissRespTimes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setStatus('current')
if mibBuilder.loadTexts: ncHttpLowTotalMissRespTimes.setDescription('Total fetch time in milliseconds for HTTP MISS requests. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ncHttpReqRate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpReqRate.setStatus('current')
if mibBuilder.loadTexts: ncHttpReqRate.setDescription('Request Rate for HTTP requests')
ncHttpObjHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpObjHitRateLast1Min.setDescription('HTTP object hit rate in the last 1 minute.')
ncHttpObjHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpObjHitRateLast5Min.setDescription('HTTP object hit rate in the last 5 minutes.')
ncHttpByteHitRateLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpByteHitRateLast1Min.setDescription('HTTP byte hit rate in the last 1 minute.')
ncHttpByteHitRateLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpByteHitRateLast5Min.setDescription('HTTP byte hit rate in the last 5 minutes.')
ncHttpBWSavingsLast1Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpBWSavingsLast1Min.setDescription('Bandwidth savings for HTTP requests in the last 1 minute')
ncHttpBWSavingsLast5Min = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setStatus('current')
if mibBuilder.loadTexts: ncHttpBWSavingsLast5Min.setDescription('Bandwidth savings for HTTP requests in the last 5 minutes')
ncHttpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpActiveServConns.setDescription('Number of currently active TCP/IP connections to HTTP servers')
ncHttpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncHttpActiveCliConns.setDescription('Number of currently active TCP/IP connections to HTTP clients')
ncHttpAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37), )
if mibBuilder.loadTexts: ncHttpAccelTable.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelTable.setDescription('Number of kilobytes sent to and recieved from the client side per acceleration rule')
ncHttpAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncHttpAccelIndex"))
if mibBuilder.loadTexts: ncHttpAccelEntry.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelEntry.setDescription('Each entry contains the number of kilobytes sent and received to/from the clients side per acceleration rule')
ncHttpAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelIndex.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelIndex.setDescription('A unique value for each entry in the http acceleration stats table')
ncHttpAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client for this acceleration rule')
ncHttpAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for this acceleration rule')
ncHttpAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 37, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpAccelHits.setStatus('current')
if mibBuilder.loadTexts: ncHttpAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncHttpsAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38), )
if mibBuilder.loadTexts: ncHttpsAccelTable.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelTable.setDescription('Number of kilobytes sent to and recieved from the client side per acceleration rule')
ncHttpsAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncHttpsAccelIndex"))
if mibBuilder.loadTexts: ncHttpsAccelEntry.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelEntry.setDescription('Each entry contains the number of kilobytes sent and received to/from the clients side per acceleration rule')
ncHttpsAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelIndex.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelIndex.setDescription('A unique value for each entry in the http acceleration stats table')
ncHttpsAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client for this acceleration rule')
ncHttpsAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for this acceleration rule')
ncHttpsAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 6, 38, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncHttpsAccelHits.setStatus('current')
if mibBuilder.loadTexts: ncHttpsAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncNntp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7))
ncNntpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncNntpTotalRequests.setDescription('NNTP total requests so far')
ncNntpCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCacheableRequests.setStatus('current')
if mibBuilder.loadTexts: ncNntpCacheableRequests.setDescription('NNTP requests that were cacheable')
ncNntpProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpProxyRequests.setStatus('current')
if mibBuilder.loadTexts: ncNntpProxyRequests.setDescription('NNTP requests that were non-cacheable')
ncNntpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpServConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpServConns.setDescription('Number of currently open TCP/IP connections to NNTP servers (active and idle)')
ncNntpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpCliConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpCliConns.setDescription('Number of currently open TCP/IP connections to NNTP clients (active and idle)')
ncNntpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncNntpBWSavings.setDescription('Bandwidth savings for NNTP requests')
ncNntpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncNntpRespTimePerByte.setDescription('Response time per byte for NNTP requests')
ncNntpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesToClients.setDescription('Total NNTP bytes sent to clients')
ncNntpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesFromClients.setDescription('Total NNTP bytes received from clients')
ncNntpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesToServers.setDescription('Total NNTP bytes sent to servers')
ncNntpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncNntpBytesFromServers.setDescription('Total NNTP bytes received from servers')
ncNntpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncNntpObjHitrate.setDescription('Object Hitrate of NNTP requests')
ncNntpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpActiveServConns.setDescription('Number of currently active TCP/IP connections to NNTP servers')
ncNntpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNntpActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncNntpActiveCliConns.setDescription('Number of currently active TCP/IP connections to NNTP clients')
ncFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8))
ncFtpTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncFtpTotalRequests.setDescription('FTP total requests so far')
ncFtpHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpHitRequests.setStatus('current')
if mibBuilder.loadTexts: ncFtpHitRequests.setDescription('FTP requests that resulted in hits so far')
ncFtpMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpMissRequests.setStatus('current')
if mibBuilder.loadTexts: ncFtpMissRequests.setDescription('FTP requests that resulted in misses so far')
ncFtpServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpServConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpServConns.setDescription('Number of currently open TCP/IP connections to FTP servers (active and idle)')
ncFtpCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpCliConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpCliConns.setDescription('Number of currently open TCP/IP connections to FTP clients (active and idle)')
ncFtpBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncFtpBWSavings.setDescription('Bandwidth savings for FTP requests')
ncFtpRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncFtpRespTimePerByte.setDescription('Response time per byte for FTP requests')
ncFtpBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesToClients.setDescription('Total FTP bytes sent to clients')
ncFtpBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesFromClients.setDescription('Total FTP bytes received from clients')
ncFtpBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesToServers.setDescription('Total FTP bytes sent to servers')
ncFtpBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncFtpBytesFromServers.setDescription('Total FTP bytes received from servers')
ncFtpObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncFtpObjHitrate.setDescription('Object Hitrate of FTP requests')
ncFtpActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpActiveServConns.setDescription('Number of currently active TCP/IP connections to FTP servers')
ncFtpActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncFtpActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncFtpActiveCliConns.setDescription('Number of currently active TCP/IP connections to FTP clients')
ncStreaming = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9))
ncStreamingServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingServConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingServConns.setDescription('Number of currently open TCP/IP connections to streaming servers (active and idle)')
ncStreamingCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingCliConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingCliConns.setDescription('Number of currently open TCP/IP connections to streaming clients (active and idle)')
ncStreamingBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingBWSavings.setDescription('Bandwidth savings for all streaming requests')
ncStreamingRespTimePerByte = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRespTimePerByte.setDescription('Response time per byte for all streaming requests')
ncStreamingHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingHitRequests.setStatus('current')
if mibBuilder.loadTexts: ncStreamingHitRequests.setDescription('STREAMING requests that resulted in hits so far')
ncStreamingMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMissRequests.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMissRequests.setDescription('STREAMING requests that resulted in misses so far')
ncStreamingTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ncStreamingTotalRequests.setDescription('STREAMING total requests so far')
ncStreamingLiveBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesToClients.setDescription('Total Streaming Live bytes sent to clients')
ncStreamingLiveBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesFromClients.setDescription('Total Streaming Live bytes received from clients')
ncStreamingLiveBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesToServers.setDescription('Total Streaming Live bytes sent to servers')
ncStreamingLiveBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBytesFromServers.setDescription('Total Streaming Live bytes received from servers')
ncStreamingProxyBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesToClients.setDescription('Total Streaming Proxy bytes sent to clients')
ncStreamingProxyBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesFromClients.setDescription('Total Streaming Proxy bytes received from clients')
ncStreamingProxyBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesToServers.setDescription('Total Streaming Proxy bytes sent to servers')
ncStreamingProxyBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingProxyBytesFromServers.setDescription('Total Streaming Proxy bytes received from servers')
ncStreamingOBTClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBTClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBTClients.setDescription('Total Streaming Ondemand bytes sent to clients')
ncStreamingOBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBFClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBFClients.setDescription('Total Streaming Ondemand bytes received from clients')
ncStreamingOBTServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBTServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBTServers.setDescription('Total Streaming Ondemand bytes sent to servers')
ncStreamingOBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOBFServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOBFServers.setDescription('Total Streaming Ondemand bytes received from servers')
ncStreamingObjHitrate = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingObjHitrate.setStatus('current')
if mibBuilder.loadTexts: ncStreamingObjHitrate.setDescription('Object Hitrate of Streaming requests')
ncStreamingRealBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesToClients.setDescription('Total Streaming Real bytes sent to clients')
ncStreamingRealBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesFromClients.setDescription('Total Streaming Real bytes received from clients')
ncStreamingRealBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesToServers.setDescription('Total Streaming Real bytes sent to servers')
ncStreamingRealBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBytesFromServers.setDescription('Total Streaming Real bytes received from servers')
ncStreamingMmsBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesToClients.setDescription('Total Streaming Mms bytes sent to clients')
ncStreamingMmsBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesFromClients.setDescription('Total Streaming Mms bytes received from clients')
ncStreamingMmsBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesToServers.setDescription('Total Streaming Mms bytes sent to servers')
ncStreamingMmsBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBytesFromServers.setDescription('Total Streaming Mms bytes received from servers')
ncStreamingQTBTClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBTClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBTClients.setDescription('Total Streaming QuickTime bytes sent to clients')
ncStreamingQTBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBFClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBFClients.setDescription('Total Streaming QuickTime bytes received from clients')
ncStreamingQTBTServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBTServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBTServers.setDescription('Total Streaming QuickTime bytes sent to servers')
ncStreamingQTBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQTBFServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQTBFServers.setDescription('Total Streaming QuickTime bytes received from servers')
ncStreamingLiveBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingLiveBWSavings.setDescription('Bandwidth savings for all Live streaming requests')
ncStreamingOndemandBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingOndemandBWSavings.setDescription('Bandwidth savings for all VOD streaming requests')
ncStreamingRealBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRealBWSavings.setDescription('Bandwidth savings for all Real streaming requests')
ncStreamingMmsBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingMmsBWSavings.setDescription('Bandwidth savings for all MMS streaming requests')
ncStreamingQuickTimeBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingQuickTimeBWSavings.setDescription('Bandwidth savings for all QuickTime streaming requests')
ncStreamingActiveServConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveServConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingActiveServConns.setDescription('Number of currently active TCP/IP connections to streaming servers')
ncStreamingActiveCliConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setStatus('current')
if mibBuilder.loadTexts: ncStreamingActiveCliConns.setDescription('Number of currently active TCP/IP connections to streaming clients')
ncStreamingRtspWMBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToClients.setDescription('Total Streaming Windows Media RTSP bytes sent to clients')
ncStreamingRtspWMBFClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBFClients.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBFClients.setDescription('Total Streaming Windows Media RTSP bytes received from clients')
ncStreamingRtspWMBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBytesToServers.setDescription('Total Streaming Windows Media RTSP bytes sent to servers')
ncStreamingRtspWMBFServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBFServers.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBFServers.setDescription('Total Streaming Windows Media RTSP bytes received from servers')
ncStreamingRtspWMBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncStreamingRtspWMBWSavings.setDescription('Bandwidth savings for all Windows Media RTSP streaming requests')
ncStreamingAccelTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45), )
if mibBuilder.loadTexts: ncStreamingAccelTable.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelTable.setDescription('Number of kilobytes sent to and recieved from the client side per acceleration rule')
ncStreamingAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "ncStreamingAccelIndex"))
if mibBuilder.loadTexts: ncStreamingAccelEntry.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelEntry.setDescription('Each entry contains the number of kilobytes sent and received to/from the clients side per acceleration rule')
ncStreamingAccelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 513))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelIndex.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelIndex.setDescription('A unique value for each entry in the streaming acceleration stats table')
ncStreamingAccelKbytesFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelKbytesFromClient.setDescription('The total number of kilobytes received from the client for this acceleration rule')
ncStreamingAccelKbytesToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelKbytesToClient.setDescription('The total number of kilobytes sent to the client for this acceleration rule')
ncStreamingAccelHits = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 45, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingAccelHits.setStatus('current')
if mibBuilder.loadTexts: ncStreamingAccelHits.setDescription(' The number of times this acceleration rule has been hit')
ncStreamingClientsDelayedSW = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 9, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setStatus('current')
if mibBuilder.loadTexts: ncStreamingClientsDelayedSW.setDescription('Number of clients delayed because of a Bandwidth Limit')
ncTotalBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncTotalBWSavings.setStatus('current')
if mibBuilder.loadTexts: ncTotalBWSavings.setDescription('Total Bandwidth savings for HTTP, FTP, NNTP, and Streaming protocols')
ncDns = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11))
ncDnsRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: ncDnsRequestsReceived.setDescription('Total DNS requests received from clients')
ncDnsCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheHits.setStatus('current')
if mibBuilder.loadTexts: ncDnsCacheHits.setDescription('Hits on the DNS cache. This includes hits for DNS lookups generated by NetCache internally')
ncDnsCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsCacheMisses.setStatus('current')
if mibBuilder.loadTexts: ncDnsCacheMisses.setDescription('Misses on the DNS cache. This includes misses for DNS lookups generated by NetCache internally')
ncDnsSuccessfulForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsSuccessfulForwardLookups.setDescription('Forward DNS lookups that are successful')
ncDnsFailedForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsFailedForwardLookups.setDescription('Forward DNS lookups that failed')
ncDnsPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsPendingForwardLookups.setDescription('Forward DNS lookups that are in progress')
ncDnsSuccessfulReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsSuccessfulReverseLookups.setDescription('Reverse DNS lookups that are successful')
ncDnsFailedReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsFailedReverseLookups.setDescription('Reverse DNS lookups that failed')
ncDnsPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsPendingReverseLookups.setDescription('Reverse DNS lookups that are in progress')
ncDnsIres = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10))
ncDnsIresIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresIsEnabled.setDescription('Has Full Service Resolver been enabled')
ncDnsIresIsInitialised = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresIsInitialised.setDescription('Has Full Service Resolver initalised')
ncDnsIresForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresForwardLookups.setDescription("Full Service Resolver's Forward Lookups")
ncDnsIresPendingForwardLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresPendingForwardLookups.setDescription("Full Service Resolver's Pending Forward Lookups")
ncDnsIresReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresReverseLookups.setDescription("Full Service Resolver's Reverse Lookups")
ncDnsIresPendingReverseLookups = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 11, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setStatus('current')
if mibBuilder.loadTexts: ncDnsIresPendingReverseLookups.setDescription("Full Service Resolver's Pending Reverse Lookups")
ncAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12))
ncNtlm = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1))
ncNtlmPossibleProblem = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setStatus('current')
if mibBuilder.loadTexts: ncNtlmPossibleProblem.setDescription("Whether a possible ntlm problem is detected in the appliance's domain environment.")
ncRM = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13))
ncRMMem = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1))
ncRMMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemTotal.setStatus('current')
if mibBuilder.loadTexts: ncRMMemTotal.setDescription('Total memory in kilobytes available for allocations after boot. It does not imply the total system memory.')
ncRMMemFree = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 8, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncRMMemFree.setStatus('current')
if mibBuilder.loadTexts: ncRMMemFree.setDescription('Current free memory in kilobytes available for allocations.')
snapmirrorOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorOn.setStatus('current')
if mibBuilder.loadTexts: snapmirrorOn.setDescription('Indicates whether snapmirror has been turned on or not.')
snapmirrorActiveRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setStatus('current')
if mibBuilder.loadTexts: snapmirrorActiveRestoreCount.setDescription('Number of active SnapMirror restores.')
snapmirrorScheduledRestoreCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setStatus('current')
if mibBuilder.loadTexts: snapmirrorScheduledRestoreCount.setDescription('Number of scheduled SnapMirror restores.')
snapmirrorBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupNumber.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBackupNumber.setDescription('Number of active SnapMirror backups.')
snapmirrorBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBackupSuccesses.setDescription('Number of SnapMirror backups which completed. Reset on reboot.')
snapmirrorRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRestoreSuccesses.setDescription('Number of SnapMirror restores which completed. Reset on reboot.')
snapmirrorBackupAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBackupAborts.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBackupAborts.setDescription('Number of SnapMirror backup transfers which have aborted. Reset on reboot.')
snapmirrorRestoreRestartAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRestoreRestartAborts.setDescription('Number of SnapMirror restore temporary aborts. Reset on reboot.')
snapmirrorRestoreWaitAborts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setStatus('current')
if mibBuilder.loadTexts: snapmirrorRestoreWaitAborts.setDescription('Number of SnapMirror restore permanent aborts. Reset on reboot.')
snapmirrorWrittenBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setStatus('current')
if mibBuilder.loadTexts: snapmirrorWrittenBytes.setDescription('Number of Megabytes written by SnapMirror. Reset on reboot.')
snapmirrorReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorReadBytes.setStatus('current')
if mibBuilder.loadTexts: snapmirrorReadBytes.setDescription('Number of Megabytes read by SnapMirror. Reset on reboot.')
snapmirrorActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setStatus('current')
if mibBuilder.loadTexts: snapmirrorActiveDstNumber.setDescription('Number of active SnapMirror destination.')
snapmirrorActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setStatus('current')
if mibBuilder.loadTexts: snapmirrorActiveSrcNumber.setDescription('Number of active SnapMirror Source.')
snapmirrorFilerTotalDstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstSuccesses.setDescription('Total number of successful snapmirror transfers to the destination. Persistent across reboot.')
snapmirrorFilerTotalSrcSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcSuccesses.setDescription('Total number of successful snapmirror transfers from the source. Persistent across reboot.')
snapmirrorFilerTotalSrcFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalSrcFailures.setDescription('Total number of failed SnapMirror transfers on the source. Persistent across reboot.')
snapmirrorFilerTotalDstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstFailures.setDescription('Total number of failed SnapMirror transfers on the destination. Persistent across reboot.')
snapmirrorFilerTotalDstDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setStatus('current')
if mibBuilder.loadTexts: snapmirrorFilerTotalDstDeferments.setDescription('Total number of deferred snapmirror transfer on the destination. Persistent across reboot.')
snapmirrorIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIsLicensed.setStatus('current')
if mibBuilder.loadTexts: snapmirrorIsLicensed.setDescription('Whether the snapmirror is licensed on the filer.')
snapmirrorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 20), )
if mibBuilder.loadTexts: snapmirrorStatusTable.setStatus('current')
if mibBuilder.loadTexts: snapmirrorStatusTable.setDescription('provide a list of snapmirror status.')
snapmirrorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "snapmirrorIndex"))
if mibBuilder.loadTexts: snapmirrorStatusEntry.setStatus('current')
if mibBuilder.loadTexts: snapmirrorStatusEntry.setDescription('Provide a report of current status of snapmirror.')
snapmirrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorIndex.setStatus('current')
if mibBuilder.loadTexts: snapmirrorIndex.setDescription('Index into the snapmirror status table.')
snapmirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSrc.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSrc.setDescription('Source of the snapmirror. <filer>:<vol> or <filer>:/vol/<qtree_name>')
snapmirrorDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorDst.setStatus('current')
if mibBuilder.loadTexts: snapmirrorDst.setDescription('Destination of the snapmirror. <filer>:<vol> or <filer>:/vol/<qtree_name>')
snapmirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("migrating", 5), ("quiescing", 6), ("resyncing", 7), ("waiting", 8), ("syncing", 9), ("inSync", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorStatus.setStatus('current')
if mibBuilder.loadTexts: snapmirrorStatus.setDescription('Current transfer status of the snapmirror.')
snapmirrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapmirrored", 2), ("brokenOff", 3), ("quiesced", 4), ("source", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorState.setStatus('current')
if mibBuilder.loadTexts: snapmirrorState.setDescription('Current state of the snapmirror.')
snapmirrorLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLag.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLag.setDescription('How far behind from the source the destination is.')
snapmirrorTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalSuccesses.setDescription('Total number of successful transfer since the snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalRestartSuccesses.setDescription('Total number of successful restarted transfer since the snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalFailures.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalFailures.setDescription('Total number of failed or aborted transfer since the snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalDeferments.setDescription('Total number of deferment since the snapmirror is initialized. Persistent across reboot.')
snapmirrorTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalTransMBs.setDescription('Total transfer size in MB for the snapmirror. Reset on reboot.')
snapmirrorTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: snapmirrorTotalTransTimeSeconds.setDescription('Total number of seconds spent in successful transfer for the snapmirror. Reset on reboot.')
snapmirrorThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorThrottleValue.setStatus('current')
if mibBuilder.loadTexts: snapmirrorThrottleValue.setDescription('Current throttle value for the snapmirror.')
snapmirrorMirrorTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setStatus('current')
if mibBuilder.loadTexts: snapmirrorMirrorTimestamp.setDescription('Timestamp of the last snapshot successfully transferred from the source to the destination.')
snapmirrorBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setStatus('current')
if mibBuilder.loadTexts: snapmirrorBaseSnapshot.setDescription('The name of the current base snapshot for the snapmirror.')
snapmirrorLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLastTransType.setDescription('The type of the previous successful transfer.')
snapmirrorLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLastTransMBs.setDescription('Last successful transfer size in MB for the snapmirror.')
snapmirrorLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: snapmirrorLastTransTimeSeconds.setDescription('Duration of last successful transfer in seconds for the snapmirror.')
snapmirrorSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSchedule.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSchedule.setDescription('Update schedule for the snapmirror in conf file format.')
snapmirrorScheduleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setStatus('current')
if mibBuilder.loadTexts: snapmirrorScheduleDesc.setDescription('Description of the update schedule for the snapmirror.')
snapmirrorArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorArguments.setStatus('current')
if mibBuilder.loadTexts: snapmirrorArguments.setDescription('Arguments for the snapmirror in conf file format.')
snapmirrorSyncToAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSyncToAsync.setDescription('The number of times changing from sync mode to async mode since the snapmirror is initialized. Persistent across reboot.')
snapmirrorConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 9, 21), )
if mibBuilder.loadTexts: snapmirrorConnTable.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnTable.setDescription('Provide a list of snapmirror connection definitions.')
snapmirrorConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "snapmirrorConnIndex"))
if mibBuilder.loadTexts: snapmirrorConnEntry.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnEntry.setDescription('Provide a report of a defined multipath connection.')
snapmirrorConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnIndex.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnIndex.setDescription('Index into the snapmirror multipath connection table.')
snapmirrorConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnName.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnName.setDescription('The name of the snapmirror multipath connection.')
snapmirrorConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multi", 1), ("failover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnType.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnType.setDescription('The type of the snapmirror multipath connection.')
snapmirrorConnSrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc1.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnSrc1.setDescription('The name of the source for the first path.')
snapmirrorConnDst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst1.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnDst1.setDescription('The name of the destination for the first path.')
snapmirrorConnSrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnSrc2.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnSrc2.setDescription('The name of the source for the second path.')
snapmirrorConnDst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 9, 21, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapmirrorConnDst2.setStatus('current')
if mibBuilder.loadTexts: snapmirrorConnDst2.setDescription('The name of the destination for the second path.')
svOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svOn.setStatus('current')
if mibBuilder.loadTexts: svOn.setDescription('Indicates whether snapvault has been turned on or not.')
svSystemActiveDstNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveDstNumber.setStatus('current')
if mibBuilder.loadTexts: svSystemActiveDstNumber.setDescription('Number of active snapvault destionations.')
svSystemActiveSrcNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setStatus('current')
if mibBuilder.loadTexts: svSystemActiveSrcNumber.setDescription('Number of active snapvault sources.')
svSystemTotalPrimarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalPrimarySuccesses.setDescription('Total number of successful snapvault transfers from the snapvault primary. Persistent across reboot.')
svSystemTotalSecondarySuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalSecondarySuccesses.setDescription('Total number of successful snapvault transfers to the snapvault secondary. Persistent across reboot.')
svSystemTotalPrimaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalPrimaryFailures.setDescription('Total number of failed snapvault transfers on the snapvault primary. Persistent across reboot.')
svSystemTotalSecondaryFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalSecondaryFailures.setDescription('Total number of failed snapvault transfers on the snapvault secondary. Persistent across reboot.')
svSystemTotalSecondaryDeferments = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setStatus('current')
if mibBuilder.loadTexts: svSystemTotalSecondaryDeferments.setDescription('Total number of deferred snapvault transfers on the snapvault secondary. Persistent across reboot.')
svPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrimaryIsLicensed.setStatus('current')
if mibBuilder.loadTexts: svPrimaryIsLicensed.setDescription('Whether the snapvault_client(primary) is licensed on the filer.')
svSecondaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSecondaryIsLicensed.setStatus('current')
if mibBuilder.loadTexts: svSecondaryIsLicensed.setDescription('Whether the snapvault_server(secondary) is licensed on the filer.')
snapvaultStatusTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 11), )
if mibBuilder.loadTexts: snapvaultStatusTable.setStatus('current')
if mibBuilder.loadTexts: snapvaultStatusTable.setDescription('provide a list of snapvault status.')
snapvaultStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svIndex"))
if mibBuilder.loadTexts: snapvaultStatusEntry.setStatus('current')
if mibBuilder.loadTexts: snapvaultStatusEntry.setDescription('Provide a report of current status of snapvault.')
svIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svIndex.setStatus('current')
if mibBuilder.loadTexts: svIndex.setDescription('Index into the snapvault status table.')
svSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrc.setStatus('current')
if mibBuilder.loadTexts: svSrc.setDescription('Source of the snapvault relationship. <filer>:/vol/<qtree_name>')
svDst = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDst.setStatus('current')
if mibBuilder.loadTexts: svDst.setDescription('Destionation of the snapvault relationship. <filer>:/vol/<qtree_name>')
svStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 12))).clone(namedValues=NamedValues(("idle", 1), ("transferring", 2), ("pending", 3), ("aborting", 4), ("quiescing", 6), ("resyncing", 7), ("paused", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatus.setStatus('current')
if mibBuilder.loadTexts: svStatus.setDescription('Current transfer status of the snapvault relationship.')
svState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uninitialized", 1), ("snapvaulted", 2), ("brokenOff", 3), ("quiesced", 4), ("source", 5), ("unknown", 6), ("restoring", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svState.setStatus('current')
if mibBuilder.loadTexts: svState.setDescription('Current state of the snapvault relationship.')
svLag = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLag.setStatus('current')
if mibBuilder.loadTexts: svLag.setDescription('How far behind from the source the destination is.')
svTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: svTotalSuccesses.setDescription('Total number of successful transfer since the snapvault relationship was established. Persistent across reboot.')
svTotalRestartSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalRestartSuccesses.setStatus('current')
if mibBuilder.loadTexts: svTotalRestartSuccesses.setDescription('Total number of successful restarted transfer since the snapvault relationship was established. Persistent across reboot.')
svTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalFailures.setStatus('current')
if mibBuilder.loadTexts: svTotalFailures.setDescription('Total number of failed or aborted transfer since the snapvault relationship was established. Persistent across reboot.')
svTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalDeferments.setStatus('current')
if mibBuilder.loadTexts: svTotalDeferments.setDescription('Total number of deferment since the snapvault relationship was established. Persistent across reboot.')
svTotalTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransMBs.setStatus('current')
if mibBuilder.loadTexts: svTotalTransMBs.setDescription('Total transfer size in MB for the snapvault. Reset on reboot.')
svTotalTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: svTotalTransTimeSeconds.setDescription('Total number of seconds spent in successful transfer for the snapvault relationship. Reset on reboot.')
svThrottleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svThrottleValue.setStatus('current')
if mibBuilder.loadTexts: svThrottleValue.setDescription('Current throttle value for the snapvault relationship.')
svSrcSnapshotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSrcSnapshotTime.setStatus('current')
if mibBuilder.loadTexts: svSrcSnapshotTime.setDescription('Time when the source snapshot was created. The time in seconds since January 1, 1970. The source snapshot here is the last snapshot successfully transferred from the source to the destination.')
svBaseSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svBaseSnapshot.setStatus('current')
if mibBuilder.loadTexts: svBaseSnapshot.setDescription('The name of the current base snapshot for the snapvault relationship.')
svLastTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransType.setStatus('current')
if mibBuilder.loadTexts: svLastTransType.setDescription('The type of the previous successful transfer.')
svLastTransMBs = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransMBs.setStatus('current')
if mibBuilder.loadTexts: svLastTransMBs.setDescription('Last successful transfer size in MB for the snapvault relationship.')
svLastTransTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLastTransTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: svLastTransTimeSeconds.setDescription('Duration of last successful transfer in seconds for the snapvault relationship.')
snapvaultHostTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 12), )
if mibBuilder.loadTexts: snapvaultHostTable.setStatus('current')
if mibBuilder.loadTexts: snapvaultHostTable.setDescription('Provide a list of remote snapvault hosts.')
snapvaultHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svHostIndex"))
if mibBuilder.loadTexts: snapvaultHostEntry.setStatus('current')
if mibBuilder.loadTexts: snapvaultHostEntry.setDescription('Provide snapvault statistics for a remote host which has one or more current established relationships with the local snapvault system.')
svHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostIndex.setStatus('current')
if mibBuilder.loadTexts: svHostIndex.setDescription('Index into the snapvault remote host table.')
svHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostName.setStatus('current')
if mibBuilder.loadTexts: svHostName.setDescription('The name of the remote snapvault host.')
svHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostType.setStatus('current')
if mibBuilder.loadTexts: svHostType.setDescription('The type of the remote snapvault host.')
svHostTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: svHostTotalSuccesses.setDescription('Total number of successful snapvault transfers for all current established relationships between the local snapvault system and the given remote host.')
svHostTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalFailures.setStatus('current')
if mibBuilder.loadTexts: svHostTotalFailures.setDescription('Total number of failed snapvault transfers for all current established relationships between the local snapvault system and the given remote host.')
svHostTotalDeferments = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svHostTotalDeferments.setStatus('current')
if mibBuilder.loadTexts: svHostTotalDeferments.setDescription('Total number of deferred snapvault transfers for all current established relationships between the local snapvault system and the given remote host. 0 for snapvault client host.')
snapvaultSchedTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 19, 13), )
if mibBuilder.loadTexts: snapvaultSchedTable.setStatus('current')
if mibBuilder.loadTexts: snapvaultSchedTable.setDescription('Provide a list of snapvault schedules.')
snapvaultSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "svSchedIndex"))
if mibBuilder.loadTexts: snapvaultSchedEntry.setStatus('current')
if mibBuilder.loadTexts: snapvaultSchedEntry.setDescription('Provide a report of schedules of snapvault.')
svSchedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedIndex.setStatus('current')
if mibBuilder.loadTexts: svSchedIndex.setDescription('Index into the snapvault schedule table.')
svSchedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedVolume.setStatus('current')
if mibBuilder.loadTexts: svSchedVolume.setDescription('The name of the volume on the snapvault for the snapvault schedule. This does not have a /vol/ prefix.')
svSchedSnapshot = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSnapshot.setStatus('current')
if mibBuilder.loadTexts: svSchedSnapshot.setDescription('The name of the snapshot for the snapvault schedule.')
svSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("queued", 2), ("active", 3), ("aborting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedStatus.setStatus('current')
if mibBuilder.loadTexts: svSchedStatus.setDescription('Current status of the snapvault schedule.')
svSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undef", 1), ("xfer", 2), ("create", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedType.setStatus('current')
if mibBuilder.loadTexts: svSchedType.setDescription('The type of the snapvault schedule.')
svSchedSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 19, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSchedSchedule.setStatus('current')
if mibBuilder.loadTexts: svSchedSchedule.setDescription('The update schedule of the snapvault.')
svDrPrimaryIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 19, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setStatus('current')
if mibBuilder.loadTexts: svDrPrimaryIsLicensed.setDescription('Whether the snapvault disaster recovery primary is licensed on the filer.')
ndmpOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpOn.setStatus('current')
if mibBuilder.loadTexts: ndmpOn.setDescription('Indicates whether ndmpd has been turned on or not.')
ndmpSessionOpened = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpSessionOpened.setStatus('current')
if mibBuilder.loadTexts: ndmpSessionOpened.setDescription('Total number of ndmpd sessions currently opened. Sessions may be running backups, restores or neither.')
ndmpBackupActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupActive.setStatus('current')
if mibBuilder.loadTexts: ndmpBackupActive.setDescription('Number of ndmpd backups currently active.')
ndmpRestoreActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreActive.setStatus('current')
if mibBuilder.loadTexts: ndmpRestoreActive.setDescription('Number of ndmpd restores currently active.')
ndmpTapeActive = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpTapeActive.setStatus('current')
if mibBuilder.loadTexts: ndmpTapeActive.setDescription('Number of tape drives currently active.')
ndmpBackupSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupSuccesses.setStatus('current')
if mibBuilder.loadTexts: ndmpBackupSuccesses.setDescription('Number of ndmpd backups that succeeded.')
ndmpRestoreSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setStatus('current')
if mibBuilder.loadTexts: ndmpRestoreSuccesses.setDescription('Number of ndmpd restores that succeeded.')
ndmpBackupFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailures.setStatus('current')
if mibBuilder.loadTexts: ndmpBackupFailures.setDescription('Number of ndmpd backups that failed.')
ndmpRestoreFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailures.setStatus('current')
if mibBuilder.loadTexts: ndmpRestoreFailures.setDescription('Number of ndmpd restores that failed.')
ndmpBackupFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpBackupFailureReason.setStatus('current')
if mibBuilder.loadTexts: ndmpBackupFailureReason.setDescription('When the ndmpBackupFailures value is non-zero, this string describes the reason for the most recent backup failure.')
ndmpRestoreFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 10, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setStatus('current')
if mibBuilder.loadTexts: ndmpRestoreFailureReason.setDescription('When the ndmpRestoreFailures value is non-zero, this string describes the reason for the most recent restore failure.')
ftpdOn = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdOn.setStatus('current')
if mibBuilder.loadTexts: ftpdOn.setDescription('Indicates whether ftpd has been turned on or not.')
ftpdCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdCurrentConns.setStatus('current')
if mibBuilder.loadTexts: ftpdCurrentConns.setDescription('Number of currently open TCP/IP connections to ftp daemon (active and idle)')
ftpdMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdMaxConns.setStatus('current')
if mibBuilder.loadTexts: ftpdMaxConns.setDescription('Number of maximum simultaneous TCP/IP connections to ftp daemon')
ftpdTotalConns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpdTotalConns.setStatus('current')
if mibBuilder.loadTexts: ftpdTotalConns.setDescription('Number of total TCP/IP connections to ftp daemon')
fabricInstances = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricInstances.setStatus('current')
if mibBuilder.loadTexts: fabricInstances.setDescription('The number of distinct fabrics present.')
fabricTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 2), )
if mibBuilder.loadTexts: fabricTable.setStatus('current')
if mibBuilder.loadTexts: fabricTable.setDescription('Provide a list of fabrics.')
fabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "fabricIndex"))
if mibBuilder.loadTexts: fabricEntry.setStatus('current')
if mibBuilder.loadTexts: fabricEntry.setDescription('Provide a report of current configuration and status of fabrics.')
fabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricIndex.setStatus('current')
if mibBuilder.loadTexts: fabricIndex.setDescription('A number that identifies this fabric entry.')
fabricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatus.setStatus('current')
if mibBuilder.loadTexts: fabricStatus.setDescription('This indicates the overall status of the SAN fabric(s).')
fabricStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricStatusMessage.setStatus('current')
if mibBuilder.loadTexts: fabricStatusMessage.setDescription('A string describing the fabric status, including a description of the condition (if any) that caused the status to be anything other than ok(3).')
fabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricName.setStatus('current')
if mibBuilder.loadTexts: fabricName.setDescription('This is the WWN of the fabric.')
fabricOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("netapp", 1), ("other", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabricOwner.setStatus('current')
if mibBuilder.loadTexts: fabricOwner.setDescription('This indicates who owns the management of the fabric.')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 3), )
if mibBuilder.loadTexts: switchTable.setStatus('current')
if mibBuilder.loadTexts: switchTable.setDescription('Provide a list of switches and hubs connected to the fabric.')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "switchFabricIndex"), (0, "NETWORK-APPLIANCE-MIB", "switchIndex"))
if mibBuilder.loadTexts: switchEntry.setStatus('current')
if mibBuilder.loadTexts: switchEntry.setDescription('Provide a report of current configuration and status of fabric interconnect elements. This include switches and hubs.')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIndex.setStatus('current')
if mibBuilder.loadTexts: switchIndex.setDescription('A number that identifies this switch entry.')
switchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchName.setStatus('current')
if mibBuilder.loadTexts: switchName.setDescription('This is the WWN of the switch.')
switchSymbolicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSymbolicName.setStatus('current')
if mibBuilder.loadTexts: switchSymbolicName.setDescription('This is the symbolic name of the switch.')
switchType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hub", 1), ("switch", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('current')
if mibBuilder.loadTexts: switchType.setDescription('The type of the switch.')
switchDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDomain.setStatus('current')
if mibBuilder.loadTexts: switchDomain.setDescription('The domain identifier of the switch.')
switchManagementId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchManagementId.setStatus('current')
if mibBuilder.loadTexts: switchManagementId.setDescription('The in-band management identifier of the switch.')
switchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatus.setStatus('current')
if mibBuilder.loadTexts: switchStatus.setDescription('The current status of the switch.')
switchStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchStatusMessage.setStatus('current')
if mibBuilder.loadTexts: switchStatusMessage.setDescription('A string describing the switch status, including a description of the condition (if any) that caused the status to be anything other than ok(3).')
switchLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: switchLinkSpeed.setDescription('The link speed of the switch. The value is an integer whose units are Gbits (for example, a value of 2 represents a link speed of 2 Gbit).')
switchHighPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsProcessed.setStatus('current')
if mibBuilder.loadTexts: switchHighPacketsProcessed.setDescription('Number of Packets successfully processed since the last reboot/reset of the switch. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
switchLowPacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsProcessed.setStatus('current')
if mibBuilder.loadTexts: switchLowPacketsProcessed.setDescription('Number of Packets successfully processed since the last reboot/reset of the switch. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
switchHighPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchHighPacketsRejected.setStatus('current')
if mibBuilder.loadTexts: switchHighPacketsRejected.setDescription('Number of Packets rejected since the last reboot/reset of the switch. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
switchLowPacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLowPacketsRejected.setStatus('current')
if mibBuilder.loadTexts: switchLowPacketsRejected.setDescription('Number of Packets rejected since the last reboot/reset of the switch. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
switchFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFabricIndex.setStatus('current')
if mibBuilder.loadTexts: switchFabricIndex.setDescription('The index of the fabric on which this switch resides. The value ranges from 1 to the value of fabricInstances.')
switch64PacketsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switch64PacketsProcessed.setStatus('current')
if mibBuilder.loadTexts: switch64PacketsProcessed.setDescription('Number of Packets successfully processed since the last reboot/reset of the switch. This object returns all of the 64 bit unsigned integer.')
switch64PacketsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switch64PacketsRejected.setStatus('current')
if mibBuilder.loadTexts: switch64PacketsRejected.setDescription('Number of Packets rejected since the last reboot/reset of the switch. This object returns all of the 64 bit unsigned integer.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 11, 4), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('Provide a list of ports connected to the fabric.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "portFabricIndex"), (0, "NETWORK-APPLIANCE-MIB", "portSwitchIndex"), (0, "NETWORK-APPLIANCE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('Provide a report of current configuration and status of ports in the fabric.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('A number that identifies this port entry.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('This is the WWN of the port.')
portSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchIndex.setStatus('current')
if mibBuilder.loadTexts: portSwitchIndex.setDescription('The index of the switch on which this port resides. The value ranges from 1 to the number of of switches.')
portSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSwitchName.setStatus('current')
if mibBuilder.loadTexts: portSwitchName.setDescription('This is the WWN of the switch to which the port is attached.')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription('The port number on the switch.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unidentified", 1), ("nPort", 2), ("nlPort", 3), ("fPort", 4), ("flPort", 5), ("ePort", 6), ("bPort", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('The type of the port.')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('current')
if mibBuilder.loadTexts: portState.setDescription('The current state of the port.')
portFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFabricIndex.setStatus('current')
if mibBuilder.loadTexts: portFabricIndex.setDescription('The index of the fabric on which this port resides. The value ranges from 1 to the value of fabricInstances.')
dump = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 1))
restore = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 14, 2))
dmpActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpActives.setStatus('current')
if mibBuilder.loadTexts: dmpActives.setDescription('Number of active dump.')
dmpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpAttempts.setStatus('current')
if mibBuilder.loadTexts: dmpAttempts.setDescription('Number of dump attempted.')
dmpSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpSuccesses.setStatus('current')
if mibBuilder.loadTexts: dmpSuccesses.setDescription('Number of dump succeeded.')
dmpFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpFailures.setStatus('current')
if mibBuilder.loadTexts: dmpFailures.setDescription('Number of dump failed.')
dmpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5), )
if mibBuilder.loadTexts: dmpTable.setStatus('current')
if mibBuilder.loadTexts: dmpTable.setDescription('Provides a report of dumps on each dump subtree.')
dmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dmpIndex"))
if mibBuilder.loadTexts: dmpEntry.setStatus('current')
if mibBuilder.loadTexts: dmpEntry.setDescription('Shows statistics of dumps on an unique dump subtree.')
dmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpIndex.setStatus('current')
if mibBuilder.loadTexts: dmpIndex.setDescription('Index into the subtree dump table.')
dmpStPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStPath.setStatus('current')
if mibBuilder.loadTexts: dmpStPath.setDescription('The full path to the dump subtree. In the format of /vol/<volname>/...')
dmpStAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStAttempts.setStatus('current')
if mibBuilder.loadTexts: dmpStAttempts.setDescription('No. of dump attempted for the subtree.')
dmpStSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStSuccesses.setStatus('current')
if mibBuilder.loadTexts: dmpStSuccesses.setDescription('No. of dump succeeded for the subtree.')
dmpStFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStFailures.setStatus('current')
if mibBuilder.loadTexts: dmpStFailures.setDescription('No. of dump failed for the subtree.')
dmpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpTime.setStatus('current')
if mibBuilder.loadTexts: dmpTime.setDescription('The start time for the last attempt to dump the subtree, including the currently running one. The time in seconds since January 1, 1970.')
dmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStatus.setStatus('current')
if mibBuilder.loadTexts: dmpStatus.setDescription('The status for the last dump attempt on the subtree.')
dmpLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpLevel.setStatus('current')
if mibBuilder.loadTexts: dmpLevel.setDescription('The level of the dump.')
dmpNumFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpNumFiles.setStatus('current')
if mibBuilder.loadTexts: dmpNumFiles.setDescription('The number of files dumped.')
dmpDataAmount = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDataAmount.setStatus('current')
if mibBuilder.loadTexts: dmpDataAmount.setDescription('The amount of data dumped, in Megabytes.')
dmpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpStartTime.setStatus('current')
if mibBuilder.loadTexts: dmpStartTime.setDescription('The start time of the dump. The time is in seconds since January 1, 1970.')
dmpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 14, 1, 5, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmpDuration.setStatus('current')
if mibBuilder.loadTexts: dmpDuration.setDescription('The duration of the dump.')
rstActives = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstActives.setStatus('current')
if mibBuilder.loadTexts: rstActives.setDescription('Number of active restore.')
rstAttempts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstAttempts.setStatus('current')
if mibBuilder.loadTexts: rstAttempts.setDescription('Number of restore attempted.')
rstSuccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstSuccesses.setStatus('current')
if mibBuilder.loadTexts: rstSuccesses.setDescription('Number of restore succeeded.')
rstFailures = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstFailures.setStatus('current')
if mibBuilder.loadTexts: rstFailures.setDescription('Number of restore failed.')
dafsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 1))
dafsIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsIsLicensed.setStatus('obsolete')
if mibBuilder.loadTexts: dafsIsLicensed.setDescription('Whether the dafs protocol is licensed on the filer. Data ONTAP Specific')
dafsMaxRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestsServer.setStatus('obsolete')
if mibBuilder.loadTexts: dafsMaxRequestsServer.setDescription('Server wide maximum number of concurrent requests Data ONTAP Specific')
dafsMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequests.setStatus('obsolete')
if mibBuilder.loadTexts: dafsMaxRequests.setDescription('Server maximum number of concurrent requests per session Data ONTAP Specific')
dafsMaxRequestSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxRequestSize.setStatus('current')
if mibBuilder.loadTexts: dafsMaxRequestSize.setDescription('Server maximum size of an inline request')
dafsMaxResponseSize = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxResponseSize.setStatus('current')
if mibBuilder.loadTexts: dafsMaxResponseSize.setDescription('Server maximum size of an inline response')
dafsMaxPendingRequestsServer = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setStatus('obsolete')
if mibBuilder.loadTexts: dafsMaxPendingRequestsServer.setDescription('Server wide maximum number of requests that can queue waiting for resources Data ONTAP Specific')
dafsUseChecksums = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsUseChecksums.setStatus('current')
if mibBuilder.loadTexts: dafsUseChecksums.setDescription('Server uses checksums')
dafsNicNumRequestDemons = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setStatus('obsolete')
if mibBuilder.loadTexts: dafsNicNumRequestDemons.setDescription('Server default number of request demons per Nic. Data ONTAP Specific')
dafsAnonymousAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setStatus('current')
if mibBuilder.loadTexts: dafsAnonymousAuthentication.setDescription('Allow the server to acception connections with authentication type NONE.')
dafsServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerEnabled.setStatus('current')
if mibBuilder.loadTexts: dafsServerEnabled.setDescription('Current status of the DAFS server. If true, the DAFS server is running.')
dafsDefaultUid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultUid.setStatus('current')
if mibBuilder.loadTexts: dafsDefaultUid.setDescription('Default client User ID if anonymously connected.')
dafsDefaultGid = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDefaultGid.setStatus('current')
if mibBuilder.loadTexts: dafsDefaultGid.setDescription('Default client Group ID if anonymously connected.')
dafsMaxDisconnectedSessions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setStatus('current')
if mibBuilder.loadTexts: dafsMaxDisconnectedSessions.setDescription('Maximum number of disconnected sessions for which the DAFS server will retain response cache data.')
dafsMaxIdleSeconds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setStatus('current')
if mibBuilder.loadTexts: dafsMaxIdleSeconds.setDescription('Maximum number of seconds server will keep a session open without hearing from the client.')
dafsNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 2), )
if mibBuilder.loadTexts: dafsNicTable.setStatus('current')
if mibBuilder.loadTexts: dafsNicTable.setDescription('A table containing DAFS NIC specific information.')
dafsNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsNicIndex"))
if mibBuilder.loadTexts: dafsNicEntry.setStatus('current')
if mibBuilder.loadTexts: dafsNicEntry.setDescription('Information about a particular current DAFS nic. An object of this type is transient, in that it ceases to exist when (or soon after) the nic is detached.')
dafsNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicIndex.setStatus('current')
if mibBuilder.loadTexts: dafsNicIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of DafsNicNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
dafsNicName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicName.setStatus('current')
if mibBuilder.loadTexts: dafsNicName.setDescription('A textual string containing the logical name under which the nic has been attached.')
dafsNicDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDevice.setStatus('current')
if mibBuilder.loadTexts: dafsNicDevice.setDescription('A textual string containing the physical name of the nic that has been attached.')
dafsNicState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicState.setStatus('current')
if mibBuilder.loadTexts: dafsNicState.setDescription('Current state of DAFS nic')
dafsNicListenAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicListenAddr.setStatus('current')
if mibBuilder.loadTexts: dafsNicListenAddr.setDescription('Transport specific address structure giving the DAFS listen address for this NIC.')
dafsNicNumRqstDemons = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setStatus('obsolete')
if mibBuilder.loadTexts: dafsNicNumRqstDemons.setDescription('Number of request demons assigned to this Nic to handle Nic related events. Data ONTAP Specific')
dafsNicInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicInBytes.setDescription('Total number of bytes, include DMA, received on this interface')
dafsNicDirectInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicDirectInBytes.setDescription('Total number of bytes read directly from the peer memory through this interface')
dafsNicOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicOutBytes.setDescription('Total number of bytes, include DMA, sent on this interface')
dafsNicDirectOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsNicDirectOutBytes.setDescription('Total number of bytes written directly to the peer memory through this interface')
curDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 3))
dafsPendingRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsPendingRequests.setStatus('obsolete')
if mibBuilder.loadTexts: dafsPendingRequests.setDescription('Server wide current number of requests that are queued waiting for resources Data ONTAP Specific')
dafsCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCurrentRequests.setStatus('obsolete')
if mibBuilder.loadTexts: dafsCurrentRequests.setDescription('Server wide current number of active requests Data ONTAP Specific')
totDafs = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 12, 4))
dafsCalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCalls.setStatus('current')
if mibBuilder.loadTexts: dafsCalls.setDescription('Total number of DAFS calls since last reboot')
dafsClientAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientAuths.setStatus('current')
if mibBuilder.loadTexts: dafsClientAuths.setDescription('Total number of Client Auth calls since last reboot')
dafsClientConnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnects.setStatus('current')
if mibBuilder.loadTexts: dafsClientConnects.setDescription('Total number of Client Connect calls since last reboot')
dafsClientConnectAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsClientConnectAuths.setStatus('current')
if mibBuilder.loadTexts: dafsClientConnectAuths.setDescription('Total number of Client Connect Auth calls since last reboot')
dafsConnectBinds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsConnectBinds.setStatus('current')
if mibBuilder.loadTexts: dafsConnectBinds.setDescription('Total number of Connect Bind calls since last reboot')
dafsDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDisconnects.setStatus('current')
if mibBuilder.loadTexts: dafsDisconnects.setDescription('Total number of Disconnect calls since last reboot')
dafsRegisterCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRegisterCreds.setStatus('current')
if mibBuilder.loadTexts: dafsRegisterCreds.setDescription('Total number of Register Credential calls since last reboot')
dafsReleaseCreds = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReleaseCreds.setStatus('current')
if mibBuilder.loadTexts: dafsReleaseCreds.setDescription('Total number of Release Credential calls since last reboot')
dafsSecinfos = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSecinfos.setStatus('current')
if mibBuilder.loadTexts: dafsSecinfos.setDescription('Total number of Secinfo calls since last reboot')
dafsServerAuths = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsServerAuths.setStatus('current')
if mibBuilder.loadTexts: dafsServerAuths.setDescription('Total number of Server Auth calls since last reboot')
dafsCheckResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCheckResponses.setStatus('current')
if mibBuilder.loadTexts: dafsCheckResponses.setDescription('Total number of Check Response calls since last reboot')
dafsFetchResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsFetchResponses.setStatus('current')
if mibBuilder.loadTexts: dafsFetchResponses.setDescription('Total number of Fetch Response calls since last reboot')
dafsDiscardResponses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDiscardResponses.setStatus('current')
if mibBuilder.loadTexts: dafsDiscardResponses.setDescription('Total number of Discard Responses calls since last reboot')
dafsAccesses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAccesses.setStatus('current')
if mibBuilder.loadTexts: dafsAccesses.setDescription('Total number of Access calls since last reboot')
dafsCacheHints = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCacheHints.setStatus('current')
if mibBuilder.loadTexts: dafsCacheHints.setDescription('Total number of Cache Hint calls since last reboot')
dafsCloses = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCloses.setStatus('current')
if mibBuilder.loadTexts: dafsCloses.setDescription('Total number of Close calls since last reboot')
dafsCommits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCommits.setStatus('current')
if mibBuilder.loadTexts: dafsCommits.setDescription('Total number of Commit calls since last reboot')
dafsCreates = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsCreates.setStatus('current')
if mibBuilder.loadTexts: dafsCreates.setDescription('Total number of Create calls since last reboot')
dafsDelegPurges = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegPurges.setStatus('current')
if mibBuilder.loadTexts: dafsDelegPurges.setDescription('Total number of Delegate Purge calls since last reboot')
dafsDelegReturns = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDelegReturns.setStatus('current')
if mibBuilder.loadTexts: dafsDelegReturns.setDescription('Total number of Delegate Return calls since last reboot')
dafsGetFsattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFsattrs.setStatus('current')
if mibBuilder.loadTexts: dafsGetFsattrs.setDescription('Total number of Get Fsattr calls since last reboot')
dafsGetRootHandles = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetRootHandles.setStatus('current')
if mibBuilder.loadTexts: dafsGetRootHandles.setDescription('Total number of Get Root Handle calls since last reboot')
dafsGetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrInlines.setStatus('current')
if mibBuilder.loadTexts: dafsGetattrInlines.setDescription('Total number of Getattr Inline calls since last reboot')
dafsGetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetattrDirects.setStatus('current')
if mibBuilder.loadTexts: dafsGetattrDirects.setDescription('Total number of Getattr Direct calls since last reboot')
dafsLinks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLinks.setStatus('current')
if mibBuilder.loadTexts: dafsLinks.setDescription('Total number of Link calls since last reboot')
dafsLocks = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLocks.setStatus('current')
if mibBuilder.loadTexts: dafsLocks.setDescription('Total number of Lock calls since last reboot')
dafsLockts = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockts.setStatus('current')
if mibBuilder.loadTexts: dafsLockts.setDescription('Total number of LockT calls since last reboot')
dafsLockus = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLockus.setStatus('current')
if mibBuilder.loadTexts: dafsLockus.setDescription('Total number of LockU calls since last reboot')
dafsLookUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUps.setStatus('current')
if mibBuilder.loadTexts: dafsLookUps.setDescription('Total number of LookUp calls since last reboot')
dafsLookUpps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsLookUpps.setStatus('current')
if mibBuilder.loadTexts: dafsLookUpps.setDescription('Total number of LookUpp calls since last reboot')
dafsNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNulls.setStatus('current')
if mibBuilder.loadTexts: dafsNulls.setDescription('Total number of Null calls since last reboot')
dafsNverifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsNverifys.setStatus('current')
if mibBuilder.loadTexts: dafsNverifys.setDescription('Total number of Nverify calls since last reboot')
dafsOpens = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpens.setStatus('current')
if mibBuilder.loadTexts: dafsOpens.setDescription('Total number of Open calls since last reboot')
dafsOpenDowngrades = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenDowngrades.setStatus('current')
if mibBuilder.loadTexts: dafsOpenDowngrades.setDescription('Total number of Open Downgrade calls since last reboot')
dafsOpenattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOpenattrs.setStatus('current')
if mibBuilder.loadTexts: dafsOpenattrs.setDescription('Total number of Openattr calls since last reboot')
dafsReadInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadInlines.setStatus('current')
if mibBuilder.loadTexts: dafsReadInlines.setDescription('Total number of Read Inline calls since last reboot')
dafsReadDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadDirects.setStatus('current')
if mibBuilder.loadTexts: dafsReadDirects.setDescription('Total number of Read Direct calls since last reboot')
dafsReaddirInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirInlines.setStatus('current')
if mibBuilder.loadTexts: dafsReaddirInlines.setDescription('Total number of Readdir Inline calls since last reboot')
dafsReaddirDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReaddirDirects.setStatus('current')
if mibBuilder.loadTexts: dafsReaddirDirects.setDescription('Total number of Readdir Direct calls since last reboot')
dafsReadlinkInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkInlines.setStatus('current')
if mibBuilder.loadTexts: dafsReadlinkInlines.setDescription('Total number of Readlink Inline calls since last reboot')
dafsReadlinkDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsReadlinkDirects.setStatus('current')
if mibBuilder.loadTexts: dafsReadlinkDirects.setDescription('Total number of Readlink Direct calls since last reboot')
dafsRemoves = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRemoves.setStatus('current')
if mibBuilder.loadTexts: dafsRemoves.setDescription('Total number of Remove calls since last reboot')
dafsRenames = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsRenames.setStatus('current')
if mibBuilder.loadTexts: dafsRenames.setDescription('Total number of Rename calls since last reboot')
dafsSetattrInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrInlines.setStatus('current')
if mibBuilder.loadTexts: dafsSetattrInlines.setDescription('Total number of Setattr Inline calls since last reboot')
dafsSetattrDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetattrDirects.setStatus('current')
if mibBuilder.loadTexts: dafsSetattrDirects.setDescription('Total number of Setattr Direct calls since last reboot')
dafsVerifys = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsVerifys.setStatus('current')
if mibBuilder.loadTexts: dafsVerifys.setDescription('Total number of Verify calls since last reboot')
dafsBatchSubmits = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBatchSubmits.setStatus('current')
if mibBuilder.loadTexts: dafsBatchSubmits.setDescription('Total number of Batch Submit calls since last reboot')
dafsWriteInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteInlines.setStatus('current')
if mibBuilder.loadTexts: dafsWriteInlines.setDescription('Total number of Write Inline calls since last reboot')
dafsWriteDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsWriteDirects.setStatus('current')
if mibBuilder.loadTexts: dafsWriteDirects.setDescription('Total number of Write Direct calls since last reboot')
dafsBcGetattrs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcGetattrs.setStatus('current')
if mibBuilder.loadTexts: dafsBcGetattrs.setDescription('Total number of BC Getattr calls since last reboot')
dafsBcNulls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcNulls.setStatus('current')
if mibBuilder.loadTexts: dafsBcNulls.setDescription('Total number of BC Null calls since last reboot')
dafsBcRecalls = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcRecalls.setStatus('current')
if mibBuilder.loadTexts: dafsBcRecalls.setDescription('Total number of BC Recall calls since last reboot')
dafsBcBatchCompletions = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsBcBatchCompletions.setStatus('current')
if mibBuilder.loadTexts: dafsBcBatchCompletions.setDescription('Total number of BC Batch Completion calls since last reboot')
dafsAppendInlines = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendInlines.setStatus('current')
if mibBuilder.loadTexts: dafsAppendInlines.setDescription('Total number of Append Inline calls since last reboot')
dafsAppendDirects = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsAppendDirects.setStatus('current')
if mibBuilder.loadTexts: dafsAppendDirects.setDescription('Total number of Append Direct calls since last reboot')
dafsGetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsGetFencingLists.setStatus('current')
if mibBuilder.loadTexts: dafsGetFencingLists.setDescription('Total number of Get Fencing List calls since last reboot')
dafsSetFencingLists = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSetFencingLists.setStatus('current')
if mibBuilder.loadTexts: dafsSetFencingLists.setDescription('Total number of Set Fencing List calls since last reboot')
dafsHurryUps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsHurryUps.setStatus('current')
if mibBuilder.loadTexts: dafsHurryUps.setDescription('Total number of Hurry Up calls since last reboot')
dafsInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsInBytes.setDescription('Total number of bytes, including DMA, received since the last reboot')
dafsDirectInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectInBytes.setStatus('current')
if mibBuilder.loadTexts: dafsDirectInBytes.setDescription('Total number of bytes received directly into memory since last reboot')
dafsOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsOutBytes.setDescription('Total number of bytes, including DMA, sent since the last reboot')
dafsDirectOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 12, 4, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsDirectOutBytes.setStatus('current')
if mibBuilder.loadTexts: dafsDirectOutBytes.setDescription('Total number of bytes sent directly into remote memory since the last reboot')
dafsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 5), )
if mibBuilder.loadTexts: dafsSessionTable.setStatus('current')
if mibBuilder.loadTexts: dafsSessionTable.setDescription('A table containing current DAFS client session information.')
dafsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsSessionIndex"))
if mibBuilder.loadTexts: dafsSessionEntry.setStatus('current')
if mibBuilder.loadTexts: dafsSessionEntry.setDescription('Information about a particular DAFS session. An object of this type is transient, in that it ceases to exist when (or soon after) the client disconnects.')
dafsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionIndex.setStatus('current')
if mibBuilder.loadTexts: dafsSessionIndex.setDescription('A unique value for each session.')
dafsSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionId.setStatus('current')
if mibBuilder.loadTexts: dafsSessionId.setDescription('Session Identifier assigned by the server.')
dafsSessionEndian = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigEndian", 1), ("littleEndian", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionEndian.setStatus('current')
if mibBuilder.loadTexts: dafsSessionEndian.setDescription('Byte order used on this session.')
dafsSessionAllowBackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setStatus('current')
if mibBuilder.loadTexts: dafsSessionAllowBackChannel.setDescription('Session may use a back control channel.')
dafsSessionAllowRdmaReadChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setStatus('current')
if mibBuilder.loadTexts: dafsSessionAllowRdmaReadChannel.setDescription('Session may use a RDMA read channel.')
dafsSessionUseChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionUseChecksums.setStatus('current')
if mibBuilder.loadTexts: dafsSessionUseChecksums.setDescription('Session uses checksums.')
dafsSessionMaxCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxCredentials.setDescription('Maximum number of credientials that can be registered on this session.')
dafsSessionMaxRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxRequestSize.setDescription('Maximum size of a DAFS request.')
dafsSessionMaxResponseSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxResponseSize.setDescription('Maximum size of a DAFS response.')
dafsSessionMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionMaxRequests.setStatus('current')
if mibBuilder.loadTexts: dafsSessionMaxRequests.setDescription('Maximum number of concurrent requests.')
dafsSessionInlineWriteHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setStatus('current')
if mibBuilder.loadTexts: dafsSessionInlineWriteHeaderSize.setDescription('Size of DAFS headers plus padding to the start of data. Used to better align inline data.')
dafsSessionClientIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientIdString.setStatus('current')
if mibBuilder.loadTexts: dafsSessionClientIdString.setDescription('Client ID string supplied by the client. Intended to uniquely identify that client.')
dafsSessionClientVerifier = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionClientVerifier.setStatus('current')
if mibBuilder.loadTexts: dafsSessionClientVerifier.setDescription('Supplied by the client to uniquely identify an instnce of a client.')
dafsSessionNumCredentials = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumCredentials.setStatus('current')
if mibBuilder.loadTexts: dafsSessionNumCredentials.setDescription('Current number of credentials registered on this session')
dafsSessionNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsSessionNumRequests.setStatus('current')
if mibBuilder.loadTexts: dafsSessionNumRequests.setDescription('Current number of active requests on this session')
dafsExportTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 12, 6), )
if mibBuilder.loadTexts: dafsExportTable.setStatus('current')
if mibBuilder.loadTexts: dafsExportTable.setDescription('A table containing DAFS Export filesystems.')
dafsExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "dafsExportIndex"))
if mibBuilder.loadTexts: dafsExportEntry.setStatus('current')
if mibBuilder.loadTexts: dafsExportEntry.setDescription('Information about a particular current DAFS export. An object of this type is transient, in that it ceases to exist when (or soon after) the export is deleted.')
dafsExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportIndex.setStatus('current')
if mibBuilder.loadTexts: dafsExportIndex.setDescription("A unique value for each export. Its value ranges between 1 and the number of exports. The value for each export must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
dafsExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportName.setStatus('current')
if mibBuilder.loadTexts: dafsExportName.setDescription('A textual string containing information about the export. This is the logical export name.')
dafsExportPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportPath.setStatus('current')
if mibBuilder.loadTexts: dafsExportPath.setDescription('A textual string containing information about the export. This is the local filesystem path to the export.')
dafsExportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportEnabled.setStatus('current')
if mibBuilder.loadTexts: dafsExportEnabled.setDescription('This export is available for access.')
dafsExportRwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("readmostly", 2), ("readonly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportRwMode.setStatus('current')
if mibBuilder.loadTexts: dafsExportRwMode.setDescription('Global export mode. This represents the maximum access rights.')
dafsExportAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dafsExportAccessList.setStatus('current')
if mibBuilder.loadTexts: dafsExportAccessList.setDescription('A textual string containing information about the export. This is the list of hosts that may access the export. If empty, all hosts may access the export.')
viaNodeConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 1))
viaNodeSystemName = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNodeSystemName.setStatus('current')
if mibBuilder.loadTexts: viaNodeSystemName.setDescription('A string by which the node is identified in the cluster.')
viaCreated = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCreated.setStatus('current')
if mibBuilder.loadTexts: viaCreated.setDescription('The number of VIs created.')
viaConnectRequest = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectRequest.setStatus('current')
if mibBuilder.loadTexts: viaConnectRequest.setDescription('The number of times Connect Request call is made.')
viaConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectWait.setStatus('current')
if mibBuilder.loadTexts: viaConnectWait.setDescription('The number of times Connect wait call is made.')
viaDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaDisconnect.setStatus('current')
if mibBuilder.loadTexts: viaDisconnect.setDescription('Number of times VI got disconnected with out any error.')
viaConnectTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectTimeOut.setStatus('current')
if mibBuilder.loadTexts: viaConnectTimeOut.setDescription('Number of times VI connect request got timed out.')
viaConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnected.setStatus('current')
if mibBuilder.loadTexts: viaConnected.setDescription('Number of time VI got connected with out any error.')
viaCurrConnectPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectPending.setStatus('current')
if mibBuilder.loadTexts: viaCurrConnectPending.setDescription('The number of VIs for which connect request is pending.')
viaCurrConnectWaitPending = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setStatus('current')
if mibBuilder.loadTexts: viaCurrConnectWaitPending.setDescription('The number of VIs for which connect wait request is pending.')
viaCurrConnected = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrConnected.setStatus('current')
if mibBuilder.loadTexts: viaCurrConnected.setDescription('The number of VIs for which the current state is CONNECTED.')
viaCurrError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrError.setStatus('current')
if mibBuilder.loadTexts: viaCurrError.setDescription('The number of VIs for which the current state is ERROR')
viaTotalError = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaTotalError.setStatus('current')
if mibBuilder.loadTexts: viaTotalError.setDescription('The number of VIs which encountered error state.')
viaInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInMsgs.setStatus('current')
if mibBuilder.loadTexts: viaInMsgs.setDescription('The total number of incoming Messages received.')
viaInRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRdma.setStatus('current')
if mibBuilder.loadTexts: viaInRdma.setDescription('The total number of incoming RDMA requests received.')
viaInBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInBytes.setStatus('current')
if mibBuilder.loadTexts: viaInBytes.setDescription('The total number of incoming bytes received, including those received in error. This count includes bytes received on currently established connections. This corresponds to the sum of bytes received through received messages, incoming RDMA writes and RDMA reads issued')
viaInRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAReadBytes.setStatus('current')
if mibBuilder.loadTexts: viaInRDMAReadBytes.setDescription('The total number of incoming bytes received through RDMA read, including those received in error. This count includes bytes received on currently established connections.')
viaInRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setStatus('current')
if mibBuilder.loadTexts: viaInRDMAWriteBytes.setDescription('The total number of bytes received through incoming RDMA writes, including those received in error. This count includes bytes received on currently established connections.')
viaOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutMsgs.setStatus('current')
if mibBuilder.loadTexts: viaOutMsgs.setDescription('The total number of Messages sent.')
viaOutRdma = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRdma.setStatus('current')
if mibBuilder.loadTexts: viaOutRdma.setDescription('The total number of RDMA requests sent.')
viaOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutBytes.setStatus('current')
if mibBuilder.loadTexts: viaOutBytes.setDescription('The total number of bytes sent, including those sent in error. This count includes bytes sent on currently established connections.')
viaOutRDMAReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setStatus('current')
if mibBuilder.loadTexts: viaOutRDMAReadBytes.setDescription('The total number of bytes sent through an incoming RDMA read request, including those sent in error. This count includes bytes sent on currently established connections.')
viaOutRDMAWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setStatus('current')
if mibBuilder.loadTexts: viaOutRDMAWriteBytes.setDescription('The total number of bytes sent through a RDMA write operation, including those sent in error. This count includes bytes sent on currently established connections.')
viaConnTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23), )
if mibBuilder.loadTexts: viaConnTable.setStatus('current')
if mibBuilder.loadTexts: viaConnTable.setDescription('A table containing via connection specific information.')
viaConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "viaConnVINumber"))
if mibBuilder.loadTexts: viaConnEntry.setStatus('current')
if mibBuilder.loadTexts: viaConnEntry.setDescription('A conceptual row of the viaConnTable containing information about a particular current via connection. Each row of this table is transient, and it ceases to exist when the connection makes transition to the CLOSED state.')
viaConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("pendingConnect", 2), ("connected", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnState.setStatus('current')
if mibBuilder.loadTexts: viaConnState.setDescription('The state of this via connection Legal States: Idle 1 Pending Connect 2 Connected 3 Error 4')
viaConnVINumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnVINumber.setStatus('current')
if mibBuilder.loadTexts: viaConnVINumber.setDescription('A number which uniquely defines a connection.')
viaConnRemoteNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteNetAddress.setDescription('IP address of the remote system of the connection.')
viaConnLocalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalNetAddress.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalNetAddress.setDescription('Local IPadress of the connection.')
viaConnRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemotePortNumber.setStatus('current')
if mibBuilder.loadTexts: viaConnRemotePortNumber.setDescription('Remote TCP portnumber of the connection.')
viaConnLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalPortNumber.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalPortNumber.setDescription('Local TCP Portnumber of the connection.')
viaConnLocalDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalDescriminator.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalDescriminator.setDescription('An identifier used by the local process to identify the VI connection.')
viaConnRemoteDescriminator = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteDescriminator.setDescription('An identifier used by the remote process to identify the VI connection.')
viaConnLocalMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalMaxTransferSize.setDescription('The local limit on the maximum packet size that can be transfered through the connection.')
viaConnRemoteMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteMaxTransferSize.setDescription('The remote limit on the maximum packet size that can be transfered through the connection.')
viaConnLocalEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalEnableRdmaWrite.setDescription('The value is 1 if remote DMA write is enabled in the local system otherwise, it is 0.')
viaConnLocalEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setStatus('current')
if mibBuilder.loadTexts: viaConnLocalEnableRdmaRead.setDescription('The value is 1 if remote DMA read is enabled in the local system otherwise, it is 0.')
viaConnRemoteEnableRdmaWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaWrite.setDescription('The value is 1 if remote DMA write is enabled in the remote system otherwise, it is 0.')
viaConnRemoteEnableRdmaRead = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setStatus('current')
if mibBuilder.loadTexts: viaConnRemoteEnableRdmaRead.setDescription('The value is 1 if remote DMA read is enabled in the remote system otherwise, it is 0.')
viaConnSentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnSentMessages.setDescription('Total number of messages sent through the connection.')
viaConnSentRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnSentRdmaReadMessages.setDescription('Total number of rdma read messages sent through the connection.')
viaConnSentRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnSentRdmaWriteMessages.setDescription('Total number of rdma write messages sent through the connection.')
viaConnRcvdMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnRcvdMessages.setDescription('Total number of messages received through the connection.')
viaConnRcvdRdmaReadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnRcvdRdmaReadMessages.setDescription('Total number of rdma read messages received through the connection.')
viaConnRcvdRdmaWriteMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 1, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setStatus('current')
if mibBuilder.loadTexts: viaConnRcvdRdmaWriteMessages.setDescription('Total number of rdma write messages received through the connection.')
viaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 2))
viaErrPostDesc = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrPostDesc.setStatus('current')
if mibBuilder.loadTexts: viaErrPostDesc.setDescription('The total number of descriptors completed in error by NIC.')
viaErrConnLost = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrConnLost.setStatus('current')
if mibBuilder.loadTexts: viaErrConnLost.setDescription('The total number of Lost Connection errors. ')
viaErrRecvQEmpty = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRecvQEmpty.setStatus('current')
if mibBuilder.loadTexts: viaErrRecvQEmpty.setDescription('The total number of errors due to an empty receive Queue. ')
viaErrRdmawProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmawProt.setStatus('current')
if mibBuilder.loadTexts: viaErrRdmawProt.setDescription('The total number of remote DMA write protection errors. ')
viaErrRdmarProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrRdmarProt.setStatus('current')
if mibBuilder.loadTexts: viaErrRdmarProt.setDescription('The total number of remote DMA read protection errors. ')
viaErrCompProt = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrCompProt.setStatus('current')
if mibBuilder.loadTexts: viaErrCompProt.setDescription('The total number of protection errors. ')
viaErrorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 13, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: viaErrorThreshold.setDescription('Setting this threshold will cause a trap to be enabled such that if the total error exceeds error threshold set a viaNodeErrorsTrap trap will be generated.')
viaNicAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 13, 3))
viaNicTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1), )
if mibBuilder.loadTexts: viaNicTable.setStatus('current')
if mibBuilder.loadTexts: viaNicTable.setDescription('A table containing via NIC-specific information.')
viaNicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "viaNicIndex"))
if mibBuilder.loadTexts: viaNicEntry.setStatus('current')
if mibBuilder.loadTexts: viaNicEntry.setDescription('A conceptual row of the viaNicTable containing information about a particular present VINic.')
viaNicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicIndex.setStatus('current')
if mibBuilder.loadTexts: viaNicIndex.setDescription('The index of the NIC in the NIC table.')
viaName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaName.setStatus('current')
if mibBuilder.loadTexts: viaName.setDescription('The symbolic name of the NIC device.')
viaHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: viaHardwareVersion.setDescription('The version of the VINIC described by this MIB.')
viaProviderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaProviderVersion.setStatus('current')
if mibBuilder.loadTexts: viaProviderVersion.setDescription('The version of the VI provider.')
viaNicAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNicAddress.setStatus('current')
if mibBuilder.loadTexts: viaNicAddress.setDescription('The Network address of this NIC.')
viaThreadSafe = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaThreadSafe.setStatus('current')
if mibBuilder.loadTexts: viaThreadSafe.setDescription('1 if synchronisation model is thread safe else 0.')
viaMaxDiscriminatorLength = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setStatus('current')
if mibBuilder.loadTexts: viaMaxDiscriminatorLength.setDescription('The maximum number of bytes that the VI provider allows for a connection descriminator.')
viaMaxRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBytes.setStatus('current')
if mibBuilder.loadTexts: viaMaxRegisterBytes.setDescription('Maximum number of bytes that can be registered.')
viaMaxRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterRegions.setStatus('current')
if mibBuilder.loadTexts: viaMaxRegisterRegions.setDescription('Maximum number of memory regions that can be registered.')
viaMaxRegisterBlockBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setStatus('current')
if mibBuilder.loadTexts: viaMaxRegisterBlockBytes.setDescription('Largest contiguous block of memory that can be registered.')
viaMaxVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxVI.setStatus('current')
if mibBuilder.loadTexts: viaMaxVI.setDescription('The limit on the total number of VI instances this entity can support.')
viaMaxDescriptorsPerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setStatus('current')
if mibBuilder.loadTexts: viaMaxDescriptorsPerQueue.setDescription('Maximum Descriptors per VI Work Queue that this VI provider can support.')
viaMaxSegmentsPerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setStatus('current')
if mibBuilder.loadTexts: viaMaxSegmentsPerDesc.setDescription('Maximum number of segments per descriptor that this VI provider can support.')
viaMaxCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQ.setStatus('current')
if mibBuilder.loadTexts: viaMaxCQ.setDescription('Maximum number of completion queues this VI provider can support.')
viaMaxCQEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxCQEntries.setStatus('current')
if mibBuilder.loadTexts: viaMaxCQEntries.setDescription('Maximum number of Completion queue entries per completion queue that this VI provider can support.')
viaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: viaMaxTransferSize.setDescription('The maximum transfer size supported by the VI Nic. The maximum transfer size is the amount of data that can be described by a single VI descriptor.')
viaNativeMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaNativeMTU.setStatus('current')
if mibBuilder.loadTexts: viaNativeMTU.setDescription('The native MTU size of the underlying network. For frame-based networks, this could reflect its native frame size. For cell-based networks, it could reflect the MTU of the appropriate abstraction layer that it supports.')
viaMaxPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaMaxPTags.setStatus('current')
if mibBuilder.loadTexts: viaMaxPTags.setDescription('The maximum number of protection tags that are supported by this VI provider.')
viaCurrRegisterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterBytes.setStatus('current')
if mibBuilder.loadTexts: viaCurrRegisterBytes.setDescription('Number of bytes registered by the VI user for this NIC.')
viaCurrRegisterRegions = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrRegisterRegions.setStatus('current')
if mibBuilder.loadTexts: viaCurrRegisterRegions.setDescription('Number of memory regions that is registered by VI user for this NIC.')
viaCurrVI = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrVI.setStatus('current')
if mibBuilder.loadTexts: viaCurrVI.setDescription('The current number of VI instances for this NIC.')
viaCurrCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrCQ.setStatus('current')
if mibBuilder.loadTexts: viaCurrCQ.setDescription('Current number of completion queues this VI provider has.')
viaCurrPTags = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaCurrPTags.setStatus('current')
if mibBuilder.loadTexts: viaCurrPTags.setDescription('Current Number of protection tags this VI provider has.')
viaConnectionListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 13, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viaConnectionListenPort.setStatus('current')
if mibBuilder.loadTexts: viaConnectionListenPort.setDescription('Port number on which VI server is listening for VI connection request.')
vfilerIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfilerIsLicensed.setStatus('current')
if mibBuilder.loadTexts: vfilerIsLicensed.setDescription('Whether vfiler is licensed on the filer.')
vfFilers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFilers.setStatus('current')
if mibBuilder.loadTexts: vfFilers.setDescription('Number of vfilers in the physical Filer.')
vfTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 3), )
if mibBuilder.loadTexts: vfTable.setStatus('current')
if mibBuilder.loadTexts: vfTable.setDescription('Provide a report of per-vfiler general information ')
vfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfIndex"))
if mibBuilder.loadTexts: vfEntry.setStatus('current')
if mibBuilder.loadTexts: vfEntry.setDescription('Provide a report of per-vfiler information')
vfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIndex.setStatus('current')
if mibBuilder.loadTexts: vfIndex.setDescription('A number that identifies this entry for the referenced vfiler.')
vfName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfName.setStatus('current')
if mibBuilder.loadTexts: vfName.setDescription(' A textual string that contains the name of the referenced vfiler.')
vfUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfUuid.setStatus('current')
if mibBuilder.loadTexts: vfUuid.setDescription('The UUID of the referenced vfiler.')
vfIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddresses.setStatus('current')
if mibBuilder.loadTexts: vfIpAddresses.setDescription('The total number of IP addresses for the referenced vfiler.')
vfStoragePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfStoragePaths.setStatus('current')
if mibBuilder.loadTexts: vfStoragePaths.setDescription('The total number of storage paths for the referenced vfiler.')
vfIpSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpSpace.setStatus('current')
if mibBuilder.loadTexts: vfIpSpace.setDescription(' A textual string that contains the name of the ipspace that the referenced vfiler belongs to.')
vfAllowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfAllowedProtocols.setStatus('current')
if mibBuilder.loadTexts: vfAllowedProtocols.setDescription('Total number of protocols allowed for the referenced vfiler.')
vfDisallowedProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDisallowedProtocols.setStatus('current')
if mibBuilder.loadTexts: vfDisallowedProtocols.setDescription('Total number of protocols disallowed for the referenced vfiler.')
vfState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfState.setStatus('current')
if mibBuilder.loadTexts: vfState.setDescription('Status of the vfiler: Running or stopped.')
vfIpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 4), )
if mibBuilder.loadTexts: vfIpTable.setStatus('current')
if mibBuilder.loadTexts: vfIpTable.setDescription('Provide a report of per-vfiler IP addresses information ')
vfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFiIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfIpIndex"))
if mibBuilder.loadTexts: vfIpEntry.setStatus('current')
if mibBuilder.loadTexts: vfIpEntry.setDescription('Provide a report of per-vfiler IP addresses information')
vfFiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFiIndex.setStatus('current')
if mibBuilder.loadTexts: vfFiIndex.setDescription('A number that identifies the referenced vfiler.')
vfIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpIndex.setStatus('current')
if mibBuilder.loadTexts: vfIpIndex.setDescription('A number that identifies which IP address in the referenced vfiler.')
vfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfIpAddr.setStatus('current')
if mibBuilder.loadTexts: vfIpAddr.setDescription('A IP address for the referenced vfiler.')
vfSpTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 5), )
if mibBuilder.loadTexts: vfSpTable.setStatus('current')
if mibBuilder.loadTexts: vfSpTable.setDescription('Provide a report of per-vfiler storage path information ')
vfSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFsIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfSpIndex"))
if mibBuilder.loadTexts: vfSpEntry.setStatus('current')
if mibBuilder.loadTexts: vfSpEntry.setDescription('Provide a report of per-vfiler storage path information')
vfFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFsIndex.setStatus('current')
if mibBuilder.loadTexts: vfFsIndex.setDescription('A number that identifies the referenced vfiler.')
vfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpIndex.setStatus('current')
if mibBuilder.loadTexts: vfSpIndex.setDescription('A number that identifies which storage path in the referenced vfiler.')
vfSpName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfSpName.setStatus('current')
if mibBuilder.loadTexts: vfSpName.setDescription('The storage path name for the referenced vfiler.')
vfProTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 16, 6), )
if mibBuilder.loadTexts: vfProTable.setStatus('current')
if mibBuilder.loadTexts: vfProTable.setDescription('Provide a report of per-vfiler protocol information ')
vfProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "vfFpIndex"), (0, "NETWORK-APPLIANCE-MIB", "vfProIndex"))
if mibBuilder.loadTexts: vfProEntry.setStatus('current')
if mibBuilder.loadTexts: vfProEntry.setDescription('Provide a report of per-vfiler protocol information')
vfFpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFpIndex.setStatus('current')
if mibBuilder.loadTexts: vfFpIndex.setDescription('A number that identifies the referenced vfiler.')
vfProIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProIndex.setStatus('current')
if mibBuilder.loadTexts: vfProIndex.setDescription('A number that identifies a protocol in the referenced vfiler.')
vfProName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProName.setStatus('current')
if mibBuilder.loadTexts: vfProName.setDescription('A textual string that contains the protocol name for the referenced vfiler.')
vfProStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfProStatus.setStatus('current')
if mibBuilder.loadTexts: vfProStatus.setDescription('Whether the referenced vfiler protocol is allowed or disallowed.')
fcpIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpIsLicensed.setStatus('current')
if mibBuilder.loadTexts: fcpIsLicensed.setDescription('Whether FCP access protocols are licensed on the filer.')
iscsiIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIsLicensed.setStatus('current')
if mibBuilder.loadTexts: iscsiIsLicensed.setDescription('Whether iSCSI access protocols are licensed on the filer.')
fcpLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowReadBytes.setStatus('current')
if mibBuilder.loadTexts: fcpLowReadBytes.setDescription('The total number of bytes read via FCP since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
fcpHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighReadBytes.setStatus('current')
if mibBuilder.loadTexts: fcpHighReadBytes.setDescription('The total number of bytes read via FCP since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
fcpLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowWriteBytes.setStatus('current')
if mibBuilder.loadTexts: fcpLowWriteBytes.setDescription('The total number of bytes written via FCP since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
fcpHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighWriteBytes.setStatus('current')
if mibBuilder.loadTexts: fcpHighWriteBytes.setDescription('The total number of bytes written via FCP since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
iscsiLowReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowReadBytes.setStatus('current')
if mibBuilder.loadTexts: iscsiLowReadBytes.setDescription('The total number of bytes read via iSCSI since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
iscsiHighReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighReadBytes.setStatus('current')
if mibBuilder.loadTexts: iscsiHighReadBytes.setDescription('The total number of bytes read via iSCSI since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
iscsiLowWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowWriteBytes.setStatus('current')
if mibBuilder.loadTexts: iscsiLowWriteBytes.setDescription('The total number of bytes written via iSCSI since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
iscsiHighWriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighWriteBytes.setStatus('current')
if mibBuilder.loadTexts: iscsiHighWriteBytes.setDescription('The total number of bytes written via iSCSI since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
iscsiHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiHighOps.setStatus('current')
if mibBuilder.loadTexts: iscsiHighOps.setDescription('The total number of iSCSI ops handled since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
iscsiLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiLowOps.setStatus('current')
if mibBuilder.loadTexts: iscsiLowOps.setDescription('The total number of iSCSI ops handled since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
fcpHighOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpHighOps.setStatus('current')
if mibBuilder.loadTexts: fcpHighOps.setDescription('The total number of FCP ops handled since the last boot. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
fcpLowOps = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpLowOps.setStatus('current')
if mibBuilder.loadTexts: fcpLowOps.setDescription('The total number of FCP ops handled since the last boot. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lun = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 15))
lunCount = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunCount.setStatus('current')
if mibBuilder.loadTexts: lunCount.setDescription('Number of LUNs in the Filer.')
lunTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2), )
if mibBuilder.loadTexts: lunTable.setStatus('current')
if mibBuilder.loadTexts: lunTable.setDescription('Provide a report of per-LUN general information ')
lunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "lunIndex"))
if mibBuilder.loadTexts: lunEntry.setStatus('current')
if mibBuilder.loadTexts: lunEntry.setDescription('Provide a report of per-LUN information')
lunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunIndex.setStatus('current')
if mibBuilder.loadTexts: lunIndex.setDescription('A number that identifies the referenced LUN.')
lunName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunName.setStatus('current')
if mibBuilder.loadTexts: lunName.setDescription('The name of the LUN. This is also the path to the LUN on the filer.')
lunComment = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunComment.setStatus('current')
if mibBuilder.loadTexts: lunComment.setDescription('The comment, if any, for this LUN.')
lunSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeLow.setStatus('current')
if mibBuilder.loadTexts: lunSizeLow.setDescription('Size of the LUN in bytes. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSizeHigh.setStatus('current')
if mibBuilder.loadTexts: lunSizeHigh.setDescription('Size of the LUN in bytes. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapped.setStatus('current')
if mibBuilder.loadTexts: lunMapped.setDescription('This LUN has been mapped to at least one initiator group.')
lunSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSerialNumber.setStatus('current')
if mibBuilder.loadTexts: lunSerialNumber.setDescription('The 12 character SCSI serial number of the LUN.')
lunQtreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunQtreeName.setStatus('current')
if mibBuilder.loadTexts: lunQtreeName.setDescription('A string that indicates which qtree this LUN belongs to.')
lunHighOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOps.setStatus('current')
if mibBuilder.loadTexts: lunHighOps.setDescription('The total number of Target side SCSI ops for this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunLowOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOps.setStatus('current')
if mibBuilder.loadTexts: lunLowOps.setDescription('The total number of Target side SCSI ops for this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunHighReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadBytes.setStatus('current')
if mibBuilder.loadTexts: lunHighReadBytes.setDescription('The total number of bytes read from this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunLowReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadBytes.setStatus('current')
if mibBuilder.loadTexts: lunLowReadBytes.setDescription('The total number of bytes read from this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunHighWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteBytes.setStatus('current')
if mibBuilder.loadTexts: lunHighWriteBytes.setDescription('The total number of bytes written to this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunLowWriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteBytes.setStatus('current')
if mibBuilder.loadTexts: lunLowWriteBytes.setDescription('The total number of bytes written to this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunHighErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighErrors.setStatus('current')
if mibBuilder.loadTexts: lunHighErrors.setDescription('The total number of errors seen on this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunLowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowErrors.setStatus('current')
if mibBuilder.loadTexts: lunLowErrors.setDescription('The total number of errors seen on this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunOnline.setStatus('current')
if mibBuilder.loadTexts: lunOnline.setDescription('Whether the LUN is online.')
lunSnapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSnapStatus.setStatus('current')
if mibBuilder.loadTexts: lunSnapStatus.setDescription('Whether a snapshot of this LUN can be taken.')
lunShareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("read", 2), ("write", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunShareStatus.setStatus('current')
if mibBuilder.loadTexts: lunShareStatus.setDescription('The sharing status for the LUN.')
lunSpaceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSpaceReserved.setStatus('current')
if mibBuilder.loadTexts: lunSpaceReserved.setDescription('Whether the LUN has space reservation enabled.')
lunStatsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunStatsResetTime.setStatus('current')
if mibBuilder.loadTexts: lunStatsResetTime.setDescription("Number of seconds since this LUN's stats were last reset.")
lunHighReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighReadOps.setStatus('current')
if mibBuilder.loadTexts: lunHighReadOps.setDescription('The total number of Target side SCSI read ops for this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunLowReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowReadOps.setStatus('current')
if mibBuilder.loadTexts: lunLowReadOps.setDescription('The total number of Target side SCSI read ops for this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunHighWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighWriteOps.setStatus('current')
if mibBuilder.loadTexts: lunHighWriteOps.setDescription('The total number of Target side SCSI write ops for this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunLowWriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowWriteOps.setStatus('current')
if mibBuilder.loadTexts: lunLowWriteOps.setDescription('The total number of Target side SCSI write ops for this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunHighOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunHighOtherOps.setStatus('current')
if mibBuilder.loadTexts: lunHighOtherOps.setDescription('The total number of Target side SCSI ops that are not read or write for this LUN since the stats were last reset. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
lunLowOtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunLowOtherOps.setStatus('current')
if mibBuilder.loadTexts: lunLowOtherOps.setDescription('The total number of Target side SCSI ops that are not read or write for this LUN since the stats were last reset. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
lunSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunSize64.setStatus('current')
if mibBuilder.loadTexts: lunSize64.setDescription('Size of the LUN in bytes. This object returns all of the 64 bit unsigned integer.')
lun64Ops = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64Ops.setStatus('current')
if mibBuilder.loadTexts: lun64Ops.setDescription('The total number of Target side SCSI ops for this LUN since the stats were last reset. This object all of the 64 bit unsigned integer.')
lun64ReadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64ReadBytes.setStatus('current')
if mibBuilder.loadTexts: lun64ReadBytes.setDescription('The total number of bytes read from this LUN since the stats were last reset. This object returns all of the 64 bit unsigned integer.')
lun64WriteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64WriteBytes.setStatus('current')
if mibBuilder.loadTexts: lun64WriteBytes.setDescription('The total number of bytes written to this LUN since the stats were last reset. This object returns all of the 64 bit unsigned integer.')
lun64Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64Errors.setStatus('current')
if mibBuilder.loadTexts: lun64Errors.setDescription('The total number of errors seen on this LUN since the stats were last reset. This object returns all the 64 bit unsigned integer.')
lun64ReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64ReadOps.setStatus('current')
if mibBuilder.loadTexts: lun64ReadOps.setDescription('The total number of Target side SCSI read ops for this LUN since the stats were last reset. This object returns all of the 64 bit unsigned integer.')
lun64WriteOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64WriteOps.setStatus('current')
if mibBuilder.loadTexts: lun64WriteOps.setDescription('The total number of Target side SCSI write ops for this LUN since the stats were last reset. This object returns all of the 64 bit unsigned integer.')
lun64OtherOps = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lun64OtherOps.setStatus('current')
if mibBuilder.loadTexts: lun64OtherOps.setDescription('The total number of Target side SCSI ops that are not read or write for this LUN since the stats were last reset. This object returns all of the 64 bit unsigned integer.')
lunMapTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3), )
if mibBuilder.loadTexts: lunMapTable.setStatus('current')
if mibBuilder.loadTexts: lunMapTable.setDescription('Provide a table listing the initiator group to Logical Unit Number mapping for each LUN.')
lunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "lunMapLUNIndex"), (0, "NETWORK-APPLIANCE-MIB", "lunMapInitiatorGroupIndex"))
if mibBuilder.loadTexts: lunMapEntry.setStatus('current')
if mibBuilder.loadTexts: lunMapEntry.setDescription('Provide a per LUN and Initiator group mapping of SCSI logical unit numbers.')
lunMapLUNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNIndex.setStatus('current')
if mibBuilder.loadTexts: lunMapLUNIndex.setDescription('A number that identifies the LUN in the table.')
lunMapInitiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setStatus('current')
if mibBuilder.loadTexts: lunMapInitiatorGroupIndex.setDescription('A number that identifies an initiator group in the table.')
lunMapLUNName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLUNName.setStatus('current')
if mibBuilder.loadTexts: lunMapLUNName.setDescription('The name of the LUN.')
lunMapInitiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setStatus('current')
if mibBuilder.loadTexts: lunMapInitiatorGroupName.setDescription('The name of the initiator group that this LUN is mapped to.')
lunMapLogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setStatus('current')
if mibBuilder.loadTexts: lunMapLogicalUnitNumber.setDescription('SCSI Logical Unit Number that this LUN is mapped to for this initiator group.')
initiator = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 16))
initiatorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1), )
if mibBuilder.loadTexts: initiatorGroupTable.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupTable.setDescription('Provide a report of per-initiator group general information ')
initiatorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorGroupIndex"))
if mibBuilder.loadTexts: initiatorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupEntry.setDescription('Provide a report of per-initiator group information')
initiatorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupIndex.setDescription('A number that identifies a specific initiator group.')
initiatorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupName.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupName.setDescription('The name of the initiator group')
initiatorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupType.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupType.setDescription('Type of this initiator group, either iSCSI or FCP')
initiatorGroupOS = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 256))).clone(namedValues=NamedValues(("default", 1), ("solaris", 2), ("windows", 3), ("hpux", 4), ("aix", 5), ("linux", 6), ("defaultPartner", 7), ("netware", 8), ("vmware", 9), ("openvms", 10), ("invalid", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupOS.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupOS.setDescription('Operating system the clients in this initiator group run. This governs the finer details of SCSI protocol interaction with these initiators')
initiatorGroupThrottleReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupThrottleReserve.setDescription('Percentage of filer scsi command blocks reserved for this initiator group')
initiatorGroupThrottleBorrow = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupThrottleBorrow.setDescription("True if this inititiator group is allowed to exceed it's throttle settings if more resources are needed and otherwise available. If initiatorGroupThrottleReserve is 0, this value is meaningless")
initiatorGroupUsePartner = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUsePartner.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupUsePartner.setDescription('The takeover mode for the initiator group. This is only applicable to FCP initiator groups on clustered filers')
initiatorGroupUseALUA = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupUseALUA.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupUseALUA.setDescription('If true this initiator group supports Asymetric Logical Unit Access.')
initiatorGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2), )
if mibBuilder.loadTexts: initiatorGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberTable.setDescription('Table of individual Initator names in each Initiator group')
initiatorGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorGroupMemberIndex"), (0, "NETWORK-APPLIANCE-MIB", "initiatorGroupMemberNameIndex"))
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberEntry.setDescription('Provide a report of per-initiator group information')
initiatorGroupMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberIndex.setDescription('A number that identifies a specific initiator group.')
initiatorGroupMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorGroupMemberNameIndex.setDescription('A number the identifies the initiator in the group.')
initiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorName.setStatus('current')
if mibBuilder.loadTexts: initiatorName.setDescription('A textual name for this initiator.')
initiatorListTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3), )
if mibBuilder.loadTexts: initiatorListTable.setStatus('current')
if mibBuilder.loadTexts: initiatorListTable.setDescription('Table of initiators that are connected to the filer.')
initiatorListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "initiatorListEntryIndex"))
if mibBuilder.loadTexts: initiatorListEntry.setStatus('current')
if mibBuilder.loadTexts: initiatorListEntry.setDescription('Provide a report of per-connected-initiator information.')
initiatorListEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: initiatorListEntryIndex.setStatus('current')
if mibBuilder.loadTexts: initiatorListEntryIndex.setDescription('A number that identifies the initiator connected to the target adapter.')
targetAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetAdapterName.setStatus('current')
if mibBuilder.loadTexts: targetAdapterName.setDescription('The name of the target adapter in the filer.')
connectedInitiatorNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorNodeName.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorNodeName.setDescription('A textual name for this initiator node.')
connectedInitiatorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortName.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorPortName.setDescription("The FibreChannel device's portname. This is FCP only.")
connectedInitiatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorType.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorType.setDescription('Type of this init group, either iSCSI or FCP')
connectedInitiatorIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorIsid.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorIsid.setDescription('The iSCSI isid (initiator session id) for this initiator. This is iSCSI only.')
connectedInitiatorPortalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setStatus('current')
if mibBuilder.loadTexts: connectedInitiatorPortalGroup.setDescription('The iSCSI portal group ID for this initiator. This is iSCSI only.')
fcpTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 17))
fcpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1), )
if mibBuilder.loadTexts: fcpTargetTable.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTable.setDescription('Provide a report of fcp target adapter general information ')
fcpTargetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "fcpTargetTableIndex"))
if mibBuilder.loadTexts: fcpTargetTableEntry.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTableEntry.setDescription('Provide a report of per fcp target device information')
fcpTargetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTableIndex.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTableIndex.setDescription('A number that identifies a specific fcp target device.')
fcpTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetName.setStatus('current')
if mibBuilder.loadTexts: fcpTargetName.setDescription('The name of the fcp target device')
fcpTargetNN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetNN.setStatus('current')
if mibBuilder.loadTexts: fcpTargetNN.setDescription('The FC WWNN of the fcp target device')
fcpTargetPN = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetPN.setStatus('current')
if mibBuilder.loadTexts: fcpTargetPN.setDescription('The FC WWPN of the fcp target device')
fcpTargetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetSpeed.setStatus('current')
if mibBuilder.loadTexts: fcpTargetSpeed.setDescription('speed in gigabits per second. 0 is unknown.')
fcpTargetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("startup", 1), ("uninitialized", 2), ("initializingFW", 3), ("linkNotConnected", 4), ("waitingForLinkUp", 5), ("online", 6), ("linkDisconnected", 7), ("resetting", 8), ("offline", 9), ("offlinedByUserSystem", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStatus.setStatus('current')
if mibBuilder.loadTexts: fcpTargetStatus.setDescription('Status of the fcp target adapter')
fcpTargetStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetStandby.setStatus('current')
if mibBuilder.loadTexts: fcpTargetStandby.setDescription('Whether this target adapter is in standby mode.')
fcpTargetTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fabric", 2), ("pointToPoint", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetTopology.setStatus('current')
if mibBuilder.loadTexts: fcpTargetTopology.setDescription('fibre channel topology for this adapter. ')
fcpTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("physical", 1), ("local", 2), ("standby", 3), ("partner", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpTargetType.setStatus('current')
if mibBuilder.loadTexts: fcpTargetType.setDescription('Responsibility/Type for this adapter.')
fcpCfMode = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 256))).clone(namedValues=NamedValues(("mixed", 1), ("standby", 2), ("partner", 3), ("partnerProxy", 4), ("partnerStandby", 5), ("localPrimary", 6), ("dualFabric", 7), ("ssi", 8), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcpCfMode.setStatus('current')
if mibBuilder.loadTexts: fcpCfMode.setDescription('Failover setting for the FCP target cluster.')
pset = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 17, 19))
psetTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1), )
if mibBuilder.loadTexts: psetTable.setStatus('current')
if mibBuilder.loadTexts: psetTable.setDescription('Provide a report of portset general information ')
psetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "psetIndex"))
if mibBuilder.loadTexts: psetEntry.setStatus('current')
if mibBuilder.loadTexts: psetEntry.setDescription('Provide a report of portset information')
psetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetIndex.setStatus('current')
if mibBuilder.loadTexts: psetIndex.setDescription('A number that identifies a specific port set.')
psetName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetName.setStatus('current')
if mibBuilder.loadTexts: psetName.setDescription('The name of the port set')
psetType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcp", 1), ("iSCSI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetType.setStatus('current')
if mibBuilder.loadTexts: psetType.setDescription('Type of this port set, either iSCSI or FCP')
psetMemberTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2), )
if mibBuilder.loadTexts: psetMemberTable.setStatus('current')
if mibBuilder.loadTexts: psetMemberTable.setDescription('Table of individual Port names in each Port set')
psetMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "psetMemberIndex"), (0, "NETWORK-APPLIANCE-MIB", "psetMemberNameIndex"))
if mibBuilder.loadTexts: psetMemberEntry.setStatus('current')
if mibBuilder.loadTexts: psetMemberEntry.setDescription('Provide a report of portset port information')
psetMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberIndex.setStatus('current')
if mibBuilder.loadTexts: psetMemberIndex.setDescription('A number that identifies a specific port set.')
psetMemberNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetMemberNameIndex.setStatus('current')
if mibBuilder.loadTexts: psetMemberNameIndex.setDescription('A number the identifies the port in the set.')
psetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 17, 19, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psetPortName.setStatus('current')
if mibBuilder.loadTexts: psetPortName.setDescription('A textual name for this port.')
fcp64ReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64ReadBytes.setStatus('current')
if mibBuilder.loadTexts: fcp64ReadBytes.setDescription('The total number of bytes read via FCP since the last boot. This object returns all of the 64 bit unsigned integer.')
fcp64WriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64WriteBytes.setStatus('current')
if mibBuilder.loadTexts: fcp64WriteBytes.setDescription('The total number of bytes written via FCP since the last boot. This object returns all of the 64 bit unsigned integer.')
iscsi64ReadBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64ReadBytes.setStatus('current')
if mibBuilder.loadTexts: iscsi64ReadBytes.setDescription('The total number of bytes read via iSCSI since the last boot. This object returns all of the 64 bit unsigned integer.')
iscsi64WriteBytes = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64WriteBytes.setStatus('current')
if mibBuilder.loadTexts: iscsi64WriteBytes.setDescription('The total number of bytes written via iSCSI since the last boot. This object returns all of the 64 bit unsigned integer.')
iscsi64Ops = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsi64Ops.setStatus('current')
if mibBuilder.loadTexts: iscsi64Ops.setDescription('The total number of iSCSI ops handled since the last boot. This object returns all of the 64 bit unsigned integer.')
fcp64Ops = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 17, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcp64Ops.setStatus('current')
if mibBuilder.loadTexts: fcp64Ops.setDescription('The total number of FCP ops handled since the last boot. This object returns all of the 64 bit unsigned integer.')
nfsCacheOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 1))
nfsCacheIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsEnabled.setStatus('current')
if mibBuilder.loadTexts: nfsCacheIsEnabled.setDescription('Whether NFS caching is enabled on this system.')
nfsCacheIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheIsLicensed.setStatus('current')
if mibBuilder.loadTexts: nfsCacheIsLicensed.setDescription('Whether NFS caching is licensed on this system.')
nfsCacheStats = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 18, 2))
nfsCacheBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesFromClients.setDescription('Total NFS bytes received from clients')
nfsCacheBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToClients.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesToClients.setDescription('Total NFS bytes sent to clients')
nfsCacheBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesFromServers.setDescription('Total NFS bytes received from servers')
nfsCacheBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBytesToServers.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheBytesToServers.setDescription('Total NFS bytes sent to servers')
nfsCacheTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheTotalRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheTotalRequests.setDescription('Total NFS requests received')
nfsCacheHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHitRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheHitRequests.setDescription('Total NFS requests resulting in cache hits')
nfsCacheMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissRequests.setStatus('deprecated')
if mibBuilder.loadTexts: nfsCacheMissRequests.setDescription('Total NFS requests resulting in cache misses')
nfsCacheMissCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheMissCacheableRequests.setDescription('Total NFS requests that were cacheable misses')
nfsCacheMissUnCacheableRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheMissUnCacheableRequests.setDescription('Total NFS requests that were uncacheable misses')
nfsCacheEjectRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheEjectRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheEjectRequests.setDescription('Total NFS requests resulting in object eject due to expiration')
nfsCacheVerifyRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheVerifyRequests.setDescription('Total NFS requests resulting in object verification')
nfsCacheRpcRecords = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheRpcRecords.setStatus('current')
if mibBuilder.loadTexts: nfsCacheRpcRecords.setDescription('Total RPC records received')
nfsCacheBWSavings = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheBWSavings.setStatus('current')
if mibBuilder.loadTexts: nfsCacheBWSavings.setDescription('Bandwidth savings for NFS requests')
nfsCacheHighBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighBytesFromClients.setDescription('Total NFS bytes received from clients. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowBytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowBytesFromClients.setDescription('Total NFS bytes received from clients. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCacheHighBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighBytesToClients.setDescription('Total NFS bytes sent to clients. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowBytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowBytesToClients.setDescription('Total NFS bytes sent to clients. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCacheHighBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighBytesFromServers.setDescription('Total NFS bytes received from servers. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowBytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowBytesFromServers.setDescription('Total NFS bytes received from servers. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCacheHighBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighBytesToServers.setDescription('Total NFS bytes sent to servers. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowBytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowBytesToServers.setDescription('Total NFS bytes sent to servers. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCacheHighTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighTotalRequests.setDescription('Total NFS requests received. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowTotalRequests.setDescription('Total NFS requests received. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCacheHighHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighHitRequests.setDescription('Total NFS requests resulting in cache hits. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowHitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowHitRequests.setDescription('Total NFS requests resulting in cache hits. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCacheHighMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheHighMissRequests.setDescription('Total NFS requests resulting in cache misses. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
nfsCacheLowMissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCacheLowMissRequests.setDescription('Total NFS requests resulting in cache misses. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
nfsCache64BytesFromClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesFromClients.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesFromClients.setDescription('Total NFS bytes received from clients. This object returns all of the 64 bit unsigned integer.')
nfsCache64BytesToClients = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesToClients.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesToClients.setDescription('Total NFS bytes sent to clients. This object returns all of the 64 bit unsigned integer.')
nfsCache64BytesFromServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesFromServers.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesFromServers.setDescription('Total NFS bytes received from servers. This object returns all of the 64 bit unsigned integer.')
nfsCache64BytesToServers = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64BytesToServers.setStatus('current')
if mibBuilder.loadTexts: nfsCache64BytesToServers.setDescription('Total NFS bytes sent to servers. This object returns all of the 64 bit unsigned integer.')
nfsCache64TotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64TotalRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCache64TotalRequests.setDescription('Total NFS requests received. This object returns all of the 64 bit unsigned integer.')
nfsCache64HitRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64HitRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCache64HitRequests.setDescription('Total NFS requests resulting in cache hits. This object returns all of the 64 bit unsigned integer.')
nfsCache64MissRequests = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 18, 2, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nfsCache64MissRequests.setStatus('current')
if mibBuilder.loadTexts: nfsCache64MissRequests.setDescription('Total NFS requests resulting in cache misses. This object returns all of the 64 bit unsigned integer.')
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 21, 1))
enclNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('current')
if mibBuilder.loadTexts: enclNumber.setDescription('The number of storage enclosures in the storage subsystem.')
enclTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2), )
if mibBuilder.loadTexts: enclTable.setStatus('current')
if mibBuilder.loadTexts: enclTable.setDescription('Display disk enclosure environmental information for fiber channel shelves and NearStore SCSI shelves. Shelves that do not support SCSI Enclosure Services, such as DEC Storage Shelf, Eurologic XL8 are not supported.')
enclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "enclIndex"))
if mibBuilder.loadTexts: enclEntry.setStatus('current')
if mibBuilder.loadTexts: enclEntry.setDescription('Display disk enclosure (shelf) environmental information for the referenced disk enclosure.')
enclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclIndex.setStatus('current')
if mibBuilder.loadTexts: enclIndex.setDescription('A number that identifies this enclosure among the possible monitored enclosures. This number normally uniquely identifies one shelf within one boot, but may it change between boots. The number may also change within a boot if shelves are removed and added.')
enclContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializing", 1), ("transitioning", 2), ("active", 3), ("inactive", 4), ("reconfiguring", 5), ("nonexistent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclContactState.setStatus('current')
if mibBuilder.loadTexts: enclContactState.setDescription('The state of the communication between the filer or storage engine and the enclosure monitoring device in the enclosure.')
enclChannelShelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannelShelfAddr.setStatus('current')
if mibBuilder.loadTexts: enclChannelShelfAddr.setDescription('The adapter number or switch name and the port number (together, called the channel), and shelf ID of this enclosure. Examples are 8a.1 and switch:5.1.')
enclProductLogicalID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductLogicalID.setStatus('current')
if mibBuilder.loadTexts: enclProductLogicalID.setDescription('The logical identifier of this enclosure. This a form of the World-Wide Name (WWN).')
enclProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductID.setStatus('current')
if mibBuilder.loadTexts: enclProductID.setDescription('The product ID of the shelf hardware module that provides the enclosure monitoring function. Example is LRC.')
enclProductVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductVendor.setStatus('current')
if mibBuilder.loadTexts: enclProductVendor.setDescription('The name of the vendor of this enclosure. Example is Xyratex.')
enclProductModel = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductModel.setStatus('current')
if mibBuilder.loadTexts: enclProductModel.setDescription('The model name of this enclosure. Example is DiskShelf14.')
enclProductRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductRevision.setStatus('current')
if mibBuilder.loadTexts: enclProductRevision.setDescription('The revision number of this enclosure.')
enclProductSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclProductSerialNo.setStatus('current')
if mibBuilder.loadTexts: enclProductSerialNo.setDescription('The serial number of this enclosure.')
enclNumberDiskBays = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberDiskBays.setStatus('current')
if mibBuilder.loadTexts: enclNumberDiskBays.setDescription('The number of disk bays in this enclosure.')
enclDisksPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDisksPresent.setStatus('current')
if mibBuilder.loadTexts: enclDisksPresent.setDescription('The list of disks present by bay number in this enclosure.')
enclPowerSuppliesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesMaximum.setDescription('The maximum number of power supplies in this enclosure.')
enclPowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesPresent.setDescription('The list of power supplies present in the enclosure. Numbering is from left to right in their intended location in the shelf, while facing the supplies.')
enclPowerSuppliesSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesSerialNos.setDescription('The list of serial numbers of power supplies present in the enclosure. Not all shelves are able to report the power supply serial number. Communication errors may make the serial number unavailable. Numbering is from left to right in their intended location in the shelf, while facing the supplies.')
enclPowerSuppliesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setStatus('current')
if mibBuilder.loadTexts: enclPowerSuppliesFailed.setDescription('The list of failed power supplies in this enclosure, numbered as in enclPowerSuppliesPresent.')
enclFansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansMaximum.setStatus('current')
if mibBuilder.loadTexts: enclFansMaximum.setDescription('The maximum number of fans or fan modules monitored by this enclosure. R100/R150 shelf power supply fans are not included in this number.')
enclFansPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansPresent.setStatus('current')
if mibBuilder.loadTexts: enclFansPresent.setDescription('The list of fans or fan modules present and for which status is known in this enclosure. Fans are numbered left-to-right as facing the fans. R100/R150 shelf power supply fans are not included in this list.')
enclFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFansFailed.setStatus('current')
if mibBuilder.loadTexts: enclFansFailed.setDescription('The list of failed fans or fan modules in this enclosure. Fans are numbered as described in enclFansPresent.')
enclTempSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsMaximum.setDescription('The maximum number of temperature sensors monitored by this enclosure.')
enclTempSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsPresent.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsPresent.setDescription('The list of temperature sensors present and for which status is known in this enclosure. Temperature sensors are numbered top-to-bottom and left-to-right, beginning with the front of the enclosure, then the rear, as the modules containing them are faced.')
enclTempSensorsOverTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempFail.setDescription('The list of temperature sensors reporting overtemperature failure in this enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempWarn.setDescription('The list of temperature sensors reporting overtemperature warning in this enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsUnderTempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempFail.setDescription('The list of temperature sensors reporting undertemperature failure in this enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsUnderTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarn.setDescription('The list of temperature sensors reporting undertemperature warning in this enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsCurrentTemp.setDescription('The list of temperatures reported by all temperature sensors in the enclosure, including the ambient temperature. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsOverTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempFailThr.setDescription('The list of overtemperature failure thresholds for all temperature sensors in the enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsOverTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsOverTempWarnThr.setDescription('The list of overtemperature warning thresholds for all temperature sensors in the enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsUnderTempFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempFailThr.setDescription('The list of undertemperature failure thresholds for all temperature sensors in the enclosure. Sensors are numbered as in TempSensorsPresent.')
enclTempSensorsUnderTempWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclTempSensorsUnderTempWarnThr.setDescription('The list of undertemperature warning thresholds for all temperature sensors in the enclosure. Sensors are numbered as in TempSensorsPresent.')
enclElectronicsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsMaximum.setDescription('The number of enclosure services electronics modules that it is possible for this enclosure to detect and/or monitor.')
enclElectronicsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsPresent.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsPresent.setDescription('The list those enclosure services electronics modules present in this enclosure. Numbering is from left-to-right or top-to-bottom in their intended location in the shelf, while facing the electronics modules. It is normal for the R200 FC-AT module to be reported as the second module.')
enclElectronicsSerialNos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsSerialNos.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsSerialNos.setDescription('The list of serial numbers of the enclosure services electronics modules present in this enclosure. The order follows that of enclElectronicsPresent.')
enclElectronicsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclElectronicsFailed.setStatus('current')
if mibBuilder.loadTexts: enclElectronicsFailed.setDescription('The list of failed electronics elements. Valid only if enclElectronicsPresent shows that some are present.')
enclVoltSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsMaximum.setDescription('The number of voltage sensors monitored by this enclosure.')
enclVoltSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsPresent.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsPresent.setDescription('The list of voltage sensors present and for which status is known in this enclosure. Voltage sensors are numbered top-to-bottom and left-to-right, beginning with the front of the enclosure, then the rear, as the modules containing them are faced.')
enclVoltSensorsOverVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFail.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFail.setDescription('The list of voltage sensors reporting overvoltage failure in this enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarn.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarn.setDescription('The list of voltage sensors reporting overvoltage warning in this enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFail.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFail.setDescription('The list of voltage sensors reporting undervoltage failure in this enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarn.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarn.setDescription('The list of voltage sensors reporting undervoltage warning in this enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsCurrentVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsCurrentVolt.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsCurrentVolt.setDescription('The list of voltages reported by all voltage sensors in the enclosure, Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFailThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltFailThr.setDescription('The list of overvoltage failure thresholds for all voltage sensors in the enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsOverVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsOverVoltWarnThr.setDescription('The list of overvoltage warning thresholds for all voltage sensors in the enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFailThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltFailThr.setDescription('The list of undervoltage failure thresholds for all voltage sensors in the enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclVoltSensorsUnderVoltWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclVoltSensorsUnderVoltWarnThr.setDescription('The list of undervoltage warning thresholds for all voltage sensors in the enclosure. Sensors are numbered as in VoltSensorsPresent.')
enclCurSensorsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsMaximum.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsMaximum.setDescription('The number of current sensors monitored by this enclosure.')
enclCurSensorsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsPresent.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsPresent.setDescription('The list of current sensors present and for which status is known in this enclosure. Current sensors are numbered top-to-bottom and left-to-right, beginning with the front of the enclosure, then the rear, as the modules containing them are faced.')
enclCurSensorsOverCurFail = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurFail.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurFail.setDescription('The list of current sensors reporting overcurrent failure in this enclosure. Sensors are numbered as in CurSensorsPresent.')
enclCurSensorsOverCurWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurWarn.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurWarn.setDescription('The list of current sensors reporting overcurrent warning in this enclosure. Sensors are numbered as in CurSensorsPresent.')
enclCurSensorsCurrentCur = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsCurrentCur.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsCurrentCur.setDescription('The list of currents reported by all current sensors in the enclosure, Sensors are numbered as in CurSensorsPresent.')
enclCurSensorsOverCurFailThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurFailThr.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurFailThr.setDescription('The list of overcurrent failure thresholds for all current sensors in the enclosure. Sensors are numbered as in CurSensorsPresent.')
enclCurSensorsOverCurWarnThr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 21, 1, 2, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclCurSensorsOverCurWarnThr.setStatus('current')
if mibBuilder.loadTexts: enclCurSensorsOverCurWarnThr.setDescription('The list of overcurrent warning thresholds for all current sensors in the enclosure. Sensors are numbered as in CurSensorsPresent.')
netInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 789, 1, 22, 1))
netifNumber = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifNumber.setStatus('current')
if mibBuilder.loadTexts: netifNumber.setDescription('The number of network interfaces (regardless of their current state) present on this system.')
netifTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2), )
if mibBuilder.loadTexts: netifTable.setStatus('current')
if mibBuilder.loadTexts: netifTable.setDescription('A list of interface entries. The number of entries is given by the value of netifNumber.')
netifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "netifIndex"))
if mibBuilder.loadTexts: netifEntry.setStatus('current')
if mibBuilder.loadTexts: netifEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
netifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifIndex.setStatus('current')
if mibBuilder.loadTexts: netifIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
netifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netifDescr.setStatus('current')
if mibBuilder.loadTexts: netifDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
ifHighInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInOctets.setStatus('current')
if mibBuilder.loadTexts: ifHighInOctets.setDescription('The total number of octets received on the interface, including framing characters. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInOctets.setStatus('current')
if mibBuilder.loadTexts: ifLowInOctets.setDescription('The total number of octets received on the interface, including framing characters. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifHighInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifLowInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifHighInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifLowInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInDiscards.setStatus('current')
if mibBuilder.loadTexts: ifHighInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInDiscards.setStatus('current')
if mibBuilder.loadTexts: ifLowInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInErrors.setStatus('current')
if mibBuilder.loadTexts: ifHighInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInErrors.setStatus('current')
if mibBuilder.loadTexts: ifLowInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: ifHighInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: ifLowInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutOctets.setStatus('current')
if mibBuilder.loadTexts: ifHighOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutOctets.setStatus('current')
if mibBuilder.loadTexts: ifLowOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifHighOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifLowOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifHighOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ifLowOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutDiscards.setStatus('current')
if mibBuilder.loadTexts: ifHighOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutDiscards.setStatus('current')
if mibBuilder.loadTexts: ifLowOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
ifHighOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifHighOutErrors.setStatus('current')
if mibBuilder.loadTexts: ifHighOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
ifLowOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLowOutErrors.setStatus('current')
if mibBuilder.loadTexts: ifLowOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
if64InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InOctets.setStatus('current')
if mibBuilder.loadTexts: if64InOctets.setDescription('The total number of octets received on the interface, including framing characters. This object returns all of the 64 bit unsigned integer.')
if64InUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64InUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol. This object returns all of the 64 bit unsigned integer.')
if64InNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64InNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol. This object returns all of the 64 bit unsigned integer.')
if64InDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InDiscards.setStatus('current')
if mibBuilder.loadTexts: if64InDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. This object returns all of the 64 bit unsigned integer.')
if64InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InErrors.setStatus('current')
if mibBuilder.loadTexts: if64InErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. This object returns all of the 64 bit unsigned integer.')
if64InUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64InUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: if64InUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol. This object returns all of the 64 bit unsigned integer.')
if64OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutOctets.setStatus('current')
if mibBuilder.loadTexts: if64OutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters. This object returns all of the 64 bit unsigned integer.')
if64OutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64OutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent. This object returns all of the 64 bit unsigned integer.')
if64OutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: if64OutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent. This object returns all of the 64 bit unsigned integer.')
if64OutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutDiscards.setStatus('current')
if mibBuilder.loadTexts: if64OutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. This object returns all of the 64 bit unsigned integer.')
if64OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 22, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: if64OutErrors.setStatus('current')
if mibBuilder.loadTexts: if64OutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors. This object returns all of the 64 bit unsigned integer.')
sisIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIsLicensed.setStatus('current')
if mibBuilder.loadTexts: sisIsLicensed.setDescription('Indicates whether Advanced SIS is licensed on the filer.')
sisTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 23, 2), )
if mibBuilder.loadTexts: sisTable.setStatus('current')
if mibBuilder.loadTexts: sisTable.setDescription('Provide a list of the SIS volumes on the system.')
sisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "sisIndex"))
if mibBuilder.loadTexts: sisEntry.setStatus('current')
if mibBuilder.loadTexts: sisEntry.setDescription('Provide details about a particular SIS volume.')
sisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisIndex.setStatus('current')
if mibBuilder.loadTexts: sisIndex.setDescription('A number that identifies this entry for the SIS volume.')
sisPath = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisPath.setStatus('current')
if mibBuilder.loadTexts: sisPath.setDescription('The path to the SIS volume.')
sisState = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisState.setStatus('current')
if mibBuilder.loadTexts: sisState.setDescription('Indicates whether SIS is enabled on the volume or not.')
sisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("undoing", 3), ("pending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisStatus.setStatus('current')
if mibBuilder.loadTexts: sisStatus.setDescription('Current status of the SIS volume.')
sisProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisProgress.setStatus('current')
if mibBuilder.loadTexts: sisProgress.setDescription('The progress of the current SIS operation.')
sisType = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("snapvault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisType.setStatus('current')
if mibBuilder.loadTexts: sisType.setDescription('Indicates whether it is a regular or snapvaulted SIS volume.')
sisSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisSchedule.setStatus('current')
if mibBuilder.loadTexts: sisSchedule.setDescription('The schedule for the SIS opertions.')
sisLastOpBeginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpBeginTime.setStatus('current')
if mibBuilder.loadTexts: sisLastOpBeginTime.setDescription('The starting time of the last completed SIS opertion.')
sisLastOpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpEndTime.setStatus('current')
if mibBuilder.loadTexts: sisLastOpEndTime.setDescription('The ending time of the last completed SIS operation.')
sisHighLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisHighLastOpSize.setStatus('current')
if mibBuilder.loadTexts: sisHighLastOpSize.setDescription('The total amount of data in KBytes that the last completed SIS operation had processed. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
sisLowLastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLowLastOpSize.setStatus('current')
if mibBuilder.loadTexts: sisLowLastOpSize.setDescription('The total amount of data in KBytes that the last completed SIS operation had processed. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
sisLastOpError = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sisLastOpError.setStatus('current')
if mibBuilder.loadTexts: sisLastOpError.setDescription('The error that the last SIS operation encountered if it failed.')
sis64LastOpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 23, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sis64LastOpSize.setStatus('current')
if mibBuilder.loadTexts: sis64LastOpSize.setDescription('The total amount of data in KBytes that the last completed SIS operation had processed. This object returns all of the 64 bit unsigned integer.')
compressIsLicensed = MibScalar((1, 3, 6, 1, 4, 1, 789, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressIsLicensed.setStatus('current')
if mibBuilder.loadTexts: compressIsLicensed.setDescription('Indicates whether compression is licensed on the filer.')
compressTable = MibTable((1, 3, 6, 1, 4, 1, 789, 1, 24, 2), )
if mibBuilder.loadTexts: compressTable.setStatus('current')
if mibBuilder.loadTexts: compressTable.setDescription('Provide a report of the total space used as well as the space saved by compression on volumes.')
compressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1), ).setIndexNames((0, "NETWORK-APPLIANCE-MIB", "compressIndex"))
if mibBuilder.loadTexts: compressEntry.setStatus('current')
if mibBuilder.loadTexts: compressEntry.setDescription('Provide a report of the total space used as well as the space saved by compression on the referenced file system.')
compressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressIndex.setStatus('current')
if mibBuilder.loadTexts: compressIndex.setDescription('A number that identifies this entry for the referenced file system.')
compressFileSys = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressFileSys.setStatus('current')
if mibBuilder.loadTexts: compressFileSys.setDescription('The name for the referenced file system.')
compressHighUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressHighUsedKBytes.setStatus('current')
if mibBuilder.loadTexts: compressHighUsedKBytes.setDescription('The total disk space in KBytes that is in use on the referenced file system. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
compressLowUsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressLowUsedKBytes.setStatus('current')
if mibBuilder.loadTexts: compressLowUsedKBytes.setDescription('The total disk space in KBytes that is in use on the referenced file system. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
compress64UsedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compress64UsedKBytes.setStatus('current')
if mibBuilder.loadTexts: compress64UsedKBytes.setDescription('The total disk space in KBytes that is in use on the referenced file system. This object returns all of the 64 bit unsigned integer.')
compressHighSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressHighSavedKBytes.setStatus('current')
if mibBuilder.loadTexts: compressHighSavedKBytes.setDescription('The disk space in KBytes of disk space that is saved by compression on the referenced file system. This object returns the most significant 32 bits of the 64 bit unsigned integer.')
compressLowSavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressLowSavedKBytes.setStatus('current')
if mibBuilder.loadTexts: compressLowSavedKBytes.setDescription('The disk space in KBytes of disk space that is saved by compression on the referenced filesystem. This object returns the least significant 32 bits of the 64 bit unsigned integer.')
compress64SavedKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compress64SavedKBytes.setStatus('current')
if mibBuilder.loadTexts: compress64SavedKBytes.setDescription('The disk space in KBytes of disk space that is saved by compression on the referenced filesystem. This object returns all of the 64 bit unsigned integer.')
compressPercentSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 789, 1, 24, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressPercentSaved.setStatus('current')
if mibBuilder.loadTexts: compressPercentSaved.setDescription('The percentage of disk space saved by compression on the referenced filesystem.')
userDefined = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 2)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: userDefined.setStatus('current')
if mibBuilder.loadTexts: userDefined.setDescription("A polling-style trap built using the 'snmp traps' command on the filer.")
dhmNoticeDegradedIO = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 6)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dhmNoticeDegradedIO.setStatus('current')
if mibBuilder.loadTexts: dhmNoticeDegradedIO.setDescription('Disk Health Monitor - Reported a Disk Degraded-I/O Event')
dhmNoticePFAEvent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 7)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dhmNoticePFAEvent.setStatus('current')
if mibBuilder.loadTexts: dhmNoticePFAEvent.setDescription('Disk Health Monitor - Reported a Disk Predictive-Failure Event')
emergencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 11)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: emergencyTrap.setStatus('current')
if mibBuilder.loadTexts: emergencyTrap.setDescription('A user-defined trap indicating an extremely urgent situation, usually indicating that the system has failed and is shutting down.')
alertTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 12)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alertTrap.setStatus('current')
if mibBuilder.loadTexts: alertTrap.setDescription('A user-defined trap indicating a condition that should be corrected immediately, such as a failed disk.')
criticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 13)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: criticalTrap.setStatus('current')
if mibBuilder.loadTexts: criticalTrap.setDescription('A user-defined trap indicating a critical condition, such as a hard device error.')
errorTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 14)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: errorTrap.setStatus('current')
if mibBuilder.loadTexts: errorTrap.setDescription('A user-defined trap indicating an error condition, such as a mistake in a configuration file.')
warningTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 15)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: warningTrap.setStatus('current')
if mibBuilder.loadTexts: warningTrap.setDescription('A user-defined trap indicating a condition which is not an error, but which may require special handling.')
notificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 16)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: notificationTrap.setStatus('current')
if mibBuilder.loadTexts: notificationTrap.setDescription('A user-defined trap meant to provide notification, such as an hourly uptime message.')
informationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 17)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: informationalTrap.setStatus('current')
if mibBuilder.loadTexts: informationalTrap.setDescription('A user-defined trap used for informational purposes.')
dbgTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 18)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dbgTrap.setStatus('current')
if mibBuilder.loadTexts: dbgTrap.setDescription('A user-defined trap used for debugging purposes. This trap was previously mis-documented as being trap number 17, with the name debugTrap. It has always, actually, been trap 18. The name change is to avoid issues with environments that already have a record for debugTrap.')
diskFailedShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 21)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskFailedShutdown.setStatus('current')
if mibBuilder.loadTexts: diskFailedShutdown.setDescription('System is shutting down because the system has been running in degraded mode for 24 hours. The trap includes a string describing the failed disk.')
diskFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 22)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskFailed.setStatus('current')
if mibBuilder.loadTexts: diskFailed.setDescription('One or more disks failed. The trap includes a string describing the failed disk(s).')
diskRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 26)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskRepaired.setStatus('current')
if mibBuilder.loadTexts: diskRepaired.setDescription('The failed disks have been repaired. This trap is a placeholder - it is not currently sent by Data ONTAP.')
fanFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 31)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanFailureShutdown.setStatus('current')
if mibBuilder.loadTexts: fanFailureShutdown.setDescription('Critical chassis or cpu fans have failed and the system is shutting down.')
fanFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 33)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanFailed.setStatus('current')
if mibBuilder.loadTexts: fanFailed.setDescription('One or more chassis fans failed. The trap includes a string describing the failed fan(s).')
fanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 35)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanWarning.setStatus('current')
if mibBuilder.loadTexts: fanWarning.setDescription('One or more chassis or cpu fans are in warning state. The trap includes a string describing the fan(s) in the warning state.')
fanRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 36)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: fanRepaired.setStatus('current')
if mibBuilder.loadTexts: fanRepaired.setDescription('All fans are repaired.')
powerSupplyFailureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 41)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFailureShutdown.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFailureShutdown.setDescription('Critical power supplies or power rails failed and the system is shutting down.')
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 43)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFailed.setDescription('One or more redundant power supplies failed. Include in the trap a string describing the failed power supply(ies).')
powerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 45)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyWarning.setStatus('current')
if mibBuilder.loadTexts: powerSupplyWarning.setDescription('One or more power supplies or power rails in warning state. Include in the trap a string describing the power supply(ies) or the power rail(s) in the warning state.')
powerSupplyRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 46)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyRepaired.setStatus('current')
if mibBuilder.loadTexts: powerSupplyRepaired.setDescription('Previously-failed power supplies or power rails have been repaired.')
cpuTooBusy = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 55)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cpuTooBusy.setStatus('current')
if mibBuilder.loadTexts: cpuTooBusy.setDescription('CPU utilization exceeds 90%. This trap is not enabled by default. To enable this trap set the registry entry options.monitor.cpu.enable to on. Note that as the threshold for this trap is checked once a minute it is possible to receive multiple instances of this trap in a short time.')
cpuOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 56)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cpuOk.setStatus('current')
if mibBuilder.loadTexts: cpuOk.setDescription('CPU utilization has dropped back below 90%. This trap is a placeholder - it is not currently sent by Data ONTAP.')
nvramBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 62)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: nvramBatteryDischarged.setStatus('current')
if mibBuilder.loadTexts: nvramBatteryDischarged.setDescription('The NVRAM battery is fully discharged.')
nvramBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 63)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: nvramBatteryLow.setStatus('current')
if mibBuilder.loadTexts: nvramBatteryLow.setDescription('The charge in the NVRAM battery is low.')
clusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 72)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeFailed.setStatus('current')
if mibBuilder.loadTexts: clusterNodeFailed.setDescription('A node in a Cluster FailOver configuration failed. Its partner will assume service for the failed node.')
clusterNodeTakenOver = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 75)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeTakenOver.setStatus('current')
if mibBuilder.loadTexts: clusterNodeTakenOver.setDescription('The partner has taken over for a failed cluster node.')
clusterNodeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 76)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: clusterNodeRepaired.setStatus('current')
if mibBuilder.loadTexts: clusterNodeRepaired.setDescription('A cluster node has resumed operation.')
volumeFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 82)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeFull.setStatus('current')
if mibBuilder.loadTexts: volumeFull.setDescription('At least one volume is more than 98% full. The string sent with the trap gives the name of the volume or volumes which exceed the volumeFull or volumeNearlyFull thresholds')
volumeNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 85)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeNearlyFull.setStatus('current')
if mibBuilder.loadTexts: volumeNearlyFull.setDescription('At least one volume is more than 95% full. The string sent with the trap gives the name of the volume or volumes which exceed the volumeFull or volumeNearlyFull thresholds')
volumeRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 86)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRepaired.setStatus('current')
if mibBuilder.loadTexts: volumeRepaired.setDescription('All volumes are now under 95% full.')
volumesStillFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 87)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumesStillFull.setStatus('current')
if mibBuilder.loadTexts: volumesStillFull.setDescription('At least one volume that was full or nearly full is now OK, but more volumes still exceed the volumeNearlyFull or volumeFull thresholds. This trap is generally sent within a short time of when a volume becomes OK, though if two volumes become OK within this timeframe, only one trap is sent. The string sent with the trap gives the name of the volume or volumes which still exceed the volumeFull or volumeNearlyFull thresholds. It does not send the name of any volume that is OK.')
overTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 91)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTempShutdown.setStatus('current')
if mibBuilder.loadTexts: overTempShutdown.setDescription('System temperature is too high to continue operating. The system is shutting down.')
overTemp = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 95)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTemp.setStatus('current')
if mibBuilder.loadTexts: overTemp.setDescription('System temperature is too high and in the warning level.')
overTempRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 96)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: overTempRepaired.setStatus('current')
if mibBuilder.loadTexts: overTempRepaired.setDescription('System temperature has returned to an acceptable value.')
shelfFault = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 103)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfFault.setStatus('current')
if mibBuilder.loadTexts: shelfFault.setDescription('A disk storage shelf reported a fault, probably due to a problem with drive placement, fans, power, or temperature.')
shelfRepaired = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 106)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfRepaired.setStatus('current')
if mibBuilder.loadTexts: shelfRepaired.setDescription('A previously-reported shelf fault is now corrected.')
globalStatusNonRecoverable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 111)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusNonRecoverable.setStatus('current')
if mibBuilder.loadTexts: globalStatusNonRecoverable.setDescription("The appliance's overall status changed to 'nonRecoverable', indicating a problem so severe that the appliance is shutting down.")
globalStatusCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 113)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusCritical.setStatus('current')
if mibBuilder.loadTexts: globalStatusCritical.setDescription("The appliance's overall status changed to 'critical', indicating a problem that needs immediate attention.")
globalStatusNonCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 115)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusNonCritical.setStatus('current')
if mibBuilder.loadTexts: globalStatusNonCritical.setDescription("The appliance's overall status changed to 'nonCritical', indicating a problem that needs attention.")
globalStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 116)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: globalStatusOk.setStatus('current')
if mibBuilder.loadTexts: globalStatusOk.setDescription("The appliance's overall status returned to normal.")
softQuotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 126)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: softQuotaExceeded.setStatus('current')
if mibBuilder.loadTexts: softQuotaExceeded.setDescription('A user has exceeded their soft quota limit.')
softQuotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 127)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: softQuotaNormal.setStatus('current')
if mibBuilder.loadTexts: softQuotaNormal.setDescription('A user is safely back under their soft quota limit.')
autosupportSendError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 134)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportSendError.setStatus('current')
if mibBuilder.loadTexts: autosupportSendError.setDescription('Unable to send autosupport. The trap includes a string describing the reason for the failure.')
autosupportConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 135)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportConfigurationError.setStatus('current')
if mibBuilder.loadTexts: autosupportConfigurationError.setDescription('Autosupport may be configured incorrectly. The trap includes a string describing the mis-configuration.')
autosupportSent = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 136)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: autosupportSent.setStatus('current')
if mibBuilder.loadTexts: autosupportSent.setDescription('Autosupport was sent successfully.')
upsLinePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 142)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsLinePowerOff.setStatus('current')
if mibBuilder.loadTexts: upsLinePowerOff.setDescription('UPS: Input line power has failed and UPS is now on battery.')
upsBatteryCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 143)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsBatteryCritical.setStatus('current')
if mibBuilder.loadTexts: upsBatteryCritical.setDescription('UPS: Battery is nearly exhausted, starting graceful shutdown.')
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 144)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsShuttingDown.setStatus('current')
if mibBuilder.loadTexts: upsShuttingDown.setDescription('UPS: Shutting down now: Time left on battery is exhuasted.')
upsBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 145)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsBatteryWarning.setStatus('current')
if mibBuilder.loadTexts: upsBatteryWarning.setDescription('UPS: Warning: Time left on battery is getting critical.')
upsLinePowerRetored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 146)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: upsLinePowerRetored.setStatus('current')
if mibBuilder.loadTexts: upsLinePowerRetored.setDescription('UPS: Input line power has been restored and UPS is now off battery.')
appEmergency = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 151)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appEmergency.setStatus('current')
if mibBuilder.loadTexts: appEmergency.setDescription('The application encountered an extremely urgent situation and requires an immediate response.')
appAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 152)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appAlert.setStatus('current')
if mibBuilder.loadTexts: appAlert.setDescription('The application is in a condition that should be corrected immediately.')
appCritical = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 153)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appCritical.setStatus('current')
if mibBuilder.loadTexts: appCritical.setDescription('The application encountered a critical condition.')
appError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 154)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appError.setStatus('current')
if mibBuilder.loadTexts: appError.setDescription('The application encountered an error condition.')
appWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 155)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appWarning.setStatus('current')
if mibBuilder.loadTexts: appWarning.setDescription('The application is in a condition which is not an error, but which may require special handling.')
appNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 156)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appNotice.setStatus('current')
if mibBuilder.loadTexts: appNotice.setDescription('The application is notifing of a certain event.')
appInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 157)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appInfo.setStatus('current')
if mibBuilder.loadTexts: appInfo.setDescription("The application's message is meant for informational purposes.")
appTrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 158)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: appTrap.setStatus('current')
if mibBuilder.loadTexts: appTrap.setDescription('The application requires to be debugged.')
alfFilewrap = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 162)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFilewrap.setStatus('current')
if mibBuilder.loadTexts: alfFilewrap.setDescription('The internal audit file has wrapped. You are currently losing event records. Warning the user.')
alfFileSaved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 166)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFileSaved.setStatus('current')
if mibBuilder.loadTexts: alfFileSaved.setDescription('The internal audit log has been autosaved to an external evt file. Notifying the user.')
alfFileNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 167)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: alfFileNearlyFull.setStatus('current')
if mibBuilder.loadTexts: alfFileNearlyFull.setDescription('The internal audit log file is nearly full. The file is going to wrap. Notifying the user.')
quotaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 176)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: quotaExceeded.setStatus('current')
if mibBuilder.loadTexts: quotaExceeded.setDescription('One of the quota limits has been exceeded. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Quota Event: status=exceeded, type={hard|soft|threshold}, user={username}, volume={volume}, limit_item={files|disk}, limit_value={#files|#kilobytes} [ , treeid={tree-id} ] [ , vfiler={vfiler} ] An example of a complete message would be: Quota Event: status=exceeded, type=soft, user=admin, volume=vol1, limit_item=disk, limit_value=1000000, treeid=8 Additional key=value items may, in the future, be appended to this message.')
quotaNormal = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 177)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: quotaNormal.setStatus('current')
if mibBuilder.loadTexts: quotaNormal.setDescription('One of the quota limits has gone back down to a normal level. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Quota Event: status=normal, type={hard|soft|threshold}, user={username}, volume={volume}, limit_item={files|disk}, limit_value={#files|#kilobytes} [ , treeid={tree-id} ] [ , vfiler={vfiler} ] An example of a complete message would be: Quota Event: status=normal, type=soft, user=admin, volume=vol1, limit_item=disk, limit_value=1000000, treeid=8 Additional key=value items may, in the future, be appended to this message.')
waflDirNearlyFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 186)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: waflDirNearlyFull.setStatus('current')
if mibBuilder.loadTexts: waflDirNearlyFull.setDescription('The directory has surpassed 90% of its sub-directory limit. The priority of waflDirFull and this trap are out of order for backwards compatibility.')
waflDirFull = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 187)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: waflDirFull.setStatus('current')
if mibBuilder.loadTexts: waflDirFull.setDescription('The directory has reached its sub-directory limit')
eccSummary = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 192)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: eccSummary.setStatus('current')
if mibBuilder.loadTexts: eccSummary.setDescription('Memory ECC: number of new correctable ECC errors')
eccMasked = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 195)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: eccMasked.setStatus('current')
if mibBuilder.loadTexts: eccMasked.setDescription('Memory ECC: High frequency of ECC errors')
ftpdError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 204)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdError.setStatus('current')
if mibBuilder.loadTexts: ftpdError.setDescription('Ftp daemon: service stopped')
ftpdMaxConnNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 206)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdMaxConnNotice.setStatus('current')
if mibBuilder.loadTexts: ftpdMaxConnNotice.setDescription('Ftp daemon: number of connections hits maximum number')
ftpdMaxConnThresholdNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 216)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: ftpdMaxConnThresholdNotice.setStatus('current')
if mibBuilder.loadTexts: ftpdMaxConnThresholdNotice.setDescription('Ftp daemon: number of connections nearly hits maximum number')
scsitgtFCPLinkBreak = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 222)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtFCPLinkBreak.setStatus('current')
if mibBuilder.loadTexts: scsitgtFCPLinkBreak.setDescription('SCSI Target: Link Break on FCP adapter')
scsitgtPartnerPathMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 224)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtPartnerPathMisconfigured.setStatus('current')
if mibBuilder.loadTexts: scsitgtPartnerPathMisconfigured.setDescription('SCSI Target: FCP Partner Path Misconfigured')
scsitgtThrottleNotice = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 226)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: scsitgtThrottleNotice.setStatus('current')
if mibBuilder.loadTexts: scsitgtThrottleNotice.setDescription('SCSI Target: Throttle limit event notification')
vifPrimaryLinkFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 237)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vifPrimaryLinkFailed.setStatus('current')
if mibBuilder.loadTexts: vifPrimaryLinkFailed.setDescription('Vif: The primary Interface on a Single mode vif has failed')
vifAllLinksFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 238)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vifAllLinksFailed.setStatus('current')
if mibBuilder.loadTexts: vifAllLinksFailed.setDescription('Vif: All the links of the vif have failed')
vfStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 245)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vfStopped.setStatus('current')
if mibBuilder.loadTexts: vfStopped.setDescription('A vFiler has stopped.')
vfStarted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 246)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vfStarted.setStatus('current')
if mibBuilder.loadTexts: vfStarted.setDescription('A vFiler has started.')
vscanVirusDetectedError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 254)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanVirusDetectedError.setStatus('current')
if mibBuilder.loadTexts: vscanVirusDetectedError.setDescription('VScan: A virus scanner has detected a virus on the Filer')
vscanDisConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 255)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanDisConnection.setStatus('current')
if mibBuilder.loadTexts: vscanDisConnection.setDescription('VScan: A virus scanner has dropped its connection from the Filer')
vscanConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 256)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanConfigurationChange.setStatus('current')
if mibBuilder.loadTexts: vscanConfigurationChange.setDescription('VScan: There has been a change to the vscan configuration')
vscanConnection = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 257)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanConnection.setStatus('current')
if mibBuilder.loadTexts: vscanConnection.setDescription('VScan: A virus scanner has made a connection to the Filer')
vscanServerUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 266)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: vscanServerUpgrade.setStatus('current')
if mibBuilder.loadTexts: vscanServerUpgrade.setDescription('VScan: The Vscan server has been upgraded')
volumeRestrictedByMirrorBigIo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 272)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestrictedByMirrorBigIo.setStatus('current')
if mibBuilder.loadTexts: volumeRestrictedByMirrorBigIo.setDescription('A volume that experienced a medium error during reconstruction is restricted and marked wafl-inconsistent, but starting wafliron has failed. This trap is issued to alert operator that a volume is not accessible and wafliron must be started to allow access to it.')
volumeInconsistentUmount = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 274)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeInconsistentUmount.setStatus('current')
if mibBuilder.loadTexts: volumeInconsistentUmount.setDescription('This trap is issued when we unmount a volume due to an inconsistency.')
volumeStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 275)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeStateChanged.setStatus('current')
if mibBuilder.loadTexts: volumeStateChanged.setDescription('Volume is being taken offline or being restricted. The string sent with trap specifies name of affected volume and its state.')
volumeOnline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 276)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOnline.setStatus('current')
if mibBuilder.loadTexts: volumeOnline.setDescription('Volume is online now. The string sent with trap specifies name of volume which is online now.')
rmcCardNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 283)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rmcCardNeedsReplacement.setStatus('current')
if mibBuilder.loadTexts: rmcCardNeedsReplacement.setDescription('Remote Management Controller card needs replacement. The trap includes a string specifying the reason for replacement')
rmcCardMissingCables = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 284)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: rmcCardMissingCables.setStatus('current')
if mibBuilder.loadTexts: rmcCardMissingCables.setDescription('Remote Management Controller card is missing its internal cable, or LAN cable or power supply cable. The trap includes a string specifing the missing component.')
volumeRemoteUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 294)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteUnreachable.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteUnreachable.setDescription('Local volume encountered an error while communicating to remote volume.')
volumeRemoteOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 296)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteOk.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteOk.setDescription('The communication between remote volume and local volume returned to normal.')
volumeRemoteRestored = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 297)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteRestored.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteRestored.setDescription('The data on remote volume has been fully restored to local volume.')
volumeRemoteRestoreBegin = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 298)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRemoteRestoreBegin.setStatus('current')
if mibBuilder.loadTexts: volumeRemoteRestoreBegin.setDescription('The data on remote volume has started being restored to local volume by Restore-on-Demand.')
volumeRestrictedRootConflict = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 304)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestrictedRootConflict.setStatus('current')
if mibBuilder.loadTexts: volumeRestrictedRootConflict.setDescription('Volume is restricted due to a root volume conflict. The string sent with trap specifies name of conflicting volume which is being restricted.')
volumeOfflineTooBig = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 314)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOfflineTooBig.setStatus('current')
if mibBuilder.loadTexts: volumeOfflineTooBig.setDescription('Volume can not be brought online because its raw size is larger than maximum allowed size. The string sent with trap specifies name of affected volume and its raw size, and maximum allowed size.')
volumeOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 324)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeOffline.setStatus('current')
if mibBuilder.loadTexts: volumeOffline.setDescription('Volume is being taken offline. The string sent with trap specifies name of affected volume and reason for being taken offline.')
volumeRestricted = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 334)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeRestricted.setStatus('current')
if mibBuilder.loadTexts: volumeRestricted.setDescription('Volume is being restricted. The string sent with trap specifies name of affected volume and reason for being restricted.')
volumeDegradedDirty = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 344)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeDegradedDirty.setStatus('current')
if mibBuilder.loadTexts: volumeDegradedDirty.setDescription('Volume is degraded and has dirty parity. WAFL_check must be run on this volume before it can be brought online. The string sent with trap specifies name of affected volume.')
volumeError = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 354)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeError.setStatus('current')
if mibBuilder.loadTexts: volumeError.setDescription('This trap is issued when a volume can not be brought online due to an error. The string sent with trap specifies name of affected volume and error description.')
snapmirrorSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 364)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapmirrorSyncFailed.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSyncFailed.setDescription('Synchronous SnapMirror failed and went into asynchronous mode.')
snapmirrorSyncOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 366)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapmirrorSyncOk.setStatus('current')
if mibBuilder.loadTexts: snapmirrorSyncOk.setDescription('Synchronous SnapMirror went into synchronous mode.')
chassisTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 371)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureShutdown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureShutdown.setDescription('The chassis temperature is extreme. The appliance has initiated a shutdown to protect itself. The operating environment should be monitored and corrected before restarting the appliance.')
chassisTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 372)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureWarning.setDescription('The chassis temperature is either too high or too low. The temperature should be monitored and, if possible, corrected.')
chassisTemperatureUnknown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 375)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureUnknown.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureUnknown.setDescription("The chassis temperature is unknown, because reading can't be obtained from the chassis temperature sensor.")
chassisTemperatureOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 376)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisTemperatureOk.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureOk.setDescription('The chassis temperature is OK.')
chassisCPUFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 381)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanStopped.setStatus('current')
if mibBuilder.loadTexts: chassisCPUFanStopped.setDescription('One or more CPU fans have stopped. The appliance has initiated a shutdown to protect itself. A new motherboard may be required to correct the fan. Contact Network Appliance for direction.')
chassisCPUFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 383)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanSlow.setStatus('current')
if mibBuilder.loadTexts: chassisCPUFanSlow.setDescription('A CPU fan is spinning too slowly. A new motherboard may be required to correct the fan. Contact Network Appliance for direction.')
chassisCPUFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 386)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisCPUFanOk.setStatus('current')
if mibBuilder.loadTexts: chassisCPUFanOk.setDescription('All CPU fan(s) are properly functioning.')
chassisPowerSuppliesFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 391)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSuppliesFailed.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSuppliesFailed.setDescription('Multiple chassis power supplies failed.')
chassisPowerSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 392)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyDegraded.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyDegraded.setDescription('One or more chassis power supplies are degraded. A description of the degraded state has been logged to the console and message log file.')
chassisPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 393)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyFailed.setDescription('One chassis power supply failed.')
chassisPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 394)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyRemoved.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyRemoved.setDescription('One or more chassis power supplies are removed.')
chassisPowerSupplyOff = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 395)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyOff.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyOff.setDescription('One or more chassis power supplies are off.')
chassisPowerSuppliesOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 396)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSuppliesOk.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSuppliesOk.setDescription('The chassis power supplies are all functioning properly.')
chassisPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 397)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerSupplyOk.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyOk.setDescription('This chassis power supply is functioning properly.')
chassisPowerDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 403)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerDegraded.setStatus('current')
if mibBuilder.loadTexts: chassisPowerDegraded.setDescription('The power within the chassis is degraded. A description of the degraded state has been logged to the console and message log file.')
chassisPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 406)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPowerOk.setStatus('current')
if mibBuilder.loadTexts: chassisPowerOk.setDescription('The power within the chassis is functioning properly.')
chassisFanDegraded = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 412)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanDegraded.setStatus('current')
if mibBuilder.loadTexts: chassisFanDegraded.setDescription('A chassis fan has been degraded.')
chassisFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 413)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanRemoved.setStatus('current')
if mibBuilder.loadTexts: chassisFanRemoved.setDescription('A chassis fan FRU has been removed.')
chassisFanStopped = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 414)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanStopped.setStatus('current')
if mibBuilder.loadTexts: chassisFanStopped.setDescription('One or more chassis fans have stopped.')
chassisFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 415)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanWarning.setStatus('current')
if mibBuilder.loadTexts: chassisFanWarning.setDescription('One or more chassis fans is spinning slowly or too fast.')
chassisFanOk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 416)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanOk.setStatus('current')
if mibBuilder.loadTexts: chassisFanOk.setDescription('All chassis fans are functioning properly.')
writeVerificationFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 424)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: writeVerificationFailed.setStatus('current')
if mibBuilder.loadTexts: writeVerificationFailed.setDescription('A write has failed a verification test on a SnapValidator enabled volume.')
domainControllerDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 435)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: domainControllerDisconnect.setStatus('current')
if mibBuilder.loadTexts: domainControllerDisconnect.setDescription('A CIFS domain controller connection to the filer has failed.')
dcPasswdChangeFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 436)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: dcPasswdChangeFailed.setStatus('current')
if mibBuilder.loadTexts: dcPasswdChangeFailed.setDescription("An attempt to change the filer's password with the domain controller has failed.")
domainControllerConnected = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 437)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: domainControllerConnected.setStatus('current')
if mibBuilder.loadTexts: domainControllerConnected.setDescription('A CIFS domain controller connection to the filer has been established.')
plexFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 444)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: plexFailed.setStatus('current')
if mibBuilder.loadTexts: plexFailed.setDescription('This trap is issued when one plex of a mirrored traditional volume or aggregate is failed. The string sent with this trap specifies name of affected plex or mirrored traditional volume or aggregate.')
plexOffline = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 454)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: plexOffline.setStatus('current')
if mibBuilder.loadTexts: plexOffline.setDescription('This trap is issued when a plex becomes offline. The string sent with this trap specifies name of affected plex or mirrored traditional volume or aggregate.')
shelfSESElectronicsFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 464)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfSESElectronicsFailed.setStatus('current')
if mibBuilder.loadTexts: shelfSESElectronicsFailed.setDescription('One or more of the enclosure services devices in a disk shelf has failed. Some shelf designs combine the enclosure monitoring hardware function into the module that provides the storage interface to the shelf. A failure in the enclosure monitoring section of these combined modules does not necessarily indicate a failure in disk or loop or bus operation, which may be able to continue.')
shelfSESElectronicsInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 467)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfSESElectronicsInfo.setStatus('current')
if mibBuilder.loadTexts: shelfSESElectronicsInfo.setDescription('A previously reported failure of an enclosure services device in a disk shelf has been corrected, or the device has reported information that does not necessarily require customer action.')
shelfIFModuleFailed = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 473)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleFailed.setStatus('current')
if mibBuilder.loadTexts: shelfIFModuleFailed.setDescription('One or more of the storage interface modules in a disk shelf has failed. Some shelf designs combine the enclosure monitoring hardware function into the module that operates the fibre channel loop or SCSI in the shelf. This failure is of the storage interface itself, not a failure of the enclosure monitoring, which may be able to continue. This failure may make one or more disks in the shelf or in the loop or bus unavailable.')
shelfIFModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 475)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleWarning.setStatus('current')
if mibBuilder.loadTexts: shelfIFModuleWarning.setDescription('One or more of the storage interface modules in a disk shelf has a warning condition. Some shelf designs combine the enclosure monitoring hardware function into the module that operates the fibre channel loop or SCSI in the shelf. This warning condition is of the storage interface itself, not a failure of the enclosure monitoring, which may be able to continue.')
shelfIFModuleInfo = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 477)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: shelfIFModuleInfo.setStatus('current')
if mibBuilder.loadTexts: shelfIFModuleInfo.setDescription('A previously reported failure of a disk shelf interface module has been corrected, or the module has reported information that does not necessarily require customer action.')
maxDirSizeAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 482)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: maxDirSizeAlert.setStatus('current')
if mibBuilder.loadTexts: maxDirSizeAlert.setDescription("A directory has reached it's maxdirsize limit. Either increase the maxdirsize or clean up the directory.")
maxDirSizeWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 485)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: maxDirSizeWarning.setStatus('current')
if mibBuilder.loadTexts: maxDirSizeWarning.setDescription("A directory is getting close to it's maxdirsize limit. Either increase the maxdirsize or clean up the directory.")
cifsStatsExhaustMemCtrlBlk = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 497)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: cifsStatsExhaustMemCtrlBlk.setStatus('current')
if mibBuilder.loadTexts: cifsStatsExhaustMemCtrlBlk.setDescription('A request for a CIFS control block can not be granted. All control blocks are in use.')
chassisPSRemovedxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 501)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSRemovedxMinShutdown.setStatus('current')
if mibBuilder.loadTexts: chassisPSRemovedxMinShutdown.setDescription('Power Supply Unit is removed from the system. System will be shutdown in x minutes if it is not put back.')
chassisPSUsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 505)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSUsMismatch.setStatus('current')
if mibBuilder.loadTexts: chassisPSUsMismatch.setDescription('Power Supply Units in the system are of different type. Please replace them with correct Power Supply Units.')
chassisFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 511)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisFanFailxMinShutdown.setStatus('current')
if mibBuilder.loadTexts: chassisFanFailxMinShutdown.setDescription('Multiple chassis fan failure. System will shut down in a few minutes if not corrected.')
chassisPSUwrongInput = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 515)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: chassisPSUwrongInput.setStatus('current')
if mibBuilder.loadTexts: chassisPSUwrongInput.setDescription('Power Supply Unit (PSU) in the system is connected to an incompatible external power source. Please change the power source being used or replace the PSU with one that matches the current power source.')
powerSupplyFanFailxMinShutdown = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 521)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: powerSupplyFanFailxMinShutdown.setStatus('current')
if mibBuilder.loadTexts: powerSupplyFanFailxMinShutdown.setDescription('Multiple power supply fans failure. System will shut down in a few minutes if not corrected.')
remoteSystemMgtAlert = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 532)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgtAlert.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgtAlert.setDescription('system remote management detected a system down event. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Remote Management Event: type={system_down|system_up|test|keep_alive}, severity={alert|warning|notice|normal|debug|info}, event={post_error|watchdog_reset|power_loss|abnormal_reboot}, key=value An example of a complete message would be: Remote Management Event: type=system_down, severity=alert, event=watchdog_reset, ss=16bytes Additional key=value items may, in the future, be appended to this message. The events that would generate this trap would be: post_error: Fatal POST error on boot power_loss: Loss of power to system abnormal_reboot: l2_watchdog_reset')
remoteSystemMgmtWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 535)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtWarning.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgmtWarning.setDescription('system remote management detected a system down event. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Remote Management Event: type={system_down|system_up|test|keep_alive}, severity={alert|warning|notice|normal|debug|info}, event={loss-of-heartbeat}, key=value An example of a complete message would be: Remote Management Event: type=system_down, severity=warning, event=loss_of_heartbeat, ss=16bytes Additional key=value items may, in the future, be appended to this message. The events that would generate this trap would be: loss_of_heartbeat: Loss of heartbeat to the RLM.')
remoteSystemMgmtNotification = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 536)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtNotification.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgmtNotification.setDescription('system remote management detected a system down event. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Remote Management Event: type={system_down|system_up|test|keep_alive}, severity={alert|warning|notice|normal|debug|info}, event={power_off_via_rlm,power_cycle_via_rlm,reset_via_rlm}, key=value An example of a complete message would be: Remote Management Event: type=system_down, severity=notice, event=power_off_via_rlm, ss=16bytes Additional key=value items may, in the future, be appended to this message. The events that would generate this trap would be: power_off_via_rlm: This indicates system power off power_cycle_via_rlm: This indicates system power cycle reset_via_rlm: This indicates system reset.')
remoteSystemMgmtPeriodic = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 547)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remoteSystemMgmtPeriodic.setStatus('current')
if mibBuilder.loadTexts: remoteSystemMgmtPeriodic.setDescription('This is a periodic keep alive from system remote management. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Remote Management Event: type={system_down|system_up|test|keep_alive}, severity={alert|warning|notice|normal|debug|info}, event={periodic_message} An example of a complete message would be: Remote Management Event: type=keep_alive, severity=info, event=periodic_message Additional key=value items may, in the future, be appended to this message.')
remotesystemMgmtTest = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 556)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: remotesystemMgmtTest.setStatus('current')
if mibBuilder.loadTexts: remotesystemMgmtTest.setDescription('This is a test trap from system remote management. The trap includes a string describing the specific event which triggered the trap. The string is structured in the following form: Remote Management Event: type={system_down|system_up|test|keep_alive}, severity={alert|warning|notice|normal|debug|info}, event={periodic_message} An example of a complete message would be: Remote Management Event: type=test, severity=notice, event=test Additional key=value items may, in the future, be appended to this message.')
diskMultipathOneSwitch = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 562)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathOneSwitch.setStatus('current')
if mibBuilder.loadTexts: diskMultipathOneSwitch.setDescription('A multipathed disk is only connected to one switch.')
diskMultipathNoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 563)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathNoTakeover.setStatus('current')
if mibBuilder.loadTexts: diskMultipathNoTakeover.setDescription('Multipath disks or luns could not be detected for the partner. The node will be unable to takeover correctly.')
diskMultipathWarning = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 565)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: diskMultipathWarning.setStatus('current')
if mibBuilder.loadTexts: diskMultipathWarning.setDescription('Synchronous mirroring is enabled, even though disks are not multipathed.')
driveDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 574)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: driveDisableErr.setStatus('current')
if mibBuilder.loadTexts: driveDisableErr.setDescription('A drive has been disabled by the shelf module due to hardware errors. If it is the only drive in the shelf that is disabled, replace the drive.')
hbaOfflineInformation = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 587)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: hbaOfflineInformation.setStatus('current')
if mibBuilder.loadTexts: hbaOfflineInformation.setDescription('A host bus adapter (HBA) port has been disabled. This state may be caused either by user command or by errors that make the interface unable to communicate with attached devices.')
lunSnapRestoreStatus = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 606)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunSnapRestoreStatus.setStatus('current')
if mibBuilder.loadTexts: lunSnapRestoreStatus.setDescription('Status of the Snap Restore')
lunCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 616)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneCreate.setStatus('current')
if mibBuilder.loadTexts: lunCloneCreate.setDescription('Created a LUN Clone')
lunCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 626)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneSplitStart.setStatus('current')
if mibBuilder.loadTexts: lunCloneSplitStart.setDescription('LUN Clone Split started')
lunCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 627)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: lunCloneSplitComplete.setStatus('current')
if mibBuilder.loadTexts: lunCloneSplitComplete.setDescription('LUN Clone Split completed')
flexCloneSplitStart = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 636)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: flexCloneSplitStart.setStatus('current')
if mibBuilder.loadTexts: flexCloneSplitStart.setDescription('Flex Clone Split started')
flexCloneSplitComplete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 637)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: flexCloneSplitComplete.setStatus('current')
if mibBuilder.loadTexts: flexCloneSplitComplete.setDescription('Flex Clone Split completed')
volumeCloneCreate = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 646)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeCloneCreate.setStatus('current')
if mibBuilder.loadTexts: volumeCloneCreate.setDescription('Created a Volume Clone')
snapAutoDelete = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 656)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: snapAutoDelete.setStatus('current')
if mibBuilder.loadTexts: snapAutoDelete.setDescription('Snapshot Autodeleted')
volumeAutogrow = NotificationType((1, 3, 6, 1, 4, 1, 789, 0, 666)).setObjects(("NETWORK-APPLIANCE-MIB", "productTrapData"), ("NETWORK-APPLIANCE-MIB", "productSerialNum"))
if mibBuilder.loadTexts: volumeAutogrow.setStatus('current')
if mibBuilder.loadTexts: volumeAutogrow.setDescription('Volume is Autogrown')
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", raidPSecondaryDiskName=raidPSecondaryDiskName, outOfDateDiskTable=outOfDateDiskTable, chassisPowerDegraded=chassisPowerDegraded, pclNfsV3Write1KCalls=pclNfsV3Write1KCalls, tv2ccCreates=tv2ccCreates, diskRepaired=diskRepaired, tv3cGetattrs=tv3cGetattrs, scsitgtFCPLinkBreak=scsitgtFCPLinkBreak, v3ccSymlinks=v3ccSymlinks, tv2cLookups=tv2cLookups, chassisFanDegraded=chassisFanDegraded, qrVIdType=qrVIdType, lunSnapStatus=lunSnapStatus, rmcCardNeedsReplacement=rmcCardNeedsReplacement, obsSmbQueryInfoDisks=obsSmbQueryInfoDisks, raidVBay=raidVBay, obsSmbTrans2Open2Pct=obsSmbTrans2Open2Pct, otherDiskDiskName=otherDiskDiskName, ncHttpsProxyIsLicensed=ncHttpsProxyIsLicensed, smbFlushPct=smbFlushPct, totDafs=totDafs, slVDay=slVDay, tv2Calls=tv2Calls, qrTable=qrTable, cifsSuspectOps=cifsSuspectOps, dafsGetFsattrs=dafsGetFsattrs, trcTcpMisses=trcTcpMisses, ncHttpsAccelEntry=ncHttpsAccelEntry, v2Read32KCalls=v2Read32KCalls, ncStreamingAccelHits=ncStreamingAccelHits, tv3cReaddirs=tv3cReaddirs, netapp=netapp, portType=portType, v2pReadlinks=v2pReadlinks, pclNfsV3Removes=pclNfsV3Removes, dfHighSisSharedKBytes=dfHighSisSharedKBytes, fcpHighOps=fcpHighOps, v2cCreates=v2cCreates, v2cpNulls=v2cpNulls, ncHttpInstAvgRespTime=ncHttpInstAvgRespTime, miscLowCifsOps=miscLowCifsOps, qrV2Id=qrV2Id, dafsExportPath=dafsExportPath, snapmirrorBaseSnapshot=snapmirrorBaseSnapshot, v3ccFsstats=v3ccFsstats, switchManagementId=switchManagementId, grmMonitor=grmMonitor, ncStreamingQTBTServers=ncStreamingQTBTServers, dafsNicName=dafsNicName, ncStreamingMmsBytesToClients=ncStreamingMmsBytesToClients, nfsCacheLowBytesFromClients=nfsCacheLowBytesFromClients, smbSeekPct=smbSeekPct, tv3ccCommits=tv3ccCommits, fcpTargetTableEntry=fcpTargetTableEntry, pclNfsV2Writes=pclNfsV2Writes, raidVDiskPort=raidVDiskPort, shelfIFModuleFailed=shelfIFModuleFailed, smbCopyPct=smbCopyPct, miscHighHttpOps=miscHighHttpOps, cifsOpLkMultiWaiters=cifsOpLkMultiWaiters, cpFromLowDatavecsOps=cpFromLowDatavecsOps, pclRpcBadLens=pclRpcBadLens, pclNfsV3MkdirPerCent=pclNfsV3MkdirPerCent, tv2Write128KCalls=tv2Write128KCalls, qrVKBytesLimitSoft=qrVKBytesLimitSoft, dmpLevel=dmpLevel, pclNfsV3AccessPerCent=pclNfsV3AccessPerCent, tv2cpRemoves=tv2cpRemoves, fsOverallStatus=fsOverallStatus, qtreeEntry=qtreeEntry, viaConnRemoteEnableRdmaRead=viaConnRemoteEnableRdmaRead, outOfDateDiskDiskName=outOfDateDiskDiskName, ncDnsFailedReverseLookups=ncDnsFailedReverseLookups, misc64CifsOps=misc64CifsOps, snapmirrorArguments=snapmirrorArguments, tv3cSymlinks=tv3cSymlinks, outOfDateDiskSectorSize=outOfDateDiskSectorSize, portEntry=portEntry, slQQtreeName=slQQtreeName, nfsCacheOptions=nfsCacheOptions, ncHttpHitRequests=ncHttpHitRequests, dafsClientConnectAuths=dafsClientConnectAuths, fsMaxUsedBytesPerCent=fsMaxUsedBytesPerCent, iscsiIsLicensed=iscsiIsLicensed, dafsNicNumRqstDemons=dafsNicNumRqstDemons, PYSNMP_MODULE_ID=netappModuleId, snapmirrorIndex=snapmirrorIndex, fanFailureShutdown=fanFailureShutdown, smbMoves=smbMoves, fcpLowWriteBytes=fcpLowWriteBytes, netappNetCache=netappNetCache, cfCannotTakeoverCause=cfCannotTakeoverCause, tv2ccGetattrs=tv2ccGetattrs, v3ccCommits=v3ccCommits, cfPartnerName=cfPartnerName, cifsTotalCalls=cifsTotalCalls, dafsCacheHints=dafsCacheHints, snapvaultSchedTable=snapvaultSchedTable, viaConnRemoteMaxTransferSize=viaConnRemoteMaxTransferSize, pclNfsV2Write64KCalls=pclNfsV2Write64KCalls, upsShuttingDown=upsShuttingDown, tv3Write128KCalls=tv3Write128KCalls, tv2cpGetattrs=tv2cpGetattrs, ncFtpBytesToClients=ncFtpBytesToClients, raidVDiskVendor=raidVDiskVendor, netappProducts=netappProducts, environment=environment, cifsMultipleVCs=cifsMultipleVCs, svTotalRestartSuccesses=svTotalRestartSuccesses, tv2CachedCalls=tv2CachedCalls, sisStatus=sisStatus, compressFileSys=compressFileSys, smbTreeConnectAndXs=smbTreeConnectAndXs, ncHttpLowTotalRespTimes=ncHttpLowTotalRespTimes, snapmirrorRestoreWaitAborts=snapmirrorRestoreWaitAborts, appTrap=appTrap, tv2cpNulls=tv2cpNulls, nfsCacheHighBytesToClients=nfsCacheHighBytesToClients, dmpSuccesses=dmpSuccesses, v2pMkdirs=v2pMkdirs, portSwitchName=portSwitchName, enclVoltSensorsPresent=enclVoltSensorsPresent, smbCheckDirs=smbCheckDirs, tv2cStatfss=tv2cStatfss, tv3pReaddirPluss=tv3pReaddirPluss, fcpTargetStatus=fcpTargetStatus, ncStreamingClientsDelayedSW=ncStreamingClientsDelayedSW, tv2cReaddirs=tv2cReaddirs, tv3pNulls=tv3pNulls, nfsCacheVerifyRequests=nfsCacheVerifyRequests, clusterNodeFailed=clusterNodeFailed, chassisCPUFanStopped=chassisCPUFanStopped, pclRpcNullRecvs=pclRpcNullRecvs, snapvaultSchedEntry=snapvaultSchedEntry, ncHttpLowTotalHitRespTimes=ncHttpLowTotalHitRespTimes, v3cLinks=v3cLinks, slVIndex=slVIndex, dafsMaxRequestSize=dafsMaxRequestSize, ncStats=ncStats, lunSnapRestoreStatus=lunSnapRestoreStatus, obsSmbClosePrintFilePct=obsSmbClosePrintFilePct, v3pLinks=v3pLinks, tv3pRmdirs=tv3pRmdirs, switchSymbolicName=switchSymbolicName, outOfDateDiskScsiAdapter=outOfDateDiskScsiAdapter, snapmirrorConnEntry=snapmirrorConnEntry, raidVPlex=raidVPlex, spareDiskFirmwareRevision=spareDiskFirmwareRevision, tv2cpLinks=tv2cpLinks, spareScsiAdapter=spareScsiAdapter, pclNfsV2Read64KCalls=pclNfsV2Read64KCalls, amIndex=amIndex, v2cpRoots=v2cpRoots, ncDnsIresIsInitialised=ncDnsIresIsInitialised, ncStreamingMissRequests=ncStreamingMissRequests, outOfDateDiskEntry=outOfDateDiskEntry, cifsWrites=cifsWrites, tv3Read64KCalls=tv3Read64KCalls, ncStreamingQuickTimeIsLicensed=ncStreamingQuickTimeIsLicensed, tv3cpLookups=tv3cpLookups, dcPasswdChangeFailed=dcPasswdChangeFailed, ncStreamingProxyBytesToServers=ncStreamingProxyBytesToServers, pclNfsV3Read8KCalls=pclNfsV3Read8KCalls, pclPerCent=pclPerCent, v2pGetattrs=v2pGetattrs, pclNfsV3Write4KCalls=pclNfsV3Write4KCalls, miscWindowsSetupWizardVersion=miscWindowsSetupWizardVersion, v2cGetattrs=v2cGetattrs, pclNfsV3Write512Calls=pclNfsV3Write512Calls, tv3Percent=tv3Percent, dafsDelegReturns=dafsDelegReturns, ifLowInUcastPkts=ifLowInUcastPkts, dfInodesFree=dfInodesFree, quotaNormal=quotaNormal, dafsAccesses=dafsAccesses, v3pReads=v3pReads, fcpTargetTopology=fcpTargetTopology, vscanDisConnection=vscanDisConnection, switchName=switchName, viaErrRdmawProt=viaErrRdmawProt, takeoverStatus=takeoverStatus, ncHttpAccelHits=ncHttpAccelHits, rcpTcpBadCalls=rcpTcpBadCalls, svSchedType=svSchedType, spareDiskName=spareDiskName, ncNntpCacheableRequests=ncNntpCacheableRequests, ndmpOn=ndmpOn, viaHardwareVersion=viaHardwareVersion, viaMaxDescriptorsPerQueue=viaMaxDescriptorsPerQueue, v3pWrites=v3pWrites, miscLowNetSentBytes=miscLowNetSentBytes, volumeNearlyFull=volumeNearlyFull, v3cpRmdirs=v3cpRmdirs, v2pRemoves=v2pRemoves, pclNfsV3Read2KCalls=pclNfsV3Read2KCalls, dafsDelegPurges=dafsDelegPurges, dafsExportEntry=dafsExportEntry, netifTable=netifTable, cpuCount=cpuCount, initiatorName=initiatorName, outOfDateDiskTotalBlocks=outOfDateDiskTotalBlocks, v3cpLinks=v3cpLinks, v2WriteStats=v2WriteStats, sparePool=sparePool, snapmirrorWrittenBytes=snapmirrorWrittenBytes, pclNfsV2CreatePerCent=pclNfsV2CreatePerCent, snapmirrorStatusEntry=snapmirrorStatusEntry, ncHttpInstAvgHitRespTime=ncHttpInstAvgHitRespTime, vfSpEntry=vfSpEntry, if64InOctets=if64InOctets, nfs=nfs, trcNonIdemDoneHits=trcNonIdemDoneHits, raidUsedMb=raidUsedMb, tnfsV2=tnfsV2, aggrOwningHost=aggrOwningHost, v2Read8KCalls=v2Read8KCalls, lunLowWriteOps=lunLowWriteOps, raidPScsiId=raidPScsiId, filesys=filesys, tv3ccSymlinks=tv3ccSymlinks, dmpAttempts=dmpAttempts, cifsPreserveCase=cifsPreserveCase, upsLinePowerRetored=upsLinePowerRetored, v3Write1KCalls=v3Write1KCalls, plexName=plexName, appAlert=appAlert, enclPowerSuppliesMaximum=enclPowerSuppliesMaximum, v2cpCreates=v2cpCreates, v3cpNulls=v3cpNulls, ncNntpActiveServConns=ncNntpActiveServConns, tv2cpReaddirs=tv2cpReaddirs, tv2cCreates=tv2cCreates, ftpdTotalConns=ftpdTotalConns, trpcServ=trpcServ, lunSpaceReserved=lunSpaceReserved, lun64OtherOps=lun64OtherOps, pclNfsV3Fsinfos=pclNfsV3Fsinfos, ncHttpsProxyOptions=ncHttpsProxyOptions, rpcBadCalls=rpcBadCalls, trpcServXDRCalls=trpcServXDRCalls, raidPCompletionPerCent=raidPCompletionPerCent, outOfDateDiskCount=outOfDateDiskCount, smbTrans2SetPathInfoPct=smbTrans2SetPathInfoPct, ncRMMemTotal=ncRMMemTotal, tv3cpRemoves=tv3cpRemoves, v2cpReaddirs=v2cpReaddirs, ncFtpMissRequests=ncFtpMissRequests, sisLastOpError=sisLastOpError, qvStateTable=qvStateTable, tv2cpCreates=tv2cpCreates, compressIndex=compressIndex, cpFromHighWaterOps=cpFromHighWaterOps, pclTable=pclTable, psetIndex=psetIndex)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", rpcUdpCalls=rpcUdpCalls, viaConnRcvdMessages=viaConnRcvdMessages, vfFpIndex=vfFpIndex, v3cRmdirs=v3cRmdirs, v3cpFsstats=v3cpFsstats, spareSectorSize=spareSectorSize, raid=raid, productCPUArch=productCPUArch, emergencyTrap=emergencyTrap, lunLowOps=lunLowOps, svThrottleValue=svThrottleValue, pclNfsV2RenamePerCent=pclNfsV2RenamePerCent, lunMapLUNIndex=lunMapLUNIndex, cifsOps=cifsOps, nfsPerClient=nfsPerClient, snapvaultHostTable=snapvaultHostTable, ncNntpBWSavings=ncNntpBWSavings, svHostTotalDeferments=svHostTotalDeferments, viaConnEntry=viaConnEntry, rcpTcpNullRecvs=rcpTcpNullRecvs, slVNumber=slVNumber, obsSmbWriteRaws=obsSmbWriteRaws, tv2Read128KCalls=tv2Read128KCalls, obsSmbCreateDirs=obsSmbCreateDirs, overTempRepaired=overTempRepaired, ifLowInUnknownProtos=ifLowInUnknownProtos, tv3pCreates=tv3pCreates, trcNonIdemNotDoneHits=trcNonIdemNotDoneHits, netcache=netcache, tv2Read64KCalls=tv2Read64KCalls, pclNfsV3MknodPerCent=pclNfsV3MknodPerCent, nfsCacheLowHitRequests=nfsCacheLowHitRequests, v3cSetattrs=v3cSetattrs, dafsAnonymousAuthentication=dafsAnonymousAuthentication, tv2ccSymlinks=tv2ccSymlinks, outOfDateDiskType=outOfDateDiskType, slVMonth=slVMonth, chassisPSUwrongInput=chassisPSUwrongInput, chassisPowerSupplyRemoved=chassisPowerSupplyRemoved, viaConnLocalNetAddress=viaConnLocalNetAddress, v2ccLinks=v2ccLinks, psetMemberIndex=psetMemberIndex, svSystemTotalSecondaryDeferments=svSystemTotalSecondaryDeferments, pclNfsV2Renames=pclNfsV2Renames, cifsPercent=cifsPercent, pclNfsV3WritePerCent=pclNfsV3WritePerCent, v3pRenames=v3pRenames, raidPTotalBlocks=raidPTotalBlocks, ncDnsRequestsReceived=ncDnsRequestsReceived, v3WriteStats=v3WriteStats, cifsNDomainControllers=cifsNDomainControllers, smbTransactCreatePct=smbTransactCreatePct, dfFileSys=dfFileSys, dafsVerifys=dafsVerifys, curNfs=curNfs, ndmp=ndmp, vfSpTable=vfSpTable, smbNTCreateAndXs=smbNTCreateAndXs, appEmergency=appEmergency, chassisPowerSupplyOff=chassisPowerSupplyOff, tv3ccFsstats=tv3ccFsstats, dafsCalls=dafsCalls, svHostIndex=svHostIndex, diskReconstructingCount=diskReconstructingCount, v2ccLookups=v2ccLookups, raidVIndex=raidVIndex, ncHttpLowTotalMissRespTimes=ncHttpLowTotalMissRespTimes, outOfDateDiskVendor=outOfDateDiskVendor, autosupportSuccessfulSends=autosupportSuccessfulSends, ncHttpAvgHitRespTime=ncHttpAvgHitRespTime, nfsCacheBytesToClients=nfsCacheBytesToClients, slQSnapshotName=slQSnapshotName, cifsMaxShares=cifsMaxShares, cfPartnerStatus=cfPartnerStatus, vfilerIsLicensed=vfilerIsLicensed, tv3cReadlinks=tv3cReadlinks, pclNfsV3LinkPerCent=pclNfsV3LinkPerCent, enclVoltSensorsOverVoltFail=enclVoltSensorsOverVoltFail, misc64NetRcvdBytes=misc64NetRcvdBytes, v3cAccesss=v3cAccesss, qrV264KBytesUsed=qrV264KBytesUsed, qtreeTable=qtreeTable, cpuIdleTimePerCent=cpuIdleTimePerCent, smbNTTransactSetSecDescPct=smbNTTransactSetSecDescPct, domainControllerDisconnect=domainControllerDisconnect, fanRepaired=fanRepaired, volIndex=volIndex, nfsCacheStats=nfsCacheStats, qrVPathName=qrVPathName, slVMinutes=slVMinutes, raidVPlexNumber=raidVPlexNumber, plexStatus=plexStatus, ncStreamingRtspWMBytesToServers=ncStreamingRtspWMBytesToServers, v3cNulls=v3cNulls, ncAdminPort=ncAdminPort, ncHttpReqRate=ncHttpReqRate, obsSmbWriteAndUnlocks=obsSmbWriteAndUnlocks, ncHttpTotalRespTime=ncHttpTotalRespTime, raidPScsiAdapter=raidPScsiAdapter, tv2Write64KCalls=tv2Write64KCalls, rcTcpNonIdemNotDoneHits=rcTcpNonIdemNotDoneHits, tnfsServ=tnfsServ, obsSmbCreates=obsSmbCreates, obsSmbWritePrintFiles=obsSmbWritePrintFiles, nfsCacheHighBytesFromClients=nfsCacheHighBytesFromClients, v2ccWrites=v2ccWrites, pclNfsV2LinkPerCent=pclNfsV2LinkPerCent, viaMaxRegisterRegions=viaMaxRegisterRegions, volumeRestrictedRootConflict=volumeRestrictedRootConflict, pclNfsV3Read512Calls=pclNfsV3Read512Calls, viaCurrCQ=viaCurrCQ, v3pSymlinks=v3pSymlinks, pclNfsV2Read4KCalls=pclNfsV2Read4KCalls, smbDeleteDirPct=smbDeleteDirPct, vscanServerUpgrade=vscanServerUpgrade, smbFindClose2Pct=smbFindClose2Pct, snapmirrorLastTransTimeSeconds=snapmirrorLastTransTimeSeconds, ndmpBackupSuccesses=ndmpBackupSuccesses, cpuNonCPInterrupts=cpuNonCPInterrupts, snapmirrorIsLicensed=snapmirrorIsLicensed, qrKBytesLimit=qrKBytesLimit, vfSpName=vfSpName, tv3Write4KCalls=tv3Write4KCalls, volumeRestricted=volumeRestricted, upsBatteryWarning=upsBatteryWarning, v3ccReaddirs=v3ccReaddirs, tv2Write16KCalls=tv2Write16KCalls, aggrStatus=aggrStatus, enclProductLogicalID=enclProductLogicalID, enclPowerSuppliesPresent=enclPowerSuppliesPresent, if64OutUcastPkts=if64OutUcastPkts, cpuOk=cpuOk, rpcBadLens=rpcBadLens, ftpdCurrentConns=ftpdCurrentConns, misc64DiskReadBytes=misc64DiskReadBytes, v2cReaddirs=v2cReaddirs, tnfsrwStats=tnfsrwStats, cifsMaxTrees=cifsMaxTrees, tv2pNulls=tv2pNulls, trcTcpNonIdemDoneHits=trcTcpNonIdemDoneHits, qrV2PathName=qrV2PathName, miscGlobalStatusMessage=miscGlobalStatusMessage, svOn=svOn, dafsBcBatchCompletions=dafsBcBatchCompletions, pclNfsV3Writes=pclNfsV3Writes, smbEchoPct=smbEchoPct, svSystemActiveDstNumber=svSystemActiveDstNumber, slVVolumeName=slVVolumeName, enclVoltSensorsUnderVoltWarnThr=enclVoltSensorsUnderVoltWarnThr, pclNfsV3RenamePerCent=pclNfsV3RenamePerCent, fcpTargetName=fcpTargetName, tv2cpRoots=tv2cpRoots, raidPTotalMb=raidPTotalMb, netappClusteredFiler=netappClusteredFiler, dafsMaxDisconnectedSessions=dafsMaxDisconnectedSessions, obsSmbProcessExitPct=obsSmbProcessExitPct, v3ccRmdirs=v3ccRmdirs, dafsMaxRequestsServer=dafsMaxRequestsServer, lunLowOtherOps=lunLowOtherOps, compressHighSavedKBytes=compressHighSavedKBytes, viaMaxPTags=viaMaxPTags, raidPIndex=raidPIndex, diskMultipathNoTakeover=diskMultipathNoTakeover, miscLowNetRcvdBytes=miscLowNetRcvdBytes, cpuSwitchInvocations=cpuSwitchInvocations, v2cMkdirs=v2cMkdirs, qtreeVolumeName=qtreeVolumeName, smbDeleteDirs=smbDeleteDirs, autosupportStatus=autosupportStatus, netifIndex=netifIndex, raidPDiskPort=raidPDiskPort, enclCurSensorsPresent=enclCurSensorsPresent, v2ccWrcaches=v2ccWrcaches, cpuUpTime=cpuUpTime, blocks=blocks, qtreeVolume=qtreeVolume, smbTrans2QueryFSInfoPct=smbTrans2QueryFSInfoPct, v2cReadlinks=v2cReadlinks, lunName=lunName, slVEntry=slVEntry, initiatorGroupName=initiatorGroupName, v3cpFsinfos=v3cpFsinfos, v3cReaddirs=v3cReaddirs, ncFtp=ncFtp, initiatorGroupMemberNameIndex=initiatorGroupMemberNameIndex, ncGrmServerIsLicensed=ncGrmServerIsLicensed, viaNicAttributes=viaNicAttributes, viaConnectTimeOut=viaConnectTimeOut, tv3ccCreates=tv3ccCreates, targetAdapterName=targetAdapterName, v3Read64KCalls=v3Read64KCalls, nfsServBadCalls=nfsServBadCalls, rcUdpDelayHits=rcUdpDelayHits, ncHttpAvgMissRespTime=ncHttpAvgMissRespTime, psetTable=psetTable, ncHttpIsEnabled=ncHttpIsEnabled, ncHttpBytesFromServers=ncHttpBytesFromServers, cifsStats=cifsStats, dafsLocks=dafsLocks, pclNfsV3ReaddirPlusPerCent=pclNfsV3ReaddirPlusPerCent, ncStreamingLiveBytesFromServers=ncStreamingLiveBytesFromServers, enclTempSensorsOverTempFailThr=enclTempSensorsOverTempFailThr, v3cpGetattrs=v3cpGetattrs, viaConnectRequest=viaConnectRequest, outOfDateDiskPool=outOfDateDiskPool, lunHighReadBytes=lunHighReadBytes, misc64HttpOps=misc64HttpOps, v3ccNulls=v3ccNulls, tnfsV3=tnfsV3, vscanConfigurationChange=vscanConfigurationChange, smbNTTransactSetSecDescs=smbNTTransactSetSecDescs, ncStreamingAccelKbytesToClient=ncStreamingAccelKbytesToClient, fcpLowReadBytes=fcpLowReadBytes, v2Percent=v2Percent, chassisFanRemoved=chassisFanRemoved, ncGrmServerOptions=ncGrmServerOptions, tv3cpCommits=tv3cpCommits, ifLowOutUcastPkts=ifLowOutUcastPkts, volNumber=volNumber, v2cRenames=v2cRenames, cifs=cifs, tv2cWrites=tv2cWrites, qrV2SoftFileLimit=qrV2SoftFileLimit, svSecondaryIsLicensed=svSecondaryIsLicensed, rcUdpNonIdemDoneHits=rcUdpNonIdemDoneHits, trcUdpNonIdemDoneHits=trcUdpNonIdemDoneHits, tv3Read32KCalls=tv3Read32KCalls, tv2ccNulls=tv2ccNulls, ftpd=ftpd, iscsi64WriteBytes=iscsi64WriteBytes, tv2pReads=tv2pReads, enclTempSensorsUnderTempWarn=enclTempSensorsUnderTempWarn, dafsNicTable=dafsNicTable, ncStreamingMmsUltraIsLicensed=ncStreamingMmsUltraIsLicensed, enclElectronicsMaximum=enclElectronicsMaximum, viaOutRDMAWriteBytes=viaOutRDMAWriteBytes, diskTotalCount=diskTotalCount, vfProEntry=vfProEntry, qrV264KBytesLimit=qrV264KBytesLimit, svIndex=svIndex, ncStreamingMmsIsEnabled=ncStreamingMmsIsEnabled, pclNfsV3PathconfPerCent=pclNfsV3PathconfPerCent, v2Read16KCalls=v2Read16KCalls, viaCurrConnectWaitPending=viaCurrConnectWaitPending, cifsSymlinkCycleProtEnabled=cifsSymlinkCycleProtEnabled, replyCache=replyCache, nfsCache64BytesToClients=nfsCache64BytesToClients, ncStreamingOndemandBWSavings=ncStreamingOndemandBWSavings, ncDnsCacheHits=ncDnsCacheHits, smbTrans2QueryFSInfos=smbTrans2QueryFSInfos, tv2pWrcaches=tv2pWrcaches, ncHttpAccelIndex=ncHttpAccelIndex, dafsGetRootHandles=dafsGetRootHandles, vfStopped=vfStopped)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", pclEntry=pclEntry, lunShareStatus=lunShareStatus, trcUdpNonIdemNotDoneHits=trcUdpNonIdemNotDoneHits, ncNntpCliConns=ncNntpCliConns, lunHighOtherOps=lunHighOtherOps, ncHttpAvgRespTime=ncHttpAvgRespTime, nfsCacheLowBytesToServers=nfsCacheLowBytesToServers, cifsSecurityModel=cifsSecurityModel, qrV264KBytesSoftLimit=qrV264KBytesSoftLimit, df64AvailKBytes=df64AvailKBytes, remotesystemMgmtTest=remotesystemMgmtTest, pclNfsV3FsstatPerCent=pclNfsV3FsstatPerCent, smbDeletes=smbDeletes, enclNumberDiskBays=enclNumberDiskBays, qrVFilesUsed=qrVFilesUsed, snapmirrorActiveDstNumber=snapmirrorActiveDstNumber, outOfDateDiskDiskPort=outOfDateDiskDiskPort, nfsIsLicensed=nfsIsLicensed, v2cpMkdirs=v2cpMkdirs, nfsCacheEjectRequests=nfsCacheEjectRequests, obsSmbReadRawPct=obsSmbReadRawPct, errorTrap=errorTrap, ncStreamingOBTClients=ncStreamingOBTClients, v2Write16KCalls=v2Write16KCalls, dafsCommits=dafsCommits, ifLowInOctets=ifLowInOctets, v3pMknods=v3pMknods, trcUdpDelayHits=trcUdpDelayHits, v2ccReadlinks=v2ccReadlinks, volAggrName=volAggrName, storage=storage, tv3cReaddirPluss=tv3cReaddirPluss, tv2Write32KCalls=tv2Write32KCalls, pclNfsV3Commits=pclNfsV3Commits, cifsStatus=cifsStatus, ncIsLicensed=ncIsLicensed, svState=svState, ncStreamingActiveCliConns=ncStreamingActiveCliConns, tv2cRmdirs=tv2cRmdirs, aggrOptions=aggrOptions, obsSmbUnlockByteRanges=obsSmbUnlockByteRanges, pclNfsV3Pathconfs=pclNfsV3Pathconfs, cpuBusyTime=cpuBusyTime, otherDiskSecondaryDiskName=otherDiskSecondaryDiskName, treplyCache=treplyCache, lunCloneSplitComplete=lunCloneSplitComplete, trcUdpInProgressHits=trcUdpInProgressHits, cifsNbtWaits=cifsNbtWaits, enclTempSensorsCurrentTemp=enclTempSensorsCurrentTemp, ncNntpBytesToClients=ncNntpBytesToClients, dafsReadInlines=dafsReadInlines, snapmirrorLastTransMBs=snapmirrorLastTransMBs, v3cSymlinks=v3cSymlinks, compress64SavedKBytes=compress64SavedKBytes, nfsV3=nfsV3, qrV264KBytesThreshold=qrV264KBytesThreshold, aggrTable=aggrTable, tv2cWrcaches=tv2cWrcaches, dafsSessionTable=dafsSessionTable, tv3cpGetattrs=tv3cpGetattrs, df64SisSharedKBytes=df64SisSharedKBytes, tv3ccFsinfos=tv3ccFsinfos, fsStatus=fsStatus, cifsOpLkWaiterTimedOuts=cifsOpLkWaiterTimedOuts, v3Write128KCalls=v3Write128KCalls, raidPDiskNumber=raidPDiskNumber, ifHighOutUcastPkts=ifHighOutUcastPkts, viaMaxCQEntries=viaMaxCQEntries, dafsNicNumRequestDemons=dafsNicNumRequestDemons, lunCloneSplitStart=lunCloneSplitStart, raidIndex=raidIndex, tv2cpMkdirs=tv2cpMkdirs, dfMirrorStatus=dfMirrorStatus, cifsTimeToShutdown=cifsTimeToShutdown, v3ccPathconfs=v3ccPathconfs, ncHttpAccelKbytesFromClient=ncHttpAccelKbytesFromClient, if64OutDiscards=if64OutDiscards, ncHttpTotalHitRespTime=ncHttpTotalHitRespTime, pclNfsV2NullPerCent=pclNfsV2NullPerCent, raidVPlexGroup=raidVPlexGroup, tnfsServBadCalls=tnfsServBadCalls, outOfDateDiskIndex=outOfDateDiskIndex, diskSummary=diskSummary, qrV2Tree=qrV2Tree, v2ccCreates=v2ccCreates, pclNfsV2Write32KCalls=pclNfsV2Write32KCalls, spareSecondaryDiskPort=spareSecondaryDiskPort, trpcNullRecvs=trpcNullRecvs, dafsExportTable=dafsExportTable, smbCreateTemporaries=smbCreateTemporaries, lunStatsResetTime=lunStatsResetTime, ifHighInOctets=ifHighInOctets, pclNfsV2RootPerCent=pclNfsV2RootPerCent, tv2pCreates=tv2pCreates, ndmpTapeActive=ndmpTapeActive, ncHttpObjHitRateLast1Min=ncHttpObjHitRateLast1Min, v3ccFsinfos=v3ccFsinfos, shelfFault=shelfFault, qrVTable=qrVTable, obsSmbUnlockByteRangePct=obsSmbUnlockByteRangePct, pclNfsV3Read16KCalls=pclNfsV3Read16KCalls, productVendor=productVendor, miscNetRcvdKB=miscNetRcvdKB, nfsCacheLowTotalRequests=nfsCacheLowTotalRequests, plexOffline=plexOffline, globalStatusOk=globalStatusOk, dafs=dafs, smbNegProts=smbNegProts, tv3cpReaddirs=tv3cpReaddirs, svSchedSnapshot=svSchedSnapshot, dfLowSisSavedKBytes=dfLowSisSavedKBytes, qrV2FilesUsed=qrV2FilesUsed, portState=portState, trcUdpMisses=trcUdpMisses, ncStreamingTotalRequests=ncStreamingTotalRequests, viaConnSentMessages=viaConnSentMessages, ncHttpServConns=ncHttpServConns, v2pLinks=v2pLinks, qrV2FileLimit=qrV2FileLimit, v2Write1KCalls=v2Write1KCalls, obsSmbTreeConnects=obsSmbTreeConnects, ndmpRestoreSuccesses=ndmpRestoreSuccesses, volumeStateChanged=volumeStateChanged, fcp64Ops=fcp64Ops, autosupportSendError=autosupportSendError, nfsOptions=nfsOptions, v3cReadlinks=v3cReadlinks, svDst=svDst, rcMisses=rcMisses, dafsNverifys=dafsNverifys, cifsMaxConnections=cifsMaxConnections, enclIndex=enclIndex, v2cpStatfss=v2cpStatfss, otherDiskType=otherDiskType, ncStreamingRealBytesToServers=ncStreamingRealBytesToServers, hbaOfflineInformation=hbaOfflineInformation, globalStatusCritical=globalStatusCritical, obsSmbSearchPct=obsSmbSearchPct, v3Write512Calls=v3Write512Calls, tv2cReads=tv2cReads, pclNfsV2GetattrPerCent=pclNfsV2GetattrPerCent, tv3cpMkdirs=tv3cpMkdirs, smbTreeConnectAndXPct=smbTreeConnectAndXPct, snapmirrorTotalTransMBs=snapmirrorTotalTransMBs, lunEntry=lunEntry, overTemp=overTemp, snapmirrorConnType=snapmirrorConnType, tv3cSetattrs=tv3cSetattrs, eccMasked=eccMasked, trcDelayHits=trcDelayHits, smbTreeDisconnects=smbTreeDisconnects, if64InUnknownProtos=if64InUnknownProtos, v2Write512Calls=v2Write512Calls, ncStreamingQuickTimeBWSavings=ncStreamingQuickTimeBWSavings, v2cWrites=v2cWrites, autosupportStatusMessage=autosupportStatusMessage, pclNfsV2Links=pclNfsV2Links, tv3WriteStats=tv3WriteStats, volState=volState, ncHttpMissRequests=ncHttpMissRequests, autosupport=autosupport, outOfDateDiskFirmwareRevision=outOfDateDiskFirmwareRevision, smbTrans2GetDFSReferrals=smbTrans2GetDFSReferrals, switchLowPacketsRejected=switchLowPacketsRejected, dfKBytesTotal=dfKBytesTotal, takeoverinfo=takeoverinfo, qrVTree=qrVTree, v2pReads=v2pReads, miscLowNfsOps=miscLowNfsOps, dafsSessionNumCredentials=dafsSessionNumCredentials, outOfDateDiskRPM=outOfDateDiskRPM, enclTempSensorsOverTempWarnThr=enclTempSensorsOverTempWarnThr, cifsDomainName=cifsDomainName, raidPBay=raidPBay, dfLowSisSharedKBytes=dfLowSisSharedKBytes, cifsCopyToAligns=cifsCopyToAligns, slVTable=slVTable, v2pRmdirs=v2pRmdirs, ncGrmAgentIsLicensed=ncGrmAgentIsLicensed, raidVCompletionPerCent=raidVCompletionPerCent, vfIpTable=vfIpTable, connectedInitiatorIsid=connectedInitiatorIsid, tv2cSymlinks=tv2cSymlinks, dhmNoticePFAEvent=dhmNoticePFAEvent, lun=lun, ncFtpBWSavings=ncFtpBWSavings, misc64TapeWriteBytes=misc64TapeWriteBytes, alfFileNearlyFull=alfFileNearlyFull, ncStreamingOBFServers=ncStreamingOBFServers, ifHighInUnknownProtos=ifHighInUnknownProtos, df64SisSavedKBytes=df64SisSavedKBytes, smbNTCancelOtherPct=smbNTCancelOtherPct, snapmirrorConnIndex=snapmirrorConnIndex, cpuInterrupts=cpuInterrupts, if64OutErrors=if64OutErrors, smbTrans2FindFirst2Pct=smbTrans2FindFirst2Pct, qvStateInitPercent=qvStateInitPercent, ndmpRestoreActive=ndmpRestoreActive, tv2cpLookups=tv2cpLookups, aggrFlexvollist=aggrFlexvollist, if64InErrors=if64InErrors, amTable=amTable, dafsAppendInlines=dafsAppendInlines, snapmirrorConnName=snapmirrorConnName, enclVoltSensorsOverVoltWarn=enclVoltSensorsOverVoltWarn, dafsExportEnabled=dafsExportEnabled, viaCreated=viaCreated, pclNfsV3RemovePerCent=pclNfsV3RemovePerCent, obsSmbReadMPXPct=obsSmbReadMPXPct, ncNntpProxyRequests=ncNntpProxyRequests, v3pCommits=v3pCommits, viaConnectWait=viaConnectWait, viaName=viaName, v3Read16KCalls=v3Read16KCalls, lunTable=lunTable, v2CachedPerCent=v2CachedPerCent, rpcUdpBadLens=rpcUdpBadLens, smbLogoffAndXs=smbLogoffAndXs, tv3Read1KCalls=tv3Read1KCalls, obsSmbSetInfos=obsSmbSetInfos, dafsSessionMaxResponseSize=dafsSessionMaxResponseSize, v3cpPathconfs=v3cpPathconfs, snapmirrorMirrorTimestamp=snapmirrorMirrorTimestamp, otherDiskStatus=otherDiskStatus, v3CachedCalls=v3CachedCalls, ncStreamingLiveBytesToClients=ncStreamingLiveBytesToClients, tv2cGetattrs=tv2cGetattrs, nfsCacheBytesToServers=nfsCacheBytesToServers, smbTrans2QueryFileInfos=smbTrans2QueryFileInfos, otherDiskEntry=otherDiskEntry, chassisPowerSuppliesOk=chassisPowerSuppliesOk, tv2Write2KCalls=tv2Write2KCalls, raidPGroup=raidPGroup, outOfDateDiskDiskId=outOfDateDiskDiskId, ncHttpObjHitRateLast5Min=ncHttpObjHitRateLast5Min, volumeRemoteRestoreBegin=volumeRemoteRestoreBegin, tv2Read512Calls=tv2Read512Calls, vfiler=vfiler, obsSmbWriteAndClosePct=obsSmbWriteAndClosePct, compressPercentSaved=compressPercentSaved, v2cpGetattrs=v2cpGetattrs, lunMapEntry=lunMapEntry, tv2cpWrcaches=tv2cpWrcaches, viaCurrError=viaCurrError, pclNfsV2ReadlinkPerCent=pclNfsV2ReadlinkPerCent, sis64LastOpSize=sis64LastOpSize, otherDiskTotalBlocks=otherDiskTotalBlocks, ncHttpHighTotalMissRespTimes=ncHttpHighTotalMissRespTimes, dafsInBytes=dafsInBytes, enclVoltSensorsUnderVoltFail=enclVoltSensorsUnderVoltFail, slEntry=slEntry, ncStreamingOBFClients=ncStreamingOBFClients, viaCurrRegisterBytes=viaCurrRegisterBytes, tv2Write1KCalls=tv2Write1KCalls)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", tv3pFsinfos=tv3pFsinfos, raidPDiskFirmwareRevision=raidPDiskFirmwareRevision, otherDiskBay=otherDiskBay, grmMonitorToggle=grmMonitorToggle, productApiUrl=productApiUrl, volumeRestrictedByMirrorBigIo=volumeRestrictedByMirrorBigIo, ncNntpBytesToServers=ncNntpBytesToServers, v3cpSetattrs=v3cpSetattrs, dfPerCentKBytesCapacity=dfPerCentKBytesCapacity, volumeCloneCreate=volumeCloneCreate, dfKBytesUsed=dfKBytesUsed, slQIndex=slQIndex, raidVTotalMb=raidVTotalMb, pclNfsV3LookupPerCent=pclNfsV3LookupPerCent, trpcBadLens=trpcBadLens, cpFromFlushOps=cpFromFlushOps, v3cpReads=v3cpReads, viaConnLocalEnableRdmaWrite=viaConnLocalEnableRdmaWrite, smbNTTransactQuerySecDescPct=smbNTTransactQuerySecDescPct, tv2Write8KCalls=tv2Write8KCalls, rcTcpDelayHits=rcTcpDelayHits, pclNfsV3Read4KCalls=pclNfsV3Read4KCalls, enclElectronicsFailed=enclElectronicsFailed, lunMapInitiatorGroupIndex=lunMapInitiatorGroupIndex, dfMaxFilesAvail=dfMaxFilesAvail, v3cpRemoves=v3cpRemoves, dafsSessionNumRequests=dafsSessionNumRequests, initiatorGroupMemberTable=initiatorGroupMemberTable, tv2Read2KCalls=tv2Read2KCalls, qrVKBytesUsed=qrVKBytesUsed, cifsNOpenFiles=cifsNOpenFiles, miscHighNetRcvdBytes=miscHighNetRcvdBytes, ncIcapOptions=ncIcapOptions, dafsLinks=dafsLinks, tv2ccWrites=tv2ccWrites, dfIndex=dfIndex, snapmirrorSyncFailed=snapmirrorSyncFailed, nfsCacheHitRequests=nfsCacheHitRequests, snapmirrorSyncToAsync=snapmirrorSyncToAsync, v2Write64KCalls=v2Write64KCalls, viaErrors=viaErrors, lun64Errors=lun64Errors, slDay=slDay, pclNfsV2Reads=pclNfsV2Reads, tv2ccStatfss=tv2ccStatfss, pclNfsV3CreatePerCent=pclNfsV3CreatePerCent, viaErrRdmarProt=viaErrRdmarProt, ncOptions=ncOptions, misc=misc, enclCurSensorsOverCurWarn=enclCurSensorsOverCurWarn, psetType=psetType, miscHighNetSentBytes=miscHighNetSentBytes, miscLowDiskWriteBytes=miscLowDiskWriteBytes, pclNfsV3Links=pclNfsV3Links, netappSupportConsole=netappSupportConsole, chassisPSUsMismatch=chassisPSUsMismatch, smbNTTransactNotifyChgs=smbNTTransactNotifyChgs, snapmirrorConnSrc2=snapmirrorConnSrc2, misc64DiskWriteBytes=misc64DiskWriteBytes, tv3Read128KCalls=tv3Read128KCalls, pclNfsV2RemovePerCent=pclNfsV2RemovePerCent, pclNfsV2Write4KCalls=pclNfsV2Write4KCalls, cifsMisc=cifsMisc, vfFilers=vfFilers, volumesStillFull=volumesStillFull, fsMaxUsedReservedPerCent=fsMaxUsedReservedPerCent, remoteSystemMgmtNotification=remoteSystemMgmtNotification, lun64ReadOps=lun64ReadOps, v3cpRenames=v3cpRenames, vfStoragePaths=vfStoragePaths, pclNfsV3ReadPerCent=pclNfsV3ReadPerCent, outOfDateDiskSecondaryDiskPort=outOfDateDiskSecondaryDiskPort, scsitgtPartnerPathMisconfigured=scsitgtPartnerPathMisconfigured, v2cpSymlinks=v2cpSymlinks, pclNfsV2Read1KCalls=pclNfsV2Read1KCalls, qvStateEntry=qvStateEntry, fcpTargetPN=fcpTargetPN, waflDirNearlyFull=waflDirNearlyFull, cifsPerClientStatsEnabled=cifsPerClientStatsEnabled, slIndex=slIndex, snapmirrorState=snapmirrorState, smbTrans2SetFileInfoPct=smbTrans2SetFileInfoPct, vfIpIndex=vfIpIndex, dfKBytesAvail=dfKBytesAvail, volCloneSnap=volCloneSnap, cifsHostName=cifsHostName, fabricTable=fabricTable, volumeInconsistentUmount=volumeInconsistentUmount, diskScrubbingCount=diskScrubbingCount, obsSmbWritePrintFilePct=obsSmbWritePrintFilePct, amPort=amPort, tv2cpStatfss=tv2cpStatfss, v2cpWrites=v2cpWrites, cifsCancelLocks=cifsCancelLocks, cifsMaxFiles=cifsMaxFiles, v2cLinks=v2cLinks, tv2ccSetattrs=tv2ccSetattrs, viaConnLocalDescriminator=viaConnLocalDescriminator, slQQtreeContent=slQQtreeContent, ncNntpTotalRequests=ncNntpTotalRequests, cifsNShares=cifsNShares, netifNumber=netifNumber, ncHttpCliConns=ncHttpCliConns, tv3cRemoves=tv3cRemoves, obsSmbWriteAndCloses=obsSmbWriteAndCloses, tv2Write4KCalls=tv2Write4KCalls, sisIndex=sisIndex, appInfo=appInfo, v2pSymlinks=v2pSymlinks, spareEntry=spareEntry, svTotalTransMBs=svTotalTransMBs, ifLowOutDiscards=ifLowOutDiscards, qrV2SoftQuotaUnlimited=qrV2SoftQuotaUnlimited, ncHttpBWSavingsLast1Min=ncHttpBWSavingsLast1Min, v3Write2KCalls=v3Write2KCalls, tv2ccReads=tv2ccReads, ncFtpObjHitrate=ncFtpObjHitrate, spareDiskRPM=spareDiskRPM, raidStatus=raidStatus, tv2ccLookups=tv2ccLookups, ifHighInNUcastPkts=ifHighInNUcastPkts, portIndex=portIndex, tv3pMkdirs=tv3pMkdirs, smbCheckDirPct=smbCheckDirPct, pclNfsCalls=pclNfsCalls, dbgTrap=dbgTrap, enclFansFailed=enclFansFailed, viaConnected=viaConnected, spareNumber=spareNumber, otherDiskIndex=otherDiskIndex, obsSmbWritePct=obsSmbWritePct, cifsOpLkEarlyNFSs=cifsOpLkEarlyNFSs, tv3cpRmdirs=tv3cpRmdirs, ftpdMaxConnNotice=ftpdMaxConnNotice, qvStateStat=qvStateStat, dafsServerEnabled=dafsServerEnabled, lunSerialNumber=lunSerialNumber, smbGetPrintQueues=smbGetPrintQueues, cifsSymlinksEnabled=cifsSymlinksEnabled, dfMountedOn=dfMountedOn, dafsLockus=dafsLockus, v2cNulls=v2cNulls, smbCloses=smbCloses, dafsCreates=dafsCreates, vifAllLinksFailed=vifAllLinksFailed, chassisPowerSupplyOk=chassisPowerSupplyOk, cf=cf, tv3pReads=tv3pReads, backup=backup, ncStreamingOptions=ncStreamingOptions, fcpCfMode=fcpCfMode, smbNTTransactIoctls=smbNTTransactIoctls, snapvaultStatusTable=snapvaultStatusTable, ncNntpRespTimePerByte=ncNntpRespTimePerByte, cifsInfo=cifsInfo, dmpIndex=dmpIndex, dafsOutBytes=dafsOutBytes, v3pReaddirs=v3pReaddirs, pclNfsV3FsinfoPerCent=pclNfsV3FsinfoPerCent, snapmirrorStatus=snapmirrorStatus, pclNfsV2Rmdirs=pclNfsV2Rmdirs, miscLowTapeWriteBytes=miscLowTapeWriteBytes, snapmirrorTotalFailures=snapmirrorTotalFailures, initiatorListTable=initiatorListTable, dafsRenames=dafsRenames, sisTable=sisTable, snapshot=snapshot, tv2pLinks=tv2pLinks, diskMultipathOneSwitch=diskMultipathOneSwitch, dfMaxFilesUsed=dfMaxFilesUsed, enclTempSensorsUnderTempFailThr=enclTempSensorsUnderTempFailThr, viaMaxVI=viaMaxVI, fcpTargetTable=fcpTargetTable, pclNfsV3Write128KCalls=pclNfsV3Write128KCalls, if64InDiscards=if64InDiscards, autosupportSent=autosupportSent, tv3ccMkdirs=tv3ccMkdirs, pclNfsV3Setattrs=pclNfsV3Setattrs, smbNTCancelOthers=smbNTCancelOthers, obsSmbOpenAndXs=obsSmbOpenAndXs, raidPSecondaryDiskPort=raidPSecondaryDiskPort, raidDiskId=raidDiskId, diskSpareCount=diskSpareCount, ifHighOutOctets=ifHighOutOctets, dafsAppendDirects=dafsAppendDirects, tv3Read4KCalls=tv3Read4KCalls, pclNfsV3Write16KCalls=pclNfsV3Write16KCalls, raidVDiskPool=raidVDiskPool, cifsStatsExhaustMemCtrlBlk=cifsStatsExhaustMemCtrlBlk, pclNfsV3Read32KCalls=pclNfsV3Read32KCalls, tv3cMknods=tv3cMknods, qrType=qrType, lunHighReadOps=lunHighReadOps, tv3ccRemoves=tv3ccRemoves, ncStreamingRtspWMBWSavings=ncStreamingRtspWMBWSavings, viaNicIndex=viaNicIndex, tv2Read16KCalls=tv2Read16KCalls, pclNfsV2WritePerCent=pclNfsV2WritePerCent, cifsWinsServers=cifsWinsServers, cifsPDCUpcalls=cifsPDCUpcalls, ifHighInDiscards=ifHighInDiscards, miscHighDiskWriteBytes=miscHighDiskWriteBytes, lun64ReadBytes=lun64ReadBytes, raidPDiskCopyDestDiskName=raidPDiskCopyDestDiskName, ifLowInErrors=ifLowInErrors, tv3Write1KCalls=tv3Write1KCalls, viaConnectionListenPort=viaConnectionListenPort, cifsIsWinsEnabled=cifsIsWinsEnabled, pclNfsV2Lookups=pclNfsV2Lookups, tv2cpReadlinks=tv2cpReadlinks, snapmirrorScheduleDesc=snapmirrorScheduleDesc, outOfDateDiskSecondaryDiskName=outOfDateDiskSecondaryDiskName, pclNfsV2Setattrs=pclNfsV2Setattrs, enclDisksPresent=enclDisksPresent, chassisPowerSupplyFailed=chassisPowerSupplyFailed, tv2pWrites=tv2pWrites, tv2ccRemoves=tv2ccRemoves, v3cpCreates=v3cpCreates, df64TotalKBytes=df64TotalKBytes, v2pWrites=v2pWrites, tv2cSetattrs=tv2cSetattrs, tv3pMknods=tv3pMknods, ncStreamingMmsBWSavings=ncStreamingMmsBWSavings, pclNfsV3Getattrs=pclNfsV3Getattrs, tv2pLookups=tv2pLookups, tv3Read16KCalls=tv3Read16KCalls, shelfIFModuleInfo=shelfIFModuleInfo, viaErrCompProt=viaErrCompProt, dafsNulls=dafsNulls, vfIpSpace=vfIpSpace, viaCurrVI=viaCurrVI, snapmirrorReadBytes=snapmirrorReadBytes, dfMaxFilesPossible=dfMaxFilesPossible, fcp64WriteBytes=fcp64WriteBytes, powerSupplyFanFailxMinShutdown=powerSupplyFanFailxMinShutdown, ncDnsIsEnabled=ncDnsIsEnabled, tv3Write512Calls=tv3Write512Calls, nfsCacheLowBytesToClients=nfsCacheLowBytesToClients, v2Write32KCalls=v2Write32KCalls, switchIndex=switchIndex, ncGrmAgentIsEnabled=ncGrmAgentIsEnabled, cifsOptions=cifsOptions, v2ccSetattrs=v2ccSetattrs, v3cWrites=v3cWrites, ncInfo=ncInfo, smbReadAndXs=smbReadAndXs, tv3ccReads=tv3ccReads, raidPDiskVendor=raidPDiskVendor, ncStreamingRtspWMBytesToClients=ncStreamingRtspWMBytesToClients, v2cpLookups=v2cpLookups, enclTempSensorsPresent=enclTempSensorsPresent, pclNfsV3Write32KCalls=pclNfsV3Write32KCalls, v3Write64KCalls=v3Write64KCalls, nvramBatteryStatus=nvramBatteryStatus)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", volEntry=volEntry, plexIndex=plexIndex, remoteSystemMgmtWarning=remoteSystemMgmtWarning, ncStreamingRealIsLicensed=ncStreamingRealIsLicensed, lunComment=lunComment, maxDirSizeAlert=maxDirSizeAlert, cifsPCGenericUser=cifsPCGenericUser, enclContactState=enclContactState, dfLowTotalKBytes=dfLowTotalKBytes, pclNfsV3NullPerCent=pclNfsV3NullPerCent, switchStatus=switchStatus, cpuCPInterruptPercent=cpuCPInterruptPercent, tv3cAccesss=tv3cAccesss, cifsTotalOps=cifsTotalOps, snapmirrorLastTransType=snapmirrorLastTransType, tv3cpSymlinks=tv3cpSymlinks, obsSmbWriteMPXPct=obsSmbWriteMPXPct, tv2ccReadlinks=tv2ccReadlinks, sisType=sisType, enclEntry=enclEntry, dafsClientConnects=dafsClientConnects, snapAutoDelete=snapAutoDelete, svSrcSnapshotTime=svSrcSnapshotTime, raidPEntry=raidPEntry, pclNfsV3Fsstats=pclNfsV3Fsstats, raidPDiskRPM=raidPDiskRPM, volClone=volClone, smbNTCancelCNPct=smbNTCancelCNPct, dafsSessionClientIdString=dafsSessionClientIdString, ncStreamingRealBytesFromServers=ncStreamingRealBytesFromServers, spareStatus=spareStatus, netappFiler=netappFiler, plexEntry=plexEntry, cifsConnectedUsers=cifsConnectedUsers, ncNntpIsLicensed=ncNntpIsLicensed, v2pCreates=v2pCreates, raidVDiskNumber=raidVDiskNumber, pclIpAddr=pclIpAddr, chassisCPUFanSlow=chassisCPUFanSlow, tv2pReaddirs=tv2pReaddirs, ncStreamingServConns=ncStreamingServConns, cifsReads=cifsReads, snapmirrorDst=snapmirrorDst, dafsPendingRequests=dafsPendingRequests, slVVolume=slVVolume, dfHighSisSavedKBytes=dfHighSisSavedKBytes, writeVerificationFailed=writeVerificationFailed, qrEntry=qrEntry, tv2ccRoots=tv2ccRoots, qrV2Entry=qrV2Entry, fanWarning=fanWarning, v3ccLinks=v3ccLinks, miscCorrectedMachineChecks=miscCorrectedMachineChecks, tv3pGetattrs=tv3pGetattrs, enclProductSerialNo=enclProductSerialNo, trcTcpInProgressHits=trcTcpInProgressHits, snapmirrorScheduledRestoreCount=snapmirrorScheduledRestoreCount, aggrState=aggrState, ncDnsIres=ncDnsIres, dmpStFailures=dmpStFailures, tv3cCreates=tv3cCreates, tv3Read512Calls=tv3Read512Calls, switch64PacketsProcessed=switch64PacketsProcessed, v3ccRenames=v3ccRenames, ncHttpTotalMissRespTime=ncHttpTotalMissRespTime, ncHttpsAccelIndex=ncHttpsAccelIndex, notificationTrap=notificationTrap, nfsCacheHighTotalRequests=nfsCacheHighTotalRequests, raidDiskName=raidDiskName, dump=dump, vfAllowedProtocols=vfAllowedProtocols, snapmirrorStatusTable=snapmirrorStatusTable, snapmirrorFilerTotalDstDeferments=snapmirrorFilerTotalDstDeferments, raidVEntry=raidVEntry, if64InUcastPkts=if64InUcastPkts, ncStreamingMmsBytesToServers=ncStreamingMmsBytesToServers, obsSmbProcessExits=obsSmbProcessExits, tv2Read32KCalls=tv2Read32KCalls, tv2ccReaddirs=tv2ccReaddirs, rstAttempts=rstAttempts, v3cLookups=v3cLookups, ifLowInDiscards=ifLowInDiscards, v2ccGetattrs=v2ccGetattrs, portFabricIndex=portFabricIndex, viaInMsgs=viaInMsgs, tv3Write64KCalls=tv3Write64KCalls, lunMapLogicalUnitNumber=lunMapLogicalUnitNumber, cifsDirOps=cifsDirOps, eccSummary=eccSummary, v3ccSetattrs=v3ccSetattrs, otherDiskFirmwareRevision=otherDiskFirmwareRevision, viaConnSentRdmaWriteMessages=viaConnSentRdmaWriteMessages, spareDiskId=spareDiskId, tv3cRmdirs=tv3cRmdirs, dafsReadlinkDirects=dafsReadlinkDirects, autosupportFailedSends=autosupportFailedSends, cifsOpens=cifsOpens, spareDiskType=spareDiskType, enclVoltSensorsMaximum=enclVoltSensorsMaximum, rcpTcpCalls=rcpTcpCalls, tv3cpPathconfs=tv3cpPathconfs, product=product, lunHighWriteOps=lunHighWriteOps, clusterNodeTakenOver=clusterNodeTakenOver, pclNfsV3Rmdirs=pclNfsV3Rmdirs, viaDisconnect=viaDisconnect, netappModuleId=netappModuleId, qrV2ThresholdUnlimited=qrV2ThresholdUnlimited, obsSmbLockAndReadPct=obsSmbLockAndReadPct, qrVVolume=qrVVolume, pclNfsV3Read64KCalls=pclNfsV3Read64KCalls, v2cpReads=v2cpReads, raidVDiskName=raidVDiskName, amNumber=amNumber, sisLastOpBeginTime=sisLastOpBeginTime, aggrUUID=aggrUUID, tv3cReads=tv3cReads, filesysMaxfilesUsed=filesysMaxfilesUsed, obsSmbCreateNews=obsSmbCreateNews, cifsMbufWaits=cifsMbufWaits, v2cpLinks=v2cpLinks, takeoverAddrs=takeoverAddrs, diskMultipathWarning=diskMultipathWarning, svTotalSuccesses=svTotalSuccesses, dfLowAvailKBytes=dfLowAvailKBytes, cpFromSnapshotOps=cpFromSnapshotOps, raidPShelf=raidPShelf, snapmirrorBackupAborts=snapmirrorBackupAborts, compressIsLicensed=compressIsLicensed, ncFtpCliConns=ncFtpCliConns, tv3CachedCalls=tv3CachedCalls, viaProviderVersion=viaProviderVersion, ndmpBackupFailures=ndmpBackupFailures, rcTcpMisses=rcTcpMisses, rcpTcpBadLens=rcpTcpBadLens, cifsDomainJoined=cifsDomainJoined, ncStreamingBWSavings=ncStreamingBWSavings, tv3ccAccesss=tv3ccAccesss, v3Write8KCalls=v3Write8KCalls, viaConnTable=viaConnTable, smbFlushes=smbFlushes, ncCdOptions=ncCdOptions, ncIsEnabled=ncIsEnabled, tv3pRenames=tv3pRenames, vfFsIndex=vfFsIndex, raidVScsiAdapter=raidVScsiAdapter, v2Write8KCalls=v2Write8KCalls, otherDiskSecondaryDiskPort=otherDiskSecondaryDiskPort, initiatorGroupEntry=initiatorGroupEntry, snapmirrorSchedule=snapmirrorSchedule, dafsSetFencingLists=dafsSetFencingLists, iscsi64ReadBytes=iscsi64ReadBytes, pclNfsV3Reads=pclNfsV3Reads, tv2Read4KCalls=tv2Read4KCalls, qrV2HighKBytesLimit=qrV2HighKBytesLimit, ncHttpOptions=ncHttpOptions, dafsRegisterCreds=dafsRegisterCreds, pclNfsV2WrcachePerCent=pclNfsV2WrcachePerCent, dafsSessionAllowRdmaReadChannel=dafsSessionAllowRdmaReadChannel, tv3ccRenames=tv3ccRenames, slVHour=slVHour, ncHttpHighTotalRespTimes=ncHttpHighTotalRespTimes, diskFailedCount=diskFailedCount, smbTrans2FindFirst2s=smbTrans2FindFirst2s, fabricEntry=fabricEntry, cpuContextSwitches=cpuContextSwitches, qrKBytesUsed=qrKBytesUsed, netifEntry=netifEntry, v3ccGetattrs=v3ccGetattrs, v3cCreates=v3cCreates, tv2ccWrcaches=tv2ccWrcaches, raidVPlexName=raidVPlexName, v2cRemoves=v2cRemoves, aggrIndex=aggrIndex, dafsRemoves=dafsRemoves, v3pPathconfs=v3pPathconfs, otherDiskScsiId=otherDiskScsiId, rcpTcpServXDRCalls=rcpTcpServXDRCalls, ncDnsSuccessfulReverseLookups=ncDnsSuccessfulReverseLookups, productGuiUrl=productGuiUrl, nvram=nvram, tv2cpSymlinks=tv2cpSymlinks, viaCurrConnectPending=viaCurrConnectPending, spareTotalBlocks=spareTotalBlocks, v2Read2KCalls=v2Read2KCalls, qrVKBytesLimit=qrVKBytesLimit, productModel=productModel, pclNfsV3ReaddirPluss=pclNfsV3ReaddirPluss, tv2cpWrites=tv2cpWrites, smbTreeDisconnectAndXPct=smbTreeDisconnectAndXPct, ncHttpObjHitrate=ncHttpObjHitrate, otherDiskSerialNumber=otherDiskSerialNumber, v3Read2KCalls=v3Read2KCalls, obsSmbReadRaws=obsSmbReadRaws, chassisTemperatureWarning=chassisTemperatureWarning, enclPowerSuppliesFailed=enclPowerSuppliesFailed, snapmirrorBackupSuccesses=snapmirrorBackupSuccesses, scsitgtThrottleNotice=scsitgtThrottleNotice, smbGetPrintQueuePct=smbGetPrintQueuePct, enclFansMaximum=enclFansMaximum, vscanConnection=vscanConnection, tv3ccNulls=tv3ccNulls, slQEntry=slQEntry, ncHttpRespTimePerByte=ncHttpRespTimePerByte, ncStreamingHitRequests=ncStreamingHitRequests, obsSmbCreateDirPct=obsSmbCreateDirPct, svSystemActiveSrcNumber=svSystemActiveSrcNumber, switchDomain=switchDomain, ncHttpBWSavingsLast5Min=ncHttpBWSavingsLast5Min, dafsDirectOutBytes=dafsDirectOutBytes, obsSmbOpenAndXPct=obsSmbOpenAndXPct, v3ccAccesss=v3ccAccesss, ncStreamingQTBTClients=ncStreamingQTBTClients, ncCmsOptions=ncCmsOptions, nfsCacheTotalRequests=nfsCacheTotalRequests, viaMaxRegisterBlockBytes=viaMaxRegisterBlockBytes, obsSmbOpens=obsSmbOpens, dafsExportIndex=dafsExportIndex, v3ccCreates=v3ccCreates, ncStreamingMmsBytesFromServers=ncStreamingMmsBytesFromServers, enclTempSensorsUnderTempWarnThr=enclTempSensorsUnderTempWarnThr, obsSmbOpenPct=obsSmbOpenPct, nfsCacheHighBytesFromServers=nfsCacheHighBytesFromServers, snapmirrorSyncOk=snapmirrorSyncOk, smbSessionSetupAndXPct=smbSessionSetupAndXPct, dafsDirectInBytes=dafsDirectInBytes, dafsSessionUseChecksums=dafsSessionUseChecksums, ncRM=ncRM, lun64WriteBytes=lun64WriteBytes, sisLowLastOpSize=sisLowLastOpSize, if64OutOctets=if64OutOctets, v2pWrcaches=v2pWrcaches, dafsDefaultUid=dafsDefaultUid, qrIndex=qrIndex, dfHighAvailKBytes=dfHighAvailKBytes, raidCompletionPerCent=raidCompletionPerCent, vfProTable=vfProTable, ncStreamingActiveServConns=ncStreamingActiveServConns, qrV2LowKBytesLimit=qrV2LowKBytesLimit, rstFailures=rstFailures, amEntry=amEntry, trcTcpDelayHits=trcTcpDelayHits, raidPPlex=raidPPlex, powerSupplyRepaired=powerSupplyRepaired, aggrFSID=aggrFSID, connectedInitiatorNodeName=connectedInitiatorNodeName, dafsOpens=dafsOpens, ncStreamingLiveBWSavings=ncStreamingLiveBWSavings, dafsReaddirInlines=dafsReaddirInlines, smbTrans2SetPathInfos=smbTrans2SetPathInfos, chassisPowerSupplyDegraded=chassisPowerSupplyDegraded, ncDns=ncDns, dafsMaxPendingRequestsServer=dafsMaxPendingRequestsServer, smbTrans2QueryFileInfoPct=smbTrans2QueryFileInfoPct)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", ncHttpTotalRequests=ncHttpTotalRequests, switch64PacketsRejected=switch64PacketsRejected, tv3Write2KCalls=tv3Write2KCalls, chassisPSRemovedxMinShutdown=chassisPSRemovedxMinShutdown, v3cReads=v3cReads, tv2ccRmdirs=tv2ccRmdirs, cifsDupDisconnects=cifsDupDisconnects, fcpTarget=fcpTarget, cifsOplocksEnabled=cifsOplocksEnabled, raidPPlexNumber=raidPPlexNumber, dfEntry=dfEntry, viaMaxRegisterBytes=viaMaxRegisterBytes, pclNfsV2MkdirPerCent=pclNfsV2MkdirPerCent, v3Read4KCalls=v3Read4KCalls, trcTcpNonIdemNotDoneHits=trcTcpNonIdemNotDoneHits, v3pFsstats=v3pFsstats, psetName=psetName, ncLocalConfigChanged=ncLocalConfigChanged, ftpdError=ftpdError, tv2cNulls=tv2cNulls, switchTable=switchTable, pclNfsV2Read512Calls=pclNfsV2Read512Calls, smbSessionSetupAndXs=smbSessionSetupAndXs, raidPUsedBlocks=raidPUsedBlocks, dafsCloses=dafsCloses, smbNTTransactIoctlPct=smbNTTransactIoctlPct, cfInterconnectStatus=cfInterconnectStatus, ncStreamingProxyBytesToClients=ncStreamingProxyBytesToClients, sis=sis, svDrPrimaryIsLicensed=svDrPrimaryIsLicensed, qrV2LowKBytesUsed=qrV2LowKBytesUsed, pclNfsServBadCalls=pclNfsServBadCalls, ncGrmServerIsEnabled=ncGrmServerIsEnabled, trpcBadCalls=trpcBadCalls, miscNetSentKB=miscNetSentKB, v3cMknods=v3cMknods, cifsOpLkNFSWaiteds=cifsOpLkNFSWaiteds, viaNicEntry=viaNicEntry, plexVolName=plexVolName, amMonitorString=amMonitorString, rcUdpMisses=rcUdpMisses, dafsOptions=dafsOptions, ncNntpBytesFromClients=ncNntpBytesFromClients, ncDnsIresIsEnabled=ncDnsIresIsEnabled, pclNfsV2Readdirs=pclNfsV2Readdirs, pclNfsV2Write128KCalls=pclNfsV2Write128KCalls, v2ccRoots=v2ccRoots, ndmpRestoreFailures=ndmpRestoreFailures, v3ccMknods=v3ccMknods, nvramBatteryDischarged=nvramBatteryDischarged, misc64NfsOps=misc64NfsOps, tv3cpAccesss=tv3cpAccesss, dafsExportName=dafsExportName, v3ccWrites=v3ccWrites, smbTrans2SetFileInfos=smbTrans2SetFileInfos, enclElectronicsPresent=enclElectronicsPresent, tv2pRemoves=tv2pRemoves, aggrEntry=aggrEntry, miscNfsOps=miscNfsOps, lunHighErrors=lunHighErrors, tv3ccLinks=tv3ccLinks, v3pLookups=v3pLookups, slQQtree=slQQtree, pclNfsV2ReadPerCent=pclNfsV2ReadPerCent, raidVVol=raidVVol, smbDeletePct=smbDeletePct, dafsDisconnects=dafsDisconnects, svSystemTotalSecondaryFailures=svSystemTotalSecondaryFailures, tv3cpFsinfos=tv3cpFsinfos, pclNfsV2Read2KCalls=pclNfsV2Read2KCalls, smbNTTransactQuerySecDescs=smbNTTransactQuerySecDescs, ncHttpBytesToClients=ncHttpBytesToClients, dfStatus=dfStatus, rpcServXDRCalls=rpcServXDRCalls, slQSource=slQSource, obsSmbReads=obsSmbReads, fcpHighWriteBytes=fcpHighWriteBytes, curDafs=curDafs, v3pRmdirs=v3pRmdirs, v2cpWrcaches=v2cpWrcaches, obsSmbSetInfoPct=obsSmbSetInfoPct, snapmirrorTotalDeferments=snapmirrorTotalDeferments, raidPVol=raidPVol, snapvaultStatusEntry=snapvaultStatusEntry, diskPrefailedCount=diskPrefailedCount, dafsClientAuths=dafsClientAuths, raidVUsedMb=raidVUsedMb, dmpDuration=dmpDuration, raidVDiskModel=raidVDiskModel, pclNfsV3RmdirPerCent=pclNfsV3RmdirPerCent, v2Read4KCalls=v2Read4KCalls, tnfsCalls=tnfsCalls, cifsServ=cifsServ, qrV2HighKBytesUsed=qrV2HighKBytesUsed, initiatorGroupMemberEntry=initiatorGroupMemberEntry, remoteSystemMgtAlert=remoteSystemMgtAlert, smbRenames=smbRenames, ncHttpsAccelTable=ncHttpsAccelTable, tv2cRenames=tv2cRenames, sisLastOpEndTime=sisLastOpEndTime, quota=quota, svBaseSnapshot=svBaseSnapshot, viaMaxCQ=viaMaxCQ, amMonitor=amMonitor, volumeOfflineTooBig=volumeOfflineTooBig, vfProStatus=vfProStatus, fcpHighReadBytes=fcpHighReadBytes, smbOpenPrintFiles=smbOpenPrintFiles, portName=portName, snapmirrorTotalTransTimeSeconds=snapmirrorTotalTransTimeSeconds, lunCloneCreate=lunCloneCreate, tv3cpReadlinks=tv3cpReadlinks, tv3cNulls=tv3cNulls, nfsCacheHighBytesToServers=nfsCacheHighBytesToServers, globalStatusNonRecoverable=globalStatusNonRecoverable, cifsClearTextPasswd=cifsClearTextPasswd, pclNfsV2Mkdirs=pclNfsV2Mkdirs, pclNfsV3Mknods=pclNfsV3Mknods, raidPStatus=raidPStatus, ncStreamingObjHitrate=ncStreamingObjHitrate, v3cpReaddirPluss=v3cpReaddirPluss, tv2ReadStats=tv2ReadStats, snapmirrorConnDst2=snapmirrorConnDst2, pclNfsV2Read32KCalls=pclNfsV2Read32KCalls, smbNTCancelCNs=smbNTCancelCNs, enclosure=enclosure, qrVEntry=qrVEntry, smbCopies=smbCopies, viaOutRdma=viaOutRdma, v3cFsinfos=v3cFsinfos, smbWriteAndXs=smbWriteAndXs, nfsCalls=nfsCalls, raidTotalMb=raidTotalMb, switchLinkSpeed=switchLinkSpeed, dafsHurryUps=dafsHurryUps, obsSmbQueryInfos=obsSmbQueryInfos, userDefined=userDefined, plexPercentResyncing=plexPercentResyncing, nfsCacheBWSavings=nfsCacheBWSavings, rcInProgressHits=rcInProgressHits, pclNfsV2Statfss=pclNfsV2Statfss, tv3ccLookups=tv3ccLookups, raidVDiskFirmwareRevision=raidVDiskFirmwareRevision, cifsReqs=cifsReqs, appError=appError, nfsCacheHighMissRequests=nfsCacheHighMissRequests, qrV2SoftFileQuotaUnlimited=qrV2SoftFileQuotaUnlimited, smbOpenPrintFilePct=smbOpenPrintFilePct, viaConnLocalPortNumber=viaConnLocalPortNumber, volType=volType, v3ccMkdirs=v3ccMkdirs, dfNumber=dfNumber, pclNfsV3Accesss=pclNfsV3Accesss, lunMapLUNName=lunMapLUNName, enclCurSensorsCurrentCur=enclCurSensorsCurrentCur, snapmirrorFilerTotalSrcFailures=snapmirrorFilerTotalSrcFailures, envFailedFanMessage=envFailedFanMessage, vfProName=vfProName, svLastTransType=svLastTransType, switchType=switchType, chassisTemperatureShutdown=chassisTemperatureShutdown, raidVGroupNumber=raidVGroupNumber, smbCreateTemporaryPct=smbCreateTemporaryPct, cifsAltNames=cifsAltNames, v3CachedPerCent=v3CachedPerCent, qrV2IdType=qrV2IdType, dfPlexCount=dfPlexCount, cifsOpLkBatchToL2s=cifsOpLkBatchToL2s, smbWriteAndXPct=smbWriteAndXPct, chassisPowerOk=chassisPowerOk, vfStarted=vfStarted, tv3ccMknods=tv3ccMknods, v3cpLookups=v3cpLookups, ncFtpActiveCliConns=ncFtpActiveCliConns, viaNicAddress=viaNicAddress, miscGlobalStatus=miscGlobalStatus, smbLogoffAndXPct=smbLogoffAndXPct, ncHttpsProxyIsEnabled=ncHttpsProxyIsEnabled, qrPathName=qrPathName, vfSpIndex=vfSpIndex, dafsCheckResponses=dafsCheckResponses, snapmirrorConnTable=snapmirrorConnTable, chassisFanOk=chassisFanOk, cifsLevel2OplocksEnabled=cifsLevel2OplocksEnabled, v3Read128KCalls=v3Read128KCalls, sisSchedule=sisSchedule, switchHighPacketsProcessed=switchHighPacketsProcessed, misc64TapeReadBytes=misc64TapeReadBytes, tv3ccSetattrs=tv3ccSetattrs, lunLowWriteBytes=lunLowWriteBytes, outOfDateDiskShelf=outOfDateDiskShelf, ncHttpActiveServConns=ncHttpActiveServConns, overTempShutdown=overTempShutdown, enclCurSensorsOverCurFail=enclCurSensorsOverCurFail, tv3cpRenames=tv3cpRenames, alfFilewrap=alfFilewrap, spareShelf=spareShelf, ncDnsIresPendingForwardLookups=ncDnsIresPendingForwardLookups, switchFabricIndex=switchFabricIndex, slVType=slVType, raidVSecondaryDiskPort=raidVSecondaryDiskPort, svSchedSchedule=svSchedSchedule, dafsGetFencingLists=dafsGetFencingLists, waflDirFull=waflDirFull, ncDnsIresPendingReverseLookups=ncDnsIresPendingReverseLookups, vfDisallowedProtocols=vfDisallowedProtocols, ncStreamingQTBFServers=ncStreamingQTBFServers, smbSeeks=smbSeeks, svLastTransTimeSeconds=svLastTransTimeSeconds, rcDelayHits=rcDelayHits, pclNfsV3SetattrPerCent=pclNfsV3SetattrPerCent, dafsExportAccessList=dafsExportAccessList, viaConnRemotePortNumber=viaConnRemotePortNumber, ncHttpBytesFromClients=ncHttpBytesFromClients, enclVoltSensorsUnderVoltWarn=enclVoltSensorsUnderVoltWarn, qrV2LowKBytesSoftLimit=qrV2LowKBytesSoftLimit, dafsNicEntry=dafsNicEntry, softQuotaExceeded=softQuotaExceeded, v3ccReads=v3ccReads, nfsCacheBytesFromClients=nfsCacheBytesFromClients, dafsReleaseCreds=dafsReleaseCreds, iscsiLowWriteBytes=iscsiLowWriteBytes, dafsMaxIdleSeconds=dafsMaxIdleSeconds, ncNntpOptions=ncNntpOptions, ncHttpAccelEntry=ncHttpAccelEntry, viaConnRemoteNetAddress=viaConnRemoteNetAddress, qrV2LowKBytesThreshold=qrV2LowKBytesThreshold, diskReconstructingParityCount=diskReconstructingParityCount, obsSmbSetInfo2Pct=obsSmbSetInfo2Pct, ncNntpObjHitrate=ncNntpObjHitrate, diskVerifyingParityCount=diskVerifyingParityCount, tv3cCommits=tv3cCommits, dmpStAttempts=dmpStAttempts, viaConnRemoteEnableRdmaWrite=viaConnRemoteEnableRdmaWrite, pclNfsV2Readlinks=pclNfsV2Readlinks, v2cSymlinks=v2cSymlinks, ncStreamingRtspWMBFClients=ncStreamingRtspWMBFClients, pclNfsV3Readlinks=pclNfsV3Readlinks, svHostName=svHostName, tv3pReadlinks=tv3pReadlinks, smbReadAndXPct=smbReadAndXPct, switchHighPacketsRejected=switchHighPacketsRejected, ncStreamingAccelIndex=ncStreamingAccelIndex, otherDiskTable=otherDiskTable, dafsIsLicensed=dafsIsLicensed, qrV2Sid=qrV2Sid, pclNfsV2Write2KCalls=pclNfsV2Write2KCalls, fcpTargetSpeed=fcpTargetSpeed, tv3cRenames=tv3cRenames, viaMaxTransferSize=viaMaxTransferSize, fcp64ReadBytes=fcp64ReadBytes, enclTempSensorsOverTempWarn=enclTempSensorsOverTempWarn, viaConnRcvdRdmaWriteMessages=viaConnRcvdRdmaWriteMessages, v2ccReads=v2ccReads)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", v2ccMkdirs=v2ccMkdirs, dafsLookUpps=dafsLookUpps, pclNfsV2Read16KCalls=pclNfsV2Read16KCalls, dafsSessionMaxRequestSize=dafsSessionMaxRequestSize, raidVGroup=raidVGroup, pclNfsV2Removes=pclNfsV2Removes, lunLowReadOps=lunLowReadOps, spareDiskModel=spareDiskModel, v2cpRenames=v2cpRenames, ncFtpServConns=ncFtpServConns, viaCurrPTags=viaCurrPTags, cifsIsLoginEnabled=cifsIsLoginEnabled, cifsNTrees=cifsNTrees, enclElectronicsSerialNos=enclElectronicsSerialNos, v2pReaddirs=v2pReaddirs, slTable=slTable, tv2Read8KCalls=tv2Read8KCalls, ncStreamingRespTimePerByte=ncStreamingRespTimePerByte, svHostTotalSuccesses=svHostTotalSuccesses, viaErrConnLost=viaErrConnLost, obsSmbWriteMPXs=obsSmbWriteMPXs, slName=slName, v3Read32KCalls=v3Read32KCalls, cifsGetAttrs=cifsGetAttrs, viaNicTable=viaNicTable, pclNfsV2Write512Calls=pclNfsV2Write512Calls, miscHighDiskReadBytes=miscHighDiskReadBytes, v3Write4KCalls=v3Write4KCalls, ncFtpBytesFromClients=ncFtpBytesFromClients, dmpNumFiles=dmpNumFiles, compress64UsedKBytes=compress64UsedKBytes, v3Read1KCalls=v3Read1KCalls, cpFromLogFullOps=cpFromLogFullOps, tv3ccWrites=tv3ccWrites, smbTrans2CreateDirs=smbTrans2CreateDirs, vfFiIndex=vfFiIndex, ncHttpHighTotalHitRespTimes=ncHttpHighTotalHitRespTimes, misc64NetSentBytes=misc64NetSentBytes, cifsObsReqs=cifsObsReqs, initiatorGroupThrottleBorrow=initiatorGroupThrottleBorrow, cpFromSyncOps=cpFromSyncOps, if64OutNUcastPkts=if64OutNUcastPkts, cifsMaxNFSBkWaiterCount=cifsMaxNFSBkWaiterCount, v2cWrcaches=v2cWrcaches, productId=productId, smbFindClose2s=smbFindClose2s, cifsNeedPW=cifsNeedPW, tv2cReadlinks=tv2cReadlinks, sisPath=sisPath, slQVolume=slQVolume, tv2cRoots=tv2cRoots, ncBytesFromServers=ncBytesFromServers, vfIpAddresses=vfIpAddresses, lunSizeHigh=lunSizeHigh, envFailedFanCount=envFailedFanCount, initiator=initiator, ndmpBackupFailureReason=ndmpBackupFailureReason, v3cpReadlinks=v3cpReadlinks, tv3pSymlinks=tv3pSymlinks, miscHighTapeWriteBytes=miscHighTapeWriteBytes, smbTrans2FindNext2s=smbTrans2FindNext2s, viaInRDMAWriteBytes=viaInRDMAWriteBytes, nvramBatteryLow=nvramBatteryLow, obsSmbSearchs=obsSmbSearchs, connectedInitiatorPortalGroup=connectedInitiatorPortalGroup, ncHttpByteHitRateLast5Min=ncHttpByteHitRateLast5Min, iscsi64Ops=iscsi64Ops, dfPerCentSaved=dfPerCentSaved, dafsSessionMaxCredentials=dafsSessionMaxCredentials, dhmNoticeDegradedIO=dhmNoticeDegradedIO, ncIcapIsEnabled=ncIcapIsEnabled, tv3cpLinks=tv3cpLinks, lun64WriteOps=lun64WriteOps, tv3pSetattrs=tv3pSetattrs, v3cFsstats=v3cFsstats, alertTrap=alertTrap, tv2pRenames=tv2pRenames, volumeOnline=volumeOnline, totNfs=totNfs, spareDiskSerialNumber=spareDiskSerialNumber, viaConnRcvdRdmaReadMessages=viaConnRcvdRdmaReadMessages, dafsCurrentRequests=dafsCurrentRequests, portNumber=portNumber, cpFromCpOps=cpFromCpOps, tv3cpFsstats=tv3cpFsstats, tv3cLookups=tv3cLookups, rstActives=rstActives, spareDiskPort=spareDiskPort, psetMemberNameIndex=psetMemberNameIndex, ifHighInErrors=ifHighInErrors, trcMisses=trcMisses, viaNodeSystemName=viaNodeSystemName, v2cpRmdirs=v2cpRmdirs, qrVId=qrVId, dafsReadlinkInlines=dafsReadlinkInlines, dafsNicListenAddr=dafsNicListenAddr, ncHttpAccelKbytesToClient=ncHttpAccelKbytesToClient, v2pRoots=v2pRoots, maxDirSizeWarning=maxDirSizeWarning, slQVolumeName=slQVolumeName, psetMemberEntry=psetMemberEntry, outOfDateDiskModel=outOfDateDiskModel, dafsLookUps=dafsLookUps, spareSecondaryDiskName=spareSecondaryDiskName, productFirmwareVersion=productFirmwareVersion, ncHttpAccelTable=ncHttpAccelTable, miscLowTapeReadBytes=miscLowTapeReadBytes, dafsBcGetattrs=dafsBcGetattrs, vfIpAddr=vfIpAddr, obsSmbClosePrintFiles=obsSmbClosePrintFiles, slQSourceTime=slQSourceTime, obsSmbWriteRawPct=obsSmbWriteRawPct, viaTotalError=viaTotalError, ncStreamingRtspWMBFServers=ncStreamingRtspWMBFServers, viaMaxSegmentsPerDesc=viaMaxSegmentsPerDesc, qrFileLimit=qrFileLimit, ncStreamingLiveBytesFromClients=ncStreamingLiveBytesFromClients, v3cpMkdirs=v3cpMkdirs, sisIsLicensed=sisIsLicensed, productVersion=productVersion, qrVType=qrVType, raidPDiskModel=raidPDiskModel, ndmpBackupActive=ndmpBackupActive, dafsBcRecalls=dafsBcRecalls, svSchedStatus=svSchedStatus, qrV2Volume=qrV2Volume, dafsDiscardResponses=dafsDiscardResponses, lunLowReadBytes=lunLowReadBytes, powerSupplyFailed=powerSupplyFailed, smbLockingAndXPct=smbLockingAndXPct, qrV2QuotaUnlimited=qrV2QuotaUnlimited, netifDescr=netifDescr, otherDiskModel=otherDiskModel, dafsGetattrInlines=dafsGetattrInlines, ncHttpByteHitRateLast1Min=ncHttpByteHitRateLast1Min, dfTable=dfTable, tv3cpReads=tv3cpReads, tv3ccRmdirs=tv3ccRmdirs, cifsWGName=cifsWGName, ncHttpsAccelHits=ncHttpsAccelHits, raidPDiskPool=raidPDiskPool, ncStreamingAccelEntry=ncStreamingAccelEntry, tv3cpSetattrs=tv3cpSetattrs, obsSmbWrites=obsSmbWrites, qrVIndex=qrVIndex, v3cGetattrs=v3cGetattrs, pclNfsV2Roots=pclNfsV2Roots, ifLowOutOctets=ifLowOutOctets, qvStateName=qvStateName, cifsQueuedWriteRaws=cifsQueuedWriteRaws, ncDnsCacheMisses=ncDnsCacheMisses, fabric=fabric, dafsUseChecksums=dafsUseChecksums, ncHttpActiveCliConns=ncHttpActiveCliConns, volStatus=volStatus, v3Read8KCalls=v3Read8KCalls, fabricIndex=fabricIndex, initiatorGroupUseALUA=initiatorGroupUseALUA, nfsCacheRpcRecords=nfsCacheRpcRecords, if64InNUcastPkts=if64InNUcastPkts, trcInProgressHits=trcInProgressHits, tv3ccGetattrs=tv3ccGetattrs, viaInBytes=viaInBytes, tv3pLookups=tv3pLookups, tv2cMkdirs=tv2cMkdirs, pclNfsV2Write8KCalls=pclNfsV2Write8KCalls, ncAuth=ncAuth, v2Read1KCalls=v2Read1KCalls, switchEntry=switchEntry, tv3pLinks=tv3pLinks, nfsCacheBytesFromServers=nfsCacheBytesFromServers, chassisFanFailxMinShutdown=chassisFanFailxMinShutdown, enclChannelShelfAddr=enclChannelShelfAddr, filesysMaxfilesPossible=filesysMaxfilesPossible, tv2Write512Calls=tv2Write512Calls, vfTable=vfTable, lunHighWriteBytes=lunHighWriteBytes, viaConnSentRdmaReadMessages=viaConnSentRdmaReadMessages, viaMaxDiscriminatorLength=viaMaxDiscriminatorLength, smbTrans2GetDFSReferralPct=smbTrans2GetDFSReferralPct, ncStreamingProxyBytesFromClients=ncStreamingProxyBytesFromClients, snapvaultHostEntry=snapvaultHostEntry, dafsGetattrDirects=dafsGetattrDirects, v3cpMknods=v3cpMknods, initiatorGroupOS=initiatorGroupOS, v2Calls=v2Calls, snapmirrorOn=snapmirrorOn, svTotalFailures=svTotalFailures, enclVoltSensorsUnderVoltFailThr=enclVoltSensorsUnderVoltFailThr, dafsNicOutBytes=dafsNicOutBytes, dmpTime=dmpTime, raidVSecondaryDiskName=raidVSecondaryDiskName, v3ccLookups=v3ccLookups, pclNfsV3Lookups=pclNfsV3Lookups, dafsMaxResponseSize=dafsMaxResponseSize, raidUsedBlocks=raidUsedBlocks, smbTrans2QueryPathInfos=smbTrans2QueryPathInfos, tv3Calls=tv3Calls, v3cpReaddirs=v3cpReaddirs, smbNTTransactCreates=smbNTTransactCreates, v2cpReadlinks=v2cpReadlinks, ncIcapv1IsEnabled=ncIcapv1IsEnabled, ncDnsPendingReverseLookups=ncDnsPendingReverseLookups, ncRMMemFree=ncRMMemFree, v2ccSymlinks=v2ccSymlinks, chassisPowerSuppliesFailed=chassisPowerSuppliesFailed, svHostType=svHostType, dafsDefaultGid=dafsDefaultGid, vifPrimaryLinkFailed=vifPrimaryLinkFailed, chassisFanStopped=chassisFanStopped, v3cpSymlinks=v3cpSymlinks, snapmirrorThrottleValue=snapmirrorThrottleValue, dmpFailures=dmpFailures, enclVoltSensorsCurrentVolt=enclVoltSensorsCurrentVolt, nfsCacheMissUnCacheableRequests=nfsCacheMissUnCacheableRequests, lunIndex=lunIndex, productType=productType, slQTable=slQTable, cpFromTimerOps=cpFromTimerOps, pclNfsV3CommitPerCent=pclNfsV3CommitPerCent, viaCurrConnected=viaCurrConnected, pclNfsV2SymlinkPerCent=pclNfsV2SymlinkPerCent, ncHttpsAccelKbytesToClient=ncHttpsAccelKbytesToClient, obsSmbCreatePct=obsSmbCreatePct, lunQtreeName=lunQtreeName, ncHttpBWSavings=ncHttpBWSavings, compressEntry=compressEntry, enclTempSensorsUnderTempFail=enclTempSensorsUnderTempFail, fanFailed=fanFailed, pclNfsV3Mkdirs=pclNfsV3Mkdirs, amStatus=amStatus, ncStreamingAccelTable=ncStreamingAccelTable, svLag=svLag, fabricInstances=fabricInstances, remoteSystemMgmtPeriodic=remoteSystemMgmtPeriodic, compressTable=compressTable, qrV2HighKBytesThreshold=qrV2HighKBytesThreshold, iscsiHighWriteBytes=iscsiHighWriteBytes, cfSettings=cfSettings, svSrc=svSrc, tv3ReadStats=tv3ReadStats, rcNonIdemDoneHits=rcNonIdemDoneHits, qrVSid=qrVSid, viaInRdma=viaInRdma, ncStreamingMmsProIsLicensed=ncStreamingMmsProIsLicensed, rpcUdpBadCalls=rpcUdpBadCalls, nfscache=nfscache, viaConnLocalMaxTransferSize=viaConnLocalMaxTransferSize, tv3Write16KCalls=tv3Write16KCalls, qrId=qrId, informationalTrap=informationalTrap, ncCdIsEnabled=ncCdIsEnabled, smbCreateAndXPct=smbCreateAndXPct, tv2CachedPerCent=tv2CachedPerCent)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", pclNfsV3Renames=pclNfsV3Renames, raidPDiskType=raidPDiskType, cifsAlignedLargeRels=cifsAlignedLargeRels, v2Write2KCalls=v2Write2KCalls, v3pCreates=v3pCreates, v2CachedCalls=v2CachedCalls, raidVDiskType=raidVDiskType, volUUID=volUUID, raidPTable=raidPTable, nfsCache64HitRequests=nfsCache64HitRequests, snapmirrorActiveRestoreCount=snapmirrorActiveRestoreCount, v2cpSetattrs=v2cpSetattrs, fcpLowOps=fcpLowOps, psetMemberTable=psetMemberTable, otherDiskDiskPort=otherDiskDiskPort, amAddress=amAddress, productTrapData=productTrapData, ncStreaming=ncStreaming, v2cStatfss=v2cStatfss, netappDataFabricManager=netappDataFabricManager, pclNfsV2Getattrs=pclNfsV2Getattrs, v2pNulls=v2pNulls, pclNfsV3ReadlinkPerCent=pclNfsV3ReadlinkPerCent, cifsOthers=cifsOthers, pclNfsV2Write1KCalls=pclNfsV2Write1KCalls, productPartnerSerialNum=productPartnerSerialNum, rcUdpNonIdemNotDoneHits=rcUdpNonIdemNotDoneHits, raidVDiskSerialNumber=raidVDiskSerialNumber, snapmirrorConnSrc1=snapmirrorConnSrc1, viaOutBytes=viaOutBytes, tv3cWrites=tv3cWrites, dafsConnectBinds=dafsConnectBinds, volName=volName, viaConnLocalEnableRdmaRead=viaConnLocalEnableRdmaRead, v3cMkdirs=v3cMkdirs, v2pStatfss=v2pStatfss, enclCurSensorsOverCurWarnThr=enclCurSensorsOverCurWarnThr, cifsSharingErrorRetries=cifsSharingErrorRetries, quotaState=quotaState, raidPPlexName=raidPPlexName, smbLockingAndXs=smbLockingAndXs, fabricOwner=fabricOwner, pclNfsV2StatfsPerCent=pclNfsV2StatfsPerCent, dfType=dfType, iscsiLowReadBytes=iscsiLowReadBytes, nfsCache64BytesFromServers=nfsCache64BytesFromServers, tv2ccRenames=tv2ccRenames, dafsSetattrDirects=dafsSetattrDirects, ncStreamingRealBytesToClients=ncStreamingRealBytesToClients, v3Percent=v3Percent, miscCacheAge=miscCacheAge, pclNfsV2ReaddirPerCent=pclNfsV2ReaddirPerCent, svSystemTotalPrimarySuccesses=svSystemTotalPrimarySuccesses, grmMonitorString=grmMonitorString, tv3cPathconfs=tv3cPathconfs, viaOutRDMAReadBytes=viaOutRDMAReadBytes, lunLowErrors=lunLowErrors, obsSmbTreeConnectPct=obsSmbTreeConnectPct, ncStreamingOBTServers=ncStreamingOBTServers, dmpDataAmount=dmpDataAmount, volumeFull=volumeFull, nfsCache64BytesToServers=nfsCache64BytesToServers, tv3Read8KCalls=tv3Read8KCalls, pclNfsV2Write16KCalls=pclNfsV2Write16KCalls, rstSuccesses=rstSuccesses, v3cpAccesss=v3cpAccesss, nfsCache64TotalRequests=nfsCache64TotalRequests, v3pMkdirs=v3pMkdirs, viaNativeMTU=viaNativeMTU, psetEntry=psetEntry, tv3pAccesss=tv3pAccesss, qtreeId=qtreeId, ifHighOutNUcastPkts=ifHighOutNUcastPkts, ncStreamingMmsBytesFromClients=ncStreamingMmsBytesFromClients, v3Calls=v3Calls, spareScsiId=spareScsiId, network=network, upsLinePowerOff=upsLinePowerOff, ncStreamingMmsIsLicensed=ncStreamingMmsIsLicensed, raidVDiskRPM=raidVDiskRPM, raidPUsedMb=raidPUsedMb, spareBay=spareBay, cifsOpLkDelayedBreaks=cifsOpLkDelayedBreaks, ncDnsSuccessfulForwardLookups=ncDnsSuccessfulForwardLookups, smbTrans2CreateDirPct=smbTrans2CreateDirPct, pclNfsV3GetattrPerCent=pclNfsV3GetattrPerCent, qrV2FileQuotaUnlimited=qrV2FileQuotaUnlimited, qtreeStyle=qtreeStyle, ncStreamingProxyBytesFromServers=ncStreamingProxyBytesFromServers, flexCloneSplitStart=flexCloneSplitStart, viaConnVINumber=viaConnVINumber, tv2ccLinks=tv2ccLinks, vscanVirusDetectedError=vscanVirusDetectedError, initiatorListEntry=initiatorListEntry, pclNfsV2Wrcaches=pclNfsV2Wrcaches, sisHighLastOpSize=sisHighLastOpSize, cpFromCpDeferredOps=cpFromCpDeferredOps, cpuIdleTime=cpuIdleTime, criticalTrap=criticalTrap, cpu=cpu, raidPSectorSize=raidPSectorSize, dafsSessionEntry=dafsSessionEntry, pclNfsV3ReaddirPerCent=pclNfsV3ReaddirPerCent, enclProductVendor=enclProductVendor, envOverTemperature=envOverTemperature, v2Read128KCalls=v2Read128KCalls, obsSmbCreateNewPct=obsSmbCreateNewPct, cifsNOpenDirs=cifsNOpenDirs, enclTempSensorsOverTempFail=enclTempSensorsOverTempFail, miscHighNfsOps=miscHighNfsOps, ncBytesToServers=ncBytesToServers, nfsV2=nfsV2, enclVoltSensorsOverVoltWarnThr=enclVoltSensorsOverVoltWarnThr, pclNfsV2Read128KCalls=pclNfsV2Read128KCalls, nfsCacheHighHitRequests=nfsCacheHighHitRequests, driveDisableErr=driveDisableErr, snapmirrorTotalRestartSuccesses=snapmirrorTotalRestartSuccesses, snapmirrorFilerTotalSrcSuccesses=snapmirrorFilerTotalSrcSuccesses, rmcCardMissingCables=rmcCardMissingCables, ncStreamingCliConns=ncStreamingCliConns, obsSmbQueryInfo2Pct=obsSmbQueryInfo2Pct, plexTable=plexTable, tv2pSetattrs=tv2pSetattrs, restore=restore, ifLowOutErrors=ifLowOutErrors, fcpIsLicensed=fcpIsLicensed, tv3Write8KCalls=tv3Write8KCalls, ncVersion=ncVersion, tv3ccPathconfs=tv3ccPathconfs, v2Read512Calls=v2Read512Calls, ncFtpTotalRequests=ncFtpTotalRequests, cifsOpLkNoBreakAcks=cifsOpLkNoBreakAcks, nfsCacheLowMissRequests=nfsCacheLowMissRequests, pclNfsV3Symlinks=pclNfsV3Symlinks, cifsCwaWaits=cifsCwaWaits, appCritical=appCritical, ncObjectsStored=ncObjectsStored, dafsNicDevice=dafsNicDevice, diskActiveCount=diskActiveCount, cifsIsEnabled=cifsIsEnabled, tv2Percent=tv2Percent, cifsIsLicensed=cifsIsLicensed, tv2pMkdirs=tv2pMkdirs, ncStreamingRealBWSavings=ncStreamingRealBWSavings, switchLowPacketsProcessed=switchLowPacketsProcessed, raidVTotalBlocks=raidVTotalBlocks, v2cpRemoves=v2cpRemoves, ncLocalConfigVersion=ncLocalConfigVersion, viaConnState=viaConnState, enclProductModel=enclProductModel, dafsReaddirDirects=dafsReaddirDirects, pclNfsV3Write2KCalls=pclNfsV3Write2KCalls, pclRpcServXDRCalls=pclRpcServXDRCalls, netappNode=netappNode, ncFtpBytesToServers=ncFtpBytesToServers, qtreeName=qtreeName, pclNfsV3Read128KCalls=pclNfsV3Read128KCalls, cpFromLowWaterOps=cpFromLowWaterOps, portSwitchIndex=portSwitchIndex, svTotalTransTimeSeconds=svTotalTransTimeSeconds, lunSizeLow=lunSizeLow, appNotice=appNotice, chassisFanWarning=chassisFanWarning, svHostTotalFailures=svHostTotalFailures, cfState=cfState, v3ccReadlinks=v3ccReadlinks, svLastTransMBs=svLastTransMBs, tv3cpWrites=tv3cpWrites, ncHttpInstAvgMissRespTime=ncHttpInstAvgMissRespTime, ncFtpRespTimePerByte=ncFtpRespTimePerByte, rcTcpInProgressHits=rcTcpInProgressHits, ncGrmOptions=ncGrmOptions, cpTotalOps=cpTotalOps, dafsNicDirectInBytes=dafsNicDirectInBytes, volumeDegradedDirty=volumeDegradedDirty, sisState=sisState, tv3pWrites=tv3pWrites, v2ccRenames=v2ccRenames, tv3pFsstats=tv3pFsstats, smbEchos=smbEchos, obsSmbLockByteRangePct=obsSmbLockByteRangePct, raidPDiskName=raidPDiskName, cifsOpLkL2ToNones=cifsOpLkL2ToNones, ncHttpBytesToServers=ncHttpBytesToServers, dfLowUsedKBytes=dfLowUsedKBytes, warningTrap=warningTrap, viaInRDMAReadBytes=viaInRDMAReadBytes, pclNfsV3Nulls=pclNfsV3Nulls, viaOutMsgs=viaOutMsgs, vfName=vfName, cpuNonCPInterruptPercent=cpuNonCPInterruptPercent, dafsOpenDowngrades=dafsOpenDowngrades, cpuBusyTimePerCent=cpuBusyTimePerCent, viaThreadSafe=viaThreadSafe, nfsCache64MissRequests=nfsCache64MissRequests, v2ccRemoves=v2ccRemoves, v2ReadStats=v2ReadStats, tv2pReadlinks=tv2pReadlinks, cifsNSessions=cifsNSessions, miscLowHttpOps=miscLowHttpOps, sisEntry=sisEntry, productSerialNum=productSerialNum, raidPNumber=raidPNumber, quotaExceeded=quotaExceeded, dafsNicIndex=dafsNicIndex, v3ReadStats=v3ReadStats, raidVDiskCopyDestDiskName=raidVDiskCopyDestDiskName, chassisCPUFanOk=chassisCPUFanOk, compressLowSavedKBytes=compressLowSavedKBytes, snapmirrorSrc=snapmirrorSrc, tv3pReaddirs=tv3pReaddirs, snapmirrorRestoreSuccesses=snapmirrorRestoreSuccesses, nfsCache64BytesFromClients=nfsCache64BytesFromClients, v2cSetattrs=v2cSetattrs, dafsExportRwMode=dafsExportRwMode, v2pRenames=v2pRenames, v3Read512Calls=v3Read512Calls, powerSupplyFailureShutdown=powerSupplyFailureShutdown, dafsSecinfos=dafsSecinfos, fcpTargetTableIndex=fcpTargetTableIndex, smbNTCancels=smbNTCancels, flexCloneSplitComplete=flexCloneSplitComplete, v3pGetattrs=v3pGetattrs, tv2pGetattrs=tv2pGetattrs, cifsObsPercent=cifsObsPercent, pclNfsV2RmdirPerCent=pclNfsV2RmdirPerCent, cifsBadCalls=cifsBadCalls, svPrimaryIsLicensed=svPrimaryIsLicensed, ncNntpIsEnabled=ncNntpIsEnabled, ncStreamingAccelKbytesFromClient=ncStreamingAccelKbytesFromClient, rpcUdpNullRecvs=rpcUdpNullRecvs, enclTempSensorsMaximum=enclTempSensorsMaximum, snapmirrorActiveSrcNumber=snapmirrorActiveSrcNumber, spareDiskVendor=spareDiskVendor, fsMaxUsedInodesPerCent=fsMaxUsedInodesPerCent, tv3cFsinfos=tv3cFsinfos, ncDnsFailedForwardLookups=ncDnsFailedForwardLookups, clusterNodeRepaired=clusterNodeRepaired, raidVShelf=raidVShelf, vfProIndex=vfProIndex, quotaInitPercent=quotaInitPercent, fabricStatus=fabricStatus, iscsiLowOps=iscsiLowOps, df64UsedKBytes=df64UsedKBytes, raidVNumber=raidVNumber, svStatus=svStatus, volumeRemoteOk=volumeRemoteOk, obsSmbQueryInfo2s=obsSmbQueryInfo2s, softQuotaNormal=softQuotaNormal, netInterfaces=netInterfaces, snapmirrorFilerTotalDstFailures=snapmirrorFilerTotalDstFailures, enclCurSensorsMaximum=enclCurSensorsMaximum, cifsNOplockAckWaits=cifsNOplockAckWaits, enclTable=enclTable)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", ncRMMem=ncRMMem, pclNfsV3Read1KCalls=pclNfsV3Read1KCalls, outOfDateDiskScsiId=outOfDateDiskScsiId, qtreeOplock=qtreeOplock, raidVScsiId=raidVScsiId, volTable=volTable, snapmirrorRestoreRestartAborts=snapmirrorRestoreRestartAborts, iscsiHighReadBytes=iscsiHighReadBytes, enclProductRevision=enclProductRevision, qrV2Type=qrV2Type, smbNTCancelPct=smbNTCancelPct, pclNumber=pclNumber, tv2pRoots=tv2pRoots, smbTrans2QueryPathInfoPct=smbTrans2QueryPathInfoPct, tv3cFsstats=tv3cFsstats, dafsSetattrInlines=dafsSetattrInlines, miscHighTapeReadBytes=miscHighTapeReadBytes, pclNfsV3SymlinkPerCent=pclNfsV3SymlinkPerCent, cpTime=cpTime, outOfDateDiskTotalMb=outOfDateDiskTotalMb, v2cRoots=v2cRoots, pclNfsV2LookupPerCent=pclNfsV2LookupPerCent, ncNntpBytesFromServers=ncNntpBytesFromServers, portTable=portTable, lunMapped=lunMapped, enclPowerSuppliesSerialNos=enclPowerSuppliesSerialNos, ncNntpActiveCliConns=ncNntpActiveCliConns, ftpdOn=ftpdOn, pclNfsV3Write64KCalls=pclNfsV3Write64KCalls, qrV2Index=qrV2Index, obsSmbQueryInfoPct=obsSmbQueryInfoPct, switchStatusMessage=switchStatusMessage, rpcCalls=rpcCalls, compressHighUsedKBytes=compressHighUsedKBytes, qrFilesUsed=qrFilesUsed, rpcServ=rpcServ, viaErrorThreshold=viaErrorThreshold, cfPartnerLastStatusUpdate=cfPartnerLastStatusUpdate, v3cpCommits=v3cpCommits, nfsServ=nfsServ, cpuTotalDomainSwitches=cpuTotalDomainSwitches, v2ccRmdirs=v2ccRmdirs, pclNfsV2Read8KCalls=pclNfsV2Read8KCalls, raidTotalBlocks=raidTotalBlocks, dafsSessionAllowBackChannel=dafsSessionAllowBackChannel, pclNfsV2Nulls=pclNfsV2Nulls, enclFansPresent=enclFansPresent, dafsSessionEndian=dafsSessionEndian, outOfDateDiskBay=outOfDateDiskBay, ncHttpsAccelKbytesFromClient=ncHttpsAccelKbytesFromClient, snapmirror=snapmirror, fabricName=fabricName, cifsOpLkIgnoredAcks=cifsOpLkIgnoredAcks, envFailedPowerSupplyCount=envFailedPowerSupplyCount, viaNodeConnection=viaNodeConnection, tv3ccReaddirPluss=tv3ccReaddirPluss, ncStreamingRealUltraIsLicensed=ncStreamingRealUltraIsLicensed, v3pReaddirPluss=v3pReaddirPluss, ncDnsOptions=ncDnsOptions, ndmpRestoreFailureReason=ndmpRestoreFailureReason, nfsrwStats=nfsrwStats, raidVUsedBlocks=raidVUsedBlocks, dafsSessionMaxRequests=dafsSessionMaxRequests, cpuTooBusy=cpuTooBusy, raidVTable=raidVTable, ncBytesFromClients=ncBytesFromClients, dafsBcNulls=dafsBcNulls, dafsFetchResponses=dafsFetchResponses, volumeOffline=volumeOffline, fcpTargetStandby=fcpTargetStandby, cifsSMBDisconnects=cifsSMBDisconnects, cifsNOplockBreakWaits=cifsNOplockBreakWaits, volCloneOf=volCloneOf, autosupportConfigurationError=autosupportConfigurationError, dafsWriteDirects=dafsWriteDirects, filesysMaxfilesAvail=filesysMaxfilesAvail, obsSmbQueryInfoDiskPct=obsSmbQueryInfoDiskPct, ncFtpBytesFromServers=ncFtpBytesFromServers, obsSmbSetInfo2s=obsSmbSetInfo2s, qrV2HighKBytesSoftLimit=qrV2HighKBytesSoftLimit, tv3ccReadlinks=tv3ccReadlinks, chassisTemperatureUnknown=chassisTemperatureUnknown, cifsOpLkBatchToNones=cifsOpLkBatchToNones, raidEntry=raidEntry, cifsMaxACLs=cifsMaxACLs, otherDiskSectorSize=otherDiskSectorSize, v3cReaddirPluss=v3cReaddirPluss, v2Write4KCalls=v2Write4KCalls, dafsSessionIndex=dafsSessionIndex, spareTable=spareTable, ncBytesToClients=ncBytesToClients, ncStreamingLiveBytesToServers=ncStreamingLiveBytesToServers, volumeRemoteRestored=volumeRemoteRestored, tv2pStatfss=tv2pStatfss, cifsLocks=cifsLocks, tv2WriteStats=tv2WriteStats, lun64Ops=lun64Ops, qrVKBytesThreshold=qrVKBytesThreshold, initiatorGroupThrottleReserve=initiatorGroupThrottleReserve, viaConnRemoteDescriminator=viaConnRemoteDescriminator, ncNntp=ncNntp, sysStat=sysStat, tv2cpRmdirs=tv2cpRmdirs, obsSmbReadMPXs=obsSmbReadMPXs, netapp1=netapp1, v3pSetattrs=v3pSetattrs, v3cPathconfs=v3cPathconfs, aggrRaidType=aggrRaidType, obsSmbWriteAndUnlockPct=obsSmbWriteAndUnlockPct, plexFailed=plexFailed, dafsSessionClientVerifier=dafsSessionClientVerifier, smbTrans2FindNext2Pct=smbTrans2FindNext2Pct, domainControllerConnected=domainControllerConnected, nfsCacheMissRequests=nfsCacheMissRequests, psetPortName=psetPortName, ndmpSessionOpened=ndmpSessionOpened, initiatorGroupUsePartner=initiatorGroupUsePartner, initiatorGroupTable=initiatorGroupTable, ifLowInNUcastPkts=ifLowInNUcastPkts, viaErrPostDesc=viaErrPostDesc, cifsAlignedLarges=cifsAlignedLarges, compressLowUsedKBytes=compressLowUsedKBytes, shelfIFModuleWarning=shelfIFModuleWarning, diskAddingSpareCount=diskAddingSpareCount, miscHighCifsOps=miscHighCifsOps, v2pLookups=v2pLookups, qtreeIndex=qtreeIndex, snapmirrorConnDst1=snapmirrorConnDst1, qrVFileLimit=qrVFileLimit, snapmirrorLag=snapmirrorLag, ncNtlmPossibleProblem=ncNtlmPossibleProblem, ncStreamingRealBytesFromClients=ncStreamingRealBytesFromClients, otherDiskVendor=otherDiskVendor, v3pNulls=v3pNulls, tv3Write32KCalls=tv3Write32KCalls, dmpTable=dmpTable, ncStreamingQTBFClients=ncStreamingQTBFClients, snapmirrorBackupNumber=snapmirrorBackupNumber, tv3cpNulls=tv3cpNulls, v3cpWrites=v3cpWrites, tv2cLinks=tv2cLinks, ncDnsIresReverseLookups=ncDnsIresReverseLookups, dfInodesUsed=dfInodesUsed, dmpActives=dmpActives, dafsBatchSubmits=dafsBatchSubmits, v2ccStatfss=v2ccStatfss, slMonth=slMonth, dfHighTotalKBytes=dfHighTotalKBytes, raidVSectorSize=raidVSectorSize, snapmirrorFilerTotalDstSuccesses=snapmirrorFilerTotalDstSuccesses, ncGrmAgentOptions=ncGrmAgentOptions, v2cRmdirs=v2cRmdirs, otherDiskDiskId=otherDiskDiskId, dafsWriteInlines=dafsWriteInlines, otherDiskNumber=otherDiskNumber, rcUdpInProgressHits=rcUdpInProgressHits, aggrType=aggrType, v3cCommits=v3cCommits, tv2pRmdirs=tv2pRmdirs, svSchedIndex=svSchedIndex, v3pReadlinks=v3pReadlinks, tv3pCommits=tv3pCommits, cifsAlignedSmallRels=cifsAlignedSmallRels, vfState=vfState, ifLowOutNUcastPkts=ifLowOutNUcastPkts, ncDnsPendingForwardLookups=ncDnsPendingForwardLookups, viaCurrRegisterRegions=viaCurrRegisterRegions, smbRenamePct=smbRenamePct, connectedInitiatorType=connectedInitiatorType, v3ccReaddirPluss=v3ccReaddirPluss, tv3CachedPerCent=tv3CachedPerCent, spareTotalMb=spareTotalMb, appWarning=appWarning, volumeRepaired=volumeRepaired, snapvault=snapvault, dafsSessionId=dafsSessionId, vfIpEntry=vfIpEntry, slHour=slHour, cifsDCName=cifsDCName, lunHighOps=lunHighOps, aggrNumber=aggrNumber, vfEntry=vfEntry, miscLowDiskReadBytes=miscLowDiskReadBytes, qvStateVolume=qvStateVolume, fsStatusMessage=fsStatusMessage, lunOnline=lunOnline, v2cLookups=v2cLookups, v2Write128KCalls=v2Write128KCalls, tv2cRemoves=tv2cRemoves, tv2Read1KCalls=tv2Read1KCalls, viaErrRecvQEmpty=viaErrRecvQEmpty, vfIndex=vfIndex, ifHighOutErrors=ifHighOutErrors, v2ccReaddirs=v2ccReaddirs, smbTrans2ReportDFSIncPct=smbTrans2ReportDFSIncPct, nfsCacheIsLicensed=nfsCacheIsLicensed, dafsOpenattrs=dafsOpenattrs, initiatorGroupType=initiatorGroupType, lunSize64=lunSize64, otherDiskPool=otherDiskPool, v3pAccesss=v3pAccesss, raidTable=raidTable, ncCmsIsEnabled=ncCmsIsEnabled, raidPDiskId=raidPDiskId, dmpStSuccesses=dmpStSuccesses, cifsWaitLocks=cifsWaitLocks, tv2pSymlinks=tv2pSymlinks, diskFailedShutdown=diskFailedShutdown, lunMapTable=lunMapTable, dafsNicDirectOutBytes=dafsNicDirectOutBytes, upsBatteryCritical=upsBatteryCritical, obsSmbReadPct=obsSmbReadPct, ncFtpHitRequests=ncFtpHitRequests, v2cReads=v2cReads, shelfSESElectronicsFailed=shelfSESElectronicsFailed, diskFailed=diskFailed, raidPDiskSerialNumber=raidPDiskSerialNumber, qrV2Table=qrV2Table, smbMovePct=smbMovePct, ncStreamingRtspIsEnabled=ncStreamingRtspIsEnabled, dmpStartTime=dmpStartTime, smbClosePct=smbClosePct, cfPartnerSysid=cfPartnerSysid, dafsServerAuths=dafsServerAuths, enclNumber=enclNumber, nfsCacheMissCacheableRequests=nfsCacheMissCacheableRequests, rcTcpNonIdemDoneHits=rcTcpNonIdemDoneHits, v2pSetattrs=v2pSetattrs, shelfSESElectronicsInfo=shelfSESElectronicsInfo, raidPGroupNumber=raidPGroupNumber, rcNonIdemNotDoneHits=rcNonIdemNotDoneHits, rpcNullRecvs=rpcNullRecvs, tv2cpRenames=tv2cpRenames, svTotalDeferments=svTotalDeferments, diskFailedMessage=diskFailedMessage, ncTotalBWSavings=ncTotalBWSavings, svSchedVolume=svSchedVolume, aggrName=aggrName, otherDiskShelf=otherDiskShelf, compress=compress, pclNfsV2Creates=pclNfsV2Creates, alfFileSaved=alfFileSaved, lunMapInitiatorGroupName=lunMapInitiatorGroupName, volumeError=volumeError, ncNtlm=ncNtlm, v2Read64KCalls=v2Read64KCalls, outOfDateDiskSerialNumber=outOfDateDiskSerialNumber, dmpStatus=dmpStatus, fabricStatusMessage=fabricStatusMessage, raidVDiskId=raidVDiskId, enclProductID=enclProductID, fcpTargetType=fcpTargetType, tv3Read2KCalls=tv3Read2KCalls, dfHighUsedKBytes=dfHighUsedKBytes)
mibBuilder.exportSymbols("NETWORK-APPLIANCE-MIB", smbNegProtPct=smbNegProtPct, tv3cpCreates=tv3cpCreates, fcpTargetNN=fcpTargetNN, smbNTTransactNotifyChgPct=smbNTTransactNotifyChgPct, chassisTemperatureOk=chassisTemperatureOk, ncNntpServConns=ncNntpServConns, dafsLockts=dafsLockts, nfsCacheIsEnabled=nfsCacheIsEnabled, obsSmbLockAndReads=obsSmbLockAndReads, ncFtpActiveServConns=ncFtpActiveServConns, qtreeStatus=qtreeStatus, vfUuid=vfUuid, enclVoltSensorsOverVoltFailThr=enclVoltSensorsOverVoltFailThr, pclNfsV3Write8KCalls=pclNfsV3Write8KCalls, ncDnsIresForwardLookups=ncDnsIresForwardLookups, cifsNBTDisconnects=cifsNBTDisconnects, obsSmbLockByteRanges=obsSmbLockByteRanges, pclNfsV3Readdirs=pclNfsV3Readdirs, tv3ccReaddirs=tv3ccReaddirs, obsSmbTrans2Open2s=obsSmbTrans2Open2s, dafsNicInBytes=dafsNicInBytes, rpcUdpServXDRCalls=rpcUdpServXDRCalls, lunCount=lunCount, pclNfsV3Creates=pclNfsV3Creates, tv3pRemoves=tv3pRemoves, ifHighOutDiscards=ifHighOutDiscards, slVName=slVName, ifHighInUcastPkts=ifHighInUcastPkts, otherDiskRPM=otherDiskRPM, volFSID=volFSID, v2ccNulls=v2ccNulls, volOwningHost=volOwningHost, sisProgress=sisProgress, smbTrans2ReportDFSIncs=smbTrans2ReportDFSIncs, raidScsiAdapter=raidScsiAdapter, enclCurSensorsOverCurFailThr=enclCurSensorsOverCurFailThr, dmpEntry=dmpEntry, volumeRemoteUnreachable=volumeRemoteUnreachable, iscsiHighOps=iscsiHighOps, v3cRenames=v3cRenames, tv2ccMkdirs=tv2ccMkdirs, nfsCacheLowBytesFromServers=nfsCacheLowBytesFromServers, trpcCalls=trpcCalls, tv3cpMknods=tv3cpMknods, vi=vi, globalStatusNonCritical=globalStatusNonCritical, pclRpcBadCalls=pclRpcBadCalls, svSystemTotalPrimaryFailures=svSystemTotalPrimaryFailures, dafsSessionInlineWriteHeaderSize=dafsSessionInlineWriteHeaderSize, cifsAlignedSmalls=cifsAlignedSmalls, ftpdMaxConns=ftpdMaxConns, spareIndex=spareIndex, svSystemTotalSecondarySuccesses=svSystemTotalSecondarySuccesses, v3cRemoves=v3cRemoves, v3ccRemoves=v3ccRemoves, ftpdMaxConnThresholdNotice=ftpdMaxConnThresholdNotice, v3Write16KCalls=v3Write16KCalls, ncIcapIsLicensed=ncIcapIsLicensed, ncStreamingRealProIsLicensed=ncStreamingRealProIsLicensed, powerSupplyWarning=powerSupplyWarning, v3pFsinfos=v3pFsinfos, initiatorGroupIndex=initiatorGroupIndex, cp=cp, initiatorListEntryIndex=initiatorListEntryIndex, slMinutes=slMinutes, tv3cMkdirs=tv3cMkdirs, slQSnapshotTime=slQSnapshotTime, shelfRepaired=shelfRepaired, otherDiskTotalMb=otherDiskTotalMb, connectedInitiatorPortName=connectedInitiatorPortName, initiatorGroupMemberIndex=initiatorGroupMemberIndex, cpFromLowVbufOps=cpFromLowVbufOps, tv2cpSetattrs=tv2cpSetattrs, volumeAutogrow=volumeAutogrow, v3Write32KCalls=v3Write32KCalls, pclRpcCalls=pclRpcCalls, pclNfsV2Symlinks=pclNfsV2Symlinks, otherDiskScsiAdapter=otherDiskScsiAdapter, tv2cpReads=tv2cpReads, productMachineType=productMachineType, envFailedPowerSupplyMessage=envFailedPowerSupplyMessage, tv3cLinks=tv3cLinks, tv3cpReaddirPluss=tv3cpReaddirPluss, pclNfsV2SetattrPerCent=pclNfsV2SetattrPerCent, takeoverMode=takeoverMode, accelmonitor=accelmonitor, ncHttp=ncHttp, snapmirrorTotalSuccesses=snapmirrorTotalSuccesses, raidScsiId=raidScsiId, tv3pPathconfs=tv3pPathconfs, volOptions=volOptions, raidVStatus=raidVStatus, dmpStPath=dmpStPath, qrVFileLimitSoft=qrVFileLimitSoft, v3pRemoves=v3pRemoves, dafsNicState=dafsNicState, pset=pset, dafsReadDirects=dafsReadDirects, dafsMaxRequests=dafsMaxRequests, dfPerCentInodeCapacity=dfPerCentInodeCapacity)
