#
# PySNMP MIB module NOVELL-NLSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELL-NLSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:24:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
mibDoc, = mibBuilder.importSymbols("NOVELL-IPX-MIB", "mibDoc")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, ModuleIdentity, Unsigned32, Counter32, ObjectIdentity, iso, TimeTicks, Bits, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "ModuleIdentity", "Unsigned32", "Counter32", "ObjectIdentity", "iso", "TimeTicks", "Bits", "NotificationType", "Integer32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
nlsp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19))
nlspSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 1))
nlspCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 2))
nlspForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 3))
nlspNeighbors = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 4))
nlspTranslation = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 5))
nlspGraph = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 6))
nlspLSP = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 7))
class SystemID(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NLSPID(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

nlspSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1), )
if mibBuilder.loadTexts: nlspSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysTable.setDescription('The NLSP system table.')
nlspSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspSysInstance"))
if mibBuilder.loadTexts: nlspSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysEntry.setDescription('Each entry corresponds to one instance of NLSP running on the system.')
nlspSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysInstance.setDescription('The unique identifier of the instance of NLSP to which this corresponds. This value links the instance of NLSP to an instance of IPX running on the system (i.e. the value of nlspSysInstance should be the same as a value of ipxSysInstance). This value may be written only when creating a new entry in the table.')
nlspSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("nlspLevel1Router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysState.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysState.setDescription('Indicates the operational state of this instance of NLSP.')
nlspSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 3), SystemID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysID.setDescription('The system ID for this instance of NLSP.')
nlspSysMinNonBcastLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMinNonBcastLSPTransInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysMinNonBcastLSPTransInt.setDescription('The minimum interval, in seconds, between transmission of LSPs on a non-broadcast circuit.')
nlspSysMinBcastLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMinBcastLSPTransInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysMinBcastLSPTransInt.setDescription('The minimum interval, in seconds, between transmission of LSPs on a broadcast circuit.')
nlspSysMinLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMinLSPGenInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysMinLSPGenInt.setDescription('The minimum interval, in seconds, between the generation of the same LSP.')
nlspSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(7200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMaxLSPGenInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysMaxLSPGenInt.setDescription('The maximum interval, in seconds, between the generation of the same LSP.')
nlspSysMaxLSPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(7500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMaxLSPAge.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysMaxLSPAge.setDescription('The value, in seconds, placed in the lifetime field of LSPs generated by this instance of NLSP.')
nlspSysBcastHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysBcastHelloInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysBcastHelloInt.setDescription('The interval, in seconds, at which NLSP Hellos will be sent on a broadcast circuit, if this system is not the designated router.')
nlspSysNonBcastHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysNonBcastHelloInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysNonBcastHelloInt.setDescription('The interval, in seconds, at which NLSP Hellos will be sent on a non-broadcast circuit.')
nlspSysDRBcastHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysDRBcastHelloInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysDRBcastHelloInt.setDescription('The interval, in seconds, at which the designated router sends NLSP Hellos on a broadcast circuit.')
nlspSysHoldTimeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysHoldTimeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysHoldTimeMultiplier.setDescription('The holding time multiplier used to specify the holding time for NLSP neighbor entries as a function of the NLSP Hello interval.')
nlspSysCompSNPInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysCompSNPInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysCompSNPInt.setDescription('The interval, in seconds, between generation of Complete Sequence Number Packets by a designated router on a broadcast circuit.')
nlspSysPartSNPInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysPartSNPInt.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysPartSNPInt.setDescription('The minimum interval, in seconds, between transmission of Partial Sequence Number Packets.')
nlspSysWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysWaitTime.setDescription('The number of seconds to delay in the waiting state before entering the on state.')
nlspSysOrigL1LSPBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 4096)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysOrigL1LSPBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysOrigL1LSPBufSize.setDescription('The maximum size of Level 1 LSPs originated by this instance of NLSP.')
nlspSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysVersion.setDescription('The version number of this instance of NLSP.')
nlspSysCorrLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysCorrLSPs.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysCorrLSPs.setDescription('The number of corrupt LSPs detected.')
nlspSysL1Overloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysL1Overloaded.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysL1Overloaded.setDescription('Indicates whether the NLSP Level 1 database is overloaded.')
nlspSysL1DbaseOverloads = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysL1DbaseOverloads.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysL1DbaseOverloads.setDescription('The number of times the NLSP Level 1 LSP database has become overloaded.')
nlspSysMaxSeqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysMaxSeqNums.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysMaxSeqNums.setDescription("The number of times the router has attempted to exceed NLSP's maximum sequence number.")
nlspSysSeqNumSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysSeqNumSkips.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysSeqNumSkips.setDescription('The number of times a sequence number skip has occurred.')
nlspSysTransmittedLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysTransmittedLSPs.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysTransmittedLSPs.setDescription('The number of LSPs transmitted by this system.')
nlspSysReceivedLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysReceivedLSPs.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysReceivedLSPs.setDescription('The number of LSPs received by this system.')
nlspSysOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysOwnLSPPurges.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysOwnLSPPurges.setDescription("The number of times a zero-aged copy of the router's own LSP has been received from some other node.")
nlspSysVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysVersionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysVersionErrors.setDescription('The number of times that a received NLSP packet was rejected because its version number was invalid.')
nlspSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysIncorrectPackets.setDescription('The number of times that an incorrectly formatted NLSP packet was received.')
nlspSysNearestL2DefaultExists = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysNearestL2DefaultExists.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysNearestL2DefaultExists.setDescription('Indicates whether this instance of NLSP knows of a NLSP Level 2 router that currently can reach other areas using the default metric.')
nlspSysNearestL2DefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 29), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysNearestL2DefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysNearestL2DefaultRouter.setDescription('The system ID of the nearest NLSP Level 2 router that currently can reach other areas using the default metric. The value is undefined if the value of nlspSysNearestL2DefaultExists is no.')
nlspSysResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysResourceFailures.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysResourceFailures.setDescription('The number of times this instance of the NLSP has been unable to obtain needed resources (memory, etc.)')
nlspSysAreaTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2), )
if mibBuilder.loadTexts: nlspSysAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysAreaTable.setDescription('The System Area Address table contains the area addresses configured for NLSP.')
nlspSysAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspSysAreaSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspSysAreaNet"), (0, "NOVELL-NLSP-MIB", "nlspSysAreaMask"))
if mibBuilder.loadTexts: nlspSysAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysAreaEntry.setDescription('Each entry in the table corresponds to one NLSP System Area Address.')
nlspSysAreaSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysAreaSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysAreaSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspSysAreaNet = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysAreaNet.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysAreaNet.setDescription('The network address portion of the area address.')
nlspSysAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysAreaMask.setStatus('mandatory')
if mibBuilder.loadTexts: nlspSysAreaMask.setDescription('The mask portion of the area address.')
nlspActAreaTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3), )
if mibBuilder.loadTexts: nlspActAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspActAreaTable.setDescription('The Actual Area Address table contains the area addresses actually used by NLSP.')
nlspActAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspActAreaSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspActAreaNet"), (0, "NOVELL-NLSP-MIB", "nlspActAreaMask"))
if mibBuilder.loadTexts: nlspActAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspActAreaEntry.setDescription('Each entry in the table corresponds to one NLSP Actual Area Address.')
nlspActAreaSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspActAreaSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspActAreaSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspActAreaNet = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspActAreaNet.setStatus('mandatory')
if mibBuilder.loadTexts: nlspActAreaNet.setDescription('The network address portion of the area address.')
nlspActAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspActAreaMask.setStatus('mandatory')
if mibBuilder.loadTexts: nlspActAreaMask.setDescription('The mask portion of the area address.')
nlspCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1), )
if mibBuilder.loadTexts: nlspCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircTable.setDescription('The Circuit table.')
nlspCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspCircSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspCircIndex"))
if mibBuilder.loadTexts: nlspCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
nlspCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this entry corresponds. This value may be written only when creating a new entry in the table.')
nlspCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircIndex.setDescription('The identifier of this circuit, unique within the instance of NLSP. This value may be written only when creating a new entry in the table.')
nlspCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircState.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircState.setDescription('Indicates whether NLSP information may be sent/received over this circuit.')
nlspCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircPace.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircPace.setDescription('The maximum pace, in packets per second, at which NLSP packets may be sent on this circuit.')
nlspCircHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircHelloTimer.setDescription('The interval, in seconds, between NLSP Hello packets sent on this circuit.')
nlspCircL1DefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircL1DefaultCost.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircL1DefaultCost.setDescription('The NLSP default cost of this circuit for Level 1 traffic.')
nlspCircL1DesRouterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircL1DesRouterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircL1DesRouterPriority.setDescription('The priority for becoming the NLSP LAN Level 1 Designated Router on a broadcast circuit.')
nlspCircL1CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircL1CircID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircL1CircID.setDescription('The NLSP ID for this circuit.')
nlspCircL1DesRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 9), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircL1DesRouter.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircL1DesRouter.setDescription('The system ID of the NLSP LAN Level 1 Designated Router on this circuit.')
nlspCircLANL1DesRouterChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircLANL1DesRouterChanges.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircLANL1DesRouterChanges.setDescription('The number of times the NLSP LAN Level 1 Designated Router has changed on this circuit.')
nlspCircNeighChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircNeighChanges.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircNeighChanges.setDescription('The number of times a NLSP neighbor state change has occurred on this circuit.')
nlspCircRejNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircRejNeighbors.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircRejNeighbors.setDescription('The number of times that a NLSP neighbor has been rejected on this circuit.')
nlspCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircOutPackets.setDescription('The number of NLSP packets sent on this circuit.')
nlspCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircInPackets.setDescription('The number of NLSP packets received on this circuit.')
nlspCircActualMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircActualMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircActualMaxPacketSize.setDescription('The actual maximum packet size (including header), in bytes, that has been used on this circuit.')
nlspCircPSNPsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircPSNPsSent.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircPSNPsSent.setDescription('The number of PSNPs sent on this circuit.')
nlspCircPSNPsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircPSNPsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: nlspCircPSNPsReceived.setDescription('The number of PSNPs received on this circuit.')
nlspDestTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1), )
if mibBuilder.loadTexts: nlspDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestTable.setDescription('The Destination table contains information about all known destinations learned about via NLSP.')
nlspDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspDestSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspDestNetNum"))
if mibBuilder.loadTexts: nlspDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestEntry.setDescription('Each entry corresponds to one destination.')
nlspDestSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestNetNum.setDescription('The IPX network number of the destination.')
nlspDestID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 3), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestID.setDescription('The destination NLSP ID (6-octet system ID plus 1-octet pseudo-node ID).')
nlspDestEstDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestEstDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestEstDelay.setDescription('The estimated delay, in milliseconds, to reach the destination.')
nlspDestEstThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestEstThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestEstThroughput.setDescription('The estimated throughput, in bits per second, to the destination.')
nlspDestNextHopID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 6), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestNextHopID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestNextHopID.setDescription('The NLSP ID (6-octet system ID plus 1-octet pseudo-node ID) of the next hop.')
nlspDestCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestCost.setStatus('mandatory')
if mibBuilder.loadTexts: nlspDestCost.setDescription('The total path default cost to reach this destination.')
nlspNeighTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1), )
if mibBuilder.loadTexts: nlspNeighTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighTable.setDescription('The NLSP Neighbors table.')
nlspNeighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNeighSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNeighCircIndex"), (0, "NOVELL-NLSP-MIB", "nlspNeighIndex"))
if mibBuilder.loadTexts: nlspNeighEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighEntry.setDescription('Each entry corresponds to one neighboring NLSP router known to the system.')
nlspNeighSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspNeighCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighCircIndex.setDescription('The identifier of the parent circuit of this neighbor within this instance of the NLSP and IPX.')
nlspNeighIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighIndex.setDescription('The identifier for this NLSP neighbor entry, unique within the parent circuit.')
nlspNeighState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighState.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighState.setDescription('The state of the connection to the neighboring NLSP router.')
nlspNeighNICAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighNICAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighNICAddress.setDescription('The NIC Address of the neighboring NLSP router.')
nlspNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighSysType.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighSysType.setDescription('The type of the neighboring NLSP router.')
nlspNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 7), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighSysID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighSysID.setDescription("The neighboring NLSP router's system ID.")
nlspNeighName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighName.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighName.setDescription('The readable name for the neighboring NLSP router.')
nlspNeighUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighUsage.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighUsage.setDescription('The usage of the connection to the neighboring NLSP router.')
nlspNeighHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighHoldTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighHoldTimer.setDescription('The initial holding time, in seconds, for this NLSP neighbor entry as specified in the NLSP Hello packet.')
nlspNeighRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighRemainingTime.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighRemainingTime.setDescription('The remaining time to live, in seconds, for this NLSP neighbor entry.')
nlspNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNeighPriority.setDescription('The priority of the neighboring NLSP router for becoming the LAN Level 1 Designated router if the value of nlspNeighSysType is nlspLevel1Router.')
nlspIDMapTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1), )
if mibBuilder.loadTexts: nlspIDMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspIDMapTable.setDescription('This table maps NLSP system IDs to router names and IPX network numbers.')
nlspIDMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspIDMapSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspIDMapID"))
if mibBuilder.loadTexts: nlspIDMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspIDMapEntry.setDescription('Each entry maps one NLSP system ID to its corresponding router name and IPX network number.')
nlspIDMapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspIDMapSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspIDMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspIDMapID.setDescription('The NLSP ID (6-octet system ID plus the pseudo-node ID).')
nlspIDMapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nlspIDMapServerName.setDescription('The readable name corresponding to this NLSP ID.')
nlspIDMapNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 4), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspIDMapNetNum.setDescription('The IPX network number corresponding to this NLSP ID.')
nlspNetMapTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2), )
if mibBuilder.loadTexts: nlspNetMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNetMapTable.setDescription('This table maps IPX network numbers to router names and NLSP IDs.')
nlspNetMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNetMapSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNetMapNetNum"))
if mibBuilder.loadTexts: nlspNetMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNetMapEntry.setDescription('Each entry maps one IPX network number to its corresponding router name and NLSP ID.')
nlspNetMapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNetMapSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspNetMapNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNetMapNetNum.setDescription('The IPX network number.')
nlspNetMapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNetMapServerName.setDescription('The router name corresponding to the IPX network number.')
nlspNetMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 4), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNetMapID.setDescription('The NLSP ID corresponding to the IPX network number.')
nlspNameMapTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3), )
if mibBuilder.loadTexts: nlspNameMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNameMapTable.setDescription('This table maps router names to the corresponding IPX network number and NLSP ID.')
nlspNameMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNameMapSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNameMapServerName"))
if mibBuilder.loadTexts: nlspNameMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNameMapEntry.setDescription('Each entry maps one router name to its corresponding IPX network number and NLSP ID.')
nlspNameMapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNameMapSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspNameMapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNameMapServerName.setDescription('The readable name for this system.')
nlspNameMapNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNameMapNetNum.setDescription('The IPX network number corresponding to the router name.')
nlspNameMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 4), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNameMapID.setDescription('The NLSP ID corresponding to the router name. This value is undefined if the value of nlspSysState is off.')
nlspNodeTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1), )
if mibBuilder.loadTexts: nlspNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeTable.setDescription('The node table contains an entry for each node in the graph.')
nlspNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNodeSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNodeID"))
if mibBuilder.loadTexts: nlspNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeEntry.setDescription('Each entry corresponds to one graph node.')
nlspNodeSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeID.setDescription('The NLSP ID for this node.')
nlspNodeNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeNetNum.setDescription('The IPX network number of this node.')
nlspNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2), ("nlspLevel2Router", 3), ("router", 4), ("network", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeType.setDescription('The type of system the node represents.')
nlspNodeEstDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeEstDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeEstDelay.setDescription('The estimated delay, in milliseconds, to reach the destination represented by this node.')
nlspNodeEstThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeEstThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeEstThroughput.setDescription('The estimated throughput, in bits per second, to the destination represented by this node.')
nlspNodeMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeMaxPacketSize.setDescription('The maximum packet size, in bytes, that can be sent to the destination represented by this node.')
nlspNodeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeCost.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeCost.setDescription('The cost to reach this node.')
nlspNodeOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeOverload.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeOverload.setDescription('Indicates whether this node is overloaded.')
nlspNodeReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeReachable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspNodeReachable.setDescription('Indicates whether the destination represented by this node is reachable.')
nlspLinkTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2), )
if mibBuilder.loadTexts: nlspLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkTable.setDescription('The Link table contains entries for all of the links in the graph.')
nlspLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspLinkSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspLinkNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspLinkIndex"))
if mibBuilder.loadTexts: nlspLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkEntry.setDescription('Each entry corresponds to one link.')
nlspLinkSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspLinkNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkNLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkNLSPID.setDescription('The NLSP ID (6-byte system ID plus 1-octet pseudo-node ID) of the node to which this link belongs.')
nlspLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkIndex.setDescription('The unique value identifying the link within the node.')
nlspLinkNeighNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 4), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkNeighNLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkNeighNLSPID.setDescription('The NLSP ID (6-byte system ID plus 1-octet pseudo-node ID) of the neighboring node.')
nlspLinkFromNeighCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkFromNeighCost.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkFromNeighCost.setDescription('The cost to use this link to reach this node from the neighboring node.')
nlspLinkMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkMaxPacketSize.setDescription('The maximum size, in bytes, of a packet that may be sent over this link.')
nlspLinkThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkThroughput.setDescription("The link's maximum throughput, in bits per second.")
nlspLinkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkDelay.setDescription('The delay, in milliseconds, on this link.')
nlspLinkMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkMediaType.setDescription('The media type of this link.')
nlspLinkToNeighCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkToNeighCost.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLinkToNeighCost.setDescription('The cost to use this link to reach the neighbor from this node.')
nlspPathTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3), )
if mibBuilder.loadTexts: nlspPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspPathTable.setDescription('The path table.')
nlspPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspPathSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspPathDestNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspPathLinkIndex"))
if mibBuilder.loadTexts: nlspPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspPathEntry.setDescription('Each row in this table represents a link to a node that is one hop closer to the source and would be used for the minimum cost path(s) to reach the destination.')
nlspPathSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspPathSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspPathSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this row corresponds.')
nlspPathDestNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspPathDestNLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspPathDestNLSPID.setDescription('The NLSP ID (6-octet system ID plus 1-octet pseudo-node ID) of this destination.')
nlspPathLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspPathLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nlspPathLinkIndex.setDescription('The unique value identifying this link within the destination node.')
nlspGraphXRouteTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4), )
if mibBuilder.loadTexts: nlspGraphXRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteTable.setDescription('This table contains the information about the XRoutes associated with a node in the graph.')
nlspGraphXRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspGraphXRouteSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspGraphXRouteNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspGraphXRouteNetNum"))
if mibBuilder.loadTexts: nlspGraphXRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteEntry.setDescription('Each entry in the table contains the information for one XRoute associated with the node.')
nlspGraphXRouteSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this entry corresponds.')
nlspGraphXRouteNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteNLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteNLSPID.setDescription('The NLSP ID of the node.')
nlspGraphXRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteNetNum.setDescription("The IPX network number of the XRoute's destination.")
nlspGraphXRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteCost.setDescription("The cost to reach the XRoute's destination.")
nlspGraphXRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphXRouteHopCount.setDescription("The number of hops necessary to reach the XRoute's destination.")
nlspGraphServTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5), )
if mibBuilder.loadTexts: nlspGraphServTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServTable.setDescription('This table contains the information about the services associated with a node in the graph.')
nlspGraphServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspGraphServSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspGraphServNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspGraphServName"), (0, "NOVELL-NLSP-MIB", "nlspGraphServTypeValue"))
if mibBuilder.loadTexts: nlspGraphServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServEntry.setDescription('Each entry in the table contains the information for one service associated with the node.')
nlspGraphServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this entry corresponds.')
nlspGraphServNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServNLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServNLSPID.setDescription('The NLSP ID of the node.')
nlspGraphServName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServName.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServName.setDescription('The service name.')
nlspGraphServTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServTypeValue.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServTypeValue.setDescription("The service type's hexadecimal value.")
nlspGraphServType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServType.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServType.setDescription('The service type.')
nlspGraphServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 6), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServNetNum.setDescription('The IPX network number portion of the IPX address of the service.')
nlspGraphServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServNode.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServNode.setDescription('The node portion of the IPX address of the service.')
nlspGraphServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: nlspGraphServSocket.setDescription('The socket portion of the IPX address of the service.')
nlspLSPTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1), )
if mibBuilder.loadTexts: nlspLSPTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPTable.setDescription('The LSP header table.')
nlspLSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspLSPSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspLSPID"))
if mibBuilder.loadTexts: nlspLSPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPEntry.setDescription("Each entry corresponds to one LSP's header.")
nlspLSPSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPSysInstance.setDescription('The unique identifier for the instance of NLSP and IPX (via ipxSysInstance) to which this entry corresponds.')
nlspLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPID.setDescription('The value that uniquely identifies this LSP.')
nlspLSPLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPLifetime.setDescription('The number of seconds prior to the expiration of the LSP.')
nlspLSPSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPSeqNum.setDescription('The sequence number of the LSP.')
nlspLSPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPChecksum.setDescription('The checksum value of the LSP.')
nlspLSPRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPRouterType.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPRouterType.setDescription('The type of the router that sent the LSP.')
nlspLSPOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOverload.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOverload.setDescription("Indicates whether the sending router's LSP database is overloaded.")
nlspLSPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(27, 27)).setFixedLength(27)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPHeader.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPHeader.setDescription('The complete LSP header.')
nlspLSPOptTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2), )
if mibBuilder.loadTexts: nlspLSPOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptTable.setDescription('The LSP Options table.')
nlspLSPOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspLSPOptSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspLSPOptLSPID"), (0, "NOVELL-NLSP-MIB", "nlspLSPOptIndex"))
if mibBuilder.loadTexts: nlspLSPOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptEntry.setDescription('Each entry corresponds to one option from an LSP.')
nlspLSPOptSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptSysInstance.setDescription('The unique identifier of the instance of NLSP and IPX (via ipxSysInstance) to which this entry corresponds.')
nlspLSPOptLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptLSPID.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptLSPID.setDescription('The value that uniquely identifies the LSP.')
nlspLSPOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptIndex.setDescription('The value that uniquely identifies this option within the LSP.')
nlspLSPOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptCode.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptCode.setDescription('The code that identifies the type of the option.')
nlspLSPOptLength = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptLength.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptLength.setDescription("The length of the option's value field.")
nlspLSPOptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptValue.setStatus('mandatory')
if mibBuilder.loadTexts: nlspLSPOptValue.setDescription("The option's value field.")
mibBuilder.exportSymbols("NOVELL-NLSP-MIB", nlspTranslation=nlspTranslation, nlspNetMapTable=nlspNetMapTable, nlspNetMapEntry=nlspNetMapEntry, nlspNetMapNetNum=nlspNetMapNetNum, nlspSysOwnLSPPurges=nlspSysOwnLSPPurges, nlspNeighSysInstance=nlspNeighSysInstance, nlspNodeType=nlspNodeType, nlspGraphServType=nlspGraphServType, nlspGraphXRouteCost=nlspGraphXRouteCost, nlspGraphServName=nlspGraphServName, nlspNeighSysID=nlspNeighSysID, nlspPathDestNLSPID=nlspPathDestNLSPID, nlspNameMapID=nlspNameMapID, nlspIDMapEntry=nlspIDMapEntry, nlspCircuit=nlspCircuit, nlspLSPOverload=nlspLSPOverload, nlspPathTable=nlspPathTable, nlspSysNearestL2DefaultExists=nlspSysNearestL2DefaultExists, nlspSysEntry=nlspSysEntry, nlspDestEstThroughput=nlspDestEstThroughput, nlspSysAreaSysInstance=nlspSysAreaSysInstance, nlspNodeOverload=nlspNodeOverload, nlspLinkDelay=nlspLinkDelay, nlspNodeMaxPacketSize=nlspNodeMaxPacketSize, nlspLSPHeader=nlspLSPHeader, nlspCircTable=nlspCircTable, nlspGraphXRouteSysInstance=nlspGraphXRouteSysInstance, nlspNeighPriority=nlspNeighPriority, nlspIDMapNetNum=nlspIDMapNetNum, nlspSysMaxSeqNums=nlspSysMaxSeqNums, nlspNameMapServerName=nlspNameMapServerName, nlspSystem=nlspSystem, nlspNodeSysInstance=nlspNodeSysInstance, nlspNeighHoldTimer=nlspNeighHoldTimer, nlspNodeTable=nlspNodeTable, nlspDestSysInstance=nlspDestSysInstance, nlspCircPSNPsSent=nlspCircPSNPsSent, nlspIDMapTable=nlspIDMapTable, nlspLSPID=nlspLSPID, nlspNodeNetNum=nlspNodeNetNum, nlspSysBcastHelloInt=nlspSysBcastHelloInt, nlspDestTable=nlspDestTable, nlspDestNetNum=nlspDestNetNum, nlspSysNonBcastHelloInt=nlspSysNonBcastHelloInt, nlspSysState=nlspSysState, nlspNeighSysType=nlspNeighSysType, nlspLSPSeqNum=nlspLSPSeqNum, nlspNodeReachable=nlspNodeReachable, nlspGraphServTable=nlspGraphServTable, nlspNameMapTable=nlspNameMapTable, nlspNetMapID=nlspNetMapID, nlspGraph=nlspGraph, nlspActAreaSysInstance=nlspActAreaSysInstance, nlspNeighRemainingTime=nlspNeighRemainingTime, nlspNameMapSysInstance=nlspNameMapSysInstance, nlspLSPTable=nlspLSPTable, nlspNodeEntry=nlspNodeEntry, nlspSysL1Overloaded=nlspSysL1Overloaded, nlspLinkEntry=nlspLinkEntry, nlspSysMaxLSPGenInt=nlspSysMaxLSPGenInt, nlspDestID=nlspDestID, nlspLSPSysInstance=nlspLSPSysInstance, nlspPathSysInstance=nlspPathSysInstance, nlspCircL1CircID=nlspCircL1CircID, nlspNeighNICAddress=nlspNeighNICAddress, nlspSysID=nlspSysID, nlspLinkIndex=nlspLinkIndex, nlspPathEntry=nlspPathEntry, nlspCircPace=nlspCircPace, nlspSysOrigL1LSPBufSize=nlspSysOrigL1LSPBufSize, nlspSysAreaTable=nlspSysAreaTable, nlspLinkFromNeighCost=nlspLinkFromNeighCost, nlspNeighState=nlspNeighState, nlspCircHelloTimer=nlspCircHelloTimer, nlspGraphServNLSPID=nlspGraphServNLSPID, nlspLSPRouterType=nlspLSPRouterType, nlspNeighIndex=nlspNeighIndex, nlspCircL1DesRouterPriority=nlspCircL1DesRouterPriority, nlspNetMapSysInstance=nlspNetMapSysInstance, nlspNodeID=nlspNodeID, nlspActAreaEntry=nlspActAreaEntry, nlspGraphServSysInstance=nlspGraphServSysInstance, nlspSysSeqNumSkips=nlspSysSeqNumSkips, nlspSysMaxLSPAge=nlspSysMaxLSPAge, nlspPathLinkIndex=nlspPathLinkIndex, nlspGraphXRouteNLSPID=nlspGraphXRouteNLSPID, nlspNodeCost=nlspNodeCost, nlspNodeEstDelay=nlspNodeEstDelay, nlspLSPOptEntry=nlspLSPOptEntry, NLSPID=NLSPID, nlspSysAreaEntry=nlspSysAreaEntry, nlspNodeEstThroughput=nlspNodeEstThroughput, nlspCircRejNeighbors=nlspCircRejNeighbors, nlspCircEntry=nlspCircEntry, nlspNameMapEntry=nlspNameMapEntry, nlspDestNextHopID=nlspDestNextHopID, nlspLSPOptTable=nlspLSPOptTable, nlspSysResourceFailures=nlspSysResourceFailures, nlspIDMapServerName=nlspIDMapServerName, nlspLSPChecksum=nlspLSPChecksum, nlspLSPOptLength=nlspLSPOptLength, nlspNeighbors=nlspNeighbors, nlspNeighEntry=nlspNeighEntry, nlspSysMinLSPGenInt=nlspSysMinLSPGenInt, nlspGraphServEntry=nlspGraphServEntry, nlspSysHoldTimeMultiplier=nlspSysHoldTimeMultiplier, nlspSysL1DbaseOverloads=nlspSysL1DbaseOverloads, nlspLinkMaxPacketSize=nlspLinkMaxPacketSize, nlspGraphXRouteEntry=nlspGraphXRouteEntry, nlspIDMapSysInstance=nlspIDMapSysInstance, nlspGraphServTypeValue=nlspGraphServTypeValue, nlspCircInPackets=nlspCircInPackets, nlspSysDRBcastHelloInt=nlspSysDRBcastHelloInt, nlspCircNeighChanges=nlspCircNeighChanges, nlspActAreaNet=nlspActAreaNet, nlspLinkMediaType=nlspLinkMediaType, nlspSysIncorrectPackets=nlspSysIncorrectPackets, nlspCircState=nlspCircState, nlspLSPOptValue=nlspLSPOptValue, nlspGraphServSocket=nlspGraphServSocket, nlspSysCompSNPInt=nlspSysCompSNPInt, nlspNetMapServerName=nlspNetMapServerName, nlspForwarding=nlspForwarding, nlspActAreaTable=nlspActAreaTable, nlspLSPEntry=nlspLSPEntry, NetNumber=NetNumber, nlspNameMapNetNum=nlspNameMapNetNum, nlspCircOutPackets=nlspCircOutPackets, nlspSysInstance=nlspSysInstance, nlspNeighTable=nlspNeighTable, nlspLinkNLSPID=nlspLinkNLSPID, nlspSysReceivedLSPs=nlspSysReceivedLSPs, nlspCircL1DefaultCost=nlspCircL1DefaultCost, nlspLinkTable=nlspLinkTable, nlspDestCost=nlspDestCost, nlspCircActualMaxPacketSize=nlspCircActualMaxPacketSize, nlspDestEntry=nlspDestEntry, nlspCircSysInstance=nlspCircSysInstance, nlspSysNearestL2DefaultRouter=nlspSysNearestL2DefaultRouter, nlspLinkNeighNLSPID=nlspLinkNeighNLSPID, nlspLSPOptCode=nlspLSPOptCode, nlsp=nlsp, nlspLSPOptLSPID=nlspLSPOptLSPID, nlspNeighUsage=nlspNeighUsage, nlspLSP=nlspLSP, nlspLinkToNeighCost=nlspLinkToNeighCost, nlspActAreaMask=nlspActAreaMask, nlspCircIndex=nlspCircIndex, nlspLSPLifetime=nlspLSPLifetime, nlspGraphServNode=nlspGraphServNode, SystemID=SystemID, nlspIDMapID=nlspIDMapID, nlspLSPOptIndex=nlspLSPOptIndex, nlspSysAreaNet=nlspSysAreaNet, nlspSysAreaMask=nlspSysAreaMask, nlspSysTable=nlspSysTable, nlspSysTransmittedLSPs=nlspSysTransmittedLSPs, nlspCircLANL1DesRouterChanges=nlspCircLANL1DesRouterChanges, nlspNeighName=nlspNeighName, nlspGraphXRouteTable=nlspGraphXRouteTable, nlspLinkSysInstance=nlspLinkSysInstance, nlspNeighCircIndex=nlspNeighCircIndex, nlspCircL1DesRouter=nlspCircL1DesRouter, nlspGraphXRouteNetNum=nlspGraphXRouteNetNum, nlspSysMinBcastLSPTransInt=nlspSysMinBcastLSPTransInt, nlspSysMinNonBcastLSPTransInt=nlspSysMinNonBcastLSPTransInt, nlspCircPSNPsReceived=nlspCircPSNPsReceived, nlspDestEstDelay=nlspDestEstDelay, nlspSysCorrLSPs=nlspSysCorrLSPs, nlspSysWaitTime=nlspSysWaitTime, nlspGraphXRouteHopCount=nlspGraphXRouteHopCount, nlspLSPOptSysInstance=nlspLSPOptSysInstance, nlspSysVersion=nlspSysVersion, nlspSysVersionErrors=nlspSysVersionErrors, nlspLinkThroughput=nlspLinkThroughput, nlspSysPartSNPInt=nlspSysPartSNPInt, nlspGraphServNetNum=nlspGraphServNetNum)
