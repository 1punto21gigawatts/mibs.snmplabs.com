#
# PySNMP MIB module CISCO-ITP-MSU-RATES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-MSU-RATES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Bits, NotificationType, Unsigned32, TimeTicks, IpAddress, ModuleIdentity, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "NotificationType", "Unsigned32", "TimeTicks", "IpAddress", "ModuleIdentity", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "iso", "Gauge32")
TruthValue, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "TimeStamp")
ciscoItpMsuRatesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 529))
ciscoItpMsuRatesMIB.setRevisions(('2007-02-01 00:00', '2006-05-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoItpMsuRatesMIB.setRevisionsDescriptions(('Add cimrMsuTrafficMSUs to cimrMsuTrafficTable and create', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoItpMsuRatesMIB.setLastUpdated('200702010000Z')
if mibBuilder.loadTexts: ciscoItpMsuRatesMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoItpMsuRatesMIB.setContactInfo('Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoItpMsuRatesMIB.setDescription('This MIB provides information used to manage the number of MTP3 MSUs transmitted and received per processor. Many of the higher level protocols require several MSUs per transaction. Traffic capacity planning is based on MSUs not transactions. This MIB will provide information to determine current traffic. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides function similar to SS7 signalling point. The relevant ITU documents describing this technology is the ITU Q series, including ITU Q.700: Introduction to CCITT Signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signalling System No. 7.')
ciscoItpMsuRatesMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 0))
ciscoItpMsuRatesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 1))
ciscoItpMsuRatesMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 2))
cimrScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1))
cimrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2))
class CimrMsuThreshold(TextualConvention, Unsigned32):
    description = 'This textual convention defines a threshold used to monitor the rate of MSUs per second. The zero value is used to indicate that value has not been specified. It is important to note that the MSU thresholds should be based on processor type, routing protocols and system environments.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 4294967295), )
class CimrMsuRateState(TextualConvention, Integer32):
    description = "MSU Rate State: 'acceptable' - traffic for a specified direction is at the acceptable level. 'warning' - traffic for a specified direction is has reached or exceed warning level but is below the overloaded level. 'overloaded' - traffic for a specified direction has reached or exceeds overloaded level"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("acceptable", 1), ("warning", 2), ("overloaded", 3))

class CirbhMsuTrafficDirection(TextualConvention, Integer32):
    description = 'Direction of traffic on an processor.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("receive", 1), ("transmit", 2))

class CirbhMsuCurrentCount(TextualConvention, Gauge32):
    description = 'The value of this counter starts from zero and is increased when associated events occur, until and administrative operation in performed that requires the associated objects to be cleared.'
    status = 'current'

cimrMsuRateSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuRateSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cimrMsuRateSampleInterval.setDescription('The length of the interval used to calculate MSU rate.')
cimrMsuRateNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 3600), )).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuRateNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: cimrMsuRateNotifyInterval.setDescription('The length of the interval used to suppress ciscoItpMsuRcvdRateState and ciscoItpMsuSentRateState notifications.')
cimrMsuRateNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuRateNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cimrMsuRateNotifyEnable.setDescription("The MSU rate notification truth value. This object controls the generation of ciscoItpMsuRcvdRateState and ciscoItpMsuSentRateState notifications. 'true' Indicates that the notification of MSU rates has been enabled. 'false' Indicates that the notification MSU rates has been disabled.")
cimrMsuRateAcceptableThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1, 7), CimrMsuThreshold()).setUnits('MSUs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuRateAcceptableThreshold.setStatus('current')
if mibBuilder.loadTexts: cimrMsuRateAcceptableThreshold.setDescription('This object is used to establish a default value for all instances of the cimrMsuProcAcceptableThreshold object in the cimrMsuProcTable table. The value for this object must be less than the values specified by cimrMsuRateWarningThreshold and cimrMsuRateOverloadedThreshold objects. All changes to this threshold will take effect at the end of the current interval.')
cimrMsuRateWarningThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1, 8), CimrMsuThreshold()).setUnits('MSUs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuRateWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cimrMsuRateWarningThreshold.setDescription('This object is used to establish a default value for all instances of the cimrMsuProcWarningThreshold object in the cimrMsuProcTable table. The value for this object must be less than the values specified by cimrMsuRateOverloadedThreshold and greater than cimrMsuRateAcceptableThreshold objects. All changes to this threshold will take effect at the end of the current interval.')
cimrMsuRateOverloadedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 1, 9), CimrMsuThreshold()).setUnits('MSUs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuRateOverloadedThreshold.setStatus('current')
if mibBuilder.loadTexts: cimrMsuRateOverloadedThreshold.setDescription('This object is used to establish a default value for all instances of the cimrMsuProcOverloadedThreshold object in the cimrMsuProcTable table. The value for this object must be greater than the values specified by cimrMsuRateAcceptableThreshold and cimrMsuRateWarningThreshold objects. All changes to this threshold will take effect at the end of the current interval.')
cimrMsuProcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1), )
if mibBuilder.loadTexts: cimrMsuProcTable.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcTable.setDescription('This table provides information associated with each processor. Thresholds are provided to control the behavior of the following objects from the cimrMsuTrafficTable table. -- cimrMsuTrafficRateState -- cimrMsuTrafficRate -- cimrMsuTrafficSize -- cimrMsuProcDurWarning -- cimrMsuProcDurOverloaded Any changes to these thresholds will cause a reset of measurements which is indicated by cimrMsuProcReset and cimrMsuProcResetTimestamp objects. Notifications thresholds. In order to generate notifications when MSU rate switch states the customer must define traffic levels using the following objects. When the global objects contain non-zero values they will act as defaults to all entries in table. global: - cimrMsuRateAcceptableThreshold - cimrMsuRateWarningThreshold - cimrMsuRateOverloadedThreshold Per processor: - cimrMsuProcAcceptableThreshold - cimrMsuProcWarningThreshold - cimrMsuProcOverloadedThreshold The global thresholds only apply when all of the threshold objects at instance level are set to zero. Set operations against thresholds must be performed as single operation. Calculation of cimrMsuTrafficRateState object is performed in the following manner to only report significant changes in traffic. In order to switch to a higher state the traffic rate must equal or exceed the next higher threshold. For example when current state is acceptable the traffic must equal or exceed value specified by warning-threshold to obtain warning state. In order to switch to a lower state the traffic rate must be less than the next lower threshold. For example when current state is overloaded the traffic must drop below warning-threshold to obtain warning state. Example: Acceptable-Threshold = 2000 Warning-Threshold = 2500 Overloaded-Threshold = 3000 Sample Rate Old State New State ------ ---- ---------- ---------- 1 2000 Acceptable Acceptable 2 2500 Acceptable Warning 3 2200 Warning Warning 4 2000 Warning Acceptable 5 3000 Acceptable Overloaded 5 1000 Overloaded Acceptable')
cimrMsuProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcIndex"))
if mibBuilder.loadTexts: cimrMsuProcEntry.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcEntry.setDescription('Each entry represents a processor and is updated at end of interval specified by the cimrMsuRateSampleInterval object.')
cimrMsuProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cimrMsuProcIndex.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcIndex.setDescription('An index that uniquely represents a processor. This index is assigned arbitrarily by the engine and is not saved over reboots.')
cimrMsuProcPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuProcPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcPhysicalIndex.setDescription('The entPhysicalIndex of the physical entity for which the MSU measurements in this entry are maintained. The exact type of this entity is described by its entPhysicalVendorType value.')
cimrMsuProcAcceptableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 3), CimrMsuThreshold()).setUnits('MSUs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuProcAcceptableThreshold.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcAcceptableThreshold.setDescription('This object is used to specify a level of traffic below which the traffic is considered to be acceptable. All changes to this threshold will take effect at the end of the current interval. The value for this object must be less than the values specified by cimrMsuProcWarningThreshold and cimrMsuProcOverloadedThreshold objects.')
cimrMsuProcWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 4), CimrMsuThreshold()).setUnits('MSUs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuProcWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcWarningThreshold.setDescription('This object is used to specify a level of traffic that indicates a rate that is above acceptable level, but is below level that impacts routing of MSUs. All changes to this threshold will take effect at the end of the current interval. The value for this object must be greater than the values specified by cimrMsuProcAcceptableThreshold and less than cimrMsuProcOverloadedThreshold objects.')
cimrMsuProcOverloadedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 5), CimrMsuThreshold()).setUnits('MSUs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuProcOverloadedThreshold.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcOverloadedThreshold.setDescription('This object is used to specify a level of traffic that indicates a rate that may impact routing of MSUs. All changes to this threshold will take effect at the end of the current interval. The value for this object must be greater than the value specified for cimrMsuProcAcceptableThreshold and cimrMsuProcWarningThreshold objects.')
cimrMsuProcReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cimrMsuProcReset.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcReset.setDescription("This object object always returns the 'false' value. Setting the object to 'true' resets the following objects. cimrMsuProcDurWarning cimrMsuProcDurOverloaded cimrMsuTrafficMaxRate cimrMsuTrafficMaxRateTimestamp cimrMsuDist000to009Seconds cimrMsuDist010to019Seconds cimrMsuDist020to029Seconds cimrMsuDist030to039Seconds cimrMsuDist040to049Seconds cimrMsuDist050to059Seconds cimrMsuDist060to069Seconds cimrMsuDist070to079Seconds cimrMsuDist080to089Seconds cimrMsuDist090orAbove In addition, the cimrMsuRateResetTimestamp is set to the current sysUpTime.")
cimrMsuProcResetTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuProcResetTimestamp.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcResetTimestamp.setDescription('The value of sysUpTime when the measurements were reset by setting the cimrMsuProcReset object or by changing any of the following objects. cimrMsuRateSampleInterval cimrMsuRateAcceptableThreshold, cimrMsuRateWarningThreshold, cimrMsuRateOverloadedThreshold cimrMsuProcAcceptableThreshold cimrMsuProcWarningThreshold cimrMsuProcOverloadedThreshold This object will default to the time when instance was created.')
cimrMsuProcSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuProcSlotNumber.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcSlotNumber.setDescription('The number of slot contain processor and will be set to zero when platform does not support processsors in multiple slots.')
cimrMsuProcBayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuProcBayNumber.setStatus('current')
if mibBuilder.loadTexts: cimrMsuProcBayNumber.setDescription('The number of bay contain processor and will be set to zero when platform does not support processsors in multiple bays.')
cimrMsuTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2), )
if mibBuilder.loadTexts: cimrMsuTrafficTable.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficTable.setDescription('This table provides information on the traffic in MUS for each processor in both directions. Any MSU in which a processor is involved will be counted. Here are some examples of how MSUs would be counted. Traditional SS7 Links: MSU is received on Line card 1 that supports SS7 link and MSU is routed directly to line card 2 that supports output link. Line card 1 processor information will be updated to indicate it received MSU and line card 2 processor information will be updated to indicate it sent MSU. IP/SCTP based SS7 Links: IP based SS7 Links can be terminated on linecard or owned by the main processor. When SS7 link is terminated on main processor only the main processor information will be updated. The line card processor that owns the IP interface will be involved but will not be included in measurements. When the SS7 link is terminated on line card its processor information will be updated. It is important to note that packets exchanged for SCTP associations are different from SS7 MSUs. More than one SS7 MSU can be transmitted in a single IP packet. Also, the SCTP association exchanges control packets that are not counted as SS7 MSUs.')
cimrMsuTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcIndex"), (0, "CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficDirection"))
if mibBuilder.loadTexts: cimrMsuTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficEntry.setDescription('Each entry represents a processor traffic in a particular direction and is updated at end of interval specified by the cimrMsuRateSampleInterval object.')
cimrMsuTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 1), CirbhMsuTrafficDirection())
if mibBuilder.loadTexts: cimrMsuTrafficDirection.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficDirection.setDescription('The direction of traffic on a processor.')
cimrMsuTrafficRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 2), CimrMsuRateState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficRateState.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficRateState.setDescription('The state of traffic load for a particular direction and is calculated using the following objects. - cimrMsuTrafficRcvdRate - cimrMsuRateAcceptableThreshold - cimrMsuRateWarningThreshold - cimrMsuRateOverloadedThreshold - cimrMsuTrafficAcceptableThreshold - cimrMsuTrafficWarningThreshold - cimrMsuTrafficOverloadedThreshold')
cimrMsuTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 3), Gauge32()).setUnits('MSUs per seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficRate.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficRate.setDescription('Rate of MSUs over the interval specified by the cimrMsuRateSampleInterval object.')
cimrMsuTrafficSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 4), Gauge32()).setUnits('Average bytes per MSU').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficSize.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficSize.setDescription('The average size of MSU over the interval specified by the cimrMsuRateSampleInterval object.')
cimrMsuTrafficDurWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 5), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficDurWarning.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficDurWarning.setDescription("The number of seconds the cimrMsuTrafficRateState was in the 'warning' state.")
cimrMsuTrafficDurOverloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 6), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficDurOverloaded.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficDurOverloaded.setDescription("The number of seconds the cimrMsuTrafficRateState was in the 'overloaded' state.")
cimrMsuTrafficMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 7), Gauge32()).setUnits('MSUs per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficMaxRate.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficMaxRate.setDescription('Maximum value for the cimrMsuTrafficRate object since Setting this object to zero will clear the cimrMsuTrafficMaxTimestamp until the need next interval information is collected.')
cimrMsuTrafficMaxTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficMaxTimestamp.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficMaxTimestamp.setDescription('Time and date when cimrMsuTrafficMaxRate was last set or zero when object was cleared.')
cimrMsuTrafficMSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuTrafficMSUs.setStatus('current')
if mibBuilder.loadTexts: cimrMsuTrafficMSUs.setDescription('The total number of MSU handled by this processor.')
cimrMsuDistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3), )
if mibBuilder.loadTexts: cimrMsuDistTable.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDistTable.setDescription("This table provides distribution of MSU rates per processor in both the transmit and receive directions. The MSU rates are converted into percentages by the current overloaded-threshold by the following formula: (MSU-Rate * 100)/overloaded-threshold Any value over 100 is placed in 90 to 100 range. Any changes to the following thresholds or setting cimrMsuProcReset object to 'true' will cause information in table to be reset. global: - cimrMsuRateAcceptableThreshold - cimrMsuRateWarningThreshold - cimrMsuRateOverloadedThreshold Per processor: - cimrMsuProcAcceptableThreshold - cimrMsuProcWarningThreshold - cimrMsuProcOverloadedThreshold In order for this table to contain data either the cimrMsuRateOverloadedThreshold or cimrMsuProcOverloadedThreshold must be set to non-zero value. If both objects are zero then data is not collected for this table.")
cimrMsuDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcIndex"), (0, "CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficDirection"))
if mibBuilder.loadTexts: cimrMsuDistEntry.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDistEntry.setDescription('Each entry represents a processor and is updated at end of interval specified by the cimrMsuRateSampleInterval object.')
cimrMsuDist000to009Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 1), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist000to009Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist000to009Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 0 to 9 percent of the current overloaded-threshold value.')
cimrMsuDist010to019Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 2), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist010to019Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist010to019Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 10 to 19 percent of the current overloaded-threshold value.')
cimrMsuDist020to029Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 3), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist020to029Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist020to029Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 20 to 29 percent of the current overloaded-threshold value.')
cimrMsuDist030to039Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 4), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist030to039Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist030to039Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 30 to 39 percent of the current overloaded-threshold value.')
cimrMsuDist040to049Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 5), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist040to049Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist040to049Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 40 to 49 percent of the current overloaded-threshold value.')
cimrMsuDist050to059Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 6), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist050to059Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist050to059Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 50 to 59 percent of the current overloaded-threshold value.')
cimrMsuDist060to069Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 7), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist060to069Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist060to069Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 60 to 69 percent of the current overloaded-threshold value.')
cimrMsuDist070to079Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 8), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist070to079Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist070to079Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 70 to 79 percent of the current overloaded-threshold value.')
cimrMsuDist080to089Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 9), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist080to089Seconds.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist080to089Seconds.setDescription('The total number of seconds during which the MSU rate for this processor was from 80 to 89 percent of the current overloaded-threshold value.')
cimrMsuDist090orAbove = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 529, 1, 2, 3, 1, 10), CirbhMsuCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cimrMsuDist090orAbove.setStatus('current')
if mibBuilder.loadTexts: cimrMsuDist090orAbove.setDescription('The total number of seconds during which the MSU rate for this processor was above 90 percent of the current overloaded-threshold value.')
ciscoItpMsuRateState = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 529, 0, 1)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficRateState"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficRate"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficSize"))
if mibBuilder.loadTexts: ciscoItpMsuRateState.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuRateState.setDescription("This notification is generated once for the interval specified by the cimrMsuRateNotifyInterval object when the cimrMsuTrafficRateState object has the following state transitions. 'acceptable' -> 'warning' 'acceptable' -> 'overloaded' 'warning' -> 'overloaded' At the end of the interval specified by the cimrMsuRateNotifyInterval object another notification will be generated if the current state is different from state sent in last notification even if the state transition is not one of the above transitions. When the cimrMsuRateNotifyInterval is set to zero all state changes will generate notifications.")
ciscoItpMsuRatesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 1))
ciscoItpMsuRatesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 2))
ciscoItpMsuRatesMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 1, 1)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesScalarsGroup"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesObjects"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuDistObjects"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuRatesMIBCompliance = ciscoItpMsuRatesMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoItpMsuRatesMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-ITP-MSU-RATES-MIB.my MIB')
ciscoItpMsuRatesMIBCompliancesRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 1, 2)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesScalarsGroup"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesObjects"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuDistObjects"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesNotifyGroup"), ("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRatesObjectsRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuRatesMIBCompliancesRev1 = ciscoItpMsuRatesMIBCompliancesRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuRatesMIBCompliancesRev1.setDescription('The compliance statement for entities which implement the CISCO-ITP-MSU-RATES-MIB.my MIB')
ciscoItpMsuRatesScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 2, 1)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "cimrMsuRateSampleInterval"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuRateNotifyInterval"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuRateNotifyEnable"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuRateAcceptableThreshold"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuRateWarningThreshold"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuRateOverloadedThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuRatesScalarsGroup = ciscoItpMsuRatesScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuRatesScalarsGroup.setDescription('Objects used control collection MSU rates.')
ciscoItpMsuRatesObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 2, 2)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcPhysicalIndex"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcAcceptableThreshold"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcWarningThreshold"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcOverloadedThreshold"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcReset"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcResetTimestamp"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcSlotNumber"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuProcBayNumber"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficRateState"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficRate"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficSize"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficDurWarning"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficDurOverloaded"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficMaxRate"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficMaxTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuRatesObjects = ciscoItpMsuRatesObjects.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuRatesObjects.setDescription('ITP MSU rates object group.')
ciscoItpMsuDistObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 2, 3)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist000to009Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist010to019Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist020to029Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist030to039Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist040to049Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist050to059Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist060to069Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist070to079Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist080to089Seconds"), ("CISCO-ITP-MSU-RATES-MIB", "cimrMsuDist090orAbove"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuDistObjects = ciscoItpMsuDistObjects.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuDistObjects.setDescription('ITP MSU distribution object group.')
ciscoItpMsuRatesNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 2, 4)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "ciscoItpMsuRateState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuRatesNotifyGroup = ciscoItpMsuRatesNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuRatesNotifyGroup.setDescription('ITP MSU state notification group.')
ciscoItpMsuRatesObjectsRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 529, 2, 2, 5)).setObjects(("CISCO-ITP-MSU-RATES-MIB", "cimrMsuTrafficMSUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoItpMsuRatesObjectsRev1 = ciscoItpMsuRatesObjectsRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoItpMsuRatesObjectsRev1.setDescription('ITP total MSU handled by processor.')
mibBuilder.exportSymbols("CISCO-ITP-MSU-RATES-MIB", ciscoItpMsuRateState=ciscoItpMsuRateState, cimrMsuRateNotifyEnable=cimrMsuRateNotifyEnable, cimrMsuTrafficDurOverloaded=cimrMsuTrafficDurOverloaded, cimrMsuDist040to049Seconds=cimrMsuDist040to049Seconds, ciscoItpMsuRatesMIBConform=ciscoItpMsuRatesMIBConform, PYSNMP_MODULE_ID=ciscoItpMsuRatesMIB, cimrMsuDist060to069Seconds=cimrMsuDist060to069Seconds, cimrMsuProcOverloadedThreshold=cimrMsuProcOverloadedThreshold, CimrMsuThreshold=CimrMsuThreshold, cimrMsuTrafficDurWarning=cimrMsuTrafficDurWarning, cimrMsuProcWarningThreshold=cimrMsuProcWarningThreshold, ciscoItpMsuRatesMIBNotifs=ciscoItpMsuRatesMIBNotifs, ciscoItpMsuRatesMIBCompliance=ciscoItpMsuRatesMIBCompliance, ciscoItpMsuRatesObjects=ciscoItpMsuRatesObjects, CirbhMsuCurrentCount=CirbhMsuCurrentCount, ciscoItpMsuRatesNotifyGroup=ciscoItpMsuRatesNotifyGroup, cimrMsuDist000to009Seconds=cimrMsuDist000to009Seconds, ciscoItpMsuRatesMIBObjects=ciscoItpMsuRatesMIBObjects, cimrMsuProcPhysicalIndex=cimrMsuProcPhysicalIndex, cimrMsuTrafficDirection=cimrMsuTrafficDirection, cimrMsuRateWarningThreshold=cimrMsuRateWarningThreshold, ciscoItpMsuRatesMIBCompliances=ciscoItpMsuRatesMIBCompliances, ciscoItpMsuDistObjects=ciscoItpMsuDistObjects, cimrMsuDist010to019Seconds=cimrMsuDist010to019Seconds, ciscoItpMsuRatesObjectsRev1=ciscoItpMsuRatesObjectsRev1, cimrMsuDistTable=cimrMsuDistTable, cimrMsuDist080to089Seconds=cimrMsuDist080to089Seconds, cimrMsuDist070to079Seconds=cimrMsuDist070to079Seconds, cimrMsuProcIndex=cimrMsuProcIndex, cimrMsuTrafficRateState=cimrMsuTrafficRateState, cimrScalars=cimrScalars, cimrTables=cimrTables, cimrMsuProcBayNumber=cimrMsuProcBayNumber, cimrMsuTrafficTable=cimrMsuTrafficTable, cimrMsuRateSampleInterval=cimrMsuRateSampleInterval, cimrMsuTrafficSize=cimrMsuTrafficSize, cimrMsuProcAcceptableThreshold=cimrMsuProcAcceptableThreshold, ciscoItpMsuRatesMIB=ciscoItpMsuRatesMIB, ciscoItpMsuRatesMIBGroups=ciscoItpMsuRatesMIBGroups, cimrMsuProcResetTimestamp=cimrMsuProcResetTimestamp, cimrMsuTrafficMSUs=cimrMsuTrafficMSUs, cimrMsuProcReset=cimrMsuProcReset, CirbhMsuTrafficDirection=CirbhMsuTrafficDirection, cimrMsuProcTable=cimrMsuProcTable, ciscoItpMsuRatesMIBCompliancesRev1=ciscoItpMsuRatesMIBCompliancesRev1, cimrMsuRateNotifyInterval=cimrMsuRateNotifyInterval, cimrMsuRateOverloadedThreshold=cimrMsuRateOverloadedThreshold, cimrMsuDistEntry=cimrMsuDistEntry, ciscoItpMsuRatesScalarsGroup=ciscoItpMsuRatesScalarsGroup, cimrMsuProcSlotNumber=cimrMsuProcSlotNumber, cimrMsuRateAcceptableThreshold=cimrMsuRateAcceptableThreshold, cimrMsuTrafficEntry=cimrMsuTrafficEntry, cimrMsuTrafficRate=cimrMsuTrafficRate, cimrMsuDist020to029Seconds=cimrMsuDist020to029Seconds, cimrMsuDist030to039Seconds=cimrMsuDist030to039Seconds, CimrMsuRateState=CimrMsuRateState, cimrMsuTrafficMaxRate=cimrMsuTrafficMaxRate, cimrMsuTrafficMaxTimestamp=cimrMsuTrafficMaxTimestamp, cimrMsuDist090orAbove=cimrMsuDist090orAbove, cimrMsuProcEntry=cimrMsuProcEntry, cimrMsuDist050to059Seconds=cimrMsuDist050to059Seconds)
