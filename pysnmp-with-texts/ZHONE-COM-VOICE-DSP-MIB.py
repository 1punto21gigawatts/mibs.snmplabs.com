#
# PySNMP MIB module ZHONE-COM-VOICE-DSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-VOICE-DSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, iso, Gauge32, Counter32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ModuleIdentity, Bits, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "iso", "Gauge32", "Counter32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ModuleIdentity", "Bits", "Unsigned32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zhoneShelfIndex, zhoneVoice, zhoneSlotIndex, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneShelfIndex", "zhoneVoice", "zhoneSlotIndex", "zhoneModules")
ZhoneSlotValue, ZhoneShelfValue = mibBuilder.importSymbols("Zhone-TC", "ZhoneSlotValue", "ZhoneShelfValue")
comVoiceDsp = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 12))
comVoiceDsp.setRevisions(('2003-03-28 10:42', '2003-02-13 19:35', '2001-10-02 18:34', '2000-11-28 13:56', '2000-09-20 18:42',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comVoiceDsp.setRevisionsDescriptions(('V01.00.04 - Add echoReturnLoss object.', 'V01.00.03 - Made changes in the description of the following objects: jitterBufferType: dynamic is supported in VoIP only, static is supported in both VoATM and VoIP. jitterBufferSize: Changed the range. Both objects are supported on BAN, S100 and ZEdge. MALC support is not complete yet. echo-cancellation-type: Identified the ones supported. silence-supression-type: Identified the ones supported, and swapped the descriptions of silsuponsidon and silsuponsidconst.', 'V01.00.02 - Made changes in the description of the following objects: redundancyOverSubscriptionType: Supported only on BAN with VASP card(s) jitterBufferSize: Not supported. interArrvJitThreshold: Not Supported pktsLostThreshold: Not Supported', 'V01.00.01 - Corrected MIB import problem for zhoneVoice for the MG-Soft bui file.', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comVoiceDsp.setLastUpdated('200303281935Z')
if mibBuilder.loadTexts: comVoiceDsp.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comVoiceDsp.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: comVoiceDsp.setDescription('Voice DSP MIB for Voice Application Specific Processing cards.')
zhoneVoiceDsp = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3))
if mibBuilder.loadTexts: zhoneVoiceDsp.setStatus('current')
if mibBuilder.loadTexts: zhoneVoiceDsp.setDescription("The MIB module to describe managed objects for Zhone's voice DSP applications. The Voice DSP MIB has the following components: * voiceDspDefaultConfiguration * voiceDspStatusTable * channelStatusTable * voiceDspTraps")
voiceDspDefaultConfiguration = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1))
if mibBuilder.loadTexts: voiceDspDefaultConfiguration.setStatus('current')
if mibBuilder.loadTexts: voiceDspDefaultConfiguration.setDescription('System-wide defaults for voice DSP variables. These values will be used by voice DSP to set up default values to be used per call.')
redundancyOverSubscriptionType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyOverSubscriptionType.setStatus('current')
if mibBuilder.loadTexts: redundancyOverSubscriptionType.setDescription("voice DSP redundancy over-subscription model. It is important to know the concept of active versus standby resources in order to understand how over- subscription works. For each call that is made on our equipment, resources are used. A resource is active if it is currently in use and it is standby if it is being held in case of the active's failure. If an active resourse fails, the standby can take over and the call continues. On the standby resources in a redundancy configuration can be oversubscribed. A service provider system administrator can configure a voice DSP system to use one of the following oversubscription models: * none: implies 1:1 (one to one) oversubscription. When a standby is allocated, the pool of available actives is depleted by one. * low: implies 1:2 oversubscription. * medium: implies 1:4 oversubscription. * high: implies infinite oversubscription. Active pool is never depleted when any standbys are allocated. If all active resources are used for real calls, no standby resources will be available to take over a failed call. The default value of this variable is high. This variable is supported only on BAN with VASP card(s).")
jitterBufferType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jitterBufferType.setStatus('current')
if mibBuilder.loadTexts: jitterBufferType.setDescription('Voice DSP channel jitter buffer defaults. There are two types of jitter algorithms: static and dynamic. Dynamic allows the jitter buffer to grow and shrink as inter-arrival jitter changes. A static jitter buffer does not. Some examples of the voice connection types used for; Voice Over ATM (VoATM): pots-to-aal2, isdn-to-aal2, aal2-to-gr303, aal2-to-v52. Voice Over IP (VoIP) : sip-to-ds1, sip-to-gr303, sip-to-v52. Dynamic jitter buffer is not supported in VoATM case. Default jitter buffer type is static for VoATM, and dynamic for VoIP.')
jitterBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jitterBufferSize.setStatus('current')
if mibBuilder.loadTexts: jitterBufferSize.setDescription('Voice DSP jitter buffer size in milliseconds. More specifically, it refers to the amount of memory usage that can store certain milliseconds of voice. There are two types of jitter algorithms: static and dynamic. Dynamic allows the jitter buffer to grow and shrink as inter-arrival jitter changes. A static jitter buffer does not. When the jitterBufferType is dynamic, jitterBufferSize is the initial buffer size the jitter buffer can grow to. Some examples of the voice connection types used for; Voice Over ATM (VoATM): pots-to-aal2, isdn-to-aal2, aal2-to-gr303, aal2-to-v52. Voice Over IP (VoIP) : sip-to-ds1, sip-to-gr303, sip-to-v52. Valid range is 1 to 33 milliseconds for VoATM case. Valid range is 1 to 100 milliseconds for VoIP case. Default jitter buffer size is 10 milliseconds.')
interArrvJitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: interArrvJitThreshold.setStatus('current')
if mibBuilder.loadTexts: interArrvJitThreshold.setDescription('The inter-arrival jitter threshold per channel used as a trigger value in milliseconds to generate a trap when its value is passed. If this value is 0, the threshold mointoring is disabled for inter-arrival jitter. Valid range is 0 to 100 milliseconds. The default value is 80 milliseconds. This variable is not supported.')
pktsLostThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktsLostThreshold.setStatus('current')
if mibBuilder.loadTexts: pktsLostThreshold.setDescription('Voice DSP channel packets lost per minute threshold. A trap will be generated when this value is passed. If this value is 0, the threshold mointoring is disabled for packets lost. Valid range for this value is from 0 to 10000 pkts/ min. The default value is 600 pkts/min. This variable is not supported.')
echoCancellationType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("g165EchoTL16", 2), ("g165EchoTL32", 3), ("g165EchoTL48", 4), ("g168EchoTL32", 5), ("g168EchoTL48", 6), ("g168EchoTL64", 7), ("g168EchoTL80", 8), ("g168EchoTL96", 9), ("g168EchoTL112", 10), ("g168EchoTL128", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: echoCancellationType.setReference('ITU-T Rec. G.165 (03/1993) Echo Cancellers ITU-T Rec. G.168 (04/2000) Digital Network Echo Cancellers')
if mibBuilder.loadTexts: echoCancellationType.setStatus('current')
if mibBuilder.loadTexts: echoCancellationType.setDescription('This data informs which echo cancellation algorithm to be used by default: 165 or 168 for a particular channel. The numbers 165 and 168 are the ITU designations for the algorithms. The number following the designation describes the echo tail length in milliseconds. Both G.165 and G.168 are ITU-T recommendations. G.168 has slightly stricter technical specs. G.168 defines much better how the tests are performed. If an echo canceller passes the G.165 spec, then it is G.165 compliant. If it passes G.168, it is both G.168 and G.165 compliant. The echo tail length required depends on factors such as network configuration, local loop length, line frequency response, etc. Generally, 16 ms is more than adequate for local loop (ie. Zedge) and 32 ms is a good minimum for Network side. Our products currently support up to 48 ms of echo tail length, MALC supports 16 ms of echo tail length. Valid values for the variable are: * off - echo cancellation is off (on all platforms). * g165EchoTL16 - G.165 echo cancellation with echo tail length of 16ms (on MALC only). * g168EchoTL48 - G.168 echo cancellation with echo tail length of 48ms (on the other platforms, i.e.: BAN, Sechtor 100, Z-Edge64). Following values are not supported: * g165EchoTL32 - G.165 echo cancellation with echo tail length of 32ms. * g165EchoTL48 - G.165 echo cancellation with echo tail length of 48ms. * g168EchoTL32 - G.168 echo cancellation with echo tail length of 32ms. * g168EchoTL64 - G.168 echo cancellation with echo tail length of 64ms. * g168EchoTL80 - G.168 echo cancellation with echo tail length of 80ms. * g168EchoTL96 - G.168 echo cancellation with echo tail length of 96ms. * g168EchoTL112 - G.168 echo cancellation with echo tail length of 112ms. * g168EchoTL128 - G.168 echo cancellation with echo tail length of 128ms. The default value is g165EchoTL16 for MALC, and g168EchoTL48 for the other platforms.')
silenceSuppressionType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silSupOff", 1), ("silSupOnSidOff", 2), ("silSupOnSidOn", 3), ("silSupOnSidConst", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: silenceSuppressionType.setStatus('current')
if mibBuilder.loadTexts: silenceSuppressionType.setDescription('This data informs a voice DSP what type of silence suppression algorithm to use on a channel. Silence suppression is used to suppress packet generation during periods of silence of a voice call. The SID (silence descriptor) frame is generated at the start of a silence period, or periodically, and it is used to characterize the power level of the background noise during silence period on the encode side of the voice path. The SID frame is then passed to the decode side through the packet encoding medium (AAL2 or RTP). The decode side then generates comfort noise at an equivalent power level dictated by the SID frame values. Valid values for the variable are: * silSupOff - silence suppression is off. * silSupOnSidOn - send an SID frame at a specified constant interval (e.g. 100ms). Following values are not supported: * silSupOnSidOff - discontinue transmission during silence periods and no SID frame is sent. * silSupOnSidConst - send an initial SID frame and then discontinue transmission. Silence suppression is not supported on MALC. The default value is silSupOff.')
echoReturnLoss = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("erl0dB", 1), ("erl3dB", 2), ("erl6dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: echoReturnLoss.setStatus('current')
if mibBuilder.loadTexts: echoReturnLoss.setDescription('The amount of loss between the transmitted signal and the reflected echo back from the hybrid where the 4-to-2 wire conversion takes place. For MALC: 0dB and 6dB. 6dB is default. For all other platforms: 0dB, 3dB, 6dB. 3db is default.')
voiceDspStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 2), )
if mibBuilder.loadTexts: voiceDspStatusTable.setStatus('current')
if mibBuilder.loadTexts: voiceDspStatusTable.setDescription('Current status information for the voice DSP application. This table gives a current view of how a voice DSP is doing since the voice DSP is started.')
voiceDspStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 2, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: voiceDspStatusEntry.setStatus('current')
if mibBuilder.loadTexts: voiceDspStatusEntry.setDescription('An entry in the voiceDspStatusTable.')
voiceDspMaxChannelOnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1008))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceDspMaxChannelOnBoard.setStatus('current')
if mibBuilder.loadTexts: voiceDspMaxChannelOnBoard.setDescription('Maximum number of channels a voice DSP can handle at the present time. The valid range for DSP boards we currently support is 0 to 1008.')
voiceDspActiveChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1008))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceDspActiveChannelCount.setStatus('current')
if mibBuilder.loadTexts: voiceDspActiveChannelCount.setDescription('Number of channels currently active. The maximum value of this variable should not exceed voiceDspMaxChannelOnBoard.')
voiceDspHiWaterChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1008))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceDspHiWaterChannelCount.setStatus('current')
if mibBuilder.loadTexts: voiceDspHiWaterChannelCount.setDescription('The highest channel count since this voice DSP has been running. The maximum value of this variable should not exceed voiceDspMaxChannelOnBoard.')
voiceDspResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceDspResetCount.setStatus('current')
if mibBuilder.loadTexts: voiceDspResetCount.setDescription('Number of slave DSP resets that have occurred within a voice DSP. A reset occurs when a slave DSP crashes. This counter is incremented each time voice DSP detects a slave DSP crash.')
channelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3), )
if mibBuilder.loadTexts: channelStatusTable.setStatus('current')
if mibBuilder.loadTexts: channelStatusTable.setDescription('This table gives a detailed snapshot view of all the voice calls the voice DSP is currently processing. Only the current active calls are reported in this table and there is no information about call sessions that are already terminated.')
channelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"), (0, "ZHONE-COM-VOICE-DSP-MIB", "channelId"))
if mibBuilder.loadTexts: channelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: channelStatusEntry.setDescription('An entry in the channelStatusTable.')
channelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelId.setStatus('current')
if mibBuilder.loadTexts: channelId.setDescription('Logical channel id of a call. The valid range of this id is from 1 to 65536. At any single instance, there should at most one call with the same channel id but over time the same channel id can be used for different calls.')
channelVoiceSessionIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelVoiceSessionIdHigh.setStatus('current')
if mibBuilder.loadTexts: channelVoiceSessionIdHigh.setDescription('The high 32 bits of the session number of a voice call. The session id is used to keep track all resources used by a call. Detailed call performance statistics can be supported in the future with session id uniquely identify each individual call. Voice session id is a unique 64 bit number and it will never be repeated.')
channelVoiceSessionIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelVoiceSessionIdLow.setStatus('current')
if mibBuilder.loadTexts: channelVoiceSessionIdLow.setDescription('The low 32 bits of the session number of a voice call. The session id is used to keep track all resources used by a call. Detailed call performance statistics can be supported in the future with session id uniquely identify each individual call. Voice session id is a unique 64 bit number and it will never be repeated.')
channelCcrpShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 4), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelCcrpShelf.setStatus('current')
if mibBuilder.loadTexts: channelCcrpShelf.setDescription('The shelf where the Call Control Resource Provider (CCRP) resides. CCRP process acts as a gateway for call signaling between TDM equipment and the ATM AAL2 network. Range of valid values is 1-255. Note 0 is an invalid value. ')
channelCcrpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 5), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelCcrpSlot.setStatus('current')
if mibBuilder.loadTexts: channelCcrpSlot.setDescription('The slot where the Call Control Resource Provider (CCRP) resides. CCRP process acts as a gateway for call signaling between TDM equipment and the ATM AAL2 network. Range of valid values is 1-17. Note 0 is an invalid value.')
channelTrunkCtrpShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 6), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTrunkCtrpShelf.setStatus('current')
if mibBuilder.loadTexts: channelTrunkCtrpShelf.setDescription('The shelf where the Trunk Call Temrination Resource Provider (TrunkCtrp) resides. TrunkCtrp is a proccess through which call signaling travels to and from TDM equipment. The CCRP above does not communicate directly with TDM; it does so through this CTRP. Range of valid values is 1-255. Note 0 is an invalid value.')
channelTrunkCtrpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 7), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTrunkCtrpSlot.setStatus('current')
if mibBuilder.loadTexts: channelTrunkCtrpSlot.setDescription('The slot where the Trunk Call Temrination Resource Provider (TrunkCtrp) resides. TrunkCtrp is a proccess through which call signaling travels to and from TDM equipment. The CCRP above does not communicate directly with TDM; it does so through this CTRP. Range of valid values is 1-17. Note 0 is an invalid value.')
channelPktCtrpShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 8), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelPktCtrpShelf.setStatus('current')
if mibBuilder.loadTexts: channelPktCtrpShelf.setDescription('The shelf where the Packet Call Temrination Resource Provider (PktCtrp) resides. PktCtrp is a proccess through which call signaling travels to and from ATM AAL2 network. Range of valid values is 1-255. Note 0 is an invalid value.')
channelPktCtrpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 9), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelPktCtrpSlot.setStatus('current')
if mibBuilder.loadTexts: channelPktCtrpSlot.setDescription('The slot where the Packet Call Temrination Resource Provider (PktCtrp) resides. PktCtrp is a proccess through which call signaling travels to and from ATM AAL2 network. Range of valid values is 1-17. Note 0 is an invalid value.')
channelActiveCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("g711Ulaw", 1), ("g711Alaw", 2), ("g726", 3), ("g729A", 4), ("g729B", 5), ("g729E", 6), ("g723R1KBPS5Dot3", 7), ("g723R1KBPS6Dot3", 8), ("g723R1AKBPS5Dot3", 9), ("g723R1AKBPS6Dot3", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelActiveCodec.setReference('ITU-T Recommendation G.711 (11/88) - Pulse code modulation (PCM) of voice frequencies. ITU-T Recommendation G.726 (12/90) - 40, 32, 24, 16 kbit/s Adaptive Differential Pulse Code Modulation (ADPCM). ITU-T Recommendation G.729 (03/96) - C source code and test vectors for implementation verification of the G.729 8 kbit/s CS-ACELP speech coder. ITU-T Recommendation G.723.1 (03/96) - Dual rate speech coder for multimedia communications transmitting at 5.3 and 6.3 kbit/s.')
if mibBuilder.loadTexts: channelActiveCodec.setStatus('current')
if mibBuilder.loadTexts: channelActiveCodec.setDescription('Types of voice codecs on the current call. G.711, G.726, G.729 and G.723 are ITU-T standards for voice and multimedia modulation and digital encoding. Valid values for this variable can be: * g711Ulaw - G.711 Ulaw coding standard at 64 kbps * g711Alaw - G.711 Alaw coding standard at 64 kbps * g726 - G.726 ADPCM coding stardards at 48/56/64 kbps * g729A - G.729 Annex A CS-ACELP coding standard at 8 kbps * g729B - G.729 Annex B CS-ACELP coding standard with silence suppressionat 8 kbps * g729E - G.729 Annex E CS-ACELP coding standard with silence suppressionat 11.8 kbps * g723R1KBPS5Dot3 - G.723.1 coding standard at 5.3 kbps * g723R1KBPS6Dot3 - G.723.1 coding standard at 6.3 kbps * g723R1AKBPS5Dot3 - G.723.1 Annex A coding standard at 5.3 kbps * g723R1AKBPS6Dot3 - G.723.1 Annex coding standard at 6.3 kbps')
channelTimeAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTimeAlive.setStatus('current')
if mibBuilder.loadTexts: channelTimeAlive.setDescription('This indicates how long this channel has been running in TimeTicks. A channel is considered alive when the call parties pick up the phone and data starts to flow and it is no longer alive when the phone is hung up. One TimeTick is one hundredth of a second.')
channelPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelPktsSent.setStatus('current')
if mibBuilder.loadTexts: channelPktsSent.setDescription('Number of packets transmitted.')
channelBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBytesSent.setStatus('current')
if mibBuilder.loadTexts: channelBytesSent.setDescription('Number of bytes transmitted.')
channelPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelPktsReceived.setStatus('current')
if mibBuilder.loadTexts: channelPktsReceived.setDescription('Number of packets received.')
channelBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelBytesReceived.setStatus('current')
if mibBuilder.loadTexts: channelBytesReceived.setDescription('Number of bytes received.')
channelPktsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelPktsLost.setStatus('current')
if mibBuilder.loadTexts: channelPktsLost.setDescription('Number of packets lost.')
channelInterArrvJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 17), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: channelInterArrvJitter.setStatus('current')
if mibBuilder.loadTexts: channelInterArrvJitter.setDescription('The inter arrival jitter in milliseconds.')
channelJitterBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 3, 1, 18), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: channelJitterBufferSize.setStatus('current')
if mibBuilder.loadTexts: channelJitterBufferSize.setDescription('Size of jitter buffer in milliseconds. The jitter buffer is used to compensate for inter-arrival packet jitter. It is accomplished by keeping a buffer of packets to allow continuous playout of voice.')
voiceDspTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 4))
if mibBuilder.loadTexts: voiceDspTraps.setStatus('current')
if mibBuilder.loadTexts: voiceDspTraps.setDescription('All voice DSP related traps are defined under voiceDspTraps.')
voiceDspTrapsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 4, 0))
if mibBuilder.loadTexts: voiceDspTrapsPrefix.setStatus('current')
if mibBuilder.loadTexts: voiceDspTrapsPrefix.setDescription('prefix 0 for voiceDspTraps as required by SNMPv2.')
voiceDspReset = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 4, 0, 1)).setObjects(("Zhone", "zhoneShelfIndex"), ("Zhone", "zhoneSlotIndex"), ("ZHONE-COM-VOICE-DSP-MIB", "voiceDspResetCount"))
if mibBuilder.loadTexts: voiceDspReset.setStatus('current')
if mibBuilder.loadTexts: voiceDspReset.setDescription('Notification that a voice DSP just reset.')
voiceDspChannelPktsLoss = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 4, 0, 2)).setObjects(("Zhone", "zhoneShelfIndex"), ("Zhone", "zhoneSlotIndex"), ("ZHONE-COM-VOICE-DSP-MIB", "channelId"), ("ZHONE-COM-VOICE-DSP-MIB", "channelPktsLost"))
if mibBuilder.loadTexts: voiceDspChannelPktsLoss.setStatus('current')
if mibBuilder.loadTexts: voiceDspChannelPktsLoss.setDescription('Notification to be generated when channelPktsPktsLost is more than the voice Dsp default pktsLostThreshold.')
voiceDspChannelInterArrvJitterTrigger = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 3, 4, 0, 3)).setObjects(("Zhone", "zhoneShelfIndex"), ("Zhone", "zhoneSlotIndex"), ("ZHONE-COM-VOICE-DSP-MIB", "channelId"), ("ZHONE-COM-VOICE-DSP-MIB", "channelInterArrvJitter"))
if mibBuilder.loadTexts: voiceDspChannelInterArrvJitterTrigger.setStatus('current')
if mibBuilder.loadTexts: voiceDspChannelInterArrvJitterTrigger.setDescription('Notification to be generated when channelInterArrvJitter is more than the voice Dsp default interArrvJitThreshold.')
mibBuilder.exportSymbols("ZHONE-COM-VOICE-DSP-MIB", jitterBufferSize=jitterBufferSize, channelPktCtrpSlot=channelPktCtrpSlot, voiceDspChannelPktsLoss=voiceDspChannelPktsLoss, channelPktsSent=channelPktsSent, voiceDspStatusTable=voiceDspStatusTable, channelTimeAlive=channelTimeAlive, voiceDspChannelInterArrvJitterTrigger=voiceDspChannelInterArrvJitterTrigger, channelVoiceSessionIdLow=channelVoiceSessionIdLow, channelBytesReceived=channelBytesReceived, voiceDspResetCount=voiceDspResetCount, voiceDspReset=voiceDspReset, channelVoiceSessionIdHigh=channelVoiceSessionIdHigh, redundancyOverSubscriptionType=redundancyOverSubscriptionType, PYSNMP_MODULE_ID=comVoiceDsp, pktsLostThreshold=pktsLostThreshold, voiceDspStatusEntry=voiceDspStatusEntry, channelPktsLost=channelPktsLost, interArrvJitThreshold=interArrvJitThreshold, voiceDspMaxChannelOnBoard=voiceDspMaxChannelOnBoard, jitterBufferType=jitterBufferType, channelCcrpSlot=channelCcrpSlot, channelInterArrvJitter=channelInterArrvJitter, echoCancellationType=echoCancellationType, voiceDspTraps=voiceDspTraps, channelStatusEntry=channelStatusEntry, channelTrunkCtrpShelf=channelTrunkCtrpShelf, echoReturnLoss=echoReturnLoss, channelStatusTable=channelStatusTable, channelBytesSent=channelBytesSent, voiceDspActiveChannelCount=voiceDspActiveChannelCount, channelCcrpShelf=channelCcrpShelf, channelTrunkCtrpSlot=channelTrunkCtrpSlot, voiceDspTrapsPrefix=voiceDspTrapsPrefix, silenceSuppressionType=silenceSuppressionType, voiceDspHiWaterChannelCount=voiceDspHiWaterChannelCount, channelPktsReceived=channelPktsReceived, channelJitterBufferSize=channelJitterBufferSize, zhoneVoiceDsp=zhoneVoiceDsp, channelActiveCodec=channelActiveCodec, comVoiceDsp=comVoiceDsp, channelId=channelId, channelPktCtrpShelf=channelPktCtrpShelf, voiceDspDefaultConfiguration=voiceDspDefaultConfiguration)
