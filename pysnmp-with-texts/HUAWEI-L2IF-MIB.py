#
# PySNMP MIB module HUAWEI-L2IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-L2IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifDescr, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIdOrNone, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "VlanId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, NotificationType, IpAddress, iso, Gauge32, Counter32, TimeTicks, Counter64, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "NotificationType", "IpAddress", "iso", "Gauge32", "Counter32", "TimeTicks", "Counter64", "Integer32", "ModuleIdentity")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
hwL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42))
hwL2IfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1))
if mibBuilder.loadTexts: hwL2IfMib.setLastUpdated('200505100836Z')
if mibBuilder.loadTexts: hwL2IfMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwL2IfMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwL2IfMib.setDescription('information of layer2 interface and information of hybrid port and information of trunk port')
class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 0 through 7, the second octet specifying vlans 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered vlan, and the least significant bit represents the highest numbered vlan. Thus, each vlan of the link is represented by a single bit within the value of this object. If that bit has a value of '1' then that vlan is included in the set of vlans; the vlan is not included if its bit has a value of '0'."
    status = 'current'

hwL2IfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1))
hwL2Interface = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1))
hwL2IfPortMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfPortMax.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortMax.setDescription('Max ports that this device supports,BRIDGE-MIB have a resemble definition.')
hwL2TopologyDetect = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2TopologyDetect.setStatus('current')
if mibBuilder.loadTexts: hwL2TopologyDetect.setDescription('Whether to enable layer2 topology detection.')
hwL2IfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3), )
if mibBuilder.loadTexts: hwL2IfTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTable.setDescription(' This is a table of layer2 interface,so it displays some attribute of layer2 interface.')
hwL2IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfPortNum"))
if mibBuilder.loadTexts: hwL2IfEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfEntry.setDescription(' Entries of extended Huawei private interface information table ')
hwL2IfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2IfPortNum.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortNum.setDescription('Number of layer2 interface port, a unique value, for each port.It is recommended that values are assigned contiguously starting from 1. ')
hwL2IfPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIfIndex.setDescription('A unique value, greater than zero, for each interface or interface sub-layer in the managed system. The value is consistent with the ifIndex in ifTable of IF-MIB.')
hwL2IfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("trunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4), ("qinq", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPortType.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortType.setDescription(" Layer2 interface Port type, it contains invalid(0), trunk(1), access(2), hybrid(3), fabric(4)and qinq(5).Do not support fabric(4) now.invalid(0),which we read only,can't modify.")
hwL2IfPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPVID.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPVID.setDescription(' Layer2 interface Port VLAN ID')
hwL2IfIsSrcMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfIsSrcMacFilter.setStatus('current')
if mibBuilder.loadTexts: hwL2IfIsSrcMacFilter.setDescription(" Whether to filter source MAC address. We don't support it now.")
hwL2IfMacAddrLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iVL", 1), ("sVL", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfMacAddrLearnMode.setStatus('current')
if mibBuilder.loadTexts: hwL2IfMacAddrLearnMode.setDescription(' Status indicates mac address learn mode of the interface. IVL(1) means independent VLAN learning.SVL means shared VLAN learning. We only support iVL now.')
hwL2IfMacAddressLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("discard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfMacAddressLearn.setStatus('current')
if mibBuilder.loadTexts: hwL2IfMacAddressLearn.setDescription(' Status indicates if the interface is allowed to learn mac address, enable(1) can be setted, (enabled(1) means that the interface can learn mac address), otherwise disabled(2) can be setted. discard(3) means the interface will drop packets.')
hwL2IfBcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfBcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwL2IfBcastRatio.setDescription(" Broadcast-suppression ratio. Default is 100% . 100% indicates that the broadcast isn't suppressed.")
hwL2IfMcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfMcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwL2IfMcastRatio.setDescription(" Multicast-suppression ratio.Default is 100%, 100% indicates that the multicast isn't suppressed.")
hwL2IfUcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfUcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwL2IfUcastRatio.setDescription(" Unicastsuppression ratio. Default is 100% , 100% indicates that the broadcast isn't suppressed.")
hwL2IfOutBcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfOutBcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwL2IfOutBcastRatio.setDescription(" Outbound broadcast-suppression ratio. Default is 100% . 100% indicates that the broadcast isn't suppressed.")
hwL2IfOutMcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfOutMcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwL2IfOutMcastRatio.setDescription(" Outbound multicast-suppression ratio.Default is 100%, 100% indicates that the multicast isn't suppressed.")
hwL2IfOutUcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfOutUcastRatio.setStatus('current')
if mibBuilder.loadTexts: hwL2IfOutUcastRatio.setDescription(" Outbound unicastsuppression ratio. Default is 100% , 100% indicates that the broadcast isn't suppressed.")
hwL2IfDiscardBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfDiscardBcast.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDiscardBcast.setDescription(' The flag of droping the broadcast packets, 1:discard; 2:forward(default).')
hwL2IfDiscardUnknownMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfDiscardUnknownMcast.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDiscardUnknownMcast.setDescription(' The flag of droping the unknown mutilcast packets, 1:discard; 2:forward(default).')
hwL2IfDiscardUnknownUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 16), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfDiscardUnknownUcast.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDiscardUnknownUcast.setDescription(' The flag of droping the unknown unicast packets, 1:discard; 2:forward(default).')
hwL2IfBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfBpdu.setStatus('current')
if mibBuilder.loadTexts: hwL2IfBpdu.setDescription('Bpdu enable in port.')
hwL2IfPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPortPriority.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortPriority.setDescription('Port priority about interface.')
hwL2IfPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfPortName.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortName.setDescription('The interface name.')
hwL2IfInInvalidVlanPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfInInvalidVlanPkts.setStatus('current')
if mibBuilder.loadTexts: hwL2IfInInvalidVlanPkts.setDescription(' The number of invalid VLAN packets.')
hwL2IfFlushEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 21), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfFlushEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfFlushEnable.setDescription(' The flush enable status of layer2 port.')
hwL2IfFlushControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfFlushControlVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2IfFlushControlVlan.setDescription(' The control vlan of flush packet.')
hwL2IfCurrentInBcastPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 23), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfCurrentInBcastPercent.setStatus('current')
if mibBuilder.loadTexts: hwL2IfCurrentInBcastPercent.setDescription(' The flag of qinq port trust default priority, 1:enable; 2:disable(default).')
hwL2IfCurrentOutBcastPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 24), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfCurrentOutBcastPercent.setStatus('current')
if mibBuilder.loadTexts: hwL2IfCurrentOutBcastPercent.setDescription(' The flag of port offline status, 1:enable; 2:disable(default).')
hwL2IfQinqVlanTransEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 25), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfQinqVlanTransEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfQinqVlanTransEnable.setDescription('Enable QinQ VLAN translation, 1:enable; 2:disable(default).')
hwL2IfQinqVlanTransMissDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDrop", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfQinqVlanTransMissDrop.setStatus('current')
if mibBuilder.loadTexts: hwL2IfQinqVlanTransMissDrop.setDescription('Packets are dropped when a VLAN translation miss occurs, 1:noDrop(default); 2:drop.')
hwL2IfIpSubnetVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 27), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfIpSubnetVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfIpSubnetVlanEnable.setDescription('Enable VLAN assignment based on ip subnet, 1:enable(default); 2:disable.')
hwL2IfMacVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 28), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfMacVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfMacVlanEnable.setDescription('Mac Vlan enable, 1:enable; 2:disable(default)')
hwL2IfPolicyVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 29), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPolicyVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPolicyVlanEnable.setDescription('Policy Vlan enable, 1:enable; 2:disable(default)')
hwL2IfVlanPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfVlanPrecedence.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanPrecedence.setDescription('Determine the priorities for selecting VLAN (MAC-based, subnet-based VLANs), 0:MAC VLAN(default); 1:IPSUBNET VLAN.')
hwL2IfIsolateGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 3, 1, 31), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfIsolateGroupEnable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfIsolateGroupEnable.setDescription('The value enabled(1) indicates that the port is a member of the port-isolate group; disable(2) indicates that the port is not a member of the port-isolate group. The default value is disable(2).')
hwL2IfHybridPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9), )
if mibBuilder.loadTexts: hwL2IfHybridPortTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridPortTable.setDescription(' Hybrid-port configuration table ')
hwL2IfHybridPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfHybridPortIndex"))
if mibBuilder.loadTexts: hwL2IfHybridPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridPortEntry.setDescription(' Entry of Hybrid-port configuration table ')
hwL2IfHybridPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2IfHybridPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridPortIndex.setDescription(' Index of Hybrid-port ')
hwL2IfHybridTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9, 1, 2), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfHybridTaggedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridTaggedVlanListLow.setDescription(' The lowest possible value of the tagged vlan list on the Hybrid-port.')
hwL2IfHybridTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9, 1, 3), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfHybridTaggedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridTaggedVlanListHigh.setDescription(' The highest possible value of the tagged vlan list on the Hybrid-port.')
hwL2IfHybridUnTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9, 1, 4), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfHybridUnTaggedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridUnTaggedVlanListLow.setDescription(' The lowest possible value of the untagged vlan list on the Hybrid-port.')
hwL2IfHybridUnTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 9, 1, 5), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfHybridUnTaggedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridUnTaggedVlanListHigh.setDescription(' The highest possible value of the untagged vlan list on the Hybrid-port.')
hwL2IfTrunkPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 10), )
if mibBuilder.loadTexts: hwL2IfTrunkPortTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTrunkPortTable.setDescription(' Trunk-port configuration table. Trunk-port is a logistic port.')
hwL2IfTrunkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 10, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfTrunkPortIndex"))
if mibBuilder.loadTexts: hwL2IfTrunkPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTrunkPortEntry.setDescription(' Entry of Trunk-port configuration table ')
hwL2IfTrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2IfTrunkPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTrunkPortIndex.setDescription(' Index of Trunk-port ')
hwL2IfTrunkAllowPassVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 10, 1, 2), VlanList().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfTrunkAllowPassVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTrunkAllowPassVlanListLow.setDescription(' The lowest possible value of the Vlan list that port Trunk allows to pass.')
hwL2IfTrunkAllowPassVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 10, 1, 3), VlanList().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfTrunkAllowPassVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTrunkAllowPassVlanListHigh.setDescription(' The highest possible value of the Vlan list that port Trunk allows to pass.')
hwL2IfPortIsolateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 11), )
if mibBuilder.loadTexts: hwL2IfPortIsolateTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIsolateTable.setDescription(' Port isolate in the same Service-instance table. The Service-instance is used to communicate among different vlans.')
hwL2IfPortIsolateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 11, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfPortIsolatePortIndex"), (0, "HUAWEI-L2IF-MIB", "hwL2IfPortIsolateSIName"))
if mibBuilder.loadTexts: hwL2IfPortIsolateEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIsolateEntry.setDescription(' Entry of port isolate configuration table.')
hwL2IfPortIsolatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2IfPortIsolatePortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIsolatePortIndex.setDescription(' The port index of L2 interface.')
hwL2IfPortIsolateSIName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwL2IfPortIsolateSIName.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIsolateSIName.setDescription(' The name of Service-instance.The Service-instance(S.I.)is used to communicate among different vlans.')
hwL2IfPortIsolateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPortIsolateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIsolateRowStatus.setDescription(' The RowStatus of hwL2IfPortIsolateTable.')
hwL2IfSuppressionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12), )
if mibBuilder.loadTexts: hwL2IfSuppressionTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionTable.setDescription('Port suppression configuration table ')
hwL2IfSuppressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfSuppressionPortIndex"), (0, "HUAWEI-L2IF-MIB", "hwL2IfSuppressionType"))
if mibBuilder.loadTexts: hwL2IfSuppressionEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionEntry.setDescription('Entry of port suppression configuration table ')
hwL2IfSuppressionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfSuppressionPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionPortIndex.setDescription(' The port index of L2 interface.')
hwL2IfSuppressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3))))
if mibBuilder.loadTexts: hwL2IfSuppressionType.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionType.setDescription(' Type of port suppression command, a unique value from 1 to 3: 1 means broadcast suppression; 2 means multicast suppression; 3 means unicast suppression.')
hwL2IfSuppressionCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfSuppressionCir.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionCir.setDescription(' Committed Information Rate. Unit: kbps.')
hwL2IfSuppressionCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2048, 64000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfSuppressionCbs.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionCbs.setDescription(' Committed Burst Size. Unit: byte')
hwL2IfSuppressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfSuppressionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionRowStatus.setDescription(' The RowStatus of hwL2IfSuppressionTable .')
hwL2IfVlanSuppressionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13), )
if mibBuilder.loadTexts: hwL2IfVlanSuppressionTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionTable.setDescription('Port and Vlan suppression configuration table ')
hwL2IfVlanSuppressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfVlanSuppressionPortIndex"), (0, "HUAWEI-L2IF-MIB", "hwL2IfVlanSuppressionStartVlan"), (0, "HUAWEI-L2IF-MIB", "hwL2IfVlanSuppressionEndVlan"))
if mibBuilder.loadTexts: hwL2IfVlanSuppressionEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionEntry.setDescription('Entry of port and Vlan suppression configuration table ')
hwL2IfVlanSuppressionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: hwL2IfVlanSuppressionPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionPortIndex.setDescription(' The port index of L2 interface.')
hwL2IfVlanSuppressionStartVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwL2IfVlanSuppressionStartVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionStartVlan.setDescription(' The start vlan-id of port and vlan suppression.')
hwL2IfVlanSuppressionEndVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwL2IfVlanSuppressionEndVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionEndVlan.setDescription(' The end vlan-id of port and vlan suppression.')
hwL2IfVlanSuppressionCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfVlanSuppressionCir.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionCir.setDescription(' Committed Information Rate. Unit: kbps.')
hwL2IfVlanSuppressionCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2048, 64000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfVlanSuppressionCbs.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionCbs.setDescription(' Committed Burst Size. Unit: byte')
hwL2IfVlanSuppressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 13, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfVlanSuppressionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionRowStatus.setDescription(' The RowStatus of hwL2IfVlanSuppressionTable .')
hwL2IfPortTcnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14), )
if mibBuilder.loadTexts: hwL2IfPortTcnTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortTcnTable.setDescription(' Port TCN in the same Service-instance table. The Service-instance is used to configure TCN.')
hwL2IfPortTcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfTcnPortIndex"))
if mibBuilder.loadTexts: hwL2IfPortTcnEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortTcnEntry.setDescription(' Entry of port TCN configuration table.')
hwL2IfTcnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2IfTcnPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTcnPortIndex.setDescription(' The port index of L2 interface.')
hwL2IfTcnStp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfTcnStp.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTcnStp.setDescription(' Status indicates if the interface is allowed to notify stp TCN message , enable(1) can be setted, (enabled(1) means that the interface can notify TCN), otherwise disabled(2) can be setted.')
hwL2IfTcnSmartLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfTcnSmartLink.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTcnSmartLink.setDescription(' Status indicates if the interface is allowed to notify SmartLink TCN message, enable(1) can be setted, (enabled(1) means that the interface can notify TCN), otherwise disabled(2) can be setted.')
hwL2IfTcnVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfTcnVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTcnVlanListLow.setDescription('The lowest possible value of the vlan list on the Tcn-port.')
hwL2IfTcnVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfTcnVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTcnVlanListHigh.setDescription(' The highest possible value of the vlan list on the Tcn-port.')
hwL2IfPortLoopDetectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15), )
if mibBuilder.loadTexts: hwL2IfPortLoopDetectTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectTable.setDescription('A table containing the port external loopback detection information for device. It can protect the port from external loopback.')
hwL2IfPortLoopDetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectPort"))
if mibBuilder.loadTexts: hwL2IfPortLoopDetectEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectEntry.setDescription('Entries of the port external loopback detection table.')
hwL2IfPortLoopDetectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: hwL2IfPortLoopDetectPort.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectPort.setDescription('The port number which will be configured port external loopback detection.')
hwL2IfPortLoopDetectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPortLoopDetectEnabled.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectEnabled.setDescription("When this object is set to 'enabled(1)' Port external loopback detection is enabled on this port else disabled.")
hwL2IfPortLoopDetectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPortLoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectInterval.setDescription('The detect period of port external loopback detection.')
hwL2IfPortLoopDetectAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shutdown", 1), ("block", 2), ("trap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPortLoopDetectAction.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectAction.setDescription('The port external loopback detection protect action of this entry.')
hwL2IfPortLoopDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("block", 2), ("shutdown", 3), ("trap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfPortLoopDetectStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectStatus.setDescription('The current status of port(block/shutdown/trap/normal).')
hwL2IfPortLoopDetectProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfPortLoopDetectProtocol.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectProtocol.setDescription('The ethernet type of the detecting packet to port external loopback detection.')
hwL2IfPortProtocolVlanDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 16), )
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataTable.setDescription('The entry of protocol vlan by port.')
hwL2IfPortProtocolVlanDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 16, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfPortProtocolVlanDataPortIndex"))
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataEntry.setDescription('The entry of protocol vlan by port.')
hwL2IfPortProtocolVlanDataPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 479)))
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataPortIndex.setDescription('The protocol vlan Index of port .')
hwL2IfPortProtocolVlanDataVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 16, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataVlan.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataVlan.setDescription('VLAN ID.')
hwL2IfPortProtocolVlanDataPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataPri.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataPri.setDescription('VLAN PRI.')
hwL2IfPortProtocolVlanDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataRowStatus.setDescription('Operation status.')
hwL2IfPwSuppressionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17), )
if mibBuilder.loadTexts: hwL2IfPwSuppressionTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionTable.setDescription('Pw suppression configuration table ')
hwL2IfPwSuppressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfPwSuppressionVsiName"), (0, "HUAWEI-L2IF-MIB", "hwL2IfPwSuppressionPwName"), (0, "HUAWEI-L2IF-MIB", "hwL2IfPwSuppressionType"))
if mibBuilder.loadTexts: hwL2IfPwSuppressionEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionEntry.setDescription('This object indicates the configuration table for PW-based unknown traffic suppression.')
hwL2IfPwSuppressionVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hwL2IfPwSuppressionVsiName.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionVsiName.setDescription('This object indicates the name of the VSI that is configured with PW-based unknown traffic suppression.')
hwL2IfPwSuppressionPwName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: hwL2IfPwSuppressionPwName.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionPwName.setDescription('This object indicates the name of the PW that is configured with PW-based unknown traffic suppression.')
hwL2IfPwSuppressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3))))
if mibBuilder.loadTexts: hwL2IfPwSuppressionType.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionType.setDescription('The value of this object identifies the type of PW-based unknown traffic suppression: 1: broadcast suppression 2: multicast suppression 3: unknown unicast suppression')
hwL2IfPwSuppressionCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPwSuppressionCir.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionCir.setDescription('This object indicates the Committed Information Rate. Unit: kbit/s.')
hwL2IfPwSuppressionCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 33554432))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPwSuppressionCbs.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionCbs.setDescription('This object indicates the Committed Burst Size. Unit: byte.')
hwL2IfPwSuppressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 17, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwL2IfPwSuppressionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionRowStatus.setDescription('This object indicates the RowStatus of hwPwSuppressionTable.')
hwL2IfLoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwL2IfLoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: hwL2IfLoopDetectInterval.setDescription('The detect period of system external loopback detection.')
hwL2IfDynamicPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19), )
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTable.setDescription('Table for dynamic relationship of port-vlan.')
hwL2IfDynamicPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1), ).setIndexNames((0, "HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanPortIndex"), (0, "HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanServiceType"))
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanEntry.setDescription('Entry of dynamic port-vlan relationship table.')
hwL2IfDynamicPortVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanPortIndex.setDescription('Port index of switch-port.')
hwL2IfDynamicPortVlanServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("configured", 1), ("gvrp", 2), ("voiceVLAN", 3), ("unAuthenUserVLAN", 4), ("dynAuthenVLAN", 5), ("hvrp", 6), ("elmi", 7), ("macFlapping", 8), ("loopbackDetect", 9), ("loopDetection", 10))))
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanServiceType.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanServiceType.setDescription('Service type of dynamic port-vlan relationship table.')
hwL2IfDynamicPortVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 3), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanPvid.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanPvid.setDescription('The Dynamic PVID of port-vlan table.')
hwL2IfDynamicPortVlanUntaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 4), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanUntaggedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanUntaggedVlanListLow.setDescription('The lowest possible value of the untagged vlan list of dynamic port-vlan table.')
hwL2IfDynamicPortVlanUntaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 5), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanUntaggedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanUntaggedVlanListHigh.setDescription('The highest possible value of the untagged vlan list of Dynamic port-vlan table.')
hwL2IfDynamicPortVlanTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 6), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTaggedVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTaggedVlanListLow.setDescription('The lowest possible value of the tagged vlan list of Dynamic port-vlan table.')
hwL2IfDynamicPortVlanTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 1, 19, 1, 7), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTaggedVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTaggedVlanListHigh.setDescription('The highest possible value of the tagged vlan list of Dynamic port-vlan table.')
hwL2IfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 2))
hwL2IfInvalidVlanPacketAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 2, 1)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortName"), ("HUAWEI-L2IF-MIB", "hwL2IfInInvalidVlanPkts"))
if mibBuilder.loadTexts: hwL2IfInvalidVlanPacketAlarm.setStatus('current')
if mibBuilder.loadTexts: hwL2IfInvalidVlanPacketAlarm.setDescription('Warning of receiving invalid VLAN packets in the interface.')
hwInBcastRisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 1, 2, 2)).setObjects(("IF-MIB", "ifDescr"), ("HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectStatus"))
if mibBuilder.loadTexts: hwInBcastRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: hwInBcastRisingThreshold.setDescription('Port status changed because loopback detect.(Normal/Block/Shutdown/Trap)')
hwL2IfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2))
hwL2IfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 1))
hwL2IfMacAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 1)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfMacAddrLearnMode"), ("HUAWEI-L2IF-MIB", "hwL2IfMacAddressLearn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfMacAddrGroup = hwL2IfMacAddrGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfMacAddrGroup.setDescription('A collection of objects indicate mac address learn of the interface.')
hwL2IfBroadcastRatioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 2)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfBcastRatio"), ("HUAWEI-L2IF-MIB", "hwL2IfMcastRatio"), ("HUAWEI-L2IF-MIB", "hwL2IfUcastRatio"), ("HUAWEI-L2IF-MIB", "hwL2IfOutBcastRatio"), ("HUAWEI-L2IF-MIB", "hwL2IfOutMcastRatio"), ("HUAWEI-L2IF-MIB", "hwL2IfOutUcastRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfBroadcastRatioGroup = hwL2IfBroadcastRatioGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfBroadcastRatioGroup.setDescription('A collection of objects indicate broadcast-suppression ratio.')
hwL2IfHybridTaggedVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 3)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfHybridTaggedVlanListLow"), ("HUAWEI-L2IF-MIB", "hwL2IfHybridTaggedVlanListHigh"), ("HUAWEI-L2IF-MIB", "hwL2IfHybridUnTaggedVlanListLow"), ("HUAWEI-L2IF-MIB", "hwL2IfHybridUnTaggedVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfHybridTaggedVlanGroup = hwL2IfHybridTaggedVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfHybridTaggedVlanGroup.setDescription('A collection of objects indicate lowest/highest possible value of the tagged/untagged vlan list on the Hybrid-port.')
hwL2IfTrunkAllowPassVlanListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 4)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfTrunkAllowPassVlanListLow"), ("HUAWEI-L2IF-MIB", "hwL2IfTrunkAllowPassVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfTrunkAllowPassVlanListGroup = hwL2IfTrunkAllowPassVlanListGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfTrunkAllowPassVlanListGroup.setDescription('A collection of objects indicate lowest/highed possible value of the allowed and passed vlan list on the Trunk-port.')
hwL2IfPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 5)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortIfIndex"), ("HUAWEI-L2IF-MIB", "hwL2IfIsSrcMacFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortGroup = hwL2IfPortGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortGroup.setDescription('A collection of objects indicate index of layer2 port.')
hwL2IfPVIDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 6)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPVID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPVIDGroup = hwL2IfPVIDGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPVIDGroup.setDescription('A collection of objects indicate PVID of layer2 interface.')
hwL2IfPortTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 7)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortTypeGroup = hwL2IfPortTypeGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortTypeGroup.setDescription('A collection of objects indicate VLAN type of layer2 interface.')
hwL2IfPortMaxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 8)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortMax"), ("HUAWEI-L2IF-MIB", "hwL2TopologyDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortMaxGroup = hwL2IfPortMaxGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortMaxGroup.setDescription('A collection of objects indicate that the device supports maxmum of port .')
hwL2IfPortExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 9)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfBpdu"), ("HUAWEI-L2IF-MIB", "hwL2IfDiscardBcast"), ("HUAWEI-L2IF-MIB", "hwL2IfDiscardUnknownMcast"), ("HUAWEI-L2IF-MIB", "hwL2IfDiscardUnknownUcast"), ("HUAWEI-L2IF-MIB", "hwL2IfPortPriority"), ("HUAWEI-L2IF-MIB", "hwL2IfPortName"), ("HUAWEI-L2IF-MIB", "hwL2IfInInvalidVlanPkts"), ("HUAWEI-L2IF-MIB", "hwL2IfFlushEnable"), ("HUAWEI-L2IF-MIB", "hwL2IfFlushControlVlan"), ("HUAWEI-L2IF-MIB", "hwL2IfCurrentInBcastPercent"), ("HUAWEI-L2IF-MIB", "hwL2IfCurrentOutBcastPercent"), ("HUAWEI-L2IF-MIB", "hwL2IfQinqVlanTransEnable"), ("HUAWEI-L2IF-MIB", "hwL2IfQinqVlanTransMissDrop"), ("HUAWEI-L2IF-MIB", "hwL2IfIpSubnetVlanEnable"), ("HUAWEI-L2IF-MIB", "hwL2IfMacVlanEnable"), ("HUAWEI-L2IF-MIB", "hwL2IfPolicyVlanEnable"), ("HUAWEI-L2IF-MIB", "hwL2IfVlanPrecedence"), ("HUAWEI-L2IF-MIB", "hwL2IfIsolateGroupEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortExtGroup = hwL2IfPortExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortExtGroup.setDescription('A collection of objects indicate that the device supports attribute of port .')
hwL2IfPortIsolateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 10)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortIsolateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortIsolateGroup = hwL2IfPortIsolateGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortIsolateGroup.setDescription('A collection of objects indicate that the device supports islation of port .')
hwL2IfAlarmGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 11)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfInvalidVlanPacketAlarm"), ("HUAWEI-L2IF-MIB", "hwInBcastRisingThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfAlarmGroup = hwL2IfAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfAlarmGroup.setDescription('A collection of objects indicate that the device supports alarm of port .')
hwL2IfSuppressionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 12)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfSuppressionCir"), ("HUAWEI-L2IF-MIB", "hwL2IfSuppressionCbs"), ("HUAWEI-L2IF-MIB", "hwL2IfSuppressionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfSuppressionGroup = hwL2IfSuppressionGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfSuppressionGroup.setDescription('A collection of objects that L2IfSuppression.')
hwL2IfVlanSuppressionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 13)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfVlanSuppressionCir"), ("HUAWEI-L2IF-MIB", "hwL2IfVlanSuppressionCbs"), ("HUAWEI-L2IF-MIB", "hwL2IfVlanSuppressionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfVlanSuppressionGroup = hwL2IfVlanSuppressionGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfVlanSuppressionGroup.setDescription("A collection of values indicate that 'Committed infomation rate'.")
hwL2IfPortTcnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 14)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfTcnStp"), ("HUAWEI-L2IF-MIB", "hwL2IfTcnSmartLink"), ("HUAWEI-L2IF-MIB", "hwL2IfTcnVlanListLow"), ("HUAWEI-L2IF-MIB", "hwL2IfTcnVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortTcnGroup = hwL2IfPortTcnGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortTcnGroup.setDescription('A collection of objects indicate that the device supports islation of port .')
hwL2IfPortLoopDetectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 15)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectEnabled"), ("HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectInterval"), ("HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectAction"), ("HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectStatus"), ("HUAWEI-L2IF-MIB", "hwL2IfPortLoopDetectProtocol"), ("HUAWEI-L2IF-MIB", "hwL2IfLoopDetectInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortLoopDetectGroup = hwL2IfPortLoopDetectGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortLoopDetectGroup.setDescription('A collection of objects indicate that the port external loopback detection.')
hwL2IfPortProtocolVlanDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 16)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPortProtocolVlanDataVlan"), ("HUAWEI-L2IF-MIB", "hwL2IfPortProtocolVlanDataPri"), ("HUAWEI-L2IF-MIB", "hwL2IfPortProtocolVlanDataRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPortProtocolVlanDataGroup = hwL2IfPortProtocolVlanDataGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPortProtocolVlanDataGroup.setDescription('The entry of protocol vlan by port.')
hwL2IfPwSuppressionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 17)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfPwSuppressionCir"), ("HUAWEI-L2IF-MIB", "hwL2IfPwSuppressionCbs"), ("HUAWEI-L2IF-MIB", "hwL2IfPwSuppressionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfPwSuppressionGroup = hwL2IfPwSuppressionGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfPwSuppressionGroup.setDescription('A collection of objects in L2IfPwSuppression.')
hwL2IfDynamicPortVlanTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2, 19)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanPvid"), ("HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanUntaggedVlanListLow"), ("HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanUntaggedVlanListHigh"), ("HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanTaggedVlanListLow"), ("HUAWEI-L2IF-MIB", "hwL2IfDynamicPortVlanTaggedVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfDynamicPortVlanTableGroup = hwL2IfDynamicPortVlanTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwL2IfDynamicPortVlanTableGroup.setDescription('A collection of objects of dynamic relationship of port-vlan.')
hwL2IfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 1, 1)).setObjects(("HUAWEI-L2IF-MIB", "hwL2IfMacAddrGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfBroadcastRatioGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfHybridTaggedVlanGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfTrunkAllowPassVlanListGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfPortGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfPVIDGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfPortTypeGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfPortMaxGroup"), ("HUAWEI-L2IF-MIB", "hwL2IfPortExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL2IfCompliance = hwL2IfCompliance.setStatus('current')
if mibBuilder.loadTexts: hwL2IfCompliance.setDescription('The compliance statement for entities implementing the Huawei layer two interface management MIB')
hwL2IfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 42, 1, 2, 2))
mibBuilder.exportSymbols("HUAWEI-L2IF-MIB", hwL2IfPortIfIndex=hwL2IfPortIfIndex, hwL2IfPortLoopDetectTable=hwL2IfPortLoopDetectTable, hwL2IfIsolateGroupEnable=hwL2IfIsolateGroupEnable, hwL2IfPortProtocolVlanDataTable=hwL2IfPortProtocolVlanDataTable, hwL2IfTrunkPortIndex=hwL2IfTrunkPortIndex, hwL2IfPortTcnTable=hwL2IfPortTcnTable, hwL2Mgmt=hwL2Mgmt, hwL2IfTcnStp=hwL2IfTcnStp, hwL2IfVlanSuppressionTable=hwL2IfVlanSuppressionTable, hwL2IfDynamicPortVlanEntry=hwL2IfDynamicPortVlanEntry, hwL2IfSuppressionEntry=hwL2IfSuppressionEntry, hwL2IfTrunkAllowPassVlanListHigh=hwL2IfTrunkAllowPassVlanListHigh, hwL2IfConformance=hwL2IfConformance, hwL2IfObjects=hwL2IfObjects, hwL2TopologyDetect=hwL2TopologyDetect, hwL2IfUcastRatio=hwL2IfUcastRatio, hwL2IfSuppressionTable=hwL2IfSuppressionTable, hwL2IfAlarmGroup=hwL2IfAlarmGroup, hwL2IfPortName=hwL2IfPortName, hwL2IfHybridPortEntry=hwL2IfHybridPortEntry, hwL2IfOutMcastRatio=hwL2IfOutMcastRatio, hwL2IfPortTcnEntry=hwL2IfPortTcnEntry, hwL2IfPortLoopDetectEntry=hwL2IfPortLoopDetectEntry, hwInBcastRisingThreshold=hwInBcastRisingThreshold, hwL2IfHybridPortTable=hwL2IfHybridPortTable, hwL2IfCurrentInBcastPercent=hwL2IfCurrentInBcastPercent, hwL2IfVlanSuppressionGroup=hwL2IfVlanSuppressionGroup, hwL2IfSuppressionCbs=hwL2IfSuppressionCbs, hwL2IfDynamicPortVlanUntaggedVlanListHigh=hwL2IfDynamicPortVlanUntaggedVlanListHigh, hwL2IfTrunkPortTable=hwL2IfTrunkPortTable, hwL2IfMib=hwL2IfMib, hwL2IfPortLoopDetectAction=hwL2IfPortLoopDetectAction, hwL2IfPortMaxGroup=hwL2IfPortMaxGroup, hwL2IfPortIsolateEntry=hwL2IfPortIsolateEntry, hwL2IfPwSuppressionGroup=hwL2IfPwSuppressionGroup, hwL2IfPortNum=hwL2IfPortNum, hwL2IfMacVlanEnable=hwL2IfMacVlanEnable, hwL2IfIsSrcMacFilter=hwL2IfIsSrcMacFilter, hwL2IfQinqVlanTransMissDrop=hwL2IfQinqVlanTransMissDrop, hwL2IfVlanSuppressionRowStatus=hwL2IfVlanSuppressionRowStatus, hwL2IfPortTcnGroup=hwL2IfPortTcnGroup, hwL2IfCompliances=hwL2IfCompliances, hwL2IfPwSuppressionCir=hwL2IfPwSuppressionCir, hwL2IfPwSuppressionPwName=hwL2IfPwSuppressionPwName, hwL2IfPortLoopDetectInterval=hwL2IfPortLoopDetectInterval, hwL2IfVlanPrecedence=hwL2IfVlanPrecedence, PYSNMP_MODULE_ID=hwL2IfMib, hwL2IfPolicyVlanEnable=hwL2IfPolicyVlanEnable, hwL2IfHybridUnTaggedVlanListLow=hwL2IfHybridUnTaggedVlanListLow, hwL2IfVlanSuppressionCir=hwL2IfVlanSuppressionCir, hwL2IfTcnSmartLink=hwL2IfTcnSmartLink, hwL2IfLoopDetectInterval=hwL2IfLoopDetectInterval, hwL2IfDynamicPortVlanTableGroup=hwL2IfDynamicPortVlanTableGroup, VlanList=VlanList, hwL2IfHybridUnTaggedVlanListHigh=hwL2IfHybridUnTaggedVlanListHigh, hwL2IfPortLoopDetectStatus=hwL2IfPortLoopDetectStatus, hwL2IfPVID=hwL2IfPVID, hwL2IfDynamicPortVlanUntaggedVlanListLow=hwL2IfDynamicPortVlanUntaggedVlanListLow, hwL2Interface=hwL2Interface, hwL2IfVlanSuppressionEndVlan=hwL2IfVlanSuppressionEndVlan, hwL2IfHybridTaggedVlanGroup=hwL2IfHybridTaggedVlanGroup, hwL2IfPortType=hwL2IfPortType, hwL2IfTrunkAllowPassVlanListLow=hwL2IfTrunkAllowPassVlanListLow, hwL2IfTable=hwL2IfTable, hwL2IfPortTypeGroup=hwL2IfPortTypeGroup, hwL2IfTcnVlanListLow=hwL2IfTcnVlanListLow, hwL2IfPortMax=hwL2IfPortMax, hwL2IfVlanSuppressionCbs=hwL2IfVlanSuppressionCbs, hwL2IfPortProtocolVlanDataGroup=hwL2IfPortProtocolVlanDataGroup, hwL2IfGroups=hwL2IfGroups, hwL2IfPortLoopDetectProtocol=hwL2IfPortLoopDetectProtocol, hwL2IfPVIDGroup=hwL2IfPVIDGroup, hwL2IfDynamicPortVlanServiceType=hwL2IfDynamicPortVlanServiceType, hwL2IfFlushControlVlan=hwL2IfFlushControlVlan, hwL2IfTcnPortIndex=hwL2IfTcnPortIndex, hwL2IfPortIsolateRowStatus=hwL2IfPortIsolateRowStatus, hwL2IfInvalidVlanPacketAlarm=hwL2IfInvalidVlanPacketAlarm, hwL2IfHybridTaggedVlanListHigh=hwL2IfHybridTaggedVlanListHigh, hwL2IfCurrentOutBcastPercent=hwL2IfCurrentOutBcastPercent, hwL2IfPortIsolateTable=hwL2IfPortIsolateTable, hwL2IfBcastRatio=hwL2IfBcastRatio, hwL2IfCompliance=hwL2IfCompliance, hwL2IfFlushEnable=hwL2IfFlushEnable, hwL2IfPortIsolateSIName=hwL2IfPortIsolateSIName, hwL2IfDynamicPortVlanPvid=hwL2IfDynamicPortVlanPvid, hwL2IfPwSuppressionType=hwL2IfPwSuppressionType, hwL2IfPortExtGroup=hwL2IfPortExtGroup, hwL2IfPwSuppressionCbs=hwL2IfPwSuppressionCbs, hwL2IfSuppressionType=hwL2IfSuppressionType, hwL2IfTrunkPortEntry=hwL2IfTrunkPortEntry, hwL2IfPortLoopDetectPort=hwL2IfPortLoopDetectPort, hwL2IfQinqVlanTransEnable=hwL2IfQinqVlanTransEnable, hwL2IfPortLoopDetectEnabled=hwL2IfPortLoopDetectEnabled, hwL2IfDiscardUnknownMcast=hwL2IfDiscardUnknownMcast, hwL2IfPortProtocolVlanDataEntry=hwL2IfPortProtocolVlanDataEntry, hwL2IfPortIsolateGroup=hwL2IfPortIsolateGroup, hwL2IfPwSuppressionEntry=hwL2IfPwSuppressionEntry, hwL2IfMacAddrLearnMode=hwL2IfMacAddrLearnMode, hwL2IfSuppressionGroup=hwL2IfSuppressionGroup, hwL2IfInInvalidVlanPkts=hwL2IfInInvalidVlanPkts, hwL2IfMcastRatio=hwL2IfMcastRatio, hwL2IfVlanSuppressionStartVlan=hwL2IfVlanSuppressionStartVlan, hwL2IfPortProtocolVlanDataVlan=hwL2IfPortProtocolVlanDataVlan, hwL2IfPwSuppressionVsiName=hwL2IfPwSuppressionVsiName, hwL2IfEntry=hwL2IfEntry, hwL2IfPortIsolatePortIndex=hwL2IfPortIsolatePortIndex, hwL2IfPortPriority=hwL2IfPortPriority, hwL2IfPortProtocolVlanDataRowStatus=hwL2IfPortProtocolVlanDataRowStatus, hwL2IfTcnVlanListHigh=hwL2IfTcnVlanListHigh, hwL2IfHybridTaggedVlanListLow=hwL2IfHybridTaggedVlanListLow, hwL2IfDynamicPortVlanTable=hwL2IfDynamicPortVlanTable, hwL2IfTrunkAllowPassVlanListGroup=hwL2IfTrunkAllowPassVlanListGroup, hwL2IfDiscardBcast=hwL2IfDiscardBcast, hwL2IfMacAddressLearn=hwL2IfMacAddressLearn, hwL2IfDynamicPortVlanTaggedVlanListHigh=hwL2IfDynamicPortVlanTaggedVlanListHigh, hwL2IfBpdu=hwL2IfBpdu, hwL2IfOutBcastRatio=hwL2IfOutBcastRatio, hwL2IfPortProtocolVlanDataPri=hwL2IfPortProtocolVlanDataPri, hwL2IfHybridPortIndex=hwL2IfHybridPortIndex, hwL2IfIpSubnetVlanEnable=hwL2IfIpSubnetVlanEnable, hwL2IfDynamicPortVlanTaggedVlanListLow=hwL2IfDynamicPortVlanTaggedVlanListLow, hwL2IfDynamicPortVlanPortIndex=hwL2IfDynamicPortVlanPortIndex, hwL2IfBroadcastRatioGroup=hwL2IfBroadcastRatioGroup, hwL2IfVlanSuppressionEntry=hwL2IfVlanSuppressionEntry, hwL2IfPwSuppressionTable=hwL2IfPwSuppressionTable, hwL2IfPortGroup=hwL2IfPortGroup, hwL2IfSuppressionCir=hwL2IfSuppressionCir, hwL2IfOutUcastRatio=hwL2IfOutUcastRatio, hwL2IfPwSuppressionRowStatus=hwL2IfPwSuppressionRowStatus, hwL2IfDiscardUnknownUcast=hwL2IfDiscardUnknownUcast, hwL2IfSuppressionPortIndex=hwL2IfSuppressionPortIndex, hwL2IfVlanSuppressionPortIndex=hwL2IfVlanSuppressionPortIndex, hwL2IfTraps=hwL2IfTraps, hwL2IfMacAddrGroup=hwL2IfMacAddrGroup, hwL2IfSuppressionRowStatus=hwL2IfSuppressionRowStatus, hwL2IfPortLoopDetectGroup=hwL2IfPortLoopDetectGroup, hwL2IfPortProtocolVlanDataPortIndex=hwL2IfPortProtocolVlanDataPortIndex)
