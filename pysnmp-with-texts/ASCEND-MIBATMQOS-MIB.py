#
# PySNMP MIB module ASCEND-MIBATMQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBATMQOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, iso, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Unsigned32, NotificationType, ModuleIdentity, MibIdentifier, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "iso", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Unsigned32", "NotificationType", "ModuleIdentity", "MibIdentifier", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibatmQosProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 21))
mibatmQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 21, 1), )
if mibBuilder.loadTexts: mibatmQosProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibatmQosProfileTable.setDescription('A list of mibatmQosProfile profile entries.')
mibatmQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMQOS-MIB", "atmQosProfile-ContractName"))
if mibBuilder.loadTexts: mibatmQosProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibatmQosProfileEntry.setDescription('A mibatmQosProfile entry containing objects that maps to the parameters of mibatmQosProfile profile.')
atmQosProfile_ContractName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 1), DisplayString()).setLabel("atmQosProfile-ContractName").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmQosProfile_ContractName.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_ContractName.setDescription('The name of the Quality of Service (QoS) contract.')
atmQosProfile_TrafficDescriptorIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 2), Integer32()).setLabel("atmQosProfile-TrafficDescriptorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmQosProfile_TrafficDescriptorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_TrafficDescriptorIndex.setDescription('Traffic descriptor index.')
atmQosProfile_TrafficDescriptorType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknownTrafficDescr", 17), ("noclpNoscr", 3), ("noclpScr", 6), ("clpNotaggingScr", 7), ("clpTaggingScr", 8), ("clpTransparentNoscr", 10), ("clpTransparentScr", 11), ("noclpTaggingNoscr", 12), ("noclpNoscrCdvt", 13), ("noclpScrCdvt", 14), ("clpNotaggingScrCdvt", 15), ("clpTaggingScrCdvt", 16)))).setLabel("atmQosProfile-TrafficDescriptorType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_TrafficDescriptorType.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_TrafficDescriptorType.setDescription('The Traffic Descriptor type.')
atmQosProfile_AtmServiceCategory = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbr", 1), ("realTimeVbr", 2), ("nonRealTimeVbr", 3), ("ubr", 4)))).setLabel("atmQosProfile-AtmServiceCategory").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_AtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_AtmServiceCategory.setDescription('The ATM Service Category Type. In 7.11.x releases this field was called qos-class.')
atmQosProfile_PeakRateKbitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 6), Integer32()).setLabel("atmQosProfile-PeakRateKbitsPerSec").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_PeakRateKbitsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_PeakRateKbitsPerSec.setDescription('The Peak Cell Rate (PCR) expressed in Kbits per second ( Peak Bandwidth in KBits/sec )')
atmQosProfile_PeakCellRateCellsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 7), Integer32()).setLabel("atmQosProfile-PeakCellRateCellsPerSec").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_PeakCellRateCellsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_PeakCellRateCellsPerSec.setDescription('The Peak Cell Rate (PCR) expressed in cells per second')
atmQosProfile_SustainableRateKbitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 9), Integer32()).setLabel("atmQosProfile-SustainableRateKbitsPerSec").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_SustainableRateKbitsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_SustainableRateKbitsPerSec.setDescription('The sustainable cell rate (SCR) expressed in Kbits per second ( Sustainable Bandwidth in Kbits/sec )')
atmQosProfile_SustainableCellRateCellsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 10), Integer32()).setLabel("atmQosProfile-SustainableCellRateCellsPerSec").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_SustainableCellRateCellsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_SustainableCellRateCellsPerSec.setDescription('The sustainable cell rate (SCR) expressed in cells per second')
atmQosProfile_IgnoreCellDelayVariationTolerance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmQosProfile-IgnoreCellDelayVariationTolerance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_IgnoreCellDelayVariationTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_IgnoreCellDelayVariationTolerance.setDescription('Ignore cell-delay-variation-tolerance parameter. When it is set to yes, cell-delay-variation-tolerance parameter is ignored, and an internal parameter is used to tolerate bursty CPE that does not have traffic shaping capability.')
atmQosProfile_CellDelayVariationTolerance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 12), Integer32()).setLabel("atmQosProfile-CellDelayVariationTolerance").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_CellDelayVariationTolerance.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_CellDelayVariationTolerance.setDescription('Cell delay variation tolerance is expressed in microseconds. It is ignored when ignore-cell-delay-variation-tolerance is yes.')
atmQosProfile_IgnoreMaxBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmQosProfile-IgnoreMaxBurstSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_IgnoreMaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_IgnoreMaxBurstSize.setDescription('Ignore max-burst-size parameter. When it is set to yes, max-burst-size parameter is ignored, and an internal parameter is used to tolerate bursty CPE that does not have traffic shaping capability.')
atmQosProfile_MaxBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 14), Integer32()).setLabel("atmQosProfile-MaxBurstSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_MaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_MaxBurstSize.setDescription('Maximum burst size determines the maximum number of cells that can be transmitted at the peak cell rate before they become candidates for discard or marking. It is ignored when ignore-max-burst-size is yes.')
atmQosProfile_AalType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal0", 1), ("aal5", 2), ("unspecified", 3)))).setLabel("atmQosProfile-AalType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_AalType.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_AalType.setDescription('ATM Adaptation Layer type')
atmQosProfile_EarlyPacketDiscard = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmQosProfile-EarlyPacketDiscard").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_EarlyPacketDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_EarlyPacketDiscard.setDescription('Applies to egress AAL5 packets. If the first cell in a packet can not be queued then that cell and all the remaining cells in that packet are not queued.')
atmQosProfile_PartialPacketDiscard = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmQosProfile-PartialPacketDiscard").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_PartialPacketDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_PartialPacketDiscard.setDescription('Applies to ingress AAL5 packets. If non-conforming cell is discarded then the remaining cells in the packet (except the last cell) are also discarded.')
atmQosProfile_TagOrDiscard = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("discard", 2)))).setLabel("atmQosProfile-TagOrDiscard").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_TagOrDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_TagOrDiscard.setDescription('The non-conforming CLP=0 SCR cell should be tagged or discarded')
atmQosProfile_SubChannel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 21), Integer32()).setLabel("atmQosProfile-SubChannel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_SubChannel.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_SubChannel.setDescription('For DSL technologies that support multiple sub-channels on one line, when the multiple sub-channels are indeed used at same time, this parameter indicates which sub-channel will be used for this QOS profile. When only one sub-channel is used this parameter has no effect... EXAMPLE: in DMT - when the latency is set to BOTH, sub-channel #1 is the FAST channel ( typically useful for voice traffic - voice over ATM or Packet ) while sub-channel #2 is the INTERLEAVE channel ( typically useful for data traffic ).')
atmQosProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 21, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmQosProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: atmQosProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBATMQOS-MIB", mibatmQosProfileTable=mibatmQosProfileTable, mibatmQosProfileEntry=mibatmQosProfileEntry, atmQosProfile_PeakCellRateCellsPerSec=atmQosProfile_PeakCellRateCellsPerSec, atmQosProfile_TrafficDescriptorType=atmQosProfile_TrafficDescriptorType, atmQosProfile_IgnoreCellDelayVariationTolerance=atmQosProfile_IgnoreCellDelayVariationTolerance, atmQosProfile_ContractName=atmQosProfile_ContractName, atmQosProfile_TagOrDiscard=atmQosProfile_TagOrDiscard, atmQosProfile_PartialPacketDiscard=atmQosProfile_PartialPacketDiscard, atmQosProfile_IgnoreMaxBurstSize=atmQosProfile_IgnoreMaxBurstSize, atmQosProfile_Action_o=atmQosProfile_Action_o, atmQosProfile_AtmServiceCategory=atmQosProfile_AtmServiceCategory, atmQosProfile_AalType=atmQosProfile_AalType, atmQosProfile_SustainableCellRateCellsPerSec=atmQosProfile_SustainableCellRateCellsPerSec, atmQosProfile_SustainableRateKbitsPerSec=atmQosProfile_SustainableRateKbitsPerSec, DisplayString=DisplayString, atmQosProfile_EarlyPacketDiscard=atmQosProfile_EarlyPacketDiscard, atmQosProfile_TrafficDescriptorIndex=atmQosProfile_TrafficDescriptorIndex, atmQosProfile_SubChannel=atmQosProfile_SubChannel, atmQosProfile_CellDelayVariationTolerance=atmQosProfile_CellDelayVariationTolerance, atmQosProfile_MaxBurstSize=atmQosProfile_MaxBurstSize, atmQosProfile_PeakRateKbitsPerSec=atmQosProfile_PeakRateKbitsPerSec, mibatmQosProfile=mibatmQosProfile)
