#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-IpNhrpMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-IpNhrpMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
mscVrPpIpPortIndex, mscVrPpIpPortLogicalIfAddressIndex, mscVrIp, mscVrIpIndex, mscVrPpIpPortLogicalIf = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-IpMIB", "mscVrPpIpPortIndex", "mscVrPpIpPortLogicalIfAddressIndex", "mscVrIp", "mscVrIpIndex", "mscVrPpIpPortLogicalIf")
DisplayString, RowPointer, Unsigned32, RowStatus, Counter32, Integer32, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "DisplayString", "RowPointer", "Unsigned32", "RowStatus", "Counter32", "Integer32", "StorageType")
HexString, NonReplicated = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "HexString", "NonReplicated")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
mscVrIndex, mscVrPpIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex", "mscVrPpIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Unsigned32, MibIdentifier, NotificationType, ModuleIdentity, ObjectIdentity, Bits, TimeTicks, Counter32, Integer32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "TimeTicks", "Counter32", "Integer32", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipNhrpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77))
mscVrPpIpPortLogicalIfNhrpIf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4))
mscVrPpIpPortLogicalIfNhrpIfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4, 1), )
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrPpIpPortLogicalIfNhrpIf components.')
mscVrPpIpPortLogicalIfNhrpIfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrPpIpPortIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrPpIpPortLogicalIfAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrPpIpPortLogicalIfNhrpIfIndex"))
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpIpPortLogicalIfNhrpIf component.')
mscVrPpIpPortLogicalIfNhrpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpIpPortLogicalIfNhrpIf components. These components can be added and deleted.')
mscVrPpIpPortLogicalIfNhrpIfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpIpPortLogicalIfNhrpIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfStorageType.setDescription('This variable represents the storage type value for the mscVrPpIpPortLogicalIfNhrpIf tables.')
mscVrPpIpPortLogicalIfNhrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 5, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpPortLogicalIfNhrpIfIndex.setDescription('This variable represents the index for the mscVrPpIpPortLogicalIfNhrpIf tables.')
mscVrIpNhrp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19))
mscVrIpNhrpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 1), )
if mibBuilder.loadTexts: mscVrIpNhrpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpNhrp components.')
mscVrIpNhrpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpNhrp component.')
mscVrIpNhrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpNhrp components. These components can be added and deleted.')
mscVrIpNhrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpNhrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpStorageType.setDescription('This variable represents the storage type value for the mscVrIpNhrp tables.')
mscVrIpNhrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpNhrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpIndex.setDescription('This variable represents the index for the mscVrIpNhrp tables.')
mscVrIpNhrpAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 10), )
if mibBuilder.loadTexts: mscVrIpNhrpAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
mscVrIpNhrpAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpAdminControlEntry.setDescription('An entry in the mscVrIpNhrpAdminControlTable.')
mscVrIpNhrpSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
mscVrIpNhrpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 11), )
if mibBuilder.loadTexts: mscVrIpNhrpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpProvTable.setDescription('This group contains the provisionable attributes of the Nhrp component.')
mscVrIpNhrpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpProvEntry.setDescription('An entry in the mscVrIpNhrpProvTable.')
mscVrIpNhrpMaxResCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 1024)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpMaxResCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpMaxResCacheEntries.setDescription('This attribute specifies the maximum number of ResCacheEntry components which may exist under the Nhrp component at any one time. Reducing the value of this attribute will not clear existing entries.')
mscVrIpNhrpFwdTransitRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpFwdTransitRecord.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpFwdTransitRecord.setDescription("This attribute specifies whether to attach a forward transit record extension to NHRP packets (Resolution and Purge requests) that Passport originates. This extension along with NHRP debug tracing set to 'verbose' can be used in tracing the path the NHRP packet takes from source to destination.")
mscVrIpNhrpRevTransitRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpRevTransitRecord.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRevTransitRecord.setDescription("This attribute specifies whether to attach a reverse transit record extension to Resolution Request packets that Passport originates. This extension along with NHRP debug tracing set to 'verbose' can be used in tracing the path the NHRP packet takes from destination to source.")
mscVrIpNhrpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 13), )
if mibBuilder.loadTexts: mscVrIpNhrpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscVrIpNhrpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpStateEntry.setDescription('An entry in the mscVrIpNhrpStateTable.')
mscVrIpNhrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscVrIpNhrpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscVrIpNhrpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscVrIpNhrpOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 14), )
if mibBuilder.loadTexts: mscVrIpNhrpOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscVrIpNhrpOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpOperStatusEntry.setDescription('An entry in the mscVrIpNhrpOperStatusTable.')
mscVrIpNhrpSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscVrIpNhrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 15), )
if mibBuilder.loadTexts: mscVrIpNhrpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpOperTable.setDescription('This group contains the operational attributes of the Nhrp component.')
mscVrIpNhrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpOperEntry.setDescription('An entry in the mscVrIpNhrpOperTable.')
mscVrIpNhrpCurrResCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpCurrResCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpCurrResCacheEntries.setDescription('This attribute indicates the current number of entries in the NHRP resolution cache table.')
mscVrIpNhrpPeakResCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpPeakResCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpPeakResCacheEntries.setDescription('This attribute indicates the peak value of currResCacheEntries since the Nhrp snmpOperStatus attribute last became up.')
mscVrIpNhrpNhs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2))
mscVrIpNhrpNhsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 1), )
if mibBuilder.loadTexts: mscVrIpNhrpNhsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpNhrpNhs components.')
mscVrIpNhrpNhsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpNhrpNhs component.')
mscVrIpNhrpNhsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpNhrpNhs components. These components cannot be added nor deleted.')
mscVrIpNhrpNhsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpNhrpNhsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsStorageType.setDescription('This variable represents the storage type value for the mscVrIpNhrpNhs tables.')
mscVrIpNhrpNhsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpNhrpNhsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsIndex.setDescription('This variable represents the index for the mscVrIpNhrpNhs tables.')
mscVrIpNhrpNhsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10), )
if mibBuilder.loadTexts: mscVrIpNhrpNhsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsStatsTable.setDescription('This group contains the statistics attributes of the Nhs component.')
mscVrIpNhrpNhsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsStatsEntry.setDescription('An entry in the mscVrIpNhrpNhsStatsTable.')
mscVrIpNhrpNhsRxResolveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxResolveReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxResolveReq.setDescription('This attribute counts the NHRP Resolution Requests received by this server. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsTxResolveReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyAck.setDescription('This attribute counts the positively acknowledged NHRP Resolution Replies transmitted by this server. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsTxResolveReplyNakProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakProhibited.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakProhibited.setDescription("This attribute counts the NAK NHRP Resolution Replies transmitted by this server with the code 'Administratively Prohibited'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxResolveReplyNakInsufResources = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakInsufResources.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakInsufResources.setDescription("This attribute counts the NAK NHRP Resolution Replies transmitted by this server with the code 'Insufficient Resources'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxResolveReplyNakNoBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakNoBinding.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakNoBinding.setDescription("This attribute counts the NAK NHRP Resolution Replies transmitted by this server with the code 'No Internetworking Layer Address to NBMA Address Binding Exists'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxResolveReplyNakNotUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakNotUnique.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxResolveReplyNakNotUnique.setDescription("This attribute counts the NAK NHRP Resolution Replies transmitted by this server with the code 'Binding Exists But Is Not Unique'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxRegisterReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxRegisterReq.setDescription('This attribute counts the NHRP Registration Requests received by this server. Registration is not supported, therefore all NHRP Registration Requests are silently dropped. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsRxPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxPurgeReq.setDescription('This attribute counts the NHRP Purge Requests received by this server. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsTxPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxPurgeReq.setDescription('This attribute counts the NHRP Purge Requests transmitted by this server. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsRxPurgeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxPurgeReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxPurgeReply.setDescription('This attribute counts the NHRP Purge Replies received by this server. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsTxPurgeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxPurgeReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxPurgeReply.setDescription('This attribute counts the NHRP Purge Replies transmitted by this server. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsRxErrUnrecognizedExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrUnrecognizedExtension.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrUnrecognizedExtension.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Unrecognized Extension'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrLoopDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrLoopDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrLoopDetected.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'NHRP Loop Detected'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrProtoAddrUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrProtoAddrUnreachable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrProtoAddrUnreachable.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Protocol Address Unreachable'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrProtoError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrProtoError.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrProtoError.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Protocol Error'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrSduSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrSduSizeExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrSduSizeExceeded.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'NHRP SDU Size Exceeded'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrInvalidExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrInvalidExtension.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrInvalidExtension.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Invalid Extension'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrInvalidResReplyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrInvalidResReplyReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrInvalidResReplyReceived.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Invalid Resolution Reply Received'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrAuthenticationFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrAuthenticationFailure.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Authentication Failure'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsRxErrHopCountExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrHopCountExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsRxErrHopCountExceeded.setDescription("This attribute counts the NHRP Error Indication packets received by this server with the error code 'Hop Count Exceeded'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrUnrecognizedExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrUnrecognizedExtension.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrUnrecognizedExtension.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'Unrecognized Extension'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrLoopDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrLoopDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrLoopDetected.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'NHRP Loop Detected'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrProtoAddrUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrProtoAddrUnreachable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrProtoAddrUnreachable.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'Protocol Address Unreachable'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrProtoError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrProtoError.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrProtoError.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'Protocol Error'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrSduSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrSduSizeExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrSduSizeExceeded.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'NHRP SDU Size Exceeded'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrInvalidExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrInvalidExtension.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrInvalidExtension.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'Invalid Extension'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrAuthenticationFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrAuthenticationFailure.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'Authentication Failure'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsTxErrHopCountExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrHopCountExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsTxErrHopCountExceeded.setDescription("This attribute counts the NHRP Error Indication packets transmitted by this server with the error code 'Hop Count Exceeded'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhsFwdResolveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdResolveReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdResolveReq.setDescription('This attribute counts the NHRP Resolution Requests forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsFwdResolveReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdResolveReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdResolveReply.setDescription('This attribute counts the NHRP Resolution Replies forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsFwdRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdRegisterReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdRegisterReq.setDescription('This attribute counts the NHRP Registration Requests forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsFwdRegisterReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdRegisterReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdRegisterReply.setDescription('This attribute counts the NHRP Registration Replies forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsFwdPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdPurgeReq.setDescription('This attribute counts the NHRP Purge Requests forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsFwdPurgeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdPurgeReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdPurgeReply.setDescription('This attribute counts the NHRP Purge Replies forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsFwdErrorIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 10, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdErrorIndication.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsFwdErrorIndication.setDescription('This attribute counts the NHRP Error Indication packets forwarded by this server acting as a transit NHS. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhsEp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2))
mscVrIpNhrpNhsEpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 1), )
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpNhrpNhsEp components.')
mscVrIpNhrpNhsEpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsEpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpNhrpNhsEp component.')
mscVrIpNhrpNhsEpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpNhrpNhsEp components. These components can be added and deleted.')
mscVrIpNhrpNhsEpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpNhrpNhsEpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpStorageType.setDescription('This variable represents the storage type value for the mscVrIpNhrpNhsEp tables.')
mscVrIpNhrpNhsEpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpIndex.setDescription('This variable represents the index for the mscVrIpNhrpNhsEp tables.')
mscVrIpNhrpNhsEpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 10), )
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpProvTable.setDescription('This group contains the provisionable attributes of the EgressPolicy component.')
mscVrIpNhrpNhsEpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsEpIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpProvEntry.setDescription('An entry in the mscVrIpNhrpNhsEpProvTable.')
mscVrIpNhrpNhsEpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ack", 1), ("nak", 2))).clone('nak')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpAction.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpAction.setDescription('This attribute specifies how the server should handle the NHRP Resolution Request if it matches this policy. The possible actions are: ack - Send a positive acknowledgement (ACK Reply) for the request. nak - Send a negative acknowledgement (NAK Reply) for the request.')
mscVrIpNhrpNhsEpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("staticLocal", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpProtocol.setDescription("This attribute species the reachability type (that is, protocol) of the destination in the NHRP Resolution Request. The possible protocols: default - This value is a 'wildcard' and matches any protocol. A policy with a 'wildcard' protocol is less preferred than a policy with a protocol which matches exactly. staticLocal - The destination is on a locally attached network.")
mscVrIpNhrpNhsEpNetAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2))
mscVrIpNhrpNhsEpNetAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpNhrpNhsEpNetAddr components.')
mscVrIpNhrpNhsEpNetAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsEpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsEpNetAddrIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpNhrpNhsEpNetAddr component.')
mscVrIpNhrpNhsEpNetAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpNhrpNhsEpNetAddr components. These components can be added and deleted.')
mscVrIpNhrpNhsEpNetAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpNhrpNhsEpNetAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrStorageType.setDescription('This variable represents the storage type value for the mscVrIpNhrpNhsEpNetAddr tables.')
mscVrIpNhrpNhsEpNetAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrIndex.setDescription('This variable represents the index for the mscVrIpNhrpNhsEpNetAddr tables.')
mscVrIpNhrpNhsEpNetAddrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 10), )
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrProvTable.setDescription('This group contains the provisionable attributes of the NetworkAddress component.')
mscVrIpNhrpNhsEpNetAddrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsEpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhsEpNetAddrIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrProvEntry.setDescription('An entry in the mscVrIpNhrpNhsEpNetAddrProvTable.')
mscVrIpNhrpNhsEpNetAddrSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrSourceAddress.setDescription('This attribute specifies the internetwork address of the source. This is used to match a source internetwork address in an NHRP Resolution Request.')
mscVrIpNhrpNhsEpNetAddrSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 10, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrSourceMask.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrSourceMask.setDescription('This attribute specifies the netmask for the source internetwork address.')
mscVrIpNhrpNhsEpNetAddrDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 10, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrDestinationAddress.setDescription('This attribute specifies the internetwork address of the destination. This is used to match a destination internetwork address in an NHRP Resolution Request.')
mscVrIpNhrpNhsEpNetAddrDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 2, 2, 2, 10, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrDestinationMask.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhsEpNetAddrDestinationMask.setDescription('This attribute specifies the netmask for the destination internetwork address.')
mscVrIpNhrpNhc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3))
mscVrIpNhrpNhcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 1), )
if mibBuilder.loadTexts: mscVrIpNhrpNhcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpNhrpNhc components.')
mscVrIpNhrpNhcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhcIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpNhrpNhc component.')
mscVrIpNhrpNhcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpNhrpNhc components. These components cannot be added nor deleted.')
mscVrIpNhrpNhcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpNhrpNhcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcStorageType.setDescription('This variable represents the storage type value for the mscVrIpNhrpNhc tables.')
mscVrIpNhrpNhcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpNhrpNhcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcIndex.setDescription('This variable represents the index for the mscVrIpNhrpNhc tables.')
mscVrIpNhrpNhcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10), )
if mibBuilder.loadTexts: mscVrIpNhrpNhcProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcProvTable.setDescription('This group contains the provisionable attributes of the Nhc component.')
mscVrIpNhrpNhcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhcIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhcProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcProvEntry.setDescription('An entry in the mscVrIpNhrpNhcProvTable.')
mscVrIpNhrpNhcFlowDetectPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4292967295)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhcFlowDetectPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcFlowDetectPacketCount.setDescription('This attribute, along with flowDetectTimePeriod, specifies the IP traffic flow detection threshold; If the number of IP packets sent to a particular destination within the time interval specified by flowDetectTimePeriod exceeds the value specified by flowDetectPacketCount, then an NHRP Resolution Request will be triggerred. If successful, a shortcut will be set up.')
mscVrIpNhrpNhcFlowDetectTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(20, 20), ValueRangeConstraint(30, 30), ValueRangeConstraint(40, 40), ValueRangeConstraint(50, 50), ValueRangeConstraint(60, 60), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhcFlowDetectTimePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcFlowDetectTimePeriod.setDescription('This attribute, along with flowDetectPacketCount, specifies the IP traffic flow detection threshold; If the number of IP packets sent to a particular destination within the time interval specified by flowDetectTimePeriod exceeds the value specified by flowDetectPacketCount, then an NHRP Resolution Request will be triggerred. If successful, a shortcut will be set up.')
mscVrIpNhrpNhcIdleDetectPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4292967295)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhcIdleDetectPacketCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcIdleDetectPacketCount.setDescription('This attribute, along with idleDetectTimePeriod, specifies the idle shortcut threshold; If the number of frames transmitted over an outgoing shortcut, or received over an incoming shortcut, within the time interval specified by idleDetectTimePeriod falls below the value specified by idleDetectPacketCount, then the shortcut connection will be released.')
mscVrIpNhrpNhcIdleDetectTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhcIdleDetectTimePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcIdleDetectTimePeriod.setDescription('This attribute, along with idleDetectPacketCount, specifies the idle shortcut threshold; If the number of frames transmitted over an outgoing shortcut, or received over an incoming shortcut, within the time interval specified by idleDetectTimePeriod falls below the value specified by idleDetectPacketCount, then the shortcut connection will be released.')
mscVrIpNhrpNhcAtmFlowDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpNhrpNhcAtmFlowDetection.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcAtmFlowDetection.setDescription('This attribute specifies whether flow detection should be performed for IP traffic received on ATM cards. This attribute does not apply to IP traffic received on LAN or non-ATM WAN cards.')
mscVrIpNhrpNhcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11), )
if mibBuilder.loadTexts: mscVrIpNhrpNhcStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcStatsTable.setDescription('This group contains the statistics attributes of the Nhc component.')
mscVrIpNhrpNhcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpNhcIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpNhcStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcStatsEntry.setDescription('An entry in the mscVrIpNhrpNhcStatsTable.')
mscVrIpNhrpNhcTxResolveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxResolveReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxResolveReq.setDescription('This attribute counts the NHRP Resolution Requests transmitted by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcRxResolveReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyAck.setDescription('This attribute counts the positively acknowledged NHRP Resolution Replies received by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcRxResolveReplyNakProhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakProhibited.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakProhibited.setDescription("This attribute counts the NAK NHRP Resolution Replies received by this client that contained the code indicating 'Administratively Prohibited'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxResolveReplyNakInsufResources = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakInsufResources.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakInsufResources.setDescription("This attribute counts the NAK NHRP Resolution Replies received by this client that contained the code indicating 'Insufficient Resources'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxResolveReplyNakNoBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakNoBinding.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakNoBinding.setDescription("This attribute counts the NAK NHRP Resolution Replies received by this client that contained the code indicating 'No Internetworking Layer Address to NBMA Address Binding Exists'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxResolveReplyNakNotUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakNotUnique.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxResolveReplyNakNotUnique.setDescription("This attribute counts the NAK NHRP Resolution Replies received by this client that contained the code indicating 'Binding Exists But Is Not Unique'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxPurgeReq.setDescription('This attribute counts the NHRP Purge Requests received by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcTxPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxPurgeReq.setDescription('This attribute counts the NHRP Purge Requests transmitted by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcRxPurgeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxPurgeReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxPurgeReply.setDescription('This attribute counts the NHRP Purge Replies received by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcTxPurgeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxPurgeReply.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxPurgeReply.setDescription('This attribute counts the NHRP Purge Replies transmitted by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcTxErrIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxErrIndication.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcTxErrIndication.setDescription('This attribute counts the NHRP Error Indication packets transmitted by this client. This counter wraps to zero when the maximum value is exceeded.')
mscVrIpNhrpNhcRxErrUnrecognizedExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrUnrecognizedExtension.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrUnrecognizedExtension.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'Unrecognized Extension'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrLoopDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrLoopDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrLoopDetected.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'NHRP Loop Detected'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrProtoAddrUnreachable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrProtoAddrUnreachable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrProtoAddrUnreachable.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'Protocol Address Unreachable'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrProtoError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrProtoError.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrProtoError.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'Protocol Error'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrSduSizeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrSduSizeExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrSduSizeExceeded.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'NHRP SDU Size Exceeded'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrInvalidExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrInvalidExtension.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrInvalidExtension.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'Invalid Extension'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrAuthenticationFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrAuthenticationFailure.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'Authentication Failure'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpNhcRxErrHopCountExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 3, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrHopCountExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpNhcRxErrHopCountExceeded.setDescription("This attribute counts the NHRP Error Indication packets received by this client with the error code 'Hop Count Exceeded'. This counter wraps to zero when the maximum value is exceeded.")
mscVrIpNhrpRce = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4))
mscVrIpNhrpRceRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1), )
if mibBuilder.loadTexts: mscVrIpNhrpRceRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrIpNhrpRce components.')
mscVrIpNhrpRceRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpRceDestAddrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpRceDestMaskIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpRceRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpNhrpRce component.')
mscVrIpNhrpRceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpNhrpRce components. These components cannot be added nor deleted.')
mscVrIpNhrpRceComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpNhrpRceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceStorageType.setDescription('This variable represents the storage type value for the mscVrIpNhrpRce tables.')
mscVrIpNhrpRceDestAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: mscVrIpNhrpRceDestAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceDestAddrIndex.setDescription('This variable represents an index for the mscVrIpNhrpRce tables.')
mscVrIpNhrpRceDestMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 1, 1, 11), IpAddress())
if mibBuilder.loadTexts: mscVrIpNhrpRceDestMaskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceDestMaskIndex.setDescription('This variable represents an index for the mscVrIpNhrpRce tables.')
mscVrIpNhrpRceOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 10), )
if mibBuilder.loadTexts: mscVrIpNhrpRceOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational attributes of the ResCacheEntry component.')
mscVrIpNhrpRceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpRceDestAddrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpNhrpMIB", "mscVrIpNhrpRceDestMaskIndex"))
if mibBuilder.loadTexts: mscVrIpNhrpRceOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceOperEntry.setDescription('An entry in the mscVrIpNhrpRceOperTable.')
mscVrIpNhrpRceNbmaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 10, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceNbmaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceNbmaAddress.setDescription('This attribute indicates the NBMA subnetwork address of the next hop.')
mscVrIpNhrpRceEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 11))).clone(namedValues=NamedValues(("incomplete", 1), ("ackReply", 2), ("nakReply", 3), ("noReply", 10), ("localReply", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceEntryState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceEntryState.setDescription('This attribute indicates the state of this resolution cache entry. The possible states are: incomplete - The client sent the resolution request and is waiting for a reply. ackReply - The client sent the resolution request and received an ACK reply. nakReply - The client sent the resolution request and received a NAK reply. This entry remains in the cache for 20 minutes thereby preventing subsequent requests during that time period. noReply - The client sent the resolution request but did not receive a reply. This entry remains in the cache for 20 minutes thereby preventing subsequent requests during that time period. localReply - The client sent the resolution request and received an ACK reply from a locally-attached responder. This entry remains in the cache for 20 minutes thereby preventing subsequent requests during that time period.')
mscVrIpNhrpRceHoldingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceHoldingTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceHoldingTime.setDescription('This attribute indicates the number of seconds that this entry will remain in the resolution cache table. If the entry has not been refreshed before this time it will be removed from the cache.')
mscVrIpNhrpRceShortcut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 19, 4, 10, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpNhrpRceShortcut.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpNhrpRceShortcut.setDescription('This attribute indicates the component name of the shortcut connection associated with this resolution cache entry. If the component name is empty then no shortcut currently exists.')
ipNhrpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 1))
ipNhrpGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 1, 1))
ipNhrpGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 1, 1, 3))
ipNhrpGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 1, 1, 3, 2))
ipNhrpCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 3))
ipNhrpCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 3, 1))
ipNhrpCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 3, 1, 3))
ipNhrpCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 77, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-IpNhrpMIB", mscVrIpNhrpNhsTxErrUnrecognizedExtension=mscVrIpNhrpNhsTxErrUnrecognizedExtension, mscVrIpNhrpOperStatusTable=mscVrIpNhrpOperStatusTable, mscVrIpNhrpNhsTxErrAuthenticationFailure=mscVrIpNhrpNhsTxErrAuthenticationFailure, mscVrIpNhrpNhsTxErrProtoAddrUnreachable=mscVrIpNhrpNhsTxErrProtoAddrUnreachable, mscVrIpNhrpNhsTxErrSduSizeExceeded=mscVrIpNhrpNhsTxErrSduSizeExceeded, mscVrIpNhrpNhcRxErrProtoError=mscVrIpNhrpNhcRxErrProtoError, mscVrIpNhrpNhcProvTable=mscVrIpNhrpNhcProvTable, mscVrIpNhrpRceOperEntry=mscVrIpNhrpRceOperEntry, mscVrIpNhrpNhsRxErrSduSizeExceeded=mscVrIpNhrpNhsRxErrSduSizeExceeded, mscVrIpNhrpNhcFlowDetectTimePeriod=mscVrIpNhrpNhcFlowDetectTimePeriod, mscVrIpNhrpNhcRxErrSduSizeExceeded=mscVrIpNhrpNhcRxErrSduSizeExceeded, mscVrIpNhrpAdminControlEntry=mscVrIpNhrpAdminControlEntry, mscVrIpNhrpProvTable=mscVrIpNhrpProvTable, mscVrIpNhrpNhcRowStatusTable=mscVrIpNhrpNhcRowStatusTable, ipNhrpCapabilitiesCA=ipNhrpCapabilitiesCA, mscVrIpNhrpNhsRxErrHopCountExceeded=mscVrIpNhrpNhsRxErrHopCountExceeded, mscVrIpNhrpComponentName=mscVrIpNhrpComponentName, mscVrIpNhrpNhsTxPurgeReply=mscVrIpNhrpNhsTxPurgeReply, mscVrIpNhrpNhsRowStatusTable=mscVrIpNhrpNhsRowStatusTable, mscVrIpNhrpNhsFwdRegisterReply=mscVrIpNhrpNhsFwdRegisterReply, mscVrIpNhrpNhcIdleDetectTimePeriod=mscVrIpNhrpNhcIdleDetectTimePeriod, mscVrIpNhrpNhcStatsTable=mscVrIpNhrpNhcStatsTable, ipNhrpCapabilities=ipNhrpCapabilities, mscVrIpNhrpNhcProvEntry=mscVrIpNhrpNhcProvEntry, mscVrIpNhrpNhsRxErrInvalidExtension=mscVrIpNhrpNhsRxErrInvalidExtension, mscVrIpNhrpNhcRxErrHopCountExceeded=mscVrIpNhrpNhcRxErrHopCountExceeded, ipNhrpGroupCA02A=ipNhrpGroupCA02A, mscVrIpNhrpNhsEpNetAddr=mscVrIpNhrpNhsEpNetAddr, mscVrIpNhrpNhsStatsTable=mscVrIpNhrpNhsStatsTable, mscVrIpNhrpNhsEpComponentName=mscVrIpNhrpNhsEpComponentName, mscVrIpNhrpNhcRxResolveReplyAck=mscVrIpNhrpNhcRxResolveReplyAck, mscVrIpNhrpNhsRxResolveReq=mscVrIpNhrpNhsRxResolveReq, mscVrIpNhrpProvEntry=mscVrIpNhrpProvEntry, mscVrIpNhrpNhcTxPurgeReq=mscVrIpNhrpNhcTxPurgeReq, mscVrIpNhrpRce=mscVrIpNhrpRce, mscVrIpNhrpNhsIndex=mscVrIpNhrpNhsIndex, mscVrIpNhrpNhcStorageType=mscVrIpNhrpNhcStorageType, mscVrIpNhrpNhcRxErrProtoAddrUnreachable=mscVrIpNhrpNhcRxErrProtoAddrUnreachable, mscVrIpNhrpAdminControlTable=mscVrIpNhrpAdminControlTable, mscVrPpIpPortLogicalIfNhrpIfComponentName=mscVrPpIpPortLogicalIfNhrpIfComponentName, mscVrIpNhrpRceDestMaskIndex=mscVrIpNhrpRceDestMaskIndex, mscVrIpNhrpNhsEpIndex=mscVrIpNhrpNhsEpIndex, mscVrIpNhrpNhcComponentName=mscVrIpNhrpNhcComponentName, mscVrIpNhrpRceRowStatusTable=mscVrIpNhrpRceRowStatusTable, mscVrIpNhrpFwdTransitRecord=mscVrIpNhrpFwdTransitRecord, mscVrIpNhrpNhsEpStorageType=mscVrIpNhrpNhsEpStorageType, mscVrIpNhrpNhcIdleDetectPacketCount=mscVrIpNhrpNhcIdleDetectPacketCount, mscVrIpNhrpNhcTxErrIndication=mscVrIpNhrpNhcTxErrIndication, mscVrIpNhrpNhsTxResolveReplyAck=mscVrIpNhrpNhsTxResolveReplyAck, mscVrIpNhrpNhsEpNetAddrSourceMask=mscVrIpNhrpNhsEpNetAddrSourceMask, mscVrIpNhrpNhsEpNetAddrDestinationAddress=mscVrIpNhrpNhsEpNetAddrDestinationAddress, mscVrIpNhrpNhcIndex=mscVrIpNhrpNhcIndex, mscVrIpNhrpNhsEp=mscVrIpNhrpNhsEp, mscVrIpNhrpNhsRxPurgeReply=mscVrIpNhrpNhsRxPurgeReply, mscVrIpNhrpNhcTxResolveReq=mscVrIpNhrpNhcTxResolveReq, mscVrIpNhrpNhsEpRowStatus=mscVrIpNhrpNhsEpRowStatus, mscVrIpNhrpSnmpOperStatus=mscVrIpNhrpSnmpOperStatus, mscVrIpNhrpNhsTxResolveReplyNakProhibited=mscVrIpNhrpNhsTxResolveReplyNakProhibited, mscVrIpNhrpNhsRxErrProtoAddrUnreachable=mscVrIpNhrpNhsRxErrProtoAddrUnreachable, mscVrIpNhrpNhsTxErrHopCountExceeded=mscVrIpNhrpNhsTxErrHopCountExceeded, mscVrIpNhrpNhsEpNetAddrRowStatusEntry=mscVrIpNhrpNhsEpNetAddrRowStatusEntry, mscVrIpNhrpNhsEpNetAddrRowStatus=mscVrIpNhrpNhsEpNetAddrRowStatus, mscVrIpNhrpRceOperTable=mscVrIpNhrpRceOperTable, mscVrIpNhrpNhsRxPurgeReq=mscVrIpNhrpNhsRxPurgeReq, ipNhrpGroupCA=ipNhrpGroupCA, mscVrIpNhrpNhcRxResolveReplyNakNoBinding=mscVrIpNhrpNhcRxResolveReplyNakNoBinding, mscVrIpNhrpNhsStatsEntry=mscVrIpNhrpNhsStatsEntry, mscVrPpIpPortLogicalIfNhrpIfRowStatusTable=mscVrPpIpPortLogicalIfNhrpIfRowStatusTable, mscVrPpIpPortLogicalIfNhrpIf=mscVrPpIpPortLogicalIfNhrpIf, mscVrIpNhrpNhsEpAction=mscVrIpNhrpNhsEpAction, mscVrIpNhrpNhcRxResolveReplyNakNotUnique=mscVrIpNhrpNhcRxResolveReplyNakNotUnique, mscVrIpNhrpNhcAtmFlowDetection=mscVrIpNhrpNhcAtmFlowDetection, mscVrIpNhrpNhcRowStatus=mscVrIpNhrpNhcRowStatus, mscVrIpNhrpNhsRxErrLoopDetected=mscVrIpNhrpNhsRxErrLoopDetected, ipNhrpGroupCA02=ipNhrpGroupCA02, mscVrIpNhrpNhcRxPurgeReply=mscVrIpNhrpNhcRxPurgeReply, mscVrIpNhrpNhsFwdResolveReq=mscVrIpNhrpNhsFwdResolveReq, mscVrIpNhrpNhcRxErrInvalidExtension=mscVrIpNhrpNhcRxErrInvalidExtension, ipNhrpCapabilitiesCA02A=ipNhrpCapabilitiesCA02A, mscVrIpNhrpNhsRxErrInvalidResReplyReceived=mscVrIpNhrpNhsRxErrInvalidResReplyReceived, mscVrIpNhrpNhsTxErrInvalidExtension=mscVrIpNhrpNhsTxErrInvalidExtension, mscVrIpNhrpNhsTxPurgeReq=mscVrIpNhrpNhsTxPurgeReq, mscVrIpNhrpOperationalState=mscVrIpNhrpOperationalState, mscVrIpNhrpNhsEpNetAddrDestinationMask=mscVrIpNhrpNhsEpNetAddrDestinationMask, mscVrIpNhrpNhsEpProtocol=mscVrIpNhrpNhsEpProtocol, mscVrIpNhrpNhsEpRowStatusEntry=mscVrIpNhrpNhsEpRowStatusEntry, mscVrIpNhrpNhsEpNetAddrComponentName=mscVrIpNhrpNhsEpNetAddrComponentName, mscVrIpNhrpNhsTxResolveReplyNakNoBinding=mscVrIpNhrpNhsTxResolveReplyNakNoBinding, mscVrIpNhrpRowStatusEntry=mscVrIpNhrpRowStatusEntry, mscVrIpNhrpIndex=mscVrIpNhrpIndex, mscVrIpNhrpNhsEpProvEntry=mscVrIpNhrpNhsEpProvEntry, mscVrIpNhrpRceRowStatusEntry=mscVrIpNhrpRceRowStatusEntry, mscVrIpNhrpRceComponentName=mscVrIpNhrpRceComponentName, mscVrIpNhrpNhsRxRegisterReq=mscVrIpNhrpNhsRxRegisterReq, mscVrIpNhrpNhcRowStatusEntry=mscVrIpNhrpNhcRowStatusEntry, mscVrIpNhrpOperTable=mscVrIpNhrpOperTable, mscVrPpIpPortLogicalIfNhrpIfIndex=mscVrPpIpPortLogicalIfNhrpIfIndex, mscVrIpNhrpRceEntryState=mscVrIpNhrpRceEntryState, mscVrIpNhrp=mscVrIpNhrp, mscVrIpNhrpNhsFwdRegisterReq=mscVrIpNhrpNhsFwdRegisterReq, mscVrPpIpPortLogicalIfNhrpIfStorageType=mscVrPpIpPortLogicalIfNhrpIfStorageType, mscVrIpNhrpCurrResCacheEntries=mscVrIpNhrpCurrResCacheEntries, mscVrIpNhrpRceNbmaAddress=mscVrIpNhrpRceNbmaAddress, mscVrPpIpPortLogicalIfNhrpIfRowStatusEntry=mscVrPpIpPortLogicalIfNhrpIfRowStatusEntry, mscVrIpNhrpUsageState=mscVrIpNhrpUsageState, mscVrIpNhrpNhsEpNetAddrIndex=mscVrIpNhrpNhsEpNetAddrIndex, mscVrIpNhrpMaxResCacheEntries=mscVrIpNhrpMaxResCacheEntries, mscVrIpNhrpNhsEpRowStatusTable=mscVrIpNhrpNhsEpRowStatusTable, mscVrIpNhrpRowStatusTable=mscVrIpNhrpRowStatusTable, mscVrIpNhrpNhsTxResolveReplyNakNotUnique=mscVrIpNhrpNhsTxResolveReplyNakNotUnique, mscVrIpNhrpNhsFwdPurgeReply=mscVrIpNhrpNhsFwdPurgeReply, mscVrIpNhrpNhcRxErrLoopDetected=mscVrIpNhrpNhcRxErrLoopDetected, mscVrIpNhrpNhsEpNetAddrSourceAddress=mscVrIpNhrpNhsEpNetAddrSourceAddress, ipNhrpMIB=ipNhrpMIB, mscVrIpNhrpNhcRxResolveReplyNakProhibited=mscVrIpNhrpNhcRxResolveReplyNakProhibited, mscVrIpNhrpNhsFwdPurgeReq=mscVrIpNhrpNhsFwdPurgeReq, mscVrIpNhrpRceShortcut=mscVrIpNhrpRceShortcut, ipNhrpCapabilitiesCA02=ipNhrpCapabilitiesCA02, ipNhrpGroup=ipNhrpGroup, mscVrIpNhrpNhcRxErrAuthenticationFailure=mscVrIpNhrpNhcRxErrAuthenticationFailure, mscVrIpNhrpRceDestAddrIndex=mscVrIpNhrpRceDestAddrIndex, mscVrIpNhrpNhsEpNetAddrProvEntry=mscVrIpNhrpNhsEpNetAddrProvEntry, mscVrPpIpPortLogicalIfNhrpIfRowStatus=mscVrPpIpPortLogicalIfNhrpIfRowStatus, mscVrIpNhrpNhsTxErrProtoError=mscVrIpNhrpNhsTxErrProtoError, mscVrIpNhrpSnmpAdminStatus=mscVrIpNhrpSnmpAdminStatus, mscVrIpNhrpOperEntry=mscVrIpNhrpOperEntry, mscVrIpNhrpNhcTxPurgeReply=mscVrIpNhrpNhcTxPurgeReply, mscVrIpNhrpStorageType=mscVrIpNhrpStorageType, mscVrIpNhrpNhs=mscVrIpNhrpNhs, mscVrIpNhrpNhsStorageType=mscVrIpNhrpNhsStorageType, mscVrIpNhrpAdminState=mscVrIpNhrpAdminState, mscVrIpNhrpNhsEpNetAddrProvTable=mscVrIpNhrpNhsEpNetAddrProvTable, mscVrIpNhrpNhsFwdResolveReply=mscVrIpNhrpNhsFwdResolveReply, mscVrIpNhrpRceRowStatus=mscVrIpNhrpRceRowStatus, mscVrIpNhrpStateEntry=mscVrIpNhrpStateEntry, mscVrIpNhrpNhcRxErrUnrecognizedExtension=mscVrIpNhrpNhcRxErrUnrecognizedExtension, mscVrIpNhrpNhsFwdErrorIndication=mscVrIpNhrpNhsFwdErrorIndication, mscVrIpNhrpNhc=mscVrIpNhrpNhc, mscVrIpNhrpNhsTxResolveReplyNakInsufResources=mscVrIpNhrpNhsTxResolveReplyNakInsufResources, mscVrIpNhrpNhcFlowDetectPacketCount=mscVrIpNhrpNhcFlowDetectPacketCount, mscVrIpNhrpNhsTxErrLoopDetected=mscVrIpNhrpNhsTxErrLoopDetected, mscVrIpNhrpRevTransitRecord=mscVrIpNhrpRevTransitRecord, mscVrIpNhrpNhcRxPurgeReq=mscVrIpNhrpNhcRxPurgeReq, mscVrIpNhrpNhsEpProvTable=mscVrIpNhrpNhsEpProvTable, mscVrIpNhrpNhsEpNetAddrRowStatusTable=mscVrIpNhrpNhsEpNetAddrRowStatusTable, mscVrIpNhrpNhsRxErrUnrecognizedExtension=mscVrIpNhrpNhsRxErrUnrecognizedExtension, mscVrIpNhrpNhcStatsEntry=mscVrIpNhrpNhcStatsEntry, mscVrIpNhrpRceHoldingTime=mscVrIpNhrpRceHoldingTime, mscVrIpNhrpRowStatus=mscVrIpNhrpRowStatus, mscVrIpNhrpNhsRowStatusEntry=mscVrIpNhrpNhsRowStatusEntry, mscVrIpNhrpNhsRxErrAuthenticationFailure=mscVrIpNhrpNhsRxErrAuthenticationFailure, mscVrIpNhrpNhsRowStatus=mscVrIpNhrpNhsRowStatus, mscVrIpNhrpNhcRxResolveReplyNakInsufResources=mscVrIpNhrpNhcRxResolveReplyNakInsufResources, mscVrIpNhrpNhsComponentName=mscVrIpNhrpNhsComponentName, mscVrIpNhrpPeakResCacheEntries=mscVrIpNhrpPeakResCacheEntries, mscVrIpNhrpNhsRxErrProtoError=mscVrIpNhrpNhsRxErrProtoError, mscVrIpNhrpStateTable=mscVrIpNhrpStateTable, mscVrIpNhrpRceStorageType=mscVrIpNhrpRceStorageType, mscVrIpNhrpOperStatusEntry=mscVrIpNhrpOperStatusEntry, mscVrIpNhrpNhsEpNetAddrStorageType=mscVrIpNhrpNhsEpNetAddrStorageType)
