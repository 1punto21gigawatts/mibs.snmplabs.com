#
# PySNMP MIB module HPNSAHOTSWAPSUBSYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAHOTSWAPSUBSYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, iso, Integer32, ObjectIdentity, Gauge32, IpAddress, ModuleIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "iso", "Integer32", "ObjectIdentity", "Gauge32", "IpAddress", "ModuleIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "enterprises", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaHotSwap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20))
hpnsaHSMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 1))
hpnsaHSAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2))
hpnsaHSModule = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3))
hpnsaHSDev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4))
hpnsaHSMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSMibRevMajor.setDescription('The major revision level of the MIB.')
hpnsaHSMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSMibRevMinor.setDescription('The minor revision level of the MIB.')
hpnsaHSAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1), )
if mibBuilder.loadTexts: hpnsaHSAgentTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSAgentTable.setDescription('A table of SNMP Agents that satisfy requests for this MIB.')
hpnsaHSAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1), ).setIndexNames((0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSAgentIndex"))
if mibBuilder.loadTexts: hpnsaHSAgentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSAgentEntry.setDescription('A description of the agents that access Hot Swap Subsystem')
hpnsaHSAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSAgentIndex.setDescription('A unique index for this module description.')
hpnsaHSAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSAgentName.setDescription('Name of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaHSAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSAgentVersion.setDescription('Version number of the Agent/Agents satisfying SNMP requests for this MIB.')
hpnsaHSAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSAgentDate.setDescription('The date on which this Agent was created. field octets contents range _________________________________________________ 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaHSModuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1), )
if mibBuilder.loadTexts: hpnsaHSModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleTable.setDescription(' A table of Hot Swap Subsystem module information entries.')
hpnsaHSModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1), ).setIndexNames((0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSModuleIndex"))
if mibBuilder.loadTexts: hpnsaHSModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleEntry.setDescription(' Hot Swap Subsystem module information.')
hpnsaHSModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleIndex.setDescription('A unique index for the Hot Swap module.')
hpnsaHSModuleScsiCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("error", 3), ("no-cable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleScsiCableType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleScsiCableType.setDescription('The SCSI cable type attached to the backplane on the right side a Hot Swap Subsystem cage.')
hpnsaHSModuleTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("normal", 2), ("warning", 3), ("emergency", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleTempStatus.setDescription("Status of the Hot Swap Subsystem's temperature sensor.")
hpnsaHSModuleSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleSwitchState.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleSwitchState.setDescription('Status of the DIP switches on the Hot Swap Subsystem.')
hpnsaHSModuleDeviceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("at-poweron", 1), ("by-start-command", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleDeviceStartup.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleDeviceStartup.setDescription('State of the Disk Spin Up DIP switch on the Hot Swap Subsystem. 1 = disks spin up with the system after a period of time 2 = disks spin up after receiving SCSI Start Command')
hpnsaHSModuleMiddleDrvAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowest", 1), ("default", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleMiddleDrvAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleMiddleDrvAddr.setDescription('State of the Middle Drive Address DIP switch on the Hot Swap Subsystem. 1 = lowest value, either 0 or 8 depending on High Eight Address 2 = default, either 2 or 10 depending on High Eight Address')
hpnsaHSModuleHi8ScsiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hi-range-9to15", 1), ("lo-range-1to7", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleHi8ScsiAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSModuleHi8ScsiAddr.setDescription('State of the High Eight SCSI Address DIP switch on the Hot Swap Subsystem. 1 = SCSI address range from 1 to 7 2 = SCSI address range from 9 to 15')
hpnsaHSDevTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1), )
if mibBuilder.loadTexts: hpnsaHSDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevTable.setDescription('A table of Hot Swap Subsystem device information entries.')
hpnsaHSDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1), ).setIndexNames((0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSDevModuleIndex"), (0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSDevIndex"))
if mibBuilder.loadTexts: hpnsaHSDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevEntry.setDescription(' Hot Swap Subsystem device information.')
hpnsaHSDevModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevModuleIndex.setDescription('A unique index for the Hot Swap module.')
hpnsaHSDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevIndex.setDescription('Physical device number in the Hot Swap Module.')
hpnsaHSDevExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("not-present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevExistence.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevExistence.setDescription('Defines whether a device exists in the physical slot of the Hot Swap Subsystem.')
hpnsaHSDevScsiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevScsiAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevScsiAddr.setDescription('SCSI address of the device in the physical slot of the Hot Swap Subsystem.')
hpnsaHSDevPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSDevPowerStatus.setDescription('Defines whether the power connector of a particular device in the Hot Swap Subsystem is connected.')
hpnsaHSPwrAlertDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaHSPwrAlertDelay.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaHSPwrAlertDelay.setDescription('Set this variable to non-zero integer value to skip checking the power connection state of Starfish device.')
mibBuilder.exportSymbols("HPNSAHOTSWAPSUBSYSTEM-MIB", hpnsaHSDevIndex=hpnsaHSDevIndex, hp=hp, hpnsaHSDev=hpnsaHSDev, hpnsaHSMibRevMajor=hpnsaHSMibRevMajor, hpnsaHSModuleSwitchState=hpnsaHSModuleSwitchState, hpnsaHSDevTable=hpnsaHSDevTable, hpnsaHSPwrAlertDelay=hpnsaHSPwrAlertDelay, hpnsaHSAgentTable=hpnsaHSAgentTable, hpnsaHSModule=hpnsaHSModule, hpnsaHSModuleIndex=hpnsaHSModuleIndex, hpnsaHSAgentIndex=hpnsaHSAgentIndex, hpnsaHSDevPowerStatus=hpnsaHSDevPowerStatus, hpnsaHSAgentEntry=hpnsaHSAgentEntry, hpnsaHSModuleScsiCableType=hpnsaHSModuleScsiCableType, hpnsaHSDevModuleIndex=hpnsaHSDevModuleIndex, hpnsaHSMibRev=hpnsaHSMibRev, hpnsaHSMibRevMinor=hpnsaHSMibRevMinor, hpnsaHSModuleTable=hpnsaHSModuleTable, hpnsaHSModuleDeviceStartup=hpnsaHSModuleDeviceStartup, hpnsaHSDevScsiAddr=hpnsaHSDevScsiAddr, hpnsaHSModuleEntry=hpnsaHSModuleEntry, hpnsaHSDevExistence=hpnsaHSDevExistence, hpnsaHSAgent=hpnsaHSAgent, hpnsaHSAgentDate=hpnsaHSAgentDate, hpnsaHSAgentName=hpnsaHSAgentName, hpnsaHSDevEntry=hpnsaHSDevEntry, hpnsaHSModuleMiddleDrvAddr=hpnsaHSModuleMiddleDrvAddr, nm=nm, hpnsaHSAgentVersion=hpnsaHSAgentVersion, hpnsa=hpnsa, hpnsaHSModuleHi8ScsiAddr=hpnsaHSModuleHi8ScsiAddr, hpnsaHSModuleTempStatus=hpnsaHSModuleTempStatus, hpnsaHotSwap=hpnsaHotSwap)
