#
# PySNMP MIB module AT-INSTALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-INSTALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, Counter32, IpAddress, ObjectIdentity, MibIdentifier, Bits, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Counter32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "NotificationType", "iso")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
install = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49))
install.setRevisions(('2006-06-28 12:22',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: install.setRevisionsDescriptions(('Initial Revision',))
if mibBuilder.loadTexts: install.setLastUpdated('200606281222Z')
if mibBuilder.loadTexts: install.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: install.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: install.setDescription('This MIB file contains definitions of managed objects for the INSTALL module. ')
installTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1), )
if mibBuilder.loadTexts: installTable.setStatus('current')
if mibBuilder.loadTexts: installTable.setDescription('The list of install configurations for the router.')
installEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1), ).setIndexNames((0, "AT-INSTALL-MIB", "instIndex"))
if mibBuilder.loadTexts: installEntry.setStatus('current')
if mibBuilder.loadTexts: installEntry.setDescription('An entry in the list of install configurations.')
instIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("temporary", 1), ("preferred", 2), ("default", 3), ("current", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instIndex.setStatus('current')
if mibBuilder.loadTexts: instIndex.setDescription('The index for the install table. There are four install configurations defined in the router, default, preferred, temporary and current. The router will attempt to use these in the order temporary, preferred, default when it boots. An install that is undefined will be skipped, an install which points to a file which is not present will be skipped. When the temporary install is used, the information is deleted. The current configuration shows what the router currently has installed.')
instRelDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eprom", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelDevice.setStatus('current')
if mibBuilder.loadTexts: instRelDevice.setDescription('The device for the release in the install. If the device is flash the file for the release is given in instRelName. Devices none(1) or flash(3) are invalid for the default(3) release.')
instRelName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelName.setStatus('current')
if mibBuilder.loadTexts: instRelName.setDescription('The file name for the release in the install, if the instRelDevice is flash(3). If the instRelDevice is none(1) or eprom(2), this object should be a null string.')
instRelMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelMajor.setStatus('current')
if mibBuilder.loadTexts: instRelMajor.setDescription('The major release number for this install. This information is obtained by the router when the other elements in the row are set and is thus not directly set by management. If the release number is a.b.c, the major release number is a.')
instRelMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelMinor.setStatus('current')
if mibBuilder.loadTexts: instRelMinor.setDescription('The minor release number for this install. This information is obtained by the router when the other elements in the row are set and is thus not directly set by management. If the release number is a.b.c, the major release number is b.')
instPatDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("flash", 3), ("nvs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instPatDevice.setStatus('current')
if mibBuilder.loadTexts: instPatDevice.setDescription('The device for the patch in the install. The file for the patch is given in instPatName unless the device is none(1).')
instPatName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instPatName.setStatus('current')
if mibBuilder.loadTexts: instPatName.setDescription('The file name for the patch in the install.')
instRelInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelInterim.setStatus('current')
if mibBuilder.loadTexts: instRelInterim.setDescription('The interim release number for this install. This information is obtained by the router when the other elements in the row are set and is thus not directly set by management. If the release number is a.b.c, the major release number is c. If the release number is a.b, the interim release number is 0.')
instRelExists = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelExists.setStatus('current')
if mibBuilder.loadTexts: instRelExists.setDescription("Indicates if the release file exists or not. true(1) means it exists, false(2) means it doesn't.")
instPatExists = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instPatExists.setStatus('current')
if mibBuilder.loadTexts: instPatExists.setDescription("Indicates if the patch file exists or not. true(1) means it exists, false(2) means it doesn't")
installHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2), )
if mibBuilder.loadTexts: installHistoryTable.setStatus('current')
if mibBuilder.loadTexts: installHistoryTable.setDescription('The table of descriptions of events in the install history of the router.')
installHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2, 1), ).setIndexNames((0, "AT-INSTALL-MIB", "instHistIndex"))
if mibBuilder.loadTexts: installHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: installHistoryEntry.setDescription('A single line describing part of the install history of the router.')
instHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instHistIndex.setStatus('current')
if mibBuilder.loadTexts: instHistIndex.setDescription('The index of this event in the install history. Indices run from 1 to the maximum number. The maximum number is not available as a managed object so this table will have to be traversed in order to find out how large it is.')
instHistLine = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instHistLine.setStatus('current')
if mibBuilder.loadTexts: instHistLine.setDescription('A line of text describing a single event in the install history of the router.')
configFile = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFile.setStatus('current')
if mibBuilder.loadTexts: configFile.setDescription('The name of the file that the router will configure from at boot. The format of the name is the same as that for fileName described above. If the configuration file name is a zero length string, then there is no configuration file defined in the router.')
licenceTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4), )
if mibBuilder.loadTexts: licenceTable.setStatus('current')
if mibBuilder.loadTexts: licenceTable.setDescription('The list of release licences in the router.')
licenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1), ).setIndexNames((0, "AT-INSTALL-MIB", "licenceIndex"))
if mibBuilder.loadTexts: licenceEntry.setStatus('current')
if mibBuilder.loadTexts: licenceEntry.setDescription('An entry in the list of release licences.')
licenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceIndex.setStatus('current')
if mibBuilder.loadTexts: licenceIndex.setDescription('A unique licence index. Licence indices are recalculated every time the router reboots to reflect the current licences on the router. As licences are added, new indices are allocated to the new licences.')
licenceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("deleting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceStatus.setStatus('current')
if mibBuilder.loadTexts: licenceStatus.setDescription('The status of the file. When read, this object will always return a value of ok(1), since the object will not exist if the value is deleting(2). Write the value deleting(2) to this object to delete the file.')
licenceRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceRelease.setStatus('current')
if mibBuilder.loadTexts: licenceRelease.setDescription('The file name for the release whose licence this is.')
licenceMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceMajor.setStatus('current')
if mibBuilder.loadTexts: licenceMajor.setDescription('The major release number for the release whose licence this is.')
licenceMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceMinor.setStatus('current')
if mibBuilder.loadTexts: licenceMinor.setDescription('The minor release number for the release whose licence this is.')
licencePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 6), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licencePassword.setStatus('current')
if mibBuilder.loadTexts: licencePassword.setDescription('The password for this release. The password is a string of hex digits.')
licenceExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceExpiry.setStatus('current')
if mibBuilder.loadTexts: licenceExpiry.setDescription('A human-readable string that gives the expiry date of this licence.')
licenceInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceInterim.setStatus('current')
if mibBuilder.loadTexts: licenceInterim.setDescription('The interim release number for the release whose licence this is.')
createConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: createConfigFile.setStatus('current')
if mibBuilder.loadTexts: createConfigFile.setDescription('The name of a file to create containing the current router configuration. A read from this variable will return the same as the variable configFile. Thus to save the current configuration in the current configuration file, read createConfigFile first, then write the result back to createConfigFile. If this variable is written with the name of an existing file, the file will be replaced with the current configuration.')
configFileExist = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileExist.setStatus('current')
if mibBuilder.loadTexts: configFileExist.setDescription("Indicates if the boot configuration file exists or not. true(1) means it exists, false(2) means it doesn't")
installTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 0))
configFileExistTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 0, 1)).setObjects(("AT-INSTALL-MIB", "configFileExist"))
if mibBuilder.loadTexts: configFileExistTrap.setStatus('current')
if mibBuilder.loadTexts: configFileExistTrap.setDescription('This trap is generated when the boot file is detected as missing')
currentConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConfigFile.setStatus('current')
if mibBuilder.loadTexts: currentConfigFile.setDescription('The name of the file that the router is currently configured with. The format of the name is the same as that for fileName described above. If the current configuration file name is a zero length string, then there is no current configuration file defined in the router.')
mibBuilder.exportSymbols("AT-INSTALL-MIB", instIndex=instIndex, instRelMajor=instRelMajor, configFileExist=configFileExist, currentConfigFile=currentConfigFile, instPatName=instPatName, installHistoryTable=installHistoryTable, licenceTable=licenceTable, instRelMinor=instRelMinor, installEntry=installEntry, licenceInterim=licenceInterim, installTable=installTable, licenceIndex=licenceIndex, instHistLine=instHistLine, licenceEntry=licenceEntry, licenceRelease=licenceRelease, licencePassword=licencePassword, installTrap=installTrap, licenceMajor=licenceMajor, instPatExists=instPatExists, licenceMinor=licenceMinor, instRelExists=instRelExists, instHistIndex=instHistIndex, instRelInterim=instRelInterim, instRelDevice=instRelDevice, instRelName=instRelName, PYSNMP_MODULE_ID=install, installHistoryEntry=installHistoryEntry, licenceExpiry=licenceExpiry, configFileExistTrap=configFileExistTrap, configFile=configFile, instPatDevice=instPatDevice, install=install, createConfigFile=createConfigFile, licenceStatus=licenceStatus)
