#
# PySNMP MIB module BAS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
BasSlotId, BasChassisId, BasLogicalPortId, basExtIf, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasChassisId", "BasLogicalPortId", "basExtIf", "BasInterfaceId")
InterfaceIndex, ifEntry = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Gauge32, Integer32, Counter32, ObjectIdentity, MibIdentifier, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Gauge32", "Integer32", "Counter32", "ObjectIdentity", "MibIdentifier", "NotificationType", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
basIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1))
if mibBuilder.loadTexts: basIfMIB.setLastUpdated('9811061430Z')
if mibBuilder.loadTexts: basIfMIB.setOrganization('Broadband Access Systems, Inc.')
if mibBuilder.loadTexts: basIfMIB.setContactInfo(' Tech Support Broadband Access Systems, Inc. 201 Forest Street Marlborough, MA 01752 USA 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basIfMIB.setDescription('The MIB module defines the configuration MIB objects for Broadband Access Systems, Inc. interfaces extensions.')
basIfTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2), )
if mibBuilder.loadTexts: basIfTable.setStatus('current')
if mibBuilder.loadTexts: basIfTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
basIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1), )
ifEntry.registerAugmentions(("BAS-IF-MIB", "basIfEntry"))
basIfEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: basIfEntry.setStatus('current')
if mibBuilder.loadTexts: basIfEntry.setDescription('An entry containing management information applicable to a particular interface.')
basIfChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 1), BasChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfChassis.setStatus('current')
if mibBuilder.loadTexts: basIfChassis.setDescription('The BAS Chassis ID of this card.')
basIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 2), BasSlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfSlot.setStatus('current')
if mibBuilder.loadTexts: basIfSlot.setDescription('The BAS Slot ID of this card.')
basIfInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 3), BasInterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfInterface.setStatus('current')
if mibBuilder.loadTexts: basIfInterface.setDescription('The BAS interface ID of this card.')
basIfLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 4), BasLogicalPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfLPort.setStatus('current')
if mibBuilder.loadTexts: basIfLPort.setDescription('The BAS logical port ID of this card.')
basIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("icl", 1), ("ccl", 2), ("egress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfClass.setStatus('current')
if mibBuilder.loadTexts: basIfClass.setDescription('The BAS class of this interface.')
basIfSimpleProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfSimpleProxyArp.setStatus('current')
if mibBuilder.loadTexts: basIfSimpleProxyArp.setDescription('Enable or disable simple proxy ARP so CMTS hosts can communicate with one another.')
basIfDhcpCmSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfDhcpCmSubnet.setStatus('current')
if mibBuilder.loadTexts: basIfDhcpCmSubnet.setDescription('Subnet to use for giaddr for cable modem DHCP requests.')
basIfDhcpHostSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfDhcpHostSubnet.setStatus('current')
if mibBuilder.loadTexts: basIfDhcpHostSubnet.setDescription('Subnet to use for giaddr for host DHCP requests.')
basIfArpAgingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfArpAgingDisable.setStatus('current')
if mibBuilder.loadTexts: basIfArpAgingDisable.setDescription('Enable or disable timing out ARP enties on this interface.')
basIfSecurityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfSecurityFilter.setStatus('current')
if mibBuilder.loadTexts: basIfSecurityFilter.setDescription('Enable or disable security filtering on this interface. If this filter is enabled all packets sent to 10.x.13.x from a CM other than SNMP,DHCP,ICMP,TOD,SYSLOG, and TFTP will be dropped and all packets from CPE other than ICMP and DHCP will be dropped.')
mibBuilder.exportSymbols("BAS-IF-MIB", basIfMIB=basIfMIB, basIfSecurityFilter=basIfSecurityFilter, basIfLPort=basIfLPort, basIfClass=basIfClass, basIfChassis=basIfChassis, basIfDhcpHostSubnet=basIfDhcpHostSubnet, basIfInterface=basIfInterface, basIfEntry=basIfEntry, basIfTable=basIfTable, basIfSimpleProxyArp=basIfSimpleProxyArp, PYSNMP_MODULE_ID=basIfMIB, basIfSlot=basIfSlot, basIfArpAgingDisable=basIfArpAgingDisable, basIfDhcpCmSubnet=basIfDhcpCmSubnet)
