#
# PySNMP MIB module UB-MIB-SUPRV (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UB-MIB-SUPRV
# Produced by pysmi-0.3.4 at Wed May  1 15:28:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, DisplayString = mibBuilder.importSymbols("RFC1158-MIB", "ifIndex", "DisplayString")
PhysAddress, = mibBuilder.importSymbols("RFC1213", "PhysAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, Counter32, IpAddress, enterprises, ObjectIdentity, ModuleIdentity, Counter64, Unsigned32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Counter32", "IpAddress", "enterprises", "ObjectIdentity", "ModuleIdentity", "Counter64", "Unsigned32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ubNode = MibIdentifier((1, 3, 6, 1, 4, 1, 75))
ubEquip = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1))
ubTrapAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 3))
ubSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 4))
ubSuprv = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1, 1))
card = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1, 2))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 1, 1, 3))
ubSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 75, 4, 1))
hubId = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubId.setStatus('mandatory')
if mibBuilder.loadTexts: hubId.setDescription(" HUB ENCLOSURE Group The address of the hub enclosure in MAC address format. This is the supervisor's MAC address.")
hubType = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 11))).clone(namedValues=NamedValues(("oneSlot-ASE1000", 1), ("twoSlot-ASE2000", 3), ("fiveSlot-ASE3000", 5), ("elevenSlot-ASE7000", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubType.setStatus('mandatory')
if mibBuilder.loadTexts: hubType.setDescription(' The type of enclosure; the number of slots in the enclosure.')
hubName = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubName.setStatus('mandatory')
if mibBuilder.loadTexts: hubName.setDescription(' The name of the Access/One enclosure.')
hubSerNumber = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubSerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hubSerNumber.setDescription(' The serial number of the hub.')
hubIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hubIPAddr.setDescription(' The IP address used to communicate with the SNMP agent in the Supervisor.')
hubPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalPower", 2), ("acPowerAbnormal", 3), ("highTemp", 4), ("onePsModuleFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hubPowerSupplyStatus.setDescription(' The power supply status.')
hubTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("abnormalTemperature", 2), ("normalTemperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hubTempStatus.setDescription(' Indicates whether the temperature of at least one card in the enclosure is out of range.')
hubPollTime = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notApplicable", 1), ("no-polling-requested", 2), ("oneHalfSec", 3), ("oneSec", 4), ("onePt5secs", 5), ("twoSecs", 6), ("twoPt5secs", 7), ("threeSecs", 8), ("threePt5secs", 9), ("fourSecs", 10), ("fourPt5secs", 11), ("fiveSecs", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: hubPollTime.setDescription(' The time in tenths of seconds between polls of hub cards by the supervisor.')
hubResetAction = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("not-requested", 2), ("resetAllCards", 3), ("forceLoad", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubResetAction.setStatus('mandatory')
if mibBuilder.loadTexts: hubResetAction.setDescription(' When this internet-object is SET to a value of requested, resetAllCards, or forceLoad, the hub resets (according to the specific request), and after resetting locally sets the value of this internet-object to not-requested. Initially its value is not-requested.')
hubAFS = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalAirflow", 2), ("abnormalAirflow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAFS.setStatus('mandatory')
if mibBuilder.loadTexts: hubAFS.setDescription(' Indicates whether airflow inside the enclosure is normal. This applies only to enclosures with an Air Flow Sensor (AFS) installed and a supervisor capable of detecting the signal from this sensor (currently only the ASM-710 and ASM-760).')
ensupStaticNetConfig = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("netAndSupDirect", 2), ("supOnly", 3), ("netOnly", 4), ("supElseBridge", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupStaticNetConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ensupStaticNetConfig.setDescription(' CARD Group ensup: Ethernet Supervisor The configured status of the interface between the net module(s) and the backbone.')
ensupDynamicNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("netAndSupDirect", 2), ("supOnly", 3), ("netOnly", 4), ("bridgeOnly", 5), ("netOrSupLoopback", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupDynamicNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ensupDynamicNetStatus.setDescription(' The dynamically changed configuration status of the interface between the net module(s) and the backbone.')
ensupNetBridgeSlot = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notApplicable", 1), ("slot-1", 2), ("slot-2", 3), ("slot-3", 4), ("slot-4", 5), ("slot-5", 6), ("slot-6", 7), ("slot-7", 8), ("slot-8", 9), ("slot-9", 10), ("slot-10", 11), ("slot-11", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupNetBridgeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ensupNetBridgeSlot.setDescription(" The relative group (slot) containing a local bridge by which the modules access the backbone (relevant only if the value of ensupStaticNetConfig is 'sup-bridge').")
ensupCarrierCounter = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupCarrierCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ensupCarrierCounter.setDescription(' The number of times that carrier sense was on when sampled every 2 ms (used in conjunction with a1gUpTime).')
ensupNetUtilization = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupNetUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: ensupNetUtilization.setDescription(' The percentage of time that carrier sense was on; the percentage is expressed to the nearest tenth (as XXX.X%).')
ensupNetUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ensupNetUtilThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ensupNetUtilThreshold.setDescription(' The threshold for ensupNetUtilization (sends a trap when exceeded).Percentage utilization to the nearest whole integer.')
a1gTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7), )
if mibBuilder.loadTexts: a1gTable.setStatus('mandatory')
if mibBuilder.loadTexts: a1gTable.setDescription("a1g: Access/1 Group TABLE Row selection: the card's relative position in the enclosure, starting at 1.")
a1gEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "a1gSlotId"))
if mibBuilder.loadTexts: a1gEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a1gEntry.setDescription('')
a1gSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: a1gSlotId.setDescription(" The card's relative position in the enclosure, starting at 1.")
a1gPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gPorts.setStatus('mandatory')
if mibBuilder.loadTexts: a1gPorts.setDescription(' The number of ports on a card.')
a1gOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("initializing", 2), ("powerOnDiagnostics", 3), ("debugMode", 4), ("onlineDiagnostics", 5), ("moduleFault", 6), ("netBooting", 7), ("netLoading", 8), ("cbLoading", 9), ("up", 10), ("standby", 11), ("softwareDisabled", 12), ("reset", 13), ("inactive", 14), ("active", 15), ("notResponding", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a1gOperStatus.setDescription('states the module goes through when doing power-on diagnostics.')
a1gTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("abnormalTemperature", 2), ("normalTemperature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a1gTempStatus.setDescription(" An indication whether the card's temperature is too high.")
a1gEthBusAdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlock", 2), ("lock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1gEthBusAdmAction.setStatus('mandatory')
if mibBuilder.loadTexts: a1gEthBusAdmAction.setDescription(" The administrative status of a module's Ethernet Bus interface (action). For an ASM320, if a1gEthBusMgmtStatus == lockedByJumper, then values of this attribute cannot be set.")
a1gEthBusMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlocked", 2), ("locked", 3), ("notResponding", 4), ("autosegmented", 5), ("hardwareFault", 6), ("lockedByJumper", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gEthBusMgmtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a1gEthBusMgmtStatus.setDescription(" The management status of a module's Ethernet bus interface.")
a1gNetMgmtBusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("enabled", 2), ("notResponding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gNetMgmtBusOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a1gNetMgmtBusOperStatus.setDescription(' The operational status of the network management interface from the supervisor to the module (the control bus).')
a1gProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("notApplicable", 1), ("suprv-780", 2), ("suprv-700", 3), ("brsuprv-760", 4), ("brsuprv-710", 5), ("net-500", 6), ("net-550", 7), ("brnet-560", 8), ("brnet-510", 9), ("trc-400", 10), ("ecm-300", 11), ("tec-900", 12), ("fec-800", 13), ("ecm-310", 14), ("async-100", 15), ("mtm-7100", 16), ("m3270", 17), ("lebr-5300", 18), ("ltebr-5500", 19), ("lttbr-5550", 20), ("t1ebr-6300", 21), ("t1tbr-6500", 22), ("lftbr-5560", 23), ("lfebr-5360", 24), ("lebr-5340", 25), ("ecm-320-1", 26), ("ecm-320-2", 27), ("trc-410-1", 28), ("trc-410-2", 29), ("suprv-790", 30), ("ausup-700s", 31), ("tpsup-700s", 32), ("suprv-790s16", 33), ("fosup-700s", 34), ("suprv-700s", 35), ("net-500s", 36), ("rr-8300", 37), ("rr-8310", 38), ("rr-8320", 39), ("rr-8500", 40), ("rr-8510", 41), ("rr-8520", 42), ("fBrR-5361", 43), ("eTBrR-5530", 44), ("eBrR-5330", 45), ("suprv-790s4", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gProductType.setStatus('mandatory')
if mibBuilder.loadTexts: a1gProductType.setDescription(' The product type of an A/1 card.')
a1gUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: a1gUpTime.setDescription(' The elapsed time since the module started operating.')
a1gResets = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1gResets.setStatus('mandatory')
if mibBuilder.loadTexts: a1gResets.setDescription(' The number of times a module has been reset.')
a1gResetAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noResetRequested", 1), ("enterDebugMode", 2), ("podThenDebug", 3), ("podThenNetdownload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1gResetAction.setStatus('mandatory')
if mibBuilder.loadTexts: a1gResetAction.setDescription(' When this internet-object is SET to one of the request values, the card resets, and after resetting retains the value that was SET. Initially its value is not-requested.')
configTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8), )
if mibBuilder.loadTexts: configTable.setStatus('mandatory')
if mibBuilder.loadTexts: configTable.setDescription(" config: Access/1 Group Configuration TABLE Row selection: the card's relative position in the enclosure, starting at 1.")
configEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "configSlotId"))
if mibBuilder.loadTexts: configEntry.setStatus('mandatory')
if mibBuilder.loadTexts: configEntry.setDescription('')
configSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: configSlotId.setDescription(" The card's relative position in the enclosure, starting at 1.")
configFaultActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("reset", 2), ("stayInReset", 3), ("noSupvAction", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFaultActionType.setStatus('mandatory')
if mibBuilder.loadTexts: configFaultActionType.setDescription(' The action to be taken by the Supervisor following a fault on a card.')
configRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRetries.setStatus('mandatory')
if mibBuilder.loadTexts: configRetries.setDescription(' The maximum number of times a reset is attempted when configFaultAction is set to reset (no further attempts are made once the reset is successful).')
configPowerUpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("debug", 2), ("podThenDebug", 3), ("podThenNetdownload", 4), ("pod-CopyUserMem-Run", 5), ("pod-CopyDefaults-Run", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPowerUpMode.setStatus('mandatory')
if mibBuilder.loadTexts: configPowerUpMode.setDescription(' The actions taken by the module immediately after power up (pod is Power On Diagnostics).')
a1imTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9), )
if mibBuilder.loadTexts: a1imTable.setStatus('mandatory')
if mibBuilder.loadTexts: a1imTable.setDescription(' a1im: Access/1 Intelligent Module TABLE Row selection: the value of the internet-object a1imSlotId, which contains the relative position of a card within an enclosure, starting at 1.')
a1imEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "a1imSlotId"))
if mibBuilder.loadTexts: a1imEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a1imEntry.setDescription('')
a1imSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: a1imSlotId.setDescription(' The relative slot position of a card, starting at 1.')
a1imMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a1imMACAddr.setDescription(" The module's MAC address (for a bridge, its first network interface). May be (e.g., for the TRC-410) a unique id chosen from the set of MAC addresses.")
a1imPodDiagnosticMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imPodDiagnosticMsg.setStatus('mandatory')
if mibBuilder.loadTexts: a1imPodDiagnosticMsg.setDescription(' A text message describing a power-on-diagnostic state.')
a1imModuleFault = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("noFault", 2), ("parityError", 3), ("networkError", 4), ("diagosticError", 5), ("operationalError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imModuleFault.setStatus('mandatory')
if mibBuilder.loadTexts: a1imModuleFault.setDescription(' Faults detected by the module.')
a1imHaltReason = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("notAvailable", 1), ("unexpectedSoftInterrupt", 2), ("halted", 3), ("singleStepped", 4), ("breakpoint", 5), ("errorDivideByZero", 6), ("badSingleStep", 7), ("nonMaskableInterrupt", 8), ("badBreakpoint", 9), ("arithmeticOverflow", 10), ("exceededArrayBounds", 11), ("invalidOpcode", 12), ("invalidEscapeOpcode", 13), ("timer-0Interrupt", 14), ("reservedInterrupt", 15), ("dma-0Interrupt", 16), ("dma-1Interrupt", 17), ("int-0Interrupt", 18), ("int-1Interrupt", 19), ("int-2Interrupt", 20), ("timer-1Interrupt", 21), ("timer-2Interrupt", 22), ("parityError", 23), ("watchDogTimeout", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imHaltReason.setStatus('mandatory')
if mibBuilder.loadTexts: a1imHaltReason.setDescription(' The last specific halt reason detected by the card.')
a1imDebugRegisters = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1imDebugRegisters.setStatus('mandatory')
if mibBuilder.loadTexts: a1imDebugRegisters.setDescription(' A set of 14 80186 registers used for debugging purposes. These are CS, IP, FLAG, AX, BX, CX, DX, SP, BP, SI, DI, DS, ES, and SS.')
tplTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10), )
if mibBuilder.loadTexts: tplTable.setStatus('mandatory')
if mibBuilder.loadTexts: tplTable.setDescription(' tpl: Transport Layer TABLE Row selection: the value of the internet-object tplSlotId, which contains the relative position of a card within an enclosure, starting at 1.')
tplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tplSlotId"))
if mibBuilder.loadTexts: tplEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tplEntry.setDescription('')
tplSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: tplSlotId.setDescription(' The relative slot position of a card, starting at 1.')
tplIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tplIPAddress.setDescription(" The card's IP address (only applies to TCP/IP)")
tplNiuName = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplNiuName.setStatus('mandatory')
if mibBuilder.loadTexts: tplNiuName.setDescription("The card's Niu name (only applies to ISO)")
tplProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("xns", 2), ("tcpIp", 3), ("iso", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: tplProtocolType.setDescription(' The type of transport protocol used by the module.')
tplSuprvPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("responding", 2), ("notResponding", 3), ("pollingSuspended", 4), ("cannotPoll", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tplSuprvPollStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tplSuprvPollStatus.setDescription(' Indicates whether the module has responded to supervisor polling over Ethernet.')
imenEthBusTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11), )
if mibBuilder.loadTexts: imenEthBusTable.setStatus('mandatory')
if mibBuilder.loadTexts: imenEthBusTable.setDescription(' imen: Intelligent Module Ethernet Datalink TABLE (Ethernet Bus interface) Row selection: the value of the internet-object imenSlotId, which contains the relative position of a card within an enclosure, starting at 1.')
imenEthBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "imenSlotId"))
if mibBuilder.loadTexts: imenEthBusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: imenEthBusEntry.setDescription('')
imenSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: imenSlotId.setDescription(' The relative position of the card in the enclosure, starting from 1.')
imenTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: imenTransmitPkts.setDescription(' The total number of packets transmitted.')
imenReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: imenReceivePkts.setDescription(' The total number of packets received.')
imenCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: imenCRCErrors.setDescription(' The number of packets received with CRC errors.')
imenCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imenCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: imenCollisions.setDescription(' The number of packets transmitted with collision detected.')
brdgTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12), )
if mibBuilder.loadTexts: brdgTable.setStatus('mandatory')
if mibBuilder.loadTexts: brdgTable.setDescription(' brdg: Bridge TABLE Row selection: the value of the internet-object brdgSlotId, which contains the relative position of a card within an enclosure, starting at 1, plus the relative interface, brdgIfId, starting at 1.')
brdgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "brdgSlotId"), (0, "UB-MIB-SUPRV", "brdgIfId"))
if mibBuilder.loadTexts: brdgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brdgEntry.setDescription('')
brdgSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: brdgSlotId.setDescription(' The relative slot (from 1) containing this card.')
brdgIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfId.setStatus('mandatory')
if mibBuilder.loadTexts: brdgIfId.setDescription(' The relative interface (from 1) of this entry (see the appropriate hardware specification to determine which interface is 1, 2, etc.).')
brdgIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ethernetBus", 2), ("baseband802-3", 3), ("fourMbps802-5", 4), ("fddi", 5), ("t1", 6), ("broadband802-3", 7), ("sixteenMbps802-5", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfType.setStatus('mandatory')
if mibBuilder.loadTexts: brdgIfType.setDescription(' The type of bridge interface.')
brdgIfFault = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("linkDown", 2), ("linkUp", 3), ("linkLoopbackTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfFault.setStatus('mandatory')
if mibBuilder.loadTexts: brdgIfFault.setDescription(' Bridge faults (note these are interface specific).')
brdgIfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 12, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdgIfMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: brdgIfMACAddr.setDescription(" The MAC address of the bridge's specific interface")
ecTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13), )
if mibBuilder.loadTexts: ecTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecTable.setDescription(' ec: Ethernet Concentrator TABLE Row selection: the value of the internet-object ecSlotId, which contains the relative position of a card within an enclosure, starting at 1.')
ecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ecSlotId"))
if mibBuilder.loadTexts: ecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecEntry.setDescription('')
ecSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: ecSlotId.setDescription(' The relative slot (from 1) containing this card.')
ecCarrierCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecCarrierCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ecCarrierCounter.setDescription(' The number of times carrier was sensed when sampled every 2 ms.')
ecFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalFan", 2), ("abnormalFan", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecFanStatus.setDescription(' The status of the Temp/Flex mount adaptor fan (on the ASM-800 (fiber EC) only).')
netTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14), )
if mibBuilder.loadTexts: netTable.setStatus('mandatory')
if mibBuilder.loadTexts: netTable.setDescription(' net: NET Card TABLE Row selection: the value of the internet-object netSlotId, which contains the relative position of a card within an enclosure, starting at 1.')
netEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "netSlotId"))
if mibBuilder.loadTexts: netEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netEntry.setDescription('')
netSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: netSlotId.setDescription(' The relative slot (from 1) containing this card.')
netBackboneType = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("baseband", 2), ("broadband", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBackboneType.setStatus('mandatory')
if mibBuilder.loadTexts: netBackboneType.setDescription(' The type of backbone to which the NET interface is attached.')
netFault = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("internalFault", 2), ("auiBad", 3), ("mdiBad", 4), ("bufferedRepeaterBad", 5), ("normal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFault.setStatus('mandatory')
if mibBuilder.loadTexts: netFault.setDescription(' An interface fault at various points between the module and the attached backbone.')
netBackboneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("netOnly", 2), ("netAndSupDirect", 3), ("loopback", 4), ("bridgeOnly", 5), ("standby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netBackboneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netBackboneStatus.setDescription(' Backbone interface status: the status of the interface or interfaces to the backbone.')
brnTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15), )
if mibBuilder.loadTexts: brnTable.setStatus('mandatory')
if mibBuilder.loadTexts: brnTable.setDescription(' brn: Buffer Repeater NET Card TABLE Row selection: the value of the internet-object brnSlotId, which contains the relative position of a card within an enclosure, starting at 1, plus the relative interface, brnIfId (1 or 2).')
brnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "brnSlotId"), (0, "UB-MIB-SUPRV", "brnIfId"))
if mibBuilder.loadTexts: brnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brnEntry.setDescription('')
brnSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: brnSlotId.setDescription(' The relative slot (from 1) containing this card.')
brnIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("if-1", 1), ("if-ETHBUS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnIfId.setStatus('mandatory')
if mibBuilder.loadTexts: brnIfId.setDescription(' The relative interface (from 1) containing this card; interface 1 is the Ethernet Bus interface.')
brnIfEthDLCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("parityError", 3), ("collisions-16", 4), ("collision", 5), ("underflow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnIfEthDLCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: brnIfEthDLCStatus.setDescription(' The Ethernet Data Link Control status of the last transmission to the segment attached to the buffered repeater net card.')
brnCarrierCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCarrierCounter.setStatus('mandatory')
if mibBuilder.loadTexts: brnCarrierCounter.setDescription(' The number of times carrier was sensed when sampled every 1 ms.')
brnCarrierTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCarrierTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: brnCarrierTimeInterval.setDescription(' The time interval over which brnCarrierCounter counts.')
brnTransmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnTransmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: brnTransmitPkts.setDescription(' The total number of packets transmitted.')
brnReceivePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnReceivePkts.setStatus('mandatory')
if mibBuilder.loadTexts: brnReceivePkts.setDescription(' The total number of packets received.')
brnCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: brnCRCErrors.setDescription(' The number of packets received with CRC errors.')
brnCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: brnCollisions.setDescription(' The number of collisions detected.')
brnPktsAborted16Colls = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnPktsAborted16Colls.setStatus('mandatory')
if mibBuilder.loadTexts: brnPktsAborted16Colls.setDescription(' The number of packets aborted because of 16 consecutive collisions detected.')
brnShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnShortPkts.setStatus('mandatory')
if mibBuilder.loadTexts: brnShortPkts.setDescription(' The total number of short packets received.')
brnAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: brnAlignmentErrors.setDescription(' The total number of packets received with alignment errors: the number of frames received that are not an integral number of octets and do not pass the FCS check.')
brnOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: brnOverflows.setDescription(' The number of packets received that had to be discarded due to errors in bit frequency resulting in overflow.')
brnUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brnUnderflows.setStatus('mandatory')
if mibBuilder.loadTexts: brnUnderflows.setDescription(' The number of packets received that had to be discarded due to errors in bit frequency resulting in underflow.')
tr16cTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16), )
if mibBuilder.loadTexts: tr16cTable.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cTable.setDescription(' tr16c: Token Ring Concentrator Card TABLE Row selection: the value of the internet-object tr16cSlotId, which contains the relative position of a card within an enclosure, starting at 1.')
tr16cEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16cSlotId"))
if mibBuilder.loadTexts: tr16cEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cEntry.setDescription('')
tr16cSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cSlotId.setDescription('The relative slot number, starting at 1, of the concentrator.')
tr16cTier = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tier-1", 1), ("tier-2", 2), ("tier-3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cTier.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cTier.setDescription('17,32 RelayID Indicates the management level of functionality (tier) of this concentrator.')
tr16cOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("beaconDetectInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cOperState.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cOperState.setDescription(' The operational state of the ring.')
tr16cRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cRingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cRingNumber.setDescription(' The ring number assigned when configuring a bridge.')
tr16cManufacturerID = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cManufacturerID.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cManufacturerID.setDescription(" The Organization Unique Identifier as defined in IEEE 802.1A, Overview and Architecture. This is the first 24 bits of UB's MAC address identifying UB uniquely worldwide and is a constant equal to 00DD00 in hexadecimal.")
tr16cManufacturerProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cManufacturerProductID.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cManufacturerProductID.setDescription(" A string of ASCII characters representing the concentrator's product identifier (i.e., a name identifying an enumeration of a1gProductType). Some examples are 'trc-410-1' and 'trc-410-2'.")
tr16cManufProductVers = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cManufProductVers.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cManufProductVers.setDescription(" A string that is unique for a specific manufacturerProductID that identifies a concentrators's hardware and firmware versions. The two octets are non-negative integers with values from 0 through 255. If a version does not apply then the version number is zero. One is the first applicable version number. The first octet is the hardware version and the second is the firmware version. ")
tr16cActiveMonitorPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cActiveMonitorPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cActiveMonitorPortNumber.setDescription(' The relative port number of the active monitor for this ring. Its value is 0 if the active monitor is not attached to any port on this concentrator.')
tr16cRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("fourMbps", 2), ("sixteenMbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cRingSpeed.setDescription('17 RingSpeed The current concentrator operating speed of either 4 or 16 Mbps. Note that each concentrator in a ring must be configured with the same value of this attribute.')
tr16cLLCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cLLCFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cLLCFrames.setDescription('26 TotalLLCFramesThe total number of transmitted frames that are not MAC level management frames.')
tr16cMACFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cMACFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cMACFrames.setDescription('26 TotalMACFramesThe total number of transmitted frames that are MAC level management frames.')
tr16cOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cOctets.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cOctets.setDescription('26 TotalOctetsThe total number of octets transmitted.')
tr16cMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cMulticastFrames.setDescription('26 TotalMulticastFramesThe total number of frames with a destination address that is either a Functional Group Address or a Group Address.')
tr16cBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cBroadcastFrames.setDescription('26 TotalBroadcastFramesThe total number of frames with a destination address that is a Broadcast Address.')
tr16cFrameCheckSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cFrameCheckSequences.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cFrameCheckSequences.setDescription('26,27 TotalFrameCheckSequenceThe total number of packets with an FCS error.')
tr16cAutoPartitionEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 16), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cAutoPartitionEnableTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cAutoPartitionEnableTimer.setDescription("25 AutoPartitionEnableTimer *a Indicates the period of time to wait until re-enabling a 'beacon detected' port. the default value is 0 seconds")
tr16cAutoPartitionHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 17), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cAutoPartitionHoldTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cAutoPartitionHoldTimer.setDescription('25 AutoPartitionHoldTimer *a Indicates the amount of time to wait until starting the beacon detect process. The default value is 0 seconds.')
tr16cAutoPartitionRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cAutoPartitionRetries.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cAutoPartitionRetries.setDescription('25 AutoPartitionThreshold *a Indicates the number of times a port can be temporarily locked by the beacon detect process prior to being permanently locked. The default value is 3.')
tr16cLLCSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cLLCSamples.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cLLCSamples.setDescription('26,27 BandwidthUtilizationA count of the number of times that an LLC packet was present when sampling every millisecond.')
tr16cMACSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cMACSamples.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cMACSamples.setDescription('26,27 BandwidthUtilizationA count of the number of times that a MAC frame was present when sampling every millisecond.')
tr16cUpTimeMS = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16cUpTimeMS.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cUpTimeMS.setDescription('26,27 BandwidthUtilization The elapsed time in milliseconds since the concentrator started operating.')
tr16cResetDurableUserAttrs = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetComplete", 1), ("setToDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16cResetDurableUserAttrs.setStatus('mandatory')
if mibBuilder.loadTexts: tr16cResetDurableUserAttrs.setDescription(' A request to copy the default values stored in durable memory to the User Durable attributes also in durable memory. The User attributes affected are tr16cRingSpeed, tr16p1AllowInsert, tr16p1ForceInsert, tr16cAutoPartitionEnableTimer, tr16cAutoPartitionHoldTimer, and tr16cAutoPartitionRetries.')
tr16reTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17), )
if mibBuilder.loadTexts: tr16reTable.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reTable.setDescription(' tr16re: Token Ring Concentrator Ring Error TABLE Row selection: the value of the internet-object tr16cSlotId, which contains the relative position of a card within an enclosure, starting at 1. Contains ring error monitor non-isolating errors.')
tr16reEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16reSlotId"))
if mibBuilder.loadTexts: tr16reEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reEntry.setDescription('')
tr16reSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reSlotId.setDescription(' The relative slot in the hub enclosure, starting at 1.')
tr16reLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reLostFrames.setDescription(' Non-isolating lost frames.')
tr16reRcvCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reRcvCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reRcvCongestionErrors.setDescription(' Non-isolating congestion on receive errors.')
tr16reFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reFrequencyErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reFrequencyErrors.setDescription(' Non-isolating frequency errors.')
tr16reFrameCopyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reFrameCopyErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reFrameCopyErrors.setDescription(' Non-isolating frame copy errors.')
tr16reTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 2, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16reTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16reTokenErrors.setDescription(' Non-isolating token errors.')
ecpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ecpTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecpTable.setDescription(' PORT Group ecp: Ethernet Port TABLE Row selection: the value of the internet-object ecpSlotId, which contains the relative position of a card within an enclosure, starting at 1, plus a relative port identifier, starting at 1.')
ecpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ecpSlotId"), (0, "UB-MIB-SUPRV", "ecpPortId"))
if mibBuilder.loadTexts: ecpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecpEntry.setDescription('')
ecpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: ecpSlotId.setDescription(' The relative slot (from 1) containing the card.')
ecpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpPortId.setStatus('mandatory')
if mibBuilder.loadTexts: ecpPortId.setDescription(' The relative port (from 1) on the card.')
ecpMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("enabled", 2), ("lockedByNMC", 3), ("autosegmented", 4), ("faultyLockedBySuprv", 5), ("lowLight", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpMgmtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ecpMgmtStatus.setDescription(' The management status of an Ethernet port.')
ecpAdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlocked", 2), ("locked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ecpAdmAction.setStatus('mandatory')
if mibBuilder.loadTexts: ecpAdmAction.setDescription(' The administrative status of an Ethernet port.')
ecpCarrierCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpCarrierCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ecpCarrierCounter.setDescription(' The number of times carrier was sensed on the port when sampled every 2 ms.')
ecfpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2), )
if mibBuilder.loadTexts: ecfpTable.setStatus('mandatory')
if mibBuilder.loadTexts: ecfpTable.setDescription(' ecfp: Ethernet Concentrator Fiber Port TABLE Row selection: the value of the internet-object ecfpSlotId, which contains the relative position of a card within an enclosure, starting at 1, plus the relative port identifier, ecfpPortId, starting at 1.')
ecfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ecfpSlotId"), (0, "UB-MIB-SUPRV", "ecfpPortId"))
if mibBuilder.loadTexts: ecfpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ecfpEntry.setDescription('')
ecfpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: ecfpSlotId.setDescription(' The relative slot (from 1) containing the card.')
ecfpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpPortId.setStatus('mandatory')
if mibBuilder.loadTexts: ecfpPortId.setDescription(' The relative port (from 1) on the card.')
ecfpMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ecfpMACAddr.setDescription(' The latest source MAC address from packets received from the MAC side of the AUI')
ecfpTxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecfpTxIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: ecfpTxIdleTime.setDescription(' The elapsed time since the last packet was transmitted.')
ec10btpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3), )
if mibBuilder.loadTexts: ec10btpTable.setStatus('mandatory')
if mibBuilder.loadTexts: ec10btpTable.setDescription(' ec10btp: Ethernet Concentrator 10BaseT Port TABLE Row selection: the value of the internet-object ec10btpSlotId, which contains the relative position of a card within an enclosure, starting at 1, plus the relative port identifier, ec10btpPortId, starting at 1.')
ec10btpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "ec10btpSlotId"), (0, "UB-MIB-SUPRV", "ec10btpPortId"))
if mibBuilder.loadTexts: ec10btpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ec10btpEntry.setDescription('')
ec10btpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ec10btpSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: ec10btpSlotId.setDescription(' The relative slot (from 1) containing the card.')
ec10btpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ec10btpPortId.setStatus('mandatory')
if mibBuilder.loadTexts: ec10btpPortId.setDescription(' The relative port (from 1) on the card.')
ec10btpLinkTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("testLocked", 2), ("testFailed", 3), ("testPassed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ec10btpLinkTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ec10btpLinkTestStatus.setDescription(' The result of the link integrity test.')
ec10btpLinkTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("unlockIntegrityTest", 2), ("lockIntegrityTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ec10btpLinkTestAction.setStatus('mandatory')
if mibBuilder.loadTexts: ec10btpLinkTestAction.setDescription('A request to unlock the link integrity test (which is a continuous test).')
trcpTable = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4), )
if mibBuilder.loadTexts: trcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: trcpTable.setDescription(' trcp: Token Ring Concentrator Port TABLE Row selection: the value of the internet-object trcpSlotId, which contains the relative position of a card within an enclosure, starting at 1, plus a relative port identifier starting at 1.')
trcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "trcpSlotId"), (0, "UB-MIB-SUPRV", "trcpPortId"))
if mibBuilder.loadTexts: trcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trcpEntry.setDescription('')
trcpSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcpSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: trcpSlotId.setDescription(' The relative slot (from 1) containing the card.')
trcpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("rs13", 13), ("rs14", 14), ("rs15", 15), ("rs16", 16), ("rs17", 17), ("rs18", 18), ("rs19", 19), ("rs20", 20), ("in", 21), ("out", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcpPortId.setStatus('mandatory')
if mibBuilder.loadTexts: trcpPortId.setDescription(' The relative port (from 1) on the card.')
trcpAdmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unlock", 2), ("lock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trcpAdmAction.setStatus('mandatory')
if mibBuilder.loadTexts: trcpAdmAction.setDescription(' The administrative status of a token ring port. It reflects only administrative status.')
trcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("stationInserted", 2), ("selfBypass", 3), ("portError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trcpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trcpOperStatus.setDescription(' The operational status of a token ring port.')
tr16p1Table = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5), )
if mibBuilder.loadTexts: tr16p1Table.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1Table.setDescription(' tr16p1: Token Ring Concentrator Port Tier 1 TABLE Row selection: the value of the internet-object tr16p1SlotId, which contains the relative position of a card within an enclosure, starting at 1 plus the value of tr16p1PortId, which contains the relative position of a port within a card, starting at 1.')
tr16p1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16p1SlotId"), (0, "UB-MIB-SUPRV", "tr16p1PortId"))
if mibBuilder.loadTexts: tr16p1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1Entry.setDescription('')
tr16p1SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1SlotId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1SlotId.setDescription(" The relative position (starting at 1) of the concentrator's slot within the enclosure.")
tr16p1PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("in", 13), ("out", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1PortId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1PortId.setDescription(' The relative port on the card starting at 1. Ports 1-12 are ring station ports, 13 is the expansion in port, and 14 is the expansion out port.')
tr16p1InsertionState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("inserted", 2), ("bypassed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1InsertionState.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1InsertionState.setDescription(' The end result of tr16p1AllowInsert, tr16p1ForceInsert, and tr16p1PhantomState, i.e., inserted means tr16p1ForceInsert | tr16p1AllowInsert & tr16p1PhantomState, where tr16p1ForceInsert is true if requested, tr16p1AllowInsert is true if requested, and tr16p1PhantomState is true if phantomPresent.')
tr16p1AllowInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("insertionNotAllowed", 2), ("insertionAllowed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16p1AllowInsert.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1AllowInsert.setDescription("19 RingStationPortAction *aAn action that allows an RS port to insert onto its ring if both phantom voltages are present (tr16p1PhantomState is phantomPresent).20 ExpansionInPortAction *aWhen not allowed, this bypass forces a 'loop-back' to occur on the XI port, and does not allow concentrators to insert onto their rings.21 ExpansionOutPortAction *aWhen not allowed this bypass forces a 'loop-back' to occur on the XO port so that an attached ASM400 or ASM410 is not inserted when phantom voltage is detected.")
tr16p1ForceInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("noForcedInsertion", 2), ("forcedInsertion", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tr16p1ForceInsert.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1ForceInsert.setDescription('19 RingStationPortInsert *aWhen forcedInsertion, forces an RS port to insert onto its ring regardless of whether phantom voltage or other conditions are detected. This is used to support passive devices, such as the IBM MSAU, in order to support the Satellite expansion capability.19 ExpansionInPortInsert *aWhen set, inserts the XI port onto the ring regardless of whether phantom voltage is present.21 ExpansionOutPortInsert *aForces XI port to insert on the network.')
tr16p1PhantomState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("phantomVoltagePresent", 2), ("phantomVoltageAbsent", 3), ("wiringFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p1PhantomState.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p1PhantomState.setDescription('19 ExpansionInPhantomDetect Indicates the XI port detects phantom voltage being provided.20 ExpansionOutPhantomLoadDetect The status of the phantom voltage provided by the XO port (XO->XI or XO->RS (satellite)).')
tr16p2Table = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6), )
if mibBuilder.loadTexts: tr16p2Table.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2Table.setDescription(' tr16p2: Token Ring Concentrator Port Tiers 2,3 TABLE Row selection: the value of the internet-object tr16p2SlotId, which contains the relative position of a card within an enclosure, starting at 1 plus the value of tr16p2PortId, which contains the relative position of a port within a card, starting at 1.')
tr16p2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16p2SlotId"), (0, "UB-MIB-SUPRV", "tr16p2PortId"))
if mibBuilder.loadTexts: tr16p2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2Entry.setDescription('')
tr16p2SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2SlotId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2SlotId.setDescription(" The relative position (starting at 1) of the concentrator's slot within the enclosure.")
tr16p2PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("in", 13), ("out", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2PortId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2PortId.setDescription(' The relative port on the card starting at 1. Ports 1-12 are ring station ports, 13 is the expansion in port, and 14 is the expansion out port.')
tr16p2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("portOperational", 2), ("autoPartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2OperState.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2OperState.setDescription('25 RingStationAutoPartitionState25 RingExpansionInPartitionState25 ExpansionOutAutoPartitionState Indicates whether a hard failure has occurred on a port, been detected through the beaconing procedure, and the offending port subsequently bypassed in the ring.')
tr16p2BeaconDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2BeaconDetects.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2BeaconDetects.setDescription('25 RingStationAutoPartitionCount25 ExpansionInAutoPartitionCount25 ExpansionOutAutoPartitionCount Indicates the number of beacon detects that have resulted in this port being partitioned (removed from its ring).')
tr16p2LastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LastSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2LastSourceAddress.setDescription('23,27 RingStationLastSourceAddress23,27 ExpansionInLastSourceAddress23,27 ExpansionOutLastSourceAddress Address of previously attached node.')
tr16p2LLCFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LLCFramesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2LLCFramesTransmitted.setDescription(' 27 RingStationLLCFramesTransmitted 27 ExpansionInLLCFramesTransmitted 27 ExpansionOutLLCFramesTransmitted Total number of non-MAC Management packets transmitted.')
tr16p2LLCFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LLCFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2LLCFramesReceived.setDescription(' 27 RingStationLLCFramesReceived 27 ExpansionInLLCFramesReceived 27 ExpansionOutLLCFramesReceived Total number of non-MAC Management packets received.')
tr16p2MACFramesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2MACFramesTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2MACFramesTransmitted.setDescription('27 RingStationMACFramesTransmitted27 ExpansionInMACFramesTransmitted27 ExpansionOutMACFramesTransmitted Total number of MAC Management packets transmitted.')
tr16p2MACFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2MACFramesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2MACFramesReceived.setDescription('27 RingStationMACFramesReceived27 ExpansionInMACFramesReceived27 ExpansionOutMACFramesReceived Total number of MAC Management packets received.')
tr16p2OctetsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2OctetsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2OctetsTransmitted.setDescription('27 RingStationOctetsTransmitted27 ExpansionInOctetsTransmitted27 ExpansionOutOctetsTransmitted Total number of LLC Information octets transmitted.')
tr16p2OctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2OctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2OctetsReceived.setDescription('27 RingStationOctetsReceived27 ExpansionInOctetsReceived27 ExpansionOutOctetsReceived Total number of LLC Information Field octets received.')
tr16p2MulticastsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2MulticastsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2MulticastsTransmitted.setDescription(' 28 RingStationMulticastTransmitted 28 ExpansionInMulticastTransmitted 28 ExpansionOutMulticastTransmitted Total number of Multicast packets transmitted.')
tr16p2BroadcastsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2BroadcastsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2BroadcastsTransmitted.setDescription('28 RingStationBroadcastTransmitted28 ExpansionOutBroadcastTransmitted28 ExpansionInBroadcastTransmitted Total number of Broadcast packets transmitted.')
tr16p2FCSErrorsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2FCSErrorsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2FCSErrorsTransmitted.setDescription('28 RingStationFCSErrorsTransmitted28 ExpansionInFCSErrorsTransmitted28 ExpansionOutFCSErrorsTransmitted Total number of packets transmitted with an FCS error.')
tr16p2FCSErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2FCSErrorsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2FCSErrorsReceived.setDescription('28 RingStationFCSErrorsReceived28 ExpansionInFCSErrorsReceived28 ExpansionOutFCSErrorsReceived Total number of packets received with an FCS error.')
tr16p2LastSourceAddressUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 6, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p2LastSourceAddressUptime.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p2LastSourceAddressUptime.setDescription(' Time since the value of tr16p2LastSourceAddress last changed.')
tr16p3Table = MibTable((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7), )
if mibBuilder.loadTexts: tr16p3Table.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3Table.setDescription(' tr16p3: Token Ring Concentrator Port Tiers 2,3 TABLE Row selection: the value of the internet-object tr16p3SlotId, which contains the relative position of a card within an enclosure, starting at 1 plus the value of tr16p3PortId, which contains the relative position of a port within a card, starting at 1.')
tr16p3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "tr16p3SlotId"), (0, "UB-MIB-SUPRV", "tr16p3PortId"))
if mibBuilder.loadTexts: tr16p3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3Entry.setDescription('')
tr16p3SlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3SlotId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3SlotId.setDescription(" The relative position (starting at 1) of the concentrator's slot within the enclosure.")
tr16p3PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rs1", 1), ("rs2", 2), ("rs3", 3), ("rs4", 4), ("rs5", 5), ("rs6", 6), ("rs7", 7), ("rs8", 8), ("rs9", 9), ("rs10", 10), ("rs11", 11), ("rs12", 12), ("in", 13), ("out", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3PortId.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3PortId.setDescription(' The relative port on the card starting at 1. Ports 1-12 are ring station ports, 13 is the expansion in port, and 14 is the expansion out port.')
tr16p3LineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3LineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3LineErrors.setDescription(' Isolating line errors.')
tr16p3InternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3InternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3InternalErrors.setDescription(' Isolating internal errors.')
tr16p3Burst5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3Burst5Errors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3Burst5Errors.setDescription(' Isolating burst 5 errors.')
tr16p3AcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3AcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3AcErrors.setDescription(' Isolating AC errors.')
tr16p3AbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 1, 1, 3, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tr16p3AbortDelimiters.setStatus('mandatory')
if mibBuilder.loadTexts: tr16p3AbortDelimiters.setDescription(' Isolating abort delimiters.')
trapInstanceId = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 1), Integer32())
if mibBuilder.loadTexts: trapInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: trapInstanceId.setDescription(' TRAP Group: The attributes that may appear in the variable-bindings list of the Trap-PDU. An instance identifier that uniquely identifies an occurrence of a trap. Note that if multiple Trap-PDUs are sent to reflect the occurrence of the same trap, each contains the same value of the trapInstanceId.')
trapSlotId = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 2), Integer32())
if mibBuilder.loadTexts: trapSlotId.setStatus('optional')
if mibBuilder.loadTexts: trapSlotId.setDescription(' trapSource (consists of the following):The attributes required to define the source of the trap. For example, when a port is unlocked, the slot identifier and port identifier define the source of the trap. The product type is also included in case the enterprise field in the trap-PDU does not completely distinguish the characteristics of the source. The relative slot (from 1) containing the card that the trap is about.')
trapProductType = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 3), Integer32())
if mibBuilder.loadTexts: trapProductType.setStatus('mandatory')
if mibBuilder.loadTexts: trapProductType.setDescription(' The product type of the Access/One card that the trap is about.See a1gProductType for specific values.')
trapPortID = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 4), Integer32())
if mibBuilder.loadTexts: trapPortID.setStatus('optional')
if mibBuilder.loadTexts: trapPortID.setDescription(' The relative port (from 1) that the trap is about.')
trapPortCount = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 15), Integer32())
if mibBuilder.loadTexts: trapPortCount.setStatus('optional')
if mibBuilder.loadTexts: trapPortCount.setDescription(' The number of ports on a concentrator.')
trapPortMask = MibScalar((1, 3, 6, 1, 4, 1, 75, 3, 16), OctetString())
if mibBuilder.loadTexts: trapPortMask.setStatus('optional')
if mibBuilder.loadTexts: trapPortMask.setDescription(' A mask indicating the status of ports on the concentrator.')
trpsbTable = MibTable((1, 3, 6, 1, 4, 1, 75, 4, 1, 2), )
if mibBuilder.loadTexts: trpsbTable.setStatus('mandatory')
if mibBuilder.loadTexts: trpsbTable.setDescription(" TRAP SUBSCRIPTION Group Trap Subscription TABLE Row selection: the value of the internet-object trpsbIpAddress identifies a row corresponding to a valid member of an agent's community. This table contains 5 entries.")
trpsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1), ).setIndexNames((0, "UB-MIB-SUPRV", "trpsbIpAddress"))
if mibBuilder.loadTexts: trpsbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trpsbEntry.setDescription('')
trpsbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpsbIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trpsbIpAddress.setDescription(' The IP address of a manager subscribing to traps.')
trpsbCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trpsbCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: trpsbCommunity.setDescription(' The community string identifying a manager subscribing to traps.')
trpsbActions = MibTableColumn((1, 3, 6, 1, 4, 1, 75, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("subscribeToTraps", 2), ("subscriptionToTrapsCancelled", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trpsbActions.setStatus('mandatory')
if mibBuilder.loadTexts: trpsbActions.setDescription(" Actions on a manager's trap subscription.")
moduleInserted = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,1)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleInserted.setDescription('A card was inserted in the Access/One chassis.')
moduleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,2)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleRemoved.setDescription('A card was removed from the Access/One chassis.')
moduleFaulty = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,3)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleFaulty.setDescription('A card has become faulty: its state changed to a1gOperStatus (moduleFault(6)).')
moduleDown = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,4)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleDown.setDescription('A card has not responded to a supervisor poll: its state changed to a1gEthBusMgmtStatus(notResponding(4)).')
moduleReset = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,5)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleReset.setDescription('A card has been reset: its state changed to a1gOperStatus (reset(13)).')
moduleDebug = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,6)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleDebug.setDescription('A card has put into debug mode: its state changed to a1gOperStatus (debugMode(4)).')
moduleHighTemperature = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,7)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleHighTemperature.setDescription("The card's temperature has become too high: its state changed to a1gTempStatus(abnormal(2)).")
ethBusUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,8)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: ethBusUnlocked.setDescription('The interface to the Ethernet bus has been unlocked: its state changed to a1gEthBusAdmAction(unlock(2)).')
ethBusLocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,9)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: ethBusLocked.setDescription('The interface to the Ethernet bus has been locked: its state changed to a1gEthBusAdmAction(lock(3)).')
moduleNetIfEnabled = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,16)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleNetIfEnabled.setDescription("The status of the interface to the backbone has changed so that all modules (with the possible exception of the supervisor - when it is in direct mode) access the backbone through the card's net interface: a state change to netBackboneStatus(active(2)) has occurred.")
moduleNetIfDisabled = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,17)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleNetIfDisabled.setDescription("The status of the interface to the backbone has changed so that there is no communication backbone through the card's net interface: a state change to netBackboneStatus(standby(6)) has occurred")
moduleNetIfLoopBack = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,18)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleNetIfLoopBack.setDescription("The status of the interface to the backbone has changed so that this card's net interface loops back traffic directed to the backbone, while the other (possible) net interface's status becomes standby: a state change to netBackboneStatus(loopback(4)) has occurred.")
moduleNetIfInternalError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,19)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleNetIfInternalError.setDescription('An internal error at the net interface has been detected: its state changed to netFault(internal(2)).')
moduleNetIfExternalError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,20)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleNetIfExternalError.setDescription('An external error at the net interface has been detected: its state changed to either netFault(auiBad(3)) or netFault(mdiBad(4)).')
moduleParityError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,21)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleParityError.setDescription('An intelligent module has detected a parity error: its status has changed to a1imModuleFault (parityErr(3)).')
moduleFanBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,22)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleFanBad.setDescription('The fan on the module is defective: its status has changed to ecFanStatus(abnormal(3)).')
beaconDetected = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,23)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: beaconDetected.setDescription('The ring containing this card has begun the beacon detect process: its status has changed to tr16cOperState(beaconDetectInProgress(4)).')
moduleTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,24)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: moduleTemperatureNormal.setDescription("The card's temperature has returned to normal: its state changed from a1gTempStatus(abnormal(2)) to a1gTempStatus(normal(3)).")
portUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,32)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portUnlocked.setDescription("One or more of the concentrator's ports have been unlocked.")
portLocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,33)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portLocked.setDescription("One or more of the concentrator's ports have been locked.")
portAutoSegmented = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,34)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portAutoSegmented.setDescription("One or more of the concentrator's ports have been auto-segmented by the hardware because of a fault.")
portFault = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,35)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portFault.setDescription("One or more of the concentrator's ports have been segmented by the supervisor because of a fault.")
portForced = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,36)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portForced.setDescription("One or more of the concentrator's ports have been forced to allow passive devices to enter the ring.")
portNotForced = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,37)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portNotForced.setDescription("One or more of the concentrator's ports are no longer being forced to allow passive devices to enter the ring.")
portLobeFault = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,38)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portLobeFault.setDescription("One or more of the concentrator's ports are experiencing a lobe fault. The concentrator experiences voltage(either positive or negative) in only one of the phantom pair wires.")
portLobeFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,39)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"))
if mibBuilder.loadTexts: portLobeFaultCleared.setDescription("One or more of the concentrator's ports are no longer experiencing a lobe fault.")
portLinkTestUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,40)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portLinkTestUnlocked.setDescription("The link test on one or more of the concentrator's ports has been unlocked.")
portLinkTestLocked = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,41)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: portLinkTestLocked.setDescription("The link test on one or more of the concentrator's ports has been locked.")
badPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,48)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: badPowerSupply.setDescription('At least one power module has lost its AC power. : its state changed to hubPowerSupplyStatus(acPowerAbnormal(3)).')
powerSupplyHiTemp = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,49)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: powerSupplyHiTemp.setDescription('The temperature of the power supply has become too high: its state changed to hubPowerSupplyStatus(highTemp(4)).')
networkIfError = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,50)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: networkIfError.setDescription('One or more of the interfaces to the network backbone are experiencing faults: its state changed to ensupDynamicNetStatus(netOrSupLoopback(6)).')
networkIfOK = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,51)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: networkIfOK.setDescription('The interface to the backbone network has changed (recovered) by using a redundant connection. The state of the interface to the backbone network changed to one of ensupDynamicNetStatus(netAndSupDirect(2) | supOnly(3) | netOnly(4) | bridgeOnly(5)).')
tempBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,52))
if mibBuilder.loadTexts: tempBad.setDescription("The temperature in the enclosure has been reported by an enclosure temperature sensor to be out of range(possible enclosure fan failure) or the temperature of at least one card in the enclosure is out of range: the hub's state changed to hubTempStatus(abnormal(2)).")
tempOK = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,53)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: tempOK.setDescription("The temperature of all cards in the enclosure is now in the proper range or the enclosure temperature has returned to the proper range: the hub's state changed to: hubTempStatus(normal(3))")
fTPSBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,54)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: fTPSBad.setDescription("One or both (for a fault tolerant power supply) dc power supplies have failed. The power supply's state has changed to: hubPowerSupplyStatus(onePsModuleFailed(5)).")
netUtilThreshold = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,55)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: netUtilThreshold.setDescription('The network utilization has been exceeded: ensupNetUtilization exceeded ensupNetUtilThreshold.')
enclosureFanBad = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,56)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: enclosureFanBad.setDescription('The enclosure has an airflow problem (probably a defective fan): the state of hubAFS has changed to abnormal(3).')
servicePortLogin = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,64)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: servicePortLogin.setDescription('The interpreter on the netcard has detected a login command on the service port.')
servicePortLogout = NotificationType((1, 3, 6, 1, 4, 1, 75) + (0,65)).setObjects(("UB-MIB-SUPRV", "trapInstanceId"), ("UB-MIB-SUPRV", "trapSlotId"), ("UB-MIB-SUPRV", "trapProductType"), ("UB-MIB-SUPRV", "trapPortID"), ("UB-MIB-SUPRV", "trapPortCount"), ("UB-MIB-SUPRV", "trapPortMask"))
if mibBuilder.loadTexts: servicePortLogout.setDescription('The interpreter on the netcard has detected a logout command on the service port.')
mibBuilder.exportSymbols("UB-MIB-SUPRV", enclosureFanBad=enclosureFanBad, brnCollisions=brnCollisions, tr16cRingNumber=tr16cRingNumber, moduleFaulty=moduleFaulty, tr16cAutoPartitionRetries=tr16cAutoPartitionRetries, tempBad=tempBad, tr16p3AcErrors=tr16p3AcErrors, tr16p1ForceInsert=tr16p1ForceInsert, ubSystem=ubSystem, ecpAdmAction=ecpAdmAction, tr16cMACSamples=tr16cMACSamples, tr16reFrequencyErrors=tr16reFrequencyErrors, ecTable=ecTable, tr16cLLCSamples=tr16cLLCSamples, servicePortLogin=servicePortLogin, a1gEthBusAdmAction=a1gEthBusAdmAction, ecpEntry=ecpEntry, configTable=configTable, netUtilThreshold=netUtilThreshold, moduleNetIfDisabled=moduleNetIfDisabled, moduleNetIfLoopBack=moduleNetIfLoopBack, a1gTempStatus=a1gTempStatus, trcpOperStatus=trcpOperStatus, tr16cUpTimeMS=tr16cUpTimeMS, brnCRCErrors=brnCRCErrors, tr16p2BroadcastsTransmitted=tr16p2BroadcastsTransmitted, tr16p2OctetsReceived=tr16p2OctetsReceived, imenTransmitPkts=imenTransmitPkts, brdgIfType=brdgIfType, a1imMACAddr=a1imMACAddr, moduleDebug=moduleDebug, a1gNetMgmtBusOperStatus=a1gNetMgmtBusOperStatus, brnUnderflows=brnUnderflows, brnReceivePkts=brnReceivePkts, tr16cOctets=tr16cOctets, tr16p2FCSErrorsReceived=tr16p2FCSErrorsReceived, tr16reTokenErrors=tr16reTokenErrors, imenEthBusTable=imenEthBusTable, a1gResets=a1gResets, a1imSlotId=a1imSlotId, trcpTable=trcpTable, ecpPortId=ecpPortId, ec10btpTable=ec10btpTable, a1imHaltReason=a1imHaltReason, a1gResetAction=a1gResetAction, tr16cActiveMonitorPortNumber=tr16cActiveMonitorPortNumber, tr16p3Entry=tr16p3Entry, trpsbCommunity=trpsbCommunity, brnIfEthDLCStatus=brnIfEthDLCStatus, ensupNetBridgeSlot=ensupNetBridgeSlot, portUnlocked=portUnlocked, trcpAdmAction=trcpAdmAction, portLobeFault=portLobeFault, hubId=hubId, portNotForced=portNotForced, brnTable=brnTable, hubSerNumber=hubSerNumber, tr16p2PortId=tr16p2PortId, portAutoSegmented=portAutoSegmented, ecSlotId=ecSlotId, tr16p3LineErrors=tr16p3LineErrors, a1imModuleFault=a1imModuleFault, trapSlotId=trapSlotId, tr16p1AllowInsert=tr16p1AllowInsert, tplTable=tplTable, tr16p2MACFramesReceived=tr16p2MACFramesReceived, tr16p2BeaconDetects=tr16p2BeaconDetects, ecFanStatus=ecFanStatus, tr16cOperState=tr16cOperState, trapPortCount=trapPortCount, ubSuprv=ubSuprv, tr16p3InternalErrors=tr16p3InternalErrors, trapPortID=trapPortID, tr16p2MulticastsTransmitted=tr16p2MulticastsTransmitted, tr16p2OctetsTransmitted=tr16p2OctetsTransmitted, hubResetAction=hubResetAction, hubName=hubName, brnEntry=brnEntry, moduleReset=moduleReset, brdgIfFault=brdgIfFault, trcpPortId=trcpPortId, port=port, ensupDynamicNetStatus=ensupDynamicNetStatus, tr16p1PortId=tr16p1PortId, a1imPodDiagnosticMsg=a1imPodDiagnosticMsg, netEntry=netEntry, hubIPAddr=hubIPAddr, tr16cAutoPartitionHoldTimer=tr16cAutoPartitionHoldTimer, ecfpTable=ecfpTable, tplSlotId=tplSlotId, tr16reTable=tr16reTable, netBackboneType=netBackboneType, networkIfOK=networkIfOK, a1gPorts=a1gPorts, powerSupplyHiTemp=powerSupplyHiTemp, a1gEthBusMgmtStatus=a1gEthBusMgmtStatus, brnOverflows=brnOverflows, tr16reEntry=tr16reEntry, tr16cTier=tr16cTier, brnIfId=brnIfId, a1imTable=a1imTable, tr16cMulticastFrames=tr16cMulticastFrames, tr16cBroadcastFrames=tr16cBroadcastFrames, ethBusUnlocked=ethBusUnlocked, hubTempStatus=hubTempStatus, brdgIfId=brdgIfId, ubEquip=ubEquip, tr16cAutoPartitionEnableTimer=tr16cAutoPartitionEnableTimer, tr16p3Burst5Errors=tr16p3Burst5Errors, ubTrapAttrs=ubTrapAttrs, tr16cSlotId=tr16cSlotId, tr16reLostFrames=tr16reLostFrames, moduleNetIfInternalError=moduleNetIfInternalError, fTPSBad=fTPSBad, ecfpTxIdleTime=ecfpTxIdleTime, portForced=portForced, tr16p1Entry=tr16p1Entry, ecfpSlotId=ecfpSlotId, moduleTemperatureNormal=moduleTemperatureNormal, brdgEntry=brdgEntry, ensupStaticNetConfig=ensupStaticNetConfig, netBackboneStatus=netBackboneStatus, tplEntry=tplEntry, ecEntry=ecEntry, tr16p2Table=tr16p2Table, ec10btpLinkTestStatus=ec10btpLinkTestStatus, trapProductType=trapProductType, ubNode=ubNode, tr16p1PhantomState=tr16p1PhantomState, hub=hub, tr16p3Table=tr16p3Table, trapInstanceId=trapInstanceId, moduleRemoved=moduleRemoved, portLinkTestUnlocked=portLinkTestUnlocked, badPowerSupply=badPowerSupply, portLinkTestLocked=portLinkTestLocked, tr16cEntry=tr16cEntry, tr16reSlotId=tr16reSlotId, a1gUpTime=a1gUpTime, tr16p2LastSourceAddressUptime=tr16p2LastSourceAddressUptime, a1imEntry=a1imEntry, tr16cManufacturerID=tr16cManufacturerID, ecfpEntry=ecfpEntry, configPowerUpMode=configPowerUpMode, brnTransmitPkts=brnTransmitPkts, tr16p3PortId=tr16p3PortId, imenCRCErrors=imenCRCErrors, tr16cMACFrames=tr16cMACFrames, card=card, a1gEntry=a1gEntry, moduleNetIfEnabled=moduleNetIfEnabled, beaconDetected=beaconDetected, ec10btpEntry=ec10btpEntry, tr16p1Table=tr16p1Table, ensupCarrierCounter=ensupCarrierCounter, servicePortLogout=servicePortLogout, tr16cRingSpeed=tr16cRingSpeed, brnSlotId=brnSlotId, tr16cResetDurableUserAttrs=tr16cResetDurableUserAttrs, ethBusLocked=ethBusLocked, a1gProductType=a1gProductType, tr16p3SlotId=tr16p3SlotId, netTable=netTable, tr16p1SlotId=tr16p1SlotId, configRetries=configRetries, brnPktsAborted16Colls=brnPktsAborted16Colls, tr16p2Entry=tr16p2Entry, trcpSlotId=trcpSlotId, brnCarrierTimeInterval=brnCarrierTimeInterval, tr16reFrameCopyErrors=tr16reFrameCopyErrors, ecfpPortId=ecfpPortId, moduleInserted=moduleInserted, ec10btpPortId=ec10btpPortId, trcpEntry=trcpEntry, a1gSlotId=a1gSlotId, configFaultActionType=configFaultActionType, ensupNetUtilThreshold=ensupNetUtilThreshold, ecCarrierCounter=ecCarrierCounter, tr16p2SlotId=tr16p2SlotId, tr16cFrameCheckSequences=tr16cFrameCheckSequences, imenCollisions=imenCollisions, tr16cManufProductVers=tr16cManufProductVers, trpsbIpAddress=trpsbIpAddress, ecpMgmtStatus=ecpMgmtStatus, a1gOperStatus=a1gOperStatus, a1gTable=a1gTable, tempOK=tempOK, tr16cTable=tr16cTable, hubPollTime=hubPollTime, configEntry=configEntry, ec10btpSlotId=ec10btpSlotId, tplNiuName=tplNiuName, imenEthBusEntry=imenEthBusEntry, tr16cLLCFrames=tr16cLLCFrames, tr16p2LLCFramesTransmitted=tr16p2LLCFramesTransmitted, trpsbEntry=trpsbEntry, trpsbActions=trpsbActions, moduleHighTemperature=moduleHighTemperature, tr16cManufacturerProductID=tr16cManufacturerProductID, ecpCarrierCounter=ecpCarrierCounter, brdgSlotId=brdgSlotId, ecfpMACAddr=ecfpMACAddr, moduleNetIfExternalError=moduleNetIfExternalError, ubSecurity=ubSecurity, tr16p2FCSErrorsTransmitted=tr16p2FCSErrorsTransmitted, imenSlotId=imenSlotId, portLobeFaultCleared=portLobeFaultCleared, tr16p2LLCFramesReceived=tr16p2LLCFramesReceived, hubAFS=hubAFS, moduleFanBad=moduleFanBad, brnShortPkts=brnShortPkts, tplIPAddress=tplIPAddress, brnAlignmentErrors=brnAlignmentErrors, tr16p2MACFramesTransmitted=tr16p2MACFramesTransmitted, tr16p3AbortDelimiters=tr16p3AbortDelimiters, ensupNetUtilization=ensupNetUtilization, brdgTable=brdgTable, tr16reRcvCongestionErrors=tr16reRcvCongestionErrors, hubType=hubType, hubPowerSupplyStatus=hubPowerSupplyStatus, moduleParityError=moduleParityError, moduleDown=moduleDown, netSlotId=netSlotId, imenReceivePkts=imenReceivePkts, a1imDebugRegisters=a1imDebugRegisters, brnCarrierCounter=brnCarrierCounter, trpsbTable=trpsbTable, brdgIfMACAddr=brdgIfMACAddr, networkIfError=networkIfError, portLocked=portLocked, netFault=netFault, tplProtocolType=tplProtocolType, trapPortMask=trapPortMask, tplSuprvPollStatus=tplSuprvPollStatus, ecpTable=ecpTable, ecpSlotId=ecpSlotId, tr16p1InsertionState=tr16p1InsertionState, portFault=portFault, ec10btpLinkTestAction=ec10btpLinkTestAction, tr16p2LastSourceAddress=tr16p2LastSourceAddress, configSlotId=configSlotId, tr16p2OperState=tr16p2OperState)
