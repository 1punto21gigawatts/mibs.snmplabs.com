#
# PySNMP MIB module EFDATA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EFDATA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Counter64, Counter32, Integer32, ModuleIdentity, enterprises, Unsigned32, ObjectIdentity, Gauge32, TimeTicks, MibIdentifier, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Counter64", "Counter32", "Integer32", "ModuleIdentity", "enterprises", "Unsigned32", "ObjectIdentity", "Gauge32", "TimeTicks", "MibIdentifier", "NotificationType", "Bits")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
efdata = MibIdentifier((1, 3, 6, 1, 4, 1, 6247))
spectracast = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3))
dtmx5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1))
cbGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1))
cbStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1))
cbStatGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1))
cbStatNumBytesTXed = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumBytesTXed.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatNumBytesTXed.setDescription('Number of bytes transmitted since last statistics reset.')
cbStatNumOfPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumOfPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatNumOfPackets.setDescription('Number of data packets transmitted since last statistics reset.')
cbStatAvrPktSize = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatAvrPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatAvrPktSize.setDescription('Average packet size since last statistics reset.')
cbStatAvrBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatAvrBytesPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatAvrBytesPerSec.setDescription('Average speed in bytes per second since last statistics reset.')
cbStatNumPacketDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumPacketDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatNumPacketDiscarded.setDescription('Number of data packets that were discarded since last statistics reset.')
cbStatNumNMSFrames = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumNMSFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatNumNMSFrames.setDescription('Number of NMS packets received since last statistics reset.')
cbCPULoad = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCPULoad.setStatus('mandatory')
if mibBuilder.loadTexts: cbCPULoad.setDescription('Current CPU Load in percents (0-100).')
cbMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbMemoryUsage.setStatus('mandatory')
if mibBuilder.loadTexts: cbMemoryUsage.setDescription('Current Memory Usage in percents (0-100).')
cbStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatReset.setDescription('Set to cbTrue in order to reset the general statistics values (either in active or non-active mode).')
cbStatNumClients = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbStatNumClients.setStatus('mandatory')
if mibBuilder.loadTexts: cbStatNumClients.setDescription('Number of clients currently connected to the Gateway. It is not part of the General Statistics since the cbStatReset does not change its value.')
cbStatClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2))
cbClientIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbClientIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbClientIP.setDescription('The IP address of the client. The rest of the params in cbStatClient reffers to this IP. In order to get a statistics on a single clients, set cbClientIP to the IP of the desired client and get the results under cbClientStatistics. Continuously get operations of the rest of the params will give the updated statistics values without a need to set cbClientIP again and again.')
cbClientStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2))
cbClNumSeconds = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: cbClNumSeconds.setDescription('The number of seconds since the client statistics are active. The statistics values are reset automaticaly by the gateway (as well as by setting cbClReset) according to the value of cbFreqClientsInfoReset.')
cbClNumKBytes = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cbClNumKBytes.setDescription('Number of bytes transmitted to IP==cbClientIP in the last cbClNumSeconds seconds.')
cbClNumPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cbClNumPackets.setDescription('Number of packets transmitted to IP==cbClientIP in the last cbClNumSeconds seconds.')
cbClAvrBytesPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClAvrBytesPerSecond.setStatus('mandatory')
if mibBuilder.loadTexts: cbClAvrBytesPerSecond.setDescription('Average transfer rate in bytes per second for this client.')
cbClNumPacketsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClNumPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: cbClNumPacketsDiscarded.setDescription('Number of packets discarded to IP==cbClientIP in the last cbClNumSeconds seconds.')
cbClStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbClStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: cbClStatReset.setDescription('Set ot non-zero - Reset the statistics values for the client cbClientIP.')
cbClEncrEnbled = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClEncrEnbled.setStatus('mandatory')
if mibBuilder.loadTexts: cbClEncrEnbled.setDescription('If this variable is True then the user desire encryption. This value may not changed and it is NOT changed by setting cbClStatReset.')
cbStatClTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3))
cbClTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: cbClTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTable.setDescription('This table contains updated statistics of all clients known to the gateway.')
cbClTableNode = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbClTableIP"))
if mibBuilder.loadTexts: cbClTableNode.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableNode.setDescription('Information about a particular client.')
cbClTableIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableIP.setDescription('The clients IP.')
cbClTableStampTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableStampTime.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableStampTime.setDescription('The clients Stamp Time.')
cbClTableStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableStartTime.setDescription('The clients Start Time.')
cbClTableTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableTotalPackets.setDescription('Total Packets transmitted to this client.')
cbClTableBytesInSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableBytesInSec.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableBytesInSec.setDescription('The clients Rate in Bytes/Sec.')
cbClTablePacketsDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTablePacketsDiscr.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTablePacketsDiscr.setDescription('The Total Packets which were discarded to this client')
cbClTableKBytesTxed = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbClTableKBytesTxed.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableKBytesTxed.setDescription('The Total KBytes transmitted to this client.')
cbClTableReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbNo", 0), ("cbYes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbClTableReset.setStatus('mandatory')
if mibBuilder.loadTexts: cbClTableReset.setDescription('Reset the client statistics.')
cbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2))
cbNetworkParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1))
cbNetGatewayMngIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetGatewayMngIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetGatewayMngIP.setDescription('C&M IP Address. Changing this parameter will affect after system reset.')
cbNetGatewayMngSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbNetGatewayMngSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetGatewayMngSubnetMask.setDescription('C&M subnet mask. Changing this parameter will affect after system reset.')
cbNetDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetDefaultGateway.setDescription('The default gateway IP Address. The term gateway here, is reffering to another station in the same LAN of the CATV-Gateway. All IP packets that the CATV-Gateway is sending to the LAN (and not over the viedo) and their IP Address do not belong to the CATV-Gateway local ring will be sent to this gateway station unless cbNetDefaultGateway is 0.0.0.0 Changing this parameter will affect after system reset.')
cbNetPromiscuous = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetPromiscuous.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetPromiscuous.setDescription('Enables/Disables Promiscuous Mode. Changing this parameter will affect after system reset.')
cbNetUnregisteredUsers = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetUnregisteredUsers.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetUnregisteredUsers.setDescription('Enables/Disables Unregistered Users.')
cbNetMulticast = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetMulticast.setDescription('Enables/Disables receive Multicast Packets.')
cbNetDualNIC = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetDualNIC.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetDualNIC.setDescription('Enables/Disables Transportation NIC Changing this parameter will affect after system reset.')
cbNetGatewayDataIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetGatewayDataIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetGatewayDataIP.setDescription('Transportation IP Address. Changing this parameter will affect after system reset.')
cbNetGatewayDataSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetGatewayDataSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetGatewayDataSubnetMask.setDescription('Transportation subnet mask. Changing this parameter will affect after system reset.')
cbNetTelnet = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetTelnet.setDescription('Enables/Disables the Telnet Server')
cbNetFTP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbNetFTP.setStatus('mandatory')
if mibBuilder.loadTexts: cbNetFTP.setDescription('Enables/Disables the FTP Server')
cbDVBOutputParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2))
cbDVBOutputBitRate = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBOutputBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBOutputBitRate.setDescription('PLL Frequency')
cbDVBPAT = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBPAT.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBPAT.setDescription('PAT Rate')
cbDVBPMT = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBPMT.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBPMT.setDescription('PMT Rate')
cbDVBFraming = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbFraming188", 1), ("cbFraming204", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBFraming.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBFraming.setDescription('188/204 Framing.')
cbStuffingMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbFFStuffing", 0), ("cbAdaptationField", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStuffingMode.setStatus('mandatory')
if mibBuilder.loadTexts: cbStuffingMode.setDescription('Stuffing mode: either FF stuffing or Adaptation field stuffing')
cbMpeMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbPacked", 0), ("cbNotPacked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMpeMode.setStatus('mandatory')
if mibBuilder.loadTexts: cbMpeMode.setDescription('MPE mode: Packed MPE mode or Not packed MPE mode.')
cbCRCMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cbZero", 0), ("cbCheckSum", 1), ("cbCRC", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCRCMode.setStatus('mandatory')
if mibBuilder.loadTexts: cbCRCMode.setDescription('CRC type')
cbDVBClockPolarity = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbNotInverted", 0), ("cbInverted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbDVBClockPolarity.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBClockPolarity.setDescription('DVB Clock Polarity. (read only value - may be changed in CFG.INI only).')
cbDVBAuxInput = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBAuxInput.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBAuxInput.setDescription('Aux Input Enable')
cbDVBAuxNullPackets = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBAuxNullPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBAuxNullPackets.setDescription('Aux Null Packets')
cbDVBAuxInputType = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbASI", 1), ("cbLVDS", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBAuxInputType.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBAuxInputType.setDescription('Aux Input Type')
cbDVBLlcSnap = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDVBLlcSnap.setStatus('mandatory')
if mibBuilder.loadTexts: cbDVBLlcSnap.setDescription('Enable LLC-SNAP in MPE')
cbGeneralParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3))
cbGatewayEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGatewayEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cbGatewayEnabled.setDescription('Enables/Disables all the Gateway operations.')
cbGatewaySWReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbGatewaySWReset.setStatus('mandatory')
if mibBuilder.loadTexts: cbGatewaySWReset.setDescription('CAUTION: Setting this param to cbTrue cause a S/W reset of the gateway.')
cbTraceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3))
cbTraceMask = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTraceMask.setStatus('mandatory')
if mibBuilder.loadTexts: cbTraceMask.setDescription('Mask to select elements for trace.')
cbTraceLevel = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTraceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cbTraceLevel.setDescription('Trace level for elements specified by cbTraceMask')
cbTraceOutputChannel = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cbTraceToVGA", 1), ("cbTraceToCOM1", 2), ("cbTraceToCOM2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTraceOutputChannel.setStatus('mandatory')
if mibBuilder.loadTexts: cbTraceOutputChannel.setDescription('Trace output channel.')
cbPktEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbPktEncrypt.setStatus('mandatory')
if mibBuilder.loadTexts: cbPktEncrypt.setDescription('Enable/Disable encryption of the the transmitted packets. If cbPktEncrypt==cbTrue, packets will be encrypted only if cbClEncrEnable==cbTrue for that client.')
cbGatewayDescription = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGatewayDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cbGatewayDescription.setDescription('A general description of this gateway. The description may be changed as needed.')
cbSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbSWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cbSWVersion.setDescription('TV Gateway Software Version.')
cbApplicationFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbApplicationFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cbApplicationFileName.setDescription('TV Gateway Application Software File Name. Changing this parameter will affect after system reset.')
cbDataMappingMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("cbDataStreaming", 2), ("cbProtocolEncapsulation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDataMappingMode.setStatus('mandatory')
if mibBuilder.loadTexts: cbDataMappingMode.setDescription('Data Boradcast Mode - Encodding mode of data from network.')
cbMaxAllowableDelay = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMaxAllowableDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cbMaxAllowableDelay.setDescription('The Maximum allowable time (in mSec) which a packet can be delayed in the gateway. ')
cbQualityOfService = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 10))
cbQOSMode = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbPermissive", 1), ("cbRestrictive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbQOSMode.setStatus('mandatory')
if mibBuilder.loadTexts: cbQOSMode.setDescription('Permissive mode will allow transmit to users obove their maximum rate when when band-width is available. Restrictive mode will not transmit any data to users above their maximum rate even if band-width is available.')
cbQOSActive = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbFalse", 0), ("cbTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbQOSActive.setStatus('mandatory')
if mibBuilder.loadTexts: cbQOSActive.setDescription('Turn on (cbTrue) or off (cbFalse) the Quality of Service mechanism. When Quality of Service is turned off, the minimum CIR promised to users is ignored and data is transffered to users in the order it is received from the Ethernet by the gateway.')
cbFlushing = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbNo", 0), ("cbYes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFlushing.setStatus('mandatory')
if mibBuilder.loadTexts: cbFlushing.setDescription('Flushing packets on IDLE')
cbFPGAFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFPGAFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cbFPGAFileName.setDescription("A string that holds the MCS file name loaded to the Gateway's Encoder. Changing this parameter will affect after system reset.")
cbGroupsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4))
cbGrTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: cbGrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbGrTable.setDescription('This table contains the Groups definitions.')
cbGroupsTableNode = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbGrTableIndex"))
if mibBuilder.loadTexts: cbGroupsTableNode.setStatus('mandatory')
if mibBuilder.loadTexts: cbGroupsTableNode.setDescription('Information about a particular group.')
cbGrTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cbGrTableIndex.setDescription('Group Index.')
cbGrTablePID = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTablePID.setStatus('mandatory')
if mibBuilder.loadTexts: cbGrTablePID.setDescription('The Group PID.')
cbGrTableQosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbIndividual", 0), ("cbGlobal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableQosMode.setStatus('mandatory')
if mibBuilder.loadTexts: cbGrTableQosMode.setDescription('The Group Qos Mode.')
cbGrTableMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableMinRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbGrTableMinRate.setDescription('The Group Minimum rate. This parameter affects only if QosMode=Global')
cbGrTableMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbGrTableMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbGrTableMaxRate.setDescription('The Group Maximum rate. This parameter affects only if QosMode=Global')
cbConfigSTUTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5))
cbStaticUserTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: cbStaticUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserTable.setDescription('This table contains the all the static users.')
cbStaticUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbStaticUserIP"))
if mibBuilder.loadTexts: cbStaticUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserEntry.setDescription('Information about a particular static user.')
cbStaticUserIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserIP.setDescription('IP of static user.')
cbStaticUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMask.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserMask.setDescription('The static user mask.')
cbStaticUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserGroup.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserGroup.setDescription("The static user's Group.")
cbStaticUserMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMAC.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserMAC.setDescription('The group in which the static user resides.')
cbStaticUserMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMinRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserMinRate.setDescription('The static user Minimum rate (CIR).')
cbStaticUserMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbStaticUserMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbStaticUserMaxRate.setDescription('The static user Maximum rate.')
cbConfigMulticastTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6))
cbMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: cbMulticastTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastTable.setDescription('This table contains the all the multicasts.')
cbMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbMulticastIP"))
if mibBuilder.loadTexts: cbMulticastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastEntry.setDescription('Information about a particular multicast.')
cbMulticastIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastIP.setDescription('IP of multicast.')
cbMulticastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastGroup.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastGroup.setDescription("The multicast's Group.")
cbMulticastSID = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastSID.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastSID.setDescription('The group in which the multicast resides.')
cbMulticastMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastMinRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastMinRate.setDescription('The multicast Minimum rate (CIR).')
cbMulticastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbMulticastMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbMulticastMaxRate.setDescription('The multicast Maximum rate.')
cbConfigClTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7))
cbCfgClTable = MibTable((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: cbCfgClTable.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTable.setDescription('This table contains updated configuration of all clients known to the gateway.')
cbCfgClTableNode = MibTableRow((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "EFDATA-MIB", "cbCfgClTableIP"))
if mibBuilder.loadTexts: cbCfgClTableNode.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableNode.setDescription('Information about a particular client configuration.')
cbCfgClTableIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableIP.setDescription('The clients IP.')
cbCfgClTableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMask.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableMask.setDescription('The clients IP Mask.')
cbCfgClTableMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMAC.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableMAC.setDescription('The clients MAC Address.')
cbCfgClTableGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableGroup.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableGroup.setDescription('The clients Group.')
cbCfgClTableBy = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableBy.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableBy.setDescription('By whom the client was added.')
cbCfgClTableMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMinRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableMinRate.setDescription('The clients Minimum rate (CIR).')
cbCfgClTableMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableMaxRate.setDescription('The clients Maximum rate.')
cbCfgClTableEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cbFalse", 0), ("cbTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCfgClTableEncrypt.setStatus('mandatory')
if mibBuilder.loadTexts: cbCfgClTableEncrypt.setDescription('The clients Encryption parameter True/False.')
cbTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 8))
cbTime = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTime.setStatus('mandatory')
if mibBuilder.loadTexts: cbTime.setDescription('A string in the form HH:MM:SS that represents the gateway idea of the current time. Single digits should be preceeded by 0. Examples: 12:35:27 01:50:00 09:01:59')
cbDate = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDate.setStatus('mandatory')
if mibBuilder.loadTexts: cbDate.setDescription('A string representing the gateway idea of the current date. In order to set a different date, use the following format: <Full Month Name> <1 or 2 Digits of Day of Month>,<4 Digits of Year> Examples: September 1,1998 Januray 12, 2002')
cbClientsInfoReset = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbClientsInfoReset.setStatus('mandatory')
if mibBuilder.loadTexts: cbClientsInfoReset.setDescription('This parameter is applicable only for clients that were NOT added by the CCU. The gateway will delete from its lists clients information (statistics and encryption parameters) for each client registered in the system for more then cbTClientsInfoReset seconds. cbTClientsInfoReset must be greater then 0.')
cbCCUParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10))
cbCCU1 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU1.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU1.setDescription('IP of CCU Server #1 (set to 0.0.0.0 to disable CCU #1)')
cbCCU2 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU2.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU2.setDescription('IP of CCU Server #2 (set to 0.0.0.0 to disable CCU #2)')
cbCCU3 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU3.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU3.setDescription('IP of CCU Server #3 (set to 0.0.0.0 to disable CCU #3)')
cbCCU4 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU4.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU4.setDescription('IP of CCU Server #4 (set to 0.0.0.0 to disable CCU #4)')
cbCCU5 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU5.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU5.setDescription('IP of CCU Server #5 (set to 0.0.0.0 to disable CCU #5)')
cbCCU6 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU6.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU6.setDescription('IP of CCU Server #6 (set to 0.0.0.0 to disable CCU #6)')
cbCCU7 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU7.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU7.setDescription('IP of CCU Server #7 (set to 0.0.0.0 to disable CCU #7)')
cbCCU8 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU8.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU8.setDescription('IP of CCU Server #8 (set to 0.0.0.0 to disable CCU #8)')
cbCCU9 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU9.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU9.setDescription('IP of CCU Server #9 (set to 0.0.0.0 to disable CCU #9)')
cbCCU10 = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 10, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbCCU10.setStatus('mandatory')
if mibBuilder.loadTexts: cbCCU10.setDescription('IP of CCU Server #10 (set to 0.0.0.0 to disable CCU #10)')
cbHASParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11))
cbHasEnable = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbEnabled", 1), ("cbDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbHasEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cbHasEnable.setDescription('Enables/Disables High Availability Mode.')
cbHasCpu = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbHasCpu.setStatus('mandatory')
if mibBuilder.loadTexts: cbHasCpu.setDescription('Maximum CPU')
cbHasMemory = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 2, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbHasMemory.setStatus('mandatory')
if mibBuilder.loadTexts: cbHasMemory.setDescription('Maximum Memory Usage')
cbDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3))
cbDiagTestTx = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1))
cbDiagTestTxParam = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 1))
cbTestTxDestIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTestTxDestIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbTestTxDestIP.setDescription('Test Transfer Packet ID')
cbTestTxType = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cbTestTypeOnePacket", 1), ("cbTestTypeLowSpeedCont", 2), ("cbTestTypeHighSpeedCont", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbTestTxType.setStatus('mandatory')
if mibBuilder.loadTexts: cbTestTxType.setDescription('READ/WRITE Test Transfer Type: cbTestTypeOnePacket - one packet, cbTestTypeLowSpeedCont - Low Speed Continuous. cbTestTypeHighSpeedCont - High Speed Continuous.')
cbDiagTestTxActive = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbDiagTestTxActive.setStatus('mandatory')
if mibBuilder.loadTexts: cbDiagTestTxActive.setDescription('Set to 0 in order to stop Test Transfer. Set to non-0 in order to activate it. (in case cbTestTxType = 1, set to 0 and to non-zero in order to re-send the single test packet)')
cbSWDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4))
cbSWServerIP = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbSWServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: cbSWServerIP.setDescription('The TFTP server IP address. The S/W file will be TFTPed from this station. Use 0.0.0.0 to load a different local file (without TFTP).')
cbAppDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2))
cbSWSourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbSWSourceFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cbSWSourceFileName.setDescription('The software file name and its optional path (relative to the TFTP server root definition) to be downloaded from the server. Example: catvgw.dat')
cbSWTargetFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbSWTargetFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cbSWTargetFileName.setDescription('The S/W file name (without path) on the Gateway. Example: ram.abs WARNING: cbApplicationFileName (under cbGeneralParam) is the name of the running S/W. If cbSWTargetFileName is different from cbApplicationFileName, it will be just downloaded to the Gateway and not used until cbApplicationFileName will be changed (in CFG.INI) to be equal to cbSWTargetFileName.')
cbSWDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbSWDownloadStart.setStatus('mandatory')
if mibBuilder.loadTexts: cbSWDownloadStart.setDescription('Set cbSWDownloadStart to cbTrue in order to start the S/W download process. Set cbSWDownloadStart to cbFalse to interrupt (and stop) S/W download in progress (when cbSWDownloadStatus = cbDownloadInProgress).')
cbSWDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbIdle", 0), ("cbDownloadInProgress", 1), ("cbERRORTFTPServernotFound", 2), ("cbERRORFileNotFound", 3), ("cbERRORNotASWFile", 4), ("cbERRORBadChecksum", 5), ("cbERRORCommunicationFailed", 6), ("cbDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbSWDownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cbSWDownloadStatus.setDescription('Status of SW Download: cbIdle - Download has not started yet or has comleted and gateway already restarted with new version (not an error). cbDownloadInProgress - Download is currently in progrees (not an error). cbERRORTFTPServernotFound - Cannot find a TFTP server in the specified IP address - check and correct cbSWServerIP. cbERRORFileNotFound - Cannot find the specified file - check and correct cbSWFileName. cbERRORNotaSWFile - The specified file is not a SW file - check and correct cbSWFileName. cbERRORBadChecksum - Bad checksum - try to download again. cbERRORCommunicationFailed - Communication with server failed - try to download again. cbDownloadAborted - Download aborted by SNMP manager (cbSWDownloadStart was set to cbFalse during download).')
cbFPGADownload = MibIdentifier((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3))
cbFPGASourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFPGASourceFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cbFPGASourceFileName.setDescription('The FPGA file name and its optional path (relative to the TFTP server root definition) to be downloaded from the server. Example: FPGA.DAT')
cbFPGATargetFileName = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbFPGATargetFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cbFPGATargetFileName.setDescription('The FPGA file name (without path) on the Gateway. Example: FPGA.DAT')
cbFPGADownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("cbTrue", 1), ("cbFalse", 0)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cbFPGADownloadStart.setStatus('mandatory')
if mibBuilder.loadTexts: cbFPGADownloadStart.setDescription('Set cbFPGADownloadStart to cbTrue in order to start the FPGA download process. Set cbFPGADownloadStart to cbFalse to interrupt (and stop) FPGA download in progress (when cbFPGADownloadStatus = cbDownloadInProgress).')
cbFPGADownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6247, 3, 1, 1, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cbIdle", 0), ("cbDownloadInProgress", 1), ("cbERRORTFTPServernotFound", 2), ("cbERRORFileNotFound", 3), ("cbERRORNotASWFile", 4), ("cbERRORBadChecksum", 5), ("cbERRORCommunicationFailed", 6), ("cbDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbFPGADownloadStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cbFPGADownloadStatus.setDescription('Status of FPGA Download: cbIdle - Download has not started yet or has comleted and gateway already restarted with new version (not an error). cbDownloadInProgress - Download is currently in progrees (not an error). cbERRORTFTPServernotFound - Cannot find a TFTP server in the specified IP address - check and correct cbSWServerIP. cbERRORFileNotFound - Cannot find the specified file - check and correct cbFPGAFileName. cbERRORNotaSWFile - The specified file is not a SW file - check and correct cbFPGAFileName. cbERRORBadChecksum - Bad checksum - try to download again. cbERRORCommunicationFailed - Communication with server failed - try to download again. cbDownloadAborted - Download aborted by SNMP manager (cbFPGADownloadStart was set to cbFalse during download).')
mibBuilder.exportSymbols("EFDATA-MIB", cbClNumPacketsDiscarded=cbClNumPacketsDiscarded, cbClStatReset=cbClStatReset, cbNetGatewayDataSubnetMask=cbNetGatewayDataSubnetMask, cbStatClient=cbStatClient, cbSWDownloadStart=cbSWDownloadStart, cbFPGASourceFileName=cbFPGASourceFileName, cbStatAvrBytesPerSec=cbStatAvrBytesPerSec, cbStatNumOfPackets=cbStatNumOfPackets, cbQOSMode=cbQOSMode, cbFlushing=cbFlushing, cbStatNumPacketDiscarded=cbStatNumPacketDiscarded, cbClNumKBytes=cbClNumKBytes, cbStatAvrPktSize=cbStatAvrPktSize, cbStaticUserMaxRate=cbStaticUserMaxRate, cbGrTableMaxRate=cbGrTableMaxRate, cbStaticUserEntry=cbStaticUserEntry, cbQualityOfService=cbQualityOfService, cbGroupsTableNode=cbGroupsTableNode, cbCfgClTableMask=cbCfgClTableMask, cbMulticastEntry=cbMulticastEntry, cbFPGADownload=cbFPGADownload, cbDVBFraming=cbDVBFraming, cbClientStatistics=cbClientStatistics, cbCfgClTableMAC=cbCfgClTableMAC, cbCCU2=cbCCU2, cbDataMappingMode=cbDataMappingMode, cbCCU3=cbCCU3, cbGatewaySWReset=cbGatewaySWReset, cbStaticUserIP=cbStaticUserIP, cbCCU4=cbCCU4, cbCfgClTableMinRate=cbCfgClTableMinRate, cbClTableIP=cbClTableIP, cbClientIP=cbClientIP, cbCCU7=cbCCU7, cbDVBOutputBitRate=cbDVBOutputBitRate, cbGroupsTable=cbGroupsTable, cbCfgClTableEncrypt=cbCfgClTableEncrypt, dtmx5000=dtmx5000, cbMulticastGroup=cbMulticastGroup, spectracast=spectracast, cbSWTargetFileName=cbSWTargetFileName, cbMpeMode=cbMpeMode, cbStaticUserTable=cbStaticUserTable, cbAppDownload=cbAppDownload, cbMulticastSID=cbMulticastSID, cbPktEncrypt=cbPktEncrypt, cbCfgClTableBy=cbCfgClTableBy, cbFPGADownloadStart=cbFPGADownloadStart, cbConfigClTable=cbConfigClTable, cbClTableStampTime=cbClTableStampTime, cbDVBPMT=cbDVBPMT, cbStatNumBytesTXed=cbStatNumBytesTXed, cbHasEnable=cbHasEnable, cbCCU6=cbCCU6, cbNetGatewayMngIP=cbNetGatewayMngIP, cbCCU10=cbCCU10, cbTestTxDestIP=cbTestTxDestIP, cbTraceOutputChannel=cbTraceOutputChannel, cbStatNumNMSFrames=cbStatNumNMSFrames, cbSWDownloadStatus=cbSWDownloadStatus, cbHasCpu=cbHasCpu, cbClTableStartTime=cbClTableStartTime, cbQOSActive=cbQOSActive, cbConfigMulticastTable=cbConfigMulticastTable, efdata=efdata, cbDate=cbDate, cbDVBOutputParam=cbDVBOutputParam, cbDVBAuxInputType=cbDVBAuxInputType, cbDVBAuxNullPackets=cbDVBAuxNullPackets, cbDVBAuxInput=cbDVBAuxInput, cbNetGatewayDataIP=cbNetGatewayDataIP, cbStatReset=cbStatReset, cbClTableNode=cbClTableNode, cbGrTableQosMode=cbGrTableQosMode, cbNetFTP=cbNetFTP, cbDiagTestTxParam=cbDiagTestTxParam, cbGrTablePID=cbGrTablePID, cbNetTelnet=cbNetTelnet, cbApplicationFileName=cbApplicationFileName, cbDiagnostics=cbDiagnostics, cbMemoryUsage=cbMemoryUsage, cbTimeDate=cbTimeDate, cbClTableBytesInSec=cbClTableBytesInSec, cbCfgClTableGroup=cbCfgClTableGroup, cbGeneralParam=cbGeneralParam, cbStaticUserMinRate=cbStaticUserMinRate, cbClientsInfoReset=cbClientsInfoReset, cbTraceLevel=cbTraceLevel, cbClAvrBytesPerSecond=cbClAvrBytesPerSecond, cbHasMemory=cbHasMemory, cbNetworkParam=cbNetworkParam, cbStaticUserMAC=cbStaticUserMAC, cbStatGeneral=cbStatGeneral, cbMulticastTable=cbMulticastTable, cbConfig=cbConfig, cbDVBClockPolarity=cbDVBClockPolarity, cbFPGADownloadStatus=cbFPGADownloadStatus, cbClTablePacketsDiscr=cbClTablePacketsDiscr, cbClEncrEnbled=cbClEncrEnbled, cbClTableReset=cbClTableReset, cbCCU9=cbCCU9, cbNetPromiscuous=cbNetPromiscuous, cbCfgClTableMaxRate=cbCfgClTableMaxRate, cbMulticastMaxRate=cbMulticastMaxRate, cbClNumSeconds=cbClNumSeconds, cbSWVersion=cbSWVersion, cbGateway=cbGateway, cbDiagTestTx=cbDiagTestTx, cbTraceMask=cbTraceMask, cbTestTxType=cbTestTxType, cbCRCMode=cbCRCMode, cbClTableKBytesTxed=cbClTableKBytesTxed, cbCCU5=cbCCU5, cbHASParam=cbHASParam, cbTraceInfo=cbTraceInfo, cbTime=cbTime, cbClNumPackets=cbClNumPackets, cbStatNumClients=cbStatNumClients, cbGatewayEnabled=cbGatewayEnabled, cbDVBPAT=cbDVBPAT, cbNetDefaultGateway=cbNetDefaultGateway, cbMulticastIP=cbMulticastIP, cbStatistics=cbStatistics, cbCPULoad=cbCPULoad, cbCfgClTableIP=cbCfgClTableIP, cbFPGATargetFileName=cbFPGATargetFileName, cbStaticUserMask=cbStaticUserMask, cbCCU1=cbCCU1, cbCfgClTableNode=cbCfgClTableNode, cbSWServerIP=cbSWServerIP, cbClTable=cbClTable, cbStaticUserGroup=cbStaticUserGroup, cbNetGatewayMngSubnetMask=cbNetGatewayMngSubnetMask, cbCCUParam=cbCCUParam, cbCfgClTable=cbCfgClTable, cbConfigSTUTable=cbConfigSTUTable, cbGatewayDescription=cbGatewayDescription, cbNetUnregisteredUsers=cbNetUnregisteredUsers, cbStuffingMode=cbStuffingMode, cbSWDownload=cbSWDownload, cbCCU8=cbCCU8, cbNetDualNIC=cbNetDualNIC, cbNetMulticast=cbNetMulticast, cbDVBLlcSnap=cbDVBLlcSnap, cbFPGAFileName=cbFPGAFileName, cbGrTableIndex=cbGrTableIndex, cbClTableTotalPackets=cbClTableTotalPackets, cbGrTableMinRate=cbGrTableMinRate, cbMulticastMinRate=cbMulticastMinRate, cbMaxAllowableDelay=cbMaxAllowableDelay, cbGrTable=cbGrTable, cbStatClTable=cbStatClTable, cbSWSourceFileName=cbSWSourceFileName, cbDiagTestTxActive=cbDiagTestTxActive)
