#
# PySNMP MIB module Nortel-Magellan-Passport-DpnTrunksMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-DpnTrunksMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
Gauge32, Counter32, Integer32, RowStatus, PassportCounter64, DisplayString, Unsigned32, StorageType, InterfaceIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Gauge32", "Counter32", "Integer32", "RowStatus", "PassportCounter64", "DisplayString", "Unsigned32", "StorageType", "InterfaceIndex")
NonReplicated, FixedPoint1, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "FixedPoint1", "AsciiString")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, Bits, Gauge32, Integer32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, ModuleIdentity, ObjectIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Bits", "Gauge32", "Integer32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dpnTrunksMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40))
dpnGate = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61))
dpnGateRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 1), )
if mibBuilder.loadTexts: dpnGateRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateRowStatusTable.setDescription('This entry controls the addition and deletion of dpnGate components.')
dpnGateRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateRowStatusEntry.setDescription('A single entry in the table represents a single dpnGate component.')
dpnGateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateRowStatus.setDescription('This variable is used as the basis for SNMP naming of dpnGate components. These components can be added and deleted.')
dpnGateComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dpnGateStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStorageType.setDescription('This variable represents the storage type value for the dpnGate tables.')
dpnGateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dpnGateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateIndex.setDescription('This variable represents the index for the dpnGate tables.')
dpnGateIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 100), )
if mibBuilder.loadTexts: dpnGateIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
dpnGateIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateIfEntryEntry.setDescription('An entry in the dpnGateIfEntryTable.')
dpnGateIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
dpnGateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 100, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
dpnGateProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 101), )
if mibBuilder.loadTexts: dpnGateProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateProvTable.setDescription('This group of provisionable attributes provide parameters used by DpnGateway for staging.')
dpnGateProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateProvEntry.setDescription('An entry in the dpnGateProvTable.')
dpnGateExpectedRemoteNamsId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 101, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateExpectedRemoteNamsId.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateExpectedRemoteNamsId.setDescription("This attribute specifies the expected Nams Identifier of the module to which this DpnGateway is connected. The DpnGateway end points exchange their Nams Identifiers through the DpnGateway's staging protocol. The staged value is validated and the remoteValidationAction will be executed for those values not matching the value supplied for this attribute. If this value is zero, then the comparison is always successful.")
dpnGateRemoteValidationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 101, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("continue", 0), ("disable", 1))).clone('continue')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateRemoteValidationAction.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateRemoteValidationAction.setDescription('This attribute specifies the action to be taken if there is a mismatch between the provisioned value and the value received from the remote end, in cases where the expectedRemoteNamsId is non-zero. If this attribute is provisioned to continue then upon an unsucessful validation staging continues, otherwise, if disable is set then the DpnGateway does not continue to stage but, attempts to stage again after a one minute time out. All unsuccessful validation when expectedRemoteNamsId has been set result in the generation of an alarm.')
dpnGateLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 101, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("dedicated", 0), ("dialIn", 3))).clone('dedicated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateLinkType.setDescription('This attribute specifies the type of network link. If this attribute is provisioned to dedicated then the link is a dedicated network link to a DPN module. If this attribute is provisioned to dialIn then the link is connected to the DPN module through a public telephone network, on a dial line.')
dpnGateOverridesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 102), )
if mibBuilder.loadTexts: dpnGateOverridesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOverridesTable.setDescription('Theses attribute comprise the set of provisionable override parameters supported by both the Trunk and DpnGateway components. The attributes are used when reporting operational attributes (used for metric calculations) to the routing system.')
dpnGateOverridesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateOverridesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOverridesEntry.setDescription('An entry in the dpnGateOverridesTable.')
dpnGateOverrideTransmitSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 102, 1, 1), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateOverrideTransmitSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOverrideTransmitSpeed.setDescription('This is the overridden value of link speed (bit/s) that, if staged successfully with the remote, is reported to the routing system for metric calculations. A zero indicates that an override value has not been provided and that only the measured value will be reported to the routing system. If this value is changed on a Trunk or DpnGateway that is enabled, the LOCK and UNLOCK commands must be issued to the component to restage the override with the remote.')
dpnGateOldOverrideRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 102, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateOldOverrideRoundTripDelay.setStatus('obsolete')
if mibBuilder.loadTexts: dpnGateOldOverrideRoundTripDelay.setDescription('This is the overridden value of link delay (ms) that, if staged successfully with the remote, is reported to the routing system for metric calculations. A zero indicates that an override value has not been provided and that only the measured value will be reported to the routing system. If this value is changed on a Trunk or DpnGateway that is enabled, the LOCK and UNLOCK commands must be issued to the component to restage the override with the remote.')
dpnGateOverrideRoundTripUsec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 102, 1, 3), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateOverrideRoundTripUsec.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOverrideRoundTripUsec.setDescription('This is the overridden value of link delay (ms) that, if staged successfully with the remote, is reported to the routing system for metric calculations. A zero indicates that an override value has not been provided and that only the measured value will be reported to the routing system. If this value is changed on a Trunk or DpnGateway that is enabled, the LOCK and UNLOCK commands must be issued to the component to restage the override with the remote.')
dpnGateStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103), )
if mibBuilder.loadTexts: dpnGateStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
dpnGateStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStateEntry.setDescription('An entry in the dpnGateStateTable.')
dpnGateAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
dpnGateOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
dpnGateUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
dpnGateAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
dpnGateProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
dpnGateControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
dpnGateAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
dpnGateStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
dpnGateUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 103, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
dpnGateOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 104), )
if mibBuilder.loadTexts: dpnGateOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
dpnGateOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOperStatusEntry.setDescription('An entry in the dpnGateOperStatusTable.')
dpnGateSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
dpnGateOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 105), )
if mibBuilder.loadTexts: dpnGateOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOperTable.setDescription('This group of attributes contain the operational information associated with this DpnGateway and the remote to which it has it staged.')
dpnGateOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 105, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateOperEntry.setDescription('An entry in the dpnGateOperTable.')
dpnGateRemoteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 105, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateRemoteComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateRemoteComponentName.setDescription('This attribute indicates the Component Name of the remote DPN- 100 Utp Trunk or NetworkLink supplied by the staging protocol. It is in the format PM/n PE/n PI/n PO/n where PM is the remote module Nams Identifier, PE is the remote module Processor Element that is staged with, PI is the remote module Peripheral Interface card associated with the PE, and PO is the remote module Port (physical or virtual) on the PI that the physical line is connected to.')
dpnGateRemoteNamsMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 105, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateRemoteNamsMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateRemoteNamsMnemonic.setDescription('This attribute indicates the Nams Mnemonic of the remote DPN- 100 Module supplied by the staging protocol. It can be used as a parameter to Rtg Dpn for displaying all DpnGateway that are connect to the same module.')
dpnGateLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 105, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("trunk", 0), ("networkLink", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateLinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateLinkMode.setDescription('This attribute indicates whether the DpnGateway is a Trunk connected to a DPN-100 RM or a NetworkLink connected to a DPN-100 AM.')
dpnGateActivateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 105, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 15))).clone(namedValues=NamedValues(("dedicated", 0), ("dnl", 1), ("dbnl", 2), ("dialIn", 3), ("bwod", 5), ("unknown", 15))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateActivateReason.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateActivateReason.setDescription('This attribute indicates the reason the DpnGateway has been activated by the remote end. The value corresponds to the link type of the DPN end. It is always unknown until the link comes into service. If this attribute is set to dedicated, the DPN is a dedicated network link. If this attribute is set to dnl, the DPN end is a dial network link, meaning a network link which is connected through a dial-up service. If this attribute is set to dbnl, the DPN end is dial backup network link, activated because the main network link is out of service. If this attribute is set to bwod, the DPN end is a bandwidth on demand link, activated because extra bandwidth is required. If the attribute is set to unknown, the link is either not currently in use, or the DPN end has an unrecognized link type.')
dpnGateTransportTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 106), )
if mibBuilder.loadTexts: dpnGateTransportTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateTransportTable.setDescription('This group of attributes contains the set of operational parameters measured and maintained by both the Trunk and DpnGateway components.')
dpnGateTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 106, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateTransportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateTransportEntry.setDescription('An entry in the dpnGateTransportTable.')
dpnGateMeasuredSpeedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 106, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateMeasuredSpeedToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateMeasuredSpeedToIf.setDescription("This attribute indicates the current 'transmittable' bandwidth of the underlying facility. For a Trunk with a Unack subcomponent, and a DpnGateway with a Utp subcomponent, if a serial port is used, the value is the measured transmit speed of the port; if a channelized port (E1/DS1) is used, the value is the measured transmit speed of the Channel. For a Trunk with an AtmAccess subcomponent, the value is calculated by converting the VCC transmit cell rate to an equivalent bit rate. The VCC transmit cell rate is determined based on the vccReportingBw attribute of the Trunk AtmAccess component. If vccReportingBw has a value of pcr and attribute bwElastic of AtmAccess has a value of no, the peak cell rate (PCR) of the VCC, defined in txTrafficDescParm of AtmIf Vcc Vcd, is used. If vccReportingBw has a value of pcr and attribute bwElastic of AtmAccess has a value of yes, the minimum of the PCR, defined in txTrafficDescParm of AtmIf Vcc Vcd, and the current cell rate (CCR) of the VCC is used. If vccReportingBw has a value of acr, the best measurement of the actual cell rate (ACR) of the VCC is used, which is the minimum of the PCR, the CCR and the actual shaping rate (ASR). For a DpnGateway with a FrAccess subcomponent, the value indicates the committedInformationRate of FrAccess FrMuxSetup. A value of zero is displayed when the underlying facility is disabled or the current 'transmittable' bandwidth is unknown.")
dpnGateMeasuredRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 106, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateMeasuredRoundTripDelay.setStatus('obsolete')
if mibBuilder.loadTexts: dpnGateMeasuredRoundTripDelay.setDescription('This attribute indicates the measured Round Trip Delay (msec) discovered with the remote through the Trunk and DpnGateway staging protocols. The value includes emission, propagation, and queuing delays. A 512 byte data packet is used to perform the measurement. A value of zero is displayed when the link is disabled or the measured Round Trip Delay is unknown.')
dpnGateMaxTxUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 106, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateMaxTxUnit.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateMaxTxUnit.setDescription('This is the maximum transmission unit (byte size) that is supported by the Trunk or DpnGateway component. This size includes the data and routing headers. A value of zero indicates the MTU has not yet been determined.')
dpnGateMeasuredRoundTripDelayUsec = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 106, 1, 4), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateMeasuredRoundTripDelayUsec.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateMeasuredRoundTripDelayUsec.setDescription('This attribute indicates the measured Round Trip Delay (msec) discovered with the remote through the Trunk and DpnGateway staging protocols. The value includes emission, propagation, and queuing delays. A 512 byte data packet is used to perform the measurement. A value of zero is displayed when the link is disabled or the measured Round Trip Delay is unknown.')
dpnGateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107), )
if mibBuilder.loadTexts: dpnGateStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStatsTable.setDescription('This group of attributes contains statistics collected by the DpnGateway component.')
dpnGateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"))
if mibBuilder.loadTexts: dpnGateStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStatsEntry.setDescription('An entry in the dpnGateStatsTable.')
dpnGatePktFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGatePktFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGatePktFromIf.setDescription('This attribute counts the number of packets received from the remote module. This counter wraps around to zero when the maximum value is reached.')
dpnGateTrunkPktFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateTrunkPktFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateTrunkPktFromIf.setDescription('This attribute counts the number of internal trunk protocol packets received from the remote module. These packets are forwarded to the DpnGateway component. This counter wraps around to zero when the maximum value is reached.')
dpnGateTrunkPktToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateTrunkPktToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateTrunkPktToIf.setDescription('This attribute counts the number of internal trunk protocol packets transmitted to the remote module. This counter wraps around to zero when the maximum value is reached.')
dpnGateDiscardUnforward = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateDiscardUnforward.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateDiscardUnforward.setDescription('This attribute counts the number of packets received from the remote module that have been discarded. This counter wraps around to zero when the maximum value is reached. Two main reasons that cause this counter to increment are: the remote protocol is not compatible to the local protocol stack or, the packet cannot be forwarded due to either a recent loss of connectivity or due to congestion.')
dpnGateDiscardTrunkPktFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateDiscardTrunkPktFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateDiscardTrunkPktFromIf.setDescription('This attribute counts the number of internal trunk protocol packets received from the remote module that have been discarded. This counter wraps around to zero when the maximum value is reached. The two main reasons that cause this counter to increment is if the DpnGateway is unsynchronized with DPN-100 and if the remote protocol is not the same version as the local protocol.')
dpnGateStagingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateStagingAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateStagingAttempts.setDescription('This attribute counts the number of times that the staging protocol has attempted to stage with the remote module. This counter wraps around to zero when the maximum value is reached. The main reason for this counter to increment is that the local hardware is up but the local protocol cannot stage with the remote protocol due to a faulty connection. If the value is zero, then the local hardware has never enabled successfully.')
dpnGateDiscardTrunkPktToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 107, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateDiscardTrunkPktToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateDiscardTrunkPktToIf.setDescription('This attribute counts the number of internal trunk protocol packets that have been discarded before being transmitted to the remote module. This counter wraps around to zero when the maximum value is reached. The main reason that causes this counter to increment is that the DpnGateway can not get sufficient resources to create an internal trunk protocol packet.')
dpnGateFwdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3))
dpnGateFwdStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 1), )
if mibBuilder.loadTexts: dpnGateFwdStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsRowStatusTable.setDescription('This entry controls the addition and deletion of dpnGateFwdStats components.')
dpnGateFwdStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateFwdStatsIndex"))
if mibBuilder.loadTexts: dpnGateFwdStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsRowStatusEntry.setDescription('A single entry in the table represents a single dpnGateFwdStats component.')
dpnGateFwdStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateFwdStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of dpnGateFwdStats components. These components cannot be added nor deleted.')
dpnGateFwdStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateFwdStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dpnGateFwdStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateFwdStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsStorageType.setDescription('This variable represents the storage type value for the dpnGateFwdStats tables.')
dpnGateFwdStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dpnGateFwdStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsIndex.setDescription('This variable represents the index for the dpnGateFwdStats tables.')
dpnGateFwdStatsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 10), )
if mibBuilder.loadTexts: dpnGateFwdStatsOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsOperTable.setDescription('This operational group counts the Trunk or DpnGateway packet forwarding traffic statistics for operator console display.')
dpnGateFwdStatsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateFwdStatsIndex"))
if mibBuilder.loadTexts: dpnGateFwdStatsOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsOperEntry.setDescription('An entry in the dpnGateFwdStatsOperTable.')
dpnGateFwdStatsFwdPktFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 10, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateFwdStatsFwdPktFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsFwdPktFromIf.setDescription('This attribute counts the number of forwarding packets received by the Trunk or DpnGateway. This counter wraps around to zero when the maximum value is exceeded.')
dpnGateFwdStatsFwdDiscUnforwardFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 10, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateFwdStatsFwdDiscUnforwardFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsFwdDiscUnforwardFromIf.setDescription('This attribute counts the number of forwarding packets discarded by the Trunk or DpnGateway. This counter wraps around to zero when the maximum value is exceeded.')
dpnGateFwdStatsFwdOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 3, 10, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateFwdStatsFwdOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateFwdStatsFwdOctetFromIf.setDescription('This attribute counts the number of forwarding bytes received by the Trunk or DpnGateway. This counter wraps around to zero when the maximum value is exceeded.')
dpnTrunksGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 1))
dpnTrunksGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 1, 5))
dpnTrunksGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 1, 5, 2))
dpnTrunksGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 1, 5, 2, 2))
dpnTrunksCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 3))
dpnTrunksCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 3, 5))
dpnTrunksCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 3, 5, 2))
dpnTrunksCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 40, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-DpnTrunksMIB", dpnTrunksCapabilitiesBE01=dpnTrunksCapabilitiesBE01, dpnGateDiscardTrunkPktFromIf=dpnGateDiscardTrunkPktFromIf, dpnGateComponentName=dpnGateComponentName, dpnGateStateTable=dpnGateStateTable, dpnGateFwdStatsFwdDiscUnforwardFromIf=dpnGateFwdStatsFwdDiscUnforwardFromIf, dpnGateTrunkPktFromIf=dpnGateTrunkPktFromIf, dpnGateIfEntryEntry=dpnGateIfEntryEntry, dpnGateRowStatus=dpnGateRowStatus, dpnGateFwdStatsIndex=dpnGateFwdStatsIndex, dpnTrunksGroupBE01=dpnTrunksGroupBE01, dpnTrunksCapabilitiesBE=dpnTrunksCapabilitiesBE, dpnTrunksMIB=dpnTrunksMIB, dpnGateDiscardTrunkPktToIf=dpnGateDiscardTrunkPktToIf, dpnGateSnmpOperStatus=dpnGateSnmpOperStatus, dpnGateRowStatusEntry=dpnGateRowStatusEntry, dpnGateOverridesTable=dpnGateOverridesTable, dpnGateOldOverrideRoundTripDelay=dpnGateOldOverrideRoundTripDelay, dpnGateRemoteNamsMnemonic=dpnGateRemoteNamsMnemonic, dpnGateOverridesEntry=dpnGateOverridesEntry, dpnGateFwdStatsRowStatus=dpnGateFwdStatsRowStatus, dpnGateProvEntry=dpnGateProvEntry, dpnGateOverrideRoundTripUsec=dpnGateOverrideRoundTripUsec, dpnTrunksCapabilities=dpnTrunksCapabilities, dpnGateMeasuredSpeedToIf=dpnGateMeasuredSpeedToIf, dpnGateIfEntryTable=dpnGateIfEntryTable, dpnGateOperationalState=dpnGateOperationalState, dpnGateIfIndex=dpnGateIfIndex, dpnGate=dpnGate, dpnTrunksGroup=dpnTrunksGroup, dpnGateLinkType=dpnGateLinkType, dpnGateIfAdminStatus=dpnGateIfAdminStatus, dpnGateAvailabilityStatus=dpnGateAvailabilityStatus, dpnGateFwdStatsComponentName=dpnGateFwdStatsComponentName, dpnGateFwdStats=dpnGateFwdStats, dpnGateTransportTable=dpnGateTransportTable, dpnGateActivateReason=dpnGateActivateReason, dpnGateStatsEntry=dpnGateStatsEntry, dpnGateFwdStatsFwdPktFromIf=dpnGateFwdStatsFwdPktFromIf, dpnGateFwdStatsRowStatusTable=dpnGateFwdStatsRowStatusTable, dpnGateFwdStatsOperTable=dpnGateFwdStatsOperTable, dpnGateTransportEntry=dpnGateTransportEntry, dpnTrunksGroupBE01A=dpnTrunksGroupBE01A, dpnGateOperStatusTable=dpnGateOperStatusTable, dpnGateLinkMode=dpnGateLinkMode, dpnGateProceduralStatus=dpnGateProceduralStatus, dpnGateRemoteValidationAction=dpnGateRemoteValidationAction, dpnGateUnknownStatus=dpnGateUnknownStatus, dpnGateExpectedRemoteNamsId=dpnGateExpectedRemoteNamsId, dpnGateStateEntry=dpnGateStateEntry, dpnGateIndex=dpnGateIndex, dpnGateStandbyStatus=dpnGateStandbyStatus, dpnGateFwdStatsRowStatusEntry=dpnGateFwdStatsRowStatusEntry, dpnGateControlStatus=dpnGateControlStatus, dpnGateMeasuredRoundTripDelay=dpnGateMeasuredRoundTripDelay, dpnGateOperStatusEntry=dpnGateOperStatusEntry, dpnGateRowStatusTable=dpnGateRowStatusTable, dpnGateUsageState=dpnGateUsageState, dpnGateOperTable=dpnGateOperTable, dpnGateOverrideTransmitSpeed=dpnGateOverrideTransmitSpeed, dpnGateRemoteComponentName=dpnGateRemoteComponentName, dpnGateTrunkPktToIf=dpnGateTrunkPktToIf, dpnGateAlarmStatus=dpnGateAlarmStatus, dpnGateOperEntry=dpnGateOperEntry, dpnGateMaxTxUnit=dpnGateMaxTxUnit, dpnGateStagingAttempts=dpnGateStagingAttempts, dpnTrunksGroupBE=dpnTrunksGroupBE, dpnGateStorageType=dpnGateStorageType, dpnGateFwdStatsOperEntry=dpnGateFwdStatsOperEntry, dpnGateProvTable=dpnGateProvTable, dpnGatePktFromIf=dpnGatePktFromIf, dpnGateFwdStatsStorageType=dpnGateFwdStatsStorageType, dpnGateStatsTable=dpnGateStatsTable, dpnGateAdminState=dpnGateAdminState, dpnGateDiscardUnforward=dpnGateDiscardUnforward, dpnGateFwdStatsFwdOctetFromIf=dpnGateFwdStatsFwdOctetFromIf, dpnTrunksCapabilitiesBE01A=dpnTrunksCapabilitiesBE01A, dpnGateMeasuredRoundTripDelayUsec=dpnGateMeasuredRoundTripDelayUsec)
