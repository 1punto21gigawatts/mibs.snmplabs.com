#
# PySNMP MIB module INFORMANT-SQLSERVER-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-SQLSERVER-V2
# Produced by pysmi-0.3.4 at Wed May  1 13:53:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, Counter32, NotificationType, IpAddress, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32, MibIdentifier, Integer32, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Integer32", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
informant, InstanceName = mibBuilder.importSymbols("WTCS", "informant", "InstanceName")
sqlServerV2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 13))
sqlServerV2.setRevisions(('2008-04-27 06:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sqlServerV2.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: sqlServerV2.setLastUpdated('200804270606Z')
if mibBuilder.loadTexts: sqlServerV2.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: sqlServerV2.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: sqlServerV2.setDescription('The MIB module for informant SQL Server V2 entries. This module supports SQL Server 2005 and SQL Server 2008.')
analysisServicesV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1))
as2NameTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 1), )
if mibBuilder.loadTexts: as2NameTable.setStatus('current')
if mibBuilder.loadTexts: as2NameTable.setDescription('This table contains the list of Analysis Services instance names installed. The as2NameIndex is used to refer to all other Analysis Services SNMP entries.')
as2NameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 1, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2NameEntry.setStatus('current')
if mibBuilder.loadTexts: as2NameEntry.setDescription('Performance information for one Analysis Services name instance.')
as2NameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2NameIndex.setStatus('current')
if mibBuilder.loadTexts: as2NameIndex.setDescription('The index number associated with the instance name')
as2NameInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 1, 1, 2), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2NameInstance.setStatus('current')
if mibBuilder.loadTexts: as2NameInstance.setDescription('The name of the Analysis Services installed instance.')
as2CacheTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2), )
if mibBuilder.loadTexts: as2CacheTable.setStatus('current')
if mibBuilder.loadTexts: as2CacheTable.setDescription('Statistics related to Microsoft Analysis Services aggregation cache.')
as2CacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2CacheEntry.setStatus('current')
if mibBuilder.loadTexts: as2CacheEntry.setDescription('Performance information for one SQL Server name instance.')
as2CacheCurrentKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheCurrentKB.setStatus('current')
if mibBuilder.loadTexts: as2CacheCurrentKB.setDescription('Current memory used by the aggregation cache, in KB.')
as2CacheCurrentEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: as2CacheCurrentEntries.setDescription('Current number of cache entries.')
as2CacheDirectHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheDirectHitRatio.setStatus('current')
if mibBuilder.loadTexts: as2CacheDirectHitRatio.setDescription('Ratio of cache direct hits to cache lookups, for the period between obtaining counter values.')
as2CacheDirectHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheDirectHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2CacheDirectHitsPerSec.setDescription('Rate of cache direct hits. Queries were answered from an existing cache entry.')
as2CacheEvictionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheEvictionsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2CacheEvictionsPerSec.setDescription('Rate of evictions from the cache. This is per partition per cube per database. Typically due to background cleaner.')
as2CacheInsertsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheInsertsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2CacheInsertsPerSec.setDescription('Rate of insertions into the cache. This is per partition per cube per database.')
as2CacheKBAddedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheKBAddedPerSec.setStatus('current')
if mibBuilder.loadTexts: as2CacheKBAddedPerSec.setDescription('Rate of memory added to the cache, KB/sec.')
as2CacheLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2CacheLookupsPerSec.setDescription('Rate of cache lookups.')
as2CacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2CacheMissesPerSec.setDescription('Rate of cache misses.')
as2CacheTotalDirectHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalDirectHits.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalDirectHits.setDescription('Total count of direct cache hits. Queries were answered from existing cache entries.')
as2CacheTotalEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalEvictions.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalEvictions.setDescription('Evictions from the cache. This is per partition per cube per database. Typically due to background cleaner.')
as2CacheTotalFiltIteratorCachHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalFiltIteratorCachHit.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalFiltIteratorCachHit.setDescription('Total number of cache hits that returned an indexed iterator over the filtered results')
as2CacheTotalFiltIteratorCachMis = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalFiltIteratorCachMis.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalFiltIteratorCachMis.setDescription('Total number of cache hits that were unable to build an indexed iterator over the filtered results and had to build a new cache with the filtered results')
as2CacheTotalInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalInserts.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalInserts.setDescription('Insertions into the cache. This is per partition per cube per database.')
as2CacheTotalLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalLookups.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalLookups.setDescription('Total number of lookups into the cache.')
as2CacheTotalMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2CacheTotalMisses.setStatus('current')
if mibBuilder.loadTexts: as2CacheTotalMisses.setDescription('Total count of cache misses.')
as2ConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3), )
if mibBuilder.loadTexts: as2ConnectionTable.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionTable.setDescription('Statistics related to Microsoft Analysis Services connections.')
as2ConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2ConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionEntry.setDescription('Performance information for one SQL Server name instance.')
as2ConnectionCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionCurrentConnections.setDescription('Current number of client connections established.')
as2ConnectionCurrentUserSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionCurrentUserSessions.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionCurrentUserSessions.setDescription('Current number of user sessions established.')
as2ConnectionFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionFailuresPerSec.setDescription('Rate of connection failures.')
as2ConnectionRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionRequestsPerSec.setDescription('Rate of connection requests. These are arrivals.')
as2ConnectionSuccessesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionSuccessesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionSuccessesPerSec.setDescription('Rate of successful connection completions.')
as2ConnectionTotalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionTotalFailures.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionTotalFailures.setDescription('Total failed connection attempts.')
as2ConnectionTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionTotalRequests.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionTotalRequests.setDescription('Total connection requests. These are arrivals.')
as2ConnectionTotalSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ConnectionTotalSuccesses.setStatus('current')
if mibBuilder.loadTexts: as2ConnectionTotalSuccesses.setDescription('Total successful connections.')
as2DataMiningModelProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 4), )
if mibBuilder.loadTexts: as2DataMiningModelProcessTable.setStatus('current')
if mibBuilder.loadTexts: as2DataMiningModelProcessTable.setDescription('Statistics related to Microsoft Analysis Services Data Mining model processing.')
as2DataMiningModelProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 4, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2DataMiningModelProcessEntry.setStatus('current')
if mibBuilder.loadTexts: as2DataMiningModelProcessEntry.setDescription('Performance information for one SQL Server name instance.')
as2dmmpCasesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmmpCasesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2dmmpCasesPerSec.setDescription('Rate of processing cases.')
as2dmmpCurrentModelsProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmmpCurrentModelsProcessing.setStatus('current')
if mibBuilder.loadTexts: as2dmmpCurrentModelsProcessing.setDescription('Current number of models being processed')
as2DataMiningPredictionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5), )
if mibBuilder.loadTexts: as2DataMiningPredictionTable.setStatus('current')
if mibBuilder.loadTexts: as2DataMiningPredictionTable.setDescription('Statistics related to Microsoft Analysis Services Data Mining prediction.')
as2DataMiningPredictionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2DataMiningPredictionEntry.setStatus('current')
if mibBuilder.loadTexts: as2DataMiningPredictionEntry.setDescription('Performance information for one SQL Server name instance.')
as2dmpConcurrentDMQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpConcurrentDMQueries.setStatus('current')
if mibBuilder.loadTexts: as2dmpConcurrentDMQueries.setDescription('Current number of Data Mining queries being actively worked on.')
as2dmpPredictionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpPredictionsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2dmpPredictionsPerSec.setDescription('Rate of Data Mining prediction queries')
as2dmpQueriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2dmpQueriesPerSec.setDescription('Rate of Data Mining queries')
as2dmpRowsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpRowsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2dmpRowsPerSec.setDescription('Rate of predicting rows')
as2dmpTotalPredictions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpTotalPredictions.setStatus('current')
if mibBuilder.loadTexts: as2dmpTotalPredictions.setDescription('Total Data Mining Prediction Queries received by the server')
as2dmpTotalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpTotalQueries.setStatus('current')
if mibBuilder.loadTexts: as2dmpTotalQueries.setDescription('Total Data Mining Queries received by the server')
as2dmpTotalRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2dmpTotalRows.setStatus('current')
if mibBuilder.loadTexts: as2dmpTotalRows.setDescription('Total Rows returned by Data Mining queries')
as2LocksTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6), )
if mibBuilder.loadTexts: as2LocksTable.setStatus('current')
if mibBuilder.loadTexts: as2LocksTable.setDescription('Statistics related to Microsoft Analysis Services internal server locks.')
as2LocksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2LocksEntry.setStatus('current')
if mibBuilder.loadTexts: as2LocksEntry.setDescription('Performance information for one SQL Server name instance.')
as2LocksCurrentLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksCurrentLatchWaits.setStatus('current')
if mibBuilder.loadTexts: as2LocksCurrentLatchWaits.setDescription('Current number of threads waiting for a latch. These are latch requests that could not be given immediate grants and are in a wait state.')
as2LocksCurrentLockWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksCurrentLockWaits.setStatus('current')
if mibBuilder.loadTexts: as2LocksCurrentLockWaits.setDescription('Current number of clients waiting for a lock.')
as2LocksCurrentLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksCurrentLocks.setStatus('current')
if mibBuilder.loadTexts: as2LocksCurrentLocks.setDescription('Current number of locked objects.')
as2LocksLatchWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksLatchWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2LocksLatchWaitsPerSec.setDescription('Rate of latch requests that could not be granted immediately and had to wait before being granted.')
as2LocksLockDenialsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksLockDenialsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2LocksLockDenialsPerSec.setDescription('Rate of lock denials.')
as2LocksLockGrantsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksLockGrantsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2LocksLockGrantsPerSec.setDescription('Number of lock grants per second.')
as2LocksLockRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksLockRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2LocksLockRequestsPerSec.setDescription('Number of lock requests per second.')
as2LocksLockWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksLockWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2LocksLockWaitsPerSec.setDescription('Number of lock waits per second. These are lock requests that could not be given immediate lock grants and were put in a wait state.')
as2LocksTotalDeadlocksDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksTotalDeadlocksDetected.setStatus('current')
if mibBuilder.loadTexts: as2LocksTotalDeadlocksDetected.setDescription('Total number of deadlocks detected.')
as2LocksUnlockRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2LocksUnlockRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2LocksUnlockRequestsPerSec.setDescription('Number of unlock requests per second.')
as2MDXTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7), )
if mibBuilder.loadTexts: as2MDXTable.setStatus('current')
if mibBuilder.loadTexts: as2MDXTable.setDescription('Statistics related to Microsoft Analysis Services MDX Calculations.')
as2MDXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2MDXEntry.setStatus('current')
if mibBuilder.loadTexts: as2MDXEntry.setDescription('Performance information for one SQL Server name instance.')
as2MDXCurrentNumOfCachedEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXCurrentNumOfCachedEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXCurrentNumOfCachedEvalNode.setDescription('Current (approximate) number of cached evaluation nodes built by MDX execution plans')
as2MDXCurrentNumOfEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXCurrentNumOfEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXCurrentNumOfEvalNode.setDescription('Current (approximate) number of evaluation nodes built by MDX execution plans including active and cached')
as2MDXNumOfStorageEngineEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumOfStorageEngineEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumOfStorageEngineEvalNode.setDescription('Total number of Storage Engine evaluation nodes built by MDX execution plans')
as2MDXNumOfBulkModeEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumOfBulkModeEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumOfBulkModeEvalNode.setDescription('Total number of bulk-mode evaluation nodes built by MDX execution plans')
as2MDXNumOfCachedotherEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumOfCachedotherEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumOfCachedotherEvalNode.setDescription('Total number of cached evaluation nodes built by MDX execution plans that are neither Storage Engine nor Bulk-mode')
as2MDXNumCacheStorEngineEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumCacheStorEngineEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumCacheStorEngineEvalNode.setDescription('Total number of cached Storage Engine evaluation nodes built by MDX execution plans')
as2MDXNumOfCacheBulkModeEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumOfCacheBulkModeEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumOfCacheBulkModeEvalNode.setDescription('Total number of cached bulk-mode evaluation nodes built by MDX execution plans')
as2MDXNumberOfCalculationCovers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumberOfCalculationCovers.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumberOfCalculationCovers.setDescription('Total number of evaluation nodes built by MDX execution plans including active and cached')
as2MDXNumOfCellByCellEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumOfCellByCellEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumOfCellByCellEvalNode.setDescription('Total number of cell-by-cell evaluation nodes built by MDX execution plans')
as2MDXNumCellCellHitCacheEvalNod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumCellCellHitCacheEvalNod.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumCellCellHitCacheEvalNod.setDescription('Total number of cell-by-cell hits in the cache of evaluation nodes')
as2MDXNumCellCellMissCachEvalNod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumCellCellMissCachEvalNod.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumCellCellMissCachEvalNod.setDescription('Total number of cell-by-cell misses in the cache of evaluation nodes')
as2MDXNumEvalNodThatCovASglCell = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumEvalNodThatCovASglCell.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumEvalNodThatCovASglCell.setDescription('Total number of evaluation nodes built by MDX execution plans that covered only one cell')
as2MDXNumEvalNodeCalcSameGranula = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumEvalNodeCalcSameGranula.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumEvalNodeCalcSameGranula.setDescription('Total number of evaluation nodes built by MDX execution plans for which the calculations were at the same granularity as the evaluation node')
as2MDXNumEvictionsEvalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumEvictionsEvalNode.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumEvictionsEvalNode.setDescription('Total number of cache evictions of evaluation nodes due to collisions')
as2MDXNumHashdexHitsCacheEvalNod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumHashdexHitsCacheEvalNod.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumHashdexHitsCacheEvalNod.setDescription('Total number of hits in the cache of evaluation nodes that were satisfied by the hash index')
as2MDXNumSubcubeHitsCacheEvalNod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumSubcubeHitsCacheEvalNod.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumSubcubeHitsCacheEvalNod.setDescription('Total number of subcube hits in the cache of evaluation nodes')
as2MDXNumSubcubeMissCacheEvalNod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXNumSubcubeMissCacheEvalNod.setStatus('current')
if mibBuilder.loadTexts: as2MDXNumSubcubeMissCacheEvalNod.setDescription('Total number of subcube misses in the cache of evaluation nodes')
as2MDXTotalAutoexist = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalAutoexist.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalAutoexist.setDescription('Total number of times autoexist performed')
as2MDXTotalEXISTING = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalEXISTING.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalEXISTING.setDescription('Total number of times EXISTING set operator performed')
as2MDXTotalNONEMPTY = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalNONEMPTY.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalNONEMPTY.setDescription('Total number of times NON EMPTY algorithms is used')
as2MDXTotalNONEMPTYCalculatMemb = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalNONEMPTYCalculatMemb.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalNONEMPTYCalculatMemb.setDescription('Total number of times NON EMPTY algorithm was looping over calculated members')
as2MDXTotalNONEMPTYUnoptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalNONEMPTYUnoptimized.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalNONEMPTYUnoptimized.setDescription('Total number of times unoptimized NON EMPTY algorithm is used')
as2MDXTotalSonarSubcubes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalSonarSubcubes.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalSonarSubcubes.setDescription('Total number of subcubes that query optimizer generated')
as2MDXTotalCellsCalculated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalCellsCalculated.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalCellsCalculated.setDescription('Total number of cell properties calculated')
as2MDXTotalFlatCacheInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalFlatCacheInserts.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalFlatCacheInserts.setDescription('Total number of cell values inserted into flat calculation cache')
as2MDXTotalRecomputes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 7, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2MDXTotalRecomputes.setStatus('current')
if mibBuilder.loadTexts: as2MDXTotalRecomputes.setDescription('Total number of cells recomputed due to error')
as2MemoryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8), )
if mibBuilder.loadTexts: as2MemoryTable.setStatus('current')
if mibBuilder.loadTexts: as2MemoryTable.setDescription('Statistics related to Microsoft Analysis Services internal server memory.')
as2MemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2MemoryEntry.setStatus('current')
if mibBuilder.loadTexts: as2MemoryEntry.setDescription('Performance information for one SQL Server name instance.')
as2memAggCacheKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memAggCacheKB.setStatus('current')
if mibBuilder.loadTexts: as2memAggCacheKB.setDescription('Current memory allocated to filestore (file cache), in KB.')
as2memAggregationMapFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memAggregationMapFiles.setStatus('current')
if mibBuilder.loadTexts: as2memAggregationMapFiles.setDescription('Number of aggregation map files.')
as2memCleanerBalancePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memCleanerBalancePerSec.setStatus('current')
if mibBuilder.loadTexts: as2memCleanerBalancePerSec.setDescription('Rate of balance+shrink operations.')
as2memCleanerCurrentPrice = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memCleanerCurrentPrice.setStatus('current')
if mibBuilder.loadTexts: as2memCleanerCurrentPrice.setDescription('Current price of memory, $/byte/time, normalized to 1000.')
as2memCleanerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memCleanerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: as2memCleanerMemoryKB.setDescription('Amount of memory, in KB, known to the background cleaner. (Cleaner memory shrinkable + Cleaner memory nonshrinkable.)')
as2memCleanerMemNonshrinkableKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memCleanerMemNonshrinkableKB.setStatus('current')
if mibBuilder.loadTexts: as2memCleanerMemNonshrinkableKB.setDescription('Amount of memory, in KB, not subject to purging by the background cleaner.')
as2memCleanerMemoryShrinkableKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memCleanerMemoryShrinkableKB.setStatus('current')
if mibBuilder.loadTexts: as2memCleanerMemoryShrinkableKB.setDescription('Amount of memory, in KB, subject to purging by the background cleaner.')
as2memCleanerMemShrunkKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memCleanerMemShrunkKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memCleanerMemShrunkKBSec.setDescription('Rate of shrinking, in KB/sec.')
as2memDimensionIndexHashFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memDimensionIndexHashFiles.setStatus('current')
if mibBuilder.loadTexts: as2memDimensionIndexHashFiles.setDescription('Number of dimension index (hash) files.')
as2memDimensionPropertyFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memDimensionPropertyFiles.setStatus('current')
if mibBuilder.loadTexts: as2memDimensionPropertyFiles.setDescription('Number of dimension property files.')
as2memDimensionStringFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memDimensionStringFiles.setStatus('current')
if mibBuilder.loadTexts: as2memDimensionStringFiles.setDescription('Number of dimension string files.')
as2memFactAggregationFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFactAggregationFiles.setStatus('current')
if mibBuilder.loadTexts: as2memFactAggregationFiles.setDescription('Number of fact aggregation files.')
as2memFactDataFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFactDataFiles.setStatus('current')
if mibBuilder.loadTexts: as2memFactDataFiles.setDescription('Number of fact data files.')
as2memFactStringFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFactStringFiles.setStatus('current')
if mibBuilder.loadTexts: as2memFactStringFiles.setDescription('Number of fact string files.')
as2memFilestoreClockPgExamineSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreClockPgExamineSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreClockPgExamineSec.setDescription('Rate of background cleaner examining pages for eviction consideration.')
as2memFilestoreClockPgHaveRefSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreClockPgHaveRefSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreClockPgHaveRefSec.setDescription('Rate of background cleaner examining pages that have a current reference count (are currently in use).')
as2memFilestoreClockPgValidSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreClockPgValidSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreClockPgValidSec.setDescription('Rate of background cleaner examining pages that are valid candidates for eviction.')
as2memFilestoreIOErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreIOErrors.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreIOErrors.setDescription('Filestore IO Errors total.')
as2memFilestoreIOErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreIOErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreIOErrorsPerSec.setDescription('Filestore IO Error rate.')
as2memFilestoreKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreKB.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreKB.setDescription('Current memory allocated to filestore (file cache), in KB.')
as2memFilestoreKBReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreKBReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreKBReadsPerSec.setDescription('Filestore KB read/sec.')
as2memFilestoreKBWritePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreKBWritePerSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreKBWritePerSec.setDescription('Filestore KB written/sec. The writes are asynchronous.')
as2memFilestoreMemoryPinnedKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreMemoryPinnedKB.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreMemoryPinnedKB.setDescription('Current filestore memory pinned KB.')
as2memFilestorePageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestorePageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestorePageFaultsPerSec.setDescription('Filestore page fault rate.')
as2memFilestoreReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreReadsPerSec.setDescription('Filestore pages read/sec.')
as2memFilestoreWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memFilestoreWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memFilestoreWritesPerSec.setDescription('Filestore pages written/sec. The writes are asynchronous.')
as2memInMemAggregationMapFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemAggregationMapFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemAggregationMapFileKB.setDescription('Current in-memory aggregation map file KB.')
as2memInMemAggregateMapFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemAggregateMapFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemAggregateMapFileKBSec.setDescription('In-memory aggregation map file KB rate.')
as2memInMemDimenIndexHashFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemDimenIndexHashFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemDimenIndexHashFileKB.setDescription('Current in-memory dimension index (hash) file KB.')
as2memInMemDimenIndHashFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemDimenIndHashFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemDimenIndHashFileKBSec.setDescription('In-memory dimension index (hash) file KB rate.')
as2memInMemDimenProtyFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemDimenProtyFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemDimenProtyFileKB.setDescription('Current in-memory dimension proty file KB.')
as2memInMemDimenProtyFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemDimenProtyFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemDimenProtyFileKBSec.setDescription('In-memory dimension proty file KB rate.')
as2memInMemDimenStringFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemDimenStringFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemDimenStringFileKB.setDescription('Current in-memory dimension string file KB.')
as2memInMemDimenStringFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemDimenStringFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemDimenStringFileKBSec.setDescription('In-memory dimension string file KB rate.')
as2memInMemFactAggregationFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemFactAggregationFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemFactAggregationFileKB.setDescription('Current in-memory fact aggregation file KB.')
as2memInMemFactAggregatFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemFactAggregatFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemFactAggregatFileKBSec.setDescription('In-memory fact aggregation file KB rate.')
as2memInMemoryFactDataFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemoryFactDataFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemoryFactDataFileKB.setDescription('Current in-memory fact data file KB.')
as2memInMemFactDataFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemFactDataFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemFactDataFileKBSec.setDescription('In-memory fact data file KB rate.')
as2memInMemoryFactStringFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemoryFactStringFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemoryFactStringFileKB.setDescription('Current in-memory fact string file KB.')
as2memInMemFactStringFileKBSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemFactStringFileKBSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemFactStringFileKBSec.setDescription('In-memory fact string file KB rate.')
as2memInMemoryMapFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemoryMapFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemoryMapFileKB.setDescription('Current in-memory map file KB.')
as2memInMemoryMapFileKBPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemoryMapFileKBPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemoryMapFileKBPerSec.setDescription('In-memory map file KB rate.')
as2memInMemoryOtherFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemoryOtherFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memInMemoryOtherFileKB.setDescription('Current in-memory other file KB.')
as2memInMemoryOtherFileKBPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memInMemoryOtherFileKBPerSec.setStatus('current')
if mibBuilder.loadTexts: as2memInMemoryOtherFileKBPerSec.setDescription('In-memory other file KB rate.')
as2memMapFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memMapFiles.setStatus('current')
if mibBuilder.loadTexts: as2memMapFiles.setDescription('Number of map files.')
as2memMemoryLimitHighKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memMemoryLimitHighKB.setStatus('current')
if mibBuilder.loadTexts: as2memMemoryLimitHighKB.setDescription('High memory limit, from configuration file.')
as2memMemoryLimitLowKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memMemoryLimitLowKB.setStatus('current')
if mibBuilder.loadTexts: as2memMemoryLimitLowKB.setDescription('Low memory limit, from configuration file.')
as2memMemoryUsageKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memMemoryUsageKB.setStatus('current')
if mibBuilder.loadTexts: as2memMemoryUsageKB.setDescription('Memory usage of the server process. Same as perfmon counter for Process\\PrivateBytes.')
as2memOtherFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memOtherFiles.setStatus('current')
if mibBuilder.loadTexts: as2memOtherFiles.setDescription('Number of other files.')
as2memPagePool1AllocKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPagePool1AllocKB.setStatus('current')
if mibBuilder.loadTexts: as2memPagePool1AllocKB.setDescription('Memory borrowed from 64KB page pool, in KB. This memory is given away to other parts of the server.')
as2memPagePool1LookasideKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPagePool1LookasideKB.setStatus('current')
if mibBuilder.loadTexts: as2memPagePool1LookasideKB.setDescription('Current memory in 8KB lookaside list, in KB. (Memory pages ready to be used.)')
as2memPagePool64AllocKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPagePool64AllocKB.setStatus('current')
if mibBuilder.loadTexts: as2memPagePool64AllocKB.setDescription('Memory borrowed from system, in KB. This memory is given away to other parts of the server.')
as2memPagePool64LookasideKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPagePool64LookasideKB.setStatus('current')
if mibBuilder.loadTexts: as2memPagePool64LookasideKB.setDescription('Current memory in 64KB lookaside list, in KB. (Memory pages ready to be used.)')
as2memPagePool8AllocKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPagePool8AllocKB.setStatus('current')
if mibBuilder.loadTexts: as2memPagePool8AllocKB.setDescription('Memory borrowed from 64KB page pool, in KB. This memory is given away to other parts of the server.')
as2memPagePool8LookasideKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPagePool8LookasideKB.setStatus('current')
if mibBuilder.loadTexts: as2memPagePool8LookasideKB.setDescription('Current memory in 8KB lookaside list, in KB. (Memory pages ready to be used.)')
as2memPotenMemAggregatMapFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemAggregatMapFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemAggregatMapFileKB.setDescription('Potential in-memory aggregation map file KB.')
as2memPotenMemDimenIndHashFilKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemDimenIndHashFilKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemDimenIndHashFilKB.setDescription('Potential in-memory dimension index (hash) file KB.')
as2memPotenMemDimenProFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemDimenProFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemDimenProFileKB.setDescription('Potential in-memory dimension proty file KB.')
as2memPotenMemDimenStringFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemDimenStringFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemDimenStringFileKB.setDescription('Potential in-memory dimension string file KB.')
as2memPotenMemFactAggregFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemFactAggregFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemFactAggregFileKB.setDescription('Potential in-memory fact aggregation file KB.')
as2memPotenMemFactDataFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemFactDataFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemFactDataFileKB.setDescription('Potential in-memory fact data file KB.')
as2memPotenMemFactStringFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemFactStringFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemFactStringFileKB.setDescription('Potential in-memory fact string file KB.')
as2memPotentialInMemoryMapFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotentialInMemoryMapFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotentialInMemoryMapFileKB.setDescription('Potential in-memory map file KB.')
as2memPotenMemOtherFileKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memPotenMemOtherFileKB.setStatus('current')
if mibBuilder.loadTexts: as2memPotenMemOtherFileKB.setDescription('Potential in-memory other file KB.')
as2memQuotaBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memQuotaBlocked.setStatus('current')
if mibBuilder.loadTexts: as2memQuotaBlocked.setDescription('Current number of quota requests that are blocked until other memory quotas are freed.')
as2memQuotaKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 8, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2memQuotaKB.setStatus('current')
if mibBuilder.loadTexts: as2memQuotaKB.setDescription('Current memory quota, in KB. Memory quota is also known as a memory grant or memory reservation.')
as2ProactiveCachingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 9), )
if mibBuilder.loadTexts: as2ProactiveCachingTable.setStatus('current')
if mibBuilder.loadTexts: as2ProactiveCachingTable.setDescription('Statistics related to Microsoft Analysis Services Proactive Caching.')
as2ProactiveCachingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 9, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2ProactiveCachingEntry.setStatus('current')
if mibBuilder.loadTexts: as2ProactiveCachingEntry.setDescription('Performance information for one SQL Server name instance.')
as2pcNotificationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2pcNotificationsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2pcNotificationsPerSec.setDescription('Rate of notifications from relational database.')
as2pcProactiveCachingBeginPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2pcProactiveCachingBeginPerSec.setStatus('current')
if mibBuilder.loadTexts: as2pcProactiveCachingBeginPerSec.setDescription('Rate of proactive caching begin.')
as2pcProactiveCachCompSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2pcProactiveCachCompSec.setStatus('current')
if mibBuilder.loadTexts: as2pcProactiveCachCompSec.setDescription('Rate of proactive caching completion.')
as2pcProcessCancellationsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2pcProcessCancellationsSec.setStatus('current')
if mibBuilder.loadTexts: as2pcProcessCancellationsSec.setDescription('Rate of processing cancellations caused by notifications.')
as2ProcAggregationsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10), )
if mibBuilder.loadTexts: as2ProcAggregationsTable.setStatus('current')
if mibBuilder.loadTexts: as2ProcAggregationsTable.setDescription('Statistics related to Microsoft Analysis Services processing of aggregations in MOLAP data files.')
as2ProcAggregationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2ProcAggregationsEntry.setStatus('current')
if mibBuilder.loadTexts: as2ProcAggregationsEntry.setDescription('Performance information for one SQL Server name instance.')
as2paCurrentPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paCurrentPartitions.setStatus('current')
if mibBuilder.loadTexts: as2paCurrentPartitions.setDescription('Current number of partitions being processed.')
as2paMemorySizeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paMemorySizeBytes.setStatus('current')
if mibBuilder.loadTexts: as2paMemorySizeBytes.setDescription('Size of current aggregations in memory. This count is an estimate.')
as2paMemorySizeRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paMemorySizeRows.setStatus('current')
if mibBuilder.loadTexts: as2paMemorySizeRows.setDescription('Size of current aggregations in memory. This count is an estimate.')
as2paRowsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paRowsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: as2paRowsCreatedPerSec.setDescription('Rate of aggregation rows created.')
as2paRowsMergedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paRowsMergedPerSec.setStatus('current')
if mibBuilder.loadTexts: as2paRowsMergedPerSec.setDescription('Rate of rows merged or inserted into an aggregation.')
as2paTempFileBytesWrittenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paTempFileBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: as2paTempFileBytesWrittenPerSec.setDescription('Rate of writing bytes to a temporary file. Temporary files are written when aggregations exceed memory limits.')
as2paTempFileRowsWrittenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paTempFileRowsWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: as2paTempFileRowsWrittenPerSec.setDescription('Rate of writing rows to a temporary file. Temporary files are written when aggregations exceed memory limits.')
as2paTotalPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2paTotalPartitions.setStatus('current')
if mibBuilder.loadTexts: as2paTotalPartitions.setDescription('Total number of partitions processed (successfully or otherwise).')
as2ProcIndexesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 11), )
if mibBuilder.loadTexts: as2ProcIndexesTable.setStatus('current')
if mibBuilder.loadTexts: as2ProcIndexesTable.setDescription('Statistics related to Microsoft Analysis Services processing of indexes for MOLAP data files.')
as2ProcIndexesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 11, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2ProcIndexesEntry.setStatus('current')
if mibBuilder.loadTexts: as2ProcIndexesEntry.setDescription('Performance information for one SQL Server name instance.')
as2ProcIndexesCurrentPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 11, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcIndexesCurrentPartitions.setStatus('current')
if mibBuilder.loadTexts: as2ProcIndexesCurrentPartitions.setDescription('Current number of partitions being processed.')
as2ProcIndexesRowsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 11, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcIndexesRowsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ProcIndexesRowsPerSec.setDescription('Rate of rows from MOLAP files used to create indexes.')
as2ProcIndexesTotalPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcIndexesTotalPartitions.setStatus('current')
if mibBuilder.loadTexts: as2ProcIndexesTotalPartitions.setDescription('Total number of partitions processed (successfully or otherwise).')
as2ProcIndexesTotalRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcIndexesTotalRows.setStatus('current')
if mibBuilder.loadTexts: as2ProcIndexesTotalRows.setDescription('Total rows from MOLAP files used to create indexes.')
as2ProcessingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12), )
if mibBuilder.loadTexts: as2ProcessingTable.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingTable.setDescription('Statistics related to Microsoft Analysis Services processing of data.')
as2ProcessingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2ProcessingEntry.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingEntry.setDescription('Performance information for one SQL Server name instance.')
as2ProcessingRowsConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcessingRowsConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingRowsConvertedPerSec.setDescription('Rate of rows converted during processing.')
as2ProcessingRowsReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcessingRowsReadPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingRowsReadPerSec.setDescription('Rate of rows read from all relational databases.')
as2ProcessingRowsWrittenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcessingRowsWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingRowsWrittenPerSec.setDescription('Rate of rows written during processing.')
as2ProcessingTotalRowsConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcessingTotalRowsConverted.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingTotalRowsConverted.setDescription('Count of rows converted during processing.')
as2ProcessingTotalRowsRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcessingTotalRowsRead.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingTotalRowsRead.setDescription('Count of rows read from all relational databases.')
as2ProcessingTotalRowsWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ProcessingTotalRowsWritten.setStatus('current')
if mibBuilder.loadTexts: as2ProcessingTotalRowsWritten.setDescription('Count of rows written during processing.')
as2StorageEngineQueryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13), )
if mibBuilder.loadTexts: as2StorageEngineQueryTable.setStatus('current')
if mibBuilder.loadTexts: as2StorageEngineQueryTable.setDescription('Statistics related to Microsoft Analysis Services storage engine queries.')
as2StorageEngineQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2StorageEngineQueryEntry.setStatus('current')
if mibBuilder.loadTexts: as2StorageEngineQueryEntry.setDescription('Performance information for one SQL Server name instance.')
as2seqAggregationHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqAggregationHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqAggregationHitsPerSec.setDescription('Rate of aggregation hits.')
as2seqAggregationLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqAggregationLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqAggregationLookupsPerSec.setDescription('Rate of aggregation lookups.')
as2seqAvgTimePerQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqAvgTimePerQuery.setStatus('current')
if mibBuilder.loadTexts: as2seqAvgTimePerQuery.setDescription('Average time per query, in milliseconds. Response time based on queries answered since the last counter measurement.')
as2seqBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqBytesSentPerSec.setDescription('Rate of bytes sent by server to clients, in response to queries.')
as2seqCalculationCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqCalculationCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqCalculationCacheHitsPerSec.setDescription('Rate of calculation cache hits. This includes global, session, and query scope calculation caches.')
as2seqCalculationCacheLookupsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqCalculationCacheLookupsSec.setStatus('current')
if mibBuilder.loadTexts: as2seqCalculationCacheLookupsSec.setDescription('Rate of calculation cache lookups. This includes global, session, and query scope calculation caches.')
as2seqCurrentDimensionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqCurrentDimensionQueries.setStatus('current')
if mibBuilder.loadTexts: as2seqCurrentDimensionQueries.setDescription('Current number of dimension queries being actively worked on.')
as2seqCurrentMeasureGroupQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqCurrentMeasureGroupQueries.setStatus('current')
if mibBuilder.loadTexts: as2seqCurrentMeasureGroupQueries.setDescription('Current number of measure group queries being actively worked on.')
as2seqDataBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqDataBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqDataBytesPerSec.setDescription('Bytes read from the Data file.')
as2seqDataReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqDataReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqDataReadsPerSec.setDescription('Number of logical read operations using the Data file.')
as2seqDimensionCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqDimensionCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqDimensionCacheHitsPerSec.setDescription('Rate of dimension cache hits.')
as2seqDimensionCacheLookupSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqDimensionCacheLookupSec.setStatus('current')
if mibBuilder.loadTexts: as2seqDimensionCacheLookupSec.setDescription('Rate of dimension cache lookups.')
as2seqDimensionQueriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqDimensionQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqDimensionQueriesPerSec.setDescription('Rate of dimension queries')
as2seqFlatCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqFlatCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqFlatCacheHitsPerSec.setDescription('Rate of flat cache hits. This includes global, session, and query scope flat caches.')
as2seqFlatCacheLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqFlatCacheLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqFlatCacheLookupsPerSec.setDescription('Rate of flat cache lookups. This includes global, session, and query scope flat caches.')
as2seqMapBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqMapBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqMapBytesPerSec.setDescription('Bytes read from the Map file.')
as2seqMapReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqMapReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqMapReadsPerSec.setDescription('Number of logical read operations using the Map file.')
as2seqMeasureGroupCacheHitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqMeasureGroupCacheHitsSec.setStatus('current')
if mibBuilder.loadTexts: as2seqMeasureGroupCacheHitsSec.setDescription('Rate of measure group cache hits.')
as2seqMeasureGroupCacheLookupSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqMeasureGroupCacheLookupSec.setStatus('current')
if mibBuilder.loadTexts: as2seqMeasureGroupCacheLookupSec.setDescription('Rate of measure group cache lookups.')
as2seqMeasureGroupQueriesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqMeasureGroupQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqMeasureGroupQueriesPerSec.setDescription('Rate of measure group queries')
as2seqNetworkRoundTripsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqNetworkRoundTripsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqNetworkRoundTripsPerSec.setDescription('Rate of network round trips. This includes all client/server communication.')
as2seqPersistedCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqPersistedCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqPersistedCacheHitsPerSec.setDescription('Rate of persisted cache hits. Persisted caches are created by the MDX script CACHE statement.')
as2seqsistedCacheLookupsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqsistedCacheLookupsSec.setStatus('current')
if mibBuilder.loadTexts: as2seqsistedCacheLookupsSec.setDescription('Rate of sisted cache lookups. sisted caches are created by the MDX script CACHE statement.')
as2seqQueriesAnsweredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqQueriesAnsweredPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqQueriesAnsweredPerSec.setDescription('Rate of queries answered.')
as2seqQueryFromCacheDirectSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqQueryFromCacheDirectSec.setStatus('current')
if mibBuilder.loadTexts: as2seqQueryFromCacheDirectSec.setDescription('Rate of queries answered from cache directly.')
as2seqQueryFromCacheFilteredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqQueryFromCacheFilteredSec.setStatus('current')
if mibBuilder.loadTexts: as2seqQueryFromCacheFilteredSec.setDescription('Rate of queries answered by filtering existing cache entry.')
as2seqQueriesFromFilePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqQueriesFromFilePerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqQueriesFromFilePerSec.setDescription('Rate of queries answered from files.')
as2seqRowsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqRowsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: as2seqRowsSentPerSec.setDescription('Rate of rows sent by server to clients.')
as2seqTotalBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalBytesSent.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalBytesSent.setDescription('Total bytes sent by server to clients, in response to queries.')
as2seqTotalDimensionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalDimensionQueries.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalDimensionQueries.setDescription('Total number of dimension queries.')
as2seqTotalMeasureGroupQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalMeasureGroupQueries.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalMeasureGroupQueries.setDescription('Total number of queries to measure group.')
as2seqTotalNetworkRoundTrips = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalNetworkRoundTrips.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalNetworkRoundTrips.setDescription('Total network round trips. This includes all client/server communication.')
as2seqTotalQueriesAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalQueriesAnswered.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalQueriesAnswered.setDescription('Total number of queries answered.')
as2seqTotalQueryFromCacheDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalQueryFromCacheDirect.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalQueryFromCacheDirect.setDescription('Total number of queries derived directly from cache. Note that this is partition.')
as2seqTotalQueryFromCachFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalQueryFromCachFiltered.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalQueryFromCachFiltered.setDescription('Total queries answered by filtering existing cache entries.')
as2seqTotalQueriesFromFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalQueriesFromFile.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalQueriesFromFile.setDescription('Total number of queries answered from files.')
as2seqTotalRowsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 13, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2seqTotalRowsSent.setStatus('current')
if mibBuilder.loadTexts: as2seqTotalRowsSent.setDescription('Total rows sent by server to clients.')
as2ThreadsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14), )
if mibBuilder.loadTexts: as2ThreadsTable.setStatus('current')
if mibBuilder.loadTexts: as2ThreadsTable.setDescription('Statistics related to Microsoft Analysis Services threads.')
as2ThreadsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "as2NameIndex"))
if mibBuilder.loadTexts: as2ThreadsEntry.setStatus('current')
if mibBuilder.loadTexts: as2ThreadsEntry.setDescription('Performance information for one SQL Server name instance.')
as2ThdsLongParsingBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsLongParsingBusyThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsLongParsingBusyThreads.setDescription('Number of busy threads in the long parsing thread pool.')
as2ThdsLongParsingIdleThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsLongParsingIdleThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsLongParsingIdleThreads.setDescription('Number of idle threads in the long parsing thread pool.')
as2ThdsLongParsingJobQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsLongParsingJobQueueLength.setStatus('current')
if mibBuilder.loadTexts: as2ThdsLongParsingJobQueueLength.setDescription('Number of jobs in the queue of the long parsing thread pool.')
as2ThdsLongParsingJobRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsLongParsingJobRate.setStatus('current')
if mibBuilder.loadTexts: as2ThdsLongParsingJobRate.setDescription('Rate of jobs through the long parsing thread pool.')
as2ThdsProcessingPoolBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsProcessingPoolBusyThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsProcessingPoolBusyThreads.setDescription('Number of busy threads in the processing thread pool.')
as2ThdsProcessingPoolIdleThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsProcessingPoolIdleThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsProcessingPoolIdleThreads.setDescription('Number of idle threads in the processing thread pool.')
as2ThdsProcessPoolJobQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsProcessPoolJobQueueLength.setStatus('current')
if mibBuilder.loadTexts: as2ThdsProcessPoolJobQueueLength.setDescription('Number of jobs in the queue of the processing thread pool.')
as2ThdsProcessingPoolJobRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsProcessingPoolJobRate.setStatus('current')
if mibBuilder.loadTexts: as2ThdsProcessingPoolJobRate.setDescription('Rate of jobs through the processing thread pool.')
as2ThdsQueryPoolBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsQueryPoolBusyThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsQueryPoolBusyThreads.setDescription('Number of busy threads in the query thread pool.')
as2ThdsQueryPoolIdleThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsQueryPoolIdleThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsQueryPoolIdleThreads.setDescription('Number of idle threads in the query thread pool.')
as2ThdsQueryPoolJobQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsQueryPoolJobQueueLength.setStatus('current')
if mibBuilder.loadTexts: as2ThdsQueryPoolJobQueueLength.setDescription('Number of jobs in the queue of the query thread pool.')
as2ThdsQueryPoolJobRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsQueryPoolJobRate.setStatus('current')
if mibBuilder.loadTexts: as2ThdsQueryPoolJobRate.setDescription('Rate of jobs through the query thread pool.')
as2ThdsShortParsingBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsShortParsingBusyThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsShortParsingBusyThreads.setDescription('Number of busy threads in the short parsing thread pool.')
as2ThdsShortParsingIdleThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsShortParsingIdleThreads.setStatus('current')
if mibBuilder.loadTexts: as2ThdsShortParsingIdleThreads.setDescription('Number of idle threads in the short parsing thread pool.')
as2ThdsShortParsingJobQueueLeng = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsShortParsingJobQueueLeng.setStatus('current')
if mibBuilder.loadTexts: as2ThdsShortParsingJobQueueLeng.setDescription('Number of jobs in the queue of the short parsing thread pool.')
as2ThdsShortParsingJobRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 1, 14, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: as2ThdsShortParsingJobRate.setStatus('current')
if mibBuilder.loadTexts: as2ThdsShortParsingJobRate.setDescription('Rate of jobs through the short parsing thread pool.')
sqlServerEngineV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2))
ss2NameTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 1), )
if mibBuilder.loadTexts: ss2NameTable.setStatus('current')
if mibBuilder.loadTexts: ss2NameTable.setDescription('This table contains the list of SQL Server instance names installed. The ss2NameIndex is used to refer to all other SQL Server SNMP entries.')
ss2NameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 1, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2NameEntry.setStatus('current')
if mibBuilder.loadTexts: ss2NameEntry.setDescription('Performance information for one SQL Server name instance.')
ss2NameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2NameIndex.setStatus('current')
if mibBuilder.loadTexts: ss2NameIndex.setDescription('The index number associated with the instance name')
ss2NameInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 1, 1, 2), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2NameInstance.setStatus('current')
if mibBuilder.loadTexts: ss2NameInstance.setDescription('The name of the SQL Server installed instance.')
ss2AccessMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2), )
if mibBuilder.loadTexts: ss2AccessMethodsTable.setStatus('current')
if mibBuilder.loadTexts: ss2AccessMethodsTable.setDescription('The Access Methods object in SQL Server provides counters to monitor how the logical data within the database is accessed. Physical access to the database pages on disk is monitored using the Buffer Manager counters. Monitoring the methods used to access data stored in the database can help you to determine whether query performance can be improved by adding or modifying indexes, adding or moving partitions, adding files or file groups, defragmenting indexes, or by rewriting queries. The Access Methods counters can also be used to monitor the amount of data, indexes, and free space within the database, thereby indicating data volume and fragmentation for each server instance. Excessive index fragmentation can impair performance.')
ss2AccessMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2AccessMethodsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2AccessMethodsEntry.setDescription('Performance information for one SQL Server AccessMethods instance.')
ss2amAUCleanupBatchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amAUCleanupBatchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amAUCleanupBatchesPerSec.setDescription('The number of batches that completed successfully per second by the background task that cleans up deferred dropped allocation units.')
ss2amAUCleanupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amAUCleanupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amAUCleanupsPerSec.setDescription('The number of allocation units per second that were successfully dropped by the background task that cleans up deferred dropped allocation units. Each allocation unit drop requires multiple batches.')
ss2amByReferenceLobCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amByReferenceLobCreateCount.setStatus('current')
if mibBuilder.loadTexts: ss2amByReferenceLobCreateCount.setDescription('Count of large object (LOB) values that were passed by reference. By-reference lobs are used in certain bulk operations to avoid the cost of passing them by value.')
ss2amByReferenceLobUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amByReferenceLobUseCount.setStatus('current')
if mibBuilder.loadTexts: ss2amByReferenceLobUseCount.setDescription('Count of by-reference lob values that were used. By-reference lobs are used in certain bulk operations to avoid the cost of passing them by value.')
ss2amCountLobReadahead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amCountLobReadahead.setStatus('current')
if mibBuilder.loadTexts: ss2amCountLobReadahead.setDescription('Count of lob pages on which readahead was issued.')
ss2amCountPullInRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amCountPullInRow.setStatus('current')
if mibBuilder.loadTexts: ss2amCountPullInRow.setDescription('Count of values that were pulled in-row from off-row.')
ss2amCountPushOffRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amCountPushOffRow.setStatus('current')
if mibBuilder.loadTexts: ss2amCountPushOffRow.setDescription('Count of values that were pushed from in-row to off-row.')
ss2amDeferredDroppedRowsets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amDeferredDroppedRowsets.setStatus('current')
if mibBuilder.loadTexts: ss2amDeferredDroppedRowsets.setDescription('The number of rowsets created as a result of aborted online index build operations that are waiting to be dropped by the background task that cleans up deferred dropped rowsets.')
ss2amDeferredDroppedAUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amDeferredDroppedAUs.setStatus('current')
if mibBuilder.loadTexts: ss2amDeferredDroppedAUs.setDescription('The number of allocation units waiting to be dropped by the background task that cleans up deferred dropped allocation units.')
ss2amDroppedRowsetCleanupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amDroppedRowsetCleanupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amDroppedRowsetCleanupsPerSec.setDescription('The number of rowsets per second created as a result of aborted online index build operations that were successfully dropped by the background task that cleans up deferred dropped rowsets.')
ss2amDroppedRowsetsSkippedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amDroppedRowsetsSkippedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amDroppedRowsetsSkippedPerSec.setDescription('The number of rowsets per second created as a result of aborted online index build operations that were skipped by the background task that cleans up deferred dropped rowsets created.')
ss2amExtentDeallocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amExtentDeallocationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amExtentDeallocationsPerSec.setDescription('Number of extents deallocated per second in all databases in this SQL Server instance.')
ss2amExtentsAllocatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amExtentsAllocatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amExtentsAllocatedPerSec.setDescription('Number of extents allocated per second in all databases in this SQL Server instance.')
ss2amFailedAUCleanupBatchesSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amFailedAUCleanupBatchesSec.setStatus('current')
if mibBuilder.loadTexts: ss2amFailedAUCleanupBatchesSec.setDescription('The number of batches second that failed and required retry, by the background task that cleans up deferred dropped allocation units. Failure could be due to lack of memory or disk space, hardware failure and other reasons.')
ss2amFailedLeafPageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amFailedLeafPageCookie.setStatus('current')
if mibBuilder.loadTexts: ss2amFailedLeafPageCookie.setDescription('The number of times that a leaf page cookie could not be used during an index search since changes happened on the leaf page. The cookie is used to speed up index search.')
ss2amFailedTreePageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amFailedTreePageCookie.setStatus('current')
if mibBuilder.loadTexts: ss2amFailedTreePageCookie.setDescription('The number of times that a tree page cookie could not be used during an index search since changes happened on the parent pages of those tree pages. The cookie is used to speed up index search.')
ss2amForwardedRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amForwardedRecordsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amForwardedRecordsPerSec.setDescription('Number of records fetched through forwarded record pointers.')
ss2amFreeSpacePageFetchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amFreeSpacePageFetchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amFreeSpacePageFetchesPerSec.setDescription('Number of pages fetched per second by free space scans. These scans search for free space within pages already allocated to an allocation unit, to satisfy requests to insert or modify record fragments.')
ss2amFreeSpaceScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amFreeSpaceScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amFreeSpaceScansPerSec.setDescription('Number of scans per second that were initiated to search for free space within pages already allocated to an allocation unit to insert or modify record fragments. Each scan may find multiple pages.')
ss2amFullScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amFullScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amFullScansPerSec.setDescription('Number of unrestricted full scans. These can either be base table or full index scans.')
ss2amIndexSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amIndexSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amIndexSearchesPerSec.setDescription('Number of index searches. Index searches are used to start range scans, single index record fetches, and to reposition within an index.')
ss2amLobHandleCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amLobHandleCreateCount.setStatus('current')
if mibBuilder.loadTexts: ss2amLobHandleCreateCount.setDescription('Count of temporary LOBs created.')
ss2amLobHandleDestroyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amLobHandleDestroyCount.setStatus('current')
if mibBuilder.loadTexts: ss2amLobHandleDestroyCount.setDescription('Count of temporary LOBs destroyed.')
ss2amLobSSProviderCreateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amLobSSProviderCreateCount.setStatus('current')
if mibBuilder.loadTexts: ss2amLobSSProviderCreateCount.setDescription('Count of LOB Storage Service Providers created. One worktable created per LOB Storage Service Provider.')
ss2amLobSSProviderDestroyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amLobSSProviderDestroyCount.setStatus('current')
if mibBuilder.loadTexts: ss2amLobSSProviderDestroyCount.setDescription('Count of LOB Storage Service Providers destroyed.')
ss2amLobSSProvideTruncationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amLobSSProvideTruncationCount.setStatus('current')
if mibBuilder.loadTexts: ss2amLobSSProvideTruncationCount.setDescription('Count of LOB Storage Service Providers truncated.')
ss2amMixedPageAllocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amMixedPageAllocationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amMixedPageAllocationsPerSec.setDescription('Number of pages allocated per second from mixed extents. These could be used for storing the IAM pages and the first eight pages that are allocated to an allocation unit.')
ss2amPageDeallocationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amPageDeallocationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amPageDeallocationsPerSec.setDescription('Number of pages deallocated per second in all databases in this SQL Server instance. These include pages from mixed extents and uniform extents.')
ss2amPageSplitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amPageSplitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amPageSplitsPerSec.setDescription('Number of page splits per second that occur as a result of overflowing index pages.')
ss2amPageCompressionAttemptsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amPageCompressionAttemptsSec.setStatus('current')
if mibBuilder.loadTexts: ss2amPageCompressionAttemptsSec.setDescription('Number of attempts to compress a database page second')
ss2amPagesAllocatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amPagesAllocatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amPagesAllocatedPerSec.setDescription('Number of pages allocated per second in all databases in this SQL Server instance. These include pages allocations from both mixed extents and uniform extents.')
ss2amPagesCompressedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amPagesCompressedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amPagesCompressedPerSec.setDescription('Number of times a database page was compressed')
ss2amProbeScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amProbeScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amProbeScansPerSec.setDescription('Number of probe scans per second that are used to find at most one single qualified row in an index or base table directly.')
ss2amRangeScansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amRangeScansPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amRangeScansPerSec.setDescription('Number of qualified range scans through indexes per second.')
ss2amScanPointRevalidationsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amScanPointRevalidationsSec.setStatus('current')
if mibBuilder.loadTexts: ss2amScanPointRevalidationsSec.setDescription('Number of times the scan point had to be revalidated to continue the scan.')
ss2amSkippedGhostedRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amSkippedGhostedRecordsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amSkippedGhostedRecordsPerSec.setDescription('Number of ghosted records per second skipped during scans.')
ss2amTableLockEscalationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amTableLockEscalationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amTableLockEscalationsPerSec.setDescription('The number of times locks on a table were escalated.')
ss2amUsedLeafPageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amUsedLeafPageCookie.setStatus('current')
if mibBuilder.loadTexts: ss2amUsedLeafPageCookie.setDescription('Number of times a leaf page cookie was used successfully during an index search since no change happened on the leaf page. The cookie is used to speed up index search.')
ss2amUsedTreePageCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amUsedTreePageCookie.setStatus('current')
if mibBuilder.loadTexts: ss2amUsedTreePageCookie.setDescription('Number of times a tree page cookie was used successfully during an index search since no change happened on the parent page of the tree page. The cookie is used to speed up index search.')
ss2amWorkfilesCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amWorkfilesCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amWorkfilesCreatedPerSec.setDescription('Number of work files created per second. For example, work files could be used to store temporary results for hash joins and hash aggregates.')
ss2amWorktablesCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amWorktablesCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2amWorktablesCreatedPerSec.setDescription('Number of work tables created per second. For example, work tables could be used to store temporary results for query spool, LOB variables, XML variables, and cursors.')
ss2amWorktablesFromCacheRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2amWorktablesFromCacheRatio.setStatus('current')
if mibBuilder.loadTexts: ss2amWorktablesFromCacheRatio.setDescription('Percentage of work tables created where the initial two pages of the work table were not allocated but were immediately available from the work table cache.')
ss2BackupDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 3), )
if mibBuilder.loadTexts: ss2BackupDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ss2BackupDeviceTable.setDescription('The Backup Device object provides counters to monitor Microsoft SQL Server backup devices used for backup and restore operations. Monitor backup devices when you want to determine the throughput or the progress and performance of your backup and restore operations on a per device basis. To monitor the throughput of the entire database backup or restore operation, use the Backup/Restore Throughput/sec counter of the SQL Server Databases object.')
ss2BackupDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 3, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2BackupDeviceInstance"))
if mibBuilder.loadTexts: ss2BackupDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BackupDeviceEntry.setDescription("Performance information for one particular instance of 'Backup Device' object.")
ss2BackupDeviceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2BackupDeviceInstance.setStatus('current')
if mibBuilder.loadTexts: ss2BackupDeviceInstance.setDescription('Instance name.')
ss2BackupDeviceDeviceputBytesSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2BackupDeviceDeviceputBytesSec.setStatus('current')
if mibBuilder.loadTexts: ss2BackupDeviceDeviceputBytesSec.setDescription('Read/write throughput for a backup device.')
ss2BrokerActivationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4), )
if mibBuilder.loadTexts: ss2BrokerActivationTable.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerActivationTable.setDescription('The BrokerActivation performance object contains performance counters that report information on stored procedure activation. ')
ss2BrokerActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2baInstance"))
if mibBuilder.loadTexts: ss2BrokerActivationEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerActivationEntry.setDescription("Performance information for one particular instance of 'Broker Activation' object.")
ss2baInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baInstance.setStatus('current')
if mibBuilder.loadTexts: ss2baInstance.setDescription('Instance name.')
ss2baStoredProceduresInvokedSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baStoredProceduresInvokedSec.setStatus('current')
if mibBuilder.loadTexts: ss2baStoredProceduresInvokedSec.setDescription('The number of stored procedures that are being invoked second.')
ss2baTaskLimitReached = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baTaskLimitReached.setStatus('current')
if mibBuilder.loadTexts: ss2baTaskLimitReached.setDescription('The total number of times the activated task limit on a queue has been reached.')
ss2baTaskLimitReachedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baTaskLimitReachedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2baTaskLimitReachedPerSec.setDescription('The number of times the activated task limit on a queue has been reached per second.')
ss2baTasksAbortedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baTasksAbortedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2baTasksAbortedPerSec.setDescription('The number of activated tasks that are being aborted per second.')
ss2baTasksRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baTasksRunning.setStatus('current')
if mibBuilder.loadTexts: ss2baTasksRunning.setDescription('The total number of activated tasks that are currently running.')
ss2baTasksStartedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2baTasksStartedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2baTasksStartedPerSec.setDescription('The number of activated tasks that are being started per second.')
ss2BrokerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5), )
if mibBuilder.loadTexts: ss2BrokerStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerStatisticsTable.setDescription('The Broker Statistics performance object contains performance counters that report general Service Broker information for an instance of the Database Engine.')
ss2BrokerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2BrokerStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerStatisticsEntry.setDescription('Performance information for one SQL Server BrokerStatistics instance.')
ss2bsActivationErrorsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsActivationErrorsTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsActivationErrorsTotal.setDescription('The number of times an activation stored procedure exited with an error.')
ss2bsBrokerTransactionRollbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsBrokerTransactionRollbacks.setStatus('current')
if mibBuilder.loadTexts: ss2bsBrokerTransactionRollbacks.setDescription('The number of Service Broker related transactions that have rolled back.')
ss2bsCorruptedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsCorruptedMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsCorruptedMessagesTotal.setDescription('The number of corrupted messages that were received in the instance.')
ss2bsDequeuedTransmissionQMsgSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsDequeuedTransmissionQMsgSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsDequeuedTransmissionQMsgSec.setDescription('The number of messages that have been removed from the broker transmission queue second.')
ss2bsDialogTimerEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsDialogTimerEventCount.setStatus('current')
if mibBuilder.loadTexts: ss2bsDialogTimerEventCount.setDescription('The number of dialog endpoint related timer events in the Broker.')
ss2bsDroppedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsDroppedMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsDroppedMessagesTotal.setDescription('The number of messages that were received in the instance but could not be delivered.')
ss2bsEnqueuedLocalMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedLocalMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedLocalMessagesTotal.setDescription('Total number of messages from local endpoints that are successfully delivered directly into local target queues.')
ss2bsEnqueuedLocalMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedLocalMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedLocalMessagesPerSec.setDescription('The number of messages from local endpoints that are successfully delivered directly into local target queues per second.')
ss2bsEnqueuedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedMessagesTotal.setDescription('Total number of messages from local endpoints and the transport that are successfully delivered into local target queues.')
ss2bsEnqueuedMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedMessagesPerSec.setDescription('The number of messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP1MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP1MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP1MessagesPerSec.setDescription('The number of priority 1 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP10MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP10MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP10MessagesPerSec.setDescription('The number of priority 10 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP2MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP2MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP2MessagesPerSec.setDescription('The number of priority 2 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP3MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP3MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP3MessagesPerSec.setDescription('The number of priority 3 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP4MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP4MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP4MessagesPerSec.setDescription('The number of priority 4 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP5MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP5MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP5MessagesPerSec.setDescription('The number of priority 5 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP6MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP6MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP6MessagesPerSec.setDescription('The number of priority 6 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP7MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP7MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP7MessagesPerSec.setDescription('The number of priority 7 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP8MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP8MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP8MessagesPerSec.setDescription('The number of priority 8 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedP9MessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedP9MessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedP9MessagesPerSec.setDescription('The number of priority 9 messages from local endpoints and the transport that are successfully delivered into local target queues per second.')
ss2bsEnqueuedTransmissionQMsgSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedTransmissionQMsgSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedTransmissionQMsgSec.setDescription('The number of messages that have been placed into the broker transmission queue second.')
ss2bsEnqueuedTransportMsgFragTot = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgFragTot.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgFragTot.setDescription('Total number of message fragments from the transport that are successfully delivered into local target queues. Note that the message can be marked as disabled if it is incomplete and/or out of order.')
ss2bsEnqueuedTransportMsgFragSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgFragSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgFragSec.setDescription('The number of message fragments from the transport that are successfully delivered into local target queues second. Note that the message can be marked as disabled if it is incomplete and/or out of order.')
ss2bsEnqueuedTransportMsgsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgsTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgsTotal.setDescription('Total number of messages from the transport that are successfully delivered into local target queues. This includes all messages from remote endpoints and messages from local endpoints which go through the transport.')
ss2bsEnqueuedTransportMsgsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsEnqueuedTransportMsgsPerSec.setDescription('The number of messages from the transport that are successfully delivered into local target queues per second. This includes all messages from remote endpoints and messages from local endpoints which go through the transport.')
ss2bsForwardedMessagesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedMessagesTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedMessagesTotal.setDescription('Total number of forwarded messages successfully sent.')
ss2bsForwardedMessagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedMessagesPerSec.setDescription('The number of forwarded messages successfully sent per second.')
ss2bsForwardedMsgByteTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedMsgByteTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedMsgByteTotal.setDescription('Total number of forwarded message bytes successfully sent.')
ss2bsForwardedMsgBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedMsgBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedMsgBytesPerSec.setDescription('The number of forwarded message bytes successfully sent per second.')
ss2bsForwardedMsgDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedMsgDiscardedTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedMsgDiscardedTotal.setDescription('Total number of forwarded messages discarded due to forwarded message memory limits, age limits, etc.')
ss2bsForwardedMsgsDiscardedSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedMsgsDiscardedSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedMsgsDiscardedSec.setDescription('The number of forwarded messages that were discarded second due to forwarded message memory limits, age limits, etc.')
ss2bsForwardedPendingMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedPendingMsgBytes.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedPendingMsgBytes.setDescription('The number of forwarded message bytes that have not been successfully sent yet.')
ss2bsForwardedPendingMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsForwardedPendingMsgCount.setStatus('current')
if mibBuilder.loadTexts: ss2bsForwardedPendingMsgCount.setDescription('The number of forwarded messages that have not been successfully sent yet.')
ss2bsSQLReceiveTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsSQLReceiveTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsSQLReceiveTotal.setDescription('Total number of SQL RECEIVE commands processed by the Broker.')
ss2bsSQLReceivesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsSQLReceivesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsSQLReceivesPerSec.setDescription('The number of SQL RECEIVE commands processed by the Broker per second.')
ss2bsSQLSendTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsSQLSendTotal.setStatus('current')
if mibBuilder.loadTexts: ss2bsSQLSendTotal.setDescription('Total number of SQL SEND commands processed by the Broker.')
ss2bsSQLSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 5, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bsSQLSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bsSQLSendsPerSec.setDescription('The number of SQL SEND commands processed by the Broker per second.')
ss2BrokerTOStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6), )
if mibBuilder.loadTexts: ss2BrokerTOStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerTOStatisticsTable.setDescription('The Broker TO Statistics performance object reports information about how many times Service Broker dialogs request transmission objects, and how often transmission objects are written to tempdb. Transmission objects record the state of message transmissions for a Service Broker dialog. They are stored in memory. To free memory, Service Broker periodically writes batches of inactive transmission objects to work tables in tempdb.')
ss2BrokerTOStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2BrokerTOStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerTOStatisticsEntry.setDescription('Performance information for one SQL Server BrokerTOStatistics instance.')
ss2btosAvgLengthOfBatchedWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2btosAvgLengthOfBatchedWrites.setStatus('current')
if mibBuilder.loadTexts: ss2btosAvgLengthOfBatchedWrites.setDescription('Average Number of Transmission Objects saved in a batch.')
ss2btosAvgTimeBetweenBatchesMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2btosAvgTimeBetweenBatchesMs.setStatus('current')
if mibBuilder.loadTexts: ss2btosAvgTimeBetweenBatchesMs.setDescription('Average time between Transmission Object batch flushes.')
ss2btosAvgTimeToWriteBatchMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2btosAvgTimeToWriteBatchMs.setStatus('current')
if mibBuilder.loadTexts: ss2btosAvgTimeToWriteBatchMs.setDescription('Average time to save a Transmission Object batch.')
ss2btosTransmissionObjGetsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2btosTransmissionObjGetsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2btosTransmissionObjGetsPerSec.setDescription('The number of Transmission Objects requested per second.')
ss2btosTransmissionObjSetDirtSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2btosTransmissionObjSetDirtSec.setStatus('current')
if mibBuilder.loadTexts: ss2btosTransmissionObjSetDirtSec.setDescription('The number of Transmission Objects marked dirty second.')
ss2btosTransmissionObjWritesSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2btosTransmissionObjWritesSec.setStatus('current')
if mibBuilder.loadTexts: ss2btosTransmissionObjWritesSec.setDescription('The number of Transmission Objects saved second.')
ss2BrokerPerDBMTransportTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7), )
if mibBuilder.loadTexts: ss2BrokerPerDBMTransportTable.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerPerDBMTransportTable.setDescription('The Broker / DBM Transport performance object contains performance counters that report networking information for Service Broker and database mirroring.')
ss2BrokerPerDBMTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2BrokerPerDBMTransportEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BrokerPerDBMTransportEntry.setDescription('Performance information for one SQL Server BrokerPerDBMTransport instance.')
ss2bdtCurrentBytesForRecvIPerO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtCurrentBytesForRecvIPerO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtCurrentBytesForRecvIPerO.setDescription("The number of bytes associated with current transport receive I/O operations that haven't completed.")
ss2bdtCurrentBytesForSendIPerO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtCurrentBytesForSendIPerO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtCurrentBytesForSendIPerO.setDescription("The number of buffer bytes associated with current transport send I/O operations that haven't completed.")
ss2bdtCurrentMsgFragForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtCurrentMsgFragForSendIO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtCurrentMsgFragForSendIO.setDescription("The current number of message fragments associated with current transport send I/O oations that haven't completed.")
ss2bdtMessageFragmentP1SenSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMessageFragmentP1SenSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMessageFragmentP1SenSec.setDescription('The number of priority 1 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP10SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP10SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP10SendsSec.setDescription('The number of priority 10 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP2SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP2SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP2SendsSec.setDescription('The number of priority 2 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP3SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP3SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP3SendsSec.setDescription('The number of priority 3 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP4SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP4SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP4SendsSec.setDescription('The number of priority 4 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP5SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP5SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP5SendsSec.setDescription('The number of priority 5 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP6SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP6SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP6SendsSec.setDescription('The number of priority 6 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP7SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP7SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP7SendsSec.setDescription('The number of priority 7 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP8SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP8SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP8SendsSec.setDescription('The number of priority 8 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentP9SendsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentP9SendsSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentP9SendsSec.setDescription('The number of priority 9 message fragments sent second in transport send I/O oations.')
ss2bdtMsgFragmentReceivesSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentReceivesSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentReceivesSec.setDescription('The number of message fragments received second in transport receive I/O oations.')
ss2bdtMessageFragmentSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMessageFragmentSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMessageFragmentSendsPerSec.setDescription('The number of message fragments sent per second in transport send I/O operations.')
ss2bdtMsgFragmentRecvSizeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentRecvSizeAvg.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentRecvSizeAvg.setDescription('The average byte size of message fragments received in transport receive I/O operations.')
ss2bdtMsgFragmentSendSizeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtMsgFragmentSendSizeAvg.setStatus('current')
if mibBuilder.loadTexts: ss2bdtMsgFragmentSendSizeAvg.setDescription('The average byte size of message fragments sent in transport send I/O operations.')
ss2bdtOpenConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtOpenConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ss2bdtOpenConnectionCount.setDescription('The total number of transport connections currently open.')
ss2bdtPendingBytesForRecvIPerO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtPendingBytesForRecvIPerO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtPendingBytesForRecvIPerO.setDescription("The number of bytes associated with in completed transport receive I/O operations whose message fragments haven't been enqueued (or rejected) yet.")
ss2bdtPendingBytesForSendIPerO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtPendingBytesForSendIPerO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtPendingBytesForSendIPerO.setDescription('The number of buffer bytes associated with message fragments being marshalled, or marshalled and ready to be sent with send I/O operations.')
ss2bdtPendingMsgFragForRecvIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtPendingMsgFragForRecvIO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtPendingMsgFragForRecvIO.setDescription('The current number of message fragments received in transport receive I/O oations that have not been enqueued (or rejected) yet.')
ss2bdtPendingMsgFragForSendIO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtPendingMsgFragForSendIO.setStatus('current')
if mibBuilder.loadTexts: ss2bdtPendingMsgFragForSendIO.setDescription('The current number of message fragments that are being marshalled, or marshalled and ready to be sent via the transport layer.')
ss2bdtReceiveIPerOLenAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtReceiveIPerOLenAvg.setStatus('current')
if mibBuilder.loadTexts: ss2bdtReceiveIPerOLenAvg.setDescription('The average byte length of transport receive I/O operations.')
ss2bdtReceiveIPerOBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtReceiveIPerOBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtReceiveIPerOBytesPerSec.setDescription('The number of transport receive I/O bytes per second.')
ss2bdtReceiveIPerOsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtReceiveIPerOsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtReceiveIPerOsPerSec.setDescription('The number of transport receives I/O per second. Note that a transport receive I/O may contain more than one message fragment.')
ss2bdtRecvIPerOBufferCopiesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtRecvIPerOBufferCopiesCount.setStatus('current')
if mibBuilder.loadTexts: ss2bdtRecvIPerOBufferCopiesCount.setDescription('The number of times when transport receive I/O operations had to move buffer fragments in memory.')
ss2bdtRecvIOBufferCopiesBytesSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtRecvIOBufferCopiesBytesSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtRecvIOBufferCopiesBytesSec.setDescription('The rate at which transport receive I/O oations had to move buffer fragments in memory.')
ss2bdtSendIPerOLenAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtSendIPerOLenAvg.setStatus('current')
if mibBuilder.loadTexts: ss2bdtSendIPerOLenAvg.setDescription('The average byte length of transport send I/O operations.')
ss2bdtSendIPerOBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtSendIPerOBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtSendIPerOBytesPerSec.setDescription('The number of transport send I/O bytes per second.')
ss2bdtSendIPerOsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 7, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bdtSendIPerOsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bdtSendIPerOsPerSec.setDescription('The number of transport send I/Os per second. Note that a transport send I/O may contain more than one message fragment.')
ss2BufferManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8), )
if mibBuilder.loadTexts: ss2BufferManagerTable.setStatus('current')
if mibBuilder.loadTexts: ss2BufferManagerTable.setDescription('The Buffer Manager object provides counters to monitor how SQL Server uses: * Memory to store data pages, internal data structures, and the procedure cache. * Counters to monitor the physical I/O as SQL Server reads and writes database pages. Monitoring the memory and the counters used by SQL Server helps you determine: * If bottlenecks exist from inadequate physical memory. If it cannot store frequently accessed data in cache, SQL Server must retrieve the data from disk. * If query performance can be improved by adding more memory, or by making more memory available to the data cache or SQL Server internal structures. * How often SQL Server needs to read data from disk. Compared with other operations, such as memory access, physical I/O consumes a lot of time. Minimizing physical I/O can improve query performance. You can also monitor Address Windowing Extensions (AWE) activity in SQL Server with the AWE counters. For example, you can make sure that SQL Server has enough memory allocated for AWE to run properly.')
ss2BufferManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2BufferManagerEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BufferManagerEntry.setDescription('Performance information for one SQL Server BufferManager instance.')
ss2bmAWELookupMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmAWELookupMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmAWELookupMapsPerSec.setDescription('Number of AWE map calls made for pages found in the buffer pool.')
ss2bmAWEStolenMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmAWEStolenMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmAWEStolenMapsPerSec.setDescription('Number of AWE map calls made for pages stolen from the buffer pool.')
ss2bmAWEUnmapCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmAWEUnmapCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmAWEUnmapCallsPerSec.setDescription('Number of AWE unmap calls.')
ss2bmAWEUnmapPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmAWEUnmapPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmAWEUnmapPagesPerSec.setDescription('Number of AWE pages unmapped.')
ss2bmAWEWriteMapsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmAWEWriteMapsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmAWEWriteMapsPerSec.setDescription('Number of AWE map calls made for pages to be written to disk.')
ss2bmBufferCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmBufferCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ss2bmBufferCacheHitRatio.setDescription('Percentage of pages that were found in the buffer pool without having to incur a read from disk.')
ss2bmCheckpointPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmCheckpointPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmCheckpointPagesPerSec.setDescription('Number of pages flushed by checkpoint or other operations that require all dirty pages to be flushed.')
ss2bmDatabasePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmDatabasePages.setStatus('current')
if mibBuilder.loadTexts: ss2bmDatabasePages.setDescription('Number of pages in the buffer pool with database content.')
ss2bmFreeListStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmFreeListStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmFreeListStallsPerSec.setDescription('Number of requests that had to wait for a free page.')
ss2bmFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmFreePages.setStatus('current')
if mibBuilder.loadTexts: ss2bmFreePages.setDescription('Total number of pages on all free lists.')
ss2bmLazyWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmLazyWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmLazyWritesPerSec.setDescription("Number of buffers written by buffer manager's lazy writer.")
ss2bmPageLifeExpectancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmPageLifeExpectancy.setStatus('current')
if mibBuilder.loadTexts: ss2bmPageLifeExpectancy.setDescription('Number of seconds a page will stay in the buffer pool without references.')
ss2bmPageLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmPageLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmPageLookupsPerSec.setDescription('Number of requests to find a page in the buffer pool.')
ss2bmPageReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmPageReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmPageReadsPerSec.setDescription('Number of physical database page reads issued.')
ss2bmPageWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmPageWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmPageWritesPerSec.setDescription('Number of physical database page writes issued.')
ss2bmReadaheadPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmReadaheadPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bmReadaheadPagesPerSec.setDescription('Number of pages read in anticipation of use.')
ss2bmReservedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmReservedPages.setStatus('current')
if mibBuilder.loadTexts: ss2bmReservedPages.setDescription('Number of buffer pool reserved pages.')
ss2bmStolenPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmStolenPages.setStatus('current')
if mibBuilder.loadTexts: ss2bmStolenPages.setDescription('Number of pages used for miscellaneous server purposes (including procedure cache).')
ss2bmTargetPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmTargetPages.setStatus('current')
if mibBuilder.loadTexts: ss2bmTargetPages.setDescription('Ideal number of pages in the buffer pool.')
ss2bmTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 8, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bmTotalPages.setStatus('current')
if mibBuilder.loadTexts: ss2bmTotalPages.setDescription('Number of pages in the buffer pool (includes database, free, and stolen).')
ss2BufferNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9), )
if mibBuilder.loadTexts: ss2BufferNodeTable.setStatus('current')
if mibBuilder.loadTexts: ss2BufferNodeTable.setDescription('The Buffer Node object provides counters that complement counters provided by the Buffer Manager object. It allows you to monitor the SQL Server buffer pool page distribution for each non-uniform memory access (NUMA) node. There is an instance of the Buffer Node object for each NUMA node in use. On non-NUMA architecture there will be a single instance of the Buffer Node object.')
ss2BufferNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2bnInstance"))
if mibBuilder.loadTexts: ss2BufferNodeEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BufferNodeEntry.setDescription("Performance information for one particular instance of 'Buffer Node' object.")
ss2bnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnInstance.setStatus('current')
if mibBuilder.loadTexts: ss2bnInstance.setDescription('Instance name.')
ss2bnDatabasePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnDatabasePages.setStatus('current')
if mibBuilder.loadTexts: ss2bnDatabasePages.setDescription('Number of pages in the buffer pool with database content.')
ss2bnForeignPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnForeignPages.setStatus('current')
if mibBuilder.loadTexts: ss2bnForeignPages.setDescription('Number of pages which are not from NUMA-local memory.')
ss2bnFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnFreePages.setStatus('current')
if mibBuilder.loadTexts: ss2bnFreePages.setDescription('Total number of pages on all free lists.')
ss2bnLocalNodePageLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnLocalNodePageLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bnLocalNodePageLookupsPerSec.setDescription('Number of lookup requests from this node which were satisfied from this node.')
ss2bnPageLifeExpectancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnPageLifeExpectancy.setStatus('current')
if mibBuilder.loadTexts: ss2bnPageLifeExpectancy.setDescription('Number of seconds a page will stay in the buffer pool without references.')
ss2bnRemoteNodePageLookupsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnRemoteNodePageLookupsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bnRemoteNodePageLookupsPerSec.setDescription('Number of lookup requests from this node which were satisfied from other nodes.')
ss2bnStolenPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnStolenPages.setStatus('current')
if mibBuilder.loadTexts: ss2bnStolenPages.setDescription('Number of pages used for miscellaneous server purposes (including procedure cache).')
ss2bnTargetPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnTargetPages.setStatus('current')
if mibBuilder.loadTexts: ss2bnTargetPages.setDescription('Ideal number of pages in the buffer pool.')
ss2bnTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bnTotalPages.setStatus('current')
if mibBuilder.loadTexts: ss2bnTotalPages.setDescription('Number of pages in the buffer pool (includes database, free, and stolen).')
ss2BufferPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 10), )
if mibBuilder.loadTexts: ss2BufferPartitionTable.setStatus('current')
if mibBuilder.loadTexts: ss2BufferPartitionTable.setDescription('The Buffer Partition object provides counters to monitor how SQL Server uses free pages.')
ss2BufferPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 10, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2bpInstance"))
if mibBuilder.loadTexts: ss2BufferPartitionEntry.setStatus('current')
if mibBuilder.loadTexts: ss2BufferPartitionEntry.setDescription("Performance information for one particular instance of 'Buffer Partition' object.")
ss2bpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 10, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bpInstance.setStatus('current')
if mibBuilder.loadTexts: ss2bpInstance.setDescription('Instance name.')
ss2bpFreeListEmptyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bpFreeListEmptyPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bpFreeListEmptyPerSec.setDescription('Number of times a free page was requested and none were available.')
ss2bpFreeListRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bpFreeListRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2bpFreeListRequestsPerSec.setDescription('Number of times a free page was requested.')
ss2bpFreePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2bpFreePages.setStatus('current')
if mibBuilder.loadTexts: ss2bpFreePages.setDescription('Total number of pages on all free lists.')
ss2CLRTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 11), )
if mibBuilder.loadTexts: ss2CLRTable.setStatus('current')
if mibBuilder.loadTexts: ss2CLRTable.setDescription('The CLR object provides counters to monitor common language runtime (CLR) execution in Microsoft SQL Server.')
ss2CLREntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 11, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2CLREntry.setStatus('current')
if mibBuilder.loadTexts: ss2CLREntry.setDescription('Performance information for one SQL Server CLR instance.')
ss2CLRCLRExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 11, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2CLRCLRExecution.setStatus('current')
if mibBuilder.loadTexts: ss2CLRCLRExecution.setDescription('Total Execution time in CLR ( microseconds ).')
ss2CatalogMetadataTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 12), )
if mibBuilder.loadTexts: ss2CatalogMetadataTable.setStatus('current')
if mibBuilder.loadTexts: ss2CatalogMetadataTable.setDescription("A table containing performance information for instances of 'Catalog Metadata' objects.")
ss2CatalogMetadataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 12, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2cmdInstance"))
if mibBuilder.loadTexts: ss2CatalogMetadataEntry.setStatus('current')
if mibBuilder.loadTexts: ss2CatalogMetadataEntry.setDescription("Performance information for one particular instance of 'Catalog Metadata' object.")
ss2cmdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 12, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmdInstance.setStatus('current')
if mibBuilder.loadTexts: ss2cmdInstance.setDescription('Instance name.')
ss2cmdCacheEntriesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmdCacheEntriesCount.setStatus('current')
if mibBuilder.loadTexts: ss2cmdCacheEntriesCount.setDescription('Number of entries in the catalog metadata cache')
ss2cmdCacheEntriesPinnedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmdCacheEntriesPinnedCount.setStatus('current')
if mibBuilder.loadTexts: ss2cmdCacheEntriesPinnedCount.setDescription('Number of catalog metadata cache entries that are pinned')
ss2cmdCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmdCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ss2cmdCacheHitRatio.setDescription('Ratio between cache hits and lookups')
ss2CursorManagerTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 13), )
if mibBuilder.loadTexts: ss2CursorManagerTotalTable.setStatus('current')
if mibBuilder.loadTexts: ss2CursorManagerTotalTable.setDescription('The Cursor Manager Total object provides counters to monitor cursors.')
ss2CursorManagerTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 13, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2CursorManagerTotalEntry.setStatus('current')
if mibBuilder.loadTexts: ss2CursorManagerTotalEntry.setDescription("Performance information for one particular instance of 'Cursor Manager by Type' object.")
ss2cmtAsyncPopulationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 13, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmtAsyncPopulationCount.setStatus('current')
if mibBuilder.loadTexts: ss2cmtAsyncPopulationCount.setDescription('Number of cursors being populated asynchronously.')
ss2cmtCursorConversionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 13, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmtCursorConversionRate.setStatus('current')
if mibBuilder.loadTexts: ss2cmtCursorConversionRate.setDescription('Number of cursor conversions/sec.')
ss2cmtCursorFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 13, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmtCursorFlushes.setStatus('current')
if mibBuilder.loadTexts: ss2cmtCursorFlushes.setDescription('Total number of times a flush for a cursor xstmt occured.')
ss2CursorManagerByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14), )
if mibBuilder.loadTexts: ss2CursorManagerByTypeTable.setStatus('current')
if mibBuilder.loadTexts: ss2CursorManagerByTypeTable.setDescription('The Cursor Manager by Type object provides counters to monitor cursors, grouped by type.')
ss2CursorManagerByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2cmbtInstance"))
if mibBuilder.loadTexts: ss2CursorManagerByTypeEntry.setStatus('current')
if mibBuilder.loadTexts: ss2CursorManagerByTypeEntry.setDescription("Performance information for one particular instance of 'Cursor Manager by Type' object.")
ss2cmbtInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtInstance.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtInstance.setDescription('Instance name.')
ss2cmbtActiveCursors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtActiveCursors.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtActiveCursors.setDescription('Number of active cursors.')
ss2cmbtCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtCacheHitRatio.setDescription('Ratio between cache hits and lookups')
ss2cmbtCachedCursorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtCachedCursorCounts.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtCachedCursorCounts.setDescription('Number of cursors of a given type in the cache')
ss2cmbtCursorCacheUseCountsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtCursorCacheUseCountsSec.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtCursorCacheUseCountsSec.setDescription('Times each type of cached cursor has been used')
ss2cmbtCursorRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtCursorRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtCursorRequestsPerSec.setDescription('Number of SQL cursor requests received by server.')
ss2cmbtCursorMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtCursorMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtCursorMemoryUsage.setDescription('Amount of memory consumed by cursors (KB).')
ss2cmbtCursorWorktableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtCursorWorktableUsage.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtCursorWorktableUsage.setDescription('Number of worktables used by cursors.')
ss2cmbtNumberOfActiveCursorPlans = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2cmbtNumberOfActiveCursorPlans.setStatus('current')
if mibBuilder.loadTexts: ss2cmbtNumberOfActiveCursorPlans.setDescription('Number of cursor plans.')
ss2DatabaseMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15), )
if mibBuilder.loadTexts: ss2DatabaseMirroringTable.setStatus('current')
if mibBuilder.loadTexts: ss2DatabaseMirroringTable.setDescription('The Database Mirroring performance object contains performance counters that report information about SQL Server database mirroring.')
ss2DatabaseMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2dmInstance"))
if mibBuilder.loadTexts: ss2DatabaseMirroringEntry.setStatus('current')
if mibBuilder.loadTexts: ss2DatabaseMirroringEntry.setDescription("Performance information for one particular instance of 'Database Mirroring' object.")
ss2dmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmInstance.setStatus('current')
if mibBuilder.loadTexts: ss2dmInstance.setDescription('Instance name.')
ss2dmBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmBytesReceivedPerSec.setDescription('Number of bytes received per second')
ss2dmBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmBytesSentPerSec.setDescription('Number of bytes sent per second')
ss2dmLogBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogBytesReceivedPerSec.setDescription('Number of bytes of log received per second')
ss2dmLogBytesRedoneFromCacheSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogBytesRedoneFromCacheSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogBytesRedoneFromCacheSec.setDescription('Number of log bytes which were redone from the Database Mirroring log cache second.')
ss2dmLogBytesSentFromCachePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogBytesSentFromCachePerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogBytesSentFromCachePerSec.setDescription('Number of sent log bytes which were sent from the Database Mirroring log cache in the last second.')
ss2dmLogBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogBytesSentPerSec.setDescription('Number of bytes of log sent per second')
ss2dmLogCompressedBytesRcvdSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogCompressedBytesRcvdSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogCompressedBytesRcvdSec.setDescription('Number of compressed bytes of log received in the last second.')
ss2dmLogCompressedBytesSentSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogCompressedBytesSentSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogCompressedBytesSentSec.setDescription('Number of compressed bytes of log sent in the last second.')
ss2dmLogHardenTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogHardenTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogHardenTimeMs.setDescription('Milliseconds log blocks waited to be hardened to disk in the last second.')
ss2dmLogRemainingForUndoKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogRemainingForUndoKB.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogRemainingForUndoKB.setDescription('Total number of kilobytes of log that remain to be scanned by the new mirror server after failover.')
ss2dmLogScannedForUndoKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogScannedForUndoKB.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogScannedForUndoKB.setDescription('Total number of kilobytes of log that have been scanned by the new mirror server after failover.')
ss2dmLogSendFlowControlTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogSendFlowControlTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogSendFlowControlTimeMs.setDescription('Milliseconds log stream messages waited for send flow control in the last second.')
ss2dmLogSendQueueKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmLogSendQueueKB.setStatus('current')
if mibBuilder.loadTexts: ss2dmLogSendQueueKB.setDescription('Total number of kilobytes of log that have not been sent to the mirror server')
ss2dmMirroredWritTransactionsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmMirroredWritTransactionsSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmMirroredWritTransactionsSec.setDescription('Number of transactions which wrote to the mirrored database in the last second, that waited for log to be sent to the mirror.')
ss2dmPagesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmPagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmPagesSentPerSec.setDescription('Number of pages sent per second')
ss2dmReceivesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmReceivesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmReceivesPerSec.setDescription('Number of mirroring message receives per second')
ss2dmRedoBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmRedoBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmRedoBytesPerSec.setDescription('Number of bytes of log redone by the mirror database per second')
ss2dmRedoQueueKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmRedoQueueKB.setStatus('current')
if mibBuilder.loadTexts: ss2dmRedoQueueKB.setDescription('Total number of kilobytes that redo on the mirror database is behind the hardened log')
ss2dmSendPerReceiveAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmSendPerReceiveAckTime.setStatus('current')
if mibBuilder.loadTexts: ss2dmSendPerReceiveAckTime.setDescription('Milliseconds messages waited for acknowledgement from the partner per second.')
ss2dmSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dmSendsPerSec.setDescription('Number of sends initiated per second')
ss2dmTransactionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 15, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dmTransactionDelay.setStatus('current')
if mibBuilder.loadTexts: ss2dmTransactionDelay.setDescription('Number of milliseconds transaction termination waited for acknowledgement per second.')
ss2DatabasesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16), )
if mibBuilder.loadTexts: ss2DatabasesTable.setStatus('current')
if mibBuilder.loadTexts: ss2DatabasesTable.setDescription('The Databases object in SQL Server provides counters to monitor bulk copy operations, backup and restore throughput, and transaction log activities. Monitor transactions and the transaction log to determine how much user activity is occurring in the database and how full the transaction log is becoming. The amount of user activity can determine the performance of the database and affect log size, locking, and replication. Monitoring low-level log activity to gauge user activity and resource usage can help you to identify performance bottlenecks. Multiple instances of the Databases object, each representing a single database, can be monitored at the same time.')
ss2DatabasesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2dbInstance"))
if mibBuilder.loadTexts: ss2DatabasesEntry.setStatus('current')
if mibBuilder.loadTexts: ss2DatabasesEntry.setDescription("Performance information for one particular instance of 'Databases' object.")
ss2dbInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbInstance.setStatus('current')
if mibBuilder.loadTexts: ss2dbInstance.setDescription('Instance name.')
ss2dbActiveTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbActiveTransactions.setStatus('current')
if mibBuilder.loadTexts: ss2dbActiveTransactions.setDescription('Number of active update transactions for the database.')
ss2dbBackupRestoreThroughputSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbBackupRestoreThroughputSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbBackupRestoreThroughputSec.setDescription('Read/write throughput for backup/restore of a database.')
ss2dbBulkCopyRowsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbBulkCopyRowsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbBulkCopyRowsPerSec.setDescription('Number of rows bulk copied.')
ss2dbBulkCopyThroughputPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbBulkCopyThroughputPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbBulkCopyThroughputPerSec.setDescription('KiloBytes bulk copied.')
ss2dbCommitTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbCommitTableEntries.setStatus('current')
if mibBuilder.loadTexts: ss2dbCommitTableEntries.setDescription('The size of the in-memory part of the commit table for the database.')
ss2dbDBCCLogicalScanBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbDBCCLogicalScanBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbDBCCLogicalScanBytesPerSec.setDescription('Logical read scan rate for DBCC commands')
ss2dbDataFileSSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbDataFileSSizeKB.setStatus('current')
if mibBuilder.loadTexts: ss2dbDataFileSSizeKB.setDescription('The cumulative size of all the data files in the database.')
ss2dbLogBytesFlushedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogBytesFlushedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogBytesFlushedPerSec.setDescription('Total number of log bytes flushed.')
ss2dbLogCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogCacheHitRatio.setDescription('Percentage of log cache reads that were satisfied from the log cache.')
ss2dbLogCacheReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogCacheReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogCacheReadsPerSec.setDescription('Reads performed through the log manager cache.')
ss2dbLogFileSSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogFileSSizeKB.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogFileSSizeKB.setDescription('The cumulative size of all the log files in the database.')
ss2dbLogFileSUsedSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogFileSUsedSizeKB.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogFileSUsedSizeKB.setDescription('The cumulative used size of all the log files in the database.')
ss2dbLogFlushWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogFlushWaitTime.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogFlushWaitTime.setDescription('Total wait time (milliseconds).')
ss2dbLogFlushWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogFlushWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogFlushWaitsPerSec.setDescription('Number of commits waiting on log flush.')
ss2dbLogFlushesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogFlushesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogFlushesPerSec.setDescription('Number of log flushes.')
ss2dbLogGrowths = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogGrowths.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogGrowths.setDescription('Total number of log growths for this database.')
ss2dbLogShrinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogShrinks.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogShrinks.setDescription('Total number of log shrinks for this database.')
ss2dbLogTruncations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbLogTruncations.setStatus('current')
if mibBuilder.loadTexts: ss2dbLogTruncations.setDescription('Total number of log truncations for this database.')
ss2dbPercentLogUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbPercentLogUsed.setStatus('current')
if mibBuilder.loadTexts: ss2dbPercentLogUsed.setDescription('The percent of space in the log that is in use.')
ss2dbReplPendingXacts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbReplPendingXacts.setStatus('current')
if mibBuilder.loadTexts: ss2dbReplPendingXacts.setDescription('Number of pending replication transactions in the database.')
ss2dbReplTransRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbReplTransRate.setStatus('current')
if mibBuilder.loadTexts: ss2dbReplTransRate.setDescription('Replication transaction rate (replicated transactions/sec.).')
ss2dbShrinkDataMovementBytesSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbShrinkDataMovementBytesSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbShrinkDataMovementBytesSec.setDescription('The rate data is being moved by Autoshrink, DBCC SHRINKDATABASE or SHRINKFILE.')
ss2dbTrackedTransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbTrackedTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbTrackedTransactionsPerSec.setDescription('Number of committed transactions recorded in the commit table for the database.')
ss2dbTransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbTransactionsPerSec.setDescription('Number of transactions started for the database.')
ss2dbWriteTransactionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 16, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2dbWriteTransactionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2dbWriteTransactionsPerSec.setDescription('Number of transactions which wrote to the database in the last second.')
ss2DeprecatedFeaturesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 17), )
if mibBuilder.loadTexts: ss2DeprecatedFeaturesTable.setStatus('current')
if mibBuilder.loadTexts: ss2DeprecatedFeaturesTable.setDescription('The Deprecated Features object in SQL Server provides a counter to monitor the features designated as deprecated. In each case the counter provides a usage count that lists the number of times the deprecated feature was encountered since SQL Server last started.')
ss2DeprecatedFeaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 17, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2DeprecatedFeaturesInstance"))
if mibBuilder.loadTexts: ss2DeprecatedFeaturesEntry.setStatus('current')
if mibBuilder.loadTexts: ss2DeprecatedFeaturesEntry.setDescription("Performance information for one particular instance of 'Deprecated Features' object.")
ss2DeprecatedFeaturesInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 17, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2DeprecatedFeaturesInstance.setStatus('current')
if mibBuilder.loadTexts: ss2DeprecatedFeaturesInstance.setDescription('Instance name.')
ss2DeprecatedFeaturesUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2DeprecatedFeaturesUsage.setStatus('current')
if mibBuilder.loadTexts: ss2DeprecatedFeaturesUsage.setDescription('Feature usage since last SQL Server startup')
ss2ExecStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18), )
if mibBuilder.loadTexts: ss2ExecStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatisticsTable.setDescription('The ExecStatistics object in Microsoft SQL Server provides counters to monitor various executions.')
ss2ExecStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2ExecStatisticsInstance"))
if mibBuilder.loadTexts: ss2ExecStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatisticsEntry.setDescription("Performance information for one particular instance of 'Exec Statistics' object.")
ss2ExecStatisticsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ExecStatisticsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatisticsInstance.setDescription('Instance name.')
ss2ExecStatisticsDTCCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ExecStatisticsDTCCalls.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatisticsDTCCalls.setDescription('Statistics relevant to execution of DTC calls.')
ss2ExecStatisticDistributedQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ExecStatisticDistributedQuery.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatisticDistributedQuery.setDescription('Statistics relevant to execution of distributed queries.')
ss2ExecStatistExtendedProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ExecStatistExtendedProcedures.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatistExtendedProcedures.setDescription('Statistics relevant to execution of XP calls.')
ss2ExecStatisticsOLEDBCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 18, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ExecStatisticsOLEDBCalls.setStatus('current')
if mibBuilder.loadTexts: ss2ExecStatisticsOLEDBCalls.setDescription('Statistics relevant to execution of OLEDB calls.')
ss2GeneralStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19), )
if mibBuilder.loadTexts: ss2GeneralStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2GeneralStatisticsTable.setDescription('The General Statistics object in Microsoft SQL Server provides counters to monitor general server-wide activity, such as the number of current connections and the number of users connecting and disconnecting per second from computers running an instance of SQL Server. This can be useful when you are working on large online transaction processing (OLTP) type systems where there are many clients connecting and disconnecting from an instance of SQL Server.')
ss2GeneralStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2GeneralStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2GeneralStatisticsEntry.setDescription('Performance information for one SQL Server GeneralStatistics instance.')
ss2gsActiveTempTables = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsActiveTempTables.setStatus('current')
if mibBuilder.loadTexts: ss2gsActiveTempTables.setDescription('Number of temporary tables/table variables in use')
ss2gsConnectionResetPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsConnectionResetPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2gsConnectionResetPerSec.setDescription('Total number of connection resets per second.')
ss2gsEventNotificationsDelayDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsEventNotificationsDelayDrop.setStatus('current')
if mibBuilder.loadTexts: ss2gsEventNotificationsDelayDrop.setDescription('Number of event notifications waiting to be dropped by a system thread')
ss2gsHTTPAuthenticatedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsHTTPAuthenticatedRequests.setStatus('current')
if mibBuilder.loadTexts: ss2gsHTTPAuthenticatedRequests.setDescription('Number of authenticated HTTP requests started per second.')
ss2gsLogicalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsLogicalConnections.setStatus('current')
if mibBuilder.loadTexts: ss2gsLogicalConnections.setDescription('Number of logical connections to the system.')
ss2gsLoginsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsLoginsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2gsLoginsPerSec.setDescription('Total number of logins started per second.')
ss2gsLogoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsLogoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2gsLogoutsPerSec.setDescription('Total number of logouts started per second.')
ss2gsMarsDeadlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsMarsDeadlocks.setStatus('current')
if mibBuilder.loadTexts: ss2gsMarsDeadlocks.setDescription('Number of Mars Deadlocks detected.')
ss2gsNonAtomicYieldRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsNonAtomicYieldRate.setStatus('current')
if mibBuilder.loadTexts: ss2gsNonAtomicYieldRate.setDescription('Number of non-atomic yields per second.')
ss2gsProcessesBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsProcessesBlocked.setStatus('current')
if mibBuilder.loadTexts: ss2gsProcessesBlocked.setDescription('Number of currently blocked processes.')
ss2gsSOAPEmptyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSOAPEmptyRequests.setStatus('current')
if mibBuilder.loadTexts: ss2gsSOAPEmptyRequests.setDescription('Number of empty SOAP requests started per second.')
ss2gsSOAPMethodInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSOAPMethodInvocations.setStatus('current')
if mibBuilder.loadTexts: ss2gsSOAPMethodInvocations.setDescription('Number of SOAP method invocations started per second.')
ss2gsSOAPSQLRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSOAPSQLRequests.setStatus('current')
if mibBuilder.loadTexts: ss2gsSOAPSQLRequests.setDescription('Number of SOAP SQL requests started per second.')
ss2gsSOAPSessionInitiateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSOAPSessionInitiateRequests.setStatus('current')
if mibBuilder.loadTexts: ss2gsSOAPSessionInitiateRequests.setDescription('Number of SOAP Session initiate requests started per second.')
ss2gsSOAPSessionTerminateRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSOAPSessionTerminateRequest.setStatus('current')
if mibBuilder.loadTexts: ss2gsSOAPSessionTerminateRequest.setDescription('Number of SOAP Session terminate requests started second.')
ss2gsSOAPWSDLRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSOAPWSDLRequests.setStatus('current')
if mibBuilder.loadTexts: ss2gsSOAPWSDLRequests.setDescription('Number of SOAP Web Service Description Language requests started per second.')
ss2gsSQLTraceIOProviderLockWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsSQLTraceIOProviderLockWaits.setStatus('current')
if mibBuilder.loadTexts: ss2gsSQLTraceIOProviderLockWaits.setDescription('Number of waits for the File IO Provider lock per second')
ss2gsTempTablesCreationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsTempTablesCreationRate.setStatus('current')
if mibBuilder.loadTexts: ss2gsTempTablesCreationRate.setDescription('Number of temporary tables/table variables created/sec')
ss2gsTempTablesForDestruction = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsTempTablesForDestruction.setStatus('current')
if mibBuilder.loadTexts: ss2gsTempTablesForDestruction.setDescription('Number of temporary tables/table variables waiting to be destroyed by the cleanup system thread')
ss2gsTempdbRecoveryUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsTempdbRecoveryUnitId.setStatus('current')
if mibBuilder.loadTexts: ss2gsTempdbRecoveryUnitId.setDescription('Number of duplicate tempdb recovery unit id generated')
ss2gsTempdbRowsetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsTempdbRowsetId.setStatus('current')
if mibBuilder.loadTexts: ss2gsTempdbRowsetId.setDescription('Number of duplicate tempdb rowset id generated')
ss2gsTraceEventNotificationQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsTraceEventNotificationQueue.setStatus('current')
if mibBuilder.loadTexts: ss2gsTraceEventNotificationQueue.setDescription('Number of trace event notification instances waiting in the internal queue to be sent thru Service Broker')
ss2gsTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsTransactions.setStatus('current')
if mibBuilder.loadTexts: ss2gsTransactions.setDescription('Number of transaction enlistments (local, dtc, and bound).')
ss2gsUserConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 19, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2gsUserConnections.setStatus('current')
if mibBuilder.loadTexts: ss2gsUserConnections.setDescription('Number of users connected to the system.')
ss2LatchesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20), )
if mibBuilder.loadTexts: ss2LatchesTable.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesTable.setDescription('The Latches object in Microsoft SQL Server provides counters to monitor internal SQL Server resource locks called latches. Monitoring the latches to determine user activity and resource usage can help you to identify performance bottlenecks.')
ss2LatchesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2LatchesEntry.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesEntry.setDescription('Performance information for one SQL Server Latches instance.')
ss2LatchesAverageLatchWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LatchesAverageLatchWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesAverageLatchWaitTimeMs.setDescription('Average latch wait time (milliseconds) for latch requests that had to wait.')
ss2LatchesLatchWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LatchesLatchWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesLatchWaitsPerSec.setDescription('Number of latch requests that could not be granted immediately and had to wait before being granted.')
ss2LatchesNumberOfSuperLatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LatchesNumberOfSuperLatches.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesNumberOfSuperLatches.setDescription('Number of latches that are currently SuperLatches.')
ss2LatchesSuLatchDemotionsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LatchesSuLatchDemotionsSec.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesSuLatchDemotionsSec.setDescription('Number of SuLatches that have been demoted to regular latches')
ss2LatchesSuLatchPromotionsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LatchesSuLatchPromotionsSec.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesSuLatchPromotionsSec.setDescription('Number of latches that have been promoted to SuLatches')
ss2LatchesTotalLatchWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LatchesTotalLatchWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2LatchesTotalLatchWaitTimeMs.setDescription('Total latch wait time (milliseconds) for latch requests that had to wait in the last second.')
ss2LocksTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21), )
if mibBuilder.loadTexts: ss2LocksTable.setStatus('current')
if mibBuilder.loadTexts: ss2LocksTable.setDescription('The Locks object in Microsoft SQL Server provides information about SQL Server locks on individual resource types. Locks are held on SQL Server resources, such as rows read or modified during a transaction, to prevent concurrent use of resources by different transactions. For example, if an exclusive (X) lock is held on a row within a table by a transaction, no other transaction can modify that row until the lock is released. Minimizing locks increases concurrency, which can improve performance. Multiple instances of the Locks object can be monitored at the same time, with each instance representing a lock on a resource type.')
ss2LocksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2LocksInstance"))
if mibBuilder.loadTexts: ss2LocksEntry.setStatus('current')
if mibBuilder.loadTexts: ss2LocksEntry.setDescription("Performance information for one particular instance of 'Locks' object.")
ss2LocksInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksInstance.setStatus('current')
if mibBuilder.loadTexts: ss2LocksInstance.setDescription('Instance name.')
ss2LocksAverageWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksAverageWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2LocksAverageWaitTimeMs.setDescription('The average amount of wait time (milliseconds) for each lock request that resulted in a wait.')
ss2LocksLockRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksLockRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2LocksLockRequestsPerSec.setDescription('Number of new locks and lock conversions requested from the lock manager.')
ss2LocksTimeoutsGreaterThan0Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksTimeoutsGreaterThan0Sec.setStatus('current')
if mibBuilder.loadTexts: ss2LocksTimeoutsGreaterThan0Sec.setDescription('Number of lock requests that timed out. This does not include requests for NOWAIT locks.')
ss2LocksLockTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksLockTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2LocksLockTimeoutsPerSec.setDescription('Number of lock requests that timed out. This includes requests for NOWAIT locks.')
ss2LocksLockWaitTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksLockWaitTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2LocksLockWaitTimeMs.setDescription('Total wait time (milliseconds) for locks in the last second.')
ss2LocksLockWaitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksLockWaitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2LocksLockWaitsPerSec.setDescription('Number of lock requests that could not be satisfied immediately and required the caller to wait before being granted the lock.')
ss2LocksNumberOfDeadlocksPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 21, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2LocksNumberOfDeadlocksPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2LocksNumberOfDeadlocksPerSec.setDescription('Number of lock requests that resulted in a deadlock.')
ss2MemoryManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22), )
if mibBuilder.loadTexts: ss2MemoryManagerTable.setStatus('current')
if mibBuilder.loadTexts: ss2MemoryManagerTable.setDescription('The Memory Manager object in Microsoft SQL Server provides counters to monitor overall server memory usage. Monitoring overall server memory usage to gauge user activity and resource usage can help you to identify performance bottlenecks. Monitoring the memory used by an instance of SQL Server can help determine: * If bottlenecks exist from inadequate physical memory for storing frequently accessed data in cache. If memory is inadequate, SQL Server must retrieve the data from disk. * If query performance can be improved by adding more memory or by making more memory available to the data cache or SQL Server internal structures.')
ss2MemoryManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2MemoryManagerEntry.setStatus('current')
if mibBuilder.loadTexts: ss2MemoryManagerEntry.setDescription('Performance information for one SQL Server MemoryManager instance.')
ss2mmConnectionMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmConnectionMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmConnectionMemoryKB.setDescription('Total amount of dynamic memory the server is using for maintaining connections')
ss2mmGrantedWorkspaceMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmGrantedWorkspaceMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmGrantedWorkspaceMemoryKB.setDescription('Total amount of memory granted to executing processes. This memory is used for hash, sort and create index operations.')
ss2mmLockBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmLockBlocks.setStatus('current')
if mibBuilder.loadTexts: ss2mmLockBlocks.setDescription('The current number of lock blocks that are in use on the server. Refreshed periodically.')
ss2mmLockBlocksAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmLockBlocksAllocated.setStatus('current')
if mibBuilder.loadTexts: ss2mmLockBlocksAllocated.setDescription('The current number of allocated lock blocks.')
ss2mmLockMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmLockMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmLockMemoryKB.setDescription('Total amount of dynamic memory the server is using for locks')
ss2mmLockOwnerBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmLockOwnerBlocks.setStatus('current')
if mibBuilder.loadTexts: ss2mmLockOwnerBlocks.setDescription('The number of lock owner blocks that are currently in use on the server. Refreshed periodically.')
ss2mmLockOwnerBlocksAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmLockOwnerBlocksAllocated.setStatus('current')
if mibBuilder.loadTexts: ss2mmLockOwnerBlocksAllocated.setDescription('The current number of allocated lock owner blocks.')
ss2mmMaximumWorkspaceMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmMaximumWorkspaceMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmMaximumWorkspaceMemoryKB.setDescription('Total amount of memory granted to executing processes. This memory is used primarily for hash, sort and create index operations.')
ss2mmMemoryGrantsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmMemoryGrantsOutstanding.setStatus('current')
if mibBuilder.loadTexts: ss2mmMemoryGrantsOutstanding.setDescription('Current number of processes that have successfully acquired a workspace memory grant')
ss2mmMemoryGrantsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmMemoryGrantsPending.setStatus('current')
if mibBuilder.loadTexts: ss2mmMemoryGrantsPending.setDescription('Current number of processes waiting for a workspace memory grant')
ss2mmOptimizerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmOptimizerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmOptimizerMemoryKB.setDescription('Total amount of dynamic memory the server is using for query optimization')
ss2mmSQLCacheMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmSQLCacheMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmSQLCacheMemoryKB.setDescription('Total amount of dynamic memory the server is using for the dynamic SQL cache')
ss2mmTargetServerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmTargetServerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmTargetServerMemoryKB.setDescription('Total amount of dynamic memory the server is willing to consume')
ss2mmTotalServerMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 22, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2mmTotalServerMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2mmTotalServerMemoryKB.setDescription('Total amount of dynamic memory the server is currently consuming')
ss2PlanCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23), )
if mibBuilder.loadTexts: ss2PlanCacheTable.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheTable.setDescription('The Plan Cache object provides counters to monitor how SQL Server uses memory to store objects such as stored procedures, ad hoc and prepared Transact-SQL statements, and triggers. Multiple instances of the Plan Cache object can be monitored at the same time, with each instance representing a different type of plan to monitor.')
ss2PlanCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2PlanCacheInstance"))
if mibBuilder.loadTexts: ss2PlanCacheEntry.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheEntry.setDescription("Performance information for one particular instance of 'Plan Cache' object.")
ss2PlanCacheInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2PlanCacheInstance.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheInstance.setDescription('Instance name.')
ss2PlanCacheCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2PlanCacheCacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheCacheHitRatio.setDescription('Ratio between cache hits and lookups')
ss2PlanCacheCacheObjectCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2PlanCacheCacheObjectCounts.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheCacheObjectCounts.setDescription('Number of cache objects in the cache')
ss2PlanCacheCacheObjectsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2PlanCacheCacheObjectsInUse.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheCacheObjectsInUse.setDescription('Number of cache objects in use')
ss2PlanCacheCachePages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 23, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2PlanCacheCachePages.setStatus('current')
if mibBuilder.loadTexts: ss2PlanCacheCachePages.setDescription('Number of 8k pages used by cache objects')
ss2ReplicationAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 24), )
if mibBuilder.loadTexts: ss2ReplicationAgentsTable.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationAgentsTable.setDescription("A table containing performance information for instances of 'Replication Agents' objects.")
ss2ReplicationAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 24, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2ReplicationAgentsInstance"))
if mibBuilder.loadTexts: ss2ReplicationAgentsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationAgentsEntry.setDescription("Performance information for one particular instance of 'Replication Agents' object.")
ss2ReplicationAgentsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 24, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ReplicationAgentsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationAgentsInstance.setDescription('Instance name.')
ss2ReplicationAgentsRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 24, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2ReplicationAgentsRunning.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationAgentsRunning.setDescription('The number of replication agents currently running.')
ss2ReplicationDistTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 25), )
if mibBuilder.loadTexts: ss2ReplicationDistTable.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationDistTable.setDescription("A table containing performance information for instances of 'Replication Dist.' objects.")
ss2ReplicationDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 25, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2rdInstance"))
if mibBuilder.loadTexts: ss2ReplicationDistEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationDistEntry.setDescription("Performance information for one particular instance of 'Replication Dist.' object.")
ss2rdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 25, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rdInstance.setStatus('current')
if mibBuilder.loadTexts: ss2rdInstance.setDescription('Instance name.')
ss2rdDistDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rdDistDeliveredCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rdDistDeliveredCmdsPerSec.setDescription('The number of commands per second delivered to the Subscriber.')
ss2rdDistDeliveredTransPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 25, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rdDistDeliveredTransPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rdDistDeliveredTransPerSec.setDescription('The number of transactions per second delivered to the Subscriber.')
ss2rdDistDeliveryLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rdDistDeliveryLatency.setStatus('current')
if mibBuilder.loadTexts: ss2rdDistDeliveryLatency.setDescription('The current amount of time, in milliseconds, elapsed from when transactions are delivered to the Distributor to when they are applied at the Subscriber.')
ss2ReplicationLogreaderTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 26), )
if mibBuilder.loadTexts: ss2ReplicationLogreaderTable.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationLogreaderTable.setDescription("A table containing performance information for instances of 'Replication Logreader' objects.")
ss2ReplicationLogreaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 26, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2rlInstance"))
if mibBuilder.loadTexts: ss2ReplicationLogreaderEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationLogreaderEntry.setDescription("Performance information for one particular instance of 'Replication Logreader' object.")
ss2rlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 26, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rlInstance.setStatus('current')
if mibBuilder.loadTexts: ss2rlInstance.setDescription('Instance name.')
ss2rlLogreaderDeliveredCmdsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rlLogreaderDeliveredCmdsSec.setStatus('current')
if mibBuilder.loadTexts: ss2rlLogreaderDeliveredCmdsSec.setDescription('The number of commands second delivered to the Distributor.')
ss2rlLogreaderDeliveredTransSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rlLogreaderDeliveredTransSec.setStatus('current')
if mibBuilder.loadTexts: ss2rlLogreaderDeliveredTransSec.setDescription('The number of transactions second delivered to the Distributor.')
ss2rlLogreaderDeliveryLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rlLogreaderDeliveryLatency.setStatus('current')
if mibBuilder.loadTexts: ss2rlLogreaderDeliveryLatency.setDescription('The current amount of time, in milliseconds, elapsed from when transactions are applied at the Publisher to when they are delivered to the Distributor.')
ss2ReplicationMergeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 27), )
if mibBuilder.loadTexts: ss2ReplicationMergeTable.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationMergeTable.setDescription("A table containing performance information for instances of 'Replication Merge' objects.")
ss2ReplicationMergeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 27, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2rmInstance"))
if mibBuilder.loadTexts: ss2ReplicationMergeEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationMergeEntry.setDescription("Performance information for one particular instance of 'Replication Merge' object.")
ss2rmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 27, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rmInstance.setStatus('current')
if mibBuilder.loadTexts: ss2rmInstance.setDescription('Instance name.')
ss2rmConflictsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 27, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rmConflictsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rmConflictsPerSec.setDescription('The number of conflicts per second occurring during the merge process.')
ss2rmDownloadedChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 27, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rmDownloadedChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rmDownloadedChangesPerSec.setDescription('The number of rows per second merged from the Publisher to the Subscriber.')
ss2rmUploadedChangesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 27, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rmUploadedChangesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rmUploadedChangesPerSec.setDescription('The number of rows per second merged from the Subscriber to the Publisher.')
ss2ReplicationSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 28), )
if mibBuilder.loadTexts: ss2ReplicationSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationSnapshotTable.setDescription("A table containing performance information for instances of 'Replication Snapshot' objects.")
ss2ReplicationSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 28, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2rsInstance"))
if mibBuilder.loadTexts: ss2ReplicationSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ReplicationSnapshotEntry.setDescription("Performance information for one particular instance of 'Replication Snapshot' object.")
ss2rsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 28, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2rsInstance.setDescription('Instance name.')
ss2rsSnapshotDeliveredCmdsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 28, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rsSnapshotDeliveredCmdsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rsSnapshotDeliveredCmdsPerSec.setDescription('The number of commands per second delivered to the Distributor.')
ss2rsSnapshotDeliveredTransSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 28, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rsSnapshotDeliveredTransSec.setStatus('current')
if mibBuilder.loadTexts: ss2rsSnapshotDeliveredTransSec.setDescription('The number of transactions second delivered to the Distributor.')
ss2ResourcePoolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29), )
if mibBuilder.loadTexts: ss2ResourcePoolStatsTable.setStatus('current')
if mibBuilder.loadTexts: ss2ResourcePoolStatsTable.setDescription("A table containing performance information for instances of 'Resource Pool Stats' objects.")
ss2ResourcePoolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2rpsInstance"))
if mibBuilder.loadTexts: ss2ResourcePoolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2ResourcePoolStatsEntry.setDescription("Performance information for one particular instance of 'Resource Pool Stats' object.")
ss2rpsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2rpsInstance.setDescription('Instance name.')
ss2rpsActiveMemoryGrantAmountKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsActiveMemoryGrantAmountKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsActiveMemoryGrantAmountKB.setDescription('Total amount of granted memory in kilobytes in the resource pool.')
ss2rpsActiveMemoryGrantsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsActiveMemoryGrantsCount.setStatus('current')
if mibBuilder.loadTexts: ss2rpsActiveMemoryGrantsCount.setDescription('Number of query memory grants in the resource pool.')
ss2rpsCPUControlEffectPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsCPUControlEffectPercent.setStatus('current')
if mibBuilder.loadTexts: ss2rpsCPUControlEffectPercent.setDescription('Effect of the resource governor on the resource pool calculated as (CPU usage %) / (CPU usage % without RG).')
ss2rpsCPUUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsCPUUsagePercent.setStatus('current')
if mibBuilder.loadTexts: ss2rpsCPUUsagePercent.setDescription('System CPU usage by all requests in the specified instance of the performance object.')
ss2rpsCPUUsageTargetPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsCPUUsageTargetPercent.setStatus('current')
if mibBuilder.loadTexts: ss2rpsCPUUsageTargetPercent.setDescription("Target value of 'CPU usage %' for the resource pool based on the configuration settings and the system load.")
ss2rpsCacheMemoryTargetKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsCacheMemoryTargetKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsCacheMemoryTargetKB.setDescription('Current memory target for cache memory in kilobytes.')
ss2rpsCompileMemoryTargetKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsCompileMemoryTargetKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsCompileMemoryTargetKB.setDescription('Current memory target for query compile in kilobytes.')
ss2rpsMaxMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsMaxMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsMaxMemoryKB.setDescription('Maximum amount of memory in kilobytes the resource pool can have based on the settings and server state.')
ss2rpsMemoryGrantTimeoutsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsMemoryGrantTimeoutsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rpsMemoryGrantTimeoutsPerSec.setDescription('Number of query memory grant timeouts per second occurring in the resource pool.')
ss2rpsMemoryGrantsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsMemoryGrantsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2rpsMemoryGrantsPerSec.setDescription('Number of query memory grants per second occurring in the resource pool.')
ss2rpsPendingMemoryGrantsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsPendingMemoryGrantsCount.setStatus('current')
if mibBuilder.loadTexts: ss2rpsPendingMemoryGrantsCount.setDescription('Number of queries waiting for memory grants in the resource pool.')
ss2rpsQueryExecMemoryTargetKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsQueryExecMemoryTargetKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsQueryExecMemoryTargetKB.setDescription('Current memory target for query execution memory grant in kilobytes.')
ss2rpsTargetMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsTargetMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsTargetMemoryKB.setDescription('Target amount of memory in kilobytes the resource pool is trying to attain based on the settings and server state.')
ss2rpsUsedMemoryKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 29, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2rpsUsedMemoryKB.setStatus('current')
if mibBuilder.loadTexts: ss2rpsUsedMemoryKB.setDescription('Used amount of memory in kilobytes in the resource pool.')
ss2SQLErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 30), )
if mibBuilder.loadTexts: ss2SQLErrorsTable.setStatus('current')
if mibBuilder.loadTexts: ss2SQLErrorsTable.setDescription('The SQL Errors object in Microsoft SQL Server provides counters to monitor SQL Errors.')
ss2SQLErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 30, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2SQLErrorsInstance"))
if mibBuilder.loadTexts: ss2SQLErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2SQLErrorsEntry.setDescription("Performance information for one particular instance of 'SQL Errors' object.")
ss2SQLErrorsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 30, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SQLErrorsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2SQLErrorsInstance.setDescription('Instance name.')
ss2SQLErrorsErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 30, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SQLErrorsErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2SQLErrorsErrorsPerSec.setDescription('Number of errors/sec')
ss2SQLStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31), )
if mibBuilder.loadTexts: ss2SQLStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2SQLStatisticsTable.setDescription("The SQL Statistics object in SQL Server provides counters to monitor compilation and the type of requests sent to an instance of SQL Server. Monitoring the number of query compilations and recompilations and the number of batches received by an instance of SQL Server gives you an indication of how quickly SQL Server is processing user queries and how effectively the query optimizer is processing the queries. Compilation is a significant part of a query's turnaround time. In order to save the compilation cost, the Database Engine saves the compiled query plan in a query cache. The objective of the cache is to reduce compilation by storing compiled queries for later reuse, therefore ending the requirement to recompile queries when later executed. However, each unique query must be compiled at least one time. Query recompilations can be caused by the following factors: * Schema changes, including base schema changes such as adding columns or indexes to a table, or statistics schema changes such as inserting or deleting a significant number of rows from a table. * Environment (SET statement) changes. Changes in session settings such as ANSI_PADDING or ANSI_NULLS can cause a query to be recompiled.")
ss2SQLStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2SQLStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2SQLStatisticsEntry.setDescription('Performance information for one SQL Server SQLStatistics instance.')
ss2sqsAutoParamAttemptsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsAutoParamAttemptsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsAutoParamAttemptsPerSec.setDescription('Number of auto-parameterization attempts.')
ss2sqsBatchRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsBatchRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsBatchRequestsPerSec.setDescription('Number of SQL batch requests received by server.')
ss2sqsFailedAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsFailedAutoParamsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsFailedAutoParamsPerSec.setDescription('Number of failed auto-parameterizations.')
ss2sqsForcedParameterizationsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsForcedParameterizationsSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsForcedParameterizationsSec.setDescription('Number of statements parameterized by forced parameterization second.')
ss2sqsGuidedPlanExecutionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsGuidedPlanExecutionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsGuidedPlanExecutionsPerSec.setDescription('Number of plan executions per second in which the query plan has been generated by using a plan guide.')
ss2sqsMisguidedPlanExecutionsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsMisguidedPlanExecutionsSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsMisguidedPlanExecutionsSec.setDescription('Number of plan executions second in which a plan guide could not be honored during plan generation. The plan guide was disregarded and normal compilation was used to generate the executed plan.')
ss2sqsSQLAttentionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsSQLAttentionRate.setStatus('current')
if mibBuilder.loadTexts: ss2sqsSQLAttentionRate.setDescription('Number of attentions per second.')
ss2sqsSQLCompilationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsSQLCompilationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsSQLCompilationsPerSec.setDescription('Number of SQL compilations.')
ss2sqsSQLReCompilationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsSQLReCompilationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsSQLReCompilationsPerSec.setDescription('Number of SQL re-compiles.')
ss2sqsSafeAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsSafeAutoParamsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsSafeAutoParamsPerSec.setDescription('Number of safe auto-parameterizations.')
ss2sqsUnsafeAutoParamsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 31, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2sqsUnsafeAutoParamsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2sqsUnsafeAutoParamsPerSec.setDescription('Number of unsafe auto-parameterizations.')
ss2SSISPipelineTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32), )
if mibBuilder.loadTexts: ss2SSISPipelineTable.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineTable.setDescription("A table containing performance information for instances of 'SSIS Pipeline' objects.")
ss2SSISPipelineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2SSISPipelineEntry.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineEntry.setDescription("Performance information for one particular instance of 'SSIS Pipeline' object.")
ss2SSISPipelineBLOBBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineBLOBBytesRead.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineBLOBBytesRead.setDescription('The number of BLOB bytes read from all data sources in total.')
ss2SSISPipelineBLOBBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineBLOBBytesWritten.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineBLOBBytesWritten.setDescription('The number of BLOB bytes written to all data sources in total.')
ss2SSISPipelineBLOBFilesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineBLOBFilesInUse.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineBLOBFilesInUse.setDescription('The number of BLOB spooling files in use throughout the pipeline.')
ss2SSISPipelineBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineBufferMemory.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineBufferMemory.setDescription('The amount of memory allocated to buffers in the pipeline.')
ss2SSISPipelineBuffersInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineBuffersInUse.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineBuffersInUse.setDescription('The number of pipeline buffers in use throughout the pipeline.')
ss2SSISPipelineBuffersSpooled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineBuffersSpooled.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineBuffersSpooled.setDescription('The number of buffers spooled to disk.')
ss2SSISPipelineFlatBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineFlatBufferMemory.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineFlatBufferMemory.setDescription('The amount of memory allocated to flat memory buffers.')
ss2SSISPipelineFlatBuffersInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineFlatBuffersInUse.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineFlatBuffersInUse.setDescription('The number of flat memory buffers in use throughout the pipeline.')
ss2SSISPipelinePrivateBuffMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelinePrivateBuffMemory.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelinePrivateBuffMemory.setDescription('The amount of memory allocated to private transformation buffers.')
ss2SSISPipelinePrivateBuffersUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelinePrivateBuffersUse.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelinePrivateBuffersUse.setDescription('The number of private transformation buffers in use throughout the pipeline.')
ss2SSISPipelineRowsRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineRowsRead.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineRowsRead.setDescription('The number of rows read from all data sources in total.')
ss2SSISPipelineRowsWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISPipelineRowsWritten.setStatus('current')
if mibBuilder.loadTexts: ss2SSISPipelineRowsWritten.setDescription('The number of rows written to all data destinations in total.')
ss2SSISServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 33), )
if mibBuilder.loadTexts: ss2SSISServiceTable.setStatus('current')
if mibBuilder.loadTexts: ss2SSISServiceTable.setDescription("A table containing performance information for instances of 'SSIS Service' objects.")
ss2SSISServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 33, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2SSISServiceEntry.setStatus('current')
if mibBuilder.loadTexts: ss2SSISServiceEntry.setDescription("Performance information for one particular instance of 'SSIS Service' object.")
ss2SSISServiceSSISPackageInstanc = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 33, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2SSISServiceSSISPackageInstanc.setStatus('current')
if mibBuilder.loadTexts: ss2SSISServiceSSISPackageInstanc.setDescription('The number of package instances currently running.')
ss2TraceEventStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34), )
if mibBuilder.loadTexts: ss2TraceEventStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2TraceEventStatisticsTable.setDescription("A table containing performance information for instances of 'Trace Event Statistics' objects.")
ss2TraceEventStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2tesInstance"))
if mibBuilder.loadTexts: ss2TraceEventStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2TraceEventStatisticsEntry.setDescription("Performance information for one particular instance of 'Trace Event Statistics' object.")
ss2tesInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tesInstance.setStatus('current')
if mibBuilder.loadTexts: ss2tesInstance.setDescription('Instance name.')
ss2tesBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tesBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tesBytesPerSec.setDescription('Bytes transferred by this trace per second')
ss2tesCPUTicksPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tesCPUTicksPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tesCPUTicksPerSec.setDescription('CPU usage per second (Requires -T1904)')
ss2tesEventsFilteredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tesEventsFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tesEventsFilteredPerSec.setDescription('Events filtered per second')
ss2tesEventsFiredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tesEventsFiredPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tesEventsFiredPerSec.setDescription('Events fired by this trace per second')
ss2tesEventsPrefilteredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 34, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tesEventsPrefilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tesEventsPrefilteredPerSec.setDescription('Prefiltered events per second')
ss2TraceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35), )
if mibBuilder.loadTexts: ss2TraceStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2TraceStatisticsTable.setDescription("A table containing performance information for instances of 'Trace Statistics' objects.")
ss2TraceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2tstInstance"))
if mibBuilder.loadTexts: ss2TraceStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2TraceStatisticsEntry.setDescription("Performance information for one particular instance of 'Trace Statistics' object.")
ss2tstInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tstInstance.setStatus('current')
if mibBuilder.loadTexts: ss2tstInstance.setDescription('Instance name.')
ss2tstBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tstBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tstBytesPerSec.setDescription('Bytes transferred by this trace per second')
ss2tstDroppedEventsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tstDroppedEventsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tstDroppedEventsPerSec.setDescription('Events dropped by this trace per second')
ss2tstEventsFilteredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tstEventsFilteredPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tstEventsFilteredPerSec.setDescription('Events filtered per second')
ss2tstEventsFiredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 35, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2tstEventsFiredPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2tstEventsFiredPerSec.setDescription('Events fired by this trace per second')
ss2TransactionsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36), )
if mibBuilder.loadTexts: ss2TransactionsTable.setStatus('current')
if mibBuilder.loadTexts: ss2TransactionsTable.setDescription('The Transactions object in Microsoft SQL Server provides counters to monitor the number of transactions active in an instance of the Database Engine, and the effects of those transactions on resources such as the snapshot isolation row version store in tempdb. Transactions are logical units of work; a set of operations that must either all succeed or all be erased from a database in order to maintain the logical integrity of the data. All modifications of data in SQL Server databases are made in transactions. When a database is set to allow snapshot isolation level, SQL Server must maintain a record of the modifications made to each row in a database. Each time a row is modified, a copy of the row as it existed before the modification is recorded in a row version store in tempdb. Many of the counters in the Transaction object can be used to monitor the size and rate of growth of the row version store in tempdb. The Transactions object counters report all transactions in one instance of the Database Engine.')
ss2TransactionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"))
if mibBuilder.loadTexts: ss2TransactionsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2TransactionsEntry.setDescription('Performance information for one SQL Server Transactions instance.')
ss2trnFreeSpaceInTempdbKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnFreeSpaceInTempdbKB.setStatus('current')
if mibBuilder.loadTexts: ss2trnFreeSpaceInTempdbKB.setDescription('The free space in tempdb in KB.')
ss2trnLongestTransactRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnLongestTransactRunningTime.setStatus('current')
if mibBuilder.loadTexts: ss2trnLongestTransactRunningTime.setDescription('The longest running time of any transcation in seconds.')
ss2trnNonSnapshotVersionTransact = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnNonSnapshotVersionTransact.setStatus('current')
if mibBuilder.loadTexts: ss2trnNonSnapshotVersionTransact.setDescription('The total number of active non-snapshot transactions that generate version records.')
ss2trnSnapshotTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnSnapshotTransactions.setStatus('current')
if mibBuilder.loadTexts: ss2trnSnapshotTransactions.setDescription('The total number of active snapshot transactions.')
ss2trnTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnTransactions.setStatus('current')
if mibBuilder.loadTexts: ss2trnTransactions.setDescription('Number of transaction enlistments (local, dtc, and bound).')
ss2trnUpdateSnapshotTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnUpdateSnapshotTransactions.setStatus('current')
if mibBuilder.loadTexts: ss2trnUpdateSnapshotTransactions.setDescription('The total number of active snapshot transactions that do updates.')
ss2trnUpdateConflictRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnUpdateConflictRatio.setStatus('current')
if mibBuilder.loadTexts: ss2trnUpdateConflictRatio.setDescription('The fraction of update snapshot transactions that have update conflicts to the total number of update snapshot transactions.')
ss2trnVersionCleanupRateKBPerS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnVersionCleanupRateKBPerS.setStatus('current')
if mibBuilder.loadTexts: ss2trnVersionCleanupRateKBPerS.setDescription('The version cleanup rate in KB per seconds.')
ss2trnVersionGenerationRateKBS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnVersionGenerationRateKBS.setStatus('current')
if mibBuilder.loadTexts: ss2trnVersionGenerationRateKBS.setDescription('The version generation rate in KB seconds.')
ss2trnVersionStoreSizeKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnVersionStoreSizeKB.setStatus('current')
if mibBuilder.loadTexts: ss2trnVersionStoreSizeKB.setDescription('The size of the version store in KB.')
ss2trnVersionStoreUnitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnVersionStoreUnitCount.setStatus('current')
if mibBuilder.loadTexts: ss2trnVersionStoreUnitCount.setDescription('Number of unit in Version Store.')
ss2trnVersionStoreUnitCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnVersionStoreUnitCreation.setStatus('current')
if mibBuilder.loadTexts: ss2trnVersionStoreUnitCreation.setDescription('Creation of new unit in Version Store.')
ss2trnVersionStoreUnitTruncation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 36, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2trnVersionStoreUnitTruncation.setStatus('current')
if mibBuilder.loadTexts: ss2trnVersionStoreUnitTruncation.setDescription('Truncation of unit in Version Store.')
ss2UserSettableTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 37), )
if mibBuilder.loadTexts: ss2UserSettableTable.setStatus('current')
if mibBuilder.loadTexts: ss2UserSettableTable.setDescription('The User Settable object in Microsoft SQL Server allows you to create custom counter instances. Use custom counter instances to monitor aspects of the server not monitored by existing counters, such as components unique to your SQL Server database (for example, the number of customer orders logged or the product inventory). The User Settable object contains 10 instances of the query counter: User counter 1 through User counter 10. These counters map to the SQL Server stored procedures sp_user_counter1 through sp_user_counter10. As these stored procedures are executed by user applications, the values set by the stored procedures are displayed in System Monitor. A counter can monitor any single integer value (for example, a stored procedure that counts how many orders for a particular product have occurred in one day).')
ss2UserSettableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 37, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2UserSettableInstance"))
if mibBuilder.loadTexts: ss2UserSettableEntry.setStatus('current')
if mibBuilder.loadTexts: ss2UserSettableEntry.setDescription("Performance information for one particular instance of 'User Settable' object.")
ss2UserSettableInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 37, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2UserSettableInstance.setStatus('current')
if mibBuilder.loadTexts: ss2UserSettableInstance.setDescription('Instance name.')
ss2UserSettableQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 37, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2UserSettableQuery.setStatus('current')
if mibBuilder.loadTexts: ss2UserSettableQuery.setDescription('As defined by the user.')
ss2WaitStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38), )
if mibBuilder.loadTexts: ss2WaitStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ss2WaitStatisticsTable.setDescription('The Wait Statistics performance object contains performance counters that report information about wait status.')
ss2WaitStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2wsInstance"))
if mibBuilder.loadTexts: ss2WaitStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2WaitStatisticsEntry.setDescription("Performance information for one particular instance of 'Wait Statistics' object.")
ss2wsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2wsInstance.setDescription('Instance name.')
ss2wsLockWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsLockWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsLockWaits.setDescription('Statistics for processes waiting on a lock.')
ss2wsLogBufferWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsLogBufferWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsLogBufferWaits.setDescription('Statistics for processes waiting for log buffer to be available.')
ss2wsLogWriteWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsLogWriteWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsLogWriteWaits.setDescription('Statistics for processes waiting for log buffer to be written.')
ss2wsMemoryGrantQueueWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsMemoryGrantQueueWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsMemoryGrantQueueWaits.setDescription('Statistics for processes waiting for memory grant to become available.')
ss2wsNetworkIOWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsNetworkIOWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsNetworkIOWaits.setDescription('Statistics relevant to wait on network IO.')
ss2wsNonPageLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsNonPageLatchWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsNonPageLatchWaits.setDescription('Statistics relevant to non-page latches.')
ss2wsPageIOLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsPageIOLatchWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsPageIOLatchWaits.setDescription('Statistics relevant to page IO latches.')
ss2wsPageLatchWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsPageLatchWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsPageLatchWaits.setDescription('Statistics relevant to page latches, not including IO latches')
ss2wsThreadSafeMemoryObjectsWait = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsThreadSafeMemoryObjectsWait.setStatus('current')
if mibBuilder.loadTexts: ss2wsThreadSafeMemoryObjectsWait.setDescription('Statistics for processes waiting on thread-safe memory allocators.')
ss2wsTransactionOwnershipWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsTransactionOwnershipWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsTransactionOwnershipWaits.setDescription('Statistics relevant to processes synchronizing access to transaction.')
ss2wsWaitForTheWorker = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsWaitForTheWorker.setStatus('current')
if mibBuilder.loadTexts: ss2wsWaitForTheWorker.setDescription('Statistics relevant to processes waiting for worker to become available.')
ss2wsWorkspaceSynchronizatWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 38, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wsWorkspaceSynchronizatWaits.setStatus('current')
if mibBuilder.loadTexts: ss2wsWorkspaceSynchronizatWaits.setDescription('Statistics relevant to processes synchronizing access to workspace.')
ss2WorkloadGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39), )
if mibBuilder.loadTexts: ss2WorkloadGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: ss2WorkloadGroupStatsTable.setDescription("A table containing performance information for instances of 'Workload Group Stats' objects.")
ss2WorkloadGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "ss2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "ss2wgsInstance"))
if mibBuilder.loadTexts: ss2WorkloadGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ss2WorkloadGroupStatsEntry.setDescription("Performance information for one particular instance of 'Workload Group Stats' object.")
ss2wgsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsInstance.setStatus('current')
if mibBuilder.loadTexts: ss2wgsInstance.setDescription('Instance name.')
ss2wgsActiveParallelThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsActiveParallelThreads.setStatus('current')
if mibBuilder.loadTexts: ss2wgsActiveParallelThreads.setDescription('Number of threads used by parallel queries in the workload group. Serial queries and the main thread of parallel queries are not included in this number.')
ss2wgsActiveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsActiveRequests.setStatus('current')
if mibBuilder.loadTexts: ss2wgsActiveRequests.setDescription('Number of currently running requests in the workload group.')
ss2wgsBlockedTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsBlockedTasks.setStatus('current')
if mibBuilder.loadTexts: ss2wgsBlockedTasks.setDescription('Number of blocked tasks in the workload group.')
ss2wgsCPUUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsCPUUsagePercent.setStatus('current')
if mibBuilder.loadTexts: ss2wgsCPUUsagePercent.setDescription('System CPU usage by all requests in the specified instance of the performance object.')
ss2wgsMaxRequestCpuTimeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsMaxRequestCpuTimeMs.setStatus('current')
if mibBuilder.loadTexts: ss2wgsMaxRequestCpuTimeMs.setDescription('Maximum CPU time in milliseconds used by a request in the workload group.')
ss2wgsMaxRequestMemoryGrantKB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsMaxRequestMemoryGrantKB.setStatus('current')
if mibBuilder.loadTexts: ss2wgsMaxRequestMemoryGrantKB.setDescription('Maximum value of memory grant in kilobytes used by a query in the workload group.')
ss2wgsQueryOptimizationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsQueryOptimizationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2wgsQueryOptimizationsPerSec.setDescription('Number of query optimizations per second occurring in the workload group.')
ss2wgsQueuedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsQueuedRequests.setStatus('current')
if mibBuilder.loadTexts: ss2wgsQueuedRequests.setDescription('Number of requests waiting in the queue due to resource governor limits in the workload group.')
ss2wgsReducedMemoryGrantsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsReducedMemoryGrantsPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2wgsReducedMemoryGrantsPerSec.setDescription('Number of queries per second getting less than ideal amount of memory in the workload group.')
ss2wgsRequestsCompletedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsRequestsCompletedPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2wgsRequestsCompletedPerSec.setDescription('Number of completed requests per second in the workload group.')
ss2wgsSuboptimalPlansPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 2, 39, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss2wgsSuboptimalPlansPerSec.setStatus('current')
if mibBuilder.loadTexts: ss2wgsSuboptimalPlansPerSec.setDescription('Number of suboptimal query plans generated per second in the workload group.')
sqlServerAgentV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3))
sa2NameTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 1), )
if mibBuilder.loadTexts: sa2NameTable.setStatus('current')
if mibBuilder.loadTexts: sa2NameTable.setDescription('This table contains the list of SQL Server Agent instance names installed. The ss2NameIndex is used to refer to all other SQL Server Agent SNMP entries.')
sa2NameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 1, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "sa2NameIndex"))
if mibBuilder.loadTexts: sa2NameEntry.setStatus('current')
if mibBuilder.loadTexts: sa2NameEntry.setDescription('Performance information for one SQL Server Agent name instance.')
sa2NameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2NameIndex.setStatus('current')
if mibBuilder.loadTexts: sa2NameIndex.setDescription('The index number associated with the instance name')
sa2NameInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 1, 1, 2), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2NameInstance.setStatus('current')
if mibBuilder.loadTexts: sa2NameInstance.setDescription('The name of the SQL Server Agent installed instance.')
sa2AlertsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 2), )
if mibBuilder.loadTexts: sa2AlertsTable.setStatus('current')
if mibBuilder.loadTexts: sa2AlertsTable.setDescription('The SQL Server Agent Alerts performance object contains performance counters that report information about SQL Server Agent alerts.')
sa2AlertsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 2, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "sa2NameIndex"))
if mibBuilder.loadTexts: sa2AlertsEntry.setStatus('current')
if mibBuilder.loadTexts: sa2AlertsEntry.setDescription("Performance information for one particular instance of 'Alerts' object.")
sa2AlertsActivatedAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2AlertsActivatedAlerts.setStatus('current')
if mibBuilder.loadTexts: sa2AlertsActivatedAlerts.setDescription('The number of Alerts that have activated since the last SQL Server restart.')
sa2AlertsAlertsActivatedMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2AlertsAlertsActivatedMinute.setStatus('current')
if mibBuilder.loadTexts: sa2AlertsAlertsActivatedMinute.setDescription('The number of Alerts that have activated within the last minute.')
sa2JobsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3), )
if mibBuilder.loadTexts: sa2JobsTable.setStatus('current')
if mibBuilder.loadTexts: sa2JobsTable.setDescription('The SQL Server Agent Jobs performance object contains performance counters that report information about SQL Server Agent jobs.')
sa2JobsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "sa2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "sa2JobsInstance"))
if mibBuilder.loadTexts: sa2JobsEntry.setStatus('current')
if mibBuilder.loadTexts: sa2JobsEntry.setDescription("Performance information for one particular instance of 'Jobs' object.")
sa2JobsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsInstance.setStatus('current')
if mibBuilder.loadTexts: sa2JobsInstance.setDescription('Instance name.')
sa2JobsActiveJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsActiveJobs.setStatus('current')
if mibBuilder.loadTexts: sa2JobsActiveJobs.setDescription('Number of running jobs.')
sa2JobsFailedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsFailedJobs.setStatus('current')
if mibBuilder.loadTexts: sa2JobsFailedJobs.setDescription('Number of failed jobs.')
sa2JobsJobSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsJobSuccessRate.setStatus('current')
if mibBuilder.loadTexts: sa2JobsJobSuccessRate.setDescription('Percentage of successful jobs from the total number of executed jobs.')
sa2JobsJobsActivatedPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsJobsActivatedPerMinute.setStatus('current')
if mibBuilder.loadTexts: sa2JobsJobsActivatedPerMinute.setDescription('Number of jobs activated within the last minute.')
sa2JobsQueuedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsQueuedJobs.setStatus('current')
if mibBuilder.loadTexts: sa2JobsQueuedJobs.setDescription('Number of jobs queued.')
sa2JobsSuccessfulJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobsSuccessfulJobs.setStatus('current')
if mibBuilder.loadTexts: sa2JobsSuccessfulJobs.setDescription('Number of successful jobs.')
sa2JobStepsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 4), )
if mibBuilder.loadTexts: sa2JobStepsTable.setStatus('current')
if mibBuilder.loadTexts: sa2JobStepsTable.setDescription('The SQL Server Agent JobSteps performance object contains performance counters that report information about SQL Server Agent job steps.')
sa2JobStepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 4, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "sa2NameIndex"), (0, "INFORMANT-SQLSERVER-V2", "sa2JobStepsInstance"))
if mibBuilder.loadTexts: sa2JobStepsEntry.setStatus('current')
if mibBuilder.loadTexts: sa2JobStepsEntry.setDescription("Performance information for one particular instance of 'JobSteps' object.")
sa2JobStepsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 4, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobStepsInstance.setStatus('current')
if mibBuilder.loadTexts: sa2JobStepsInstance.setDescription('Instance name.')
sa2JobStepsActiveSteps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobStepsActiveSteps.setStatus('current')
if mibBuilder.loadTexts: sa2JobStepsActiveSteps.setDescription('Number of active steps.')
sa2JobStepsQueuedSteps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobStepsQueuedSteps.setStatus('current')
if mibBuilder.loadTexts: sa2JobStepsQueuedSteps.setDescription('Number of queued steps.')
sa2JobStepsTotalStepRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2JobStepsTotalStepRetries.setStatus('current')
if mibBuilder.loadTexts: sa2JobStepsTotalStepRetries.setDescription('The total number of times any Job Step execution is retried since the last SQL Server restart.')
sa2StatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 5), )
if mibBuilder.loadTexts: sa2StatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sa2StatisticsTable.setDescription('The SQL Server Agent Statistics performance object contains performance counters that report information about SQL Server Agent.')
sa2StatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 5, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "sa2NameIndex"))
if mibBuilder.loadTexts: sa2StatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sa2StatisticsEntry.setDescription("Performance information for one particular instance of 'Statistics' object.")
sa2StatisticsSQLServerRestarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 3, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sa2StatisticsSQLServerRestarted.setStatus('current')
if mibBuilder.loadTexts: sa2StatisticsSQLServerRestarted.setDescription('The number of times the SQL Server has been successfully restarted by SQL Server Agent, since the last SQL Server Agent restart.')
reportingServicesV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4))
rs2WebService = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1))
rs2wbsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: rs2wbsActiveSessions.setDescription('Number of active sessions.')
rs2wbsCacheHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsCacheHitsPerSec.setDescription('Number of report server cache hits per second.')
rs2wbsCacheHitsSecSemanticModels = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsCacheHitsSecSemanticModels.setStatus('current')
if mibBuilder.loadTexts: rs2wbsCacheHitsSecSemanticModels.setDescription('Number of times second that models can be retrieved from the cache.')
rs2wbsCacheMissesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsCacheMissesPerSec.setDescription('Number of times per second that reports cannot be retrieved from cache.')
rs2wbsCacheMissesSecSemantModels = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsCacheMissesSecSemantModels.setStatus('current')
if mibBuilder.loadTexts: rs2wbsCacheMissesSecSemantModels.setDescription('Number of times second that models cannot be retrieved from the cache.')
rs2wbsFirstSessionRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsFirstSessionRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsFirstSessionRequestsPerSec.setDescription('Number of new user sessions that are started per second.')
rs2wbsMemoryCacheHitsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsMemoryCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsMemoryCacheHitsPerSec.setDescription('Number of times per second that reports can be retrieved from the in memory cache.')
rs2wbsMemoryCacheMissPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsMemoryCacheMissPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsMemoryCacheMissPerSec.setDescription('Number of times per second that reports cannot be retrieved from the in memory cache.')
rs2wbsNextSessionRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsNextSessionRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsNextSessionRequestsPerSec.setDescription('Number of requests per second for reports that are open in an existing session.')
rs2wbsReportRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsReportRequests.setStatus('current')
if mibBuilder.loadTexts: rs2wbsReportRequests.setDescription('Number of active report requests.')
rs2wbsReportsExecutedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsReportsExecutedPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsReportsExecutedPerSec.setDescription('Number of reports executed per second.')
rs2wbsRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wbsRequestsPerSec.setDescription('Number of requests per second.')
rs2wbsTotalCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalCacheHits.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalCacheHits.setDescription('Total number of report server cache hits.')
rs2wbsTotalCacheHitSemanticModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalCacheHitSemanticModel.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalCacheHitSemanticModel.setDescription('Total number of cache hits made in the model cache.')
rs2wbsTotalCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalCacheMisses.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalCacheMisses.setDescription('Total number of cache misses.')
rs2wbsTotalCachMissSemanticModel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalCachMissSemanticModel.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalCachMissSemanticModel.setDescription('Total number of cache misses made in the model cache.')
rs2wbsTotalMemoryCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalMemoryCacheHits.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalMemoryCacheHits.setDescription('Total number of cache hits made in the in memory cache.')
rs2wbsTotalMemoryCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalMemoryCacheMisses.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalMemoryCacheMisses.setDescription('Total number of cache misses made in the in memory cache.')
rs2wbsTotalProcessingFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalProcessingFailures.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalProcessingFailures.setDescription('Total number of processing failures.')
rs2wbsTotalRejectedThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalRejectedThreads.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalRejectedThreads.setDescription('Total number of rejected threads as a result of thread pressure.')
rs2wbsTotalReportsExecute = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalReportsExecute.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalReportsExecute.setDescription('Total number of reports executed.')
rs2wbsTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wbsTotalRequests.setStatus('current')
if mibBuilder.loadTexts: rs2wbsTotalRequests.setDescription('Total number of requests being processed.')
rs2WindowsServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2), )
if mibBuilder.loadTexts: rs2WindowsServiceTable.setStatus('current')
if mibBuilder.loadTexts: rs2WindowsServiceTable.setDescription("A table containing performance information for instances of 'MSRS Windows Service' objects.")
rs2WindowsServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "rs2wnsInstance"))
if mibBuilder.loadTexts: rs2WindowsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: rs2WindowsServiceEntry.setDescription("Performance information for one particular instance of 'MSRS Windows Service' object.")
rs2wnsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsInstance.setStatus('current')
if mibBuilder.loadTexts: rs2wnsInstance.setDescription('Instance name.')
rs2wnsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: rs2wnsActiveSessions.setDescription('Number of active sessions.')
rs2wnsCacheFlushesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsCacheFlushesPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsCacheFlushesPerSec.setDescription('Number of cache flushes per second.')
rs2wnsCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsCacheHitsPerSec.setDescription('Number of report server cache hits per second.')
rs2wnsCacheHitsSecSemanticModels = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsCacheHitsSecSemanticModels.setStatus('current')
if mibBuilder.loadTexts: rs2wnsCacheHitsSecSemanticModels.setDescription('Number of times second that models can be retrieved from the cache.')
rs2wnsCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsCacheMissesPerSec.setDescription('Number of times per second that reports cannot be retrieved from cache.')
rs2wnsCacheMissSecSemanticModels = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsCacheMissSecSemanticModels.setStatus('current')
if mibBuilder.loadTexts: rs2wnsCacheMissSecSemanticModels.setDescription('Number of times second that models cannot be retrieved from the cache.')
rs2wnsDeliversPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsDeliversPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsDeliversPerSec.setDescription('Number of delivers deliveries per second.')
rs2wnsEventsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsEventsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsEventsPerSec.setDescription('Number of events per second.')
rs2wnsFirstSessionRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsFirstSessionRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsFirstSessionRequestsPerSec.setDescription('Number of new user sessions that are started per second.')
rs2wnsMemoryCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsMemoryCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsMemoryCacheHitsPerSec.setDescription('Number of times per second that reports can be retrieved from the in memory cache.')
rs2wnsMemoryCacheMissPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsMemoryCacheMissPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsMemoryCacheMissPerSec.setDescription('Number of times per second that reports cannot be retrieved from the in memory cache.')
rs2wnsNextSessionRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsNextSessionRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsNextSessionRequestsPerSec.setDescription('Number of requests per second for reports that are open in an existing session.')
rs2wnsReportRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsReportRequests.setStatus('current')
if mibBuilder.loadTexts: rs2wnsReportRequests.setDescription('Number of active report requests.')
rs2wnsReportsExecutedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsReportsExecutedPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsReportsExecutedPerSec.setDescription('Number of reports executed per second.')
rs2wnsRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsRequestsPerSec.setDescription('Number of requests per second.')
rs2wnsSnapshotUpdatesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsSnapshotUpdatesPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2wnsSnapshotUpdatesPerSec.setDescription('Number of snapshot updates per second.')
rs2wnsTotalAppDomainRecycles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalAppDomainRecycles.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalAppDomainRecycles.setDescription('Total number of application domain recycles.')
rs2wnsTotalCacheFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalCacheFlushes.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalCacheFlushes.setDescription('Total number of report execution server cache updates.')
rs2wnsTotalCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalCacheHits.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalCacheHits.setDescription('Total number of report server cache hits.')
rs2wnsTotalCacheHitSemanticModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalCacheHitSemanticModel.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalCacheHitSemanticModel.setDescription('Total number of cache hits made in the model cache.')
rs2wnsTotalCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalCacheMisses.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalCacheMisses.setDescription('Total number of cache misses.')
rs2wnsTotalCachMissSemanticModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalCachMissSemanticModel.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalCachMissSemanticModel.setDescription('Total number of cache misses made in the model cache.')
rs2wnsTotalDeliveries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalDeliveries.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalDeliveries.setDescription('Total number of deliveries.')
rs2wnsTotalEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalEvents.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalEvents.setDescription('Total number of events.')
rs2wnsTotalMemoryCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalMemoryCacheHits.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalMemoryCacheHits.setDescription('Total number of cache hits made in the in memory cache.')
rs2wnsTotalMemoryCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalMemoryCacheMisses.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalMemoryCacheMisses.setDescription('Total number of cache misses made in the in memory cache.')
rs2wnsTotalProcessingFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalProcessingFailures.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalProcessingFailures.setDescription('Total number of processing failures.')
rs2wnsTotalRejectedThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalRejectedThreads.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalRejectedThreads.setDescription('Total number of rejected threads as a result of thread pressure.')
rs2wnsTotalReportsExecuted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalReportsExecuted.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalReportsExecuted.setDescription('Total number of reports executed.')
rs2wnsTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalRequests.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalRequests.setDescription('Total number of requests being processed.')
rs2wnsTotalSnapshotUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2wnsTotalSnapshotUpdates.setStatus('current')
if mibBuilder.loadTexts: rs2wnsTotalSnapshotUpdates.setDescription('Total number of report execution snapshot updates.')
rs2ReportServerHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 3), )
if mibBuilder.loadTexts: rs2ReportServerHTTPTable.setStatus('current')
if mibBuilder.loadTexts: rs2ReportServerHTTPTable.setDescription('Statistics related to Report Server HTTP Service')
rs2ReportServerHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 3, 1), ).setIndexNames((0, "INFORMANT-SQLSERVER-V2", "rs2HTTPNameIndex"))
if mibBuilder.loadTexts: rs2ReportServerHTTPEntry.setStatus('current')
if mibBuilder.loadTexts: rs2ReportServerHTTPEntry.setDescription('Performance information for one SQL Server name instance.')
rs2HTTPNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2HTTPNameIndex.setStatus('current')
if mibBuilder.loadTexts: rs2HTTPNameIndex.setDescription('The index number associated with the instance name')
rs2HTTPNameInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 3, 1, 2), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2HTTPNameInstance.setStatus('current')
if mibBuilder.loadTexts: rs2HTTPNameInstance.setDescription('The name of the Report Server installed instance.')
rs2HTTPRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2HTTPRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: rs2HTTPRequestsPerSec.setDescription('Number of HTTP requests received.')
rs2HTTPTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 13, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs2HTTPTotalRequests.setStatus('current')
if mibBuilder.loadTexts: rs2HTTPTotalRequests.setDescription('Total number of HTTP requests received.')
mibBuilder.exportSymbols("INFORMANT-SQLSERVER-V2", ss2UserSettableInstance=ss2UserSettableInstance, ss2wsLogBufferWaits=ss2wsLogBufferWaits, ss2bmFreeListStallsPerSec=ss2bmFreeListStallsPerSec, ss2SSISPipelineRowsWritten=ss2SSISPipelineRowsWritten, ss2gsActiveTempTables=ss2gsActiveTempTables, rs2wnsActiveSessions=rs2wnsActiveSessions, as2memPotenMemAggregatMapFileKB=as2memPotenMemAggregatMapFileKB, ss2SSISPipelineTable=ss2SSISPipelineTable, ss2BrokerTOStatisticsEntry=ss2BrokerTOStatisticsEntry, as2memQuotaBlocked=as2memQuotaBlocked, ss2bsEnqueuedTransportMsgFragTot=ss2bsEnqueuedTransportMsgFragTot, ss2gsConnectionResetPerSec=ss2gsConnectionResetPerSec, ss2bsBrokerTransactionRollbacks=ss2bsBrokerTransactionRollbacks, analysisServicesV2=analysisServicesV2, ss2bdtCurrentBytesForSendIPerO=ss2bdtCurrentBytesForSendIPerO, ss2trnSnapshotTransactions=ss2trnSnapshotTransactions, ss2LatchesSuLatchDemotionsSec=ss2LatchesSuLatchDemotionsSec, ss2BufferManagerTable=ss2BufferManagerTable, as2paMemorySizeRows=as2paMemorySizeRows, sqlServerEngineV2=sqlServerEngineV2, ss2amByReferenceLobCreateCount=ss2amByReferenceLobCreateCount, as2seqCalculationCacheHitsPerSec=as2seqCalculationCacheHitsPerSec, ss2NameIndex=ss2NameIndex, as2seqDimensionQueriesPerSec=as2seqDimensionQueriesPerSec, as2seqTotalDimensionQueries=as2seqTotalDimensionQueries, ss2amFailedLeafPageCookie=ss2amFailedLeafPageCookie, ss2BackupDeviceDeviceputBytesSec=ss2BackupDeviceDeviceputBytesSec, ss2cmbtNumberOfActiveCursorPlans=ss2cmbtNumberOfActiveCursorPlans, as2ThdsQueryPoolJobQueueLength=as2ThdsQueryPoolJobQueueLength, ss2GeneralStatisticsTable=ss2GeneralStatisticsTable, as2ProcAggregationsTable=as2ProcAggregationsTable, rs2HTTPRequestsPerSec=rs2HTTPRequestsPerSec, ss2BufferNodeEntry=ss2BufferNodeEntry, ss2AccessMethodsEntry=ss2AccessMethodsEntry, ss2sqsSQLReCompilationsPerSec=ss2sqsSQLReCompilationsPerSec, ss2ReplicationLogreaderEntry=ss2ReplicationLogreaderEntry, as2memFilestoreClockPgValidSec=as2memFilestoreClockPgValidSec, ss2trnUpdateConflictRatio=ss2trnUpdateConflictRatio, rs2wnsNextSessionRequestsPerSec=rs2wnsNextSessionRequestsPerSec, ss2bsEnqueuedP7MessagesPerSec=ss2bsEnqueuedP7MessagesPerSec, ss2bsDequeuedTransmissionQMsgSec=ss2bsDequeuedTransmissionQMsgSec, ss2dbDBCCLogicalScanBytesPerSec=ss2dbDBCCLogicalScanBytesPerSec, as2memPotenMemDimenStringFileKB=as2memPotenMemDimenStringFileKB, ss2CursorManagerByTypeEntry=ss2CursorManagerByTypeEntry, ss2bmAWELookupMapsPerSec=ss2bmAWELookupMapsPerSec, ss2tesEventsPrefilteredPerSec=ss2tesEventsPrefilteredPerSec, ss2bdtPendingMsgFragForSendIO=ss2bdtPendingMsgFragForSendIO, as2ConnectionTable=as2ConnectionTable, as2memPotenMemDimenIndHashFilKB=as2memPotenMemDimenIndHashFilKB, ss2sqsAutoParamAttemptsPerSec=ss2sqsAutoParamAttemptsPerSec, ss2dmSendPerReceiveAckTime=ss2dmSendPerReceiveAckTime, sqlServerV2=sqlServerV2, ss2SSISPipelinePrivateBuffMemory=ss2SSISPipelinePrivateBuffMemory, as2CacheMissesPerSec=as2CacheMissesPerSec, ss2PlanCacheCacheObjectCounts=ss2PlanCacheCacheObjectCounts, as2MemoryEntry=as2MemoryEntry, as2memMemoryLimitHighKB=as2memMemoryLimitHighKB, as2seqDataBytesPerSec=as2seqDataBytesPerSec, ss2NameInstance=ss2NameInstance, as2seqDataReadsPerSec=as2seqDataReadsPerSec, as2ConnectionCurrentUserSessions=as2ConnectionCurrentUserSessions, ss2cmbtCacheHitRatio=ss2cmbtCacheHitRatio, ss2dmLogBytesRedoneFromCacheSec=ss2dmLogBytesRedoneFromCacheSec, ss2TraceStatisticsEntry=ss2TraceStatisticsEntry, ss2wgsSuboptimalPlansPerSec=ss2wgsSuboptimalPlansPerSec, ss2bmTargetPages=ss2bmTargetPages, rs2wbsCacheHitsSecSemanticModels=rs2wbsCacheHitsSecSemanticModels, as2seqMapBytesPerSec=as2seqMapBytesPerSec, as2CacheKBAddedPerSec=as2CacheKBAddedPerSec, as2memOtherFiles=as2memOtherFiles, as2CacheTotalFiltIteratorCachMis=as2CacheTotalFiltIteratorCachMis, ss2TraceEventStatisticsEntry=ss2TraceEventStatisticsEntry, sa2JobStepsActiveSteps=sa2JobStepsActiveSteps, ss2PlanCacheCachePages=ss2PlanCacheCachePages, ss2LocksInstance=ss2LocksInstance, ss2rpsInstance=ss2rpsInstance, ss2rpsActiveMemoryGrantAmountKB=ss2rpsActiveMemoryGrantAmountKB, ss2LatchesSuLatchPromotionsSec=ss2LatchesSuLatchPromotionsSec, as2memInMemDimenIndexHashFileKB=as2memInMemDimenIndexHashFileKB, ss2cmdCacheEntriesPinnedCount=ss2cmdCacheEntriesPinnedCount, rs2wbsTotalRejectedThreads=rs2wbsTotalRejectedThreads, ss2bsEnqueuedTransportMsgsTotal=ss2bsEnqueuedTransportMsgsTotal, ss2trnNonSnapshotVersionTransact=ss2trnNonSnapshotVersionTransact, rs2HTTPNameIndex=rs2HTTPNameIndex, as2DataMiningModelProcessTable=as2DataMiningModelProcessTable, as2CacheCurrentEntries=as2CacheCurrentEntries, as2memPagePool8LookasideKB=as2memPagePool8LookasideKB, ss2BrokerTOStatisticsTable=ss2BrokerTOStatisticsTable, ss2bnInstance=ss2bnInstance, ss2amIndexSearchesPerSec=ss2amIndexSearchesPerSec, as2dmpRowsPerSec=as2dmpRowsPerSec, ss2dmLogScannedForUndoKB=ss2dmLogScannedForUndoKB, ss2dbActiveTransactions=ss2dbActiveTransactions, as2seqFlatCacheLookupsPerSec=as2seqFlatCacheLookupsPerSec, as2MDXTotalFlatCacheInserts=as2MDXTotalFlatCacheInserts, ss2amForwardedRecordsPerSec=ss2amForwardedRecordsPerSec, ss2wsNonPageLatchWaits=ss2wsNonPageLatchWaits, as2memInMemoryMapFileKBPerSec=as2memInMemoryMapFileKBPerSec, ss2btosAvgTimeBetweenBatchesMs=ss2btosAvgTimeBetweenBatchesMs, sa2AlertsActivatedAlerts=sa2AlertsActivatedAlerts, rs2wnsSnapshotUpdatesPerSec=rs2wnsSnapshotUpdatesPerSec, ss2wsInstance=ss2wsInstance, ss2mmSQLCacheMemoryKB=ss2mmSQLCacheMemoryKB, ss2dmLogRemainingForUndoKB=ss2dmLogRemainingForUndoKB, ss2rsSnapshotDeliveredTransSec=ss2rsSnapshotDeliveredTransSec, ss2rpsCPUUsageTargetPercent=ss2rpsCPUUsageTargetPercent, rs2wbsTotalProcessingFailures=rs2wbsTotalProcessingFailures, ss2bnRemoteNodePageLookupsPerSec=ss2bnRemoteNodePageLookupsPerSec, ss2SSISPipelineBLOBBytesWritten=ss2SSISPipelineBLOBBytesWritten, ss2SSISPipelineRowsRead=ss2SSISPipelineRowsRead, ss2PlanCacheEntry=ss2PlanCacheEntry, ss2BrokerPerDBMTransportEntry=ss2BrokerPerDBMTransportEntry, ss2bnFreePages=ss2bnFreePages, ss2wsWorkspaceSynchronizatWaits=ss2wsWorkspaceSynchronizatWaits, ss2ExecStatisticsOLEDBCalls=ss2ExecStatisticsOLEDBCalls, ss2bdtReceiveIPerOsPerSec=ss2bdtReceiveIPerOsPerSec, ss2WaitStatisticsTable=ss2WaitStatisticsTable, as2ThdsLongParsingJobQueueLength=as2ThdsLongParsingJobQueueLength, ss2ResourcePoolStatsTable=ss2ResourcePoolStatsTable, as2MDXNumEvalNodeCalcSameGranula=as2MDXNumEvalNodeCalcSameGranula, ss2LocksNumberOfDeadlocksPerSec=ss2LocksNumberOfDeadlocksPerSec, as2memInMemDimenProtyFileKBSec=as2memInMemDimenProtyFileKBSec, as2ProcIndexesTotalRows=as2ProcIndexesTotalRows, ss2trnVersionStoreUnitTruncation=ss2trnVersionStoreUnitTruncation, ss2UserSettableQuery=ss2UserSettableQuery, ss2tstInstance=ss2tstInstance, as2memInMemAggregateMapFileKBSec=as2memInMemAggregateMapFileKBSec, as2memInMemoryMapFileKB=as2memInMemoryMapFileKB, ss2bmPageLookupsPerSec=ss2bmPageLookupsPerSec, as2memInMemoryFactDataFileKB=as2memInMemoryFactDataFileKB, as2ProcessingRowsWrittenPerSec=as2ProcessingRowsWrittenPerSec, ss2amDroppedRowsetCleanupsPerSec=ss2amDroppedRowsetCleanupsPerSec, as2memInMemoryOtherFileKBPerSec=as2memInMemoryOtherFileKBPerSec, ss2DatabasesTable=ss2DatabasesTable, as2memPotenMemFactAggregFileKB=as2memPotenMemFactAggregFileKB, ss2bdtMsgFragmentP6SendsSec=ss2bdtMsgFragmentP6SendsSec, ss2ExecStatisticsDTCCalls=ss2ExecStatisticsDTCCalls, ss2amSkippedGhostedRecordsPerSec=ss2amSkippedGhostedRecordsPerSec, ss2bdtMsgFragmentP10SendsSec=ss2bdtMsgFragmentP10SendsSec, ss2dbLogFileSUsedSizeKB=ss2dbLogFileSUsedSizeKB, ss2bdtMsgFragmentP4SendsSec=ss2bdtMsgFragmentP4SendsSec, as2seqNetworkRoundTripsPerSec=as2seqNetworkRoundTripsPerSec, as2memInMemDimenStringFileKB=as2memInMemDimenStringFileKB, ss2sqsBatchRequestsPerSec=ss2sqsBatchRequestsPerSec, sa2StatisticsEntry=sa2StatisticsEntry, ss2amCountPullInRow=ss2amCountPullInRow, as2ThdsProcessingPoolJobRate=as2ThdsProcessingPoolJobRate, as2ProcAggregationsEntry=as2ProcAggregationsEntry, as2dmmpCasesPerSec=as2dmmpCasesPerSec, as2memPagePool64LookasideKB=as2memPagePool64LookasideKB, ss2amWorktablesFromCacheRatio=ss2amWorktablesFromCacheRatio, as2ProcessingEntry=as2ProcessingEntry, ss2dmMirroredWritTransactionsSec=ss2dmMirroredWritTransactionsSec, ss2wgsCPUUsagePercent=ss2wgsCPUUsagePercent, ss2bmAWEWriteMapsPerSec=ss2bmAWEWriteMapsPerSec, ss2LatchesTable=ss2LatchesTable, ss2gsMarsDeadlocks=ss2gsMarsDeadlocks, ss2bdtReceiveIPerOBytesPerSec=ss2bdtReceiveIPerOBytesPerSec, ss2bnForeignPages=ss2bnForeignPages, as2seqTotalNetworkRoundTrips=as2seqTotalNetworkRoundTrips, ss2tesEventsFilteredPerSec=ss2tesEventsFilteredPerSec, ss2wsTransactionOwnershipWaits=ss2wsTransactionOwnershipWaits, ss2amByReferenceLobUseCount=ss2amByReferenceLobUseCount, rs2wnsTotalSnapshotUpdates=rs2wnsTotalSnapshotUpdates, as2MDXNumCellCellMissCachEvalNod=as2MDXNumCellCellMissCachEvalNod, as2ProcessingTotalRowsConverted=as2ProcessingTotalRowsConverted, ss2rpsActiveMemoryGrantsCount=ss2rpsActiveMemoryGrantsCount, as2MDXTotalAutoexist=as2MDXTotalAutoexist, ss2ExecStatisticsTable=ss2ExecStatisticsTable, ss2amWorkfilesCreatedPerSec=ss2amWorkfilesCreatedPerSec, as2memCleanerCurrentPrice=as2memCleanerCurrentPrice, ss2bsEnqueuedTransportMsgFragSec=ss2bsEnqueuedTransportMsgFragSec, as2paTempFileBytesWrittenPerSec=as2paTempFileBytesWrittenPerSec, as2seqCurrentMeasureGroupQueries=as2seqCurrentMeasureGroupQueries, as2memDimensionPropertyFiles=as2memDimensionPropertyFiles, ss2wsThreadSafeMemoryObjectsWait=ss2wsThreadSafeMemoryObjectsWait, ss2bnLocalNodePageLookupsPerSec=ss2bnLocalNodePageLookupsPerSec, ss2bsForwardedMsgBytesPerSec=ss2bsForwardedMsgBytesPerSec, as2pcProcessCancellationsSec=as2pcProcessCancellationsSec, ss2UserSettableEntry=ss2UserSettableEntry, as2seqBytesSentPerSec=as2seqBytesSentPerSec, ss2trnVersionGenerationRateKBS=ss2trnVersionGenerationRateKBS, rs2wbsCacheHitsPerSec=rs2wbsCacheHitsPerSec, ss2BackupDeviceInstance=ss2BackupDeviceInstance, ss2ReplicationLogreaderTable=ss2ReplicationLogreaderTable, rs2wbsTotalCacheHits=rs2wbsTotalCacheHits, as2CacheEntry=as2CacheEntry, ss2gsSOAPMethodInvocations=ss2gsSOAPMethodInvocations, ss2ReplicationDistEntry=ss2ReplicationDistEntry, as2MDXNumEvictionsEvalNode=as2MDXNumEvictionsEvalNode, ss2rmDownloadedChangesPerSec=ss2rmDownloadedChangesPerSec, rs2wbsTotalCacheMisses=rs2wbsTotalCacheMisses, rs2wnsCacheMissSecSemanticModels=rs2wnsCacheMissSecSemanticModels, ss2gsSOAPSessionTerminateRequest=ss2gsSOAPSessionTerminateRequest, rs2wnsTotalMemoryCacheHits=rs2wnsTotalMemoryCacheHits, ss2ReplicationMergeTable=ss2ReplicationMergeTable, ss2amCountPushOffRow=ss2amCountPushOffRow, ss2bsDialogTimerEventCount=ss2bsDialogTimerEventCount, as2paTotalPartitions=as2paTotalPartitions, ss2trnVersionCleanupRateKBPerS=ss2trnVersionCleanupRateKBPerS, rs2wnsRequestsPerSec=rs2wnsRequestsPerSec, ss2ReplicationMergeEntry=ss2ReplicationMergeEntry, ss2cmtCursorConversionRate=ss2cmtCursorConversionRate, as2ProactiveCachingEntry=as2ProactiveCachingEntry, rs2wnsTotalRejectedThreads=rs2wnsTotalRejectedThreads, ss2bdtSendIPerOLenAvg=ss2bdtSendIPerOLenAvg, ss2bmFreePages=ss2bmFreePages, ss2PlanCacheTable=ss2PlanCacheTable, as2pcProactiveCachingBeginPerSec=as2pcProactiveCachingBeginPerSec, ss2dmBytesSentPerSec=ss2dmBytesSentPerSec, ss2bdtMsgFragmentP8SendsSec=ss2bdtMsgFragmentP8SendsSec, as2ThdsProcessPoolJobQueueLength=as2ThdsProcessPoolJobQueueLength, as2CacheTotalLookups=as2CacheTotalLookups, ss2bdtMsgFragmentP9SendsSec=ss2bdtMsgFragmentP9SendsSec, ss2bdtRecvIOBufferCopiesBytesSec=ss2bdtRecvIOBufferCopiesBytesSec, ss2ReplicationSnapshotEntry=ss2ReplicationSnapshotEntry, ss2bsForwardedMsgByteTotal=ss2bsForwardedMsgByteTotal, as2ConnectionTotalRequests=as2ConnectionTotalRequests, ss2rpsTargetMemoryKB=ss2rpsTargetMemoryKB, ss2amTableLockEscalationsPerSec=ss2amTableLockEscalationsPerSec, as2ConnectionTotalFailures=as2ConnectionTotalFailures, as2seqMapReadsPerSec=as2seqMapReadsPerSec, sa2JobsQueuedJobs=sa2JobsQueuedJobs, as2dmpTotalQueries=as2dmpTotalQueries, ss2bsEnqueuedP5MessagesPerSec=ss2bsEnqueuedP5MessagesPerSec, as2CacheTotalFiltIteratorCachHit=as2CacheTotalFiltIteratorCachHit, ss2dmLogCompressedBytesRcvdSec=ss2dmLogCompressedBytesRcvdSec, as2ThdsShortParsingIdleThreads=as2ThdsShortParsingIdleThreads, ss2LocksLockRequestsPerSec=ss2LocksLockRequestsPerSec, ss2sqsSQLAttentionRate=ss2sqsSQLAttentionRate, rs2wnsTotalRequests=rs2wnsTotalRequests, as2LocksUnlockRequestsPerSec=as2LocksUnlockRequestsPerSec, ss2dmSendsPerSec=ss2dmSendsPerSec, ss2sqsSQLCompilationsPerSec=ss2sqsSQLCompilationsPerSec, ss2cmbtCursorRequestsPerSec=ss2cmbtCursorRequestsPerSec, rs2wnsTotalCacheFlushes=rs2wnsTotalCacheFlushes, as2LocksCurrentLatchWaits=as2LocksCurrentLatchWaits, ss2dbCommitTableEntries=ss2dbCommitTableEntries, as2LocksCurrentLockWaits=as2LocksCurrentLockWaits, as2MDXEntry=as2MDXEntry, as2seqCalculationCacheLookupsSec=as2seqCalculationCacheLookupsSec, ss2amFreeSpaceScansPerSec=ss2amFreeSpaceScansPerSec, as2ConnectionTotalSuccesses=as2ConnectionTotalSuccesses, ss2BackupDeviceEntry=ss2BackupDeviceEntry, ss2bpInstance=ss2bpInstance, ss2dbBulkCopyThroughputPerSec=ss2dbBulkCopyThroughputPerSec, ss2ExecStatisticsInstance=ss2ExecStatisticsInstance, ss2cmtAsyncPopulationCount=ss2cmtAsyncPopulationCount, ss2ReplicationAgentsEntry=ss2ReplicationAgentsEntry, ss2LocksLockWaitTimeMs=ss2LocksLockWaitTimeMs, rs2wnsTotalCacheHitSemanticModel=rs2wnsTotalCacheHitSemanticModel, ss2mmLockOwnerBlocksAllocated=ss2mmLockOwnerBlocksAllocated, ss2baStoredProceduresInvokedSec=ss2baStoredProceduresInvokedSec, ss2amWorktablesCreatedPerSec=ss2amWorktablesCreatedPerSec)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER-V2", ss2amExtentDeallocationsPerSec=ss2amExtentDeallocationsPerSec, ss2TraceEventStatisticsTable=ss2TraceEventStatisticsTable, as2memCleanerMemoryKB=as2memCleanerMemoryKB, rs2wnsInstance=rs2wnsInstance, as2CacheTable=as2CacheTable, ss2wsPageIOLatchWaits=ss2wsPageIOLatchWaits, as2CacheDirectHitsPerSec=as2CacheDirectHitsPerSec, as2memPotenMemFactStringFileKB=as2memPotenMemFactStringFileKB, ss2bdtReceiveIPerOLenAvg=ss2bdtReceiveIPerOLenAvg, as2ProcessingRowsConvertedPerSec=as2ProcessingRowsConvertedPerSec, rs2wbsCacheMissesSecSemantModels=rs2wbsCacheMissesSecSemantModels, as2LocksLockRequestsPerSec=as2LocksLockRequestsPerSec, rs2wnsFirstSessionRequestsPerSec=rs2wnsFirstSessionRequestsPerSec, as2MDXCurrentNumOfCachedEvalNode=as2MDXCurrentNumOfCachedEvalNode, ss2btosAvgTimeToWriteBatchMs=ss2btosAvgTimeToWriteBatchMs, ss2dmTransactionDelay=ss2dmTransactionDelay, ss2ResourcePoolStatsEntry=ss2ResourcePoolStatsEntry, as2memInMemFactStringFileKBSec=as2memInMemFactStringFileKBSec, ss2amFullScansPerSec=ss2amFullScansPerSec, as2LocksTable=as2LocksTable, sa2JobsJobSuccessRate=sa2JobsJobSuccessRate, as2LocksLatchWaitsPerSec=as2LocksLatchWaitsPerSec, as2dmpPredictionsPerSec=as2dmpPredictionsPerSec, as2MDXTotalNONEMPTYCalculatMemb=as2MDXTotalNONEMPTYCalculatMemb, ss2rsSnapshotDeliveredCmdsPerSec=ss2rsSnapshotDeliveredCmdsPerSec, ss2bmDatabasePages=ss2bmDatabasePages, as2NameInstance=as2NameInstance, sa2StatisticsTable=sa2StatisticsTable, rs2wbsRequestsPerSec=rs2wbsRequestsPerSec, as2dmpTotalRows=as2dmpTotalRows, ss2bsForwardedMessagesPerSec=ss2bsForwardedMessagesPerSec, ss2gsSOAPWSDLRequests=ss2gsSOAPWSDLRequests, as2LocksTotalDeadlocksDetected=as2LocksTotalDeadlocksDetected, rs2wnsCacheHitsPerSec=rs2wnsCacheHitsPerSec, as2DataMiningPredictionTable=as2DataMiningPredictionTable, ss2CursorManagerTotalTable=ss2CursorManagerTotalTable, rs2wbsMemoryCacheHitsPerSec=rs2wbsMemoryCacheHitsPerSec, ss2ReplicationAgentsInstance=ss2ReplicationAgentsInstance, ss2CatalogMetadataTable=ss2CatalogMetadataTable, ss2SQLErrorsTable=ss2SQLErrorsTable, ss2dbPercentLogUsed=ss2dbPercentLogUsed, as2dmpQueriesPerSec=as2dmpQueriesPerSec, ss2bmAWEStolenMapsPerSec=ss2bmAWEStolenMapsPerSec, as2seqTotalRowsSent=as2seqTotalRowsSent, ss2SQLErrorsInstance=ss2SQLErrorsInstance, ss2trnFreeSpaceInTempdbKB=ss2trnFreeSpaceInTempdbKB, as2memAggCacheKB=as2memAggCacheKB, ss2bsSQLReceiveTotal=ss2bsSQLReceiveTotal, as2memAggregationMapFiles=as2memAggregationMapFiles, ss2bsForwardedMsgsDiscardedSec=ss2bsForwardedMsgsDiscardedSec, ss2trnVersionStoreUnitCount=ss2trnVersionStoreUnitCount, sa2JobStepsQueuedSteps=sa2JobStepsQueuedSteps, ss2dmLogSendFlowControlTimeMs=ss2dmLogSendFlowControlTimeMs, ss2SSISServiceSSISPackageInstanc=ss2SSISServiceSSISPackageInstanc, ss2bsEnqueuedP10MessagesPerSec=ss2bsEnqueuedP10MessagesPerSec, rs2wbsNextSessionRequestsPerSec=rs2wbsNextSessionRequestsPerSec, as2memFilestoreClockPgHaveRefSec=as2memFilestoreClockPgHaveRefSec, ss2mmLockBlocks=ss2mmLockBlocks, ss2bsEnqueuedP9MessagesPerSec=ss2bsEnqueuedP9MessagesPerSec, ss2bsForwardedPendingMsgBytes=ss2bsForwardedPendingMsgBytes, sa2NameIndex=sa2NameIndex, ss2tstEventsFiredPerSec=ss2tstEventsFiredPerSec, ss2amScanPointRevalidationsSec=ss2amScanPointRevalidationsSec, as2MDXNumEvalNodThatCovASglCell=as2MDXNumEvalNodThatCovASglCell, as2LocksCurrentLocks=as2LocksCurrentLocks, as2paMemorySizeBytes=as2paMemorySizeBytes, ss2baInstance=ss2baInstance, ss2baTasksStartedPerSec=ss2baTasksStartedPerSec, ss2ExecStatistExtendedProcedures=ss2ExecStatistExtendedProcedures, ss2DeprecatedFeaturesUsage=ss2DeprecatedFeaturesUsage, rs2ReportServerHTTPTable=rs2ReportServerHTTPTable, ss2bdtCurrentBytesForRecvIPerO=ss2bdtCurrentBytesForRecvIPerO, ss2mmLockOwnerBlocks=ss2mmLockOwnerBlocks, ss2CatalogMetadataEntry=ss2CatalogMetadataEntry, ss2ReplicationAgentsTable=ss2ReplicationAgentsTable, ss2SSISServiceTable=ss2SSISServiceTable, ss2SSISPipelineFlatBuffersInUse=ss2SSISPipelineFlatBuffersInUse, ss2amFreeSpacePageFetchesPerSec=ss2amFreeSpacePageFetchesPerSec, as2MDXTotalEXISTING=as2MDXTotalEXISTING, ss2SSISServiceEntry=ss2SSISServiceEntry, as2memPotenMemOtherFileKB=as2memPotenMemOtherFileKB, rs2wbsActiveSessions=rs2wbsActiveSessions, as2dmpConcurrentDMQueries=as2dmpConcurrentDMQueries, as2MemoryTable=as2MemoryTable, ss2amLobSSProviderCreateCount=ss2amLobSSProviderCreateCount, as2MDXTotalNONEMPTY=as2MDXTotalNONEMPTY, ss2amUsedLeafPageCookie=ss2amUsedLeafPageCookie, ss2baTaskLimitReachedPerSec=ss2baTaskLimitReachedPerSec, ss2bdtMsgFragmentP3SendsSec=ss2bdtMsgFragmentP3SendsSec, ss2SSISPipelineBLOBBytesRead=ss2SSISPipelineBLOBBytesRead, ss2dbShrinkDataMovementBytesSec=ss2dbShrinkDataMovementBytesSec, ss2wgsQueryOptimizationsPerSec=ss2wgsQueryOptimizationsPerSec, as2CacheTotalEvictions=as2CacheTotalEvictions, as2ThdsLongParsingJobRate=as2ThdsLongParsingJobRate, ss2bdtMsgFragmentSendSizeAvg=ss2bdtMsgFragmentSendSizeAvg, ss2bmLazyWritesPerSec=ss2bmLazyWritesPerSec, ss2bdtMsgFragmentRecvSizeAvg=ss2bdtMsgFragmentRecvSizeAvg, ss2dbLogCacheHitRatio=ss2dbLogCacheHitRatio, as2seqTotalQueryFromCacheDirect=as2seqTotalQueryFromCacheDirect, ss2cmbtCursorMemoryUsage=ss2cmbtCursorMemoryUsage, ss2SSISPipelineEntry=ss2SSISPipelineEntry, ss2wgsQueuedRequests=ss2wgsQueuedRequests, sa2JobsEntry=sa2JobsEntry, as2DataMiningPredictionEntry=as2DataMiningPredictionEntry, ss2rmUploadedChangesPerSec=ss2rmUploadedChangesPerSec, ss2gsLoginsPerSec=ss2gsLoginsPerSec, as2memDimensionStringFiles=as2memDimensionStringFiles, ss2bdtMsgFragmentP7SendsSec=ss2bdtMsgFragmentP7SendsSec, as2memPagePool8AllocKB=as2memPagePool8AllocKB, rs2wbsTotalMemoryCacheMisses=rs2wbsTotalMemoryCacheMisses, as2paTempFileRowsWrittenPerSec=as2paTempFileRowsWrittenPerSec, ss2bnTotalPages=ss2bnTotalPages, ss2dbLogGrowths=ss2dbLogGrowths, sa2AlertsTable=sa2AlertsTable, ss2rpsMemoryGrantTimeoutsPerSec=ss2rpsMemoryGrantTimeoutsPerSec, as2ConnectionCurrentConnections=as2ConnectionCurrentConnections, as2ThdsShortParsingJobQueueLeng=as2ThdsShortParsingJobQueueLeng, as2seqQueriesAnsweredPerSec=as2seqQueriesAnsweredPerSec, as2ThdsShortParsingBusyThreads=as2ThdsShortParsingBusyThreads, ss2gsTempdbRecoveryUnitId=ss2gsTempdbRecoveryUnitId, ss2WaitStatisticsEntry=ss2WaitStatisticsEntry, ss2DeprecatedFeaturesInstance=ss2DeprecatedFeaturesInstance, ss2mmOptimizerMemoryKB=ss2mmOptimizerMemoryKB, rs2wbsMemoryCacheMissPerSec=rs2wbsMemoryCacheMissPerSec, rs2wnsTotalDeliveries=rs2wnsTotalDeliveries, rs2WindowsServiceEntry=rs2WindowsServiceEntry, as2ThdsQueryPoolBusyThreads=as2ThdsQueryPoolBusyThreads, sa2JobsSuccessfulJobs=sa2JobsSuccessfulJobs, ss2gsHTTPAuthenticatedRequests=ss2gsHTTPAuthenticatedRequests, rs2wbsTotalReportsExecute=rs2wbsTotalReportsExecute, ss2bdtRecvIPerOBufferCopiesCount=ss2bdtRecvIPerOBufferCopiesCount, ss2gsSOAPSessionInitiateRequests=ss2gsSOAPSessionInitiateRequests, rs2wnsTotalCacheHits=rs2wnsTotalCacheHits, ss2amAUCleanupsPerSec=ss2amAUCleanupsPerSec, ss2bmAWEUnmapCallsPerSec=ss2bmAWEUnmapCallsPerSec, ss2rpsMaxMemoryKB=ss2rpsMaxMemoryKB, as2seqFlatCacheHitsPerSec=as2seqFlatCacheHitsPerSec, ss2rdDistDeliveredCmdsPerSec=ss2rdDistDeliveredCmdsPerSec, ss2bnStolenPages=ss2bnStolenPages, ss2LatchesTotalLatchWaitTimeMs=ss2LatchesTotalLatchWaitTimeMs, as2dmmpCurrentModelsProcessing=as2dmmpCurrentModelsProcessing, ss2baTaskLimitReached=ss2baTaskLimitReached, ss2LocksTimeoutsGreaterThan0Sec=ss2LocksTimeoutsGreaterThan0Sec, as2MDXNumOfBulkModeEvalNode=as2MDXNumOfBulkModeEvalNode, ss2ReplicationSnapshotTable=ss2ReplicationSnapshotTable, ss2BufferNodeTable=ss2BufferNodeTable, as2memCleanerMemoryShrinkableKB=as2memCleanerMemoryShrinkableKB, ss2bmBufferCacheHitRatio=ss2bmBufferCacheHitRatio, ss2BufferManagerEntry=ss2BufferManagerEntry, as2seqQueriesFromFilePerSec=as2seqQueriesFromFilePerSec, ss2cmbtCursorWorktableUsage=ss2cmbtCursorWorktableUsage, ss2PlanCacheInstance=ss2PlanCacheInstance, ss2rpsCPUControlEffectPercent=ss2rpsCPUControlEffectPercent, rs2HTTPNameInstance=rs2HTTPNameInstance, ss2SSISPipelinePrivateBuffersUse=ss2SSISPipelinePrivateBuffersUse, as2MDXNumSubcubeMissCacheEvalNod=as2MDXNumSubcubeMissCacheEvalNod, as2memMemoryUsageKB=as2memMemoryUsageKB, as2NameEntry=as2NameEntry, as2memFilestoreIOErrorsPerSec=as2memFilestoreIOErrorsPerSec, ss2bsSQLSendTotal=ss2bsSQLSendTotal, ss2gsLogicalConnections=ss2gsLogicalConnections, ss2gsSQLTraceIOProviderLockWaits=ss2gsSQLTraceIOProviderLockWaits, ss2dbDataFileSSizeKB=ss2dbDataFileSSizeKB, ss2SSISPipelineBuffersInUse=ss2SSISPipelineBuffersInUse, ss2rmInstance=ss2rmInstance, ss2sqsFailedAutoParamsPerSec=ss2sqsFailedAutoParamsPerSec, ss2PlanCacheCacheObjectsInUse=ss2PlanCacheCacheObjectsInUse, ss2tesEventsFiredPerSec=ss2tesEventsFiredPerSec, ss2mmLockMemoryKB=ss2mmLockMemoryKB, as2memFilestoreMemoryPinnedKB=as2memFilestoreMemoryPinnedKB, ss2dbInstance=ss2dbInstance, as2seqCurrentDimensionQueries=as2seqCurrentDimensionQueries, ss2gsProcessesBlocked=ss2gsProcessesBlocked, ss2bmAWEUnmapPagesPerSec=ss2bmAWEUnmapPagesPerSec, rs2wnsReportRequests=rs2wnsReportRequests, ss2TransactionsEntry=ss2TransactionsEntry, as2MDXNumCacheStorEngineEvalNode=as2MDXNumCacheStorEngineEvalNode, ss2dbTrackedTransactionsPerSec=ss2dbTrackedTransactionsPerSec, sa2NameEntry=sa2NameEntry, as2memInMemDimenIndHashFileKBSec=as2memInMemDimenIndHashFileKBSec, as2memFilestoreReadsPerSec=as2memFilestoreReadsPerSec, as2pcNotificationsPerSec=as2pcNotificationsPerSec, ss2LatchesAverageLatchWaitTimeMs=ss2LatchesAverageLatchWaitTimeMs, as2CacheEvictionsPerSec=as2CacheEvictionsPerSec, ss2dbBulkCopyRowsPerSec=ss2dbBulkCopyRowsPerSec, ss2wsPageLatchWaits=ss2wsPageLatchWaits, sa2JobsTable=sa2JobsTable, ss2dmLogSendQueueKB=ss2dmLogSendQueueKB, as2MDXNumSubcubeHitsCacheEvalNod=as2MDXNumSubcubeHitsCacheEvalNod, as2seqMeasureGroupCacheLookupSec=as2seqMeasureGroupCacheLookupSec, ss2amExtentsAllocatedPerSec=ss2amExtentsAllocatedPerSec, ss2wgsReducedMemoryGrantsPerSec=ss2wgsReducedMemoryGrantsPerSec, as2MDXTotalRecomputes=as2MDXTotalRecomputes, ss2bdtSendIPerOsPerSec=ss2bdtSendIPerOsPerSec, sa2JobsActiveJobs=sa2JobsActiveJobs, ss2bsEnqueuedP3MessagesPerSec=ss2bsEnqueuedP3MessagesPerSec, ss2amMixedPageAllocationsPerSec=ss2amMixedPageAllocationsPerSec, rs2wnsCacheMissesPerSec=rs2wnsCacheMissesPerSec, ss2dbLogFlushWaitsPerSec=ss2dbLogFlushWaitsPerSec, as2ConnectionEntry=as2ConnectionEntry, ss2dmPagesSentPerSec=ss2dmPagesSentPerSec, rs2wbsTotalMemoryCacheHits=rs2wbsTotalMemoryCacheHits, as2ThdsQueryPoolIdleThreads=as2ThdsQueryPoolIdleThreads, as2ProactiveCachingTable=as2ProactiveCachingTable, as2seqAggregationLookupsPerSec=as2seqAggregationLookupsPerSec, ss2dbBackupRestoreThroughputSec=ss2dbBackupRestoreThroughputSec, as2memInMemoryFactStringFileKB=as2memInMemoryFactStringFileKB, ss2wsLockWaits=ss2wsLockWaits, ss2cmbtCachedCursorCounts=ss2cmbtCachedCursorCounts, ss2DeprecatedFeaturesEntry=ss2DeprecatedFeaturesEntry, as2MDXTotalCellsCalculated=as2MDXTotalCellsCalculated, ss2LocksLockTimeoutsPerSec=ss2LocksLockTimeoutsPerSec, as2memFilestoreKBWritePerSec=as2memFilestoreKBWritePerSec, ss2BackupDeviceTable=ss2BackupDeviceTable, ss2wgsMaxRequestMemoryGrantKB=ss2wgsMaxRequestMemoryGrantKB, ss2amPagesAllocatedPerSec=ss2amPagesAllocatedPerSec, as2memQuotaKB=as2memQuotaKB, as2memPagePool1AllocKB=as2memPagePool1AllocKB, as2memFilestoreKBReadsPerSec=as2memFilestoreKBReadsPerSec, ss2dmBytesReceivedPerSec=ss2dmBytesReceivedPerSec, ss2amLobSSProviderDestroyCount=ss2amLobSSProviderDestroyCount, ss2btosTransmissionObjGetsPerSec=ss2btosTransmissionObjGetsPerSec, ss2amFailedAUCleanupBatchesSec=ss2amFailedAUCleanupBatchesSec, as2memFactAggregationFiles=as2memFactAggregationFiles, rs2wnsTotalProcessingFailures=rs2wnsTotalProcessingFailures, rs2wnsMemoryCacheHitsPerSec=rs2wnsMemoryCacheHitsPerSec, sa2StatisticsSQLServerRestarted=sa2StatisticsSQLServerRestarted, ss2bsEnqueuedMessagesPerSec=ss2bsEnqueuedMessagesPerSec, as2memInMemFactAggregatFileKBSec=as2memInMemFactAggregatFileKBSec, ss2ExecStatisticDistributedQuery=ss2ExecStatisticDistributedQuery, as2StorageEngineQueryEntry=as2StorageEngineQueryEntry, ss2AccessMethodsTable=ss2AccessMethodsTable, ss2tstBytesPerSec=ss2tstBytesPerSec, ss2tstEventsFilteredPerSec=ss2tstEventsFilteredPerSec, ss2bdtMsgFragmentP2SendsSec=ss2bdtMsgFragmentP2SendsSec, ss2trnVersionStoreSizeKB=ss2trnVersionStoreSizeKB, ss2trnVersionStoreUnitCreation=ss2trnVersionStoreUnitCreation, as2CacheTotalMisses=as2CacheTotalMisses, ss2tesInstance=ss2tesInstance, ss2bdtMsgFragmentReceivesSec=ss2bdtMsgFragmentReceivesSec, ss2dbLogFileSSizeKB=ss2dbLogFileSSizeKB, as2seqQueryFromCacheFilteredSec=as2seqQueryFromCacheFilteredSec, ss2bnPageLifeExpectancy=ss2bnPageLifeExpectancy, ss2TraceStatisticsTable=ss2TraceStatisticsTable, rs2wbsFirstSessionRequestsPerSec=rs2wbsFirstSessionRequestsPerSec, as2MDXNumOfCacheBulkModeEvalNode=as2MDXNumOfCacheBulkModeEvalNode, as2memMemoryLimitLowKB=as2memMemoryLimitLowKB, ss2amPagesCompressedPerSec=ss2amPagesCompressedPerSec, ss2CLRTable=ss2CLRTable, ss2gsLogoutsPerSec=ss2gsLogoutsPerSec, as2ThdsLongParsingIdleThreads=as2ThdsLongParsingIdleThreads, rs2wnsTotalCacheMisses=rs2wnsTotalCacheMisses, as2memPotenMemDimenProFileKB=as2memPotenMemDimenProFileKB, ss2bdtMsgFragmentP5SendsSec=ss2bdtMsgFragmentP5SendsSec)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER-V2", as2MDXNumberOfCalculationCovers=as2MDXNumberOfCalculationCovers, as2ThdsLongParsingBusyThreads=as2ThdsLongParsingBusyThreads, as2seqTotalQueriesFromFile=as2seqTotalQueriesFromFile, rs2wnsTotalAppDomainRecycles=rs2wnsTotalAppDomainRecycles, ss2dbLogShrinks=ss2dbLogShrinks, ss2bmPageWritesPerSec=ss2bmPageWritesPerSec, ss2bsEnqueuedP2MessagesPerSec=ss2bsEnqueuedP2MessagesPerSec, as2memFactDataFiles=as2memFactDataFiles, as2LocksEntry=as2LocksEntry, as2ConnectionRequestsPerSec=as2ConnectionRequestsPerSec, as2MDXTable=as2MDXTable, ss2bdtMessageFragmentSendsPerSec=ss2bdtMessageFragmentSendsPerSec, ss2bmTotalPages=ss2bmTotalPages, ss2rpsMemoryGrantsPerSec=ss2rpsMemoryGrantsPerSec, ss2LocksTable=ss2LocksTable, ss2amRangeScansPerSec=ss2amRangeScansPerSec, rs2wnsDeliversPerSec=rs2wnsDeliversPerSec, as2LocksLockGrantsPerSec=as2LocksLockGrantsPerSec, ss2dbLogFlushWaitTime=ss2dbLogFlushWaitTime, ss2SQLStatisticsEntry=ss2SQLStatisticsEntry, rs2wnsReportsExecutedPerSec=rs2wnsReportsExecutedPerSec, ss2NameTable=ss2NameTable, ss2BrokerPerDBMTransportTable=ss2BrokerPerDBMTransportTable, ss2NameEntry=ss2NameEntry, as2ThreadsTable=as2ThreadsTable, ss2MemoryManagerEntry=ss2MemoryManagerEntry, as2CacheLookupsPerSec=as2CacheLookupsPerSec, as2MDXNumOfStorageEngineEvalNode=as2MDXNumOfStorageEngineEvalNode, ss2amDeferredDroppedRowsets=ss2amDeferredDroppedRowsets, ss2sqsForcedParameterizationsSec=ss2sqsForcedParameterizationsSec, ss2bsCorruptedMessagesTotal=ss2bsCorruptedMessagesTotal, ss2amPageSplitsPerSec=ss2amPageSplitsPerSec, ss2sqsGuidedPlanExecutionsPerSec=ss2sqsGuidedPlanExecutionsPerSec, ss2amLobHandleCreateCount=ss2amLobHandleCreateCount, as2MDXTotalSonarSubcubes=as2MDXTotalSonarSubcubes, ss2bnDatabasePages=ss2bnDatabasePages, ss2LatchesNumberOfSuperLatches=ss2LatchesNumberOfSuperLatches, as2ProcessingRowsReadPerSec=as2ProcessingRowsReadPerSec, ss2BufferPartitionEntry=ss2BufferPartitionEntry, ss2dbReplTransRate=ss2dbReplTransRate, ss2rpsCacheMemoryTargetKB=ss2rpsCacheMemoryTargetKB, ss2amLobHandleDestroyCount=ss2amLobHandleDestroyCount, as2ConnectionSuccessesPerSec=as2ConnectionSuccessesPerSec, ss2btosAvgLengthOfBatchedWrites=ss2btosAvgLengthOfBatchedWrites, ss2amFailedTreePageCookie=ss2amFailedTreePageCookie, ss2dmLogBytesSentFromCachePerSec=ss2dmLogBytesSentFromCachePerSec, as2memFilestoreWritesPerSec=as2memFilestoreWritesPerSec, ss2cmdCacheEntriesCount=ss2cmdCacheEntriesCount, sa2AlertsAlertsActivatedMinute=sa2AlertsAlertsActivatedMinute, as2ProcIndexesEntry=as2ProcIndexesEntry, ss2bsEnqueuedP4MessagesPerSec=ss2bsEnqueuedP4MessagesPerSec, ss2DatabaseMirroringTable=ss2DatabaseMirroringTable, rs2wnsMemoryCacheMissPerSec=rs2wnsMemoryCacheMissPerSec, ss2BrokerActivationTable=ss2BrokerActivationTable, ss2SQLStatisticsTable=ss2SQLStatisticsTable, ss2rdDistDeliveredTransPerSec=ss2rdDistDeliveredTransPerSec, sqlServerAgentV2=sqlServerAgentV2, as2LocksLockWaitsPerSec=as2LocksLockWaitsPerSec, rs2WindowsServiceTable=rs2WindowsServiceTable, ss2gsTempdbRowsetId=ss2gsTempdbRowsetId, as2memFilestoreKB=as2memFilestoreKB, ss2btosTransmissionObjSetDirtSec=ss2btosTransmissionObjSetDirtSec, rs2wnsTotalCachMissSemanticModel=rs2wnsTotalCachMissSemanticModel, ss2dmReceivesPerSec=ss2dmReceivesPerSec, ss2baTasksRunning=ss2baTasksRunning, as2memInMemFactAggregationFileKB=as2memInMemFactAggregationFileKB, ss2MemoryManagerTable=ss2MemoryManagerTable, as2seqDimensionCacheHitsPerSec=as2seqDimensionCacheHitsPerSec, ss2SSISPipelineFlatBufferMemory=ss2SSISPipelineFlatBufferMemory, ss2wgsInstance=ss2wgsInstance, ss2rlLogreaderDeliveryLatency=ss2rlLogreaderDeliveryLatency, as2StorageEngineQueryTable=as2StorageEngineQueryTable, as2paRowsMergedPerSec=as2paRowsMergedPerSec, ss2mmMemoryGrantsPending=ss2mmMemoryGrantsPending, ss2gsNonAtomicYieldRate=ss2gsNonAtomicYieldRate, as2seqsistedCacheLookupsSec=as2seqsistedCacheLookupsSec, ss2bsForwardedMsgDiscardedTotal=ss2bsForwardedMsgDiscardedTotal, sa2JobStepsTotalStepRetries=sa2JobStepsTotalStepRetries, rs2wbsReportsExecutedPerSec=rs2wbsReportsExecutedPerSec, ss2amPageDeallocationsPerSec=ss2amPageDeallocationsPerSec, ss2bsDroppedMessagesTotal=ss2bsDroppedMessagesTotal, ss2bdtPendingMsgFragForRecvIO=ss2bdtPendingMsgFragForRecvIO, ss2bsForwardedPendingMsgCount=ss2bsForwardedPendingMsgCount, as2CacheDirectHitRatio=as2CacheDirectHitRatio, ss2rlInstance=ss2rlInstance, ss2amDroppedRowsetsSkippedPerSec=ss2amDroppedRowsetsSkippedPerSec, rs2wnsTotalReportsExecuted=rs2wnsTotalReportsExecuted, as2memCleanerBalancePerSec=as2memCleanerBalancePerSec, rs2WebService=rs2WebService, ss2cmbtCursorCacheUseCountsSec=ss2cmbtCursorCacheUseCountsSec, ss2dbLogFlushesPerSec=ss2dbLogFlushesPerSec, ss2mmGrantedWorkspaceMemoryKB=ss2mmGrantedWorkspaceMemoryKB, ss2bmPageReadsPerSec=ss2bmPageReadsPerSec, as2seqPersistedCacheHitsPerSec=as2seqPersistedCacheHitsPerSec, as2LocksLockDenialsPerSec=as2LocksLockDenialsPerSec, ss2mmTotalServerMemoryKB=ss2mmTotalServerMemoryKB, as2memInMemAggregationMapFileKB=as2memInMemAggregationMapFileKB, ss2BrokerActivationEntry=ss2BrokerActivationEntry, ss2bmCheckpointPagesPerSec=ss2bmCheckpointPagesPerSec, ss2bpFreeListRequestsPerSec=ss2bpFreeListRequestsPerSec, ss2WorkloadGroupStatsTable=ss2WorkloadGroupStatsTable, ss2bsEnqueuedLocalMessagesPerSec=ss2bsEnqueuedLocalMessagesPerSec, rs2wnsEventsPerSec=rs2wnsEventsPerSec, as2ProcIndexesTotalPartitions=as2ProcIndexesTotalPartitions, as2ThdsProcessingPoolBusyThreads=as2ThdsProcessingPoolBusyThreads, ss2dmLogHardenTimeMs=ss2dmLogHardenTimeMs, ss2gsSOAPSQLRequests=ss2gsSOAPSQLRequests, ss2dbLogCacheReadsPerSec=ss2dbLogCacheReadsPerSec, ss2SQLErrorsEntry=ss2SQLErrorsEntry, as2seqRowsSentPerSec=as2seqRowsSentPerSec, ss2cmbtInstance=ss2cmbtInstance, as2memPagePool1LookasideKB=as2memPagePool1LookasideKB, ss2SSISPipelineBuffersSpooled=ss2SSISPipelineBuffersSpooled, ss2bmPageLifeExpectancy=ss2bmPageLifeExpectancy, sa2JobStepsTable=sa2JobStepsTable, as2seqTotalQueryFromCachFiltered=as2seqTotalQueryFromCachFiltered, sa2JobsInstance=sa2JobsInstance, as2CacheCurrentKB=as2CacheCurrentKB, as2seqTotalQueriesAnswered=as2seqTotalQueriesAnswered, rs2wnsTotalEvents=rs2wnsTotalEvents, as2seqDimensionCacheLookupSec=as2seqDimensionCacheLookupSec, as2memFactStringFiles=as2memFactStringFiles, as2CacheTotalDirectHits=as2CacheTotalDirectHits, ss2btosTransmissionObjWritesSec=ss2btosTransmissionObjWritesSec, as2ThdsQueryPoolJobRate=as2ThdsQueryPoolJobRate, rs2wbsTotalRequests=rs2wbsTotalRequests, ss2wgsMaxRequestCpuTimeMs=ss2wgsMaxRequestCpuTimeMs, ss2cmdInstance=ss2cmdInstance, as2memInMemFactDataFileKBSec=as2memInMemFactDataFileKBSec, ss2gsSOAPEmptyRequests=ss2gsSOAPEmptyRequests, ss2SSISPipelineBufferMemory=ss2SSISPipelineBufferMemory, reportingServicesV2=reportingServicesV2, ss2bdtPendingBytesForSendIPerO=ss2bdtPendingBytesForSendIPerO, as2seqTotalMeasureGroupQueries=as2seqTotalMeasureGroupQueries, ss2bpFreeListEmptyPerSec=ss2bpFreeListEmptyPerSec, ss2gsTraceEventNotificationQueue=ss2gsTraceEventNotificationQueue, as2CacheInsertsPerSec=as2CacheInsertsPerSec, ss2rlLogreaderDeliveredCmdsSec=ss2rlLogreaderDeliveredCmdsSec, ss2wgsActiveParallelThreads=ss2wgsActiveParallelThreads, as2seqAggregationHitsPerSec=as2seqAggregationHitsPerSec, ss2amDeferredDroppedAUs=ss2amDeferredDroppedAUs, as2ConnectionFailuresPerSec=as2ConnectionFailuresPerSec, as2memInMemoryOtherFileKB=as2memInMemoryOtherFileKB, ss2sqsSafeAutoParamsPerSec=ss2sqsSafeAutoParamsPerSec, as2DataMiningModelProcessEntry=as2DataMiningModelProcessEntry, ss2trnLongestTransactRunningTime=ss2trnLongestTransactRunningTime, ss2rmConflictsPerSec=ss2rmConflictsPerSec, ss2dmInstance=ss2dmInstance, ss2LocksLockWaitsPerSec=ss2LocksLockWaitsPerSec, ss2wgsActiveRequests=ss2wgsActiveRequests, ss2bdtMessageFragmentP1SenSec=ss2bdtMessageFragmentP1SenSec, ss2wsMemoryGrantQueueWaits=ss2wsMemoryGrantQueueWaits, as2MDXNumOfCachedotherEvalNode=as2MDXNumOfCachedotherEvalNode, ss2mmMemoryGrantsOutstanding=ss2mmMemoryGrantsOutstanding, ss2sqsMisguidedPlanExecutionsSec=ss2sqsMisguidedPlanExecutionsSec, ss2amPageCompressionAttemptsSec=ss2amPageCompressionAttemptsSec, ss2WorkloadGroupStatsEntry=ss2WorkloadGroupStatsEntry, as2MDXTotalNONEMPTYUnoptimized=as2MDXTotalNONEMPTYUnoptimized, ss2rpsUsedMemoryKB=ss2rpsUsedMemoryKB, as2CacheTotalInserts=as2CacheTotalInserts, ss2bdtCurrentMsgFragForSendIO=ss2bdtCurrentMsgFragForSendIO, as2seqQueryFromCacheDirectSec=as2seqQueryFromCacheDirectSec, ss2cmtCursorFlushes=ss2cmtCursorFlushes, ss2tesBytesPerSec=ss2tesBytesPerSec, ss2bsEnqueuedP6MessagesPerSec=ss2bsEnqueuedP6MessagesPerSec, ss2dmRedoBytesPerSec=ss2dmRedoBytesPerSec, ss2LocksEntry=ss2LocksEntry, ss2bsEnqueuedTransmissionQMsgSec=ss2bsEnqueuedTransmissionQMsgSec, ss2dbLogTruncations=ss2dbLogTruncations, ss2bdtSendIPerOBytesPerSec=ss2bdtSendIPerOBytesPerSec, ss2CLRCLRExecution=ss2CLRCLRExecution, as2memPotentialInMemoryMapFileKB=as2memPotentialInMemoryMapFileKB, as2pcProactiveCachCompSec=as2pcProactiveCachCompSec, PYSNMP_MODULE_ID=sqlServerV2, rs2wbsCacheMissesPerSec=rs2wbsCacheMissesPerSec, ss2rpsQueryExecMemoryTargetKB=ss2rpsQueryExecMemoryTargetKB, ss2ReplicationAgentsRunning=ss2ReplicationAgentsRunning, rs2wnsCacheFlushesPerSec=rs2wnsCacheFlushesPerSec, as2ThreadsEntry=as2ThreadsEntry, ss2bdtOpenConnectionCount=ss2bdtOpenConnectionCount, ss2wsNetworkIOWaits=ss2wsNetworkIOWaits, as2ThdsProcessingPoolIdleThreads=as2ThdsProcessingPoolIdleThreads, ss2dmLogCompressedBytesSentSec=ss2dmLogCompressedBytesSentSec, as2seqMeasureGroupQueriesPerSec=as2seqMeasureGroupQueriesPerSec, sa2NameTable=sa2NameTable, as2MDXNumHashdexHitsCacheEvalNod=as2MDXNumHashdexHitsCacheEvalNod, as2memPotenMemFactDataFileKB=as2memPotenMemFactDataFileKB, as2memDimensionIndexHashFiles=as2memDimensionIndexHashFiles, ss2DatabaseMirroringEntry=ss2DatabaseMirroringEntry, ss2DatabasesEntry=ss2DatabasesEntry, as2memFilestoreClockPgExamineSec=as2memFilestoreClockPgExamineSec, as2ProcIndexesRowsPerSec=as2ProcIndexesRowsPerSec, ss2SQLErrorsErrorsPerSec=ss2SQLErrorsErrorsPerSec, rs2wbsTotalCachMissSemanticModel=rs2wbsTotalCachMissSemanticModel, ss2bsSQLSendsPerSec=ss2bsSQLSendsPerSec, ss2rpsCompileMemoryTargetKB=ss2rpsCompileMemoryTargetKB, as2NameIndex=as2NameIndex, ss2bsForwardedMessagesTotal=ss2bsForwardedMessagesTotal, ss2rpsPendingMemoryGrantsCount=ss2rpsPendingMemoryGrantsCount, ss2cmdCacheHitRatio=ss2cmdCacheHitRatio, ss2gsTempTablesForDestruction=ss2gsTempTablesForDestruction, ss2dbTransactionsPerSec=ss2dbTransactionsPerSec, ss2wsWaitForTheWorker=ss2wsWaitForTheWorker, as2ProcessingTotalRowsWritten=as2ProcessingTotalRowsWritten, ss2dbWriteTransactionsPerSec=ss2dbWriteTransactionsPerSec, ss2bsSQLReceivesPerSec=ss2bsSQLReceivesPerSec, ss2bdtPendingBytesForRecvIPerO=ss2bdtPendingBytesForRecvIPerO, ss2gsTempTablesCreationRate=ss2gsTempTablesCreationRate, ss2dmLogBytesReceivedPerSec=ss2dmLogBytesReceivedPerSec, sa2AlertsEntry=sa2AlertsEntry, ss2rpsCPUUsagePercent=ss2rpsCPUUsagePercent, ss2dbLogBytesFlushedPerSec=ss2dbLogBytesFlushedPerSec, sa2NameInstance=sa2NameInstance, as2paRowsCreatedPerSec=as2paRowsCreatedPerSec, rs2wbsTotalCacheHitSemanticModel=rs2wbsTotalCacheHitSemanticModel, ss2BrokerStatisticsEntry=ss2BrokerStatisticsEntry, as2dmpTotalPredictions=as2dmpTotalPredictions, ss2SSISPipelineBLOBFilesInUse=ss2SSISPipelineBLOBFilesInUse, ss2amLobSSProvideTruncationCount=ss2amLobSSProvideTruncationCount, ss2bmReadaheadPagesPerSec=ss2bmReadaheadPagesPerSec, ss2bsEnqueuedTransportMsgsPerSec=ss2bsEnqueuedTransportMsgsPerSec, ss2mmLockBlocksAllocated=ss2mmLockBlocksAllocated, ss2tesCPUTicksPerSec=ss2tesCPUTicksPerSec, sa2JobStepsInstance=sa2JobStepsInstance, rs2HTTPTotalRequests=rs2HTTPTotalRequests, as2paCurrentPartitions=as2paCurrentPartitions, rs2wnsTotalMemoryCacheMisses=rs2wnsTotalMemoryCacheMisses, as2seqTotalBytesSent=as2seqTotalBytesSent, ss2LocksAverageWaitTimeMs=ss2LocksAverageWaitTimeMs, as2memFilestoreIOErrors=as2memFilestoreIOErrors, ss2gsEventNotificationsDelayDrop=ss2gsEventNotificationsDelayDrop, rs2wbsReportRequests=rs2wbsReportRequests, ss2wgsRequestsCompletedPerSec=ss2wgsRequestsCompletedPerSec, ss2mmConnectionMemoryKB=ss2mmConnectionMemoryKB, as2MDXNumOfCellByCellEvalNode=as2MDXNumOfCellByCellEvalNode, ss2bmReservedPages=ss2bmReservedPages, ss2cmbtActiveCursors=ss2cmbtActiveCursors, ss2dmLogBytesSentPerSec=ss2dmLogBytesSentPerSec, ss2LatchesLatchWaitsPerSec=ss2LatchesLatchWaitsPerSec, ss2bsEnqueuedP1MessagesPerSec=ss2bsEnqueuedP1MessagesPerSec, ss2BufferPartitionTable=ss2BufferPartitionTable, ss2CursorManagerTotalEntry=ss2CursorManagerTotalEntry, ss2rdDistDeliveryLatency=ss2rdDistDeliveryLatency, ss2bnTargetPages=ss2bnTargetPages, ss2trnTransactions=ss2trnTransactions, ss2TransactionsTable=ss2TransactionsTable, as2ProcessingTable=as2ProcessingTable, as2ProcIndexesTable=as2ProcIndexesTable, ss2bmStolenPages=ss2bmStolenPages, as2ProcessingTotalRowsRead=as2ProcessingTotalRowsRead, as2memMapFiles=as2memMapFiles, ss2dbReplPendingXacts=ss2dbReplPendingXacts, ss2wsLogWriteWaits=ss2wsLogWriteWaits, ss2amProbeScansPerSec=ss2amProbeScansPerSec)
mibBuilder.exportSymbols("INFORMANT-SQLSERVER-V2", ss2rlLogreaderDeliveredTransSec=ss2rlLogreaderDeliveredTransSec, sa2JobStepsEntry=sa2JobStepsEntry, as2memInMemDimenStringFileKBSec=as2memInMemDimenStringFileKBSec, ss2GeneralStatisticsEntry=ss2GeneralStatisticsEntry, sa2JobsJobsActivatedPerMinute=sa2JobsJobsActivatedPerMinute, ss2CLREntry=ss2CLREntry, as2memCleanerMemNonshrinkableKB=as2memCleanerMemNonshrinkableKB, ss2trnUpdateSnapshotTransactions=ss2trnUpdateSnapshotTransactions, ss2PlanCacheCacheHitRatio=ss2PlanCacheCacheHitRatio, ss2bsActivationErrorsTotal=ss2bsActivationErrorsTotal, ss2mmTargetServerMemoryKB=ss2mmTargetServerMemoryKB, ss2LatchesEntry=ss2LatchesEntry, rs2wnsCacheHitsSecSemanticModels=rs2wnsCacheHitsSecSemanticModels, ss2bsEnqueuedP8MessagesPerSec=ss2bsEnqueuedP8MessagesPerSec, as2MDXCurrentNumOfEvalNode=as2MDXCurrentNumOfEvalNode, ss2baTasksAbortedPerSec=ss2baTasksAbortedPerSec, ss2CursorManagerByTypeTable=ss2CursorManagerByTypeTable, ss2gsUserConnections=ss2gsUserConnections, as2NameTable=as2NameTable, ss2UserSettableTable=ss2UserSettableTable, ss2dmRedoQueueKB=ss2dmRedoQueueKB, ss2DeprecatedFeaturesTable=ss2DeprecatedFeaturesTable, ss2wgsBlockedTasks=ss2wgsBlockedTasks, as2memCleanerMemShrunkKBSec=as2memCleanerMemShrunkKBSec, ss2amUsedTreePageCookie=ss2amUsedTreePageCookie, ss2amCountLobReadahead=ss2amCountLobReadahead, as2MDXNumCellCellHitCacheEvalNod=as2MDXNumCellCellHitCacheEvalNod, ss2amAUCleanupBatchesPerSec=ss2amAUCleanupBatchesPerSec, ss2bsEnqueuedMessagesTotal=ss2bsEnqueuedMessagesTotal, ss2rsInstance=ss2rsInstance, ss2sqsUnsafeAutoParamsPerSec=ss2sqsUnsafeAutoParamsPerSec, ss2tstDroppedEventsPerSec=ss2tstDroppedEventsPerSec, as2ProcIndexesCurrentPartitions=as2ProcIndexesCurrentPartitions, as2seqMeasureGroupCacheHitsSec=as2seqMeasureGroupCacheHitsSec, ss2BrokerStatisticsTable=ss2BrokerStatisticsTable, ss2bsEnqueuedLocalMessagesTotal=ss2bsEnqueuedLocalMessagesTotal, ss2ExecStatisticsEntry=ss2ExecStatisticsEntry, ss2gsTransactions=ss2gsTransactions, ss2ReplicationDistTable=ss2ReplicationDistTable, ss2rdInstance=ss2rdInstance, rs2ReportServerHTTPEntry=rs2ReportServerHTTPEntry, as2memFilestorePageFaultsPerSec=as2memFilestorePageFaultsPerSec, as2memInMemDimenProtyFileKB=as2memInMemDimenProtyFileKB, as2ThdsShortParsingJobRate=as2ThdsShortParsingJobRate, ss2bpFreePages=ss2bpFreePages, ss2mmMaximumWorkspaceMemoryKB=ss2mmMaximumWorkspaceMemoryKB, sa2JobsFailedJobs=sa2JobsFailedJobs, as2memPagePool64AllocKB=as2memPagePool64AllocKB, as2seqAvgTimePerQuery=as2seqAvgTimePerQuery)
