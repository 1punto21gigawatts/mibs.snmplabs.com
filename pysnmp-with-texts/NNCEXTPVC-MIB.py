#
# PySNMP MIB module NNCEXTPVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCEXTPVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, NotificationType, iso, ModuleIdentity, Integer32, Counter32, IpAddress, MibIdentifier, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "NotificationType", "iso", "ModuleIdentity", "Integer32", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "Counter64")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
nncExtPvc = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 79))
if mibBuilder.loadTexts: nncExtPvc.setLastUpdated('200101261907Z')
if mibBuilder.loadTexts: nncExtPvc.setOrganization('Alcatel Networks Corporation')
if mibBuilder.loadTexts: nncExtPvc.setContactInfo('Alcatel CID Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtPvc.setDescription("This module contains Alcatel's proprietary MIB definition for managing point-to-point and point-to-multipoint Permanent Virtual Connections (PVCs). The MIB supports the creation, modification, query and deletion of PVCs (Permanent Virtual Connections) on Cell Relay endpoints, both Permanent Virtual Path Connection (PVPC) and Permanent Virtual Channel Connection (PVCC) are supported. PVPCs are defined by nncCrPvpcTable and PVCCs are defined by nncCrPvccTable. PVPCs or PVCC's connecting different endpoint types, CR to FR, FR to CR, CR to CE, CE to CR, CE to FR or FR to CE are not suppported at this point. Resource connections such as Signalling, PNNI, ILMI and CPSS are also not supported. PVCs can be created by one of two ways: using rowStats as 'createAndGo' or using rowStatus as 'createAndWait'+'active'. In some cases, to create a PVC via this table requires two SET-REQs, because one SET-REQ PDU cannot fit all required objects. In these cases, the rowStatus is set to createAndWait(5) for the first 1 SET-REQ and set to active(1) for the last SET-REQ. In some cases, all required MIB objects can fit in one SET-REQ PDU. In these cases the rowStatus should be set to createAndGo(4) To delete a PVC, the SNMP manager should set rowStatus of the PVC instance to 'destroy'. Each PVC is modeled as set of entries in the PVC table. A point- to-point PVC is modeled as one entry; a point-to-multipoint (N leafs) is modeled as N entries in this table. The N entries of a point-to- multipoint PVC shares the same source end point. Some abreviations: abr/ABR/Abr: Available Bit Rate Bwd: Backward. For traffice descriptors from destination end point to source end point cbr/CBR/Cbr: Constant Bit Rate Dst: Dstination end point Fwd: Forward. For traffic descriptors from source end point to destination end point nt-vbr/ntvbr/NT-VBR: Non-Real-Time Variable Bit Rate p2p: Point-to-Point p2mp: Point-to-Multipoint Src: Source end point Targ: Target. For the destination end point info in source end point table ubr/UBR/Ubr: Unspecified Bit Rate VCI/Vci/vci: Virtual channel identifier VCL/Vcl/vcl: Virtual channel link VPI/Vpi/vpi: Virtual path identifier VPL/Vpl/Vpl: Virtual path link ")
nncExtPvcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 79, 1))
nncExtPvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 79, 3))
nncExtPvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 79, 4))
nncCrPvpcTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1), )
if mibBuilder.loadTexts: nncCrPvpcTable.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcTable.setDescription('nncCrPvpcTable contains all the objects sent to a source endpoint that are used to create, modify, delete and query PVC connections.')
nncCrPvpcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1), ).setIndexNames((0, "NNCEXTPVC-MIB", "nncCrPvpcSrcIfIndex"), (0, "NNCEXTPVC-MIB", "nncCrPvpcSrcVpi"), (0, "NNCEXTPVC-MIB", "nncCrPvpcDstIfIndex"), (0, "NNCEXTPVC-MIB", "nncCrPvpcDstVpi"))
if mibBuilder.loadTexts: nncCrPvpcTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcTableEntry.setDescription('An entry of nncCrPvpcTable')
nncCrPvpcSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nncCrPvpcSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcSrcIfIndex.setDescription('This object contains the ifIndex value for the source endpoint')
nncCrPvpcSrcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: nncCrPvpcSrcVpi.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcSrcVpi.setDescription('This object contains the VPI value for the source endpoint.')
nncCrPvpcDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: nncCrPvpcDstIfIndex.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcDstIfIndex.setDescription('This object contains the ifIndex value for the destination endpoint')
nncCrPvpcDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: nncCrPvpcDstVpi.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcDstVpi.setDescription('This object contains the VPI value for the destination endpoint.')
nncCrPvpcCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2))).clone('p2p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcCastType.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcCastType.setDescription('This object is used to indicate whether the PVPC is point-to-point or point-to-multipoint')
nncCrPvpcFwdServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("cbr", 1), ("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('nrtvbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdServiceCategory.setDescription('This object is used to set the traffic service category from source endpoint to destination endpoint. This object is dependent on the value specified in nncCrPvpcFwdTmTrafficDescripton object ')
nncCrPvpcBwdServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("cbr", 1), ("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('nrtvbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdServiceCategory.setDescription('This object is used to set the traffic service category from destination endpoint to source endpoint. This object is dependent on the value specified in nncCrPvpcBwdTmTrafficDescripton object ')
nncCrPvpcFwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the forward direction. Range: 0 - 2488320 Kb/s")
nncCrPvpcFwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the forward direction. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrPvpcFwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the forward direction. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrPvpcBwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the destination endpoint. Range: 0 - 2488320 Kb/s")
nncCrPvpcBwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the destination endpoint. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrPvpcBwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the destination endpoint. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrPvpcSrcBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcSrcBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcSrcBillingFlag.setDescription('Billing Configuration for the source endpoint.')
nncCrPvpcDstBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcDstBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcDstBillingFlag.setDescription('Billing Configuration for the destination endpoint.')
nncCrPvpcFwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the SPVC. None (0) (Not applicable,the case of a P2MP leaf) Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrPvpcFwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmPolicingOption.setDescription('Policing Option for a PVPC. The tag option is supported only on rt-VBR/nrt-VBR connections that use the P_0_1/S_0 traffic descriptor ')
nncCrPvpcFwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketOneRate.setDescription("This object is used for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrPvpcFwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one end point, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrPvpcFwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrPvpcFwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrt-VBR and rt-VBR only). Range: 1 - 10000 cells')
nncCrPvpcFwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two PVC endpoints when using the rt-VBR service category.. Range: 250-10000 microseconds')
nncCrPvpcFwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcFwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcFwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two PVC endpoints when using the nrt-VBR service category. Value set as 1.0e-#')
nncCrPvpcBwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the PVC. None (0) (Not applicable,the case of a P2MP leaf) Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrPvpcBwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmPolicingOption.setDescription('Policing Option for a PVPC. The tag option is supported only on rt-VBR/nrt-VBR connections that use the P_0_1/S_0 traffic descriptor ')
nncCrPvpcBwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketOneRate.setDescription("This object is used for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrPvpcBwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one end point, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrPvpcBwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrPvpcBwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmBucketTwoMbs.setDescription('This object is to set the maximum burst size, in cells, for SIR_0p or SIR_0+1p. Used for burst traffic. Range: 1 - 10000 cells')
nncCrPvpcBwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two PVC endpoints when using the rt-VBR service category. Range: 250-10000 microseconds')
nncCrPvpcBwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcBwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcBwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two PVC endpoints when using the nrt-VBR service category. Value set as 1.0e-# Range: 1 - 7')
nncCrPvpcSrcAlsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcSrcAlsConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcSrcAlsConfig.setDescription('This object is used to set OAM Alarm Surveillance configuration for the source endpoint.')
nncCrPvpcDstAlsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcDstAlsConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcDstAlsConfig.setDescription('This object is used to set OAM Alarm Surveillance configuration for the destination endpoint.')
nncCrPvpcCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))).clone(namedValues=NamedValues(("unknown", 0), ("nmti", 1), ("nm5620", 2), ("snmp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCrPvpcCreator.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcCreator.setDescription('The object retrieves the creator of a PVC connection.')
nncCrPvpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvpcRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcRowStatus.setDescription("This object is to control a row creation of a CR PVPC. When RowStatus is createAndWait, information for a row is cached in memory; when RowStatus is set to createAndGo or active, it indicates that all information is to be written to permanent storage, and the PVPC to be enabled. When querying the object, 'active' indicates the PVPC is physically connected and data traffic can flow. The Rowstatus of 'notInService' indicates the PVPC is physically connected but data cannot flow. If the RowStatus value of 'notReady' is returned, it indicates either the PVPC is not physically connected (ie. configured only) or the SNMP agent is awaiting further information before setting up the connection. When deleting a connection, use this object with the value 'destroy'")
nncCrPvccTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2), )
if mibBuilder.loadTexts: nncCrPvccTable.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccTable.setDescription('nncCrPvccTable contains all the objects sent to a source endpoint that are used to create, modify, delete and query Cell Relay PVC connections.')
nncCrPvccTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1), ).setIndexNames((0, "NNCEXTPVC-MIB", "nncCrPvccSrcIfIndex"), (0, "NNCEXTPVC-MIB", "nncCrPvccSrcVpi"), (0, "NNCEXTPVC-MIB", "nncCrPvccSrcVci"), (0, "NNCEXTPVC-MIB", "nncCrPvccDstIfIndex"), (0, "NNCEXTPVC-MIB", "nncCrPvccDstVpi"), (0, "NNCEXTPVC-MIB", "nncCrPvccDstVci"))
if mibBuilder.loadTexts: nncCrPvccTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccTableEntry.setDescription('An entry of nncCrPvccTable. It contains the objects required to manage CR PVCs.')
nncCrPvccSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nncCrPvccSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccSrcIfIndex.setDescription('This object contains the ifIndex value for the source endpoint.')
nncCrPvccSrcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: nncCrPvccSrcVpi.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccSrcVpi.setDescription('This object contains the VPI value for the source endpoint.')
nncCrPvccSrcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: nncCrPvccSrcVci.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccSrcVci.setDescription('This object contains the VCI value for the source endpoint.')
nncCrPvccDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: nncCrPvccDstIfIndex.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccDstIfIndex.setDescription('This object contains the ifIndex value for the destination endpoint.')
nncCrPvccDstVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: nncCrPvccDstVpi.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccDstVpi.setDescription('This object contains the VPI value for the destination endpoint.')
nncCrPvccDstVci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: nncCrPvccDstVci.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccDstVci.setDescription('This object contains the VCI value for the destination endpoint.')
nncCrPvccCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2))).clone('p2p')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccCastType.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccCastType.setDescription('This object is used to indicate whether the PVCC is point-to-point or point-to-multipoint')
nncCrPvccFwdServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("cbr", 1), ("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('nrtvbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdServiceCategory.setDescription('This object is used to set the traffic service category from source endpoint to destination endpoint. This object is dependent on the value specified in nncCrPvccFwdTmTrafficDescripton object ')
nncCrPvccBwdServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("cbr", 1), ("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('nrtvbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdServiceCategory.setDescription('This object is used to set the traffic service category from destination end point to source endpoint. This object is dependent on the value specified in nncCrPvccBwdTmTrafficDescripton object ')
nncCrPvccFwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the forward direction. Range: 0 - 2488320 Kb/s")
nncCrPvccFwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the forward direction. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrPvccFwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the forward direction. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrPvccBwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the destination endpoint. Range: 0 - 2488320 Kb/s")
nncCrPvccBwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the destination endpoint. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrPvccBwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the destination endpoint. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrPvccSrcBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccSrcBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccSrcBillingFlag.setDescription('Billing Configuration for the source endpoint.')
nncCrPvccDstBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccDstBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccDstBillingFlag.setDescription('Billing Configuration for the destination endpoint.')
nncCrPvccFwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the PVC. None (0) (Not applicable,the case of a P2MP leaf) Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrPvccFwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmPolicingOption.setDescription('Policing Option for a PVcC. The tag option is supported only on rt-VBR/nrt-VBR connections that use the P_0_1/S_0 traffic descriptor ')
nncCrPvccFwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketOneRate.setDescription("This object is used for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrPvccFwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one end point, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrPvccFwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrPvccFwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrt-VBR and rt-VBR only). Range: 1 - 10000 cells')
nncCrPvccFwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two PVC endpoints when using the rt-VBR service category. Range: 250-10000 microseconds')
nncCrPvccFwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two PVC endpoints when using the nrt-VBR service category. Value set as 1.0e-#')
nncCrPvccFwdTmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccFwdTmFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccFwdTmFrameDiscard.setDescription('The Frame (AAL protocol data unit) Discard option. When enabled, cells are discarded at the frame level by examining the SDU-type in the payload type field of the ATM cell header.')
nncCrPvccBwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the SPVC. None (0) (Not applicable,the case of a P2MP leaf) Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrPvccBwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmPolicingOption.setDescription('Policing Option for an PVCC. The tag option is supported only on rt-VBR/nrt-VBR connections that use the P_0_1/S_0 traffic descriptor ')
nncCrPvccBwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketOneRate.setDescription("This object is used for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrPvccBwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one end point, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrPvccBwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrPvccBwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrt-VBR and rt-VBR only). Range: 1 - 10000 cells')
nncCrPvccBwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two PVC endpoints when using the rt-VBR service category. Range: 250-10000 microseconds')
nncCrPvccBwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two PVC endpoints when using the nrt-VBR service category. Value set as 1.0e-# Range: 0 - 7')
nncCrPvccBwdTmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccBwdTmFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccBwdTmFrameDiscard.setDescription('The Frame (AAL protocol data unit) Discard option. When enabled, cells are discarded at the frame level by examining the SDU-type in the payload type field of the ATM cell header.')
nncCrPvccSrcAlsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccSrcAlsConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccSrcAlsConfig.setDescription('This object is used to set OAM Alarm Surveillance configuration for the source endpoint.')
nncCrPvccDstAlsConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccDstAlsConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccDstAlsConfig.setDescription('This object is used to set OAM Alarm Surveillance configuration for the destination endpoint.')
nncCrPvccCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))).clone(namedValues=NamedValues(("unknown", 0), ("nmti", 1), ("nm5620", 2), ("snmp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCrPvccCreator.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccCreator.setDescription('The object retrieves the creator of a PVC connection.')
nncCrPvccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 79, 1, 2, 1, 39), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrPvccRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccRowStatus.setDescription("This object is to control a row creation of a CR PVCC. When RowStatus is createAndWait, information for a row is cached in memory; when RowStatus is set to createAndGo or active, it indicates that all information is to be written to permanent storage, and the PVCC to be enabled. When querying the object, 'active' indicates the PVCC is physically connected and data traffic can flow. The Rowstatus of 'notInService' indicates the PVCC is physically connected but data cannot flow. If the RowStatus value of 'notReady' is returned, it indicates either the PVCC is not physically connected (ie. configured only) or the SNMP agent is awaiting further information before setting up the connection. When deleting a connection, use this object with the value 'destroy'")
nncCrPvpcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 79, 3, 1)).setObjects(("NNCEXTPVC-MIB", "nncCrPvpcSrcIfIndex"), ("NNCEXTPVC-MIB", "nncCrPvpcSrcVpi"), ("NNCEXTPVC-MIB", "nncCrPvpcDstIfIndex"), ("NNCEXTPVC-MIB", "nncCrPvpcDstVpi"), ("NNCEXTPVC-MIB", "nncCrPvpcCastType"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdServiceCategory"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdServiceCategory"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdAbrDynTrfcIcr"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdAbrDynTrfcRif"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdAbrDynTrfcRdf"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdAbrDynTrfcIcr"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdAbrDynTrfcRif"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdAbrDynTrfcRdf"), ("NNCEXTPVC-MIB", "nncCrPvpcSrcBillingFlag"), ("NNCEXTPVC-MIB", "nncCrPvpcDstBillingFlag"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmTrafficDescriptor"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmPolicingOption"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmBucketOneRate"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmBucketOneCdvt"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmBucketTwoRate"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmBucketTwoMbs"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmCdv"), ("NNCEXTPVC-MIB", "nncCrPvpcFwdTmClr"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmTrafficDescriptor"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmPolicingOption"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmBucketOneRate"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmBucketOneCdvt"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmBucketTwoRate"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmBucketTwoMbs"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmCdv"), ("NNCEXTPVC-MIB", "nncCrPvpcBwdTmClr"), ("NNCEXTPVC-MIB", "nncCrPvpcSrcAlsConfig"), ("NNCEXTPVC-MIB", "nncCrPvpcDstAlsConfig"), ("NNCEXTPVC-MIB", "nncCrPvpcCreator"), ("NNCEXTPVC-MIB", "nncCrPvpcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCrPvpcGroup = nncCrPvpcGroup.setStatus('current')
if mibBuilder.loadTexts: nncCrPvpcGroup.setDescription('Common MIB objects for configuring a CR PVPC on Alcatel CID equipment')
nncCrPvccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 79, 3, 2)).setObjects(("NNCEXTPVC-MIB", "nncCrPvccSrcIfIndex"), ("NNCEXTPVC-MIB", "nncCrPvccSrcVpi"), ("NNCEXTPVC-MIB", "nncCrPvccSrcVci"), ("NNCEXTPVC-MIB", "nncCrPvccDstIfIndex"), ("NNCEXTPVC-MIB", "nncCrPvccDstVpi"), ("NNCEXTPVC-MIB", "nncCrPvccDstVci"), ("NNCEXTPVC-MIB", "nncCrPvccCastType"), ("NNCEXTPVC-MIB", "nncCrPvccFwdServiceCategory"), ("NNCEXTPVC-MIB", "nncCrPvccBwdServiceCategory"), ("NNCEXTPVC-MIB", "nncCrPvccFwdAbrDynTrfcIcr"), ("NNCEXTPVC-MIB", "nncCrPvccFwdAbrDynTrfcRif"), ("NNCEXTPVC-MIB", "nncCrPvccFwdAbrDynTrfcRdf"), ("NNCEXTPVC-MIB", "nncCrPvccBwdAbrDynTrfcIcr"), ("NNCEXTPVC-MIB", "nncCrPvccBwdAbrDynTrfcRif"), ("NNCEXTPVC-MIB", "nncCrPvccBwdAbrDynTrfcRdf"), ("NNCEXTPVC-MIB", "nncCrPvccSrcBillingFlag"), ("NNCEXTPVC-MIB", "nncCrPvccDstBillingFlag"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmTrafficDescriptor"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmPolicingOption"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmBucketOneRate"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmBucketOneCdvt"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmBucketTwoRate"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmBucketTwoMbs"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmCdv"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmClr"), ("NNCEXTPVC-MIB", "nncCrPvccFwdTmFrameDiscard"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmTrafficDescriptor"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmPolicingOption"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmBucketOneRate"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmBucketOneCdvt"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmBucketTwoRate"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmBucketTwoMbs"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmCdv"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmClr"), ("NNCEXTPVC-MIB", "nncCrPvccBwdTmFrameDiscard"), ("NNCEXTPVC-MIB", "nncCrPvccSrcAlsConfig"), ("NNCEXTPVC-MIB", "nncCrPvccDstAlsConfig"), ("NNCEXTPVC-MIB", "nncCrPvccCreator"), ("NNCEXTPVC-MIB", "nncCrPvccRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCrPvccGroup = nncCrPvccGroup.setStatus('current')
if mibBuilder.loadTexts: nncCrPvccGroup.setDescription('Common MIB objects for configuring a CR PVCC on Alcatel CID equipment')
nncPvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 79, 4, 1)).setObjects(("NNCEXTPVC-MIB", "nncCrPvpcGroup"), ("NNCEXTPVC-MIB", "nncCrPvccGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncPvcCompliance = nncPvcCompliance.setStatus('current')
if mibBuilder.loadTexts: nncPvcCompliance.setDescription('The compliance statement for Alcatel CID PVC MIB implementation.')
mibBuilder.exportSymbols("NNCEXTPVC-MIB", nncCrPvpcDstBillingFlag=nncCrPvpcDstBillingFlag, nncCrPvccBwdAbrDynTrfcRif=nncCrPvccBwdAbrDynTrfcRif, nncExtPvcObjects=nncExtPvcObjects, nncCrPvpcFwdAbrDynTrfcRdf=nncCrPvpcFwdAbrDynTrfcRdf, nncCrPvccDstIfIndex=nncCrPvccDstIfIndex, nncCrPvpcBwdServiceCategory=nncCrPvpcBwdServiceCategory, nncCrPvccFwdTmClr=nncCrPvccFwdTmClr, nncExtPvcGroups=nncExtPvcGroups, nncCrPvpcBwdTmPolicingOption=nncCrPvpcBwdTmPolicingOption, nncCrPvccSrcIfIndex=nncCrPvccSrcIfIndex, nncCrPvpcSrcBillingFlag=nncCrPvpcSrcBillingFlag, nncCrPvpcBwdTmClr=nncCrPvpcBwdTmClr, nncCrPvpcFwdServiceCategory=nncCrPvpcFwdServiceCategory, nncCrPvccSrcAlsConfig=nncCrPvccSrcAlsConfig, nncCrPvccFwdAbrDynTrfcIcr=nncCrPvccFwdAbrDynTrfcIcr, nncCrPvpcFwdAbrDynTrfcRif=nncCrPvpcFwdAbrDynTrfcRif, nncCrPvccFwdTmPolicingOption=nncCrPvccFwdTmPolicingOption, nncCrPvccFwdTmTrafficDescriptor=nncCrPvccFwdTmTrafficDescriptor, nncCrPvpcBwdAbrDynTrfcRdf=nncCrPvpcBwdAbrDynTrfcRdf, nncCrPvccBwdAbrDynTrfcIcr=nncCrPvccBwdAbrDynTrfcIcr, nncCrPvpcBwdTmBucketTwoRate=nncCrPvpcBwdTmBucketTwoRate, nncCrPvccFwdTmBucketTwoRate=nncCrPvccFwdTmBucketTwoRate, nncCrPvpcSrcIfIndex=nncCrPvpcSrcIfIndex, nncCrPvccDstVci=nncCrPvccDstVci, nncCrPvccSrcVci=nncCrPvccSrcVci, nncCrPvpcDstIfIndex=nncCrPvpcDstIfIndex, nncCrPvpcFwdTmBucketTwoMbs=nncCrPvpcFwdTmBucketTwoMbs, nncCrPvccCastType=nncCrPvccCastType, nncCrPvpcBwdTmBucketOneCdvt=nncCrPvpcBwdTmBucketOneCdvt, nncCrPvccSrcVpi=nncCrPvccSrcVpi, nncCrPvccDstVpi=nncCrPvccDstVpi, nncCrPvpcFwdTmCdv=nncCrPvpcFwdTmCdv, nncCrPvpcTableEntry=nncCrPvpcTableEntry, nncCrPvpcFwdAbrDynTrfcIcr=nncCrPvpcFwdAbrDynTrfcIcr, nncCrPvccBwdTmBucketTwoMbs=nncCrPvccBwdTmBucketTwoMbs, nncCrPvpcFwdTmPolicingOption=nncCrPvpcFwdTmPolicingOption, nncCrPvccFwdAbrDynTrfcRif=nncCrPvccFwdAbrDynTrfcRif, nncCrPvpcDstVpi=nncCrPvpcDstVpi, nncCrPvccFwdTmFrameDiscard=nncCrPvccFwdTmFrameDiscard, nncCrPvpcBwdTmTrafficDescriptor=nncCrPvpcBwdTmTrafficDescriptor, nncCrPvccFwdTmBucketOneCdvt=nncCrPvccFwdTmBucketOneCdvt, nncCrPvccBwdTmBucketTwoRate=nncCrPvccBwdTmBucketTwoRate, PYSNMP_MODULE_ID=nncExtPvc, nncCrPvccBwdTmFrameDiscard=nncCrPvccBwdTmFrameDiscard, nncCrPvpcBwdTmBucketTwoMbs=nncCrPvpcBwdTmBucketTwoMbs, nncCrPvccBwdTmTrafficDescriptor=nncCrPvccBwdTmTrafficDescriptor, nncCrPvccGroup=nncCrPvccGroup, nncCrPvccFwdTmBucketOneRate=nncCrPvccFwdTmBucketOneRate, nncCrPvpcFwdTmBucketOneCdvt=nncCrPvpcFwdTmBucketOneCdvt, nncCrPvccDstBillingFlag=nncCrPvccDstBillingFlag, nncCrPvccBwdAbrDynTrfcRdf=nncCrPvccBwdAbrDynTrfcRdf, nncCrPvccFwdAbrDynTrfcRdf=nncCrPvccFwdAbrDynTrfcRdf, nncPvcCompliance=nncPvcCompliance, nncCrPvpcTable=nncCrPvpcTable, nncCrPvpcFwdTmBucketTwoRate=nncCrPvpcFwdTmBucketTwoRate, nncCrPvpcSrcAlsConfig=nncCrPvpcSrcAlsConfig, nncCrPvccTableEntry=nncCrPvccTableEntry, nncCrPvpcFwdTmClr=nncCrPvpcFwdTmClr, nncCrPvpcFwdTmTrafficDescriptor=nncCrPvpcFwdTmTrafficDescriptor, nncCrPvpcBwdTmCdv=nncCrPvpcBwdTmCdv, nncCrPvccFwdTmCdv=nncCrPvccFwdTmCdv, nncExtPvcCompliances=nncExtPvcCompliances, nncCrPvccTable=nncCrPvccTable, nncCrPvccBwdTmCdv=nncCrPvccBwdTmCdv, nncCrPvccBwdTmPolicingOption=nncCrPvccBwdTmPolicingOption, nncCrPvccBwdTmBucketOneCdvt=nncCrPvccBwdTmBucketOneCdvt, nncCrPvccRowStatus=nncCrPvccRowStatus, nncCrPvccFwdTmBucketTwoMbs=nncCrPvccFwdTmBucketTwoMbs, nncCrPvccBwdTmBucketOneRate=nncCrPvccBwdTmBucketOneRate, nncCrPvccFwdServiceCategory=nncCrPvccFwdServiceCategory, nncCrPvpcFwdTmBucketOneRate=nncCrPvpcFwdTmBucketOneRate, nncExtPvc=nncExtPvc, nncCrPvpcGroup=nncCrPvpcGroup, nncCrPvccCreator=nncCrPvccCreator, nncCrPvccSrcBillingFlag=nncCrPvccSrcBillingFlag, nncCrPvccDstAlsConfig=nncCrPvccDstAlsConfig, nncCrPvccBwdServiceCategory=nncCrPvccBwdServiceCategory, nncCrPvpcCreator=nncCrPvpcCreator, nncCrPvpcDstAlsConfig=nncCrPvpcDstAlsConfig, nncCrPvpcRowStatus=nncCrPvpcRowStatus, nncCrPvccBwdTmClr=nncCrPvccBwdTmClr, nncCrPvpcBwdTmBucketOneRate=nncCrPvpcBwdTmBucketOneRate, nncCrPvpcSrcVpi=nncCrPvpcSrcVpi, nncCrPvpcBwdAbrDynTrfcRif=nncCrPvpcBwdAbrDynTrfcRif, nncCrPvpcCastType=nncCrPvpcCastType, nncCrPvpcBwdAbrDynTrfcIcr=nncCrPvpcBwdAbrDynTrfcIcr)
