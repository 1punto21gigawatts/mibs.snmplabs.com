#
# PySNMP MIB module ENTERASYS-WIFI-PROTECTED-ACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-WIFI-PROTECTED-ACCESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:04:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Counter64, Gauge32, MibIdentifier, Integer32, Bits, NotificationType, iso, ModuleIdentity, TimeTicks, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Counter64", "Gauge32", "MibIdentifier", "Integer32", "Bits", "NotificationType", "iso", "ModuleIdentity", "TimeTicks", "Counter32", "IpAddress")
TextualConvention, TruthValue, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString")
etsysWiFiProtectedAccessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32))
etsysWiFiProtectedAccessMIB.setRevisions(('2003-11-06 15:15', '2003-08-07 17:08',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsysWiFiProtectedAccessMIB.setRevisionsDescriptions(('Corrected the postal code in the CONTACT-INFO clause.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: etsysWiFiProtectedAccessMIB.setLastUpdated('200311061515Z')
if mibBuilder.loadTexts: etsysWiFiProtectedAccessMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsysWiFiProtectedAccessMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsysWiFiProtectedAccessMIB.setDescription("This MIB module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to Wi-Fi Protected Access (WPA) management functionality. This implementation includes Enterasys variants of objects that appear in draft 3.0 of IEEE Std 802.11i, and are relevant to the Wi-Fi Alliance's WPA specification. Since the initial WPA implementation is TKIP-based, the initial version of this MIB does not include AES-specific objects.")
etsysWiFiProtectedAccessObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1))
etsysWPAConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1), )
if mibBuilder.loadTexts: etsysWPAConfigTable.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigTable.setDescription('The table containing WPA configuration objects.')
etsysWPAConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1), ).setIndexNames((0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigIndex"))
if mibBuilder.loadTexts: etsysWPAConfigEntry.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigEntry.setDescription('An entry in the etsysWPAConfigTable.')
etsysWPAConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: etsysWPAConfigIndex.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigIndex.setDescription('Each 802.11 interface is represented by an entry in the ifTable. If this index is zero, the information in this table shall apply to all 802.11 interfaces.')
etsysWPAConfigOptionImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigOptionImplemented.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigOptionImplemented.setDescription('This variable indicates whether the entity is WPA-capable.')
etsysWPAConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigEnabled.setDescription('When this object is set to TRUE, this shall indicate that WPA is enabled on this entity. The entity will advertise the WPA Information Element in its Beacons and Probe Responses. This object requires that dot11PrivacyInvoked also be set to TRUE. If dot11PrivacyInvoked is TRUE and etsysWPAConfigEnabled is FALSE, the security mechanism used is WEP.')
etsysWPAConfigTKIPNumberOfReplayCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigTKIPNumberOfReplayCounters.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigTKIPNumberOfReplayCounters.setDescription('Specifies the number of replay counters: (0) - 1 replay counter, (1) - 2 replay counters, (2) - 4 replay counters, (3) - 16 replay counters.')
etsysWPAConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigVersion.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigVersion.setDescription('The highest WPA version this entity supports.')
etsysWPAConfigPairwiseKeysSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigPairwiseKeysSupported.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigPairwiseKeysSupported.setDescription('This object indicates how many pairwise keys the entity supports for WPA. When zero, it only supports (four) group keys.')
etsysWPAConfigMulticastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigMulticastCipher.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigMulticastCipher.setDescription('This object indicates the multicast cipher suite selector the entity must use. The multicast cipher suite in the WPA Information Element shall take its value from this variable. It consists of an OUI (the three most significant octets) and a cipher suite identifier (the least significant octet). The network administrator can always override the automatically selected multicast cipher suite by writing this object.')
etsysWPAConfigGroupRekeyMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("timeBased", 2), ("packetBased", 3))).clone('timeBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyMethod.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyMethod.setDescription('This object selects a mechanism for rekeying the WPA Group Key. The default is time-based, once per day. Rekeying the Group key is only applicable to an entity acting in the Authenticator role (an AP in an ESS).')
etsysWPAConfigGroupRekeyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyTime.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyTime.setDescription("The time in seconds after which the WPA group key must be refreshed. The timer shall start at the moment the group key was set using the MLME-SetKeys primitive. The fine granularity (seconds) also enables the network Administrator to 'immediately' refresh the group key.")
etsysWPAConfigGroupRekeyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('1000 packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyPackets.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyPackets.setDescription('A packet count (in 1000s of packets) after which the WPA group key shall be refreshed. The packet counter shall start at the moment the group key was set using the MLME-SetKeys primitive and it shall count all packets encrypted using the current group key.')
etsysWPAConfigGroupRekeyStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyStrict.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupRekeyStrict.setDescription('This object signals that the WPA group key shall be refreshed whenever a Station leaves the BSS.')
etsysWPAConfigPSKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigPSKValue.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigPSKValue.setDescription("The Pre-Shared Key (PSK) for when WPA in PSK mode is the selected authentication suite. In that case, the PMK will obtain its value from this object. A string of all 0x00 octets has the meaning 'clear the key'. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero.")
etsysWPAConfigPSKPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigPSKPassPhrase.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigPSKPassPhrase.setDescription('The PSK, for when WPA in PSK mode is the selected authentication suite, is configured by etsysWPAConfigPSKValue. An alternative manner of setting the PSK uses the password-to-key algorithm defined in section XXX. This variable provides a means to enter a pass phrase. When this object is written, the WPA entity shall use the password-to-key algorithm specified in section XXX to derive a pre-shared key and populate etsysWPAConfigPSKValue with this key. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero.')
etsysWPAConfigPSKValueEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigPSKValueEntered.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigPSKValueEntered.setDescription('Indicates whether the Pre-Shared Key (etsysWPAConfigPSKValue) is set. This allows a network management system to prompt the network manager, when appropriate, to enter the initial value of the key.')
etsysWPAConfigMultipleAuthSuitesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigMultipleAuthSuitesSupported.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigMultipleAuthSuitesSupported.setDescription('Indicates whether the entity can take advantage of multiple selections in the etsysWPAConfigAuthenticationSuitesTable. On radios that allow use of only one key management suite at a time, the access point may choose among the selected suites in an arbitrary fashion.')
etsysWPAConfigGroupMasterRekeyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(604800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupMasterRekeyTime.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupMasterRekeyTime.setDescription("The time in seconds after which the WPA group master key must be changed. The timer shall start at the moment the group master key was set. A group key refresh will occur on a group master key change. The fine granularity (seconds) also enables the network Administrator to 'immediately' refresh the group master key.")
etsysWPAConfigGroupUpdateTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(100)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupUpdateTimeOut.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupUpdateTimeOut.setDescription('The time in seconds after which the WPA group update handshake will be retried. The timer shall start at the moment the group update message is sent.')
etsysWPAConfigGroupUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigGroupUpdateCount.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigGroupUpdateCount.setDescription('The number of times the WPA Group update will be retried.')
etsysWPAConfigPairwiseUpdateTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(100)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigPairwiseUpdateTimeOut.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigPairwiseUpdateTimeOut.setDescription('The time in seconds after which the WPA 4-way handshake will be retried. The timer shall start at the moment a 4-way message is sent.')
etsysWPAConfigPairwiseUpdateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigPairwiseUpdateCount.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigPairwiseUpdateCount.setDescription('The number of times the WPA 4-way handshake will be retried.')
etsysWPAConfigLegacyOptionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigLegacyOptionSupported.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigLegacyOptionSupported.setDescription("This object indicates whether the entity supports the 'Allow Legacy Clients' option. The answer may vary depending upon the currently-installed radio card model.")
etsysWPAConfigAllowLegacyClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigAllowLegacyClients.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigAllowLegacyClients.setDescription("This object provides a way to indicate that an access point in WPA mode should accept associations from both WPA clients and legacy (pre-WPA, pre-RSN) clients. When this object is true(1), the etsysWPAConfigMulticastCipher must be WEP-40 or WEP-104 (a.k.a. 128-bit WEP). Using WEP Group keys and letting legacy clients associate may weaken security. To minimize this, 1. Enable legacy associations only on radios that support Pairwise keys. 2. Enable frequent Group key rekeying. With TKIP and AES, there's much less threat of key cracking than with WEP, so the default is 'once in a blue moon'. With WEP, you need to think more in terms of Rapid Rekeying. Access points implementing this feature are under no obligation to support non-802.1X clients. For instance, an access point might use one-time dynamic WEP keys when WPA Group key rotation is disabled. Static WEP clients would not know these keys.")
etsysWPAConfigRekeyPairwiseWEP = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigRekeyPairwiseWEP.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigRekeyPairwiseWEP.setDescription('This object applies when WPA is enabled (dot11PrivacyInvoked, etsysWPAConfigEnabled) and management has chosen to allow a mix of WPA and non-WPA clients (etsysWPAConfigAllowLegacyClients). It specifies whether the access point should tumble Pairwise WEP keys belonging to non-WPA clients. The access point uses Group key rotation as a trigger for Pairwise WEP key tumbling; if you want the latter, be sure to configure the former. See also: etsysDot1xRekeyPairwise.')
etsysWPAConfigUnicastCiphersTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 2), )
if mibBuilder.loadTexts: etsysWPAConfigUnicastCiphersTable.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigUnicastCiphersTable.setDescription('This table lists the unicast ciphers supported by this entity. It allows enabling and disabling of each unicast cipher by network management. The Unicast Cipher Suite list in the WPA Information Element is formed using the information in this table.')
etsysWPAConfigUnicastCiphersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 2, 1), ).setIndexNames((0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigIndex"), (0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigUnicastCipherIndex"))
if mibBuilder.loadTexts: etsysWPAConfigUnicastCiphersEntry.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigUnicastCiphersEntry.setDescription('The table entry, indexed by the interface index (or all interfaces) and the unicast cipher.')
etsysWPAConfigUnicastCipherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: etsysWPAConfigUnicastCipherIndex.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigUnicastCipherIndex.setDescription('The auxiliary index into the etsysWPAConfigUnicastCiphersTable.')
etsysWPAConfigUnicastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigUnicastCipher.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigUnicastCipher.setDescription('The selector of a supported unicast cipher. It consists of an OUI (the three most significant octets) and a cipher suite identifier (the least significant octet).')
etsysWPAConfigUnicastCipherEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigUnicastCipherEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigUnicastCipherEnabled.setDescription('This object enables or disables the unicast cipher.')
etsysWPAConfigAuthenticationSuitesTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 3), )
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuitesTable.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuitesTable.setDescription('This table lists the authentication suites supported by this entity. Each authentication suite can be individually enabled and disabled. The Authentication Suite List in the WPA IE is formed using the information in this table.')
etsysWPAConfigAuthenticationSuitesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 3, 1), ).setIndexNames((0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigIndex"), (0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigAuthenticationSuiteIndex"))
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuitesEntry.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuitesEntry.setDescription('An entry (row) in the etsysWPAConfigAuthenticationSuitesTable.')
etsysWPAConfigAuthenticationSuiteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuiteIndex.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuiteIndex.setDescription('The auxiliary variable used as an index into the etsysWPAConfigAuthenticationSuitesTable.')
etsysWPAConfigAuthenticationSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuite.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuite.setDescription('The selector of an authentication suite. It consists of an OUI (the three most significant octets) and a cipher suite identifier (the least significant octet). ')
etsysWPAConfigAuthenticationSuiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuiteEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysWPAConfigAuthenticationSuiteEnabled.setDescription('This variable indicates whether the corresponding authentication suite is enabled/disabled.')
etsysWPAStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4), )
if mibBuilder.loadTexts: etsysWPAStatsTable.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsTable.setDescription('This table maintains per-STA statistics for SN. The entry with etsysWPAStatsSTAAddress set to FF-FF-FF-FF-FF-FF shall contain statistics for broadcast/multicast traffic.')
etsysWPAStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1), ).setIndexNames((0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigIndex"), (0, "ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsIndex"))
if mibBuilder.loadTexts: etsysWPAStatsEntry.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsEntry.setDescription('An entry in the etsysWPAStatsTable.')
etsysWPAStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: etsysWPAStatsIndex.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsIndex.setDescription('An auxiliary index into the etsysWPAStatsTable.')
etsysWPAStatsSTAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsSTAAddress.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsSTAAddress.setDescription('The MAC address of the station the statistics in this conceptual row belong to.')
etsysWPAStatsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsVersion.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsVersion.setDescription('The WPA version which the station associated with.')
etsysWPAStatsSelectedUnicastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsSelectedUnicastCipher.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsSelectedUnicastCipher.setDescription('The Authentication Suite the station selected during association. The value consists of a three octet OUI followed by a one octet Type as follows: OUI Value Authentication Type Key Management Type -------- ----- ------------------- ------------------- 00:00:00 0 Reserved Reserved 00:00:00 1 Unspecified authentication 802.1X Key Management over 802.1X 00:00:00 2 None 802.1X Key Management using pre-shared Key 00:00:00 3-255 Reserved Reserved Vendor any Vendor Specific Vendor Specific other any Reserved Reserved')
etsysWPAStatsTKIPICVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsTKIPICVErrors.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsTKIPICVErrors.setDescription('Counts the number of TKIP ICV errors encountered when decrypting packets for the station.')
etsysWPAStatsTKIPLocalMICFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsTKIPLocalMICFailures.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsTKIPLocalMICFailures.setDescription('Counts the number of Michael MIC failure encountered when checking the integrity of packets received from the station at this entity.')
etsysWPAStatsTKIPRemoteMICFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsTKIPRemoteMICFailures.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsTKIPRemoteMICFailures.setDescription('Counts the number of Michael MIC failures encountered by the station identified by dot11StatsSTAAddress and reported back to this entity. ')
etsysWPAStatsTKIPCounterMeasuresInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etsysWPAStatsTKIPCounterMeasuresInvoked.setStatus('current')
if mibBuilder.loadTexts: etsysWPAStatsTKIPCounterMeasuresInvoked.setDescription('Counts the number of times a MIC failure occurred two times within 60 seconds and counter-measures were invoked. This variables counts this for both local and remote. It counts every time countermeasures are invoked.')
etsysWpaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2))
etsysWpaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 1))
etsysWpaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 2))
etsysWpaBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 1, 1)).setObjects(("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigOptionImplemented"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigEnabled"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigTKIPNumberOfReplayCounters"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigVersion"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigPairwiseKeysSupported"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigMulticastCipher"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupRekeyMethod"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupRekeyTime"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupRekeyPackets"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupRekeyStrict"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigPSKValue"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigPSKValueEntered"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigMultipleAuthSuitesSupported"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigPSKPassPhrase"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupMasterRekeyTime"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupUpdateTimeOut"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigGroupUpdateCount"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigPairwiseUpdateTimeOut"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigPairwiseUpdateCount"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigLegacyOptionSupported"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigAllowLegacyClients"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigRekeyPairwiseWEP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysWpaBaseGroup = etsysWpaBaseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysWpaBaseGroup.setDescription('A collection of objects providing configuration information for the WPA service.')
etsysWpaUnicastCipherGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 1, 2)).setObjects(("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigUnicastCipher"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigUnicastCipherEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysWpaUnicastCipherGroup = etsysWpaUnicastCipherGroup.setStatus('current')
if mibBuilder.loadTexts: etsysWpaUnicastCipherGroup.setDescription('A collection of objects providing configuration information for the WPA service.')
etsysWpaAuthSuiteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 1, 3)).setObjects(("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigAuthenticationSuite"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAConfigAuthenticationSuiteEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysWpaAuthSuiteGroup = etsysWpaAuthSuiteGroup.setStatus('current')
if mibBuilder.loadTexts: etsysWpaAuthSuiteGroup.setDescription('A collection of objects providing configuration information for the WPA service.')
etsysWpaStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 1, 4)).setObjects(("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsSTAAddress"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsVersion"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsSelectedUnicastCipher"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsTKIPICVErrors"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsTKIPLocalMICFailures"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsTKIPRemoteMICFailures"), ("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWPAStatsTKIPCounterMeasuresInvoked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysWpaStatsGroup = etsysWpaStatsGroup.setStatus('current')
if mibBuilder.loadTexts: etsysWpaStatsGroup.setDescription('A collection of objects providing statistics information for the WPA service.')
etsysWpaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 32, 2, 2, 1)).setObjects(("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", "etsysWpaBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysWpaCompliance = etsysWpaCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysWpaCompliance.setDescription('The compliance statement for devices that support the Enterasys Wi-Fi Protected Access (WPA) MIB.')
mibBuilder.exportSymbols("ENTERASYS-WIFI-PROTECTED-ACCESS-MIB", etsysWPAConfigMultipleAuthSuitesSupported=etsysWPAConfigMultipleAuthSuitesSupported, etsysWPAConfigTable=etsysWPAConfigTable, etsysWPAConfigUnicastCipher=etsysWPAConfigUnicastCipher, etsysWPAConfigAuthenticationSuiteEnabled=etsysWPAConfigAuthenticationSuiteEnabled, etsysWPAConfigGroupRekeyMethod=etsysWPAConfigGroupRekeyMethod, etsysWPAConfigTKIPNumberOfReplayCounters=etsysWPAConfigTKIPNumberOfReplayCounters, etsysWPAStatsVersion=etsysWPAStatsVersion, etsysWPAConfigUnicastCiphersTable=etsysWPAConfigUnicastCiphersTable, etsysWPAConfigPairwiseUpdateTimeOut=etsysWPAConfigPairwiseUpdateTimeOut, etsysWPAConfigAuthenticationSuitesEntry=etsysWPAConfigAuthenticationSuitesEntry, etsysWpaGroups=etsysWpaGroups, etsysWPAConfigGroupUpdateTimeOut=etsysWPAConfigGroupUpdateTimeOut, etsysWPAConfigUnicastCipherEnabled=etsysWPAConfigUnicastCipherEnabled, etsysWpaCompliances=etsysWpaCompliances, etsysWPAConfigUnicastCipherIndex=etsysWPAConfigUnicastCipherIndex, etsysWPAConfigLegacyOptionSupported=etsysWPAConfigLegacyOptionSupported, etsysWPAConfigPSKValue=etsysWPAConfigPSKValue, etsysWPAStatsTKIPCounterMeasuresInvoked=etsysWPAStatsTKIPCounterMeasuresInvoked, etsysWpaUnicastCipherGroup=etsysWpaUnicastCipherGroup, etsysWPAConfigGroupMasterRekeyTime=etsysWPAConfigGroupMasterRekeyTime, etsysWPAConfigMulticastCipher=etsysWPAConfigMulticastCipher, etsysWiFiProtectedAccessObjects=etsysWiFiProtectedAccessObjects, etsysWpaAuthSuiteGroup=etsysWpaAuthSuiteGroup, etsysWPAConfigVersion=etsysWPAConfigVersion, etsysWPAConfigGroupUpdateCount=etsysWPAConfigGroupUpdateCount, etsysWPAConfigEntry=etsysWPAConfigEntry, etsysWPAConfigPairwiseUpdateCount=etsysWPAConfigPairwiseUpdateCount, etsysWpaConformance=etsysWpaConformance, etsysWPAConfigPSKPassPhrase=etsysWPAConfigPSKPassPhrase, etsysWPAStatsTKIPICVErrors=etsysWPAStatsTKIPICVErrors, etsysWPAConfigOptionImplemented=etsysWPAConfigOptionImplemented, etsysWPAConfigPSKValueEntered=etsysWPAConfigPSKValueEntered, etsysWPAConfigAuthenticationSuitesTable=etsysWPAConfigAuthenticationSuitesTable, etsysWPAStatsTable=etsysWPAStatsTable, PYSNMP_MODULE_ID=etsysWiFiProtectedAccessMIB, etsysWPAConfigEnabled=etsysWPAConfigEnabled, etsysWPAConfigUnicastCiphersEntry=etsysWPAConfigUnicastCiphersEntry, etsysWPAStatsSelectedUnicastCipher=etsysWPAStatsSelectedUnicastCipher, etsysWPAStatsSTAAddress=etsysWPAStatsSTAAddress, etsysWPAConfigPairwiseKeysSupported=etsysWPAConfigPairwiseKeysSupported, etsysWPAStatsIndex=etsysWPAStatsIndex, etsysWPAConfigGroupRekeyStrict=etsysWPAConfigGroupRekeyStrict, etsysWpaBaseGroup=etsysWpaBaseGroup, etsysWPAConfigAuthenticationSuiteIndex=etsysWPAConfigAuthenticationSuiteIndex, etsysWpaCompliance=etsysWpaCompliance, etsysWpaStatsGroup=etsysWpaStatsGroup, etsysWPAStatsEntry=etsysWPAStatsEntry, etsysWPAConfigGroupRekeyPackets=etsysWPAConfigGroupRekeyPackets, etsysWPAConfigAllowLegacyClients=etsysWPAConfigAllowLegacyClients, etsysWPAConfigIndex=etsysWPAConfigIndex, etsysWPAConfigRekeyPairwiseWEP=etsysWPAConfigRekeyPairwiseWEP, etsysWiFiProtectedAccessMIB=etsysWiFiProtectedAccessMIB, etsysWPAConfigAuthenticationSuite=etsysWPAConfigAuthenticationSuite, etsysWPAConfigGroupRekeyTime=etsysWPAConfigGroupRekeyTime, etsysWPAStatsTKIPLocalMICFailures=etsysWPAStatsTKIPLocalMICFailures, etsysWPAStatsTKIPRemoteMICFailures=etsysWPAStatsTKIPRemoteMICFailures)
