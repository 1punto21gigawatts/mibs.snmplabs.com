#
# PySNMP MIB module CISCO-DIFFSERV-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DIFFSERV-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
diffServClfrEntry, IndexIntegerNextFree, IndexInteger = mibBuilder.importSymbols("DIFFSERV-MIB", "diffServClfrEntry", "IndexIntegerNextFree", "IndexInteger")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Gauge32, IpAddress, TimeTicks, ObjectIdentity, Bits, MibIdentifier, Integer32, Counter32, Unsigned32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "IpAddress", "TimeTicks", "ObjectIdentity", "Bits", "MibIdentifier", "Integer32", "Counter32", "Unsigned32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
RowPointer, TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
ciscoDiffServExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 381))
ciscoDiffServExtMIB.setRevisions(('2004-11-16 00:00', '2003-12-18 00:00', '2003-12-12 00:00', '2003-12-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDiffServExtMIB.setRevisionsDescriptions(('Changed max lengths of cdsmClfrName and cdsmFCMultiFieldClfrName to 63 bytes.', 'Added cdsmClfrNextFreeElement and cdsmFCMultiFieldClfrNextFreeStmt.', 'Added cdsmChkSumTable. Added cdsmFCMultiFieldMatchWildCard object to cdsmFCMultiFieldMatchStmtTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDiffServExtMIB.setLastUpdated('200411160000Z')
if mibBuilder.loadTexts: ciscoDiffServExtMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoDiffServExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoDiffServExtMIB.setDescription('This MIB is a Cisco extension to the DIFFSERV-MIB, RFC 3289. This MIB defines a Fibre Channel (FC) Multi Field filter to be used in conjunction with the DIFFSERV-MIB. It also helps in associating Differentiated Services Classifiers to interfaces on a VSAN (Virtual Storage Area Network) via the cdsmDataPathTable defined in this MIB.')
ciscoDiffServExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 381, 1))
ciscoDiffServExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 381, 2))
cdsmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1))
class CdsmDataDirection(TextualConvention, Integer32):
    description = "Specifies a direction of data travel on a VSAN. 'inbound' traffic is operated on during reception from the VSAN, while 'outbound' traffic is operated on prior to transmission on the VSAN."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class CdsmFcAddrAndMask(TextualConvention, OctetString):
    description = 'Represents a Fibre Channel Address and, for some formats, an associated mask. If a Fibre Channel World Wide Name (WWN) is represented, the length is 8 octets. If a Fibre Channel ID (FC-ID) is represented, the length is 3 octets. If a Fibre Channel ID is represented with the 3 octet mask, then the length is 6 octets. Objects defined with this syntax must specify the meaning of the zero-length string.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 3), ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), )
cdsmDataPathTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 1), )
if mibBuilder.loadTexts: cdsmDataPathTable.setStatus('current')
if mibBuilder.loadTexts: cdsmDataPathTable.setDescription('This table facilitates setting up of data path classifier elements in the DIFFSERV-MIB. This table acts as a trigger for setting up interface based classifier element(s) from a VSAN based classifier element. Creation of an entry in this table on a VSAN and setting of cdsmDataPathClfrStart, results in the classifier elements of the data path elements from the corresponding interface(s) being set. Specifically, the instance(s) of diffServMeterSucceedNext object in the diffServMeterTable, which is pointed to by diffServDataPathStart of the corresponding interface(s) in that VSAN, are set with the value of cdsmDataPathClfrStart object for that VSAN. Deletion of an entry in this table on a VSAN or setting of cdsmDataPathClfrStart to zeroDotZero on a VSAN, results in the corresponding classifier element being removed from the data path elements in the interface(s) belonging to that VSAN.')
cdsmDataPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-DIFFSERV-EXT-MIB", "cdsmDataPathDirection"))
if mibBuilder.loadTexts: cdsmDataPathEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmDataPathEntry.setDescription('An entry (conceptual row) in this table.')
cdsmDataPathDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 1, 1, 1), CdsmDataDirection())
if mibBuilder.loadTexts: cdsmDataPathDirection.setStatus('current')
if mibBuilder.loadTexts: cdsmDataPathDirection.setDescription('Specifies the direction of traffic flow on this VSAN.')
cdsmDataPathClfrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 1, 1, 2), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmDataPathClfrStart.setStatus('current')
if mibBuilder.loadTexts: cdsmDataPathClfrStart.setDescription('This object selects the first Differentiated Services Classifier Element to handle traffic on this VSAN. This RowPointer should point to an instance of diffServClfrEntry. The value of this RowPointer will be copied to instance(s) of diffServMeterSucceedNext object in the diffServMeterEntry in the DIFFSERV-MIB, which is (are) pointed to by corresponding diffServDataPathStart object(s) from the diffServDataPathTable. A value of zeroDotZero in this attribute indicates that no Differentiated Services classification is performed on traffic of this data path and on the interface(s) on this VSAN. Setting this to point to a target that does not exist results in an error. If the row pointed to is removed or becomes inactive by other means, the treatment is as if this attribute contains a value of zeroDotZero.')
cdsmDataPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmDataPathStatus.setStatus('current')
if mibBuilder.loadTexts: cdsmDataPathStatus.setDescription('The status of this conceptual row.')
cdsmClfrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 2), )
if mibBuilder.loadTexts: cdsmClfrTable.setStatus('current')
if mibBuilder.loadTexts: cdsmClfrTable.setDescription('This table is an extension to the diffServClfrTable defined in the DIFFSERV-MIB.')
cdsmClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 2, 1), )
diffServClfrEntry.registerAugmentions(("CISCO-DIFFSERV-EXT-MIB", "cdsmClfrEntry"))
cdsmClfrEntry.setIndexNames(*diffServClfrEntry.getIndexNames())
if mibBuilder.loadTexts: cdsmClfrEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmClfrEntry.setDescription('An entry (conceptual row) in this table.')
cdsmClfrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmClfrName.setStatus('current')
if mibBuilder.loadTexts: cdsmClfrName.setDescription("The name of this classifier entry. The name of a classifier entry should be unique. This object is a human readable string. This object cannot be modified while the value of the corresponding instance of diffServClfrStatus in diffServClfrTable is 'active'. This object MUST be set before or concurrently with setting the corresponding instance of diffServClfrStatus object to 'active'.")
cdsmClfrNextFreeElement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 2, 1, 2), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmClfrNextFreeElement.setStatus('current')
if mibBuilder.loadTexts: cdsmClfrNextFreeElement.setDescription('This object contains an unused value for diffServClfrElementId for this value of diffServClfrId, or a value of zero if none exist.')
cdsmFCMultiFieldClfrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3), )
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrTable.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrTable.setDescription('A table of FC multi-field classifier filter entries. These can be used to identify FC traffic.')
cdsmFCMultiFieldClfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrId"))
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrEntry.setDescription('An entry (conceptual row) in this table defines a single filter. An instance of diffServClfrElementSpecific object (in the diffServClfrElementTable of DIFFSERV-MIB) which points to an entry in this table, identifies a Fibre Channel filter.')
cdsmFCMultiFieldClfrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3, 1, 1), IndexInteger())
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrId.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrId.setDescription('An index that enumerates the MultiField Classifier filter entries.')
cdsmFCMultiFieldClfrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrName.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrName.setDescription("The name of this filter entry. The name should be unique. This object is a human readable string. This object cannot be modified while the value of the corresponding instance of cdsmFCMultiFieldClfrStatus object is 'active'. This object MUST be set before or concurrently with setting the corresponding instance of cdsmFCMultiFieldClfrStatus object to 'active'.")
cdsmFCMultiFieldClfrMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrMatch.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrMatch.setDescription("This object specifies how this filter should be applied. If this object is set to 'true', then all the match statements associated with this filter must be satisfied in order for this filter match to be considered successful. If this object is set to 'false', then even if any one of the criteria associated with this filter is satisfied, then the filter match is considered successful.")
cdsmFCMultiFieldClfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrStatus.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrStatus.setDescription('The status of this conceptual row. All writable objects in this row can be modified at any time, with the exception of cdsmFCMultiFieldClfrName.')
cdsmFCMultiFieldClfrNextFreeStmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 3, 1, 5), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrNextFreeStmt.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldClfrNextFreeStmt.setDescription('This object contains an unused value for cdsmFCMultiFieldMatchId for this value of cdsmFCMultiFieldClfrId, or a value of zero if none exist.')
cdsmFCMultiFieldMatchStmtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4), )
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchStmtTable.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchStmtTable.setDescription('A table of FC match statements to be used for classifying FC traffic after associating with an FC multi-field classifier.')
cdsmFCMultiFieldMatchStmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrId"), (0, "CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchId"))
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchStmtEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchStmtEntry.setDescription("An entry (conceptual row) in this table. An FC multi-field classifier is represented by cdsmFCMultiFieldClfrId and match statements are represented by cdsmFCMultiFieldMatchId. All match statements which belong to the same classifier have a common cdsmFCMultiFieldClfrId. Note that certain restrictions are applicable in configuring match statements for MultiField classifier entries. 1. Suppose the match statement(s) belong to a classifier filter that has the corresponding instance of cdsmFCMultiFieldClfrMatch object set to 'true'. This essentially means that all match statements belonging to that classifier filter should be matched for the match to be considered successful. In such a case, a maximum of only one instance of each criterion can be set in the corresponding match statement(s). That is, there can be one instance of the source address, one instance of destination address and one of interface. These can be in one or more match statements. Attempt to set more than one instance of a match criterion in this case, results in error. 2. Suppose there is a classifier filter that has the corresponding instance of cdsmFCMultiFieldClfrMatch object set to 'false'. Such a classifier filter can have multiple instances of match criteria associated with it. However, it would be an error to set the cdsmFCMultiFieldClfrMatch object for this classifier filter to 'true', as it does not comply with 1. above.")
cdsmFCMultiFieldMatchId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchId.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchId.setDescription('Uniquely represents a match statement.')
cdsmFCMultiFieldMatchSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1, 2), CdsmFcAddrAndMask().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchSrcAddr.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchSrcAddr.setDescription('This object represents an FC address that needs to be matched with the source address in a FC frame. This address can be either an 8 octet long FC World Wide Name (WWN) or a 3 octet long FC-ID. If this object is set to an FC-ID, then it can be optionally followed by a 3 octet mask. The mask can have one of the following values: 0xff0000 or 0xffff00 or 0xffffff. The zero-length string means no address is configured for matching with the source address in a FC frame. Setting this object to the zero length string is equivalent to disabling this match criterion.')
cdsmFCMultiFieldMatchDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1, 3), CdsmFcAddrAndMask().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchDstAddr.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchDstAddr.setDescription('This object represents an FC address that needs to be matched with the destination address in a FC frame. This address can be either an 8 octet long FC World Wide Name (WWN) or a 3 octet long FC-ID. If this object is set to an FC-ID, then it can be optionally followed by a 3 octet mask. The mask can have one of the following values: 0xff0000 or 0xffff00 or 0xffffff. The zero-length string means no address is configured for matching with the destination address in a FC frame. Setting this object to the zero length string is equivalent to disabling this match criterion.')
cdsmFCMultiFieldMatchIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchIntf.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchIntf.setDescription('This object represents an FC interface on the local device on which a frame should arrive in order to be classified by this filter. A value of zero indicates that no interface is configured. Setting this object to zero is equivalent to disabling this match criterion.')
cdsmFCMultiFieldMatchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchStatus.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchStatus.setDescription('The status of this conceptual row. All writable objects in this row can be modified at any time.')
cdsmFCMultiFieldMatchWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchWildCard.setStatus('current')
if mibBuilder.loadTexts: cdsmFCMultiFieldMatchWildCard.setDescription("This object specifies whether the wild-card option has been set. If this object is set to 'true', then the wild-card option is set and all the FC traffic will be considered to match the corresponding multi-field classifier. If this object is set to 'false', then the wild-card option is not set. Setting this object to 'true' in a multi-field classifier which has other match criteria set is an error.")
cdsmRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 5), )
if mibBuilder.loadTexts: cdsmRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: cdsmRateLimitTable.setDescription('This table specifies a set of rate limit parameter(s) for interfaces on the local device.')
cdsmRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-DIFFSERV-EXT-MIB", "cdsmRateLimitId"))
if mibBuilder.loadTexts: cdsmRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmRateLimitEntry.setDescription('An entry (conceptual row) in this table. An instance of diffServMeterSpecific object (in the diffServMeterTable of DIFFSERV-MIB) which points to an entry in this table, identifies a rate-limit meter.')
cdsmRateLimitId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 5, 1, 1), IndexInteger())
if mibBuilder.loadTexts: cdsmRateLimitId.setStatus('current')
if mibBuilder.loadTexts: cdsmRateLimitId.setDescription('Uniquely represents a rate-limit meter.')
cdsmRateLimitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdsmRateLimitPercent.setStatus('current')
if mibBuilder.loadTexts: cdsmRateLimitPercent.setDescription('Specifies the rate-limit factor on this interface.')
cdsmSchedulerQTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 6), )
if mibBuilder.loadTexts: cdsmSchedulerQTable.setStatus('current')
if mibBuilder.loadTexts: cdsmSchedulerQTable.setDescription('This table contains configuration information regarding the scheduler queues on the local device.')
cdsmSchedulerQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-DIFFSERV-EXT-MIB", "cdsmSchedulerQNum"))
if mibBuilder.loadTexts: cdsmSchedulerQEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmSchedulerQEntry.setDescription('An entry (conceptual row) in this table.')
cdsmSchedulerQNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: cdsmSchedulerQNum.setStatus('current')
if mibBuilder.loadTexts: cdsmSchedulerQNum.setDescription('The index of this scheduler queue.')
cdsmSchedulerQWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdsmSchedulerQWeight.setStatus('current')
if mibBuilder.loadTexts: cdsmSchedulerQWeight.setDescription('The weight associated with this queue.')
cdsmChkSumTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 7), )
if mibBuilder.loadTexts: cdsmChkSumTable.setStatus('current')
if mibBuilder.loadTexts: cdsmChkSumTable.setDescription('This table contains checksums for the local FC Qos configuration on all configured VSANs.')
cdsmChkSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: cdsmChkSumEntry.setStatus('current')
if mibBuilder.loadTexts: cdsmChkSumEntry.setDescription('An entry (conceptual row) in this table.')
cdsmChkSumValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 381, 1, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdsmChkSumValue.setStatus('current')
if mibBuilder.loadTexts: cdsmChkSumValue.setDescription('The checksum corresponding to the local FC Qos configuration on this VSAN.')
ciscoDiffServExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 1))
ciscoDiffServExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2))
ciscoDiffServExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 1, 1)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServExtGroup"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServVsanGroup"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServSchedQGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServExtMIBCompliance = ciscoDiffServExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDiffServExtMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Extension to the DIFFSERV-MIB.')
ciscoDiffServExtMIBComplianceR1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 1, 2)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServExtGroup1"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServVsanGroup"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServSchedQGroup"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServChkSumGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServExtMIBComplianceR1 = ciscoDiffServExtMIBComplianceR1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDiffServExtMIBComplianceR1.setDescription('The compliance statement for entities which implement the Cisco Extension to the DIFFSERV-MIB.')
ciscoDiffServExtMIBComplianceR2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 1, 3)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServExtGroup2"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServVsanGroup"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServSchedQGroup"), ("CISCO-DIFFSERV-EXT-MIB", "ciscoDiffServChkSumGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServExtMIBComplianceR2 = ciscoDiffServExtMIBComplianceR2.setStatus('current')
if mibBuilder.loadTexts: ciscoDiffServExtMIBComplianceR2.setDescription('The compliance statement for entities which implement the Cisco Extension to the DIFFSERV-MIB.')
ciscoDiffServVsanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2, 1)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "cdsmDataPathClfrStart"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmDataPathStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServVsanGroup = ciscoDiffServVsanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDiffServVsanGroup.setDescription('A collection of objects for displaying and configuring VSAN related information.')
ciscoDiffServExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2, 2)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "cdsmClfrName"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrName"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrMatch"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrStatus"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchSrcAddr"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchDstAddr"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchIntf"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchStatus"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmRateLimitPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServExtGroup = ciscoDiffServExtGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDiffServExtGroup.setDescription('A collection of objects for displaying and configuring FC multi-field filters and other extensions to the DIFFSERV-MIB.')
ciscoDiffServSchedQGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2, 3)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "cdsmSchedulerQWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServSchedQGroup = ciscoDiffServSchedQGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDiffServSchedQGroup.setDescription('A collection of objects for displaying and configuring DWRR scheduler Q weights.')
ciscoDiffServExtGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2, 4)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "cdsmClfrName"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrName"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrMatch"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrStatus"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchSrcAddr"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchDstAddr"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchIntf"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchStatus"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchWildCard"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmRateLimitPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServExtGroup1 = ciscoDiffServExtGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDiffServExtGroup1.setDescription('A collection of objects for displaying and configuring FC multi-field filters and other extensions to the DIFFSERV-MIB.')
ciscoDiffServChkSumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2, 5)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "cdsmChkSumValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServChkSumGroup = ciscoDiffServChkSumGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDiffServChkSumGroup.setDescription('A collection of object(s) for displaying FC Qos configuration checksum.')
ciscoDiffServExtGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 381, 2, 2, 6)).setObjects(("CISCO-DIFFSERV-EXT-MIB", "cdsmClfrName"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmClfrNextFreeElement"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrName"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrMatch"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrStatus"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldClfrNextFreeStmt"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchSrcAddr"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchDstAddr"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchIntf"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchStatus"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmFCMultiFieldMatchWildCard"), ("CISCO-DIFFSERV-EXT-MIB", "cdsmRateLimitPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDiffServExtGroup2 = ciscoDiffServExtGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoDiffServExtGroup2.setDescription('A collection of objects for displaying and configuring FC multi-field filters and other extensions to the DIFFSERV-MIB.')
mibBuilder.exportSymbols("CISCO-DIFFSERV-EXT-MIB", cdsmFCMultiFieldClfrNextFreeStmt=cdsmFCMultiFieldClfrNextFreeStmt, ciscoDiffServExtMIBComplianceR1=ciscoDiffServExtMIBComplianceR1, ciscoDiffServExtMIBObjects=ciscoDiffServExtMIBObjects, cdsmSchedulerQTable=cdsmSchedulerQTable, cdsmRateLimitTable=cdsmRateLimitTable, ciscoDiffServExtMIB=ciscoDiffServExtMIB, cdsmFCMultiFieldMatchStmtTable=cdsmFCMultiFieldMatchStmtTable, cdsmDataPathEntry=cdsmDataPathEntry, ciscoDiffServExtGroup2=ciscoDiffServExtGroup2, cdsmFCMultiFieldMatchSrcAddr=cdsmFCMultiFieldMatchSrcAddr, cdsmRateLimitEntry=cdsmRateLimitEntry, ciscoDiffServExtMIBGroups=ciscoDiffServExtMIBGroups, ciscoDiffServChkSumGroup=ciscoDiffServChkSumGroup, cdsmDataPathDirection=cdsmDataPathDirection, cdsmConfiguration=cdsmConfiguration, cdsmDataPathClfrStart=cdsmDataPathClfrStart, cdsmFCMultiFieldClfrStatus=cdsmFCMultiFieldClfrStatus, ciscoDiffServExtMIBComplianceR2=ciscoDiffServExtMIBComplianceR2, cdsmDataPathTable=cdsmDataPathTable, ciscoDiffServSchedQGroup=ciscoDiffServSchedQGroup, PYSNMP_MODULE_ID=ciscoDiffServExtMIB, cdsmFCMultiFieldMatchDstAddr=cdsmFCMultiFieldMatchDstAddr, cdsmClfrName=cdsmClfrName, cdsmChkSumValue=cdsmChkSumValue, cdsmRateLimitPercent=cdsmRateLimitPercent, cdsmFCMultiFieldClfrId=cdsmFCMultiFieldClfrId, cdsmClfrNextFreeElement=cdsmClfrNextFreeElement, cdsmChkSumTable=cdsmChkSumTable, ciscoDiffServExtGroup1=ciscoDiffServExtGroup1, cdsmFCMultiFieldClfrEntry=cdsmFCMultiFieldClfrEntry, cdsmFCMultiFieldClfrMatch=cdsmFCMultiFieldClfrMatch, cdsmClfrEntry=cdsmClfrEntry, cdsmSchedulerQNum=cdsmSchedulerQNum, ciscoDiffServVsanGroup=ciscoDiffServVsanGroup, cdsmRateLimitId=cdsmRateLimitId, ciscoDiffServExtMIBCompliances=ciscoDiffServExtMIBCompliances, CdsmFcAddrAndMask=CdsmFcAddrAndMask, cdsmDataPathStatus=cdsmDataPathStatus, cdsmFCMultiFieldMatchStmtEntry=cdsmFCMultiFieldMatchStmtEntry, cdsmFCMultiFieldMatchWildCard=cdsmFCMultiFieldMatchWildCard, cdsmSchedulerQWeight=cdsmSchedulerQWeight, CdsmDataDirection=CdsmDataDirection, cdsmFCMultiFieldMatchStatus=cdsmFCMultiFieldMatchStatus, cdsmFCMultiFieldClfrTable=cdsmFCMultiFieldClfrTable, cdsmSchedulerQEntry=cdsmSchedulerQEntry, cdsmChkSumEntry=cdsmChkSumEntry, ciscoDiffServExtMIBConform=ciscoDiffServExtMIBConform, ciscoDiffServExtGroup=ciscoDiffServExtGroup, cdsmFCMultiFieldClfrName=cdsmFCMultiFieldClfrName, cdsmFCMultiFieldMatchIntf=cdsmFCMultiFieldMatchIntf, ciscoDiffServExtMIBCompliance=ciscoDiffServExtMIBCompliance, cdsmFCMultiFieldMatchId=cdsmFCMultiFieldMatchId, cdsmClfrTable=cdsmClfrTable)
