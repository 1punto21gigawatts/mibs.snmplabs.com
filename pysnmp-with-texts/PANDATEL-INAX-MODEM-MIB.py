#
# PySNMP MIB module PANDATEL-INAX-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-INAX-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
mdmSpecifics, device_id = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "mdmSpecifics", "device-id")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, Integer32, enterprises, Counter32, Unsigned32, MibIdentifier, NotificationType, Gauge32, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "Integer32", "enterprises", "Counter32", "Unsigned32", "MibIdentifier", "NotificationType", "Gauge32", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
inax_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 701)).setLabel("inax-modem")
inax = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701))
inaxModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1), )
if mibBuilder.loadTexts: inaxModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: inaxModemTable.setDescription('This table contains information about all INAX units in all racks.')
inaxTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1), ).setIndexNames((0, "PANDATEL-INAX-MODEM-MIB", "mdmRack"), (0, "PANDATEL-INAX-MODEM-MIB", "mdmModem"), (0, "PANDATEL-INAX-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: inaxTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inaxTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the unit is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This entry displays the slot number where the corresponding unit is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This entry displays the location of the corresponding unit: 'local' or 'remote'. The unit which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this unit.')
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("e1", 2), ("t1", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemProperty.setDescription("The speed class of the unit: 'e1' or 't1'.")
mdmActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 11, 90))).clone(namedValues=NamedValues(("line-port-4", 4), ("line-port-5", 5), ("line-port-4-and-5", 11), ("disable", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmActiveLink.setStatus('mandatory')
if mibBuilder.loadTexts: mdmActiveLink.setDescription('This entry displays the line port that is receiving data.')
mdmRemoteAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 98, 99))).clone(namedValues=NamedValues(("via-timeslot-1", 1), ("via-timeslot-2", 2), ("via-timeslot-3", 3), ("via-timeslot-4", 4), ("via-timeslot-5", 5), ("via-timeslot-6", 6), ("via-timeslot-7", 7), ("via-timeslot-8", 8), ("via-timeslot-9", 9), ("via-timeslot-10", 10), ("via-timeslot-11", 11), ("via-timeslot-12", 12), ("via-timeslot-13", 13), ("via-timeslot-14", 14), ("via-timeslot-15", 15), ("via-timeslot-16", 16), ("via-timeslot-17", 17), ("via-timeslot-18", 18), ("via-timeslot-19", 19), ("via-timeslot-20", 20), ("via-timeslot-21", 21), ("via-timeslot-22", 22), ("via-timeslot-23", 23), ("via-timeslot-24", 24), ("via-timeslot-25", 25), ("via-timeslot-26", 26), ("via-timeslot-27", 27), ("via-timeslot-28", 28), ("via-timeslot-29", 29), ("via-timeslot-30", 30), ("via-timeslot-31", 31), ("disable", 98), ("other", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRemoteAccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteAccessMode.setDescription("This entry defines the time slot assigned for remote management. Remote management is realized via port 5 always. For T1 units 24 time slots are available only. The remote unit's configuration changes simultaneously.")
inaxIFPortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2), )
if mibBuilder.loadTexts: inaxIFPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: inaxIFPortTable.setDescription('This table contains information about all I/F ports of the INAX units in all racks.')
inaxIFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1), ).setIndexNames((0, "PANDATEL-INAX-MODEM-MIB", "iportRack"), (0, "PANDATEL-INAX-MODEM-MIB", "iportModem"), (0, "PANDATEL-INAX-MODEM-MIB", "iportPosition"), (0, "PANDATEL-INAX-MODEM-MIB", "iportPort"))
if mibBuilder.loadTexts: inaxIFPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inaxIFPortEntry.setDescription('The index of the table.')
iportRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iportRack.setStatus('mandatory')
if mibBuilder.loadTexts: iportRack.setDescription('The index of the rack where the unit is installed.')
iportModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iportModem.setStatus('mandatory')
if mibBuilder.loadTexts: iportModem.setDescription('The index of the INAX unit the port belongs to.')
iportPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iportPosition.setStatus('mandatory')
if mibBuilder.loadTexts: iportPosition.setDescription("This entry displays the location of the corresponding port: 'local' or 'remote'. The port which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
iportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iportPort.setStatus('mandatory')
if mibBuilder.loadTexts: iportPort.setDescription('The index of the port.')
iportDataEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iportDataEmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: iportDataEmulationMode.setDescription("Interface mode of the port: 'dte', 'dce', 'te', or 'nt'.")
iportDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iportDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: iportDataRate.setDescription('The data rate at the interface port in bits per seconds.')
iportTimeslotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("nx64k", 2), ("nx56k", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iportTimeslotSize.setStatus('mandatory')
if mibBuilder.loadTexts: iportTimeslotSize.setDescription("This entry determines the size of the time slots: 'nx64k' or 'nx56k'. 'nx56k' is valid for T1 units only. The remote unit's configuration changes simultaneously.")
inaxLinePortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3), )
if mibBuilder.loadTexts: inaxLinePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: inaxLinePortTable.setDescription('This table contains information about all line ports of the INAX units in all racks.')
inaxLinePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1), ).setIndexNames((0, "PANDATEL-INAX-MODEM-MIB", "lportRack"), (0, "PANDATEL-INAX-MODEM-MIB", "lportModem"), (0, "PANDATEL-INAX-MODEM-MIB", "lportPosition"), (0, "PANDATEL-INAX-MODEM-MIB", "lportPort"))
if mibBuilder.loadTexts: inaxLinePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inaxLinePortEntry.setDescription('The index of the table.')
lportRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportRack.setStatus('mandatory')
if mibBuilder.loadTexts: lportRack.setDescription('The index of the rack where the unit is installed.')
lportModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportModem.setStatus('mandatory')
if mibBuilder.loadTexts: lportModem.setDescription('The index of the INAX unit the port belongs to.')
lportPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportPosition.setStatus('mandatory')
if mibBuilder.loadTexts: lportPosition.setDescription("This entry displays the location of the corresponding port: 'local' or 'remote'. The port which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
lportPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportPort.setStatus('mandatory')
if mibBuilder.loadTexts: lportPort.setDescription('The index of the port.')
lportDataEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDataEmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: lportDataEmulationMode.setDescription("Interface mode of the port: 'te' or 'nt'.")
lportClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: lportClockSource.setDescription("The clock source: 'internal' or 'remote'. Port 4 can only be set to 'internal'.")
lportDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: lportDataRate.setDescription('The data rate at the line port in bits per seconds.')
lportCRC4Generation = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportCRC4Generation.setStatus('mandatory')
if mibBuilder.loadTexts: lportCRC4Generation.setDescription("This entry enables or disables the generation of a CRC4 check sum. The remote unit's configuration changes simultaneously. Valid for E1 units only.")
lportFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("d4", 2), ("esf", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportFramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: lportFramingMode.setDescription("The T1 framing mode: 'd4' or 'esf'. The remote unit's configuration changes simultaneously. Valid for T1 units only.")
lportCodingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("ami", 2), ("b8zs", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportCodingMode.setStatus('mandatory')
if mibBuilder.loadTexts: lportCodingMode.setDescription("The T1 coding mode at port 4: 'ami' or 'b8zs'. The remote unit's configuration changes simultaneously. Valid for T1 units only.")
lportLineBuiltOut = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 100))).clone(namedValues=NamedValues(("other", 1), ("itu-rec-g703", 2), ("dsx-1-0to133-ft", 3), ("dsx-1-133to266-ft", 4), ("dsx-1-266to399-ft", 5), ("dsx-1-399to533-ft", 6), ("dsx-1-533to655-ft", 7), ("csu-0db", 8), ("csu-7db5", 9), ("csu-15db", 10), ("csu-22db5", 11), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportLineBuiltOut.setStatus('mandatory')
if mibBuilder.loadTexts: lportLineBuiltOut.setDescription('The G.703 transmission mode of the unit.')
lportPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("if-mode", 2), ("backup-mode", 3), ("link-mode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: lportPortMode.setDescription("The operation mode at port 4: 'interface-mode', 'backup-mode', or 'link-mode'.")
lportCRC6Test = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 100))).clone(namedValues=NamedValues(("other", 1), ("start", 3), ("stop", 4), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lportCRC6Test.setStatus('mandatory')
if mibBuilder.loadTexts: lportCRC6Test.setDescription("This entry enables the execution of a CRC6 test. Write requests with values other than 'start' or 'stop' will be rejected. Valid for T1 units only.")
lportCRC6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("running", 5), ("stopped", 6), ("start-failed", 7), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCRC6Status.setStatus('mandatory')
if mibBuilder.loadTexts: lportCRC6Status.setDescription('This entry indicates the status of the CRC6 test. Valid for T1 units only.')
lportCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 3, 1, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lportCRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: lportCRC6Error.setDescription('This entry indicates the number of errors detected during the last 60 seconds.')
inaxTimeslotTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4), )
if mibBuilder.loadTexts: inaxTimeslotTable.setStatus('mandatory')
if mibBuilder.loadTexts: inaxTimeslotTable.setDescription('This table contains information about all line ports of the INAX units in all racks.')
inaxTimeslotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1), ).setIndexNames((0, "PANDATEL-INAX-MODEM-MIB", "tsRack"), (0, "PANDATEL-INAX-MODEM-MIB", "tsModem"), (0, "PANDATEL-INAX-MODEM-MIB", "tsPosition"), (0, "PANDATEL-INAX-MODEM-MIB", "tsPort"))
if mibBuilder.loadTexts: inaxTimeslotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inaxTimeslotEntry.setDescription('The index of the table.')
tsRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsRack.setStatus('mandatory')
if mibBuilder.loadTexts: tsRack.setDescription('The index of the rack where the unit is installed.')
tsModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsModem.setStatus('mandatory')
if mibBuilder.loadTexts: tsModem.setDescription('The index of the INAX unit the port belongs to.')
tsPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPosition.setStatus('mandatory')
if mibBuilder.loadTexts: tsPosition.setDescription("This entry displays the location of the corresponding port: 'local' or 'remote'. The port which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
tsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsPort.setStatus('mandatory')
if mibBuilder.loadTexts: tsPort.setDescription('The index of the port.')
tsTimeslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 301), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot1.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot1.setDescription("This entry defines the port number used for the transmission of time slot 1. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 302), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot2.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot2.setDescription("This entry defines the port number used for the transmission of time slot 2. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 303), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot3.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot3.setDescription("This entry defines the port number used for the transmission of time slot 3. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 304), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot4.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot4.setDescription("This entry defines the port number used for the transmission of time slot 4. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 305), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot5.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot5.setDescription("This entry defines the port number used for the transmission of time slot 5. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 306), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot6.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot6.setDescription("This entry defines the port number used for the transmission of time slot 6. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 307), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot7.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot7.setDescription("This entry defines the port number used for the transmission of time slot 7. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 308), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot8.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot8.setDescription("This entry defines the port number used for the transmission of time slot 8. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 309), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot9.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot9.setDescription("This entry defines the port number used for the transmission of time slot 9. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 310), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot10.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot10.setDescription("This entry defines the port number used for the transmission of time slot 10. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 311), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot11.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot11.setDescription("This entry defines the port number used for the transmission of time slot 11. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 312), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot12.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot12.setDescription("This entry defines the port number used for the transmission of time slot 12. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 313), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot13.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot13.setDescription("This entry defines the port number used for the transmission of time slot 13. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 314), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot14.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot14.setDescription("This entry defines the port number used for the transmission of time slot 14. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 315), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot15.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot15.setDescription("This entry defines the port number used for the transmission of time slot 15. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 316), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot16.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot16.setDescription("This entry defines the port number used for the transmission of time slot 16. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 317), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot17.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot17.setDescription("This entry defines the port number used for the transmission of time slot 17. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 318), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot18.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot18.setDescription("This entry defines the port number used for the transmission of time slot 18. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot19 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 319), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot19.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot19.setDescription("This entry defines the port number used for the transmission of time slot 19. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot20 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 320), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot20.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot20.setDescription("This entry defines the port number used for the transmission of time slot 20. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot21 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 321), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot21.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot21.setDescription("This entry defines the port number used for the transmission of time slot 21. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot22 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 322), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot22.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot22.setDescription("This entry defines the port number used for the transmission of time slot 22. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot23 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 323), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot23.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot23.setDescription("This entry defines the port number used for the transmission of time slot 23. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot24 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 324), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot24.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot24.setDescription("This entry defines the port number used for the transmission of time slot 24. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode).")
tsTimeslot25 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 325), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot25.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot25.setDescription("This entry defines the port number used for the transmission of time slot 25. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
tsTimeslot26 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 326), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot26.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot26.setDescription("This entry defines the port number used for the transmission of time slot 26. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
tsTimeslot27 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 327), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot27.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot27.setDescription("This entry defines the port number used for the transmission of time slot 27. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
tsTimeslot28 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 328), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot28.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot28.setDescription("This entry defines the port number used for the transmission of time slot 28. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
tsTimeslot29 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 329), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot29.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot29.setDescription("This entry defines the port number used for the transmission of time slot 29. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
tsTimeslot30 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 330), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot30.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot30.setDescription("This entry defines the port number used for the transmission of time slot 30. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
tsTimeslot31 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 701, 4, 1, 331), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 97, 98, 99, 100))).clone(namedValues=NamedValues(("port-1", 1), ("port-2", 2), ("port-3", 3), ("port-4", 4), ("remote-access", 97), ("off", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsTimeslot31.setStatus('mandatory')
if mibBuilder.loadTexts: tsTimeslot31.setDescription("This entry defines the port number used for the transmission of time slot 31. 'port-4' is available only if IportPortmode is set to 'interface-mode'. If the time slot is assigned for remote management (see mdmRemoteAccessMode). Valid for E1 units only.")
mibBuilder.exportSymbols("PANDATEL-INAX-MODEM-MIB", tsTimeslot5=tsTimeslot5, tsTimeslot2=tsTimeslot2, tsTimeslot17=tsTimeslot17, mdmModemName=mdmModemName, inaxLinePortEntry=inaxLinePortEntry, lportPort=lportPort, tsTimeslot9=tsTimeslot9, iportModem=iportModem, lportModem=lportModem, tsTimeslot7=tsTimeslot7, inaxIFPortEntry=inaxIFPortEntry, tsTimeslot24=tsTimeslot24, iportPosition=iportPosition, tsTimeslot28=tsTimeslot28, lportCodingMode=lportCodingMode, inaxTimeslotTable=inaxTimeslotTable, tsTimeslot21=tsTimeslot21, tsTimeslot26=tsTimeslot26, tsTimeslot6=tsTimeslot6, inaxTimeslotEntry=inaxTimeslotEntry, inax=inax, tsTimeslot15=tsTimeslot15, lportDataRate=lportDataRate, tsTimeslot31=tsTimeslot31, tsTimeslot3=tsTimeslot3, tsTimeslot19=tsTimeslot19, lportCRC6Error=lportCRC6Error, lportCRC4Generation=lportCRC4Generation, mdmModem=mdmModem, tsTimeslot20=tsTimeslot20, lportDataEmulationMode=lportDataEmulationMode, lportPosition=lportPosition, mdmRemoteAccessMode=mdmRemoteAccessMode, lportClockSource=lportClockSource, tsTimeslot13=tsTimeslot13, tsTimeslot23=tsTimeslot23, lportCRC6Status=lportCRC6Status, tsTimeslot16=tsTimeslot16, inaxModemTable=inaxModemTable, iportTimeslotSize=iportTimeslotSize, mdmRack=mdmRack, tsTimeslot14=tsTimeslot14, iportDataEmulationMode=iportDataEmulationMode, tsTimeslot27=tsTimeslot27, inaxLinePortTable=inaxLinePortTable, mdmModemProperty=mdmModemProperty, tsRack=tsRack, inaxTableEntry=inaxTableEntry, lportFramingMode=lportFramingMode, lportLineBuiltOut=lportLineBuiltOut, inaxIFPortTable=inaxIFPortTable, tsTimeslot29=tsTimeslot29, iportDataRate=iportDataRate, tsTimeslot4=tsTimeslot4, tsTimeslot18=tsTimeslot18, tsTimeslot25=tsTimeslot25, tsPort=tsPort, tsPosition=tsPosition, tsTimeslot8=tsTimeslot8, iportPort=iportPort, mdmActiveLink=mdmActiveLink, tsModem=tsModem, tsTimeslot10=tsTimeslot10, tsTimeslot30=tsTimeslot30, tsTimeslot11=tsTimeslot11, lportRack=lportRack, inax_modem=inax_modem, tsTimeslot1=tsTimeslot1, lportCRC6Test=lportCRC6Test, mdmPosition=mdmPosition, iportRack=iportRack, tsTimeslot12=tsTimeslot12, lportPortMode=lportPortMode, tsTimeslot22=tsTimeslot22)
