#
# PySNMP MIB module MCAST-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MCAST-VPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:10:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ipMRouteEntry, = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "ipMRouteEntry")
jnxMvpnExperiment, = mibBuilder.importSymbols("JUNIPER-EXPERIMENT-MIB", "jnxMvpnExperiment")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
JnxL2L3VpnMcastProviderTunnelType, = mibBuilder.importSymbols("L2L3-VPN-MCAST-MIB", "JnxL2L3VpnMcastProviderTunnelType")
MplsLabel, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLabel")
mplsVpnVrfName, MplsVpnRouteDistinguisher = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName", "MplsVpnRouteDistinguisher")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Counter64, Counter32, Unsigned32, ModuleIdentity, IpAddress, TimeTicks, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Counter64", "Counter32", "Unsigned32", "ModuleIdentity", "IpAddress", "TimeTicks", "MibIdentifier", "iso")
TextualConvention, TimeStamp, TruthValue, RowStatus, DisplayString, TimeInterval, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "RowStatus", "DisplayString", "TimeInterval", "RowPointer")
jnxMvpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1))
jnxMvpnMIB.setRevisions(('2013-01-07 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxMvpnMIB.setRevisionsDescriptions(('Initial version of the draft.',))
if mibBuilder.loadTexts: jnxMvpnMIB.setLastUpdated('201307121200Z')
if mibBuilder.loadTexts: jnxMvpnMIB.setOrganization('IETF Layer-3 Virtual Private Networks Working Group.')
if mibBuilder.loadTexts: jnxMvpnMIB.setContactInfo(' Jeffrey (Zhaohui) Zhang zzhang@juniper.net Comments and discussion to l3vpn@ietf.org')
if mibBuilder.loadTexts: jnxMvpnMIB.setDescription('This MIB contains managed object definitions for multicast in BGP/MPLS IP VPNs defined by [MVPN]. Copyright (C) The Internet Society (2012).')
jnxMvpnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 0))
jnxMvpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1))
jnxMvpnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1))
jnxMvpnGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2))
jnxMvpnConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3))
jnxMvpnStates = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4))
jnxMvpnMvrfNumber = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumber.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumber.setDescription('The number of MVRFs for IPv4 or IPv6 or mLDP C-Multicast that are present in this device.')
jnxMvpnMvrfNumberV4 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberV4.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberV4.setDescription('The number of MVRFs for IPv4 C-Multicast that are present in this device.')
jnxMvpnMvrfNumberV6 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberV6.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberV6.setDescription('The number of MVRFs for IPv6 C-Multicast that are present in this device.')
jnxMvpnMvrfNumberPimV4 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberPimV4.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberPimV4.setDescription('The number of PIM-MVPN MVRFs for IPv4 C-Multicast that are present in this device.')
jnxMvpnMvrfNumberPimV6 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberPimV6.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberPimV6.setDescription('The number of PIM-MVPN MVRFs for IPv6 C-Multicast that are present in this device.')
jnxMvpnMvrfNumberBgpV4 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberBgpV4.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberBgpV4.setDescription('The number of BGP-MVPN MVRFs for IPv4 C-Multicast that are present in this device.')
jnxMvpnMvrfNumberBgpV6 = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberBgpV6.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberBgpV6.setDescription('The number of BGP-MVPN MVRFs for IPv6 C-Multicast that are present in this device.')
jnxMvpnMvrfNumberMldp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMvrfNumberMldp.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfNumberMldp.setDescription('The number of BGP-MVPN MVRFs for mLDP C-Multicast that are present in this device.')
jnxMvpnNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnNotificationEnable.setDescription('If this object is TRUE, then the generation of all notifications defined in this MIB is enabled.')
jnxMvpnGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1), )
if mibBuilder.loadTexts: jnxMvpnGeneralTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGeneralTable.setDescription('This table specifies the general information about the MVRFs present in this device.')
jnxMvpnGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"))
if mibBuilder.loadTexts: jnxMvpnGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGeneralEntry.setDescription('An entry in this table is created for every MVRF in the device.')
jnxMvpnGenOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createdMvrf", 1), ("deletedMvrf", 2), ("modifiedMvrfIpmsiConfig", 3), ("modifiedMvrfSpmsiConfig", 4))).clone('createdMvrf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenOperStatusChange.setDescription('This object describes the last operational change that happened for the given MVRF. createdMvrf - indicates that the MVRF was created in the device. deletedMvrf - indicates that the MVRF was deleted from the device. A row in this table will never have mvpnGenOperStatusChange equal to deletedMvrf(2), because in that case the row itself will be deleted from the table. This value for mvpnGenOperStatusChange is defined mainly for use in mvpnMvrfChange notification. modifiedMvrfIpmsiConfig - indicates that the I-PMSI for the MVRF was configured, deleted or changed. modifiedMvrfSpmsiConfig - indicates that the S-PMSI for the MVRF was configured, deleted or changed.')
jnxMvpnGenOperChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenOperChangeTime.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenOperChangeTime.setDescription('The time at which the last operational change for the MVRF in question took place. The last operational change is specified by mvpnGenOperStatusChange.')
jnxMvpnGenCmcastRouteProtocolV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pim", 1), ("bgp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenCmcastRouteProtocolV4.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenCmcastRouteProtocolV4.setDescription('Protocol used to signal IPv4 C-multicast states across the provider core. pim(1): PIM (PIM-MVPN). bgp(2): BGP (BGP-MVPN).')
jnxMvpnGenCmcastRouteProtocolV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pim", 1), ("bgp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenCmcastRouteProtocolV6.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenCmcastRouteProtocolV6.setDescription('Protocol used to signal IPv6 C-multicast states across the provider core. pim(1): PIM (PIM-MVPN). bgp(2): BGP (BGP-MVPN).')
jnxMvpnGenIpmsiConfigV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenIpmsiConfigV4.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenIpmsiConfigV4.setDescription(' This points to a row in MvpnPmsiConfigTable, for I-PMSI configuration for IPv4.')
jnxMvpnGenIpmsiConfigV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenIpmsiConfigV6.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenIpmsiConfigV6.setDescription(' This points to a row in MvpnPmsiConfigTable, for I-PMSI configuration for IPv6.')
jnxMvpnGenInterAsPmsiConfigV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenInterAsPmsiConfigV4.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenInterAsPmsiConfigV4.setDescription(' This points to a row in MvpnPmsiConfigTable, for inter-as I-PMSI configuration for IPv4, in case of segmented inter-as provider tunnels.')
jnxMvpnGenInterAsPmsiConfigV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenInterAsPmsiConfigV6.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenInterAsPmsiConfigV6.setDescription('This points to a row in MvpnPmsiConfigTable, for inter-as I-PMSI configuration for IPv6, in case of segmented inter-as provider tunnels.')
jnxMvpnGenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 1, 1, 9), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnGenRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnGenRowStatus.setDescription('This is used to create or delete a row in this table.')
jnxMvpnBgpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2), )
if mibBuilder.loadTexts: jnxMvpnBgpGeneralTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGeneralTable.setDescription('This table augments the mvpnGeneralTable and is for BGP-MVPN specific information.')
jnxMvpnBgpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1), )
jnxMvpnGeneralEntry.registerAugmentions(("MCAST-VPN-MIB", "jnxMvpnBgpGeneralEntry"))
jnxMvpnBgpGeneralEntry.setIndexNames(*jnxMvpnGeneralEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMvpnBgpGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGeneralEntry.setDescription('The mvpnBgpGeneralEntry matches and augments an mvpnGeneralEntry for a BGP-MVPN instance, with BGP-MVPN specific informatoin.')
jnxMvpnBgpGenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rpt-spt", 1), ("spt-only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnBgpGenMode.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGenMode.setDescription('For two different BGP-MVPN modes: rpt-spt(1): intersite-site shared tree mode spt-only(2): inter-site source-only tree mode.')
jnxMvpnBgpGenUmhSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest-pe-address", 1), ("c-root-group-hashing", 2), ("ucast-umh-route", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnBgpGenUmhSelection.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGenUmhSelection.setDescription('The UMH selection method for this mvpn, as specified in section 5.1.3 of [MVPN]: highest-pe-address (1): PE with the highest address c-root-group-hashing (2): hashing based on (c-root, c-group) uncast-umh-route (3): per ucast route towards c-root')
jnxMvpnBgpGenSiteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sender-receiver", 1), ("receiver-only", 2), ("sender-only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnBgpGenSiteType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGenSiteType.setDescription('Whether this site is a receiver-only site or not. sender-receiver (1): both sender and receiver site. receiver-only (2): receiver-only site. sender-only (3): sender-only site.')
jnxMvpnBgpGenCmcastImportRt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1, 4), MplsVpnRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnBgpGenCmcastImportRt.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGenCmcastImportRt.setDescription('The C-multicast Import RT that this device adds to unicast vpn routes that it advertises for this mvpn.')
jnxMvpnBgpGenSrcAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnBgpGenSrcAs.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGenSrcAs.setDescription('The Source AS number in Source AS Extended Community that this device adds to the unicast vpn routes that it advertises for this mvpn.')
jnxMvpnBgpGenSptnlLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnBgpGenSptnlLimit.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnBgpGenSptnlLimit.setDescription('The max number of selective provider tunnels this device allows for this mvpn.')
jnxMvpnPmsiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1), )
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTable.setDescription('This table specifies the configured PMSIs.')
jnxMvpnPmsiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1), ).setIndexNames((0, "MCAST-VPN-MIB", "jnxMvpnPmsiConfigTunnelType"), (0, "MCAST-VPN-MIB", "jnxMvpnPmsiConfigTunnelAuxInfo"), (0, "MCAST-VPN-MIB", "jnxMvpnPmsiConfigTunnelPimGroupAddressType"), (0, "MCAST-VPN-MIB", "jnxMvpnPmsiConfigTunnelPimGroupAddress"), (0, "MCAST-VPN-MIB", "jnxMvpnPmsiConfigTunnelOrTemplateName"))
if mibBuilder.loadTexts: jnxMvpnPmsiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigEntry.setDescription('An entry in this table is created for each PMSI configured on this router. It can be referred to by either I-PMSI configuration (in mvpnGeneralEntry) or S-PMSI configuration (in mvpnSpmsiConfigEntry)')
jnxMvpnPmsiConfigTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 1), JnxL2L3VpnMcastProviderTunnelType())
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelType.setDescription('Type of tunnel used to instantiate the PMSI.')
jnxMvpnPmsiConfigTunnelAuxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelAuxInfo.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelAuxInfo.setDescription('Additional tunnel information depending on the type. pim: In case of S-PMSI, number of groups starting at mvpnPmsiConfigTunnelPimGroupAddress. This allows a range of PIM provider tunnel group addresses to be specified in S-PMSI case. In I-PMSI case, it must be 1. rsvp-p2mp: 1 for statically specified rsvp-p2mp tunnel 2 for dynamically created rsvp-p2mp tunnel ingress-replication: 1 for using any existing p2p/mp2p lsp 2 for dynamically creating new p2p lsp')
jnxMvpnPmsiConfigTunnelPimGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 3), InetAddressType())
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelPimGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelPimGroupAddressType.setDescription('In case of PIM provider tunnel, the type of tunnel address.')
jnxMvpnPmsiConfigTunnelPimGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 4), InetAddress())
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelPimGroupAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelPimGroupAddress.setDescription('In case of PIM provider tunnel, the provider tunnel address.')
jnxMvpnPmsiConfigTunnelOrTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 5), SnmpAdminString())
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelOrTemplateName.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigTunnelOrTemplateName.setDescription('The tunnel name or template name used to create tunnels. Depending on mvpnPmsiConfigTunnelType and mvpnPmsiConfigTunnelAuxInfo: dynamically created rsvp-p2mp tunnel: template name statically specified rsvp-p2mp tunnel: tunnel name ingress-replication using dynamically created lsps: template name other: null')
jnxMvpnPmsiConfigEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("greIp", 1), ("ipIp", 2), ("mpls", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnPmsiConfigEncapsType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigEncapsType.setDescription('The encapsulation type to be used, in case of PIM tunnel or ingress-replication.')
jnxMvpnPmsiConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnPmsiConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnPmsiConfigRowStatus.setDescription('Used to create/modify/delete a row in this table.')
jnxMvpnSpmsiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2), )
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigTable.setDescription('This table specifies S-PMSI configuration.')
jnxMvpnSpmsiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiConfigCmcastAddressType"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiConfigCmcastGroupAddress"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiConfigCmcastGroupPrefixLen"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiConfigCmcastSourceAddress"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiConfigCmcastSourcePrefixLen"))
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigEntry.setDescription('An entry is created for each S-PMSI configuration.')
jnxMvpnSpmsiConfigCmcastAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastAddressType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastAddressType.setDescription('Type of C-multicast address')
jnxMvpnSpmsiConfigCmcastGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastGroupAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastGroupAddress.setDescription('C-multicast group address')
jnxMvpnSpmsiConfigCmcastGroupPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastGroupPrefixLen.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastGroupPrefixLen.setDescription('C-multicast group address prefix length. A group 0 (or ::0) with prefix length 32 (or 128) indicates wildcard group, while a group 0 (or ::0) with prefix length 0 indicates any group.')
jnxMvpnSpmsiConfigCmcastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 4), InetAddress())
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastSourceAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastSourceAddress.setDescription('C-multicast source address')
jnxMvpnSpmsiConfigCmcastSourcePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastSourcePrefixLen.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigCmcastSourcePrefixLen.setDescription('C-multicast source address prefix length. A source 0 (or ::0) with prefix length 32 (or 128) indicates a wildcard source, while a source 0 (or ::0) with prefix length 0 indicates any source.')
jnxMvpnSpmsiConfigThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigThreshold.setDescription('The bandwidth threshold value which when exceeded for a multicast routing entry in the given MVRF, triggers usage of S-PMSI.')
jnxMvpnSpmsiConfigPmsiPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 7), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigPmsiPointer.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigPmsiPointer.setDescription('This points to a row in MvpnPmsiConfigTable, to specify tunnel attributes.')
jnxMvpnSpmsiConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiConfigRowStatus.setDescription('Used to create/modify/delete a row in this table.')
jnxMvpnIpmsiTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1), )
if mibBuilder.loadTexts: jnxMvpnIpmsiTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiTable.setDescription('This table is for all advertised/received I-PMSI advertisements.')
jnxMvpnIpmsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MCAST-VPN-MIB", "jnxMvpnIpmsiAfi"), (0, "MCAST-VPN-MIB", "jnxMvpnIpmsiRD"), (0, "MCAST-VPN-MIB", "jnxMvpnIpmsiOrigAddrType"), (0, "MCAST-VPN-MIB", "jnxMvpnIpmsiOrigAddress"))
if mibBuilder.loadTexts: jnxMvpnIpmsiEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiEntry.setDescription('An entry in this table corresponds to an I-PMSI advertisement that is advertised/received on this router. This represents all the sender PEs in the MVPN, with the provider tunnel they use to send traffic.')
jnxMvpnIpmsiAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: jnxMvpnIpmsiAfi.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiAfi.setDescription('The address family this I-PMSI is for. 1 - IPv4 2 - IPv6')
jnxMvpnIpmsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1, 2), MplsVpnRouteDistinguisher())
if mibBuilder.loadTexts: jnxMvpnIpmsiRD.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiRD.setDescription('The Route Distinguisher in this I-PMSI.')
jnxMvpnIpmsiOrigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1, 3), InetAddressType())
if mibBuilder.loadTexts: jnxMvpnIpmsiOrigAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiOrigAddrType.setDescription('The Internet address type of mvpnIpmsiOrigAddress.')
jnxMvpnIpmsiOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1, 4), InetAddress())
if mibBuilder.loadTexts: jnxMvpnIpmsiOrigAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiOrigAddress.setDescription('The BGP address of the device that originated the I-PMSI.')
jnxMvpnIpmsiUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnIpmsiUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiUpTime.setDescription('The time since this I-PMSI was first advertised/received by the device.')
jnxMvpnIpmsiAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 1, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnIpmsiAttribute.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnIpmsiAttribute.setDescription('Points to a row in the mvpnPmsiTunnelAttributeTable.')
jnxMvpnInterasIpmsiTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 2), )
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiTable.setDescription('This table is for all advertised/received inter-as I-PMSI advertisements.')
jnxMvpnInterasIpmsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MCAST-VPN-MIB", "jnxMvpnInterasIpmsiAfi"), (0, "MCAST-VPN-MIB", "jnxMvpnInterasIpmsiRD"), (0, "MCAST-VPN-MIB", "jnxMvpnInterasIpmsiSrcAs"))
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiEntry.setDescription('An entry in this table corresponds to an inter-as I-PMSI advertisement that is advertised/received on this router. This represents all the ASes in the MVPN, with the provider tunnel used to send traffic to.')
jnxMvpnInterasIpmsiAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )))
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiAfi.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiAfi.setDescription('The address family this I-PMSI is for. 1 - IPv4 2 - IPv6')
jnxMvpnInterasIpmsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 2, 1, 2), MplsVpnRouteDistinguisher())
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiRD.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiRD.setDescription('The Route Distinguisher in this inter-as I-PMSI.')
jnxMvpnInterasIpmsiSrcAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiSrcAs.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiSrcAs.setDescription('The source-as in this inter-as I-PMSI.')
jnxMvpnInterasIpmsiAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 2, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiAttribute.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnInterasIpmsiAttribute.setDescription('Points to a row in the mvpnPmsiTunnelAttributeTable.')
jnxMvpnSpmsiTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3), )
if mibBuilder.loadTexts: jnxMvpnSpmsiTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiTable.setDescription('This table has information about the S-PMSIs sent/received by a device.')
jnxMvpnSpmsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiOrigAddrType"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiOrigAddress"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiCmcastAddrType"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiCmcastGroup"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiCmcastGroupPrefixLen"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiCmcastSource"), (0, "MCAST-VPN-MIB", "jnxMvpnSpmsiCmcastSourcePrefixLen"))
if mibBuilder.loadTexts: jnxMvpnSpmsiEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiEntry.setDescription('An entry in this table is created or updated for every S-PMSI advertised/received in a particular MVRF.')
jnxMvpnSpmsiOrigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: jnxMvpnSpmsiOrigAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiOrigAddrType.setDescription('The Internet address type of mvpnSpmsiOrigAddress.')
jnxMvpnSpmsiOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: jnxMvpnSpmsiOrigAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiOrigAddress.setDescription('The BGP address of the device that originated the S-PMSI.')
jnxMvpnSpmsiCmcastAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 3), InetAddressType())
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastAddrType.setDescription('The Internet address type of mvpnSpmsiCmcastGroup/Source.')
jnxMvpnSpmsiCmcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 4), InetAddress())
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastGroup.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastGroup.setDescription('S-PMSI C-multicast group address. If it is 0 (or ::0), this is a wildcard group, and mvpnSpmsiCmcastGroupPrefixLen must be 32 (or 128).')
jnxMvpnSpmsiCmcastGroupPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 5), Unsigned32())
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastGroupPrefixLen.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastGroupPrefixLen.setDescription('S-PMSI C-multicast group address prefix length.')
jnxMvpnSpmsiCmcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 6), InetAddress())
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastSource.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastSource.setDescription('S-PMSI C-multicast source address If it is 0 (or ::0), this is a wildcard source, and mvpnSpmsiCmcastSourcePrefixLen must be 32 (or 128).')
jnxMvpnSpmsiCmcastSourcePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 7), Unsigned32())
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastSourcePrefixLen.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiCmcastSourcePrefixLen.setDescription('S-PMSI C-multicast source address prefix length.')
jnxMvpnSpmsiTunnelAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 8), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiTunnelAttribute.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiTunnelAttribute.setDescription('A row pointer to the mvpnPmsiTunnelAttributeTable')
jnxMvpnSpmsiUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiUpTime.setDescription('The time since this S-PMSI was first advertised/received by the device.')
jnxMvpnSpmsiExpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiExpTime.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiExpTime.setDescription('For UDP-based S-PMSI signaling for PIM-MVPN, the amount of time remaining before this received S-PMSI Join Message expires, or the next S-PMSI Join Message refresh is to be advertised again from the device. Otherwise, it is zero.')
jnxMvpnSpmsiRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnSpmsiRefCnt.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnSpmsiRefCnt.setDescription('The number of c-multicast routes that are mapped to this S-PMSI.')
jnxMvpnMrouteTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 4), )
if mibBuilder.loadTexts: jnxMvpnMrouteTable.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMrouteTable.setDescription('This table augments ipMcastRouteTable, to provide some MVPN specific information.')
jnxMvpnMrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 4, 1), )
ipMRouteEntry.registerAugmentions(("MCAST-VPN-MIB", "jnxMvpnMrouteEntry"))
jnxMvpnMrouteEntry.setIndexNames(*ipMRouteEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMvpnMrouteEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMrouteEntry.setDescription('The mvpnMrouteEntry matches and augments an ipMcastRouteTable, with MVPN specific information, such as PMSI used.')
jnxMvpnMroutePmsiPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 4, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMroutePmsiPointer.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMroutePmsiPointer.setDescription('The I-PMSI or S-PMSI this C-multicast route is using. This is important because an implementation may not have an interface corresponding to a provider tunnel, that can be used in ipMcastRouteNextHopEntry.')
jnxMvpnMrouteNumberOfLocalReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMrouteNumberOfLocalReplication.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMrouteNumberOfLocalReplication.setDescription('Number of replications to local receivers.')
jnxMvpnMrouteNumberOfRemoteReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMrouteNumberOfRemoteReplication.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMrouteNumberOfRemoteReplication.setDescription('Number of (local) replications to remote receivers.')
jnxMvpnMrouteDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 1, 4, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMvpnMrouteDataRate.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMrouteDataRate.setDescription('The data rate for traffic following this route.')
jnxMvpnMvrfChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 12, 1, 0, 2)).setObjects(("MCAST-VPN-MIB", "jnxMvpnGenOperStatusChange"))
if mibBuilder.loadTexts: jnxMvpnMvrfChange.setStatus('current')
if mibBuilder.loadTexts: jnxMvpnMvrfChange.setDescription('A mvpnMvrfChange notification signifies a change about a MVRF in the device. The change event can be creation of the MVRF, deletion of the MVRF or an update on the I-PMSI or S-PMSI configuration of the MVRF. The change event is indicated by mvpnGenOperStatusChange embedded in the notification. The user can then query mvpnGeneralTable, and/or mvpnSpmsiConfigTable to get the details of the change as necessary. Note: Since the creation of a MVRF is often followed by configuration of I-PMSI and/or S-PMSIs for the MVRF, more than one (three at most) notifications for a MVRF may be generated serially, and it is really not necessary to generate all three of them. An agent may choose to generate a notification for the last event only, that is for S-PMSI configuration. Similarly, deletion of I-PMSI and S-PMSI configuration on a MVRF happens before a MVRF is deleted and it is recommended that the agent send the notification for MVRF deletion event only.')
mibBuilder.exportSymbols("MCAST-VPN-MIB", jnxMvpnBgpGeneralTable=jnxMvpnBgpGeneralTable, jnxMvpnSpmsiRefCnt=jnxMvpnSpmsiRefCnt, jnxMvpnGeneral=jnxMvpnGeneral, jnxMvpnBgpGeneralEntry=jnxMvpnBgpGeneralEntry, jnxMvpnBgpGenMode=jnxMvpnBgpGenMode, jnxMvpnGenIpmsiConfigV6=jnxMvpnGenIpmsiConfigV6, jnxMvpnPmsiConfigRowStatus=jnxMvpnPmsiConfigRowStatus, jnxMvpnSpmsiTable=jnxMvpnSpmsiTable, jnxMvpnPmsiConfigEntry=jnxMvpnPmsiConfigEntry, jnxMvpnPmsiConfigTable=jnxMvpnPmsiConfigTable, jnxMvpnPmsiConfigTunnelPimGroupAddress=jnxMvpnPmsiConfigTunnelPimGroupAddress, jnxMvpnSpmsiCmcastSource=jnxMvpnSpmsiCmcastSource, jnxMvpnMvrfNumberBgpV4=jnxMvpnMvrfNumberBgpV4, PYSNMP_MODULE_ID=jnxMvpnMIB, jnxMvpnGenIpmsiConfigV4=jnxMvpnGenIpmsiConfigV4, jnxMvpnSpmsiCmcastGroupPrefixLen=jnxMvpnSpmsiCmcastGroupPrefixLen, jnxMvpnBgpGenCmcastImportRt=jnxMvpnBgpGenCmcastImportRt, jnxMvpnGenCmcastRouteProtocolV6=jnxMvpnGenCmcastRouteProtocolV6, jnxMvpnSpmsiConfigCmcastGroupPrefixLen=jnxMvpnSpmsiConfigCmcastGroupPrefixLen, jnxMvpnMvrfNumberBgpV6=jnxMvpnMvrfNumberBgpV6, jnxMvpnIpmsiUpTime=jnxMvpnIpmsiUpTime, jnxMvpnMrouteDataRate=jnxMvpnMrouteDataRate, jnxMvpnIpmsiAttribute=jnxMvpnIpmsiAttribute, jnxMvpnMvrfNumberPimV6=jnxMvpnMvrfNumberPimV6, jnxMvpnSpmsiConfigCmcastGroupAddress=jnxMvpnSpmsiConfigCmcastGroupAddress, jnxMvpnBgpGenSptnlLimit=jnxMvpnBgpGenSptnlLimit, jnxMvpnIpmsiTable=jnxMvpnIpmsiTable, jnxMvpnSpmsiConfigEntry=jnxMvpnSpmsiConfigEntry, jnxMvpnIpmsiRD=jnxMvpnIpmsiRD, jnxMvpnGenRowStatus=jnxMvpnGenRowStatus, jnxMvpnStates=jnxMvpnStates, jnxMvpnSpmsiCmcastSourcePrefixLen=jnxMvpnSpmsiCmcastSourcePrefixLen, jnxMvpnMIB=jnxMvpnMIB, jnxMvpnObjects=jnxMvpnObjects, jnxMvpnGenInterAsPmsiConfigV4=jnxMvpnGenInterAsPmsiConfigV4, jnxMvpnSpmsiUpTime=jnxMvpnSpmsiUpTime, jnxMvpnSpmsiOrigAddress=jnxMvpnSpmsiOrigAddress, jnxMvpnNotifications=jnxMvpnNotifications, jnxMvpnSpmsiOrigAddrType=jnxMvpnSpmsiOrigAddrType, jnxMvpnSpmsiConfigCmcastSourcePrefixLen=jnxMvpnSpmsiConfigCmcastSourcePrefixLen, jnxMvpnMvrfNumber=jnxMvpnMvrfNumber, jnxMvpnSpmsiTunnelAttribute=jnxMvpnSpmsiTunnelAttribute, jnxMvpnIpmsiAfi=jnxMvpnIpmsiAfi, jnxMvpnMvrfNumberMldp=jnxMvpnMvrfNumberMldp, jnxMvpnScalars=jnxMvpnScalars, jnxMvpnIpmsiOrigAddress=jnxMvpnIpmsiOrigAddress, jnxMvpnMrouteTable=jnxMvpnMrouteTable, jnxMvpnSpmsiConfigRowStatus=jnxMvpnSpmsiConfigRowStatus, jnxMvpnPmsiConfigEncapsType=jnxMvpnPmsiConfigEncapsType, jnxMvpnMvrfNumberPimV4=jnxMvpnMvrfNumberPimV4, jnxMvpnGeneralTable=jnxMvpnGeneralTable, jnxMvpnSpmsiExpTime=jnxMvpnSpmsiExpTime, jnxMvpnGenOperStatusChange=jnxMvpnGenOperStatusChange, jnxMvpnIpmsiOrigAddrType=jnxMvpnIpmsiOrigAddrType, jnxMvpnInterasIpmsiAttribute=jnxMvpnInterasIpmsiAttribute, jnxMvpnGenInterAsPmsiConfigV6=jnxMvpnGenInterAsPmsiConfigV6, jnxMvpnPmsiConfigTunnelAuxInfo=jnxMvpnPmsiConfigTunnelAuxInfo, jnxMvpnInterasIpmsiEntry=jnxMvpnInterasIpmsiEntry, jnxMvpnMvrfNumberV4=jnxMvpnMvrfNumberV4, jnxMvpnBgpGenUmhSelection=jnxMvpnBgpGenUmhSelection, jnxMvpnNotificationEnable=jnxMvpnNotificationEnable, jnxMvpnBgpGenSrcAs=jnxMvpnBgpGenSrcAs, jnxMvpnSpmsiConfigCmcastAddressType=jnxMvpnSpmsiConfigCmcastAddressType, jnxMvpnMroutePmsiPointer=jnxMvpnMroutePmsiPointer, jnxMvpnPmsiConfigTunnelOrTemplateName=jnxMvpnPmsiConfigTunnelOrTemplateName, jnxMvpnSpmsiConfigPmsiPointer=jnxMvpnSpmsiConfigPmsiPointer, jnxMvpnPmsiConfigTunnelType=jnxMvpnPmsiConfigTunnelType, jnxMvpnMrouteNumberOfRemoteReplication=jnxMvpnMrouteNumberOfRemoteReplication, jnxMvpnSpmsiEntry=jnxMvpnSpmsiEntry, jnxMvpnInterasIpmsiRD=jnxMvpnInterasIpmsiRD, jnxMvpnSpmsiConfigCmcastSourceAddress=jnxMvpnSpmsiConfigCmcastSourceAddress, jnxMvpnMvrfNumberV6=jnxMvpnMvrfNumberV6, jnxMvpnBgpGenSiteType=jnxMvpnBgpGenSiteType, jnxMvpnSpmsiCmcastAddrType=jnxMvpnSpmsiCmcastAddrType, jnxMvpnGenCmcastRouteProtocolV4=jnxMvpnGenCmcastRouteProtocolV4, jnxMvpnSpmsiCmcastGroup=jnxMvpnSpmsiCmcastGroup, jnxMvpnSpmsiConfigThreshold=jnxMvpnSpmsiConfigThreshold, jnxMvpnGeneralEntry=jnxMvpnGeneralEntry, jnxMvpnPmsiConfigTunnelPimGroupAddressType=jnxMvpnPmsiConfigTunnelPimGroupAddressType, jnxMvpnMrouteEntry=jnxMvpnMrouteEntry, jnxMvpnMvrfChange=jnxMvpnMvrfChange, jnxMvpnConfig=jnxMvpnConfig, jnxMvpnGenOperChangeTime=jnxMvpnGenOperChangeTime, jnxMvpnInterasIpmsiSrcAs=jnxMvpnInterasIpmsiSrcAs, jnxMvpnIpmsiEntry=jnxMvpnIpmsiEntry, jnxMvpnInterasIpmsiAfi=jnxMvpnInterasIpmsiAfi, jnxMvpnInterasIpmsiTable=jnxMvpnInterasIpmsiTable, jnxMvpnMrouteNumberOfLocalReplication=jnxMvpnMrouteNumberOfLocalReplication, jnxMvpnSpmsiConfigTable=jnxMvpnSpmsiConfigTable)
