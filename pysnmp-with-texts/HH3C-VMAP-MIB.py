#
# PySNMP MIB module HH3C-VMAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-VMAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, MibIdentifier, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, ModuleIdentity, Unsigned32, Counter64, iso, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "MibIdentifier", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Unsigned32", "Counter64", "iso", "Bits", "Integer32")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
hh3cVmap = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 138))
hh3cVmap.setRevisions(('2013-03-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cVmap.setRevisionsDescriptions(('The initial version of this MIB.',))
if mibBuilder.loadTexts: hh3cVmap.setLastUpdated('201303080000Z')
if mibBuilder.loadTexts: hh3cVmap.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cVmap.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: hh3cVmap.setDescription('H3C 802.1 VLAN Mapping MIB Version')
hh3cVMAPNNITable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 1), )
if mibBuilder.loadTexts: hh3cVMAPNNITable.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNNITable.setDescription('VLAN mapping NNI table.')
hh3cVMAPNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cVMAPNNIEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNNIEntry.setDescription('VLAN mapping NNI table entries.')
hh3cVMAPNNIState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cVMAPNNIState.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNNIState.setDescription('Set the network-side interface for a many-to-one VLAN mapping.')
hh3cVMAP1to1Table = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 2), )
if mibBuilder.loadTexts: hh3cVMAP1to1Table.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to1Table.setDescription('One-to-one VLAN mapping table.')
hh3cVMAP1to1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VMAP-MIB", "hh3cVMAP1to1Vlan"))
if mibBuilder.loadTexts: hh3cVMAP1to1Entry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to1Entry.setDescription('One-to-one VLAN mapping table entries.')
hh3cVMAP1to1Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAP1to1Vlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to1Vlan.setDescription('The original VLAN for a one-to-one VLAN mapping on the port.')
hh3cVMAP1to1TranslatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to1TranslatedVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to1TranslatedVlan.setDescription('The translated VLAN for a one-to-one VLAN mapping on the port.')
hh3cVMAP1to1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to1RowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to1RowStatus.setDescription('Operation status of this table entry.')
hh3cVMAPNto1RangeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 3), )
if mibBuilder.loadTexts: hh3cVMAPNto1RangeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1RangeTable.setDescription('Many-to-one VLAN mapping table. The original VLANs of each entry should be a range of VLANs (for example, VLAN 20 to 30).')
hh3cVMAPNto1RangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VMAP-MIB", "hh3cVMAPNto1StartVlan"))
if mibBuilder.loadTexts: hh3cVMAPNto1RangeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1RangeEntry.setDescription('Many-to-one VLAN mapping table entries. The original VLANs of each entry should be a range of VLANs (for example, VLAN 20 to 30).')
hh3cVMAPNto1StartVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAPNto1StartVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1StartVlan.setDescription('The original start VLAN for a many-to-one VLAN mapping on the port.')
hh3cVMAPNto1EndVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAPNto1EndVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1EndVlan.setDescription('The original end VLAN for a many-to-one VLAN mapping on the port.')
hh3cVMAPNto1RangeTranslatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAPNto1RangeTranslatedVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1RangeTranslatedVlan.setDescription('The translated VLAN for a many-to-one VLAN mapping on the port.')
hh3cVMAPNto1RangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAPNto1RangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1RangeRowStatus.setDescription('Operation status of this table entry.')
hh3cVMAPNto1SingleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 4), )
if mibBuilder.loadTexts: hh3cVMAPNto1SingleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1SingleTable.setDescription('Many-to-one VLAN mapping table. The original VLANs of each entry should be a group of VLANs listed one by one (for example, VLAN 30, 31, 32).')
hh3cVMAPNto1SingleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VMAP-MIB", "hh3cVMAPNto1Vlan"))
if mibBuilder.loadTexts: hh3cVMAPNto1SingleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1SingleEntry.setDescription('Many-to-one VLAN mapping table entries. The original VLANs of each entry should be a group of VLANs listed one by one (for example, VLAN 30, 31, 32).')
hh3cVMAPNto1Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAPNto1Vlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1Vlan.setDescription('The original VLANs for a many-to-one VLAN mapping on the port.')
hh3cVMAPNto1SingleTranslatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAPNto1SingleTranslatedVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1SingleTranslatedVlan.setDescription('The translated VLAN for a many-to-one VLAN mapping on the port.')
hh3cVMAPNto1SingleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAPNto1SingleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAPNto1SingleRowStatus.setDescription('Operation status of this table entry.')
hh3cVMAP1to2RangeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 5), )
if mibBuilder.loadTexts: hh3cVMAP1to2RangeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2RangeTable.setDescription('One-to-two VLAN mapping table. The original VLANs of each entry should be a range of VLANs (for example, VLAN 20 to 30).')
hh3cVMAP1to2RangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VMAP-MIB", "hh3cVMAP1to2StartVlan"))
if mibBuilder.loadTexts: hh3cVMAP1to2RangeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2RangeEntry.setDescription('One-to-two VLAN mapping table entries. The original VLANs of each entry should be a range of VLANs (for example, VLAN 20 to 30).')
hh3cVMAP1to2StartVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAP1to2StartVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2StartVlan.setDescription('The original start VLAN for a one-to-two VLAN mapping on the port.')
hh3cVMAP1to2EndVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to2EndVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2EndVlan.setDescription('The original end VLAN for a one-to-two VLAN mapping on the port.')
hh3cVMAP1to2RangeNestedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to2RangeNestedVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2RangeNestedVlan.setDescription('The outer VLAN for a one-to-two VLAN mapping on the port.')
hh3cVMAP1to2RangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to2RangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2RangeRowStatus.setDescription('Operation status of this table entry.')
hh3cVMAP1to2SingleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 6), )
if mibBuilder.loadTexts: hh3cVMAP1to2SingleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2SingleTable.setDescription('One-to-two VLAN mapping table. The original VLANs of each entry should be a group of VLANs listed one by one (for example, VLAN 30, 31, 32).')
hh3cVMAP1to2SingleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VMAP-MIB", "hh3cVMAP1to2Vlan"))
if mibBuilder.loadTexts: hh3cVMAP1to2SingleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2SingleEntry.setDescription('One-to-two VLAN mapping table entries. The original VLANs of each entry should be a group of VLANs listed one by one (for example, VLAN 30, 31, 32).')
hh3cVMAP1to2Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAP1to2Vlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2Vlan.setDescription('The original VLANs for a one-to-two VLAN mapping on the port.')
hh3cVMAP1to2SingleNestedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to2SingleNestedVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2SingleNestedVlan.setDescription('The outer VLAN for a one-to-two VLAN mapping on the port.')
hh3cVMAP1to2SingleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP1to2SingleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP1to2SingleRowStatus.setDescription('Operation status of this table entry.')
hh3cVMAP2to2Table = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7), )
if mibBuilder.loadTexts: hh3cVMAP2to2Table.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2Table.setDescription('Two-to-two VLAN mapping table.')
hh3cVMAP2to2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-VMAP-MIB", "hh3cVMAP2to2OuterVlan"), (0, "HH3C-VMAP-MIB", "hh3cVMAP2to2InnerVlan"))
if mibBuilder.loadTexts: hh3cVMAP2to2Entry.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2Entry.setDescription('Two-to-two VLAN mapping table entries.')
hh3cVMAP2to2OuterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAP2to2OuterVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2OuterVlan.setDescription('The original outer VLAN for a two-to-two VLAN mapping on the port.')
hh3cVMAP2to2InnerVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cVMAP2to2InnerVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2InnerVlan.setDescription('The original inner VLAN for a two-to-two VLAN mapping on the port.')
hh3cVMAP2to2TranslatedOuterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP2to2TranslatedOuterVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2TranslatedOuterVlan.setDescription('The translated outer VLAN for a two-to-two VLAN mapping on the port.')
hh3cVMAP2to2TranslatedInnerVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP2to2TranslatedInnerVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2TranslatedInnerVlan.setDescription('The translated inner VLAN for a two-to-two VLAN mapping on the port.')
hh3cVMAP2to2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 138, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVMAP2to2RowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVMAP2to2RowStatus.setDescription('Operation status of this table entry.')
mibBuilder.exportSymbols("HH3C-VMAP-MIB", hh3cVmap=hh3cVmap, hh3cVMAP1to2SingleNestedVlan=hh3cVMAP1to2SingleNestedVlan, hh3cVMAP2to2Entry=hh3cVMAP2to2Entry, hh3cVMAP1to1Entry=hh3cVMAP1to1Entry, hh3cVMAP1to2RangeNestedVlan=hh3cVMAP1to2RangeNestedVlan, hh3cVMAP1to2SingleTable=hh3cVMAP1to2SingleTable, hh3cVMAPNto1StartVlan=hh3cVMAPNto1StartVlan, PYSNMP_MODULE_ID=hh3cVmap, hh3cVMAPNto1RangeTable=hh3cVMAPNto1RangeTable, hh3cVMAP1to1Vlan=hh3cVMAP1to1Vlan, hh3cVMAPNto1SingleRowStatus=hh3cVMAPNto1SingleRowStatus, hh3cVMAP2to2InnerVlan=hh3cVMAP2to2InnerVlan, hh3cVMAP1to2EndVlan=hh3cVMAP1to2EndVlan, hh3cVMAP2to2OuterVlan=hh3cVMAP2to2OuterVlan, hh3cVMAP2to2RowStatus=hh3cVMAP2to2RowStatus, hh3cVMAPNto1RangeRowStatus=hh3cVMAPNto1RangeRowStatus, hh3cVMAP1to2SingleRowStatus=hh3cVMAP1to2SingleRowStatus, hh3cVMAPNNIEntry=hh3cVMAPNNIEntry, hh3cVMAPNto1Vlan=hh3cVMAPNto1Vlan, hh3cVMAP1to2SingleEntry=hh3cVMAP1to2SingleEntry, hh3cVMAPNto1SingleTable=hh3cVMAPNto1SingleTable, hh3cVMAP1to2RangeEntry=hh3cVMAP1to2RangeEntry, hh3cVMAP2to2Table=hh3cVMAP2to2Table, hh3cVMAPNto1EndVlan=hh3cVMAPNto1EndVlan, hh3cVMAPNto1SingleEntry=hh3cVMAPNto1SingleEntry, hh3cVMAP1to1RowStatus=hh3cVMAP1to1RowStatus, hh3cVMAP1to1TranslatedVlan=hh3cVMAP1to1TranslatedVlan, hh3cVMAPNto1RangeTranslatedVlan=hh3cVMAPNto1RangeTranslatedVlan, hh3cVMAPNto1SingleTranslatedVlan=hh3cVMAPNto1SingleTranslatedVlan, hh3cVMAP1to2StartVlan=hh3cVMAP1to2StartVlan, hh3cVMAP1to2Vlan=hh3cVMAP1to2Vlan, hh3cVMAP2to2TranslatedOuterVlan=hh3cVMAP2to2TranslatedOuterVlan, hh3cVMAP2to2TranslatedInnerVlan=hh3cVMAP2to2TranslatedInnerVlan, hh3cVMAPNNITable=hh3cVMAPNNITable, hh3cVMAP1to1Table=hh3cVMAP1to1Table, hh3cVMAPNto1RangeEntry=hh3cVMAPNto1RangeEntry, hh3cVMAPNNIState=hh3cVMAPNNIState, hh3cVMAP1to2RangeTable=hh3cVMAP1to2RangeTable, hh3cVMAP1to2RangeRowStatus=hh3cVMAP1to2RangeRowStatus)
