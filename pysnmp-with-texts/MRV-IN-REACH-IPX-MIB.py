#
# PySNMP MIB module MRV-IN-REACH-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
mrvInReachProductDivision, = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, Bits, Gauge32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, ModuleIdentity, ObjectIdentity, Integer32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Bits", "Gauge32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "ModuleIdentity", "ObjectIdentity", "Integer32", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15))
xIpxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 1))
xIpxIf = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 2))
xIpxNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 3))
xIpxRip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 4))
xIpxSap = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 5))
xIpxFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 6))
xIpxPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 8))
ipxRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouting.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouting.setDescription('Control for IPX routing services.')
ipxInternalNetwork = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInternalNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxInternalNetwork.setDescription('The IPX Internal Network to use on the the IPX Router.')
ipxIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 2, 1), )
if mibBuilder.loadTexts: ipxIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfTable.setDescription('A list of IPX interface entries.')
ipxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxIfIndex"))
if mibBuilder.loadTexts: ipxIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfEntry.setDescription('IPX interface parameters and counters.')
ipxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfState.setDescription('Control for IPX routing services for this interface.')
ipxIfNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetwork.setDescription('The IPX network number of the network to which this interface is attached.')
ipxIfFrameStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023", 2), ("ieee8022", 3), ("ieee802Snap", 4))).clone('ieee8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfFrameStyle.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFrameStyle.setDescription('Control for the CSMA/CD frame style to use on this interface.')
ipxIfFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFramesIn.setDescription('The number of IPX frames received on this interface.')
ipxIfFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFramesOut.setDescription('The number of IPX frames sent on this interface.')
ipxIfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfErrors.setDescription('The number of IPX errors seen on this interface.')
ipxIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfTransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfTransitDelay.setDescription('The number of 55 millisecond ticks it takes for a packet to travel from one destination to another on the interface. A value of 0 means that the system will calculate this value based on the measured speed of the interface.')
ipxIfTransitDelayActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfTransitDelayActual.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfTransitDelayActual.setDescription('The number of 55 millisecond ticks it takes for a packet to travel from one destination to another on the interface.')
ipxIfProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfProtocolPriority.setDescription('This value defines the priority at which all Internet Routed packets will be placed on the WAN output queue.')
ipxIfWatchdogSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfWatchdogSpoof.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfWatchdogSpoof.setDescription('Control for whether or not this router responds to IPX watchog requests on this interface.')
ipxIfStatusNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfStatusNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfStatusNetwork.setDescription('The IPX network number that is actually in use on the attached interface. This value may have been learned via listening to the attached network.')
ipxNetbiosHopLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNetbiosHopLimit.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosHopLimit.setDescription('Maximum number of hops that an IPX Netbios packet may make.')
ipxNetbiosIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 3, 2), )
if mibBuilder.loadTexts: ipxNetbiosIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosIfTable.setDescription('A list of IPX interface entries.')
ipxNetbiosIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxNetbiosIfIndex"))
if mibBuilder.loadTexts: ipxNetbiosIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosIfEntry.setDescription('IPX interface parameters and counters.')
ipxNetbiosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxNetbiosIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfNetbiosForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfNetbiosForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetbiosForwarding.setDescription('Control whether Netbios packet will be forwarded in or out on this interface.')
ipxIfNetbiosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfNetbiosIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetbiosIn.setDescription('The number of IPX Netbios frames received on this interface.')
ipxIfNetbiosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfNetbiosOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetbiosOut.setDescription('The number of IPX Netbios frames sent on this interface.')
ipxRipIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 4, 1), )
if mibBuilder.loadTexts: ipxRipIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfTable.setDescription('A list of IPX interface entries.')
ipxRipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxRipIfIndex"))
if mibBuilder.loadTexts: ipxRipIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfEntry.setDescription('IPX interface parameters and counters.')
ipxRipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfRipBcst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("propUpdateOnly", 3), ("demandCircuit", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipBcst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipBcst.setDescription('Control whether RIP packets will be broadcasted out this interface.')
ipxIfRipBcstDiscardTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 3), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipBcstDiscardTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipBcstDiscardTimeout.setDescription('The number of seconds to wait before discarding information learned from a RIP broadcast.')
ipxIfRipBcstTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipBcstTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipBcstTimer.setDescription('The number of seconds to wait between sending out RIP broadcasts.')
ipxIfRipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipIn.setDescription('The number of RIP broadcasts received on this interface.')
ipxIfRipOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipOut.setDescription('The number of RIP broadcasts sent on this interface.')
ipxIfRipAgedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipAgedOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipAgedOut.setDescription('The number of entries timed out and discarded on this interface.')
ipxRipTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 4, 2), )
if mibBuilder.loadTexts: ipxRipTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipTable.setDescription('A list of RIP entries.')
ipxRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxRipNetwork"))
if mibBuilder.loadTexts: ipxRipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipEntry.setDescription('IPX interface parameters and counters.')
ipxRipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipNetwork.setDescription('An IPX network number to which this router knows a path.')
ipxRipRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRouter.setDescription('The Ethernet address of an IPX router on this network.')
ipxRipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipInterface.setDescription('The interface to reach the router. A value of ifIndex.')
ipxRipHops = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipHops.setDescription('The number of hops to reach the router.')
ipxRipTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipTransTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipTransTime.setDescription('The number of 55 millisecond ticks it takes for a packet to travel to the router.')
ipxRipAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipAge.setDescription('The age of the RIP entry in seconds.')
ipxRipRtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 4, 3), )
if mibBuilder.loadTexts: ipxRipRtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtTable.setDescription('A list of RIP Routing entries.')
ipxRipRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxRipRtNetwork"), (0, "MRV-IN-REACH-IPX-MIB", "ipxRipRtInterface"), (0, "MRV-IN-REACH-IPX-MIB", "ipxRipRtOrigin"), (0, "MRV-IN-REACH-IPX-MIB", "ipxRipRtRouter"))
if mibBuilder.loadTexts: ipxRipRtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtEntry.setDescription('IPX Routing Entry information')
ipxRipRtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtNetwork.setDescription('An IPX network number to which this router knows a path.')
ipxRipRtRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtRouter.setDescription('The Ethernet address of an IPX router on this network.')
ipxRipRtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtInterface.setDescription('The interface to reach the router. A value of ifIndex.')
ipxRipRtHops = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRipRtHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtHops.setDescription('The number of hops to reach the router.')
ipxRipRtTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRipRtTransTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtTransTime.setDescription('The number of 55 millisecond ticks it takes for a packet to travel to the router.')
ipxRipRtOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripLearned", 1), ("static", 2), ("nlspLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtOrigin.setDescription('The source of the RIP entry, either Learned via RIP or Static.')
ipxRipRtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRipRtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtRowStatus.setDescription('Create or Delete RIP routing table entries.')
ipxSapIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 5, 1), )
if mibBuilder.loadTexts: ipxSapIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfTable.setDescription('A list of IPX interface entries.')
ipxSapIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxSapIfIndex"))
if mibBuilder.loadTexts: ipxSapIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfEntry.setDescription('IPX interface parameters and counters.')
ipxSapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfSapBcst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("propUpdateOnly", 3), ("demandCircuit", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapBcst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapBcst.setDescription('Control whether SAP packets will be broadcasted out this interface.')
ipxIfSapBcstDiscardTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 3), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapBcstDiscardTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapBcstDiscardTimeout.setDescription('The number of seconds to wait before discarding information learned from a SAP broadcast.')
ipxIfSapBcstTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapBcstTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapBcstTimer.setDescription('The number of seconds to wait between sending out SAP broadcasts.')
ipxIfSapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapIn.setDescription('The number SAP broadcasts received on this interface.')
ipxIfSapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapOut.setDescription('The number SAP broadcasts sent on this interface.')
ipxIfSapAgedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapAgedOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapAgedOut.setDescription('The number entries for this interface discarded due to aging timeout.')
ipxSapTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 5, 2), )
if mibBuilder.loadTexts: ipxSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapTable.setDescription('A list of SAP entries.')
ipxSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxSapName"), (0, "MRV-IN-REACH-IPX-MIB", "ipxSapType"))
if mibBuilder.loadTexts: ipxSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapEntry.setDescription('IPX interface parameters and counters.')
ipxSapName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapName.setDescription('The name of the service, null filled.')
ipxSapNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapNetwork.setDescription("The IPX network number on which the service's host resides.")
ipxSapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapHost.setDescription('The Ethernet address of the IPX host of the service.')
ipxSapSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSocket.setDescription('The socket number of the service on the host.')
ipxSapInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapInterface.setDescription('The interface of the router in the direction of the service. A value of ifIndex.')
ipxSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("user", 1), ("userGroup", 2), ("printQueue", 3), ("novellFileServer", 4), ("jobServer", 5), ("gateway1", 6), ("printServer", 7), ("archiveQueue", 8), ("archiveServer", 9), ("jobQueue", 10), ("administration", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapType.setDescription('The type of the service. The enumeration is an incomplete set of all possible values.')
ipxSapAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapAge.setDescription('The age of the Sap entry in seconds.')
ipxSapSvTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 5, 3), )
if mibBuilder.loadTexts: ipxSapSvTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvTable.setDescription('A list of SAP entries.')
ipxSapSvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxSapSvName"), (0, "MRV-IN-REACH-IPX-MIB", "ipxSapSvType"), (0, "MRV-IN-REACH-IPX-MIB", "ipxSapSvOrigin"), (0, "MRV-IN-REACH-IPX-MIB", "ipxSapSvNetwork"), (0, "MRV-IN-REACH-IPX-MIB", "ipxSapSvSocket"), (0, "MRV-IN-REACH-IPX-MIB", "ipxSapSvHost"))
if mibBuilder.loadTexts: ipxSapSvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvEntry.setDescription('IPX interface parameters and counters.')
ipxSapSvName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvName.setDescription('The name of the service.')
ipxSapSvNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvNetwork.setDescription("The IPX network number on which the service's host resides.")
ipxSapSvHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvHost.setDescription('The Ethernet address of the IPX host of the service.')
ipxSapSvSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvSocket.setDescription('The socket number of the service on the host.')
ipxSapSvInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvInterface.setDescription('The interface of the router in the direction of the service. A value of ifIndex.')
ipxSapSvOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipxSapLearned", 1), ("ipxStatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvOrigin.setDescription('The source of the RIP entry, either Learned via RIP or Static.')
ipxSapSvType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("user", 1), ("userGroup", 2), ("printQueue", 3), ("novellFileServer", 4), ("jobServer", 5), ("gateway1", 6), ("printServer", 7), ("archiveQueue", 8), ("archiveServer", 9), ("jobQueue", 10), ("administration", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvType.setDescription('The type of the service. The enumeration is an incomplete set of all possible values.')
ipxSapSvHops = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapSvHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvHops.setDescription('The number of hops to the Service.')
ipxSapSvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapSvRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvRowStatus.setDescription('Create or Delete SAP Service table entries.')
ipxSapSvAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvAge.setDescription('The age of the Sap entry in seconds.')
ipxIfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 6, 1), )
if mibBuilder.loadTexts: ipxIfFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterTable.setDescription('A list of IPX interface Source and Destination address Filter entries.')
ipxIfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxIfIndex"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterDestNetwork"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterDestNode"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterSourceNetwork"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterSourceNode"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterPacketType"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterStatusDestNetworkAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterStatusDestNodeAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterStatusSourceNetworkAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterStatusSourceNodeAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfFilterStatusPacketTypeAll"))
if mibBuilder.loadTexts: ipxIfFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterEntry.setDescription('IPX Source and Destination interface Filters.')
ipxIfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterIndex.setDescription('The interface to which this IPX Address filter applies. A value of ifIndex.')
ipxIfFilterDestNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterDestNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterDestNetwork.setDescription('The destination IPX network to be filtered.')
ipxIfFilterDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterDestNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterDestNode.setDescription('The destination IPX node to be filtered.')
ipxIfFilterSourceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterSourceNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterSourceNetwork.setDescription('The destination IPX network to be filtered.')
ipxIfFilterSourceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterSourceNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterSourceNode.setDescription('The destination IPX node to be filtered.')
ipxIfFilterPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterPacketType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterPacketType.setDescription('The IPX packet type to be filtered.')
ipxIfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterAction.setDescription('The IPX filter action to be taken, either Forward or Discard.')
ipxIfFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterRowStatus.setDescription('The IPX Filter create or delete function.')
ipxIfFilterStatusDestNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusDestNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusDestNetworkAll.setDescription('The IPX Filter flag meaning ALL destination networks.')
ipxIfFilterStatusDestNodeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusDestNodeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusDestNodeAll.setDescription('The IPX Filter flag meaning ALL destination nodes.')
ipxIfFilterStatusSourceNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNetworkAll.setDescription('The IPX Filter flag meaning ALL source networks.')
ipxIfFilterStatusSourceNodeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNodeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNodeAll.setDescription('The IPX Filter flag meaning ALL source nodes.')
ipxIfFilterStatusPacketTypeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusPacketTypeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusPacketTypeAll.setDescription('The IPX Filter flag meaning ALL packet types.')
ipxIfRipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 6, 2), )
if mibBuilder.loadTexts: ipxIfRipFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterTable.setDescription('A list of IPX interface RIP Filter entries.')
ipxIfRipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxIfIndex"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfRipFilterType"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfRipFilterNetwork"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfRipFilterNetworkAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfRipFilterHost"))
if mibBuilder.loadTexts: ipxIfRipFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterEntry.setDescription('IPX RIP interface Filters.')
ipxIfRipFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterNetwork.setDescription('The IPX RIP network to be filtered.')
ipxIfRipFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterType.setDescription('The IPX RIP filter type, either IMPORT or EXPORT.')
ipxIfRipFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterAction.setDescription('The IPX RIP filter action to be taken, either ALLOW or DENY.')
ipxIfRipFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterRowStatus.setDescription('The IPX RIP Filter create or delete function.')
ipxIfRipFilterNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterNetworkAll.setDescription('The IPX RIP Filter flag meaning filter ALL networks.')
ipxIfRipFilterHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterHost.setDescription('The RIP Filter IPX Host Address from which RIP will ALLOW/DENY IMPORT of routes.')
ipxIfSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 6, 3), )
if mibBuilder.loadTexts: ipxIfSapFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterTable.setDescription('A list of IPX interface SAP Filter entries.')
ipxIfSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxIfIndex"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterType"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterName"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterServiceType"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterServiceTypeAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterNetwork"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterNetworkAll"), (0, "MRV-IN-REACH-IPX-MIB", "ipxIfSapFilterHost"))
if mibBuilder.loadTexts: ipxIfSapFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterEntry.setDescription('IPX SAP interface Filters.')
ipxIfSapFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterNetwork.setDescription('The IPX SAP network to be filtered.')
ipxIfSapFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterType.setDescription('The IPX SAP filter type, either IMPORT or EXPORT.')
ipxIfSapFilterServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterServiceType.setDescription('The IPX SAP service type to which this filter applies.')
ipxIfSapFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterAction.setDescription('The IPX SAP filter action to be taken, either ALLOW or DENY.')
ipxIfSapFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterRowStatus.setDescription('The IPX SAP Filter create or delete function.')
ipxIfSapFilterNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterNetworkAll.setDescription('The IPX SAP Filter flag meaning filter ALL networks.')
ipxIfSapFilterServiceTypeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterServiceTypeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterServiceTypeAll.setDescription('The IPX SAP Filter flag meaning filter ALL service types.')
ipxIfSapFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterName.setDescription('The name of the service to be filtered.')
ipxIfSapFilterHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterHost.setDescription('The IPX Host address from which SAP will ALLOW/DENY IMPORT of services .')
ipxPrinterPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 8, 1), )
if mibBuilder.loadTexts: ipxPrinterPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortTable.setDescription('A list of IPX printer character port entries.')
ipxPrinterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-IPX-MIB", "ipxPrinterPortIndex"))
if mibBuilder.loadTexts: ipxPrinterPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortEntry.setDescription('IPX printer parameter values for a character port.')
ipxPrinterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPrinterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
ipxPrinterPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
ipxPrinterPortServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterPortServer.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortServer.setDescription('The name of an active print server on the network.')
ipxPrinterPortPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterPortPrinter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortPrinter.setDescription('An available remote printer on ixpPrinterPortServer.')
ipxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 300)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxTimeout.setDescription('A control to set the the time at which a print job from a print server will be timed out and the port freed.')
ipxPrinterEthernet = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterEthernet.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterEthernet.setDescription('Control for use of Ethernet-style message framing, with the IPX protocol type. Mutually exclusive with ipxPrinterMac, ipxPrinterMac802_2_Snap, and ipxPrinterMac802_2.')
ipxPrinterMac = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterMac.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterMac.setDescription('Control for use of MAC-only message framing, with no protocol type. Mutually exclusive with ipxPrinterEthernet, ipxPrinterMac802_2_Snap, and ipxPrinterMac802_2.')
ipxPrinterMac802_2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setLabel("ipxPrinterMac802-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterMac802_2.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterMac802_2.setDescription('Control for use of MAC message framing with 802.2 framing. Mutually exclusive with ipxPrinterEthernet, ipxPrinterMac, and ipxPrinterMac802_2_Snap.')
ipxPrinterMac802_2_Snap = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setLabel("ipxPrinterMac802-2-Snap").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterMac802_2_Snap.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterMac802_2_Snap.setDescription('Control for use of MAC-only message framing with 802 Snap framing. Mutually exclusive with ipxPrinterEthernet, ipxPrinterMac, and ipxPrinterMac802_2.')
mibBuilder.exportSymbols("MRV-IN-REACH-IPX-MIB", ipxRipRtOrigin=ipxRipRtOrigin, ipxIfWatchdogSpoof=ipxIfWatchdogSpoof, ipxNetbiosHopLimit=ipxNetbiosHopLimit, ipxPrinterPortStatus=ipxPrinterPortStatus, ipxRipRtRouter=ipxRipRtRouter, ipxIfFilterStatusDestNetworkAll=ipxIfFilterStatusDestNetworkAll, ipxRipInterface=ipxRipInterface, ipxRipRtInterface=ipxRipRtInterface, ipxIfRipBcstTimer=ipxIfRipBcstTimer, ipxIfFilterDestNetwork=ipxIfFilterDestNetwork, ipxSapSvAge=ipxSapSvAge, ipxSapHost=ipxSapHost, ipxIfRipFilterNetwork=ipxIfRipFilterNetwork, ipxIfTransitDelay=ipxIfTransitDelay, ipxSapSvEntry=ipxSapSvEntry, ipxIfTable=ipxIfTable, ipxIfFilterRowStatus=ipxIfFilterRowStatus, ipxSapName=ipxSapName, ipxNetbiosIfIndex=ipxNetbiosIfIndex, ipxRipIfIndex=ipxRipIfIndex, ipxRipRtEntry=ipxRipRtEntry, ipxRipRtHops=ipxRipRtHops, xIpxSap=xIpxSap, ipxIfSapOut=ipxIfSapOut, ipxRipTable=ipxRipTable, ipxIfStatusNetwork=ipxIfStatusNetwork, ipxIfSapFilterNetwork=ipxIfSapFilterNetwork, ipxIfSapFilterNetworkAll=ipxIfSapFilterNetworkAll, ipxIfState=ipxIfState, ipxIfFilterEntry=ipxIfFilterEntry, ipxSapType=ipxSapType, ipxRouting=ipxRouting, ipxIfSapFilterEntry=ipxIfSapFilterEntry, xIpxIf=xIpxIf, ipxSapSvHost=ipxSapSvHost, ipxRipEntry=ipxRipEntry, ipxIfFilterSourceNetwork=ipxIfFilterSourceNetwork, ipxSapTable=ipxSapTable, ipxIfSapFilterType=ipxIfSapFilterType, ipxIfRipIn=ipxIfRipIn, ipxIfRipFilterType=ipxIfRipFilterType, ipxRipIfEntry=ipxRipIfEntry, ipxIfErrors=ipxIfErrors, ipxIfRipFilterAction=ipxIfRipFilterAction, ipxPrinterPortPrinter=ipxPrinterPortPrinter, ipxIfSapIn=ipxIfSapIn, ipxIfFilterDestNode=ipxIfFilterDestNode, ipxNetbiosIfEntry=ipxNetbiosIfEntry, ipxPrinterMac=ipxPrinterMac, xIpx=xIpx, ipxIfRipFilterRowStatus=ipxIfRipFilterRowStatus, ipxIfProtocolPriority=ipxIfProtocolPriority, ipxSapSvSocket=ipxSapSvSocket, ipxRipRtTable=ipxRipRtTable, ipxIfSapFilterServiceType=ipxIfSapFilterServiceType, ipxPrinterPortServer=ipxPrinterPortServer, ipxIfFilterStatusDestNodeAll=ipxIfFilterStatusDestNodeAll, ipxIfRipFilterEntry=ipxIfRipFilterEntry, ipxRipRouter=ipxRipRouter, ipxIfIndex=ipxIfIndex, ipxPrinterPortTable=ipxPrinterPortTable, ipxPrinterPortEntry=ipxPrinterPortEntry, ipxIfSapFilterAction=ipxIfSapFilterAction, ipxIfSapBcstTimer=ipxIfSapBcstTimer, ipxPrinterMac802_2_Snap=ipxPrinterMac802_2_Snap, xIpxPrinter=xIpxPrinter, ipxSapSvTable=ipxSapSvTable, ipxRipRtRowStatus=ipxRipRtRowStatus, ipxIfFrameStyle=ipxIfFrameStyle, ipxIfSapFilterServiceTypeAll=ipxIfSapFilterServiceTypeAll, ipxIfTransitDelayActual=ipxIfTransitDelayActual, ipxIfSapFilterRowStatus=ipxIfSapFilterRowStatus, ipxIfNetbiosForwarding=ipxIfNetbiosForwarding, ipxIfRipOut=ipxIfRipOut, ipxRipTransTime=ipxRipTransTime, ipxPrinterEthernet=ipxPrinterEthernet, ipxIfFramesOut=ipxIfFramesOut, ipxIfSapBcst=ipxIfSapBcst, ipxIfFramesIn=ipxIfFramesIn, ipxRipAge=ipxRipAge, ipxSapInterface=ipxSapInterface, ipxIfFilterIndex=ipxIfFilterIndex, ipxIfSapFilterTable=ipxIfSapFilterTable, ipxIfSapFilterName=ipxIfSapFilterName, ipxRipRtNetwork=ipxRipRtNetwork, ipxSapSvHops=ipxSapSvHops, ipxIfRipFilterTable=ipxIfRipFilterTable, ipxSapSvName=ipxSapSvName, ipxIfFilterStatusSourceNetworkAll=ipxIfFilterStatusSourceNetworkAll, ipxIfRipFilterNetworkAll=ipxIfRipFilterNetworkAll, ipxIfNetbiosOut=ipxIfNetbiosOut, ipxRipRtTransTime=ipxRipRtTransTime, ipxSapSvNetwork=ipxSapSvNetwork, ipxIfFilterStatusPacketTypeAll=ipxIfFilterStatusPacketTypeAll, ipxIfSapAgedOut=ipxIfSapAgedOut, ipxIfRipFilterHost=ipxIfRipFilterHost, ipxIfNetbiosIn=ipxIfNetbiosIn, ipxSapSvType=ipxSapSvType, ipxIfEntry=ipxIfEntry, ipxSapNetwork=ipxSapNetwork, ipxRipHops=ipxRipHops, xIpxRip=xIpxRip, xIpxSystem=xIpxSystem, ipxIfFilterAction=ipxIfFilterAction, ipxIfRipAgedOut=ipxIfRipAgedOut, ipxNetbiosIfTable=ipxNetbiosIfTable, ipxTimeout=ipxTimeout, ipxInternalNetwork=ipxInternalNetwork, ipxIfFilterSourceNode=ipxIfFilterSourceNode, xIpxNetbios=xIpxNetbios, ipxIfRipBcstDiscardTimeout=ipxIfRipBcstDiscardTimeout, ipxSapIfEntry=ipxSapIfEntry, ipxSapSocket=ipxSapSocket, ipxSapEntry=ipxSapEntry, ipxRipNetwork=ipxRipNetwork, ipxIfFilterPacketType=ipxIfFilterPacketType, ipxIfNetwork=ipxIfNetwork, ipxPrinterMac802_2=ipxPrinterMac802_2, xIpxFilter=xIpxFilter, ipxSapIfTable=ipxSapIfTable, ipxSapSvRowStatus=ipxSapSvRowStatus, ipxIfSapBcstDiscardTimeout=ipxIfSapBcstDiscardTimeout, ipxSapAge=ipxSapAge, ipxIfSapFilterHost=ipxIfSapFilterHost, ipxIfRipBcst=ipxIfRipBcst, ipxIfFilterTable=ipxIfFilterTable, ipxIfFilterStatusSourceNodeAll=ipxIfFilterStatusSourceNodeAll, ipxSapIfIndex=ipxSapIfIndex, ipxSapSvInterface=ipxSapSvInterface, ipxRipIfTable=ipxRipIfTable, ipxPrinterPortIndex=ipxPrinterPortIndex, ipxSapSvOrigin=ipxSapSvOrigin)
