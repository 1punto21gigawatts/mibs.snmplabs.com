#
# PySNMP MIB module LOAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LOAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, NotificationType, TimeTicks, ObjectIdentity, IpAddress, Gauge32, Counter64, enterprises, Counter32, MibIdentifier, iso, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "NotificationType", "TimeTicks", "ObjectIdentity", "IpAddress", "Gauge32", "Counter64", "enterprises", "Counter32", "MibIdentifier", "iso", "ModuleIdentity", "Bits")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2))
load = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 53))
load.setRevisions(('1900-09-13 15:55', '1900-09-13 14:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: load.setRevisionsDescriptions(('Rev 1.3.4 -one action sync all files between standby and active agent in the P550/P880.', 'Rev 1.3.3 -Support for P550/P880 stand-by Agent.',))
if mibBuilder.loadTexts: load.setLastUpdated('0009131420Z')
if mibBuilder.loadTexts: load.setOrganization('Lucent Technologies Inc.')
if mibBuilder.loadTexts: load.setContactInfo('Itai Zilbershtein -- izilbers@avaya.com Yigal Nehaysi -- ynehaysi@avaya.com Virginia Brown -- vibrown@avaya.com')
if mibBuilder.loadTexts: load.setDescription('Lucent Common Download / Upload Private MIB')
genOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1))
genApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2))
genLoadNumberOfSession = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genLoadNumberOfSession.setStatus('current')
if mibBuilder.loadTexts: genLoadNumberOfSession.setDescription('The number of operational sessions in progress in this system')
genOpTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2), )
if mibBuilder.loadTexts: genOpTable.setStatus('current')
if mibBuilder.loadTexts: genOpTable.setDescription('Table of configuration attributes which define the operational functions and the results on a per module basis. This group provides the mechanism by which available operations are initiated, monitored and reported.')
genOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1), ).setIndexNames((0, "LOAD-MIB", "genOpModuleId"), (0, "LOAD-MIB", "genOpIndex"))
if mibBuilder.loadTexts: genOpEntry.setStatus('current')
if mibBuilder.loadTexts: genOpEntry.setDescription('An entry in the table, containing data about a single modules operations.')
genOpModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpModuleId.setStatus('current')
if mibBuilder.loadTexts: genOpModuleId.setDescription('Index which identifies the module inside the chassis for which this entry contains information. Equals the number of the slot by which the group is accessed or the stackable index.')
genOpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("uploadConfig", 1), ("downloadConfig", 2), ("report", 3), ("uploadSoftware", 4), ("downloadSoftware", 5), ("localConfigFileCopy", 6), ("localSWFileCopy", 7), ("uploadLogfile", 8), ("eraseFile", 9), ("show", 10), ("syncStandbyAgent", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpIndex.setStatus('current')
if mibBuilder.loadTexts: genOpIndex.setDescription("Index to identify the operation supported by this row entry. Each operation type that is supported by this module should be represented by a unique row in this MIB Table. A walk of this MIB table should reveal all the operations that are supported by the device. The operations supported are: uploadConfig -- The 'genOpDestIndex' should be set to 0 (to indicate destination of server). The 'genOpServerIP' should be set to the server to which the config will be saved. The 'genOpProtocolType' should be set to the IP protocol used to transport the file. The 'genOpSourceIndex' should be set to the 'genAppFileId' of the config file you are uploading. The 'genOpFileName' should be set to the name and path of the config file on the TFTP server. downloadConfig -- The 'genOpDestIndex' should be set to the 'genAppFileId' of the config file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'genAppFileTable'). The 'genOpServerIP' should be set to the server from which the config will be copied. The 'genOpProtocolType' should be set to the IP protocol used to transport the file. The 'genOpSourceIndex' should be set to 0 (to indicate source of server). The 'genOpFileName' should be set to the name and path of the config file on the TFTP server. report -- uploadSoftware -- The 'genOpDestIndex' should be set to 0 (to indicate destination of server). The 'genOpServerIP' should be set to the server to which the config file will be saved. The 'genOpProtocolType' should be set to the IP protocol used to transport the file. The 'genOpSourceIndex' should be set to the 'genAppFileId' of the software file you are uploading. The 'genOpFileName' should be set to the name and path of the image file on the TFTP server. downloadSoftware -- The 'genOpDestIndex' should be set to the 'genAppFileId' of the software file you are downloading to (if one does not exist, you'll need to RowCreate it in the 'genAppFileTable'). The 'genOpServerIP' should be set to the server from which the config file will be copied. The 'genOpProtocolType' should be set to the IP protocol used to transport the file. The 'genOpSourceIndex' should be set to 0 (to indicate source of server). The 'genOpFileName' should be set to the name and path of the image file on the TFTP server. localConfigFileCopy -- (using a 'genOpType' of 'localPeerTransport') The 'genOpDestIndex' should be set to the 'genAppFileId' of the config file you are copying to (if one does not exist you'll need to RowCreate it in the 'genAppFileTable'). The 'genOpSourceIndex' should be set to the 'genAppFileId' of the config file you are copying from. The 'genOpServerIP' should be set to NULL. The 'genOpProtocolType' should be set to 'localPeerTransport'. The 'genOpFileName' should be set to NULL. localSWFileCopy -- (using a 'genOpType' of 'localPeerTransport') The 'genOpDestIndex' should be set to the 'genAppFileId' of the software file you are copying to (if one does not exist you'll need to RowCreate it in the 'genAppFileTable'). The 'genOpSourceIndex' should be set to the 'genAppFileId' of the software file you are copying from. The 'genOpServerIP' should be set to NULL. The 'genOpProtocolType' should be set to 'localPeerTransport'. The 'genOpFileName' should be set to NULL. localConfigFileCopy -- (using a 'genOpType' of 'localServerTransport') The 'genOpDestIndex' should be set to the 'genAppFileId' of the config file you are copying to (if one does not exist you'll need to RowCreate it in the 'genAppFileTable') or ZERO (0) if copying to a localServer. The 'genOpSourceIndex' should be set to the 'genAppFileId' of the config file you are copying from or ZERO (0) if copying from a localServer. The 'genOpServerIP' should be set to the address of the local server. The 'genOpProtocolType' should be set to 'localServerTransport'. localSWFileCopy -- (using a 'genOpType' of 'localServerTransport') The 'genOpDestIndex' should be set to the 'genAppFileId' of the software file you are copying to (if one does not exist you'll need to RowCreate it in the 'genAppFileTable'). The 'genOpSourceIndex' should be set to the 'genAppFileId' of the software file you are copying from. The 'genOpServerIP' should be set to the address of the local server. The 'genOpProtocolType' should be set to 'localServerTransport'. uploadLogfile -- The 'genOpDestIndex' should be set to 0 (to indicate destination of server). The 'genOpSourceIndex' should be set to the 'genAppFileId' of the log file you are copying from. The 'genOpServerIP' should be set to the server to which the config will be saved. The 'genOpProtocolType' should be set to the IP protocol used to transport the file. The 'genOpFileName' should be set to the name and path of the log file on the TFTP server. eraseFile -- The 'genOpDestIndex' Is not applicable for this command. The 'genOpSourceIndex' should be set to the 'genAppFileId' of the file you wish to erase. The 'genOpServerIP' should be set to 0. The 'genOpProtocolType' should be set to 0. The 'genOpFileName' should be set to NULL. show -- Reporting information to the CLI. syncStandbyAgent(11) -- copy configuration AND software image files to the (non-active) standby agent in a P550/P880. The 'genOpDestIndex' should be set to 1 The 'genOpSourceIndex' should be set to 1 The 'genOpServerIP' should be set to NULL. The 'genOpProtocolType' should be set to 'localPeerTransport'. The 'genOpFileName' should be set to NULL. ")
genOpRunningState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("beginOperation", 2), ("waitingIp", 3), ("runningIp", 4), ("copyingLocal", 5), ("readingConfiguration", 6), ("executing", 7))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpRunningState.setStatus('current')
if mibBuilder.loadTexts: genOpRunningState.setDescription('Identifies the operation to perform and the state of that operation. This field acts as both the trigger to initiate the operation (via the beginOperation) and the status field of the operation itself (i.e. waiting-ip, running-ip, etc.). It is expected that all dependent MIB objects will be set before the trigger is set to beginOperation. The operations completion is triggered by the return to the idle state. idle(1), - Operation not in progress beginOperation(2), - Trigger by NMS to start the operation waitingIp(3), - Communication phase; waiting for response runningIp(4), - Communication phase; transferring data copyingLocal(5), - Local operation readingConfiguration(6), - Parsing / Executing configuration file executing(7) - Executing Command (such as erasing a file or reporting) ')
genOpSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpSourceIndex.setStatus('current')
if mibBuilder.loadTexts: genOpSourceIndex.setDescription('The index value (taken from the genAppFileTable) of the source of the operation. NOTE: A value of zero (0) here indicates that the Server (specified below) is the source.')
genOpDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpDestIndex.setStatus('current')
if mibBuilder.loadTexts: genOpDestIndex.setDescription('The index value (taken from the genAppFileTable) of the destination of the operation. NOTE: A value of zero (0) here indicates that the Server (specified below) is the Destination.')
genOpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpServerIP.setStatus('current')
if mibBuilder.loadTexts: genOpServerIP.setDescription('The IP Address of the server from/to which the file has to be Download/Upload. NOTE: In the case of localPeerTransport this value should be NULL.')
genOpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpUserName.setStatus('current')
if mibBuilder.loadTexts: genOpUserName.setDescription('Contains the username to be used if the protocol specified in genOpProtocolType requires one. The default value will be the empty string')
genOpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpPassword.setStatus('current')
if mibBuilder.loadTexts: genOpPassword.setDescription('Contains the password to be used if the protocol specified in genOpProtocolType requires one. The default value will be the empty string')
genOpProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("localPeerTransport", 3), ("localServerTransport", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpProtocolType.setStatus('current')
if mibBuilder.loadTexts: genOpProtocolType.setDescription('Identifies the protocol between the management station and the device for Download/Upload of the file.')
genOpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpFileName.setStatus('current')
if mibBuilder.loadTexts: genOpFileName.setDescription('The location (including the FULL path) of the file in the server. NOTE: In the case of localPeerTransport this value should be NULL.')
genOpRunningStateDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpRunningStateDisplay.setStatus('current')
if mibBuilder.loadTexts: genOpRunningStateDisplay.setDescription('The state of the operation for Display on the terminal during operation process.')
genOpLastFailureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 100, 101, 102, 103, 104, 105, 106, 107))).clone(namedValues=NamedValues(("noError", 1), ("genError", 2), ("configError", 3), ("busy", 4), ("timeout", 5), ("cancelled", 6), ("incompatibleFile", 7), ("fileTooBig", 8), ("protocolError", 9), ("flashWriteError", 10), ("nvramWriteError", 11), ("confFileGenErr", 12), ("confFileParseError", 13), ("confFileExecError", 14), ("undefinedError", 100), ("fileNotFound", 101), ("accessViolation", 102), ("outOfMemory", 103), ("illegalOperation", 104), ("unknownTransferId", 105), ("fileAlreadyExists", 106), ("noSuchUser", 107)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpLastFailureIndex.setStatus('current')
if mibBuilder.loadTexts: genOpLastFailureIndex.setDescription("While a download is in progress this will always be 'no-error'. After a download is complete this indicates the success or failure of the download. If it is anything other than 'no-error' then 'genOpLastFailureDisplay' will contain a textual description of the error. Error codes from 100 upwards are errors returned from a TFTP server. errors below this are locally generated. Configuration files may return errors after download as a result of reading a config file into the system. confFileGenErr - General (unknown error) confFileParseError - Reading of config file resulted in parsing errors. confFileExecError - Reading of config file resulted in execution errors.")
genOpLastFailureDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpLastFailureDisplay.setStatus('current')
if mibBuilder.loadTexts: genOpLastFailureDisplay.setDescription('Contains the last error, Null if there is no error.')
genOpLastWarningDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpLastWarningDisplay.setStatus('current')
if mibBuilder.loadTexts: genOpLastWarningDisplay.setDescription("Last warning which didn't stop the operation (not fatal error).")
genOpErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpErrorLogIndex.setStatus('current')
if mibBuilder.loadTexts: genOpErrorLogIndex.setDescription("The Index in the 'genAppFileTable' under which an error log has been created. In the case of file that produce errors this file should contain a log of errors that occurred. (This item should be zero if it does not exist)")
genOpResetSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpResetSupported.setStatus('current')
if mibBuilder.loadTexts: genOpResetSupported.setDescription('Indicates if a reset (after operation completion) is supported by this Module.')
genOpEnableReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpEnableReset.setStatus('current')
if mibBuilder.loadTexts: genOpEnableReset.setDescription('Whether to do a reset after the operation completed successfully.')
genOpNextBootImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpNextBootImageIndex.setStatus('current')
if mibBuilder.loadTexts: genOpNextBootImageIndex.setDescription("The row in the 'genAppFileTable' of the default Application that the device will boot from when a standard reboot is performed.")
genOpLastBootImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpLastBootImageIndex.setStatus('current')
if mibBuilder.loadTexts: genOpLastBootImageIndex.setDescription("The Index in the 'genAppFileTable' of the default Application that the device was last booted from.")
genOpFileSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpFileSystemType.setStatus('current')
if mibBuilder.loadTexts: genOpFileSystemType.setDescription("Indicates what type of file system is supported by this module. A value of 'static' indicates that rows in the 'genAppFileTable' are not removable nor can new entries be created. A value of 'dynamic' indicates that entries in the 'genAppFileTable' are both removable and can be created.")
genOpReportSpecificFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("fullReport", 1), ("partialReport", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genOpReportSpecificFlags.setStatus('current')
if mibBuilder.loadTexts: genOpReportSpecificFlags.setDescription('Contain modifiers to the Report operation. fullReport - Full configuration report partialReport - A report without the information stored in the OSPF database notSupported - For operations other than report, this MIB has no meaning and can return not Supported or not be supported.')
genOpOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genOpOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: genOpOctetsReceived.setDescription('While a download is in progress this indicates the number of bytes transferred so far. ')
genAppFileTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1), )
if mibBuilder.loadTexts: genAppFileTable.setStatus('current')
if mibBuilder.loadTexts: genAppFileTable.setDescription('Table of Application (FILE) entries. Each row uniquely defines an application in the system. Applications can be defined as any entity that can be read or written from or to the system. This includes software images, boot code, configuration files, prom code, etc.')
genAppFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1), ).setIndexNames((0, "LOAD-MIB", "genOpModuleId"), (0, "LOAD-MIB", "genAppFileId"))
if mibBuilder.loadTexts: genAppFileEntry.setStatus('current')
if mibBuilder.loadTexts: genAppFileEntry.setDescription('An entry in the table, containing data about a single application / config file.')
genAppFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genAppFileId.setStatus('current')
if mibBuilder.loadTexts: genAppFileId.setDescription('Index which uniquely identifies the application. NOTE: This index CANNOT BE ZERO (0) since the index of zero is reserved as an indication of network server location in the genOpSourceIndex and genOpDestIndex above.')
genAppFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genAppFileName.setStatus('current')
if mibBuilder.loadTexts: genAppFileName.setDescription('The name of the application.')
genAppFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("runningConfiguration", 1), ("startupConfiguration", 2), ("defaultConfiguration", 3), ("report", 4), ("genConfigFile", 5), ("logFile", 6), ("nvramFile", 7), ("swRuntimeImage", 8), ("swBootImage", 9), ("swComponent", 10), ("other", 11), ("swWebImage", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genAppFileType.setStatus('current')
if mibBuilder.loadTexts: genAppFileType.setDescription("The type (class) of the application. This class serves to catagorize the many application files in the system into some fixed types: runningConfiguration -- This entry represents a virtual file in the system. Use of this entry in the genOpTable should serve to cause the system to generate it's configuration or to force the system to read a new config into it's configuration. startupConfiguration -- This entry represents a real file that is used at start-up to configure the device. defaultConfiguration -- This entry represents a file which contains the default configuration of the device. report -- ?? genConfigFile -- This entry represents a file which contains configuration information (similar to the 'startupConfiguration' above but is not automatically read by the device. This entry is used to represent 'alternate', 'backup' or 'experimental' configurations that the user may which to store on the device. nvramFile -- This entry represents a file that is contain in the nvram files system that does not fit any of the other pre-defined types. swRuntimeImage -- This entry represents a software images that contains operational code that is currently being used to run the device. swBootImage -- This entry represents a software image that contain operational code that is used to initally boot the device. swComponent -- This entry represents a file that is stored as an 'alternate', 'backup' or 'experimental' version of operational code. other -- other swWebImage -- The Image file of the embedded Web application (java application, etc).")
genAppFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genAppFileDescription.setStatus('current')
if mibBuilder.loadTexts: genAppFileDescription.setDescription('A description of the application.')
genAppFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genAppFileSize.setStatus('current')
if mibBuilder.loadTexts: genAppFileSize.setDescription('The size (expressed as the number of bytes) of the application.')
genAppFileVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genAppFileVersionNumber.setStatus('current')
if mibBuilder.loadTexts: genAppFileVersionNumber.setDescription('The current version of the application. If this files does not carry a version this field should be NULL.')
genAppFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ram", 1), ("flashBankA", 2), ("flashBankB", 3), ("nvram", 4), ("bootProm", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genAppFileLocation.setStatus('current')
if mibBuilder.loadTexts: genAppFileLocation.setDescription('The physical location of the application.')
genAppFileDateStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genAppFileDateStamp.setStatus('current')
if mibBuilder.loadTexts: genAppFileDateStamp.setDescription("The time stamp is the Real Time if supported otherwise sysUpTime. The convention for this field is as follows: Real Time: Entry is prefixed with an 'R' character and time is formatted using the convention for date-and-time (rfc1903) DISPLAY-HINT 'R-2d-1d-1d,1d:1d:1d.1d,1a1d:1d' field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: R-1992-5-26,13:30:15.0,-4:0 Note that if only local time is known, then timezone information (fields 8-10) is not present. SysUpTime: Entry is prefixed with an 'S' character and time is formatted using a portion of that date-and-time convention DISPLAY-HINT 'S-1d-1d,1d:1d:1d.1d' field octets contents range ----- ------ -------- ----- 1 3 month 1..12 2 4 day 1..31 3 5 hour 0..23 4 6 minutes 0..59 5 7 seconds 0..60 6 8 deci-seconds 0..9 For example, S-5-26,13:30:15.0 Represents a file that has existed in the system for 5 months, 26 days, 13 hours, 30 minutes, 15 seconds exactly. This value will be reset after a reboot of the system.")
genAppFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 53, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genAppFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: genAppFileRowStatus.setDescription('The status of this entry in the table. Note the available states: active(1), -- Fully configured and active. notInService(2) -- NOT SUPPORTED. notReady(3), -- Entry NOT FULLY configured. createAndGo(4), -- Used to add new Applications in the system. createAndWait(5) -- Used to add new Applications in the system. destroy(6) -- Used to delete Applications in the system.')
mibBuilder.exportSymbols("LOAD-MIB", genAppFileVersionNumber=genAppFileVersionNumber, genOpOctetsReceived=genOpOctetsReceived, genOpLastFailureDisplay=genOpLastFailureDisplay, genOperations=genOperations, genOpReportSpecificFlags=genOpReportSpecificFlags, genOpModuleId=genOpModuleId, genOpLastFailureIndex=genOpLastFailureIndex, genAppFileDescription=genAppFileDescription, genOpServerIP=genOpServerIP, genOpUserName=genOpUserName, genAppFileEntry=genAppFileEntry, mibs=mibs, genOpSourceIndex=genOpSourceIndex, genLoadNumberOfSession=genLoadNumberOfSession, genAppFileSize=genAppFileSize, products=products, genAppFileId=genAppFileId, genOpPassword=genOpPassword, load=load, genOpRunningState=genOpRunningState, genOpNextBootImageIndex=genOpNextBootImageIndex, genAppFileType=genAppFileType, genOpFileName=genOpFileName, genOpTable=genOpTable, genOpResetSupported=genOpResetSupported, genAppFileRowStatus=genAppFileRowStatus, genOpRunningStateDisplay=genOpRunningStateDisplay, genOpProtocolType=genOpProtocolType, lucent=lucent, genApplications=genApplications, genOpEnableReset=genOpEnableReset, genAppFileLocation=genAppFileLocation, genOpLastWarningDisplay=genOpLastWarningDisplay, genAppFileTable=genAppFileTable, PYSNMP_MODULE_ID=load, genOpIndex=genOpIndex, genOpDestIndex=genOpDestIndex, genOpFileSystemType=genOpFileSystemType, genAppFileName=genAppFileName, genAppFileDateStamp=genAppFileDateStamp, genOpLastBootImageIndex=genOpLastBootImageIndex, genOpErrorLogIndex=genOpErrorLogIndex, genOpEntry=genOpEntry)
