#
# PySNMP MIB module Wellfleet-DECNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-DECNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibIdentifier, TimeTicks, Integer32, Opaque, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Bits, Counter32, Counter64, Gauge32, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Integer32", "Opaque", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "Counter64", "Gauge32", "IpAddress", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfDecGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDecGroup")
wfivRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1))
wfivRouteCreateDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteCreateDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteCreateDelete.setDescription("'This value determines whether DECnet is configured on this slot.'")
wfivRouteEnableDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteEnableDisable.setDescription("'This value determines whether DECnet is to startup.'")
wfivRouteState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("notpresent", 4), ("initializing", 3), ("down", 2), ("up", 1))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivRouteState.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteState.setDescription("'This value determines whether DECnet is to startup.'")
wfivRouteBroadcastRouteTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteBroadcastRouteTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteBroadcastRouteTimer.setDescription("'This value determines the maximum time allowed between Routing updates on Ethernet circuits. When this timer expires before a routing update occurs, a routing update is forced. With a standard calculation, Routing also uses this timer to enforce a minimum delay between routing updates. Seconds is a decimal integer in the range 1-65535.'")
wfivRouteRoutingVers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivRouteRoutingVers.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteRoutingVers.setDescription("'This read-only parameter identifies the executor node's Routing version number. The format is the same as for the Network Management version number.'")
wfivRouteMaxAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxAddr.setDescription("'This value represents the largest node number and, therefore, number of nodes that can be known about by the executor node's home area. The number is an integer in the range 1-1023.'")
wfivRouteMaxBdcastNonRouters = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxBdcastNonRouters.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxBdcastNonRouters.setDescription("'This value represents the maximum total number of nonrouters the executor node can have on its broadcast circuits for one slot. The number is an integer in the range 0-1023.'")
wfivRouteMaxBdcastRouters = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxBdcastRouters.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxBdcastRouters.setDescription("'This value represents the maximum total number of routers the executor node can have on its broadcast circuits for one slot. The number is an integer in the range 0-1023.'")
wfivRouteMaxCircuits = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxCircuits.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxCircuits.setDescription("'This value represents the maximum number of Routing circuits that the executor node can know about. The number is decimal in the range 1-65535. Wellfleet limits this to 1024'")
wfivRouteMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022)).clone(1022)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxCost.setDescription("'This value represents the maximum total path cost allowed from the executor to any node within an area. The path cost is the sum of the circuit costs along a path between two nodes. This parameter defines the point where the executor node's Routing decision algorithm declares another node unreachable because the cost of the least costly path to the other node is excessive. For correct operation, this parameter must not be less than the maximum path cost of the network. The MAXIMUM COST number is decimal in the range 1-1022.'")
wfivRouteMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxHops.setDescription("'This value represents the maximum number of routing hops allowable from the executor to any other reachable node within an area. (A hop is the logical distance over a circuit between two adjacent nodes.) This parameter defines the point where the executor node's Routing decision algorithm declares another node unreachable because the length of the shortest path between the two nodes is too long. For correct operation, this parameter must not be less than the network diameter. (The network diameter is the reachability distance between the two nodes of the network having the greatest reachability distance, where reachability distance is the length the shortest path between a given pair of nodes.) The MAXIMUM HOPS number is decimal in the range 1-30.'")
wfivRouteMaxVisits = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxVisits.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxVisits.setDescription("'This value represents the maximum number of nodes a message coming into the executor node can have visited. If the message is not for this node and the MAXIMUM VISITS number is exceeded, the message is discarded. The MAXIMUM VISITS parameter defines the point where the packet lifetime control algorithm discards a packet that has traversed too many nodes. For correct operation, this parameter must not be less than the maximum path length of the network. (The maximum path length is the routing distance between the two nodes of the network having the greatest routing distance, where routing distance is the length of the least costly path between a given pair of nodes.) The MAXIMUM VISITS number is decimal in the range MAXIMUM HOPS to 63.'")
wfivRouteAreaMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1022)).clone(1022)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteAreaMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteAreaMaxCost.setDescription("'This value represents the maximum total path cost allowed from the executor to any other level 2 routing node. The AREA MAXIMUM COST number is decimal in the range 1-1022. This parameter is only applicable if the executor node is of type AREA.'")
wfivRouteAreaMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteAreaMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteAreaMaxHops.setDescription("'This value represents the maximum number of routing hops allowable from the executor to any other level 2 routing node. The AREA MAXIMUM HOPS number is decimal in the range 1-30.This parameter is only applicable if the executor node is of type AREA.'")
wfivRouteMaxArea = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(63)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteMaxArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteMaxArea.setDescription("'This value represents the largest area number and, therefore, number of areas that can be known about by the executor node's Routing. This parameter is only applicable if the executor node is of type AREA. The number is an integer in the range 1-63.'")
wfivRouteType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("area", 3), ("routingiv", 4), ("nonroutingiv", 5))).clone('area')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteType.setDescription("'This parameter indicates the type of the executor node. The node-type is one of the following: ROUTING III NONROUTING III ROUTING IV NONROUTING IV AREA A routing node has full routing capability. A nonrouting node contains a subset of the Routing modules. The III and IV indicate the DNA phase of the node. Nonrouting nodes can deliver and receive packets to and from any node, but cannot route packets from other nodes through to other nodes. An area node routes between areas. Refer to the Routing specification for details. For adjacent nodes, this is a read-only parameter that indicates the type of the reachable adjacent node. NOTE: The ROUTING III and NONROUTING III values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155)'")
wfivRouteNumAdjs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivRouteNumAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteNumAdjs.setDescription('This value represents the total number of adjacencies learned by the router.')
wfivRouteNumLvl1Rts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivRouteNumLvl1Rts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteNumLvl1Rts.setDescription('This value represents the total number of Level 1 Routes learned by the router.')
wfivRouteNumAreas = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivRouteNumAreas.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteNumAreas.setDescription('This value represents the total number of Areas learned by the router.')
wfivRouteLevel1Area = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivRouteLevel1Area.setStatus('mandatory')
if mibBuilder.loadTexts: wfivRouteLevel1Area.setDescription('DECnet Phase IV area number for all circuits if this is a LEVEL 1 ONLY router. Put here for site manager convenience.')
wfivTriggeredUpdates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivTriggeredUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTriggeredUpdates.setDescription('This will turn triggered updates on or off, Undernormal conditions this should always be on.')
wfivTriggeredInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivTriggeredInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTriggeredInterval.setDescription('This is the time interval between triggered updates, this should always be 1 (second) unless you are told by Nortel to set this differently.')
wfivCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2), )
if mibBuilder.loadTexts: wfivCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitTable.setDescription("' Table of DECnet Circuit Configuration and Counter Records'")
wfivCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivCircuitID"))
if mibBuilder.loadTexts: wfivCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitEntry.setDescription("'Parameters information about all circuits currently known. NOTE: depending on the type of object being querried (e.g., a level 1 vs. a level 2 router or end system) some variables may not be present.'")
wfivCircuitCreateDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitCreateDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCreateDelete.setDescription("'This value determines whether the circuit is configured'")
wfivCircuitEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitEnableDisable.setDescription("'This value represents the circuit's Network Management operational state. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.'")
wfivCircuitCommonState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1))).clone(namedValues=NamedValues(("notpresent", 4), ("initializing", 3), ("down", 2), ("up", 1))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCommonState.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCommonState.setDescription("'This value represents the circuit's operational state.'")
wfivCircuitArea = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitArea.setDescription("'DECnet Phase IV area number for this circuit.'")
wfivCircuitNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitNodeid.setDescription("'DECnet Phase IV node address for this circuit.'")
wfivCircuitNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitNodeAddr.setDescription("'The address of the adjacent node.'")
wfivCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitID.setDescription("'A unique value for each known circuit.'")
wfivCircuitCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6, 15, 100, 101, 102, 103, 104))).clone(namedValues=NamedValues(("sync", 1), ("x25", 4), ("ethernet", 6), ("fddi", 15), ("smds", 100), ("fr", 101), ("atm", 102), ("ring", 103), ("ppp", 104)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCommonType.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCommonType.setDescription("'Represents the type of the circuit. For X.25 circuits, the value must be set to X25. For DDCMP and Ethernet circuits it is read only and is the same value as the protocol of the associated line. NOTE: Values 1 - 5 are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.'")
wfivCircuitExecCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitExecCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitExecCost.setDescription("'This value represents the Routing cost of the circuit. Routing routes messages along the path between two nodes having the smallest cost. The cost is a decimal integer in the range 1-63.'")
wfivCircuitExecHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitExecHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitExecHelloTimer.setDescription("'This value determines the frequency of Routing Hello (T3) messages sent to the adjacent node on the circuit. Seconds is a decimal integer in the range 1-8191.'")
wfivCircuitDesigRouterNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitDesigRouterNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitDesigRouterNodeAddr.setDescription("'This value is the address of the designated router.'")
wfivCircuitMaxRouters = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitMaxRouters.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitMaxRouters.setDescription("'NR -This parameter is the maximum number of routers (including the executor itself) allowed on the circuit by Routing for circuits that are owned by the executor node. Number is a decimal integer in the range 1-33.'")
wfivCircuitRouterPri = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitRouterPri.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitRouterPri.setDescription("'This parameter is the priority that this router is to have in the selection of designated router for the circuit on circuits that are owned by the executor node. Number is a decimal integer in the range 0-127. The default value is 64.'")
wfivCircuitCountAgedPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountAgedPktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountAgedPktLoss.setDescription("'Aged packet loss.'")
wfivCircuitCountNodeUnrPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountNodeUnrPktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountNodeUnrPktLoss.setDescription("'Node unreachable packet loss.'")
wfivCircuitCountOutRngePktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountOutRngePktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountOutRngePktLoss.setDescription("'Node out-of-range packet loss.'")
wfivCircuitCountOverSzePktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountOverSzePktLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountOverSzePktLoss.setDescription("'Oversized packet loss.'")
wfivCircuitCountPacketFmtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountPacketFmtErr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountPacketFmtErr.setDescription("'Packet format errors.'")
wfivCircuitCountPtlRteUpdtLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountPtlRteUpdtLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountPtlRteUpdtLoss.setDescription("'Partial routing update loss.'")
wfivCircuitCountTransitPksRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountTransitPksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountTransitPksRecd.setDescription("'Transit packets Received. This value is stored internally as a 32 bit value.'")
wfivCircuitCountTransitPkSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountTransitPkSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountTransitPkSent.setDescription("'Transit packets sent. This value is stored internally as a 32 bit value.'")
wfivCircuitCountRtHelloSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountRtHelloSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountRtHelloSent.setDescription("' Router Hellos Sent'")
wfivCircuitCountRtHelloRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountRtHelloRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountRtHelloRcvd.setDescription("' Router Hellos Received'")
wfivCircuitCountHelloSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountHelloSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountHelloSent.setDescription("' Endnode Hellos Sent'")
wfivCircuitCountHelloRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountHelloRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountHelloRcvd.setDescription("' Endnode Hellos Received'")
wfivCircuitCountL1UpdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountL1UpdSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountL1UpdSent.setDescription("' Level 1 Routing Updates Sent'")
wfivCircuitCountL1UpdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountL1UpdRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountL1UpdRcvd.setDescription("' Level 1 Routing Updates Received'")
wfivCircuitCountAreaUpdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountAreaUpdSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountAreaUpdSent.setDescription("' Area Routing Updates Sent'")
wfivCircuitCountAreaUpdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountAreaUpdRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountAreaUpdRcvd.setDescription("' Area Routing Updates Received'")
wfivCircuitCountDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitCountDropped.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitCountDropped.setDescription("' Dropped Packets '")
wfivCircuitAllEndnodesMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitAllEndnodesMac.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitAllEndnodesMac.setDescription("'This parameter can be used to assign the AllEndnodes multicast MAC address value for use over WAN media (e.g. Frame Relay).'")
wfivCircuitAllRoutersMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitAllRoutersMac.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitAllRoutersMac.setDescription("'This parameter can be used to assign the AllRouters multicast MAC address value for use over WAN media (e.g. Frame Relay).'")
wfivCircuitAllAreaRoutersMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitAllAreaRoutersMac.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitAllAreaRoutersMac.setDescription("'This parameter can be used to assign the AllAreaRouters multicast MAC address value for use over WAN media (e.g. Frame Relay).'")
wfivCircuitHelloEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitHelloEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitHelloEnableDisable.setDescription("' This parameter is used to disable to sending of Hellos to Endnodes. It would be used in conjunction with Static Adjacencies to limit the amount of data passed over a WAN link (e.g. Frame Relay).'")
wfivCircuitRtHelloEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitRtHelloEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitRtHelloEnableDisable.setDescription("' This parameter is used to disable to sending of Hellos to Routers. It would be used in conjunction with Static Adjacencies to limit the amount of data passed over a WAN link (e.g. Frame Relay).'")
wfivCircuitL1UpdateEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitL1UpdateEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitL1UpdateEnableDisable.setDescription("' This parameter is used to disable to sending of Level 1 topology updates. It would be used in conjunction with Static Adjacencies to limit the amount of data passed over a WAN link (e.g. Frame Relay).'")
wfivCircuitAllEndnodesMacInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitAllEndnodesMacInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitAllEndnodesMacInUse.setDescription("'This parameter displays the AllEndnodes multicast MAC address value in use over WAN media (e.g. Frame Relay).'")
wfivCircuitAllRoutersMacInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitAllRoutersMacInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitAllRoutersMacInUse.setDescription("'This parameter displays the AllRouters multicast MAC address value in use over WAN media (e.g. Frame Relay).'")
wfivCircuitAllAreaRoutersMacInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivCircuitAllAreaRoutersMacInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitAllAreaRoutersMacInUse.setDescription("'This parameter displays the AllAreaRouters multicast MAC address value for use over WAN media (e.g. Frame Relay).'")
wfivCircuitL2UpdateDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitL2UpdateDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitL2UpdateDisable.setDescription("' This parameter is used to disable to sending of Level 2 topology updates. It would be used in conjunction with Static Adjacencies and Static Routes to limit the amount of data passed over a WANl link (e.g. Frame Relay).'")
wfivCircuitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level2", 1), ("only", 2))).clone('level2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivCircuitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfivCircuitLevel.setDescription("' This parameter is used to indicate at the circuit level whether the routing is LEVEL 1 only, or LEVEL 1 and LEVEL 2 routing.'")
wfivLevel1RouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3), )
if mibBuilder.loadTexts: wfivLevel1RouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteTable.setDescription("' Table of Level 1 Routing Table Entries'")
wfivLevel1RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivLevel1AreaId"), (0, "Wellfleet-DECNET-MIB", "wfivLevel1NodeId"))
if mibBuilder.loadTexts: wfivLevel1RouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteEntry.setDescription("'A Record in the Level 1 Routing Table'")
wfivLevel1AreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1AreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1AreaId.setDescription("'Area Id for this node'")
wfivLevel1NodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1NodeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1NodeId.setDescription("'Node Id for this node'")
wfivLevel1RouteNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1RouteNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteNodeAddr.setDescription("'This value is the address of the node about which routing information is contained in this level 1 routing table.'")
wfivLevel1RouteCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1RouteCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteCircuitID.setDescription("'This READ_ONLY parameter identifies the circuit used to get to a remote node. Circuit-id is an id-string. This parameter can be used when displaying a list of nodes to indicate that the display is to be restricted to those nodes adjacent on the specified circuit.'")
wfivLevel1RouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1RouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteCost.setDescription("'This READ_ONLY parameter represents the total cost over the current path to the destination node. Cost is a positive integer value associated with using a circuit. Routing routes messages (data) along the path between two nodes with the smallest cost. COST is kept on a remote node basis.'")
wfivLevel1RouteHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1RouteHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteHops.setDescription("'This READ_ONLY parameter represents the number of hops over to a destination node. A hop is Routing value representing the logical distance between two nodes in a network. HOPS is kept on a remote node basis.'")
wfivLevel1RouteNextNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivLevel1RouteNextNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteNextNode.setDescription("'This READ_ONLY value indicates the next node on the circuit used to get to the node under scrutiny (next hop).'")
wfivLevel1RouteDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivLevel1RouteDynamic.setStatus('mandatory')
if mibBuilder.loadTexts: wfivLevel1RouteDynamic.setDescription('This READ_WRITE parameter will indicate the type of Level 1 route, whether it is a Dynamic or a Static route')
wfivAreaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4), )
if mibBuilder.loadTexts: wfivAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaTable.setDescription("'Table of Area Routing Table Entries'")
wfivAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivAreaNum"))
if mibBuilder.loadTexts: wfivAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaEntry.setDescription("'The area routing information.'")
wfivAreaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAreaNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaNum.setDescription("'This value indicates the area number of this entry.'")
wfivAreaState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("reachable", 4), ("unreachable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAreaState.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaState.setDescription("'This value indicates the state of the area'")
wfivAreaCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAreaCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaCost.setDescription("'The total cost over the current path to the destination area. Cost is a value associated with using a circuit. Routing routes messages (data) along the path between 2 areas with the smallest cost.'")
wfivAreaHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAreaHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaHops.setDescription("'The number of hops to a destination area. A hop is the routing value representing the logical distance between two areas in network.'")
wfivAreaCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAreaCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaCircuitID.setDescription("'The circuit used to get to the remote area'")
wfivAreaNextNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAreaNextNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaNextNode.setDescription("'The next node on the circuit used to get to the area under scrutiny.'")
wfivAreaRouteDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivAreaRouteDynamic.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAreaRouteDynamic.setDescription('This READ_WRITE parameter will indicate the type of Level 2 route, whether it is a Dynamic or a Static route')
wfivAdjTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5), )
if mibBuilder.loadTexts: wfivAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjTable.setDescription('Adjacency Table')
wfivAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivAdjIndex"))
if mibBuilder.loadTexts: wfivAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjEntry.setDescription("' Adjacency Table - the real index is the adjacency index'")
wfivAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjIndex.setDescription("'Index in the Adjacency Table'")
wfivAdjNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjNodeAddr.setDescription("'The address of the adjacent node.'")
wfivAdjBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjBlockSize.setDescription("'This READ_ONLY parameter is the block size that was negotiated with the adjacent Routing layer during Routing initialization over a particular circuit. It includes the routing header, but excludes the data link header. This parameter is qualified by ADJACENT NODE.'")
wfivAdjListenTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjListenTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjListenTimer.setDescription("'This READ_ONLY value determines the maximum time allowed to elapse before Routing receives some message (either a Hello message or a user message) from the adjacent node on the circuit. It was agreed during Routing initialization with the adjacent Routing layer. Seconds is a decimal integer in the range 1-65535. This parameter is qualified by ADJACENT NODE.'")
wfivAdjCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjCircuitID.setDescription("'A unique value for each known circuit.'")
wfivAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjType.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjType.setDescription("'This parameter indicates the type of adjacency. For adjacent nodes, this is a READ_ONLY parameter that indicates the type of the reachable adjacent node. NOTE: The ROUTING III and NONROUTING III values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155) ROUTING III (1), NONROUTING III (2), AREA (3), ROUTING IV (4), NONROUTING IV (5)'")
wfivAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("init", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjState.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjState.setDescription("'This value indicates the state of a router adjacency. On adjacencies over a circuit of type (wfivCircuitCommonType) Ethernet, CI, or FDDI, with an adjacent node of type (wfivAdjType) ROUTING IV or AREA, this variable is the state of the Ethernet Initialization Layer for this adjacency, and can have values INITIALIZING or UP. (See Section 9.1.1 of DECnet Phase IV Routing Layer Functional Specification.) On adjacencies over a circuit of type (wfivCircuitCommonType) Ethernet, CI, or FDDI, with an adjacent node of type (wfivAdjType) NONROUTING IV, this varaible will always take on the value UP. On adjacencies over a circuit of type (wfivCircuitCommonType) DDCMP POINT, DDCMP CONTROL, DDCMP TRIBUTARY, DDCMP DMC, or X.25, this variable is the state of the Routing Layer Initialization Circuit State. (See section 7.3, ibid.) It can have values between RUN and HALT. On adjacencies over a circuit of type (wfivCircuitCommonType) OTHER, this variable may be used in a manner consistent with the Initialization Layer used on that circuit. INITIALIZING (1), -- Ethernet one-way UP (2), -- Ethernet two-way RUN (3), -- The eight DDCMP/X.25 states CIRCUIT REJECTED (4), DATA LINK START (5), ROUTING LAYER INITIALIZE (6), ROUTING LAYER VERIFY (7), ROUTING LAYER COMPLETE (8), OFF (9), HALT (10)'")
wfivAdjPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjPriority.setDescription("'Priority assigned by the adjacent node for this circuit.'")
wfivAdjClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAdjClass.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAdjClass.setDescription("'Specifies whether this adjacency is Static or Dynamic'")
wfivTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6), )
if mibBuilder.loadTexts: wfivTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterTable.setDescription('DECNET Traffic Filters')
wfivTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivTrafficFilterCircuit"), (0, "Wellfleet-DECNET-MIB", "wfivTrafficFilterRuleNumber"), (0, "Wellfleet-DECNET-MIB", "wfivTrafficFilterFragment"))
if mibBuilder.loadTexts: wfivTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterEntry.setDescription('An entry in WfivTrafficFilterTable.')
wfivTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivTrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfivTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivTrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfivTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfivTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfivTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterDefinition.setDescription('The filter rule definition.')
wfivTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterReserved.setDescription('Reserved field.')
wfivTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterCircuit.setDescription('The ID of the Circuit to which the filter is applied.')
wfivTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfivTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfivTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfivTrafficFilterName.setDescription('name of the rule number')
wfivStaticAdjTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7), )
if mibBuilder.loadTexts: wfivStaticAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjTable.setDescription('Static Adjacency Table')
wfivStaticAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivStaticAdjCircuitID"), (0, "Wellfleet-DECNET-MIB", "wfivStaticAdjArea"), (0, "Wellfleet-DECNET-MIB", "wfivStaticAdjNodeid"))
if mibBuilder.loadTexts: wfivStaticAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjEntry.setDescription("' Static Adjacency Table '")
wfivStaticAdjCreateDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticAdjCreateDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjCreateDelete.setDescription("'This value determines whether the static adjacency is configured'")
wfivStaticAdjEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticAdjEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjEnableDisable.setDescription("'This value determines whether the static adjacency is active '")
wfivStaticAdjArea = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticAdjArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjArea.setDescription("'DECnet Phase IV area number for this static Adjacency.'")
wfivStaticAdjNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticAdjNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjNodeid.setDescription("'DECnet Phase IV node address for this static adjacency.'")
wfivStaticAdjCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticAdjCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjCircuitID.setDescription("'The circuit used for this static adjacency.'")
wfivStaticAdjNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticAdjNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjNodeAddr.setDescription("'The address of the adjacent node in display format.'")
wfivStaticAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("area", 3), ("routingiv", 4), ("nonroutingiv", 5))).clone('area')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticAdjType.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjType.setDescription("' Specifies whether the static adjacency is to a router or end station.'")
wfivStaticAdjPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticAdjPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjPriority.setDescription("' Specifies the priority of the static adjacency if it's a router.'")
wfivStaticAdjDestMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 7, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticAdjDestMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticAdjDestMACAddr.setDescription("' Specifies the destination MAC address of the Static Adjacency if the circuit type is ATM, Frame Relay or SMDS.'")
wfivStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8), )
if mibBuilder.loadTexts: wfivStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteTable.setDescription('This table contains the list of all static routes')
wfivStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1), ).setIndexNames((0, "Wellfleet-DECNET-MIB", "wfivStaticRouteAreaId"), (0, "Wellfleet-DECNET-MIB", "wfivStaticRouteNodeId"), (0, "Wellfleet-DECNET-MIB", "wfivStaticRouteNextHopAreaId"), (0, "Wellfleet-DECNET-MIB", "wfivStaticRouteNextHopNodeId"))
if mibBuilder.loadTexts: wfivStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteEntry.setDescription('This is the Static Route Entry for the Static Route Table')
wfivStaticRouteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticRouteDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteDelete.setDescription('Create/Delete parameter for DECnet IV Static Route Record')
wfivStaticRouteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticRouteDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteDisable.setDescription('Enable/Disable parameter for this Static Route')
wfivStaticRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l1", 1), ("l2", 2))).clone('l2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteType.setDescription('This parameter specifies whether this static route is for Level 1 or Level 2 type of routing')
wfivStaticRouteAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticRouteAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteAreaId.setDescription('This specifies the area address of the static route. It is also a part of the inst_id')
wfivStaticRouteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticRouteNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteNodeId.setDescription('This specifies the node address of the static route. It is also a part of the inst_id')
wfivStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfivStaticRouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteCost.setDescription('This value is the cost to get to this address')
wfivStaticRouteNextHopAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticRouteNextHopAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteNextHopAreaId.setDescription('This is the area address of the next hop router that all data destined to wfivStaticRouteAreaId will be forwarded to')
wfivStaticRouteNextHopNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivStaticRouteNextHopNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfivStaticRouteNextHopNodeId.setDescription('This is the node address of the next hop router that all data destined to wfivStaticRouteAddr will be forwarded to')
wfivDecnetTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 9))
wfivDecnetTransPhase5Pkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivDecnetTransPhase5Pkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivDecnetTransPhase5Pkts.setDescription('Number of successfully translated Phase 5 (CLNP) packets')
wfivDecnetTransMtuFail = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivDecnetTransMtuFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfivDecnetTransMtuFail.setDescription('Number of times Phase 5 translation failed because the packet was larger than the Phase 4 MTU size.')
wfivDecnetTransUnrFail = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivDecnetTransUnrFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfivDecnetTransUnrFail.setDescription('Number of times Phase 4 failed to find a route to the destination.')
wfivDecnetTransNumPhase5Es = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivDecnetTransNumPhase5Es.setStatus('mandatory')
if mibBuilder.loadTexts: wfivDecnetTransNumPhase5Es.setDescription('Number of Phase 5 ES Adjacencies announced by the Phase 5 (OSI) router.')
wfivAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10))
wfivAggrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrInPkts.setDescription('The total number of packets received by the DECnet re-director')
wfivAggrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrOutPkts.setDescription('The total number of packets sent by the DECnet re-director')
wfivAggrFormatErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrFormatErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrFormatErrs.setDescription('The total number of packets received with format errors')
wfivAggrDestUnreachables = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrDestUnreachables.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrDestUnreachables.setDescription('The total number of packets received whose destinations were unreachable')
wfivAggrRangeErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrRangeErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrRangeErrs.setDescription('The total number of packet received with nodes out of range')
wfivAggrOversizedPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrOversizedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrOversizedPkts.setDescription('The total number of oversized packets received.')
wfivAggrAgedPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrAgedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrAgedPkts.setDescription('The total number of packets aged out')
wfivAggrFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 2, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfivAggrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfivAggrFwdPkts.setDescription('The total number of packets forwarded')
mibBuilder.exportSymbols("Wellfleet-DECNET-MIB", wfivCircuitRtHelloEnableDisable=wfivCircuitRtHelloEnableDisable, wfivLevel1RouteCost=wfivLevel1RouteCost, wfivAdjIndex=wfivAdjIndex, wfivCircuitCountDropped=wfivCircuitCountDropped, wfivRouteMaxArea=wfivRouteMaxArea, wfivRouteGroup=wfivRouteGroup, wfivCircuitCountNodeUnrPktLoss=wfivCircuitCountNodeUnrPktLoss, wfivRouteMaxHops=wfivRouteMaxHops, wfivRouteMaxVisits=wfivRouteMaxVisits, wfivCircuitHelloEnableDisable=wfivCircuitHelloEnableDisable, wfivRouteEnableDisable=wfivRouteEnableDisable, wfivLevel1AreaId=wfivLevel1AreaId, wfivAdjListenTimer=wfivAdjListenTimer, wfivCircuitCountAgedPktLoss=wfivCircuitCountAgedPktLoss, wfivLevel1NodeId=wfivLevel1NodeId, wfivTrafficFilterStatus=wfivTrafficFilterStatus, wfivStaticRouteAreaId=wfivStaticRouteAreaId, wfivAreaHops=wfivAreaHops, wfivRouteMaxCost=wfivRouteMaxCost, wfivStaticAdjCreateDelete=wfivStaticAdjCreateDelete, wfivStaticRouteNextHopAreaId=wfivStaticRouteNextHopAreaId, wfivStaticAdjNodeid=wfivStaticAdjNodeid, wfivCircuitCountL1UpdSent=wfivCircuitCountL1UpdSent, wfivTrafficFilterCounter=wfivTrafficFilterCounter, wfivCircuitCountPacketFmtErr=wfivCircuitCountPacketFmtErr, wfivAreaNum=wfivAreaNum, wfivStaticAdjTable=wfivStaticAdjTable, wfivStaticAdjDestMACAddr=wfivStaticAdjDestMACAddr, wfivCircuitAllRoutersMacInUse=wfivCircuitAllRoutersMacInUse, wfivCircuitCommonState=wfivCircuitCommonState, wfivStaticRouteType=wfivStaticRouteType, wfivTrafficFilterDefinition=wfivTrafficFilterDefinition, wfivAggrDestUnreachables=wfivAggrDestUnreachables, wfivStaticRouteDisable=wfivStaticRouteDisable, wfivDecnetTransUnrFail=wfivDecnetTransUnrFail, wfivTrafficFilterCreate=wfivTrafficFilterCreate, wfivTrafficFilterEntry=wfivTrafficFilterEntry, wfivAdjState=wfivAdjState, wfivLevel1RouteCircuitID=wfivLevel1RouteCircuitID, wfivTrafficFilterReserved=wfivTrafficFilterReserved, wfivAreaEntry=wfivAreaEntry, wfivRouteBroadcastRouteTimer=wfivRouteBroadcastRouteTimer, wfivAdjCircuitID=wfivAdjCircuitID, wfivStaticRouteEntry=wfivStaticRouteEntry, wfivRouteCreateDelete=wfivRouteCreateDelete, wfivTrafficFilterName=wfivTrafficFilterName, wfivCircuitAllRoutersMac=wfivCircuitAllRoutersMac, wfivStaticAdjArea=wfivStaticAdjArea, wfivTrafficFilterTable=wfivTrafficFilterTable, wfivTrafficFilterEnable=wfivTrafficFilterEnable, wfivRouteType=wfivRouteType, wfivCircuitCountAreaUpdRcvd=wfivCircuitCountAreaUpdRcvd, wfivCircuitLevel=wfivCircuitLevel, wfivLevel1RouteDynamic=wfivLevel1RouteDynamic, wfivRouteNumAdjs=wfivRouteNumAdjs, wfivTriggeredUpdates=wfivTriggeredUpdates, wfivCircuitEntry=wfivCircuitEntry, wfivAggrOutPkts=wfivAggrOutPkts, wfivAdjType=wfivAdjType, wfivAggrRangeErrs=wfivAggrRangeErrs, wfivCircuitArea=wfivCircuitArea, wfivCircuitCountL1UpdRcvd=wfivCircuitCountL1UpdRcvd, wfivRouteLevel1Area=wfivRouteLevel1Area, wfivAreaTable=wfivAreaTable, wfivRouteAreaMaxHops=wfivRouteAreaMaxHops, wfivStaticAdjType=wfivStaticAdjType, wfivCircuitMaxRouters=wfivCircuitMaxRouters, wfivLevel1RouteEntry=wfivLevel1RouteEntry, wfivStaticRouteNodeId=wfivStaticRouteNodeId, wfivAreaCost=wfivAreaCost, wfivCircuitCountRtHelloSent=wfivCircuitCountRtHelloSent, wfivCircuitExecCost=wfivCircuitExecCost, wfivAggrOversizedPkts=wfivAggrOversizedPkts, wfivStaticAdjEnableDisable=wfivStaticAdjEnableDisable, wfivCircuitTable=wfivCircuitTable, wfivAreaCircuitID=wfivAreaCircuitID, wfivStaticAdjPriority=wfivStaticAdjPriority, wfivCircuitID=wfivCircuitID, wfivStaticRouteNextHopNodeId=wfivStaticRouteNextHopNodeId, wfivCircuitCommonType=wfivCircuitCommonType, wfivTriggeredInterval=wfivTriggeredInterval, wfivAreaNextNode=wfivAreaNextNode, wfivRouteNumLvl1Rts=wfivRouteNumLvl1Rts, wfivLevel1RouteNextNode=wfivLevel1RouteNextNode, wfivLevel1RouteHops=wfivLevel1RouteHops, wfivAdjEntry=wfivAdjEntry, wfivAggrAgedPkts=wfivAggrAgedPkts, wfivStaticAdjEntry=wfivStaticAdjEntry, wfivCircuitAllAreaRoutersMac=wfivCircuitAllAreaRoutersMac, wfivAggrInPkts=wfivAggrInPkts, wfivCircuitCountPtlRteUpdtLoss=wfivCircuitCountPtlRteUpdtLoss, wfivTrafficFilterFragment=wfivTrafficFilterFragment, wfivCircuitExecHelloTimer=wfivCircuitExecHelloTimer, wfivCircuitCreateDelete=wfivCircuitCreateDelete, wfivRouteNumAreas=wfivRouteNumAreas, wfivDecnetTransPhase5Pkts=wfivDecnetTransPhase5Pkts, wfivStaticRouteCost=wfivStaticRouteCost, wfivRouteMaxAddr=wfivRouteMaxAddr, wfivAreaState=wfivAreaState, wfivCircuitL2UpdateDisable=wfivCircuitL2UpdateDisable, wfivCircuitCountTransitPksRecd=wfivCircuitCountTransitPksRecd, wfivCircuitL1UpdateEnableDisable=wfivCircuitL1UpdateEnableDisable, wfivRouteMaxBdcastRouters=wfivRouteMaxBdcastRouters, wfivDecnetTransNumPhase5Es=wfivDecnetTransNumPhase5Es, wfivCircuitCountHelloSent=wfivCircuitCountHelloSent, wfivCircuitRouterPri=wfivCircuitRouterPri, wfivCircuitCountOverSzePktLoss=wfivCircuitCountOverSzePktLoss, wfivDecnetTrans=wfivDecnetTrans, wfivStaticRouteTable=wfivStaticRouteTable, wfivAdjNodeAddr=wfivAdjNodeAddr, wfivCircuitDesigRouterNodeAddr=wfivCircuitDesigRouterNodeAddr, wfivRouteMaxCircuits=wfivRouteMaxCircuits, wfivDecnetTransMtuFail=wfivDecnetTransMtuFail, wfivTrafficFilterRuleNumber=wfivTrafficFilterRuleNumber, wfivRouteRoutingVers=wfivRouteRoutingVers, wfivRouteAreaMaxCost=wfivRouteAreaMaxCost, wfivCircuitAllAreaRoutersMacInUse=wfivCircuitAllAreaRoutersMacInUse, wfivAdjBlockSize=wfivAdjBlockSize, wfivAggrStats=wfivAggrStats, wfivStaticRouteDelete=wfivStaticRouteDelete, wfivAggrFwdPkts=wfivAggrFwdPkts, wfivCircuitEnableDisable=wfivCircuitEnableDisable, wfivCircuitNodeAddr=wfivCircuitNodeAddr, wfivCircuitCountRtHelloRcvd=wfivCircuitCountRtHelloRcvd, wfivCircuitCountHelloRcvd=wfivCircuitCountHelloRcvd, wfivCircuitAllEndnodesMacInUse=wfivCircuitAllEndnodesMacInUse, wfivAdjClass=wfivAdjClass, wfivCircuitCountTransitPkSent=wfivCircuitCountTransitPkSent, wfivAreaRouteDynamic=wfivAreaRouteDynamic, wfivRouteState=wfivRouteState, wfivCircuitAllEndnodesMac=wfivCircuitAllEndnodesMac, wfivLevel1RouteTable=wfivLevel1RouteTable, wfivStaticAdjCircuitID=wfivStaticAdjCircuitID, wfivStaticAdjNodeAddr=wfivStaticAdjNodeAddr, wfivRouteMaxBdcastNonRouters=wfivRouteMaxBdcastNonRouters, wfivCircuitCountOutRngePktLoss=wfivCircuitCountOutRngePktLoss, wfivAggrFormatErrs=wfivAggrFormatErrs, wfivCircuitCountAreaUpdSent=wfivCircuitCountAreaUpdSent, wfivLevel1RouteNodeAddr=wfivLevel1RouteNodeAddr, wfivAdjTable=wfivAdjTable, wfivCircuitNodeid=wfivCircuitNodeid, wfivTrafficFilterCircuit=wfivTrafficFilterCircuit, wfivAdjPriority=wfivAdjPriority)
