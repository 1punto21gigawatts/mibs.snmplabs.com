#
# PySNMP MIB module CISCO-PSD-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PSD-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, TimeTicks, Unsigned32, Counter32, Gauge32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Integer32, iso, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Unsigned32", "Counter32", "Gauge32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Integer32", "iso", "Counter64", "Bits")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
ciscoPsdClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 495))
ciscoPsdClientMIB.setRevisions(('2005-08-24 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPsdClientMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPsdClientMIB.setLastUpdated('200508241800Z')
if mibBuilder.loadTexts: ciscoPsdClientMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoPsdClientMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: ciscoPsdClientMIB.setDescription("This MIB module manages the client side functionality of the Persistent Storage Device(PSD). This MIB instrumentation is for configuring data-store(PSD client) feature on GGSN and monitoring the state of the PSD server(up/down/full). The Cisco Persistent Storage Device(PSD) is an extension to existing storage on the Cisco Content Services Gateway(CSG). The GGSN currently allows sending of the CDRs to an active CG, while allowing up to two standby CG's to be configured. When all the configured CG's become unavailable, the CDRs get stored at the GGSN and start using up GGSN resources such as memory. As the amount of memory is limited on GGSN and failure of GGSN shall lead to losing these stored CDRs. Using PSD as temporary storage, shall avoid losses due to these problems. When all the configured CG's are unavailable, GGSN needs to backup the live closed CDR's to a PSD. When any of the CG's shall become available, GGSN shall retrieve the stored CDR's automatically from the PSD and forwards them to the active CG. PSD supports the charging protocol(GTP'), version 0 with a few private extensions, which is used to facilitate the required functionality via UDP. Acronyms and terms: CDR Call Detail Record CID Charging Identification CG Charging Gateway CGF Charging Gateway Functionality DS Data-Store ETSI European Telecommunications Standards Institute Ga Name of the interface between SGSN/GGSN and CG Gi Name of the interface between GGSN and PDN Gn Name of the interface between GGSN and SGSN G-CDR Gateway GPRS Support Node-Call Detail Record GGSN Gateway GPRS Support Node GPRS General Packet Radio Service GSM Global System for Mobile communication GTP GPRS Tunneling Protocol GTP' GTP enhanced for charging IE Information Element MS Mobile Station PDN Packet Data Network PDP Packet Data Protocol SGSN Serving GPRS support Node TOS Type of Service. PSD Persistence Storage Device.")
ciscoPsdClientMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 0))
ciscoPsdClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 1))
ciscoPsdClientStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 1))
ciscoPsdClientNotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 2))
ciscoPsdClientConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3))
ciscoPsdClientNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 4))
ciscoPsdClientMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 2))
cPsdClientDSWriteReq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPsdClientDSWriteReq.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSWriteReq.setDescription('The number of Data Record Transfer request (for write) messages sent to the PSD server. This counter is incremented when the FIFO write request is sent to the PSD server from the client.')
cPsdClientDSReadReq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPsdClientDSReadReq.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSReadReq.setDescription('The number of Data Record Transfer request (for read) messages sent to PSD server. This counter is incremented when the FIFO read request message is sent to PSD server.')
cPsdClientDSRdWrRetrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPsdClientDSRdWrRetrans.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSRdWrRetrans.setDescription('The number of Data Record Transfer Request (retransmission) messages sent to the PSD server. The PSD does not differentiate between a retransmission and original request. So, this counter together with the above two counters cPsdClientDSReadReq/ cPsdClientDSWriteReq can be used to tally the number of messages received by the PSD client. This counter is incremented when the FIFO read/write retransmission messages are sent to PSD server.')
cPsdClientDSDiskFullTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPsdClientDSDiskFullTrans.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSDiskFullTrans.setDescription("The number of state transitions made by the PSD from state 'disk available' to 'disk full'. This counter is incremented when client receives the disk full indication from PSD server.")
cPsdClientNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cPsdClientNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cPsdClientNotifEnable.setDescription("This object specifies whether the agent should generate the notifications defined in this MIB module. If the value of this object is 'true' it enables the device to generate the notifications. If the value of this object is 'false' it disables the device from generating the notifications.")
cPsdClientDSTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 1), )
if mibBuilder.loadTexts: cPsdClientDSTable.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSTable.setDescription('A table consisting of entries for data-store(DS) and auto-retrieval configurations. In order to minimize the performance/memory impact on the PSD client, as well as not to overwhelm the CG with both live CDRs and retrieved CDRs, the maximum retrieval rate from PSD server to GGSN is limited and can be configured by the user.')
cPsdClientDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-PSD-CLIENT-MIB", "cPsdClientDSName"))
if mibBuilder.loadTexts: cPsdClientDSEntry.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSEntry.setDescription('Each entry contains the configuration for auto-retrieval and also maximum retrieval value if auto-retrieval is enabled.')
cPsdClientDSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cPsdClientDSName.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSName.setDescription('This object contains the name of the configured data-store')
cPsdClientDSAutoRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPsdClientDSAutoRetrieve.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSAutoRetrieve.setDescription("This object is used to enable/disable the CDR auto-retrieval functionality. If value of this object is set to 'true', auto-retrieval is enabled. If value of this object is set to 'false', auto-retrieval is disabled.")
cPsdClientDSMaxRetrieve = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000)).clone(60)).setUnits('messages/minute').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPsdClientDSMaxRetrieve.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSMaxRetrieve.setDescription("This object used to specify the maximum retrieval value, when auto retrieve is enabled, i.e when the value of the corresponding instance of cPsdClientDSAutoRetrieve is set to 'true'.")
cPsdClientDSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPsdClientDSRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSRowStatus.setDescription('The status of this conceptual row. This object is used to create a row or delete a existing row in a table.')
cPsdClientDSServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 2), )
if mibBuilder.loadTexts: cPsdClientDSServerTable.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSServerTable.setDescription('The table contains the list of the PSD servers used to write/retrieve the CDRs.')
cPsdClientDSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-PSD-CLIENT-MIB", "cPsdClientDSName"), (0, "CISCO-PSD-CLIENT-MIB", "cPsdClientDSServerAddressType"), (0, "CISCO-PSD-CLIENT-MIB", "cPsdClientDSServerAddress"))
if mibBuilder.loadTexts: cPsdClientDSServerEntry.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSServerEntry.setDescription('This entry contains a description of the PSD server.')
cPsdClientDSServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cPsdClientDSServerAddressType.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSServerAddressType.setDescription('This object indicates the type of Internet address of the PSD server.')
cPsdClientDSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20)))
if mibBuilder.loadTexts: cPsdClientDSServerAddress.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSServerAddress.setDescription('The object specifies the Internet address of the PSD server. The type of address of an instance of this object is determined by the value of the corresponding instance of cPsdClientDSServerAddressType.')
cPsdClientDSRetrieveOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPsdClientDSRetrieveOnly.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSRetrieveOnly.setDescription("The object represents that, the PSD server can be configured either as write/retrievable or as retrievable only. If the value of this object is set to 'true', the PSD server (the value of the corresponding instance of cPsdClientDSServerAddress) shall not be used for writing the CDRs. If the value of this object is set to 'false', the PSD server (the value of the corresponding instance of cPsdClientDSServerAddress) shall be used for writing the CDRs as well as retrieving the CDRs.")
cPsdClientDSServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPsdClientDSServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDSServerRowStatus.setDescription('The status of this conceptual row. This object will create a row or delete a existing row in a table.')
cPsdClientNotifDSServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 4, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cPsdClientNotifDSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cPsdClientNotifDSServerAddrType.setDescription('This object indicates the type of Internet address of the Data-Store server.')
cPsdClientNotifDSServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 495, 1, 4, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cPsdClientNotifDSServerAddress.setStatus('current')
if mibBuilder.loadTexts: cPsdClientNotifDSServerAddress.setDescription('This object specifies the Internet address of the Data-Store server . The type of address of an instance of this object is determined by the value of cPsdClientNotifDSServerAddrType.')
cPsdClientDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 495, 0, 1)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddrType"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddress"))
if mibBuilder.loadTexts: cPsdClientDownNotif.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDownNotif.setDescription('A notification of this type is generated when the PSD server goes DOWN. If the PSD client was in write/retrieving state, then that operation shall be be stopped.')
cPsdClientUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 495, 0, 2)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddrType"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddress"))
if mibBuilder.loadTexts: cPsdClientUpNotif.setStatus('current')
if mibBuilder.loadTexts: cPsdClientUpNotif.setDescription("A notification of this type is generated when the PSD server comes UP. A GTP' path will be created fulfilling all the specific requirements of the PSD interface.")
cPsdClientDiskFullNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 495, 0, 3)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddrType"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddress"))
if mibBuilder.loadTexts: cPsdClientDiskFullNotif.setStatus('current')
if mibBuilder.loadTexts: cPsdClientDiskFullNotif.setDescription("A notification of this type is generated when the PSD server's disk become full. If the disk of writable PSD server becomes full, the client shall not be able to write any CDR into the server. It shall then behave as a retrieve only PSD server.")
cPsdClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 1))
cPsdClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 2))
cPsdClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 1, 1)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientMIBStatisticsGroup"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientMIBConfigurationsGroup"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientMIBNotifGroup"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientMIBNotifInfoGroup"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientMIBNotifMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPsdClientMIBCompliance = cPsdClientMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cPsdClientMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO PSD CLIENT MIB.')
cPsdClientMIBStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 2, 1)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientDSWriteReq"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSReadReq"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSRdWrRetrans"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSDiskFullTrans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPsdClientMIBStatisticsGroup = cPsdClientMIBStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cPsdClientMIBStatisticsGroup.setDescription('A collection of objects providing Data Store related statistics.')
cPsdClientMIBConfigurationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 2, 2)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientDSRowStatus"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSAutoRetrieve"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSMaxRetrieve"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSServerRowStatus"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDSRetrieveOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPsdClientMIBConfigurationsGroup = cPsdClientMIBConfigurationsGroup.setStatus('current')
if mibBuilder.loadTexts: cPsdClientMIBConfigurationsGroup.setDescription('A collection of objects providing Data Store related configurations.')
cPsdClientMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 2, 3)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientDownNotif"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientUpNotif"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientDiskFullNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPsdClientMIBNotifGroup = cPsdClientMIBNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cPsdClientMIBNotifGroup.setDescription('A collection of Notifications.')
cPsdClientMIBNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 2, 4)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddrType"), ("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifDSServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPsdClientMIBNotifInfoGroup = cPsdClientMIBNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cPsdClientMIBNotifInfoGroup.setDescription('A collection of notification info objects on PSD.')
cPsdClientMIBNotifMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 495, 2, 2, 5)).setObjects(("CISCO-PSD-CLIENT-MIB", "cPsdClientNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPsdClientMIBNotifMgmtGroup = cPsdClientMIBNotifMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: cPsdClientMIBNotifMgmtGroup.setDescription('A collection of objects related with notification management on PSD.')
mibBuilder.exportSymbols("CISCO-PSD-CLIENT-MIB", cPsdClientMIBCompliances=cPsdClientMIBCompliances, ciscoPsdClientNotifInfo=ciscoPsdClientNotifInfo, cPsdClientDSEntry=cPsdClientDSEntry, cPsdClientDSName=cPsdClientDSName, cPsdClientDSAutoRetrieve=cPsdClientDSAutoRetrieve, cPsdClientDSReadReq=cPsdClientDSReadReq, ciscoPsdClientNotifMgmt=ciscoPsdClientNotifMgmt, cPsdClientMIBConfigurationsGroup=cPsdClientMIBConfigurationsGroup, ciscoPsdClientMIBConform=ciscoPsdClientMIBConform, cPsdClientMIBCompliance=cPsdClientMIBCompliance, cPsdClientDiskFullNotif=cPsdClientDiskFullNotif, cPsdClientDSTable=cPsdClientDSTable, cPsdClientDSServerEntry=cPsdClientDSServerEntry, cPsdClientDSRetrieveOnly=cPsdClientDSRetrieveOnly, cPsdClientDSServerRowStatus=cPsdClientDSServerRowStatus, cPsdClientDSRdWrRetrans=cPsdClientDSRdWrRetrans, cPsdClientNotifDSServerAddress=cPsdClientNotifDSServerAddress, cPsdClientMIBNotifInfoGroup=cPsdClientMIBNotifInfoGroup, cPsdClientDSWriteReq=cPsdClientDSWriteReq, cPsdClientDSRowStatus=cPsdClientDSRowStatus, ciscoPsdClientStatistics=ciscoPsdClientStatistics, ciscoPsdClientMIB=ciscoPsdClientMIB, cPsdClientDSServerTable=cPsdClientDSServerTable, ciscoPsdClientMIBNotifs=ciscoPsdClientMIBNotifs, cPsdClientDownNotif=cPsdClientDownNotif, cPsdClientMIBNotifMgmtGroup=cPsdClientMIBNotifMgmtGroup, cPsdClientNotifEnable=cPsdClientNotifEnable, cPsdClientUpNotif=cPsdClientUpNotif, cPsdClientMIBGroups=cPsdClientMIBGroups, cPsdClientDSServerAddress=cPsdClientDSServerAddress, cPsdClientDSDiskFullTrans=cPsdClientDSDiskFullTrans, ciscoPsdClientMIBObjects=ciscoPsdClientMIBObjects, PYSNMP_MODULE_ID=ciscoPsdClientMIB, ciscoPsdClientConfigurations=ciscoPsdClientConfigurations, cPsdClientMIBStatisticsGroup=cPsdClientMIBStatisticsGroup, cPsdClientMIBNotifGroup=cPsdClientMIBNotifGroup, cPsdClientNotifDSServerAddrType=cPsdClientNotifDSServerAddrType, cPsdClientDSServerAddressType=cPsdClientDSServerAddressType, cPsdClientDSMaxRetrieve=cPsdClientDSMaxRetrieve)
