#
# PySNMP MIB module HP-VLAN (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-VLAN
# Produced by pysmi-0.3.4 at Wed May  1 13:37:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ConfigStatus, = mibBuilder.importSymbols("HP-ICF-TC", "ConfigStatus")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, ObjectIdentity, iso, Unsigned32, NotificationType, Integer32, Bits, Gauge32, TimeTicks, MibIdentifier, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "Integer32", "Bits", "Gauge32", "TimeTicks", "MibIdentifier", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "PhysAddress", "DisplayString")
hpVlanLevelOne = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1))
hpVlanLevelOne.setRevisions(('2000-11-03 04:17', '1995-10-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpVlanLevelOne.setRevisionsDescriptions(('Deprecated all objects in this MIB - replaced by RFC 2674.', 'Initial revision of this MIB module',))
if mibBuilder.loadTexts: hpVlanLevelOne.setLastUpdated('200011030417Z')
if mibBuilder.loadTexts: hpVlanLevelOne.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpVlanLevelOne.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpVlanLevelOne.setDescription('This MIB module describes management objects used to model virtual LANs (VLANs).')
hpVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3))
hpVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1))
hpVlanTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 2))
hpVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3))
class VlanID(TextualConvention, Integer32):
    description = 'A unique value, greater than zero, for each VLAN in the managed system. It is recommended that the values are assigned contiguously starting from 1.'
    status = 'deprecated'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

hpVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVlanNumber.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanNumber.setDescription('The number of currently defined VLANs in the device. Though VLANs should be created using contiguous VLAN IDs, this is not mandatory. Gaps in the VLAN ID sequence may also result from the deletion of existing VLANs. Therefore, this value represents the total number of VLANs in the device and should not be used to indicate the highest VLAN ID value currently in use.')
hpVlanIdentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4), )
if mibBuilder.loadTexts: hpVlanIdentTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentTable.setDescription('A table describing the various VLANs that are currently defined for this device.')
hpVlanIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1), ).setIndexNames((0, "HP-VLAN", "hpVlanIdentIndex"))
if mibBuilder.loadTexts: hpVlanIdentEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentEntry.setDescription('The row in the hpVlanIdentTable containing the general VLAN information.')
hpVlanIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 1), VlanID())
if mibBuilder.loadTexts: hpVlanIdentIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentIndex.setDescription('The VLAN ID which uniquely identifies a row in this table.')
hpVlanIdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpVlanIdentName.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentName.setDescription('The user defined textual name that is associated with this VLAN.')
hpVlanIdentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVlanIdentMode.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentMode.setDescription('The mode of this VLAN. A VLAN can be either port-based or MAC address-based. A port-based VLAN supports a multiple addresses per VLAN port. A MAC address-based VLAN supports multiple MAC addresses per port such that VLAN address tables must be consulted to determine the number of VLAN clients.')
hpVlanIdentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpVlanIdentStatus.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentStatus.setDescription('The status of a VLAN information entry.')
hpVlanDot1QID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpVlanDot1QID.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanDot1QID.setDescription('The VLAN tag ID. 802.1Q')
hpVlanIdentState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVlanIdentState.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentState.setDescription('Current state of the VLAN. If one port in the VLAN is up, then that VLAN is up, otherwise it is down.')
hpVlanIdentType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpVlanIdentType.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentType.setDescription('Type of VLAN: static - VLAN is user-configured; configuration information is retained in configuration file and thus such VLANs are available across reboots. dynamic - VLAN is managed by GVRP; configuration information is NOT retained in configuration file and thus such VLANs are not available across reboots. They may be relearnt after a reboot via GVRP activity')
hpVlanMemberTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 5), )
if mibBuilder.loadTexts: hpVlanMemberTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberTable.setDescription('A table describing the members of the various VLANs that are currently defined for this device. Interfaces can be associated with a pre-defined VLAN (i.e., VLANs can be created by grouping existing interfaces) by adding rows to this table. Likewise, deleting rows from this table removes the specified interface from the VLAN. Note that certain entries in this table will automatically be created when a VLAN is created, such as the entry associating a VLAN with its propVirtual interface to the management and/or forwarding entity on the device. These entries are read-only and can not be manipulated via the MIB.')
hpVlanMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 5, 1), ).setIndexNames((0, "HP-VLAN", "hpVlanMemberIfIndex"))
if mibBuilder.loadTexts: hpVlanMemberEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberEntry.setDescription('The row in the hpVlanMemberTable containing the VLAN ID to Interface Group ifIndex mappings.')
hpVlanMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpVlanMemberIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberIfIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table. The corresponding row in the Interfaces Table must exist prior to the index being used in this table.')
hpVlanMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 5, 1, 2), VlanID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpVlanMemberIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberIndex.setDescription('The VLAN ID identifies the VLAN the interface is in. The corresponding row in the VLAN Ident Table must exist prior to the index being used in this table.')
hpVlanAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: hpVlanAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanAddrTable.setDescription('A table describing the MAC addresses that are currently associated with a specific VLAN. Entries are added to and deleted from this read-only table automatically as they are learned from the network.')
hpVlanAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "HP-VLAN", "hpVlanAddrIndex"))
if mibBuilder.loadTexts: hpVlanAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanAddrEntry.setDescription('The row in the hpVlanAddrTable containing the VLAN ID to MAC address mappings.')
hpVlanAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 6, 1, 1), VlanID())
if mibBuilder.loadTexts: hpVlanAddrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanAddrIndex.setDescription('The VLAN ID which uniquely identifies a row in the VLAN Ident Table. The corresponding row in the VLAN Ident Table must exist prior to the index being present in this table.')
hpVlanAddrPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 6, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVlanAddrPhysAddress.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanAddrPhysAddress.setDescription('The MAC address of a node that is associated with a specific VLAN as identified by the object hpVlanAddrIndex.')
hpVlanIdentConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 7), ConfigStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVlanIdentConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanIdentConfigStatus.setDescription('The status of a VLAN information table. If one or more variables in this group were reconfigurated since last reboot and required reboot to take effect, the value of this variable will be set to notInService.')
hpVlanMemberTable2 = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: hpVlanMemberTable2.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberTable2.setDescription('A table describing the VLANs on each particular port along with tagging information.')
hpVlanMemberEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "HP-VLAN", "hpVlanIdentIndex"), (0, "HP-VLAN", "hpVlanMemberIfIndex"))
if mibBuilder.loadTexts: hpVlanMemberEntry2.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberEntry2.setDescription('The row in the hpVlanMemberTable2 containing the VLAN ID to interface group ifIndex mappings as well the VLAN tagging information.')
hpVlanMemberTagged2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("no", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVlanMemberTagged2.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberTagged2.setDescription("Identifies whether the particular VLan on this port is tagged or not. 'no' denotes not a member of that vlan. 'auto' denotes that GVRP will dynamically determine the membership of this port.")
hpVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 1))
hpVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 2))
hpVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 2, 1)).setObjects(("HP-VLAN", "hpVlanGeneralGroup"), ("HP-VLAN", "hpVlanAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpVlanCompliance = hpVlanCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanCompliance.setDescription('The compliance statement for HP devices supporting the HP VLAN MIB.')
hpVlanCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 2, 2)).setObjects(("HP-VLAN", "hpVlanMemberGroup"), ("HP-VLAN", "hpVlanTaggingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpVlanCompliance1 = hpVlanCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanCompliance1.setDescription('The compliance statement for HP devices supporting the HP VLAN MIB.')
hpVlanGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 1, 1)).setObjects(("HP-VLAN", "hpVlanNumber"), ("HP-VLAN", "hpVlanIdentMode"), ("HP-VLAN", "hpVlanIdentName"), ("HP-VLAN", "hpVlanIdentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpVlanGeneralGroup = hpVlanGeneralGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanGeneralGroup.setDescription('A collection of objects that provide general information about a configured VLAN. The organization of this group is such that it is assumed that all devices supporting VLANs associate an RFC 1573 interface with a VLAN even if only to allow default node-to-VLAN assignment.')
hpVlanAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 1, 2)).setObjects(("HP-VLAN", "hpVlanAddrPhysAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpVlanAddressGroup = hpVlanAddressGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanAddressGroup.setDescription('A collection of objects that contain VLAN to MAC address mapping data.')
hpVlanMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 1, 3)).setObjects(("HP-VLAN", "hpVlanMemberIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpVlanMemberGroup = hpVlanMemberGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanMemberGroup.setDescription('A collection of objects for providing port to VLAN mapping data.')
hpVlanTaggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 3, 1, 3, 1, 4)).setObjects(("HP-VLAN", "hpVlanDot1QID"), ("HP-VLAN", "hpVlanIdentState"), ("HP-VLAN", "hpVlanIdentType"), ("HP-VLAN", "hpVlanIdentConfigStatus"), ("HP-VLAN", "hpVlanMemberTagged2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpVlanTaggingGroup = hpVlanTaggingGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpVlanTaggingGroup.setDescription('A collection of objects for managing tagged VLANs.')
mibBuilder.exportSymbols("HP-VLAN", hpVlanIdentState=hpVlanIdentState, hpVlanIdentConfigStatus=hpVlanIdentConfigStatus, hpVlanAddrEntry=hpVlanAddrEntry, hpVlanIdentTable=hpVlanIdentTable, hpVLAN=hpVLAN, hpVlanMemberTable=hpVlanMemberTable, hpVlanIdentStatus=hpVlanIdentStatus, hpVlanMemberEntry=hpVlanMemberEntry, hpVlanIdentType=hpVlanIdentType, PYSNMP_MODULE_ID=hpVlanLevelOne, hpVlanNumber=hpVlanNumber, hpVlanCompliances=hpVlanCompliances, hpVlanAddrTable=hpVlanAddrTable, hpVlanConformance=hpVlanConformance, hpVlanCompliance1=hpVlanCompliance1, hpVlanMemberIfIndex=hpVlanMemberIfIndex, hpVlanDot1QID=hpVlanDot1QID, hpVlanIdentName=hpVlanIdentName, VlanID=VlanID, hpVlanObjects=hpVlanObjects, hpVlanIdentMode=hpVlanIdentMode, hpVlanAddrIndex=hpVlanAddrIndex, hpVlanGroups=hpVlanGroups, hpVlanIdentEntry=hpVlanIdentEntry, hpVlanMemberIndex=hpVlanMemberIndex, hpVlanAddressGroup=hpVlanAddressGroup, hpVlanLevelOne=hpVlanLevelOne, hpVlanGeneralGroup=hpVlanGeneralGroup, hpVlanCompliance=hpVlanCompliance, hpVlanMemberGroup=hpVlanMemberGroup, hpVlanMemberTagged2=hpVlanMemberTagged2, hpVlanMemberTable2=hpVlanMemberTable2, hpVlanIdentIndex=hpVlanIdentIndex, hpVlanTraps=hpVlanTraps, hpVlanMemberEntry2=hpVlanMemberEntry2, hpVlanAddrPhysAddress=hpVlanAddrPhysAddress, hpVlanTaggingGroup=hpVlanTaggingGroup)
