#
# PySNMP MIB module CISCO-PAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PAE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:09:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
CnnEouPostureTokenString, CnnEouPostureToken = mibBuilder.importSymbols("CISCO-NAC-TC-MIB", "CnnEouPostureTokenString", "CnnEouPostureToken")
CpgPolicyNameOrEmpty, = mibBuilder.importSymbols("CISCO-POLICY-GROUP-MIB", "CpgPolicyNameOrEmpty")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
VlanIndex, = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex")
dot1xAuthConfigEntry, dot1xPaePortNumber, dot1xPaePortEntry, PaeControlledPortStatus, dot1xAuthPaeState = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xAuthConfigEntry", "dot1xPaePortNumber", "dot1xPaePortEntry", "PaeControlledPortStatus", "dot1xAuthPaeState")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, iso, Integer32, Counter64, NotificationType, Bits, TimeTicks, MibIdentifier, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "iso", "Integer32", "Counter64", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity")
RowStatus, DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
ciscoPaeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 220))
ciscoPaeMIB.setRevisions(('2009-12-10 00:00', '2008-07-07 00:00', '2008-04-09 00:00', '2007-04-25 00:00', '2007-04-16 00:00', '2007-01-27 00:00', '2005-09-22 00:00', '2004-04-23 00:00', '2004-04-01 00:00', '2003-04-08 00:00', '2002-10-16 00:00', '2001-05-24 10:16',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPaeMIB.setRevisionsDescriptions(('Added cpaeSuppPortProfileGroup, and cpaeSuppHostInfoGroup.', 'Added TEXTUAL-CONVENTION CpaeAuthState. Added enumerated value other(4) to cpaePortMode. Added cpaeHostSessionIdGroup, cpaeGuestVlanNotifEnableGroup, cpaeGuestVlanNotifGroup, cpaeAuthFailVlanNotifEnableGrp, cpaeAuthFailVlanNotifGroup, cpaeHostAuthInfoGroup, cpaePortCapabilitiesConfigGroup, cpaeDot1xSuppToGuestVlanGroup. Deprecated cpaePortAuthFailVlanGroup, replaced by cpaePortAuthFailVlanConfigGroup and cpaePortAuthFailUserInfoGroup. Deprecated cpaeCompliance8, replaced by cpaeCompliance9.', "Added cpaeMabAuditInfoGroup, cpaeHostUrlRedirectGroup, cpaeMabPortIpDevTrackConfGroup, cpaePortIpDevTrackConfGroup, cpaeWebAuthIpDevTrackingGroup, cpaeWebAuthUnAuthTimeoutGroup, cpaeGlobalAuthFailVlanGroup, cpaeGlobalSecViolationGroup, cpaeCriticalEapolConfigGroup. Deprecated cpaeMacAuthBypassGroup and replace it by cpaeMacAuthBypassPortEnableGroup, and cpaeMacAuthBypassGroup4; Deprecated cpaeAuthConfigGroup and replace it by cpaeAuthIabConfigGroup, cpaeAuthConfigGroup3 and cpaeAuthConfigGroup4. Modified cpaeMacAuthBypassPortAuthState to add 'ipAwaiting' and 'policyConfig' enum values.", 'Added cpaeMacAuthBypassGroup3, and cpaeHostPostureTokenGroup.', 'Add cpaeHostInfoGroup3.', "Added 'aaaFail' state to cpaeMacAuthBypassPortAuthState and cpaeWebAuthHostState. Added cpaePortAuthFailVlanGroup2, cpaeWebAuthAaaFailGroup, cpaeMacAuthBypassGroup2, cpaePortEapolTestGroup, cpaeHostInfoGroup2, cpaeAuthConfigGroup2, cpaeCriticalRecoveryDelayGroup, cpaeMacAuthBypassCriticalGroup, and cpaeWebAuthCriticalGroup. Obsoleted cpaeHostInfoPostureToken object.", 'Added cpaeGuestVlanGroup3, cpaePortAuthFailVlanGroup, cpaePortOperVlanGroup, cpaeNoGuestVlanNotifEnableGrp, cpaeNoAuthFailVlanNotifEnableGrp, cpaeNoGuestVlanNotifGroup, cpaeNoAuthFailVlanNotifGroup, cpaeMacAuthBypassGroup, cpaeWebAuthGroup, cpaeAuthConfigGroup and cpaeHostInfoGroup. Deprecated cpaeInGuestVlan, cpaeGuestVlanGroup2.', 'Modified the DESCRIPTION clauses of cpaeGuestVlanNumber and cpaeGuestVlanId.', 'Added cpaeUserGroupGroup and cpaeRadiusConfigGroup.', 'Added cpaeGuestVlanGroup2 and cpaeShutdownTimeoutGroup. Deprecated cpaeGuestVlanGroup.', 'Added cpaePortEntryGroup and cpaeGuestVlanGroup. Deprecated cpaeMultipleHostGroup.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPaeMIB.setLastUpdated('200912100000Z')
if mibBuilder.loadTexts: ciscoPaeMIB.setOrganization('Cisco System, Inc.')
if mibBuilder.loadTexts: ciscoPaeMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ibns@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoPaeMIB.setDescription('Cisco Port Access Entity (PAE) module for managing IEEE Std 802.1x. This MIB provides Port Access Entity information that are either excluded by IEEE8021-PAE-MIB or specific to Cisco products.')
cpaeMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 0))
cpaeMIBObject = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 1))
cpaeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 2))
class ReAuthPeriodSource(TextualConvention, Integer32):
    description = 'Source of the reAuthPeriod constant, used by the 802.1x Reauthentication Timer state machine. local : local configured reauthentication period specified by the object dot1xAuthReAuthPeriod will be used. server: the reauthentication period will be received from the Authentication server. auto : source of reauthentication period will be decided by the system.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("server", 2), ("auto", 3))

class CpaeAuthState(TextualConvention, Integer32):
    description = "The Authenticator PAE state machine value. other :None of the following states. initialize :The PAE state machine is being initialized. disconnected :An explicit logoff request is received from the Supplicant, or the number of permissible reauthentication attempts has been exceeded. connecting :Attempting to establish a communication with a Supplicant. authenticating:A Supplicant is being authenticated. authenticated :The Authenticator has successfully authenticated the Supplicant. aborting :The authentication process is prematurely aborted due to receipt of a reauthentication request, or an EAPOL-Start frame, or an EAPOL-Logoff frame, or an authTimeout. held :The state machine ignores and discards all EAPOL packets, so as to discourage brute force attacks. This state is entered from the 'authenticating' state following an authentication failure. At the expiration of the quietWhile timer, the state machine transitions to the 'connecting' state. forceAuth :The port is set to Authorized, and a canned EAP Success packet is sent to the Supplicant. forceUnauth :The port is set to Unauthorized, and a canned EAP Failure packet is sent to the Supplicant. If EAP-Start messages are received from the Supplicant, the state is re-entered and further EAP Failure messages are sent. guestVlan :The port has been moved to a configured Guest VLAN. authFailVlan :The port has been moved to a configured Authentication Failed VLAN. criticalAuth :The port has been authorized by Critical Authentication because RADIUS server is not reachable, or does not response. ipAwaiting :The port is waiting for an IP address from DHCP server. policyConfig :This state is entered from 'ipAwaiting' state if an IP address is received and the corresponding policies are being installed. authFinished :The port is set to Authorized by MAC Authentication Bypass feature. restart :The PAE state machine has been restarted. authFallback :Fallback mechanism is applied to the authentication process. authCResult :Authentication completed and the validity of the authorization features is checked. authZSuccess :Authorization policies based on the authentication result are applied. If the policies are applied successfully then the port is authorized otherwise unauthorized."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("other", 1), ("initialize", 2), ("disconnected", 3), ("connecting", 4), ("authenticating", 5), ("authenticated", 6), ("aborting", 7), ("held", 8), ("forceAuth", 9), ("forceUnauth", 10), ("guestVlan", 11), ("authFailVlan", 12), ("criticalAuth", 13), ("ipAwaiting", 14), ("policyConfig", 15), ("authFinished", 16), ("restart", 17), ("authFallback", 18), ("authCResult", 19), ("authZSuccess", 20))

cpaePortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1), )
if mibBuilder.loadTexts: cpaePortTable.setReference('802.1X-2001 9.6.1, 802.1X-2004 9.6.1')
if mibBuilder.loadTexts: cpaePortTable.setStatus('current')
if mibBuilder.loadTexts: cpaePortTable.setDescription('A table of system level information for each port supported by the Port Access Entity. An entry appears in this table for each PAE port of this system. This table contains additional objects for the dot1xPaePortTable.')
cpaePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1), )
dot1xPaePortEntry.registerAugmentions(("CISCO-PAE-MIB", "cpaePortEntry"))
cpaePortEntry.setIndexNames(*dot1xPaePortEntry.getIndexNames())
if mibBuilder.loadTexts: cpaePortEntry.setStatus('current')
if mibBuilder.loadTexts: cpaePortEntry.setDescription('An entry containing additional management information applicable to a particular PAE port.')
cpaeMultipleHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMultipleHost.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeMultipleHost.setDescription('Specifies whether the port allows multiple-host connection or not.')
cpaePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("singleHost", 1), ("multiHost", 2), ("multiAuth", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaePortMode.setStatus('current')
if mibBuilder.loadTexts: cpaePortMode.setDescription('Specifies the current mode of dot1x operation on the port. singleHost(1): port allows one host to connect and authenticate. multiHost(2) : port allows multiple hosts to connect. Once a host is authenticated, all remaining hosts are also authorized. multiAuth(3) : port allows multiple hosts to connect and each host is authenticated. other(4) : none of the above. This is a read-only value which can not be used in set operation. If the port security feature is enabled on the interface, the configuration of the port security (such as the number of the hosts allowed, the security violation action, etc) will apply to the interface.')
cpaeGuestVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeGuestVlanNumber.setStatus('current')
if mibBuilder.loadTexts: cpaeGuestVlanNumber.setDescription("Specifies the Guest Vlan of the interface. An interface with cpaePortMode value of 'singleHost' will be moved to its Guest Vlan if the supplicant on the interface is not capable of IEEE-802.1x authentication. A value of zero for this object indicates no Guest Vlan configured for the interface.")
cpaeInGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeInGuestVlan.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeInGuestVlan.setDescription('Indicates whether the interface is in its Guest Vlan or not. The object is deprecated in favor of newly added object cpaePortOperVlanType.')
cpaeShutdownTimeoutEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeShutdownTimeoutEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeShutdownTimeoutEnabled.setDescription('Specifies whether shutdown timeout feature is enabled on the interface.')
cpaePortAuthFailVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 6), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaePortAuthFailVlan.setStatus('current')
if mibBuilder.loadTexts: cpaePortAuthFailVlan.setDescription('Specifies the Auth-Fail (Authentication Fail) Vlan of the port. A port is moved to Auth-Fail Vlan if the supplicant which support IEEE-802.1x authentication is unsuccessfully authenticated. A value of zero for this object indicates no Auth-Fail Vlan configured for the port.')
cpaePortOperVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 7), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaePortOperVlan.setStatus('current')
if mibBuilder.loadTexts: cpaePortOperVlan.setDescription('The VlanIndex of the Vlan which is assigned to this port via IEEE-802.1x and related methods of authentication supported by the system. A value of zero for this object indicates that no Vlan is assigned to this port via IEEE-802.1x authentication.')
cpaePortOperVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("guest", 3), ("authFail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaePortOperVlanType.setStatus('current')
if mibBuilder.loadTexts: cpaePortOperVlanType.setDescription("The type of the Vlan which is assigned to this port via IEEE-802.1x and related methods of authentication supported by the system. A value of 'other' for this object indicates type of Vlan assigned to this port; via IEEE-802.1x authentication; is other than the ones specified by listed enumerations for this object. A value of 'none' for this object indicates that there is no Vlan assigned to this port via IEEE-802.1x authentication. For such a case, corresponding value of cpaePortOperVlan object will be zero. A value of 'guest' for this object indicates that Vlan assigned to this port; via IEEE-802.1x authentication; is of type Guest Vlan and specified by the object cpaeGuestVlanNumber for this entry. A value of 'authFail' for this object indicates that Vlan assigned to this port; via IEEE-802.1x authentication; is of type Auth-Fail Vlan and specified by the object cpaePortAuthFailVlan for this entry.")
cpaeAuthFailVlanMaxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeAuthFailVlanMaxAttempts.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailVlanMaxAttempts.setDescription('Specifies the maximum number of authentication attempts should be made before the port is moved into the Auth-Fail Vlan.')
cpaePortCapabilitiesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("authenticator", 0), ("supplicant", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaePortCapabilitiesEnabled.setReference('802.1X-2001 9.6.1, PAE Capabilities, 802.1X-2004 9.6.1, PAE Capabilities')
if mibBuilder.loadTexts: cpaePortCapabilitiesEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaePortCapabilitiesEnabled.setDescription('Specifies the type of PAE functionality of the port which are enabled. authenticator: PAE Authenticator functions are enabled. supplicant : PAE Supplicant functions are enabled. Only those supported PAE functions which are listed in the corresponding instance of dot1xPaePortCapabilities can be enabled.')
cpaeGuestVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeGuestVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeGuestVlanId.setDescription("Specifies the Guest Vlan of the system. An interface with cpaePortMode value of 'singleHost' will be moved to Guest Vlan if the supplicant on the interface is not IEEE-802.1x capable. A value of zero indicates no Guest Vlan configured in the system. If the platform supports per-port guest Vlan ID configuration, this object is not instantiated.")
cpaeShutdownTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: cpaeShutdownTimeout.setDescription("Specifies the shutdown timeout interval to enable the interface automatically in case it is shutdown due to security violation. If the value of this object is 0, the interfaces shutdown due to the security violation will not be enabled automatically. The value of this object is applicable to the interface only when cpaeShutdownTimeoutEnabled is 'true', and port security feature is disabled on the interface.")
cpaeRadiusAccountingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeRadiusAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeRadiusAccountingEnabled.setDescription('Specifies if RADIUS accounting is enabled for 802.1x on this devices.')
cpaeUserGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5), )
if mibBuilder.loadTexts: cpaeUserGroupTable.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupTable.setDescription('A table of Group Manager and authenticated users information on the device.')
cpaeUserGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1), ).setIndexNames((0, "CISCO-PAE-MIB", "cpaeUserGroupName"), (0, "CISCO-PAE-MIB", "cpaeUserGroupUserIndex"))
if mibBuilder.loadTexts: cpaeUserGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupEntry.setDescription('Information about an 802.1x authenticated user on the devices.')
cpaeUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: cpaeUserGroupName.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupName.setDescription('Specifies the name of the group that the user belongs to.')
cpaeUserGroupUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cpaeUserGroupUserIndex.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupUserIndex.setDescription('The index of an user within a group.')
cpaeUserGroupUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeUserGroupUserName.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupUserName.setDescription('Specifies the name of the user authenticated on a port of the device.')
cpaeUserGroupUserAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeUserGroupUserAddrType.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupUserAddrType.setDescription('Specifies the type of address used to determine the address of the user.')
cpaeUserGroupUserAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeUserGroupUserAddr.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupUserAddr.setDescription('Specifies the address of the host that the user logging from.')
cpaeUserGroupUserInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeUserGroupUserInterface.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupUserInterface.setDescription('Specifies the interface index that the user is authenticated on.')
cpaeUserGroupUserVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 5, 1, 7), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeUserGroupUserVlan.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupUserVlan.setDescription('Specifies the vlan that the user belongs to.')
cpaeAuthFailUserTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 6), )
if mibBuilder.loadTexts: cpaeAuthFailUserTable.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailUserTable.setDescription('A table to list user information for each port on the system supported by the Port Access Entity and assigned to Auth-Fail Vlan.')
cpaeAuthFailUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 6, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaeAuthFailUserEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailUserEntry.setDescription("An entry appears in this table for each PAE port on the system which is assigned to Vlan of type 'authFail' via IEEE-802.1x authentication.")
cpaeAuthFailUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 6, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeAuthFailUserName.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailUserName.setDescription('Indicates the name of the user who failed IEEE-802.1x authentication and hence now assigned to Auth-Fail Vlan. The Auth-Fail Vlan to which the user belongs is determined by the value of object cpaePortAuthFailVlan for this port.')
cpaeNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 7))
cpaeNoGuestVlanNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeNoGuestVlanNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cpaeNoGuestVlanNotifEnable.setDescription("This object specifies whether the system produces the cpaeNoGuestVlanNotif. A 'false' value will prevent cpaeNoGuestVlanNotif from being generated by this system.")
cpaeNoAuthFailVlanNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 7, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeNoAuthFailVlanNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cpaeNoAuthFailVlanNotifEnable.setDescription("This object specifies whether the system produces the cpaeNoAuthFailVlanNotif. A 'false' value will prevent cpaeNoAuthFailVlanNotif from being generated by this system.")
cpaeGuestVlanNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 7, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeGuestVlanNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cpaeGuestVlanNotifEnable.setDescription("This object specifies whether the system produces the cpaeGuestVlanNotif. A 'false' value will prevent cpaeGuestVlanNotif from being generated by this system.")
cpaeAuthFailVlanNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 7, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeAuthFailVlanNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailVlanNotifEnable.setDescription("This object specifies whether the system produces the cpaeAuthFailVlanNotif. A 'false' value will prevent cpaeAuthFailVlanNotif from being generated by this system.")
cpaeMacAuthBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8))
cpaeMacAuthBypassReAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 1), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassReAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassReAuthTimeout.setDescription('Specifies the waiting time before reauthentication is triggered on all MAC Auth-bypass authenticated ports.')
cpaeMacAuthBypassReAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassReAuthEnabled.setDescription("The reauthentication control for all MAC Auth-bypass ports. Setting this object to 'true' causes every MAC Auth-Bypass authenticated port to reauthenticate the device connecting to the port, after every period of time specified by the object cpaeMacAuthBypassReAuthTimeout. Setting this object to 'false' will disable the MAC Auth-Bypass global reauthentication.")
cpaeMacAuthBypassViolation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassViolation.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassViolation.setDescription('Specifies the action upon reception of a security violation event. restrict(1): Packets from MAC address of the device causing security violation will be dropped. shutdown(2): The port that causes security violation will be shutdown.')
cpaeMacAuthBypassShutdownTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassShutdownTimeout.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassShutdownTimeout.setDescription('Specifies time before a port is auto-enabled after being shutdown due to a MAC Auth-bypass security violation.')
cpaeMacAuthBypassAuthFailTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassAuthFailTimeout.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassAuthFailTimeout.setDescription('Specifies the time a MAC Auth-bypass unauthenticated port waits before trying the authentication process again.')
cpaeMacAuthBypassPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6), )
if mibBuilder.loadTexts: cpaeMacAuthBypassPortTable.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortTable.setDescription('A table of MAC Authentication Bypass (MAC Auth-Bypass) configuration and information for ports in the device.')
cpaeMacAuthBypassPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaeMacAuthBypassPortEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortEntry.setDescription('An entry containing management information for MAC Auth-Bypass feature on a port.')
cpaeMacAuthBypassPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortEnabled.setDescription('Specifies whether MAC Auth-Bypass is enabled on the port.')
cpaeMacAuthBypassPortInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortInitialize.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortInitialize.setDescription("The initialization control for this port. Setting this object to 'true' causes the MAC Auth-bypass state machine to be initialized on the port. Setting this object to 'false' has no effect. This object always returns 'false' when it is read.")
cpaeMacAuthBypassPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortReAuth.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortReAuth.setDescription("The reauthentication control for this port. Setting this object to 'true' causes the MAC address of the device connecting to the port to be reauthenticated. Setting this object to 'false' has no effect. This object always returns 'false' when it is read.")
cpaeMacAuthBypassPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortMacAddress.setDescription('Indicates the MAC address of the device connecting to the port.')
cpaeMacAuthBypassPortAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("waiting", 2), ("authenticating", 3), ("authenticated", 4), ("fail", 5), ("finished", 6), ("aaaFail", 7), ("ipAwaiting", 8), ("policyConfig", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortAuthState.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortAuthState.setDescription("Indicates the current state of the MAC Auth-Bypass state machine. other(1) : An unknown state. waiting(2) : Waiting to receive the MAC address that needs to be authenticated. authenticating(3): In authentication process. authenticated(4) : MAC address of the device connecting to the port is authenticated. fail(5) : MAC Auth-bypass authentication failed. Port waits for a period of time before moving to the 'waiting' state, if there is no other authentication features available in the system. finished(6) : MAC Auth-bypass authentication failed. Port is authenticated by another authentication feature. aaaFail(7) : AAA server is not reachable after sending the authentication request or after the expiration of re-authentication timeout, with IAB (Inaccessible Authentication Bypass) enabled on the port. ipAwaiting(8) : Corresponding QoS/Security ACLs and other Vendor Specific Attributes are being configured on the port, after which IP address will be obtained via DHCP snooping or ARP inspection. policyConfig(9) : Policy Groups or downloaded ACLs are being configured on the port.")
cpaeMacAuthBypassPortTermAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("init", 2), ("reauth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortTermAction.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortTermAction.setDescription('Indicates the termination action received from RADIUS server that will be applied on the port when the current session timeout expired. other : none of the following. init : current session will be terminated and a new authentication process will be initiated. reauth: reauthentication will be applied without terminating the current session.')
cpaeMacAuthBypassSessionTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassSessionTimeLeft.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassSessionTimeLeft.setDescription('Indicates the leftover time of the current MAC Auth-Bypass session on this port.')
cpaeMacAuthBypassPortAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("eap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortAuthMethod.setDescription('Specifies the authentication method used by MAC Authentication Bypass. radius(1) : communication with authentication server is performed via RADIUS messages. eap(2) : communication with authentication server is performed via EAP messages.')
cpaeMacAuthBypassPortSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortSessionId.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortSessionId.setDescription("Indicates the session ID of the MAC Auth-Bypass Audit session on the port. A zero length string will be returned for this object if value of the corresponding instance of cpaeMacAuthBypassPortEnabled is 'false'.")
cpaeMacAuthBypassPortUrlRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortUrlRedirect.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortUrlRedirect.setDescription("Indicates the URL of an Audit server, provided by AAA server, to which a MAC auth-Bypass host will be redirected to when an Audit session starts off. A zero-length string indicates that the audit process will be performed via port scan instead, or value of the corresponding instance of cpaeMacAuthBypassPortEnabled is 'false'.")
cpaeMacAuthBypassPortPostureTok = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 6, 1, 11), CnnEouPostureTokenString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeMacAuthBypassPortPostureTok.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortPostureTok.setDescription("Indicates the Posture Token assigned to the MAC Auth-Bypass host connected to this port. A zero length string will be returned for this object if value of the corresponding instance of cpaeMacAuthBypassPortEnabled is 'false'.")
cpaeMacAuthBypassAcctEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMacAuthBypassAcctEnable.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassAcctEnable.setDescription('Specifies if accounting is enabled for Mac Authentication Bypass feature on this device.')
cpaeMabCriticalRecoveryDelay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 8), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMabCriticalRecoveryDelay.setStatus('current')
if mibBuilder.loadTexts: cpaeMabCriticalRecoveryDelay.setDescription('This object specifies the critical recovery delay time for Mac Authentication Bypass in the system. A value of zero indicates that critical recovery delay for MAC Authentication Bypass is disabled.')
cpaeMabPortIpDevTrackConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 9), )
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackConfTable.setStatus('current')
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackConfTable.setDescription('A table of IP Device Tracking configuration for MAC Auth-Bypass interfaces in the system.')
cpaeMabPortIpDevTrackConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 9, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackConfEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackConfEntry.setDescription('An entry of MAC Auth-Bypass configuration for IP Device Tracking on an MAC Auth-Bypass capable interface.')
cpaeMabPortIpDevTrackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 8, 9, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackEnabled.setDescription('Specifies whether IP Device Tracking is enabled or not on this port for the corresponding MAC Auth-bypass authenticated host.')
cpaeWebAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9))
cpaeWebAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthEnabled.setDescription('Specifies whether Web Proxy Authentication is enabled in the system.')
cpaeWebAuthSessionPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthSessionPeriod.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthSessionPeriod.setDescription('Specifies the Web Proxy Authentication session period for the system. Session period is the time after which an Web Proxy Authenticated session is terminated.')
cpaeWebAuthLoginPage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 3), CiscoURLString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthLoginPage.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthLoginPage.setDescription('Specifies the customized login page for Web Proxy Authentication, in the format of an URL. A customized login page is required to support the same input fields as the default login page for users to input credentials. If this object contains a zero length string, the default login page will be used.')
cpaeWebAuthLoginFailedPage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 4), CiscoURLString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthLoginFailedPage.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthLoginFailedPage.setDescription('Specifies the customized login-failed page for Web Proxy Authentication, in the format of an URL. Login-failed page is sent back to the client upon an authentication failure. A login-failed page requires to have all the input fields of the login page, in addition to the authentication failure information. If this object contains a zero length string, the default login-failed page will be used.')
cpaeWebAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthQuietPeriod.setDescription("Specifies the time a Web Proxy Authentication state machine will be held in 'blackListed' state after maximum authentication attempts.")
cpaeWebAuthMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthMaxRetries.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthMaxRetries.setDescription('Specifies the maximum number of unsuccessful login attempts a user is allowed to make.')
cpaeWebAuthPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 7), )
if mibBuilder.loadTexts: cpaeWebAuthPortTable.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthPortTable.setDescription('A table of Web Proxy Authentication configuration and information for the feature capable ports in the device.')
cpaeWebAuthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 7, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaeWebAuthPortEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthPortEntry.setDescription('An entry containing management information for Web Proxy Authentication feature on a port.')
cpaeWebAuthPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthPortEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthPortEnabled.setDescription('Specifies whether Web Proxy Authentication is enabled on the port.')
cpaeWebAuthPortInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthPortInitialize.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthPortInitialize.setDescription("The initialization control for this port. Setting this object to 'true' causes Web Proxy Authentication state machine to be initialized for all the hosts connecting to the port. Setting this object to 'false' has no effect. This object always returns 'false' when it is read.")
cpaeWebAuthPortAaaFailPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 7, 1, 3), CpgPolicyNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthPortAaaFailPolicy.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthPortAaaFailPolicy.setDescription("Specifies the policy name to be applied on the port when the corresponding cpaeWebAuthHostState is 'aaaFail'. The specified policy name must either be an existing entry in cpgPolicyTable defined in CISCO-POLICY-GROUP-MIB, or an empty string which indicates that there will be no policy name applied on the port when the corresponding cpaeWebAuthHostState is 'aaaFail'.")
cpaeWebAuthPortIpDevTrackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthPortIpDevTrackEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthPortIpDevTrackEnabled.setDescription('Specifies whether IP Device Tracking is enabled or not on this port for the corresponding Web Proxy authenticated host.')
cpaeWebAuthHostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8), )
if mibBuilder.loadTexts: cpaeWebAuthHostTable.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostTable.setDescription('A table of Web Proxy Authentication information for hosts currently managed by the feature. An entry is added to the table when a host is detected and Web Proxy Authentication state machine is initiated for the host.')
cpaeWebAuthHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"), (0, "CISCO-PAE-MIB", "cpaeWebAuthHostAddrType"), (0, "CISCO-PAE-MIB", "cpaeWebAuthHostAddress"))
if mibBuilder.loadTexts: cpaeWebAuthHostEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostEntry.setDescription('An entry containing management information for Web Proxy Authentication feature on a host.')
cpaeWebAuthHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cpaeWebAuthHostAddrType.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostAddrType.setDescription('Indicates the Internet address type for the host.')
cpaeWebAuthHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: cpaeWebAuthHostAddress.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostAddress.setDescription('Indicates the Internet address for the host. The type of this address is determined by the value of cpaeWebAuthHostAddrType.')
cpaeWebAuthAaaSessionPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeWebAuthAaaSessionPeriod.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthAaaSessionPeriod.setDescription('Indicates the session period for a Web Proxy Authenticated session on this host, supplied by the AAA server. If value of this object is none zero, it will take precedence over the period specified by cpaeWebAuthPortSessionPeriod.')
cpaeWebAuthHostSessionTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeWebAuthHostSessionTimeLeft.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostSessionTimeLeft.setDescription('Indicates the leftover time of the current Web Proxy Authenticated session for this host.')
cpaeWebAuthHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("connecting", 2), ("authenticating", 3), ("authenticated", 4), ("authFailed", 5), ("parseError", 6), ("sessionTimeout", 7), ("blackListed", 8), ("aaaFail", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeWebAuthHostState.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostState.setDescription("Indicates the current state of the Web Proxy Authentication state machine. initialize : Initial state of the Web Proxy Authentication state machine. connecting : Login page is sent to the client, waiting for response from the client. authenticating: Credentials are extracted from client's response and authenticating with the AAA server. authenticated : Web Proxy Authentication succeeded. Session timer is started, policies are applied, and success page is sent back to client. authFailed : Web Proxy Authentication failed. Login page is resent with authentication failure information embedded, if retry count has not exceeded the maximum number of retry attempts. Otherwise, move to 'blackListed' state. parseError : Failed to extract user's credentials from the client's response. sessionTimeout: Session timer expired, user's policies are removed, state machine will moves to 'initialize' state after that. blackListed : Web Proxy Authentication retry count has exceeded the maximum number of retry attempts. Only setting the state machine to 'initialize' will take it out of this state. aaaFail : AAA server is not reachable after sending the authentication request, or after host has been in 'blackListed' state for the period of time specified by cpaeWebAuthQuietPeriod, with IAB (Inaccessible Authentication Bypass) enabled on the corresponding port connected to the host.")
cpaeWebAuthHostInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 8, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthHostInitialize.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthHostInitialize.setDescription("The initialization control for this host. Setting this object to 'true' causes Web Proxy Authentication state machine to be initialized for the host. Setting this object to 'false' has no effect. This object always returns 'false' when it is read.")
cpaeWebAuthCriticalRecoveryDelay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 9), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthCriticalRecoveryDelay.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthCriticalRecoveryDelay.setDescription('This object specifies the critical recovery delay time for Web Proxy Authentication in the system. A value of zero indicates that critical recovery delay for Web Proxy Authentication is disabled.')
cpaeWebAuthUnAuthStateTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 9, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeWebAuthUnAuthStateTimeout.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthUnAuthStateTimeout.setDescription("The authentication timeout period for Web Proxy Authentication. Once a host enters 'initialize' state as indicated by its corresponding cpaeWebAuthHostState, such host will be removed if it can not be authenticated within the timeout period.")
cpaeAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10), )
if mibBuilder.loadTexts: cpaeAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthConfigTable.setDescription('A table containing the configuration objects for the Authenticator PAE associated with each port. An entry appears in this table for each PAE port that may authenticate access to itself. This table contain additional objects for the dot1xAuthConfigTable.')
cpaeAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1), )
dot1xAuthConfigEntry.registerAugmentions(("CISCO-PAE-MIB", "cpaeAuthConfigEntry"))
cpaeAuthConfigEntry.setIndexNames(*dot1xAuthConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cpaeAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthConfigEntry.setDescription('An entry containing additional management information applicable to a particular Authenticator PAE.')
cpaeAuthReAuthPeriodSrcAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 1), ReAuthPeriodSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeAuthReAuthPeriodSrcAdmin.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthReAuthPeriodSrcAdmin.setDescription('Specifies the source of the reAuthPeriod constant to be used by the Reauthentication Timer state machine.')
cpaeAuthReAuthPeriodSrcOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 2), ReAuthPeriodSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeAuthReAuthPeriodSrcOper.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthReAuthPeriodSrcOper.setDescription('Indicates the source of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
cpaeAuthReAuthPeriodOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeAuthReAuthPeriodOper.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthReAuthPeriodOper.setDescription('Indicates the operational reauthentication period for this port.')
cpaeAuthTimeToNextReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeAuthTimeToNextReAuth.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthTimeToNextReAuth.setDescription('Indicates the leftover time of the current session for this port.')
cpaeAuthReAuthAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("terminate", 1), ("reAuth", 2), ("noReAuth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeAuthReAuthAction.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthReAuthAction.setDescription("Indicates the reauthentication action for this port. terminate: Session will be terminated, with the corresponding Authenticator PAE state machine transits to 'disconnected'. reAuth : The port will be reauthenticated. noReAuth : The port will not be reauthenticated.")
cpaeAuthReAuthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeAuthReAuthMax.setReference('IEEE Std 802.1X-2004, 8.2.4.1.2, reAuthMax')
if mibBuilder.loadTexts: cpaeAuthReAuthMax.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthReAuthMax.setDescription('This object specifies the number of reauthentication attempts that are permitted before the port becomes unauthorized. The value of this object is used as the reAuthMax constant by the Authenticator PAE state machine.')
cpaeAuthIabEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeAuthIabEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthIabEnabled.setDescription("Specifies whether the PAE port is declared as Inaccessible Authentication Bypass (IAB). IAB ports will be granted network access via the administrative configured VLAN if it failed to connect to the Authentication server. The only way to bring an IAB port back to the Backend Authentication state machine is through setting dot1xPaePortInitialize in the corresponding entry in dot1xPaePortTable to 'true'. 802.1x reauthentication will be temporary disabled on an authenticated IAB port if the connection to the Authentication server is broken, and enable again when the connection is resumed.")
cpaeAuthPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 10, 1, 8), CpaeAuthState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeAuthPaeState.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthPaeState.setDescription('Indicates the current value of the Authenticator PAE state machine on the port.')
cpaeHostInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11), )
if mibBuilder.loadTexts: cpaeHostInfoTable.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoTable.setDescription('A table containing 802.1x authentication information for hosts connecting to PAE ports in the system.')
cpaeHostInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"), (0, "CISCO-PAE-MIB", "cpaeHostInfoHostIndex"))
if mibBuilder.loadTexts: cpaeHostInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoEntry.setDescription('An entry appears in the table for each 802.1x capable host connecting to an PAE port, providing its authentication information.')
cpaeHostInfoHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpaeHostInfoHostIndex.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoHostIndex.setDescription('An arbitrary index assigned by the agent to identify the host.')
cpaeHostInfoMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostInfoMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoMacAddress.setDescription('Indicates the Mac Address of the host.')
cpaeHostInfoPostureToken = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 3), CnnEouPostureToken()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostInfoPostureToken.setStatus('obsolete')
if mibBuilder.loadTexts: cpaeHostInfoPostureToken.setDescription('Indicates the posture token assigned to the host. This object has been obsoleted and replaced by cpaeHostPostureTokenStr.')
cpaeHostInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostInfoUserName.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoUserName.setDescription('Indicates the name of the authenticated user on the host.')
cpaeHostInfoAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostInfoAddrType.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoAddrType.setDescription('Indicates the type of Internet address of the host.')
cpaeHostInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostInfoAddr.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoAddr.setDescription('Indicates the Internet address of the host. The type of this address is determined by the value of cpaeHostInfoAddrType object.')
cpaeHostPostureTokenStr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 7), CnnEouPostureTokenString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostPostureTokenStr.setStatus('current')
if mibBuilder.loadTexts: cpaeHostPostureTokenStr.setDescription('Indicates the posture token assigned to the host.')
cpaeHostUrlRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostUrlRedirection.setStatus('current')
if mibBuilder.loadTexts: cpaeHostUrlRedirection.setDescription('Indicates the URL-redirection assigned for this host by AAA server.')
cpaeHostAuthPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 9), CpaeAuthState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostAuthPaeState.setReference('802.1X-2001 9.4.1, Authenticator PAE state, 802.1X-2004 9.4.1, Authenticator PAE state')
if mibBuilder.loadTexts: cpaeHostAuthPaeState.setStatus('current')
if mibBuilder.loadTexts: cpaeHostAuthPaeState.setDescription('Indicates the current value of the Authenticator PAE state machine for the host.')
cpaeHostBackendState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7), ("ignore", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostBackendState.setReference('802.1X-2001 9.4.1, Backend Authentication state, 802.1X-2004 9.4.1, Backend Authentication state.')
if mibBuilder.loadTexts: cpaeHostBackendState.setStatus('current')
if mibBuilder.loadTexts: cpaeHostBackendState.setDescription('Indicates the current state of the Backend Authentication state machine of the host.')
cpaeHostSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 11, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeHostSessionId.setStatus('current')
if mibBuilder.loadTexts: cpaeHostSessionId.setDescription('A unique identifier of the 802.1x session.')
cpaePortEapolTestLimits = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaePortEapolTestLimits.setStatus('current')
if mibBuilder.loadTexts: cpaePortEapolTestLimits.setDescription('Indicates the maximum number of entries allowed in cpaePortEapolTestTable.')
cpaePortEapolTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 13), )
if mibBuilder.loadTexts: cpaePortEapolTestTable.setStatus('current')
if mibBuilder.loadTexts: cpaePortEapolTestTable.setDescription('A table for testing EAPOL (Extensible Authentication Protocol Over LAN) capable information of hosts connecting to PAE ports in the device.')
cpaePortEapolTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 13, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaePortEapolTestEntry.setStatus('current')
if mibBuilder.loadTexts: cpaePortEapolTestEntry.setDescription('An entry containing EAPOL capable information for hosts connecting to a PAE port.')
cpaePortEapolTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("notCapable", 2), ("capable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaePortEapolTestResult.setStatus('current')
if mibBuilder.loadTexts: cpaePortEapolTestResult.setDescription('Indicates the test result of whether there is EAPOL supporting host connecting to the port. inProgress: the test is in progress. notCapable: there is no EAPOL supporting host connecting to the port. capable : there is EAPOL supporting host connecting to the port.')
cpaePortEapolTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpaePortEapolTestStatus.setStatus('current')
if mibBuilder.loadTexts: cpaePortEapolTestStatus.setDescription("This object is used to manage the creation, and deletion of rows in the table. An entry can be created by setting the instance value of this object to 'createAndGo', and deleted by setting the instance value of this object to 'destroy'.")
cpaeCriticalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 14))
cpaeCriticalEapolEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 14, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeCriticalEapolEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaeCriticalEapolEnabled.setDescription('Specifies if the device will send an EAPOL-Success message on successful Critical Authentication for a supplicant.')
cpaeCriticalRecoveryDelay = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 14, 2), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeCriticalRecoveryDelay.setStatus('current')
if mibBuilder.loadTexts: cpaeCriticalRecoveryDelay.setDescription('This object specifies the critical recovery delay time for 802.1x in the system. A value of zero indicates that Critical Authentication recovery delay for 802.1x is disabled.')
cpaePortIpDevTrackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 15), )
if mibBuilder.loadTexts: cpaePortIpDevTrackConfigTable.setStatus('current')
if mibBuilder.loadTexts: cpaePortIpDevTrackConfigTable.setDescription('A table of IP Device Tracking configuration for PAE ports in the system.')
cpaePortIpDevTrackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 15, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaePortIpDevTrackConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cpaePortIpDevTrackConfigEntry.setDescription('An entry of IP Device Tracking configuration on a PAE port.')
cpaePortIpDevTrackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 15, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaePortIpDevTrackEnabled.setStatus('current')
if mibBuilder.loadTexts: cpaePortIpDevTrackEnabled.setDescription('Specifies if IP Device Tracking is enabled on this port for the corresponding 802.1x authenticated host.')
cpaeGlobalAuthFailMaxAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeGlobalAuthFailMaxAttempts.setStatus('current')
if mibBuilder.loadTexts: cpaeGlobalAuthFailMaxAttempts.setDescription('A global configuration to specify the maximum number of authentication attempts that should be made before a port is moved into its Auth-Fail VLAN.')
cpaeGlobalSecViolationAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeGlobalSecViolationAction.setStatus('current')
if mibBuilder.loadTexts: cpaeGlobalSecViolationAction.setDescription('A global configuration to specify the action that will be applied to a PAE port upon reception of a security violation event. restrict: Packets from MAC address of the device causing security violation will be dropped. shutdown: The port that causes security violation will be shutdown.')
cpaeDot1xSuppToGuestVlanAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeDot1xSuppToGuestVlanAllowed.setStatus('current')
if mibBuilder.loadTexts: cpaeDot1xSuppToGuestVlanAllowed.setDescription('Specifies whether ports associated with 802.1x supplicants are allowed to move to Guest Vlan when they stop responding to EAPOL inquiries.')
cpaeSupplicantObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19))
cpaeSuppPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 1), )
if mibBuilder.loadTexts: cpaeSuppPortTable.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppPortTable.setDescription('A list of objects providing information and configuration for the Supplicant PAE associated with each port. This table provides additional objects for the dot1xSuppConfigTable.')
cpaeSuppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: cpaeSuppPortEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppPortEntry.setDescription('An entry containing supplicant configuration information for a particular PAE port.')
cpaeSuppPortCredentialProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 1, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeSuppPortCredentialProfileName.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppPortCredentialProfileName.setDescription('Specifies the credentials profile of the Supplicant PAE. A zero length string for this object indicates that the Supplicant PAE does not have credential profile.')
cpaeSuppPortEapProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpaeSuppPortEapProfileName.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppPortEapProfileName.setDescription('Specifies the EAP profile of the Supplicant PAE. A zero length string for this object indicates that the Supplicant PAE does not have EAP profile.')
cpaeSuppHostInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2), )
if mibBuilder.loadTexts: cpaeSuppHostInfoTable.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostInfoTable.setDescription('A list of dot1x supplicants in the system.')
cpaeSuppHostInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"), (0, "CISCO-PAE-MIB", "cpaeSuppHostInfoSuppIndex"))
if mibBuilder.loadTexts: cpaeSuppHostInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostInfoEntry.setDescription('An entry containing dot1x supplicant information for a supplicant on a particular PAE port in the system.')
cpaeSuppHostInfoSuppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cpaeSuppHostInfoSuppIndex.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostInfoSuppIndex.setDescription('An arbitrary index assigned by the agent to identify the supplicant.')
cpaeSuppHostAuthMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeSuppHostAuthMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostAuthMacAddress.setDescription('Indicates the MAC address of the authenticator, which authenticates the supplicant.')
cpaeSuppHostPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("disconnected", 1), ("logoff", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("acquired", 6), ("held", 7), ("restart", 8), ("sForceAuth", 9), ("sForceUnauth", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeSuppHostPaeState.setReference('802.1X-2004 9.5.1, Supplicant PAE State')
if mibBuilder.loadTexts: cpaeSuppHostPaeState.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostPaeState.setDescription('Indicates the current state of the Supplicant PAE State machine.')
cpaeSuppHostBackendState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initialize", 1), ("idle", 2), ("request", 3), ("response", 4), ("receive", 5), ("fail", 6), ("success", 7), ("timeout", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeSuppHostBackendState.setReference('802.1X-2004 9.5.1, Backend Supplicant state')
if mibBuilder.loadTexts: cpaeSuppHostBackendState.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostBackendState.setDescription('Indicates the current state of the Supplicant Backend state machine.')
cpaeSuppHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 220, 1, 19, 2, 1, 5), PaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpaeSuppHostStatus.setReference('802.1X-2004 9.5.1, SuppControlledPortStatus')
if mibBuilder.loadTexts: cpaeSuppHostStatus.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostStatus.setDescription('Indicates the status of the supplicant.')
cpaeNoGuestVlanNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 220, 0, 1)).setObjects(("IEEE8021-PAE-MIB", "dot1xAuthPaeState"))
if mibBuilder.loadTexts: cpaeNoGuestVlanNotif.setStatus('current')
if mibBuilder.loadTexts: cpaeNoGuestVlanNotif.setDescription("A cpaeNoGuestVlanNotif is sent if a non-802.1x supplicant is detected on a PAE port for which the value of corresponding instance of dot1xAuthAuthControlledPortControl is 'auto' and the value of corresponding instance of cpaeGuestVlanNumber is zero.")
cpaeNoAuthFailVlanNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 220, 0, 2)).setObjects(("IEEE8021-PAE-MIB", "dot1xAuthPaeState"))
if mibBuilder.loadTexts: cpaeNoAuthFailVlanNotif.setStatus('current')
if mibBuilder.loadTexts: cpaeNoAuthFailVlanNotif.setDescription("A cpaeNoAuthFailVlanNotif is sent if a 802.1x supplicant fails to authenticate on a PAE port for which the value of corresponding instance of dot1xAuthAuthControlledPortControl is 'auto' and the value of corresponding instance of cpaePortAuthFailVlan is zero.")
cpaeGuestVlanNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 220, 0, 3)).setObjects(("CISCO-PAE-MIB", "cpaeGuestVlanNumber"), ("IEEE8021-PAE-MIB", "dot1xAuthPaeState"))
if mibBuilder.loadTexts: cpaeGuestVlanNotif.setStatus('current')
if mibBuilder.loadTexts: cpaeGuestVlanNotif.setDescription("A cpaeGuestVlanNotif is sent if value of the instance of cpaeGuestVlanNotifEnable is set to 'true', and a PAE port is being moved to the VLAN specified by value of the corresponding instance of cpaeGuestVlanNumber.")
cpaeAuthFailVlanNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 220, 0, 4)).setObjects(("CISCO-PAE-MIB", "cpaePortAuthFailVlan"), ("IEEE8021-PAE-MIB", "dot1xAuthPaeState"))
if mibBuilder.loadTexts: cpaeAuthFailVlanNotif.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailVlanNotif.setDescription("A cpaeAuthFailVlanNotif is sent if value of the instance of cpaeAuthFailVlanNotifEnable is set to 'true', and a PAE port is being moved to the VLAN specified by value of the corresponding instance of cpaePortAuthFailVlan.")
cpaeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1))
cpaeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2))
cpaeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 1)).setObjects(("CISCO-PAE-MIB", "cpaeMultipleHostGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance = cpaeCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 2)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance2 = cpaeCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance2.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 3)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup2"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance3 = cpaeCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance3.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 4)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup2"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance4 = cpaeCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance4.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 5)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup3"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"), ("CISCO-PAE-MIB", "cpaePortOperVlanGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthGroup"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance5 = cpaeCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: cpaeCompliance5.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 6)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup3"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"), ("CISCO-PAE-MIB", "cpaePortOperVlanGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup2"), ("CISCO-PAE-MIB", "cpaeWebAuthGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthAaaFailGroup"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup2"), ("CISCO-PAE-MIB", "cpaePortEapolTestGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup2"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup2"), ("CISCO-PAE-MIB", "cpaeCriticalRecoveryDelayGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassCriticalGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthCriticalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance6 = cpaeCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance6.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 7)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup3"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"), ("CISCO-PAE-MIB", "cpaePortOperVlanGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup2"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup3"), ("CISCO-PAE-MIB", "cpaeWebAuthGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthAaaFailGroup"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup2"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup3"), ("CISCO-PAE-MIB", "cpaePortEapolTestGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup2"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup2"), ("CISCO-PAE-MIB", "cpaeCriticalRecoveryDelayGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassCriticalGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthCriticalGroup"), ("CISCO-PAE-MIB", "cpaeHostPostureTokenGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance7 = cpaeCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance7.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 8)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup3"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"), ("CISCO-PAE-MIB", "cpaePortOperVlanGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup2"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup3"), ("CISCO-PAE-MIB", "cpaeWebAuthGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthAaaFailGroup"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup2"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup3"), ("CISCO-PAE-MIB", "cpaePortEapolTestGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup2"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup2"), ("CISCO-PAE-MIB", "cpaeCriticalRecoveryDelayGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassCriticalGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthCriticalGroup"), ("CISCO-PAE-MIB", "cpaeHostPostureTokenGroup"), ("CISCO-PAE-MIB", "cpaeMabAuditInfoGroup"), ("CISCO-PAE-MIB", "cpaeMabPortIpDevTrackConfGroup"), ("CISCO-PAE-MIB", "cpaePortIpDevTrackConfGroup"), ("CISCO-PAE-MIB", "cpaeHostUrlRedirectGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthIpDevTrackingGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthUnAuthTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeGlobalAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeGlobalSecViolationGroup"), ("CISCO-PAE-MIB", "cpaeCriticalEapolConfigGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortEnableGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup4"), ("CISCO-PAE-MIB", "cpaeAuthIabConfigGroup"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup3"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance8 = cpaeCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance8.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 9)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup3"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"), ("CISCO-PAE-MIB", "cpaePortOperVlanGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup2"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup3"), ("CISCO-PAE-MIB", "cpaeWebAuthGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthAaaFailGroup"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup2"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup3"), ("CISCO-PAE-MIB", "cpaePortEapolTestGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup2"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup2"), ("CISCO-PAE-MIB", "cpaeCriticalRecoveryDelayGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassCriticalGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthCriticalGroup"), ("CISCO-PAE-MIB", "cpaeHostPostureTokenGroup"), ("CISCO-PAE-MIB", "cpaeMabAuditInfoGroup"), ("CISCO-PAE-MIB", "cpaeMabPortIpDevTrackConfGroup"), ("CISCO-PAE-MIB", "cpaePortIpDevTrackConfGroup"), ("CISCO-PAE-MIB", "cpaeHostUrlRedirectGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthIpDevTrackingGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthUnAuthTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeGlobalAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeGlobalSecViolationGroup"), ("CISCO-PAE-MIB", "cpaeCriticalEapolConfigGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortEnableGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup4"), ("CISCO-PAE-MIB", "cpaeAuthIabConfigGroup"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup3"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup4"), ("CISCO-PAE-MIB", "cpaeHostSessionIdGroup"), ("CISCO-PAE-MIB", "cpaeHostAuthInfoGroup"), ("CISCO-PAE-MIB", "cpaePortCapabilitiesConfigGroup"), ("CISCO-PAE-MIB", "cpaeDot1xSuppToGuestVlanGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanNotifEnableGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanConfigGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailUserInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance9 = cpaeCompliance9.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeCompliance9.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 1, 10)).setObjects(("CISCO-PAE-MIB", "cpaePortEntryGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanGroup3"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeRadiusConfigGroup"), ("CISCO-PAE-MIB", "cpaeUserGroupGroup"), ("CISCO-PAE-MIB", "cpaePortOperVlanGroup"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup2"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup3"), ("CISCO-PAE-MIB", "cpaeWebAuthGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthAaaFailGroup"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup2"), ("CISCO-PAE-MIB", "cpaeHostInfoGroup3"), ("CISCO-PAE-MIB", "cpaePortEapolTestGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanGroup2"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup2"), ("CISCO-PAE-MIB", "cpaeCriticalRecoveryDelayGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassCriticalGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthCriticalGroup"), ("CISCO-PAE-MIB", "cpaeHostPostureTokenGroup"), ("CISCO-PAE-MIB", "cpaeMabAuditInfoGroup"), ("CISCO-PAE-MIB", "cpaeMabPortIpDevTrackConfGroup"), ("CISCO-PAE-MIB", "cpaePortIpDevTrackConfGroup"), ("CISCO-PAE-MIB", "cpaeHostUrlRedirectGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthIpDevTrackingGroup"), ("CISCO-PAE-MIB", "cpaeWebAuthUnAuthTimeoutGroup"), ("CISCO-PAE-MIB", "cpaeGlobalAuthFailVlanGroup"), ("CISCO-PAE-MIB", "cpaeGlobalSecViolationGroup"), ("CISCO-PAE-MIB", "cpaeCriticalEapolConfigGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortEnableGroup"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassGroup4"), ("CISCO-PAE-MIB", "cpaeAuthIabConfigGroup"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup3"), ("CISCO-PAE-MIB", "cpaeAuthConfigGroup4"), ("CISCO-PAE-MIB", "cpaeHostSessionIdGroup"), ("CISCO-PAE-MIB", "cpaeHostAuthInfoGroup"), ("CISCO-PAE-MIB", "cpaePortCapabilitiesConfigGroup"), ("CISCO-PAE-MIB", "cpaeDot1xSuppToGuestVlanGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanNotifEnableGroup"), ("CISCO-PAE-MIB", "cpaeGuestVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaeAuthFailVlanNotifEnableGrp"), ("CISCO-PAE-MIB", "cpaeAuthFailVlanNotifGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailVlanConfigGroup"), ("CISCO-PAE-MIB", "cpaePortAuthFailUserInfoGroup"), ("CISCO-PAE-MIB", "cpaeSuppPortProfileGroup"), ("CISCO-PAE-MIB", "cpaeSuppHostInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCompliance10 = cpaeCompliance10.setStatus('current')
if mibBuilder.loadTexts: cpaeCompliance10.setDescription('The compliance statement for devices that implement the CISCO-PAE-MIB.')
cpaeMultipleHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 1)).setObjects(("CISCO-PAE-MIB", "cpaeMultipleHost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMultipleHostGroup = cpaeMultipleHostGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeMultipleHostGroup.setDescription('A collection of objects that provide the multiple host configuration information for a PAE port. These are additional to the IEEE Std 802.1x PAE MIB.')
cpaePortEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 2)).setObjects(("CISCO-PAE-MIB", "cpaePortMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortEntryGroup = cpaePortEntryGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortEntryGroup.setDescription('A collection of objects that provides the port-mode configuration for a PAE port.')
cpaeGuestVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 3)).setObjects(("CISCO-PAE-MIB", "cpaeGuestVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGuestVlanGroup = cpaeGuestVlanGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeGuestVlanGroup.setDescription('A collection of objects that provides the Guest Vlan configuration information for the system.')
cpaeGuestVlanGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 4)).setObjects(("CISCO-PAE-MIB", "cpaeGuestVlanNumber"), ("CISCO-PAE-MIB", "cpaeInGuestVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGuestVlanGroup2 = cpaeGuestVlanGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeGuestVlanGroup2.setDescription('A collection of objects that provides the per-interface Guest Vlan configuration information for the system.')
cpaeShutdownTimeoutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 5)).setObjects(("CISCO-PAE-MIB", "cpaeShutdownTimeout"), ("CISCO-PAE-MIB", "cpaeShutdownTimeoutEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeShutdownTimeoutGroup = cpaeShutdownTimeoutGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeShutdownTimeoutGroup.setDescription('A collection of objects that provides the dot1x shutdown timeout configuration information for the system.')
cpaeRadiusConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 6)).setObjects(("CISCO-PAE-MIB", "cpaeRadiusAccountingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeRadiusConfigGroup = cpaeRadiusConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeRadiusConfigGroup.setDescription('A collection of objects that provides the RADIUS configuration information for the system.')
cpaeUserGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 7)).setObjects(("CISCO-PAE-MIB", "cpaeUserGroupUserName"), ("CISCO-PAE-MIB", "cpaeUserGroupUserAddrType"), ("CISCO-PAE-MIB", "cpaeUserGroupUserAddr"), ("CISCO-PAE-MIB", "cpaeUserGroupUserInterface"), ("CISCO-PAE-MIB", "cpaeUserGroupUserVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeUserGroupGroup = cpaeUserGroupGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeUserGroupGroup.setDescription('A collection of objects that provides the group manager information of authenticated users in the system.')
cpaeGuestVlanGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 8)).setObjects(("CISCO-PAE-MIB", "cpaeGuestVlanNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGuestVlanGroup3 = cpaeGuestVlanGroup3.setStatus('current')
if mibBuilder.loadTexts: cpaeGuestVlanGroup3.setDescription('A collection of objects that provides the per-interface Guest Vlan configuration information for the system.')
cpaePortOperVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 9)).setObjects(("CISCO-PAE-MIB", "cpaePortOperVlan"), ("CISCO-PAE-MIB", "cpaePortOperVlanType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortOperVlanGroup = cpaePortOperVlanGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortOperVlanGroup.setDescription('A collection of object(s) that provides the information about Operational Vlan for each PAE port.')
cpaePortAuthFailVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 10)).setObjects(("CISCO-PAE-MIB", "cpaePortAuthFailVlan"), ("CISCO-PAE-MIB", "cpaeAuthFailUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortAuthFailVlanGroup = cpaePortAuthFailVlanGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpaePortAuthFailVlanGroup.setDescription('A collection of object(s) that provides the Auth-Fail (Authentication Fail) Vlan configuration and Auth-Fail user information for the system.')
cpaeNoGuestVlanNotifEnableGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 11)).setObjects(("CISCO-PAE-MIB", "cpaeNoGuestVlanNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeNoGuestVlanNotifEnableGrp = cpaeNoGuestVlanNotifEnableGrp.setStatus('current')
if mibBuilder.loadTexts: cpaeNoGuestVlanNotifEnableGrp.setDescription('A collection of object(s) that provides control over Guest Vlan related notification(s).')
cpaeNoAuthFailVlanNotifEnableGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 12)).setObjects(("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeNoAuthFailVlanNotifEnableGrp = cpaeNoAuthFailVlanNotifEnableGrp.setStatus('current')
if mibBuilder.loadTexts: cpaeNoAuthFailVlanNotifEnableGrp.setDescription('A collection of object(s) that provides control over Auth-Fail related notification(s).')
cpaeNoGuestVlanNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 13)).setObjects(("CISCO-PAE-MIB", "cpaeNoGuestVlanNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeNoGuestVlanNotifGroup = cpaeNoGuestVlanNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeNoGuestVlanNotifGroup.setDescription('A collection of notification(s) providing the information for unconfigured Guest Vlan.')
cpaeNoAuthFailVlanNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 14)).setObjects(("CISCO-PAE-MIB", "cpaeNoAuthFailVlanNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeNoAuthFailVlanNotifGroup = cpaeNoAuthFailVlanNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeNoAuthFailVlanNotifGroup.setDescription('A collection of notifications providing the information for unconfigured Auth-Fail Vlan.')
cpaeMacAuthBypassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 15)).setObjects(("CISCO-PAE-MIB", "cpaeMacAuthBypassReAuthTimeout"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassReAuthEnabled"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassViolation"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassShutdownTimeout"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassAuthFailTimeout"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortEnabled"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortInitialize"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortReAuth"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortMacAddress"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortAuthState"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassAcctEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMacAuthBypassGroup = cpaeMacAuthBypassGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeMacAuthBypassGroup.setDescription('A collection of object(s) that provides the MAC Auth-Bypass configuration and information for the system.')
cpaeWebAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 16)).setObjects(("CISCO-PAE-MIB", "cpaeWebAuthEnabled"), ("CISCO-PAE-MIB", "cpaeWebAuthSessionPeriod"), ("CISCO-PAE-MIB", "cpaeWebAuthLoginPage"), ("CISCO-PAE-MIB", "cpaeWebAuthLoginFailedPage"), ("CISCO-PAE-MIB", "cpaeWebAuthQuietPeriod"), ("CISCO-PAE-MIB", "cpaeWebAuthMaxRetries"), ("CISCO-PAE-MIB", "cpaeWebAuthPortEnabled"), ("CISCO-PAE-MIB", "cpaeWebAuthPortInitialize"), ("CISCO-PAE-MIB", "cpaeWebAuthAaaSessionPeriod"), ("CISCO-PAE-MIB", "cpaeWebAuthHostSessionTimeLeft"), ("CISCO-PAE-MIB", "cpaeWebAuthHostState"), ("CISCO-PAE-MIB", "cpaeWebAuthHostInitialize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeWebAuthGroup = cpaeWebAuthGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthGroup.setDescription('A collection of object(s) that provides the Web Proxy Authentication configuration and information for the system.')
cpaeAuthConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 17)).setObjects(("CISCO-PAE-MIB", "cpaeAuthReAuthPeriodSrcAdmin"), ("CISCO-PAE-MIB", "cpaeAuthReAuthPeriodSrcOper"), ("CISCO-PAE-MIB", "cpaeAuthReAuthPeriodOper"), ("CISCO-PAE-MIB", "cpaeAuthTimeToNextReAuth"), ("CISCO-PAE-MIB", "cpaeAuthReAuthAction"), ("CISCO-PAE-MIB", "cpaeAuthReAuthMax"), ("CISCO-PAE-MIB", "cpaeAuthIabEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthConfigGroup = cpaeAuthConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpaeAuthConfigGroup.setDescription('A collection of object(s) that provides additional configuration information about an Authenticator PAE.')
cpaeHostInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 18)).setObjects(("CISCO-PAE-MIB", "cpaeHostInfoMacAddress"), ("CISCO-PAE-MIB", "cpaeHostInfoPostureToken"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostInfoGroup = cpaeHostInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cpaeHostInfoGroup.setDescription('A collection of object(s) that provides information about an host connecting to a PAE port.')
cpaeWebAuthAaaFailGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 19)).setObjects(("CISCO-PAE-MIB", "cpaeWebAuthPortAaaFailPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeWebAuthAaaFailGroup = cpaeWebAuthAaaFailGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthAaaFailGroup.setDescription('A collection of object(s) that provides Inaccessible Authentication Bypass configuration and information for Web Proxy Authentication in the system.')
cpaeMacAuthBypassGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 20)).setObjects(("CISCO-PAE-MIB", "cpaeMacAuthBypassPortTermAction"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassSessionTimeLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMacAuthBypassGroup2 = cpaeMacAuthBypassGroup2.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassGroup2.setDescription('A collection of object(s) that provides additional information of MAC Auth-bypass feature in the system.')
cpaePortEapolTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 21)).setObjects(("CISCO-PAE-MIB", "cpaePortEapolTestLimits"), ("CISCO-PAE-MIB", "cpaePortEapolTestResult"), ("CISCO-PAE-MIB", "cpaePortEapolTestStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortEapolTestGroup = cpaePortEapolTestGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortEapolTestGroup.setDescription('A collection of object(s) that provides information about if connecting hosts are EAPOL capable.')
cpaeHostInfoGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 22)).setObjects(("CISCO-PAE-MIB", "cpaeHostInfoMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostInfoGroup2 = cpaeHostInfoGroup2.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoGroup2.setDescription('A collection of object(s) that provides information about an host connecting to a PAE port.')
cpaeMacAuthBypassGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 23)).setObjects(("CISCO-PAE-MIB", "cpaeMacAuthBypassPortAuthMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMacAuthBypassGroup3 = cpaeMacAuthBypassGroup3.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassGroup3.setDescription('A collection of object(s) that provides configuration for authentication method for MAC Auth-bypass feature in the system.')
cpaePortAuthFailVlanGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 24)).setObjects(("CISCO-PAE-MIB", "cpaeAuthFailVlanMaxAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortAuthFailVlanGroup2 = cpaePortAuthFailVlanGroup2.setStatus('current')
if mibBuilder.loadTexts: cpaePortAuthFailVlanGroup2.setDescription('A collection of object(s) that provides configuration for maximum authentication attempts for Auth-Fail Vlan feature in the system.')
cpaeAuthConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 25)).setObjects(("CISCO-PAE-MIB", "cpaeAuthPaeState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthConfigGroup2 = cpaeAuthConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthConfigGroup2.setDescription('A collection of object(s) that provides additional states in the PAE state machine.')
cpaeCriticalRecoveryDelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 26)).setObjects(("CISCO-PAE-MIB", "cpaeCriticalRecoveryDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCriticalRecoveryDelayGroup = cpaeCriticalRecoveryDelayGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeCriticalRecoveryDelayGroup.setDescription('A collection of object(s) that provides recovery delay configuration for 802.1x Critical Authentication in the system.')
cpaeAuthConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 27)).setObjects(("CISCO-PAE-MIB", "cpaeAuthReAuthPeriodSrcAdmin"), ("CISCO-PAE-MIB", "cpaeAuthReAuthPeriodSrcOper"), ("CISCO-PAE-MIB", "cpaeAuthReAuthPeriodOper"), ("CISCO-PAE-MIB", "cpaeAuthTimeToNextReAuth"), ("CISCO-PAE-MIB", "cpaeAuthReAuthAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthConfigGroup3 = cpaeAuthConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthConfigGroup3.setDescription('A collection of object(s) that provides configuration and information related to re-authentication of 802.1x ports in the system.')
cpaeAuthConfigGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 28)).setObjects(("CISCO-PAE-MIB", "cpaeAuthReAuthMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthConfigGroup4 = cpaeAuthConfigGroup4.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthConfigGroup4.setDescription('A collection of object(s) that provides configuration of maximum reauthentication attempts of 802.1x ports in the system.')
cpaeAuthIabConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 29)).setObjects(("CISCO-PAE-MIB", "cpaeAuthIabEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthIabConfigGroup = cpaeAuthIabConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthIabConfigGroup.setDescription('A collection of object(s) to enable/disable IAB feature on capable interface for the system.')
cpaeGlobalAuthFailVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 30)).setObjects(("CISCO-PAE-MIB", "cpaeGlobalAuthFailMaxAttempts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGlobalAuthFailVlanGroup = cpaeGlobalAuthFailVlanGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeGlobalAuthFailVlanGroup.setDescription('A collection of object(s) that provides global configuration and information about maximum authentication attempts for Auth-Fail Vlan feature in the system.')
cpaeMacAuthBypassCriticalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 31)).setObjects(("CISCO-PAE-MIB", "cpaeMabCriticalRecoveryDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMacAuthBypassCriticalGroup = cpaeMacAuthBypassCriticalGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassCriticalGroup.setDescription('A collection of object(s) that provides control over critical configuration for Mac Authentication Bypass.')
cpaeWebAuthCriticalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 32)).setObjects(("CISCO-PAE-MIB", "cpaeWebAuthCriticalRecoveryDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeWebAuthCriticalGroup = cpaeWebAuthCriticalGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthCriticalGroup.setDescription('A collection of object(s) that provides control over critical configuration for Web Proxy Authentication.')
cpaeCriticalEapolConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 33)).setObjects(("CISCO-PAE-MIB", "cpaeCriticalEapolEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeCriticalEapolConfigGroup = cpaeCriticalEapolConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeCriticalEapolConfigGroup.setDescription('A collection of object(s) that provides EAPOL configuration for 802.1x Critical Authentication in the system.')
cpaeHostPostureTokenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 34)).setObjects(("CISCO-PAE-MIB", "cpaeHostPostureTokenStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostPostureTokenGroup = cpaeHostPostureTokenGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeHostPostureTokenGroup.setDescription('A collection of object(s) that provides information about Posture Token of an host connecting to a PAE port.')
cpaeMabAuditInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 35)).setObjects(("CISCO-PAE-MIB", "cpaeMacAuthBypassPortSessionId"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortUrlRedirect"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortPostureTok"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMabAuditInfoGroup = cpaeMabAuditInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeMabAuditInfoGroup.setDescription('A collection of object(s) that provides information about MAC Auth-Bypass Audit sessions.')
cpaeMabPortIpDevTrackConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 36)).setObjects(("CISCO-PAE-MIB", "cpaeMabPortIpDevTrackEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMabPortIpDevTrackConfGroup = cpaeMabPortIpDevTrackConfGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeMabPortIpDevTrackConfGroup.setDescription('A collection of object(s) that provides configuration and information about MAC Auth-Bypass IP Device Tracking feature.')
cpaePortIpDevTrackConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 37)).setObjects(("CISCO-PAE-MIB", "cpaePortIpDevTrackEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortIpDevTrackConfGroup = cpaePortIpDevTrackConfGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortIpDevTrackConfGroup.setDescription('A collection of object(s) that provides configuration and information about 802.1x IP Device Tracking feature.')
cpaeHostUrlRedirectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 38)).setObjects(("CISCO-PAE-MIB", "cpaeHostUrlRedirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostUrlRedirectGroup = cpaeHostUrlRedirectGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeHostUrlRedirectGroup.setDescription('A collection of object(s) that provides information about URL-redirection of 802.1x authenticated hosts.')
cpaeWebAuthIpDevTrackingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 39)).setObjects(("CISCO-PAE-MIB", "cpaeWebAuthPortIpDevTrackEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeWebAuthIpDevTrackingGroup = cpaeWebAuthIpDevTrackingGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthIpDevTrackingGroup.setDescription('A collection of object(s) that provides configuration and information about Web Proxy Authentication IP Device Tracking feature.')
cpaeWebAuthUnAuthTimeoutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 40)).setObjects(("CISCO-PAE-MIB", "cpaeWebAuthUnAuthStateTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeWebAuthUnAuthTimeoutGroup = cpaeWebAuthUnAuthTimeoutGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeWebAuthUnAuthTimeoutGroup.setDescription('A collection of object(s) that provides configuration and information about Init State Timeout of Web Proxy Authentication.')
cpaeHostInfoGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 41)).setObjects(("CISCO-PAE-MIB", "cpaeHostInfoUserName"), ("CISCO-PAE-MIB", "cpaeHostInfoAddrType"), ("CISCO-PAE-MIB", "cpaeHostInfoAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostInfoGroup3 = cpaeHostInfoGroup3.setStatus('current')
if mibBuilder.loadTexts: cpaeHostInfoGroup3.setDescription('A collection of object(s) that provides user and the address information for 802.1x authenticated host.')
cpaeGlobalSecViolationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 42)).setObjects(("CISCO-PAE-MIB", "cpaeGlobalSecViolationAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGlobalSecViolationGroup = cpaeGlobalSecViolationGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeGlobalSecViolationGroup.setDescription('A collection of object(s) that provides global configuration and information about security violation action on PAE ports in the system.')
cpaeMacAuthBypassPortEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 43)).setObjects(("CISCO-PAE-MIB", "cpaeMacAuthBypassPortEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMacAuthBypassPortEnableGroup = cpaeMacAuthBypassPortEnableGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassPortEnableGroup.setDescription('A collection of object(s) to enable/disable Mac Auth-Bypass on capable interfaces for the system.')
cpaeMacAuthBypassGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 44)).setObjects(("CISCO-PAE-MIB", "cpaeMacAuthBypassReAuthEnabled"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassReAuthTimeout"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassViolation"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassShutdownTimeout"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassAuthFailTimeout"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortInitialize"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortReAuth"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortMacAddress"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassPortAuthState"), ("CISCO-PAE-MIB", "cpaeMacAuthBypassAcctEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeMacAuthBypassGroup4 = cpaeMacAuthBypassGroup4.setStatus('current')
if mibBuilder.loadTexts: cpaeMacAuthBypassGroup4.setDescription('A collection of object(s) that provides the MAC Auth-Bypass configuration and information for the system.')
cpaeHostSessionIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 45)).setObjects(("CISCO-PAE-MIB", "cpaeHostSessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostSessionIdGroup = cpaeHostSessionIdGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeHostSessionIdGroup.setDescription('A collection of object(s) that provides session identification information for 802.1x hosts in the system.')
cpaeHostAuthInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 46)).setObjects(("CISCO-PAE-MIB", "cpaeHostAuthPaeState"), ("CISCO-PAE-MIB", "cpaeHostBackendState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeHostAuthInfoGroup = cpaeHostAuthInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeHostAuthInfoGroup.setDescription('A collection of object(s) that provides state machines and authentication information for 802.1x authenticated hosts in the system.')
cpaePortCapabilitiesConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 47)).setObjects(("CISCO-PAE-MIB", "cpaePortCapabilitiesEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortCapabilitiesConfigGroup = cpaePortCapabilitiesConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortCapabilitiesConfigGroup.setDescription('A collection of object(s) that provides configuration and information about PAE functionalities of ports in the systems.')
cpaeDot1xSuppToGuestVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 48)).setObjects(("CISCO-PAE-MIB", "cpaeDot1xSuppToGuestVlanAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeDot1xSuppToGuestVlanGroup = cpaeDot1xSuppToGuestVlanGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeDot1xSuppToGuestVlanGroup.setDescription('A collection of object(s) that provides configuration that allows moving ports with 802.1x supplicants to Guest Vlan.')
cpaeGuestVlanNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 49)).setObjects(("CISCO-PAE-MIB", "cpaeGuestVlanNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGuestVlanNotifEnableGroup = cpaeGuestVlanNotifEnableGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeGuestVlanNotifEnableGroup.setDescription('A collection of object(s) that provides control over Guest Vlan related notification(s).')
cpaeGuestVlanNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 50)).setObjects(("CISCO-PAE-MIB", "cpaeGuestVlanNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeGuestVlanNotifGroup = cpaeGuestVlanNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeGuestVlanNotifGroup.setDescription('A collection of notifications providing information for Guest Vlan.')
cpaeAuthFailVlanNotifEnableGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 51)).setObjects(("CISCO-PAE-MIB", "cpaeAuthFailVlanNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthFailVlanNotifEnableGrp = cpaeAuthFailVlanNotifEnableGrp.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailVlanNotifEnableGrp.setDescription('A collection of object(s) that provides control over Auth-Fail Vlan related notification(s).')
cpaeAuthFailVlanNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 52)).setObjects(("CISCO-PAE-MIB", "cpaeAuthFailVlanNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeAuthFailVlanNotifGroup = cpaeAuthFailVlanNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeAuthFailVlanNotifGroup.setDescription('A collection of notifications providing information for Auth-Fail Vlan.')
cpaePortAuthFailVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 53)).setObjects(("CISCO-PAE-MIB", "cpaePortAuthFailVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortAuthFailVlanConfigGroup = cpaePortAuthFailVlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortAuthFailVlanConfigGroup.setDescription('A collection of object(s) that provides the Auth-Fail (Authentication Fail) Vlan configuration for the system.')
cpaePortAuthFailUserInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 54)).setObjects(("CISCO-PAE-MIB", "cpaeAuthFailUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaePortAuthFailUserInfoGroup = cpaePortAuthFailUserInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cpaePortAuthFailUserInfoGroup.setDescription('A collection of object(s) that provides the Auth-Fail user information for the system.')
cpaeSuppPortProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 55)).setObjects(("CISCO-PAE-MIB", "cpaeSuppPortCredentialProfileName"), ("CISCO-PAE-MIB", "cpaeSuppPortEapProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeSuppPortProfileGroup = cpaeSuppPortProfileGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppPortProfileGroup.setDescription('A collection of object(s) that provides Credential and EAP profiles configuration for a Supplicant PAE.')
cpaeSuppHostInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 220, 2, 2, 56)).setObjects(("CISCO-PAE-MIB", "cpaeSuppHostAuthMacAddress"), ("CISCO-PAE-MIB", "cpaeSuppHostPaeState"), ("CISCO-PAE-MIB", "cpaeSuppHostBackendState"), ("CISCO-PAE-MIB", "cpaeSuppHostStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpaeSuppHostInfoGroup = cpaeSuppHostInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cpaeSuppHostInfoGroup.setDescription('A collection of object(s) that provides information about supplicants in the system.')
mibBuilder.exportSymbols("CISCO-PAE-MIB", cpaeWebAuthAaaFailGroup=cpaeWebAuthAaaFailGroup, cpaeMacAuthBypassPortAuthMethod=cpaeMacAuthBypassPortAuthMethod, cpaeWebAuth=cpaeWebAuth, cpaeHostSessionId=cpaeHostSessionId, cpaePortCapabilitiesConfigGroup=cpaePortCapabilitiesConfigGroup, cpaeMultipleHostGroup=cpaeMultipleHostGroup, cpaeUserGroupGroup=cpaeUserGroupGroup, cpaePortOperVlan=cpaePortOperVlan, cpaeWebAuthLoginFailedPage=cpaeWebAuthLoginFailedPage, cpaePortEapolTestTable=cpaePortEapolTestTable, cpaeAuthFailVlanNotif=cpaeAuthFailVlanNotif, cpaeWebAuthQuietPeriod=cpaeWebAuthQuietPeriod, PYSNMP_MODULE_ID=ciscoPaeMIB, cpaeAuthConfigEntry=cpaeAuthConfigEntry, cpaeWebAuthHostState=cpaeWebAuthHostState, cpaeUserGroupName=cpaeUserGroupName, cpaeGuestVlanNotifEnableGroup=cpaeGuestVlanNotifEnableGroup, cpaeAuthConfigGroup2=cpaeAuthConfigGroup2, cpaeMacAuthBypassPortEnabled=cpaeMacAuthBypassPortEnabled, cpaeGlobalSecViolationAction=cpaeGlobalSecViolationAction, cpaeWebAuthLoginPage=cpaeWebAuthLoginPage, cpaeMacAuthBypassPortMacAddress=cpaeMacAuthBypassPortMacAddress, cpaeHostUrlRedirectGroup=cpaeHostUrlRedirectGroup, cpaeSuppPortTable=cpaeSuppPortTable, cpaeAuthFailVlanNotifGroup=cpaeAuthFailVlanNotifGroup, cpaeUserGroupUserVlan=cpaeUserGroupUserVlan, cpaeAuthFailVlanNotifEnable=cpaeAuthFailVlanNotifEnable, cpaePortAuthFailVlan=cpaePortAuthFailVlan, cpaeSuppHostBackendState=cpaeSuppHostBackendState, cpaeCompliance10=cpaeCompliance10, cpaePortOperVlanGroup=cpaePortOperVlanGroup, cpaeGlobalSecViolationGroup=cpaeGlobalSecViolationGroup, cpaeHostInfoPostureToken=cpaeHostInfoPostureToken, cpaeSuppHostPaeState=cpaeSuppHostPaeState, cpaePortEapolTestLimits=cpaePortEapolTestLimits, cpaeUserGroupUserIndex=cpaeUserGroupUserIndex, cpaeWebAuthSessionPeriod=cpaeWebAuthSessionPeriod, cpaePortAuthFailUserInfoGroup=cpaePortAuthFailUserInfoGroup, cpaeAuthIabEnabled=cpaeAuthIabEnabled, cpaeUserGroupUserInterface=cpaeUserGroupUserInterface, cpaeCompliance4=cpaeCompliance4, cpaeUserGroupUserName=cpaeUserGroupUserName, cpaeHostInfoGroup3=cpaeHostInfoGroup3, cpaeNoAuthFailVlanNotifEnable=cpaeNoAuthFailVlanNotifEnable, CpaeAuthState=CpaeAuthState, cpaeCriticalEapolEnabled=cpaeCriticalEapolEnabled, cpaeMacAuthBypassPortSessionId=cpaeMacAuthBypassPortSessionId, cpaeMacAuthBypass=cpaeMacAuthBypass, cpaeSuppPortProfileGroup=cpaeSuppPortProfileGroup, cpaePortAuthFailVlanGroup=cpaePortAuthFailVlanGroup, cpaeCompliance5=cpaeCompliance5, cpaeMIBNotification=cpaeMIBNotification, cpaeMacAuthBypassPortTable=cpaeMacAuthBypassPortTable, cpaeHostInfoGroup=cpaeHostInfoGroup, cpaeMacAuthBypassAcctEnable=cpaeMacAuthBypassAcctEnable, cpaeMacAuthBypassCriticalGroup=cpaeMacAuthBypassCriticalGroup, cpaeRadiusAccountingEnabled=cpaeRadiusAccountingEnabled, cpaePortIpDevTrackConfigEntry=cpaePortIpDevTrackConfigEntry, cpaeUserGroupUserAddr=cpaeUserGroupUserAddr, cpaeMacAuthBypassAuthFailTimeout=cpaeMacAuthBypassAuthFailTimeout, cpaeMabPortIpDevTrackEnabled=cpaeMabPortIpDevTrackEnabled, cpaeAuthConfigTable=cpaeAuthConfigTable, cpaeHostAuthPaeState=cpaeHostAuthPaeState, cpaeSupplicantObjects=cpaeSupplicantObjects, ciscoPaeMIB=ciscoPaeMIB, cpaeCompliance9=cpaeCompliance9, cpaeCompliance7=cpaeCompliance7, cpaeWebAuthPortTable=cpaeWebAuthPortTable, cpaeShutdownTimeoutEnabled=cpaeShutdownTimeoutEnabled, cpaeWebAuthCriticalRecoveryDelay=cpaeWebAuthCriticalRecoveryDelay, cpaeAuthReAuthAction=cpaeAuthReAuthAction, cpaeGuestVlanNotifGroup=cpaeGuestVlanNotifGroup, cpaeMacAuthBypassPortEnableGroup=cpaeMacAuthBypassPortEnableGroup, cpaeUserGroupEntry=cpaeUserGroupEntry, cpaeWebAuthHostTable=cpaeWebAuthHostTable, cpaeAuthFailUserTable=cpaeAuthFailUserTable, cpaeMacAuthBypassReAuthTimeout=cpaeMacAuthBypassReAuthTimeout, cpaeHostInfoUserName=cpaeHostInfoUserName, cpaeMacAuthBypassPortEntry=cpaeMacAuthBypassPortEntry, cpaeGuestVlanNotifEnable=cpaeGuestVlanNotifEnable, cpaeMacAuthBypassPortTermAction=cpaeMacAuthBypassPortTermAction, cpaeGuestVlanGroup3=cpaeGuestVlanGroup3, cpaeGlobalAuthFailVlanGroup=cpaeGlobalAuthFailVlanGroup, cpaeMacAuthBypassGroup3=cpaeMacAuthBypassGroup3, cpaeMacAuthBypassReAuthEnabled=cpaeMacAuthBypassReAuthEnabled, cpaeAuthIabConfigGroup=cpaeAuthIabConfigGroup, cpaeSuppPortEntry=cpaeSuppPortEntry, cpaeWebAuthIpDevTrackingGroup=cpaeWebAuthIpDevTrackingGroup, cpaeHostInfoEntry=cpaeHostInfoEntry, cpaeSuppHostStatus=cpaeSuppHostStatus, cpaePortEapolTestGroup=cpaePortEapolTestGroup, cpaeSuppHostInfoEntry=cpaeSuppHostInfoEntry, ReAuthPeriodSource=ReAuthPeriodSource, cpaeCompliance=cpaeCompliance, cpaeInGuestVlan=cpaeInGuestVlan, cpaeSuppHostInfoSuppIndex=cpaeSuppHostInfoSuppIndex, cpaeMacAuthBypassShutdownTimeout=cpaeMacAuthBypassShutdownTimeout, cpaeMacAuthBypassGroup4=cpaeMacAuthBypassGroup4, cpaePortOperVlanType=cpaePortOperVlanType, cpaeMacAuthBypassPortReAuth=cpaeMacAuthBypassPortReAuth, cpaeWebAuthEnabled=cpaeWebAuthEnabled, cpaeUserGroupTable=cpaeUserGroupTable, cpaeWebAuthHostAddrType=cpaeWebAuthHostAddrType, cpaePortIpDevTrackEnabled=cpaePortIpDevTrackEnabled, cpaeNoGuestVlanNotif=cpaeNoGuestVlanNotif, cpaeAuthConfigGroup3=cpaeAuthConfigGroup3, cpaePortMode=cpaePortMode, cpaeNoGuestVlanNotifEnable=cpaeNoGuestVlanNotifEnable, cpaeMabPortIpDevTrackConfGroup=cpaeMabPortIpDevTrackConfGroup, cpaeMIBCompliances=cpaeMIBCompliances, cpaeWebAuthPortIpDevTrackEnabled=cpaeWebAuthPortIpDevTrackEnabled, cpaeMacAuthBypassSessionTimeLeft=cpaeMacAuthBypassSessionTimeLeft, cpaeAuthTimeToNextReAuth=cpaeAuthTimeToNextReAuth, cpaeWebAuthGroup=cpaeWebAuthGroup, cpaeMIBGroups=cpaeMIBGroups, cpaeWebAuthHostEntry=cpaeWebAuthHostEntry, cpaeDot1xSuppToGuestVlanAllowed=cpaeDot1xSuppToGuestVlanAllowed, cpaeWebAuthPortAaaFailPolicy=cpaeWebAuthPortAaaFailPolicy, cpaeNoGuestVlanNotifEnableGrp=cpaeNoGuestVlanNotifEnableGrp, cpaeWebAuthHostInitialize=cpaeWebAuthHostInitialize, cpaeHostInfoMacAddress=cpaeHostInfoMacAddress, cpaeMabCriticalRecoveryDelay=cpaeMabCriticalRecoveryDelay, cpaePortCapabilitiesEnabled=cpaePortCapabilitiesEnabled, cpaeCriticalRecoveryDelayGroup=cpaeCriticalRecoveryDelayGroup, cpaeAuthReAuthPeriodSrcOper=cpaeAuthReAuthPeriodSrcOper, cpaeShutdownTimeoutGroup=cpaeShutdownTimeoutGroup, cpaeHostUrlRedirection=cpaeHostUrlRedirection, cpaeSuppHostAuthMacAddress=cpaeSuppHostAuthMacAddress, cpaeMIBObject=cpaeMIBObject, cpaePortAuthFailVlanConfigGroup=cpaePortAuthFailVlanConfigGroup, cpaeSuppPortEapProfileName=cpaeSuppPortEapProfileName, cpaePortTable=cpaePortTable, cpaeWebAuthHostAddress=cpaeWebAuthHostAddress, cpaeGuestVlanNotif=cpaeGuestVlanNotif, cpaeCompliance8=cpaeCompliance8, cpaePortEapolTestStatus=cpaePortEapolTestStatus, cpaeRadiusConfigGroup=cpaeRadiusConfigGroup, cpaeWebAuthCriticalGroup=cpaeWebAuthCriticalGroup, cpaeMacAuthBypassPortInitialize=cpaeMacAuthBypassPortInitialize, cpaeHostSessionIdGroup=cpaeHostSessionIdGroup, cpaeNoAuthFailVlanNotifEnableGrp=cpaeNoAuthFailVlanNotifEnableGrp, cpaeMacAuthBypassViolation=cpaeMacAuthBypassViolation, cpaePortIpDevTrackConfGroup=cpaePortIpDevTrackConfGroup, cpaeNoAuthFailVlanNotifGroup=cpaeNoAuthFailVlanNotifGroup, cpaeHostInfoHostIndex=cpaeHostInfoHostIndex, cpaeHostPostureTokenStr=cpaeHostPostureTokenStr, cpaeCompliance2=cpaeCompliance2, cpaeWebAuthPortEntry=cpaeWebAuthPortEntry, cpaeUserGroupUserAddrType=cpaeUserGroupUserAddrType, cpaePortIpDevTrackConfigTable=cpaePortIpDevTrackConfigTable, cpaeCompliance6=cpaeCompliance6, cpaeMabPortIpDevTrackConfTable=cpaeMabPortIpDevTrackConfTable, cpaeHostInfoAddr=cpaeHostInfoAddr, cpaeSuppHostInfoTable=cpaeSuppHostInfoTable, cpaeGuestVlanNumber=cpaeGuestVlanNumber, cpaeAuthFailVlanNotifEnableGrp=cpaeAuthFailVlanNotifEnableGrp, cpaeAuthReAuthMax=cpaeAuthReAuthMax, cpaeWebAuthHostSessionTimeLeft=cpaeWebAuthHostSessionTimeLeft, cpaeAuthConfigGroup=cpaeAuthConfigGroup, cpaeMacAuthBypassPortUrlRedirect=cpaeMacAuthBypassPortUrlRedirect, cpaeWebAuthMaxRetries=cpaeWebAuthMaxRetries, cpaeAuthPaeState=cpaeAuthPaeState, cpaeDot1xSuppToGuestVlanGroup=cpaeDot1xSuppToGuestVlanGroup, cpaeAuthConfigGroup4=cpaeAuthConfigGroup4, cpaeHostInfoAddrType=cpaeHostInfoAddrType, cpaeCriticalEapolConfigGroup=cpaeCriticalEapolConfigGroup, cpaeGuestVlanGroup2=cpaeGuestVlanGroup2, cpaeMultipleHost=cpaeMultipleHost, cpaePortAuthFailVlanGroup2=cpaePortAuthFailVlanGroup2, cpaeAuthFailUserName=cpaeAuthFailUserName, cpaeMabPortIpDevTrackConfEntry=cpaeMabPortIpDevTrackConfEntry, cpaeWebAuthAaaSessionPeriod=cpaeWebAuthAaaSessionPeriod, cpaeAuthReAuthPeriodSrcAdmin=cpaeAuthReAuthPeriodSrcAdmin, cpaeHostInfoGroup2=cpaeHostInfoGroup2, cpaeMacAuthBypassGroup=cpaeMacAuthBypassGroup, cpaeMIBConformance=cpaeMIBConformance, cpaeCompliance3=cpaeCompliance3, cpaeNoGuestVlanNotifGroup=cpaeNoGuestVlanNotifGroup, cpaeMacAuthBypassPortAuthState=cpaeMacAuthBypassPortAuthState, cpaeAuthReAuthPeriodOper=cpaeAuthReAuthPeriodOper, cpaePortEapolTestResult=cpaePortEapolTestResult, cpaeHostPostureTokenGroup=cpaeHostPostureTokenGroup, cpaePortEntry=cpaePortEntry, cpaeNoAuthFailVlanNotif=cpaeNoAuthFailVlanNotif, cpaeWebAuthPortEnabled=cpaeWebAuthPortEnabled, cpaeGuestVlanId=cpaeGuestVlanId, cpaeHostBackendState=cpaeHostBackendState, cpaeSuppPortCredentialProfileName=cpaeSuppPortCredentialProfileName, cpaeShutdownTimeout=cpaeShutdownTimeout, cpaeCriticalRecoveryDelay=cpaeCriticalRecoveryDelay, cpaeHostInfoTable=cpaeHostInfoTable, cpaeHostAuthInfoGroup=cpaeHostAuthInfoGroup, cpaeMacAuthBypassPortPostureTok=cpaeMacAuthBypassPortPostureTok, cpaeNotificationControl=cpaeNotificationControl, cpaeMabAuditInfoGroup=cpaeMabAuditInfoGroup, cpaeAuthFailVlanMaxAttempts=cpaeAuthFailVlanMaxAttempts, cpaeSuppHostInfoGroup=cpaeSuppHostInfoGroup, cpaeMacAuthBypassGroup2=cpaeMacAuthBypassGroup2, cpaeWebAuthPortInitialize=cpaeWebAuthPortInitialize, cpaePortEntryGroup=cpaePortEntryGroup, cpaeWebAuthUnAuthTimeoutGroup=cpaeWebAuthUnAuthTimeoutGroup, cpaeWebAuthUnAuthStateTimeout=cpaeWebAuthUnAuthStateTimeout, cpaeAuthFailUserEntry=cpaeAuthFailUserEntry, cpaeCriticalConfig=cpaeCriticalConfig, cpaeGlobalAuthFailMaxAttempts=cpaeGlobalAuthFailMaxAttempts, cpaePortEapolTestEntry=cpaePortEapolTestEntry, cpaeGuestVlanGroup=cpaeGuestVlanGroup)
