#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-FrameRelayIsdnMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-FrameRelayIsdnMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
mscFrUniIndex, mscFrUni = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-FrameRelayUniMIB", "mscFrUniIndex", "mscFrUni")
Counter32, Unsigned32, RowStatus, StorageType, DisplayString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Counter32", "Unsigned32", "RowStatus", "StorageType", "DisplayString")
DigitString, NonReplicated = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "DigitString", "NonReplicated")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, ModuleIdentity, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, MibIdentifier, Unsigned32, Bits, Integer32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "ModuleIdentity", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Bits", "Integer32", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
frameRelayIsdnMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122))
mscFrUniIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100))
mscFrUniIsdnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 1), )
if mibBuilder.loadTexts: mscFrUniIsdnRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnRowStatusTable.setDescription('This entry controls the addition and deletion of mscFrUniIsdn components.')
mscFrUniIsdnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FrameRelayUniMIB", "mscFrUniIndex"), (0, "Nortel-MsCarrier-MscPassport-FrameRelayIsdnMIB", "mscFrUniIsdnIndex"))
if mibBuilder.loadTexts: mscFrUniIsdnRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnRowStatusEntry.setDescription('A single entry in the table represents a single mscFrUniIsdn component.')
mscFrUniIsdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFrUniIsdnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscFrUniIsdn components. These components can be added and deleted.')
mscFrUniIsdnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscFrUniIsdnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnStorageType.setDescription('This variable represents the storage type value for the mscFrUniIsdn tables.')
mscFrUniIsdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscFrUniIsdnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnIndex.setDescription('This variable represents the index for the mscFrUniIsdn tables.')
mscFrUniIsdnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 11), )
if mibBuilder.loadTexts: mscFrUniIsdnProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnProvTable.setDescription('This group contains the provisionable attributes of the Isdn component.')
mscFrUniIsdnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FrameRelayUniMIB", "mscFrUniIndex"), (0, "Nortel-MsCarrier-MscPassport-FrameRelayIsdnMIB", "mscFrUniIsdnIndex"))
if mibBuilder.loadTexts: mscFrUniIsdnProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnProvEntry.setDescription('An entry in the mscFrUniIsdnProvTable.')
mscFrUniIsdnT320 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFrUniIsdnT320.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnT320.setDescription('This attribute specifies the waiting time for a silent B-Channel (no active VCs associated with the FrUni) to be disconnected and made available. Default is 60 seconds. 0 means t320 will never timeout.')
mscFrUniIsdnAddressSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("isdnDna", 0), ("normalBehavior", 1))).clone('normalBehavior')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFrUniIsdnAddressSignalling.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnAddressSignalling.setDescription('This attribute defines whether the ISDN Calling Party Number is to be signalled to the remote DTE during an SVC call establishment. Otherwise, no changes to the current behavior of SVC call establishement (i.e., Passport Dna is used in the calling party number information element).')
mscFrUniIsdnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12), )
if mibBuilder.loadTexts: mscFrUniIsdnOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnOperTable.setDescription('This group contains the operational attributes of the Isdn component.')
mscFrUniIsdnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FrameRelayUniMIB", "mscFrUniIndex"), (0, "Nortel-MsCarrier-MscPassport-FrameRelayIsdnMIB", "mscFrUniIsdnIndex"))
if mibBuilder.loadTexts: mscFrUniIsdnOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnOperEntry.setDescription('An entry in the mscFrUniIsdnOperTable.')
mscFrUniIsdnDataSigChan = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnDataSigChan.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnDataSigChan.setDescription('This attribute indicates the instance number of the dataSigChan component controlling the allocation of this FrUni Isdn component.')
mscFrUniIsdnBChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("busy", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnBChannelState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnBChannelState.setDescription('This attribute indicates the state of the B-Channel. If the value is idle it means that no VCs are connected and this B-Channel is available. If the value is busy it means this B-Channel has been allocated and is not available. If the value is disabled it means the application interface or the port is locked or disabled.')
mscFrUniIsdnLastUsedCgpn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnLastUsedCgpn.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnLastUsedCgpn.setDescription('This attribute indicates the calling party number currently using the B-Channel. When the B-Channel is free, the null string is displayed.')
mscFrUniIsdnBChanIntState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isdnInit", 0), ("waitAccEnable", 1), ("waitLnsResponse", 2), ("waitFramerData", 3), ("enabling", 4), ("waitAccRegAck", 5), ("up", 6), ("down", 7), ("releasing", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnBChanIntState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnBChanIntState.setDescription('Debug information')
mscFrUniIsdnActiveVirtualCircuitsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 71, 100, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFrUniIsdnActiveVirtualCircuitsCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscFrUniIsdnActiveVirtualCircuitsCount.setDescription('Current number of virtual circuits (switched and permanent) in data transfer.')
frameRelayIsdnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 1))
frameRelayIsdnGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 1, 1))
frameRelayIsdnGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 1, 1, 3))
frameRelayIsdnGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 1, 1, 3, 2))
frameRelayIsdnCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 3))
frameRelayIsdnCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 3, 1))
frameRelayIsdnCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 3, 1, 3))
frameRelayIsdnCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 122, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-FrameRelayIsdnMIB", mscFrUniIsdnProvTable=mscFrUniIsdnProvTable, mscFrUniIsdnAddressSignalling=mscFrUniIsdnAddressSignalling, mscFrUniIsdnRowStatus=mscFrUniIsdnRowStatus, mscFrUniIsdnDataSigChan=mscFrUniIsdnDataSigChan, mscFrUniIsdnLastUsedCgpn=mscFrUniIsdnLastUsedCgpn, mscFrUniIsdnOperTable=mscFrUniIsdnOperTable, mscFrUniIsdnRowStatusTable=mscFrUniIsdnRowStatusTable, mscFrUniIsdnRowStatusEntry=mscFrUniIsdnRowStatusEntry, mscFrUniIsdnComponentName=mscFrUniIsdnComponentName, frameRelayIsdnGroupCA02=frameRelayIsdnGroupCA02, mscFrUniIsdnStorageType=mscFrUniIsdnStorageType, mscFrUniIsdnIndex=mscFrUniIsdnIndex, frameRelayIsdnMIB=frameRelayIsdnMIB, mscFrUniIsdnActiveVirtualCircuitsCount=mscFrUniIsdnActiveVirtualCircuitsCount, mscFrUniIsdnProvEntry=mscFrUniIsdnProvEntry, mscFrUniIsdnBChanIntState=mscFrUniIsdnBChanIntState, mscFrUniIsdnOperEntry=mscFrUniIsdnOperEntry, frameRelayIsdnGroupCA02A=frameRelayIsdnGroupCA02A, mscFrUniIsdnT320=mscFrUniIsdnT320, frameRelayIsdnCapabilitiesCA02A=frameRelayIsdnCapabilitiesCA02A, frameRelayIsdnGroup=frameRelayIsdnGroup, frameRelayIsdnCapabilitiesCA02=frameRelayIsdnCapabilitiesCA02, mscFrUniIsdnBChannelState=mscFrUniIsdnBChannelState, frameRelayIsdnCapabilitiesCA=frameRelayIsdnCapabilitiesCA, frameRelayIsdnGroupCA=frameRelayIsdnGroupCA, mscFrUniIsdn=mscFrUniIsdn, frameRelayIsdnCapabilities=frameRelayIsdnCapabilities)
