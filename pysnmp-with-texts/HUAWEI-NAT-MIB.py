#
# PySNMP MIB module HUAWEI-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, Bits, TimeTicks, Unsigned32, Gauge32, MibIdentifier, Counter64, ModuleIdentity, Integer32, ObjectIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "TimeTicks", "Unsigned32", "Gauge32", "MibIdentifier", "Counter64", "ModuleIdentity", "Integer32", "ObjectIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
hwNATCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1))
if mibBuilder.loadTexts: hwNATCommon.setLastUpdated('200303180900Z')
if mibBuilder.loadTexts: hwNATCommon.setOrganization('Huawei Technologies Co., Ltd. ')
if mibBuilder.loadTexts: hwNATCommon.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwNATCommon.setDescription(' V1.00 The NAT mib is for all datacomm product.. ')
class SessionType(TextualConvention, Integer32):
    description = 'The type of session.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))
    namedValues = NamedValues(("dnsSession", 1), ("finrstSession", 2), ("fragSession", 3), ("ftpSession", 4), ("ftpDataSession", 5), ("h225Session", 6), ("h245Session", 7), ("h323rtcpSession", 8), ("h323rtpSession", 9), ("h323t120Session", 10), ("httpSession", 11), ("hwccSession", 12), ("icmpSession", 13), ("ilsSession", 14), ("netbiosdataSession", 15), ("netbiosnameSession", 16), ("netbiosSession", 17), ("rasSession", 18), ("rtcpSession", 19), ("rtpSession", 20), ("rtspSession", 21), ("smtpSession", 22), ("synSession", 23), ("tcpSession", 24), ("telnetSession", 25), ("pptpSession", 26), ("udpSession", 27), ("qqSession", 28), ("msnSession", 29), ("userdefineSession", 30), ("sipSession", 31), ("siprtpSession", 32), ("siptrcpSession", 33), ("greSesion", 34))

class AlgType(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("h323Alg", 1), ("dnsAlg", 2), ("netbiosAlg", 3), ("ilsAlg", 4), ("ftpAlg", 5), ("icmpAlg", 6), ("pptpAlg", 7), ("hwccAlg", 8), ("qqAlg", 9), ("msnAlg", 10), ("userdefineAlg", 11))

class NatType(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("nat", 1), ("pat", 2), ("easyIP", 3))

hwNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7))
hwNatMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1))
hwNatAddressGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1), )
if mibBuilder.loadTexts: hwNatAddressGroupInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwNatAddressGroupInfoTable.setDescription(' NAT address pool inforation table ')
hwNatAddressGroupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-NAT-MIB", "hwNatAddrGrpIndex"))
if mibBuilder.loadTexts: hwNatAddressGroupInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatAddressGroupInfoEntry.setDescription(' NAT address pool inforation table entry. ')
hwNatAddrGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwNatAddrGrpIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpIndex.setDescription(' The index of address pool This item is index. ')
hwNatAddrGrpBeginningIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatAddrGrpBeginningIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpBeginningIpAddr.setDescription(' The beginning IP address of address pool ')
hwNatAddrGrpEndingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatAddrGrpEndingIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpEndingIpAddr.setDescription(' The ending IP address of address pool ')
hwNatAddrGrpRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrGrpRefCount.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpRefCount.setDescription(' This address pool reference count. ')
hwNatAddrGrpRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatAddrGrpRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpRowstatus.setDescription(' Row status Only support CreateAndGo and Destroy. ')
hwNatAddrGrpVrrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatAddrGrpVrrpID.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpVrrpID.setDescription(' VRRP ID of address pool ')
hwNatAddrGrpVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('--')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatAddrGrpVrfName.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrGrpVrfName.setDescription(' The VPN Name of address pool ')
hwNatInternalServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2), )
if mibBuilder.loadTexts: hwNatInternalServerTable.setStatus('current')
if mibBuilder.loadTexts: hwNatInternalServerTable.setDescription(' The NAT internal server information table. ')
hwNatInternalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-MIB", "hwNatServerIndex"))
if mibBuilder.loadTexts: hwNatInternalServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatInternalServerEntry.setDescription(' The NAT internal server information table entry. ')
hwNatServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: hwNatServerIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatServerIndex.setDescription(' The index of NAT server array. This item is index. ')
hwNatServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatServerProtocol.setDescription(' The protocal number. ')
hwNatServerInsideBeginIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerInsideBeginIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatServerInsideBeginIpAddr.setDescription(' The beginning local IP address of NAT servers. ')
hwNatServerInsideEndIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerInsideEndIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatServerInsideEndIpAddr.setDescription(' The ending local IP address of NAT servers. ')
hwNatServerInsidePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerInsidePort.setStatus('current')
if mibBuilder.loadTexts: hwNatServerInsidePort.setDescription(' The local port number of NAT servers. ')
hwNatServerOutsideIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerOutsideIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatServerOutsideIpAddr.setDescription(' The global IP address of NAT server. ')
hwNatServerOutsideBeginPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerOutsideBeginPort.setStatus('current')
if mibBuilder.loadTexts: hwNatServerOutsideBeginPort.setDescription(' The global beginning port of NAT server. ')
hwNatServerOutsideEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerOutsideEndPort.setStatus('current')
if mibBuilder.loadTexts: hwNatServerOutsideEndPort.setDescription(' The global ending port of NAT server. ')
hwNatServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwNatServerRowStatus.setDescription(' Row status Only support CreateAndGo and Destroy. ')
hwNatServerVrrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerVrrpID.setStatus('current')
if mibBuilder.loadTexts: hwNatServerVrrpID.setDescription(' VRRP ID of Inner Server ')
hwNatServerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('--')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatServerVrfName.setStatus('current')
if mibBuilder.loadTexts: hwNatServerVrfName.setDescription(' The VPN Name of Inner Server ')
hwNatTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 3), )
if mibBuilder.loadTexts: hwNatTimeoutTable.setStatus('current')
if mibBuilder.loadTexts: hwNatTimeoutTable.setDescription(' The NAT session aging time table. ')
hwNatTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-NAT-MIB", "hwNatTimeoutSessionType"))
if mibBuilder.loadTexts: hwNatTimeoutEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatTimeoutEntry.setDescription(' The NAT session aging time table entry. ')
hwNatTimeoutSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 3, 1, 1), SessionType())
if mibBuilder.loadTexts: hwNatTimeoutSessionType.setStatus('current')
if mibBuilder.loadTexts: hwNatTimeoutSessionType.setDescription(' The protocal type. ')
hwNatTimeoutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNatTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: hwNatTimeoutValue.setDescription(' aging time, tcp:240, udp:40, icmp:20 ')
hwNatAlgEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 4), )
if mibBuilder.loadTexts: hwNatAlgEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgEnableTable.setDescription(' NAT ALG enable table ')
hwNatAlgEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-NAT-MIB", "hwNatAlgEnableProtocol"))
if mibBuilder.loadTexts: hwNatAlgEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgEnableEntry.setDescription(' nat alg table entry. ')
hwNatAlgEnableProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 4, 1, 1), AlgType())
if mibBuilder.loadTexts: hwNatAlgEnableProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgEnableProtocol.setDescription(' The alg protocal type. ')
hwNatAlgEnableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNatAlgEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgEnableFlag.setDescription(' enable or disable. true is enable,false is disable. ')
hwNatMonitorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2))
hwNatMonitorGlobalHash = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 1))
hwNatHashStatPatCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatHashStatPatCount.setStatus('current')
if mibBuilder.loadTexts: hwNatHashStatPatCount.setDescription(' The hash count NAT with pat. ')
hwNatHashStatNoPatCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatHashStatNoPatCount.setStatus('current')
if mibBuilder.loadTexts: hwNatHashStatNoPatCount.setDescription(' The hash count NAT with no-pat. ')
hwNatHashStatServerHashCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatHashStatServerHashCount.setStatus('current')
if mibBuilder.loadTexts: hwNatHashStatServerHashCount.setDescription(' The hash count of NAT internal server. ')
hwNatHashStatFragHashCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatHashStatFragHashCount.setStatus('current')
if mibBuilder.loadTexts: hwNatHashStatFragHashCount.setDescription(' The hash count of fragment packets. ')
hwNatMonitorGlobalPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 2))
hwNatStatPktsCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStatPktsCount.setStatus('current')
if mibBuilder.loadTexts: hwNatStatPktsCount.setDescription(' The packet count of success address translation. ')
hwNatStatFailedPktsCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStatFailedPktsCount.setStatus('current')
if mibBuilder.loadTexts: hwNatStatFailedPktsCount.setDescription(' The packet count of failed address translation. ')
hwNatStatTCPPktsCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStatTCPPktsCount.setStatus('current')
if mibBuilder.loadTexts: hwNatStatTCPPktsCount.setDescription(' The TCP packet count of success address translation. ')
hwNatStatUDPPktsCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStatUDPPktsCount.setStatus('current')
if mibBuilder.loadTexts: hwNatStatUDPPktsCount.setDescription(' The UDP packet count of success address translation. ')
hwNatStatICMPPktsCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStatICMPPktsCount.setStatus('current')
if mibBuilder.loadTexts: hwNatStatICMPPktsCount.setDescription(' The ICMP packet count of success address translation. ')
hwNatConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 3))
hwNatMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 3, 1))
hwNatCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 3, 1, 1)).setObjects(("HUAWEI-NAT-MIB", "hwNatAddrGrpBeginningIpAddr"), ("HUAWEI-NAT-MIB", "hwNatAddrGrpEndingIpAddr"), ("HUAWEI-NAT-MIB", "hwNatAddrGrpRowstatus"), ("HUAWEI-NAT-MIB", "hwNatAddrGrpVrrpID"), ("HUAWEI-NAT-MIB", "hwNatAddrGrpVrfName"), ("HUAWEI-NAT-MIB", "hwNatServerProtocol"), ("HUAWEI-NAT-MIB", "hwNatServerInsideBeginIpAddr"), ("HUAWEI-NAT-MIB", "hwNatServerInsideEndIpAddr"), ("HUAWEI-NAT-MIB", "hwNatServerInsidePort"), ("HUAWEI-NAT-MIB", "hwNatServerRowStatus"), ("HUAWEI-NAT-MIB", "hwNatTimeoutValue"), ("HUAWEI-NAT-MIB", "hwNatAlgEnableFlag"), ("HUAWEI-NAT-MIB", "hwNatAddrGrpRefCount"), ("HUAWEI-NAT-MIB", "hwNatServerOutsideIpAddr"), ("HUAWEI-NAT-MIB", "hwNatServerOutsideBeginPort"), ("HUAWEI-NAT-MIB", "hwNatServerOutsideEndPort"), ("HUAWEI-NAT-MIB", "hwNatServerVrrpID"), ("HUAWEI-NAT-MIB", "hwNatServerVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatCfgGroup = hwNatCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatCfgGroup.setDescription('Description.')
hwNatMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 1, 3, 1, 2)).setObjects(("HUAWEI-NAT-MIB", "hwNatHashStatPatCount"), ("HUAWEI-NAT-MIB", "hwNatHashStatNoPatCount"), ("HUAWEI-NAT-MIB", "hwNatHashStatServerHashCount"), ("HUAWEI-NAT-MIB", "hwNatHashStatFragHashCount"), ("HUAWEI-NAT-MIB", "hwNatStatPktsCount"), ("HUAWEI-NAT-MIB", "hwNatStatFailedPktsCount"), ("HUAWEI-NAT-MIB", "hwNatStatTCPPktsCount"), ("HUAWEI-NAT-MIB", "hwNatStatUDPPktsCount"), ("HUAWEI-NAT-MIB", "hwNatStatICMPPktsCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatMonitorGroup = hwNatMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatMonitorGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-NAT-MIB", hwNatStatFailedPktsCount=hwNatStatFailedPktsCount, hwNatServerVrfName=hwNatServerVrfName, hwNatServerProtocol=hwNatServerProtocol, hwNatServerOutsideEndPort=hwNatServerOutsideEndPort, hwNatServerOutsideIpAddr=hwNatServerOutsideIpAddr, hwNatTimeoutValue=hwNatTimeoutValue, hwNatServerIndex=hwNatServerIndex, hwNatHashStatNoPatCount=hwNatHashStatNoPatCount, hwNatAddressGroupInfoEntry=hwNatAddressGroupInfoEntry, AlgType=AlgType, hwNatMonitorGroup=hwNatMonitorGroup, hwNatMonitorGlobalPkts=hwNatMonitorGlobalPkts, hwNATCommon=hwNATCommon, hwNatCfgGroup=hwNatCfgGroup, hwNatStatPktsCount=hwNatStatPktsCount, hwNatAddrGrpIndex=hwNatAddrGrpIndex, hwNatServerOutsideBeginPort=hwNatServerOutsideBeginPort, hwNatMonitorObjects=hwNatMonitorObjects, hwNatTimeoutSessionType=hwNatTimeoutSessionType, hwNatServerInsidePort=hwNatServerInsidePort, hwNatTimeoutTable=hwNatTimeoutTable, hwNatMibGroups=hwNatMibGroups, hwNatAlgEnableProtocol=hwNatAlgEnableProtocol, hwNatHashStatServerHashCount=hwNatHashStatServerHashCount, hwNatHashStatPatCount=hwNatHashStatPatCount, hwNatAddrGrpEndingIpAddr=hwNatAddrGrpEndingIpAddr, PYSNMP_MODULE_ID=hwNATCommon, hwNatAddrGrpRefCount=hwNatAddrGrpRefCount, hwNatInternalServerEntry=hwNatInternalServerEntry, hwNatAddrGrpRowstatus=hwNatAddrGrpRowstatus, hwNatTimeoutEntry=hwNatTimeoutEntry, hwNatAlgEnableEntry=hwNatAlgEnableEntry, hwNatServerRowStatus=hwNatServerRowStatus, hwNatServerInsideBeginIpAddr=hwNatServerInsideBeginIpAddr, hwNatStatICMPPktsCount=hwNatStatICMPPktsCount, hwNatConformance=hwNatConformance, hwNatMonitorGlobalHash=hwNatMonitorGlobalHash, hwNatAddrGrpVrrpID=hwNatAddrGrpVrrpID, NatType=NatType, hwNatInternalServerTable=hwNatInternalServerTable, hwNatHashStatFragHashCount=hwNatHashStatFragHashCount, hwNatMibObjects=hwNatMibObjects, SessionType=SessionType, hwNatServerInsideEndIpAddr=hwNatServerInsideEndIpAddr, hwNatAlgEnableTable=hwNatAlgEnableTable, hwNatAddrGrpBeginningIpAddr=hwNatAddrGrpBeginningIpAddr, hwNatAddrGrpVrfName=hwNatAddrGrpVrfName, hwNatServerVrrpID=hwNatServerVrrpID, hwNAT=hwNAT, hwNatStatTCPPktsCount=hwNatStatTCPPktsCount, hwNatAddressGroupInfoTable=hwNatAddressGroupInfoTable, hwNatAlgEnableFlag=hwNatAlgEnableFlag, hwNatStatUDPPktsCount=hwNatStatUDPPktsCount)
