#
# PySNMP MIB module Wellfleet-ARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, TimeTicks, ObjectIdentity, ModuleIdentity, Counter32, Gauge32, NotificationType, MibIdentifier, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Counter32", "Gauge32", "NotificationType", "MibIdentifier", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfArpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfArpGroup")
wfArpBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 1))
wfArpBaseCreate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpBaseCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpBaseCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete ARP.')
wfArpBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpBaseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpBaseEnable.setDescription('Enable/Disable Parameter indicates whether this ARP record is enabled or disabled.')
wfArpBaseForwarding = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notforwarding", 2))).clone('forwarding')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpBaseForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpBaseForwarding.setDescription('Equivalent to IP Host Only. This attribute says that ARP should send unknown addresses to the bridge for further handling')
wfArpBaseNonlocalSrc = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("drop", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpBaseNonlocalSrc.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpBaseNonlocalSrc.setDescription('DROP_LOG/DROP Parameter indicates whether or not log an invalid ARP source address when processing an ARP request. If DROP_LOG is set, log the invalid ARP source address; if DROP is set, do not log it. In both cases, the ARP request from the invalid source address will be droped.')
wfArpBaseNonlocalDest = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("accept", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpBaseNonlocalDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpBaseNonlocalDest.setDescription('DEST_DROP/DEST_ACCEPT Parameter indicates whether or not drop/accept an ARP Request in which the destination address is in a different network/subnetwork from the source address. If DEST_DROP is set, drop the ARP Request; If DEST_ACCEPT is set, process the ARP Request. The default is DEST_DROP.')
wfArpIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 2), )
if mibBuilder.loadTexts: wfArpIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpIntfTable.setDescription('List of configured ARP interfaces')
wfArpIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 2, 1), ).setIndexNames((0, "Wellfleet-ARP-MIB", "wfArpCctno"))
if mibBuilder.loadTexts: wfArpIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpIntfEntry.setDescription('A description of an ARP interface')
wfArpCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpCreate.setDescription('Indicates whether this ARP intf record is to be deleted or created')
wfArpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpEnable.setDescription('Indicates whether this ARP intf record is to be enabled or disabled')
wfArpCctno = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfArpCctno.setStatus('mandatory')
if mibBuilder.loadTexts: wfArpCctno.setDescription('Which Circuit arp should run on')
mibBuilder.exportSymbols("Wellfleet-ARP-MIB", wfArpBaseNonlocalSrc=wfArpBaseNonlocalSrc, wfArpCreate=wfArpCreate, wfArpIntfTable=wfArpIntfTable, wfArpCctno=wfArpCctno, wfArpBaseCreate=wfArpBaseCreate, wfArpBase=wfArpBase, wfArpIntfEntry=wfArpIntfEntry, wfArpBaseNonlocalDest=wfArpBaseNonlocalDest, wfArpBaseForwarding=wfArpBaseForwarding, wfArpEnable=wfArpEnable, wfArpBaseEnable=wfArpBaseEnable)
