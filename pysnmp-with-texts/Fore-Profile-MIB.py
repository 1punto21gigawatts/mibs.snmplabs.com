#
# PySNMP MIB module Fore-Profile-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Profile-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
frameInternetworking, = mibBuilder.importSymbols("Fore-Common-MIB", "frameInternetworking")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, iso, MibIdentifier, Gauge32, Bits, Unsigned32, Counter32, TimeTicks, Counter64, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "iso", "MibIdentifier", "Gauge32", "Bits", "Unsigned32", "Counter32", "TimeTicks", "Counter64", "IpAddress", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
foreProfileModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 16, 4))
if mibBuilder.loadTexts: foreProfileModule.setLastUpdated('9704011044-0400')
if mibBuilder.loadTexts: foreProfileModule.setOrganization('FORE')
if mibBuilder.loadTexts: foreProfileModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreProfileModule.setDescription('This MIB module defines several profile tables that facilitate the creation of FR/ATM and FUNI services and connections.')
profileLmiTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1), )
if mibBuilder.loadTexts: profileLmiTable.setStatus('current')
if mibBuilder.loadTexts: profileLmiTable.setDescription('The LMI profile table.')
profileLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileLmiIndex"))
if mibBuilder.loadTexts: profileLmiEntry.setStatus('current')
if mibBuilder.loadTexts: profileLmiEntry.setDescription('An entry in the LMI profile table.')
profileLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileLmiIndex.setStatus('current')
if mibBuilder.loadTexts: profileLmiIndex.setDescription('This objects identifies the index of a profile entry in this table.')
profileLmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileLmiRowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileLmiName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiName.setStatus('current')
if mibBuilder.loadTexts: profileLmiName.setDescription('This object specifies the symbolic name assigned to this profile for user reference.')
profileLmiFlavour = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("t1617d", 3), ("t1617b", 4), ("q933a", 5))).clone('q933a')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiFlavour.setStatus('current')
if mibBuilder.loadTexts: profileLmiFlavour.setDescription('This object specifies the type of the LMI protocol used over this FR service. This object corresponds to frLportVCSigProtocol in RFC1604 and frDlcmiState in RFC1315.')
profileLmiT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiT391.setStatus('current')
if mibBuilder.loadTexts: profileLmiT391.setDescription('The value of this object identifies the User-side T391 link integrity verification polling timer value (in seconds) for this UNI/NNI logical port. If the logical port is not performing user-side procedures, then this value is equal to noSuchName. This object applies to Q.933 Annex A and T1.617 Annex D. This object corresponds to frMgtVCSigUserT391 in RFC1604 and frDlcmiPollingInterval in RFC1315.')
profileLmiN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiN391.setStatus('current')
if mibBuilder.loadTexts: profileLmiN391.setDescription('The value of this object identifies the User-side N391 full status polling cycle value for this UNI/NNI logical port. If the logical port is not performing user-side procedures, then this value is equal to noSuchName. This object applies to Q.933 Annex A and T1.617 Annex D. This object corresponds to frMgtVCSigUserN391 in RFC1604 and frDlcmiFullEnquiryInterval.')
profileLmiT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiT392.setStatus('current')
if mibBuilder.loadTexts: profileLmiT392.setDescription('The value of this object identifies the Network- side T392 polling verification timer value in seconds (nT2 for LMI) for this UNI/NNI logical port. If the logical port is not performing network-side procedures, then this value is equal to noSuchName. This object applies to Q.933 Annex A, LMI and T1.617 Annex D. This object corresponds to frMgtVCSigNetT392 in RFC1604.')
profileLmiN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiN392.setStatus('current')
if mibBuilder.loadTexts: profileLmiN392.setDescription('The value of this object identifies the Network- side N392 error threshold value (nN2 for LMI) for this UNI/NNI logical port. If the logical port is not performing network-side procedures, then this value is equal to noSuchName. This object applies to Q.933 Annex A, T1.617 Annex D and LMI. This object corresponds to frMgtVCSigNetN392 and frMgtVCSigUserN392 when the LMI role is network and user respectively in RFC1604, and frDlcmiErrorThreshold in RFC1315.')
profileLmiN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiN393.setStatus('current')
if mibBuilder.loadTexts: profileLmiN393.setDescription('The value of this object identifies the Network- side N393 monitored events count value (nN3 for LMI) for this UNI/NNI logical port. If the logical port is not performing network-side procedures, then this value is equal to noSuchName. This object applies to Q.933 Annex A, LMI and T1.617 Annex D. This object corresponds to frMgtVCSigNetN393 and frMgtVCSigUserN393 when the LMI role is network and user respectively in RFC1604, and frDlcmiMonitoredEvents in RFC1315.')
profileLminT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLminT3.setStatus('current')
if mibBuilder.loadTexts: profileLminT3.setDescription('The value of this object identifies the Network-side nT3 timer in seconds (for nN4 status enquires received) value for this FR service. This object applies only to LMI(STRATACOM) flavour. The allowable values include 5, 10, 15, 20, 25 and 30 seconds. This object corresponds to frMgtVCSigNetnT3 in RFC1604.')
profileLmiDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("bi", 2))).clone('bi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiDirection.setStatus('current')
if mibBuilder.loadTexts: profileLmiDirection.setDescription('The value of this object identifies the Local In-Channel Signaling Procedure that is used for this UNI/NNI logical port. The UNI/NNI logical port can be performing only user-to-network network-side procedures or bidirectional procedures.This object corresponds to frMgtVCSigProced in RFC1604.')
profileLmiRole = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileLmiRole.setStatus('current')
if mibBuilder.loadTexts: profileLmiRole.setDescription('This object specifies the role of operation of this FR service - user (DTE) or network (DCE)')
profileLmiRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileLmiRefCnt.setStatus('current')
if mibBuilder.loadTexts: profileLmiRefCnt.setDescription('This object identifies the number of services that are currently referring to this profile.')
profileFrRateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2), )
if mibBuilder.loadTexts: profileFrRateTable.setStatus('current')
if mibBuilder.loadTexts: profileFrRateTable.setDescription('The FR rate profile table.')
profileFrRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileFrRateIndex"))
if mibBuilder.loadTexts: profileFrRateEntry.setStatus('current')
if mibBuilder.loadTexts: profileFrRateEntry.setDescription('An entry in the FR rate profile table.')
profileFrRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFrRateIndex.setStatus('current')
if mibBuilder.loadTexts: profileFrRateIndex.setDescription('This object identifies the index of a profile entry in this table.')
profileFrRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileFrRateRowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileFrRateName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateName.setStatus('current')
if mibBuilder.loadTexts: profileFrRateName.setDescription('This object identifies the symbolic name assigned to this profile used for user reference.')
profileFrRateInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateInBc.setStatus('current')
if mibBuilder.loadTexts: profileFrRateInBc.setDescription('This object represents the committed burst size (bits) in the ingress direction of a connection. This object corresponds to frPVCEndptInBc in RFC1604 and frCircuitCommittedBurst in RFC1315.')
profileFrRateInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateInBe.setStatus('current')
if mibBuilder.loadTexts: profileFrRateInBe.setDescription('This object represents the excess burst size (bits) in the ingress direction of a connection. This object corresponds to frPVCEndptInBe in RFC1604 and frCircuitExcessBurst in RFC1315.')
profileFrRateInCir = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateInCir.setStatus('current')
if mibBuilder.loadTexts: profileFrRateInCir.setDescription('This object represents the committed information rate (kbps) in the ingress direction of a connection. This object corresponds to frPVCEndptInCIR in RFC1604 and frCircuitThroughput in RFC1315.')
profileFrRateOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateOutBc.setStatus('current')
if mibBuilder.loadTexts: profileFrRateOutBc.setDescription('This object represents the committed burst size (bits) in the egress direction of a connection. This object corresponds frPVCEndptOutBc in RFC1604.')
profileFrRateOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateOutBe.setStatus('current')
if mibBuilder.loadTexts: profileFrRateOutBe.setDescription('This object represents the excess burst size (bits) in the egress direction of a connection. This object corresponds frPVCEndptOutBe in RFC1604.')
profileFrRateOutCir = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateOutCir.setStatus('current')
if mibBuilder.loadTexts: profileFrRateOutCir.setDescription('This object represents the committed information rate (kbps) in the egress direction of a connection. This object corresponds frPVCEndptOutCIR in RFC1604.')
profileFrRateMinBc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 10), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateMinBc.setStatus('current')
if mibBuilder.loadTexts: profileFrRateMinBc.setDescription('This object represents the minimum committed burst size (bits) which can be set on a connection by rate adaptation.')
profileFrRateCmPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 11), Integer32().clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrRateCmPeriod.setStatus('current')
if mibBuilder.loadTexts: profileFrRateCmPeriod.setDescription('This object represents the time period (msec) during which BECNs are monitored before the rate adaptation mechanism decides to change the current committed burst size in the egress direction.')
profileFrRateRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFrRateRefCnt.setStatus('current')
if mibBuilder.loadTexts: profileFrRateRefCnt.setDescription('This object identifies the number of connections that are currently referring to this profile entry.')
profileFuniTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3), )
if mibBuilder.loadTexts: profileFuniTable.setStatus('current')
if mibBuilder.loadTexts: profileFuniTable.setDescription('The FUNI profile table.')
profileFuniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileFuniIndex"))
if mibBuilder.loadTexts: profileFuniEntry.setStatus('current')
if mibBuilder.loadTexts: profileFuniEntry.setDescription('An entry in the FUNI profile table.')
profileFuniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFuniIndex.setStatus('current')
if mibBuilder.loadTexts: profileFuniIndex.setDescription('This object identifies the index of a profile entry in this table.')
profileFuniRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileFuniRowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileFuniName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniName.setStatus('current')
if mibBuilder.loadTexts: profileFuniName.setDescription('This object specifies the symbolic name assigned to this profile for user reference.')
profileFuniIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniIlmiVpi.setStatus('current')
if mibBuilder.loadTexts: profileFuniIlmiVpi.setDescription('This object represents VPI value used by ILMI over this FUNI interface. This object corresponds to funiIfConfIlmiVpi in FUNI MIB.')
profileFuniIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 5), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniIlmiVci.setStatus('current')
if mibBuilder.loadTexts: profileFuniIlmiVci.setDescription('This object represents VCI value used by ILMI over this FUNI service. This object corresponds to funiIfConfIlmiVci in FUNI MIB.')
profileFuniSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniSigVpi.setStatus('current')
if mibBuilder.loadTexts: profileFuniSigVpi.setDescription('This object represents VPI value used for the signalling channel over this FUNI service. This object corresponds to funiIfConfSigVpi in FUNI MIB.')
profileFuniSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 7), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniSigVci.setStatus('current')
if mibBuilder.loadTexts: profileFuniSigVci.setDescription('This object represents VCI value used for the signalling channel over this FUNI service. This object corresponds to funiIfConfSigVci in FUNI MIB.')
profileFuniMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 63)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniMinVci.setStatus('current')
if mibBuilder.loadTexts: profileFuniMinVci.setDescription('This object represents minimal numeric value allowed to be used as a VCI on any user connection over this FUNI service.')
profileFuniMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 63)).clone(63)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniMaxVci.setStatus('current')
if mibBuilder.loadTexts: profileFuniMaxVci.setDescription('This object represents maximal numeric value allowed to be used as a VCI on any user connection over this FUNI service.')
profileFuniIlmiSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniIlmiSupport.setStatus('current')
if mibBuilder.loadTexts: profileFuniIlmiSupport.setDescription('This object specifies that an ILMI instance is to be supported on this FUNI service if the mode is set to enabled. This object corresponds to funiIfConfIlmiSupport in FUNI MIB.')
profileFuniSigSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniSigSupport.setStatus('current')
if mibBuilder.loadTexts: profileFuniSigSupport.setDescription('This object specifies that a signalling instance is to be supported on this FUNI service if the mode is set to enabled. This object corresponds to funiIfConfSigSupport in FUNI MIB.')
profileFuniOamSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniOamSupport.setStatus('current')
if mibBuilder.loadTexts: profileFuniOamSupport.setDescription('This object specifies that OAM cells and frames are to be transferred on this FUNI service if the mode is set to enabled. This object corresponds to funiIfConfOamSupport in FUNI MIB.')
profileFuniActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniActiveVpiBits.setStatus('current')
if mibBuilder.loadTexts: profileFuniActiveVpiBits.setDescription('The value of this object identifies the maximum number of active VPI bits configured for use at this FUNI interface. At the ATM FUNI, this value will be smaller than or equal to 4 and 8 when the FUNI header size is two and four bytes respectively, as specified by the profile attribute profileFuniConfMode. This object corresponds to atmInterfaceMaxActiveVpiBits in the ATOM MIB.')
profileFuniActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniActiveVciBits.setStatus('current')
if mibBuilder.loadTexts: profileFuniActiveVciBits.setDescription('The value of this object identifies the maximum number of active VCI bits configured for use at this FUNI interface. At the ATM FUNI, this value will be smaller than or equal to 6 and 16 when the FUNI header size is two and four bytes respectively, as specified by the profile attribute profileFuniConfMode. This object corresponds to atmInterfaceMaxActiveVciBits in the ATOM MIB.')
profileFuniConfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode3", 3), ("mode4", 4))).clone('mode1a')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniConfMode.setStatus('current')
if mibBuilder.loadTexts: profileFuniConfMode.setDescription('The value of this object specifies whether a 2 or 4 byte header is present in each FUNI frame header over a FUNI service. For mode1a, mode1b and mode 3, a 2-byte header is used. For mode 4, a 4-byte header is used. This object corresponds to funiIfConfMode in FUNI MIB.')
profileFuniFcsBits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcsBits16", 1), ("fcsBits32", 2))).clone('fcsBits16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniFcsBits.setStatus('current')
if mibBuilder.loadTexts: profileFuniFcsBits.setDescription('This object specifies whether a 16- or 32-bit FCS is used in each FUNI frame header over this FUNI logical interface.')
profileFuniHdrBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdrBytes2", 1), ("hdrBytes4", 2))).clone('hdrBytes2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniHdrBytes.setStatus('current')
if mibBuilder.loadTexts: profileFuniHdrBytes.setDescription('This object specifies whether a 2- or 4-bytes header is used in each FUNI frame header over this FUNI logical interface.')
profileFuniAal34Support = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFuniAal34Support.setStatus('current')
if mibBuilder.loadTexts: profileFuniAal34Support.setDescription('This object specifies whether support for AAL3/4 VCCs shall be allowed on this FUNI logical interface. A FUNI logical interface that cannot support AAL3/4 VCCs must only allow the value disabled(2).')
profileFuniRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFuniRefCnt.setStatus('current')
if mibBuilder.loadTexts: profileFuniRefCnt.setDescription('The value of this object identifies the number of services that are referring to this profile.')
profileFrf8Table = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4), )
if mibBuilder.loadTexts: profileFrf8Table.setStatus('current')
if mibBuilder.loadTexts: profileFrf8Table.setDescription('The FRF.8 profile table.')
profileFrf8Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileFrf8Index"))
if mibBuilder.loadTexts: profileFrf8Entry.setStatus('current')
if mibBuilder.loadTexts: profileFrf8Entry.setDescription('An entry in the FRF.8 profile table.')
profileFrf8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFrf8Index.setStatus('current')
if mibBuilder.loadTexts: profileFrf8Index.setDescription('This object identifies the index of a profile in this table.')
profileFrf8RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8RowStatus.setStatus('current')
if mibBuilder.loadTexts: profileFrf8RowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileFrf8Name = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8Name.setStatus('current')
if mibBuilder.loadTexts: profileFrf8Name.setDescription('This object specifies the symbolic name assigned to this profile for user reference.')
profileFrf8DeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapped", 1), ("ignored", 2))).clone('mapped')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8DeMode.setStatus('current')
if mibBuilder.loadTexts: profileFrf8DeMode.setDescription('If the DE mode is set to mapped, the DE field in the Q922 core frame is mapped to the ATM CLP filled of every cell generated by the segmentation process of the AAL5 PDU containing the information of that frame. Otherwise, the ATM CLP of every ATM cell generated by the segmentation process of the AAL5 PDU containing the information of that frame is set to a constant value specified by the configuration parameter profileFrf8DefaultClp.')
profileFrf8ClpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapped", 1), ("ignored", 2))).clone('mapped')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8ClpMode.setStatus('current')
if mibBuilder.loadTexts: profileFrf8ClpMode.setDescription('If the CLP mode is set to mapped, then the FR/ATM service interworking function will set the DE field of the Q922 core frame, provided that one or more cells belonging to this frame has its CLP field set. Otherwise, the DE field of the Q922 core frame is set to a constant value specified by the configuration parameter profileFrf8DefaultDe.')
profileFrf8FecnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapped", 1), ("ignored", 2))).clone('mapped')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8FecnMode.setStatus('current')
if mibBuilder.loadTexts: profileFrf8FecnMode.setDescription('If the Fecn mode is set to mapped, the FECN field in the Q922 core frame is mapped to the ATM EFCI field of every cell generated by the segmentation process of the AAL5 PDU containing the information of that frame. This mode provides congestion indication to the end-points where higher layer protocol entities might be involved in traffic control mechanisms. Otherwise, the EFCI field of cells generated by the segmentation process of the AAL5 PDU containing the information of the frame is always set to congestion-not-experienced.')
profileFrf8DefaultDe = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8DefaultDe.setStatus('current')
if mibBuilder.loadTexts: profileFrf8DefaultDe.setDescription('This object represents the DE bit value of all generated FR frame headers if the CLP mode is set to ignored.')
profileFrf8DefaultClp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8DefaultClp.setStatus('current')
if mibBuilder.loadTexts: profileFrf8DefaultClp.setDescription('This object represents the CLP bit value of all generated ATM cell headers if the DE mode is set to ignored.')
profileFrf8Protocols = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileFrf8Protocols.setStatus('current')
if mibBuilder.loadTexts: profileFrf8Protocols.setDescription('This object represents a binary map which lists all possible encapsulation translation protocols over this FRF.8 IWF instance. Any combination of the specified encapsulation modes will be supported. The binary map assignment is defined as below: ethernet (0000000000001) ethernetFcs (0000000000010) tokenRing (0000000000100) tokenRingFcs (0000000001000) ipRouted (0000000010000) arp (0000000100000) ipx (0000001000000) sna (0000010000000) fddi (0000100000000) fddiFcs (0001000000000) x.25/75 (0010000000000) 802.6 (0100000000000) routedIso (1000000000000) or any combinations of the binary map. The allowable range of the input is from 0 to 8191. This object corresponds to frf8ProtProtocol in fore-frf8 MIB.')
profileFrf8RefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFrf8RefCnt.setStatus('current')
if mibBuilder.loadTexts: profileFrf8RefCnt.setDescription('The value of this object identifies the number of connections that are currently referring to this profile.')
profileServiceTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5), )
if mibBuilder.loadTexts: profileServiceTable.setStatus('current')
if mibBuilder.loadTexts: profileServiceTable.setDescription('The generic service profile table.')
profileServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileServiceIndex"))
if mibBuilder.loadTexts: profileServiceEntry.setStatus('current')
if mibBuilder.loadTexts: profileServiceEntry.setDescription('An entry in the generic service profile table.')
profileServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileServiceIndex.setStatus('current')
if mibBuilder.loadTexts: profileServiceIndex.setDescription('This object identifies the index of a profile in this table.')
profileServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileServiceRowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceName.setStatus('current')
if mibBuilder.loadTexts: profileServiceName.setDescription('This object specifies the symbolic name assigned to this profile for user reference.')
profileServiceAccRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceAccRate.setStatus('current')
if mibBuilder.loadTexts: profileServiceAccRate.setDescription('This object represents the access rate of the service (kbps).')
profileServiceMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 5), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceMaxVccs.setStatus('current')
if mibBuilder.loadTexts: profileServiceMaxVccs.setDescription('The maximum number of virtual circuits supported in this service. This object corresponds to frDlcmiMaxSupportedVCs in RFC1315 and funiIfExtConfVccs in fore-funi MIB.')
profileServiceMaxPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 6), Integer32().clone(4096)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceMaxPayloadSize.setStatus('current')
if mibBuilder.loadTexts: profileServiceMaxPayloadSize.setDescription('This object represents the maximum payload size (bytes) supported by the service. This object corresponds to frPVCEndptInMaxFrameSize and frPVCEndptOutMaxFrameSize in RFC1604.')
profileServiceInBwOb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceInBwOb.setStatus('current')
if mibBuilder.loadTexts: profileServiceInBwOb.setDescription('This object represents the bandwidth overbooking (percentage) of the service in the inbound direction. If the percentage is bigger than 100%, it is overbooking; otherwise it is underbooking.')
profileServiceOutBwOb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileServiceOutBwOb.setStatus('current')
if mibBuilder.loadTexts: profileServiceOutBwOb.setDescription('This object represents the bandwidth overbooking (percentage) of the service in the outbound direction. If the percentage is bigger than 100%, it is overbooking; otherwise it is underbooking.')
profileServiceRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileServiceRefCnt.setStatus('current')
if mibBuilder.loadTexts: profileServiceRefCnt.setDescription('The value of this object identifies the number of services that are currently referring to this profile.')
profileEpdPpdTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6), )
if mibBuilder.loadTexts: profileEpdPpdTable.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdTable.setDescription('The EPD/PPD profile table.')
profileEpdPpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileEpdPpdIndex"))
if mibBuilder.loadTexts: profileEpdPpdEntry.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdEntry.setDescription('An entry in the EPD/PPD profile table.')
profileEpdPpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileEpdPpdIndex.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdIndex.setDescription('This object identifies the index of a profile in this table.')
profileEpdPpdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileEpdPpdRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdRowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileEpdPpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileEpdPpdName.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdName.setDescription('This object specifies the symbolic name assigned to this profile for user reference.')
profileEpdPpdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileEpdPpdPriority.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdPriority.setDescription('This object specifies the EPD/PPD priority queue the connection is assigned.')
profileEpdPpdClp0Epd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileEpdPpdClp0Epd.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdClp0Epd.setDescription('This object specifies whether the EPD/PPD controller discards CLP=0 traffic after the Clp0Epd threshold has been hit.')
profileEpdPpdClp1Ppd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileEpdPpdClp1Ppd.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdClp1Ppd.setDescription('This object specifies whether the EPD/PPD controller discards CLP=1 traffic after the Clp1Ppd threshold has been hit.')
profileEpdPpdClp1Epd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileEpdPpdClp1Epd.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdClp1Epd.setDescription('This object specifies whether the EPD/PPD controller discards CLP=1 traffic after the Clp1Epd threshold has been hit.')
profileEpdPpdRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileEpdPpdRefCnt.setStatus('current')
if mibBuilder.loadTexts: profileEpdPpdRefCnt.setDescription('The value of this object identifies the number of connections that are currently referring to this profile.')
profileFrf5Table = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7), )
if mibBuilder.loadTexts: profileFrf5Table.setStatus('current')
if mibBuilder.loadTexts: profileFrf5Table.setDescription('The FRF.5 profile table.')
profileFrf5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1), ).setIndexNames((0, "Fore-Profile-MIB", "profileFrf5Index"))
if mibBuilder.loadTexts: profileFrf5Entry.setStatus('current')
if mibBuilder.loadTexts: profileFrf5Entry.setDescription('An entry in the FRF.5 profile table.')
profileFrf5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFrf5Index.setStatus('current')
if mibBuilder.loadTexts: profileFrf5Index.setDescription('This object identifies the index of a profile in this table. Indices 1 though 20 are reserved for system defaults')
profileFrf5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5RowStatus.setStatus('current')
if mibBuilder.loadTexts: profileFrf5RowStatus.setDescription('This object is used to create new rows and delete existing rows in this table.')
profileFrf5Name = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5Name.setStatus('current')
if mibBuilder.loadTexts: profileFrf5Name.setDescription('This object specifies the symbolic name assigned to this profile for user reference.')
profileFrf5DeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapped", 1), ("ignored", 2))).clone('mapped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5DeMode.setStatus('current')
if mibBuilder.loadTexts: profileFrf5DeMode.setDescription('If the DE mode is set to mapped, the DE field in the FR_SSCS frame is mapped to the ATM CLP filled of every cell generated by the segmentation process of the AAL5 PDU containing the information of that frame. Otherwise, if the DE mode is set to ignored, the ATM CLP of every ATM cell generated by the segmentation process of the AAL5 PDU containing the information of that frame is set to a constant value specified by the configuration parameter profileFrf5DefaultClp.')
profileFrf5ClpFrsscsDeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapped", 1), ("ignored", 2))).clone('mapped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5ClpFrsscsDeMode.setStatus('current')
if mibBuilder.loadTexts: profileFrf5ClpFrsscsDeMode.setDescription('If the CLP mode is set to mapped, the FR/ATM network interworking function will set the DE field of the Q922 core frame, provided that one or more cells belonging to this frame has its CLP field set, or the DE bit of FR_SSCS frame is set. Otherwise, if the CLP mode is set to ignored, the DE bit of FR_SSCS frame is copied to the Q922 core frame.')
profileFrf5DefaultClp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5DefaultClp.setStatus('current')
if mibBuilder.loadTexts: profileFrf5DefaultClp.setDescription('This object represents the CLP bit value of all generated ATM cell headers if the DE mode is set to ignored.')
profileFrf5MaxDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5MaxDlcis.setStatus('current')
if mibBuilder.loadTexts: profileFrf5MaxDlcis.setDescription('The maximum number of virtual circuits supported in this VCC.')
profileFrf5MaxPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 8), Integer32().clone(4092)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileFrf5MaxPayloadSize.setStatus('current')
if mibBuilder.loadTexts: profileFrf5MaxPayloadSize.setDescription('This object represents the maximum payload size (bytes) supported by the VCC.')
profileFrf5RefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 4, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileFrf5RefCnt.setStatus('current')
if mibBuilder.loadTexts: profileFrf5RefCnt.setDescription('The value of this object identifies the number of connections that are currently referring to this profile.')
mibBuilder.exportSymbols("Fore-Profile-MIB", profileLmiT391=profileLmiT391, profileFuniSigSupport=profileFuniSigSupport, profileLmiN391=profileLmiN391, profileFrf8FecnMode=profileFrf8FecnMode, profileLmiEntry=profileLmiEntry, profileFrRateRefCnt=profileFrRateRefCnt, profileFrf5RefCnt=profileFrf5RefCnt, profileServiceIndex=profileServiceIndex, profileFuniRefCnt=profileFuniRefCnt, profileServiceInBwOb=profileServiceInBwOb, foreProfileModule=foreProfileModule, profileEpdPpdTable=profileEpdPpdTable, profileFrRateInBc=profileFrRateInBc, profileFuniAal34Support=profileFuniAal34Support, profileFrf5Index=profileFrf5Index, profileFuniSigVci=profileFuniSigVci, profileFrf8Protocols=profileFrf8Protocols, profileEpdPpdClp1Epd=profileEpdPpdClp1Epd, profileServiceEntry=profileServiceEntry, profileFuniHdrBytes=profileFuniHdrBytes, profileFrf8Table=profileFrf8Table, profileEpdPpdRowStatus=profileEpdPpdRowStatus, profileEpdPpdIndex=profileEpdPpdIndex, profileFrf5Table=profileFrf5Table, profileFrf5DeMode=profileFrf5DeMode, PYSNMP_MODULE_ID=foreProfileModule, profileFrf5Entry=profileFrf5Entry, profileFuniIlmiVpi=profileFuniIlmiVpi, profileLmiN393=profileLmiN393, profileLmiRole=profileLmiRole, profileFrf5Name=profileFrf5Name, profileFrf8DeMode=profileFrf8DeMode, profileFuniMinVci=profileFuniMinVci, profileServiceAccRate=profileServiceAccRate, profileFrRateInBe=profileFrRateInBe, profileFuniFcsBits=profileFuniFcsBits, profileEpdPpdRefCnt=profileEpdPpdRefCnt, profileServiceTable=profileServiceTable, profileServiceName=profileServiceName, profileFrf8Index=profileFrf8Index, profileFuniIlmiVci=profileFuniIlmiVci, profileLmiRowStatus=profileLmiRowStatus, profileLmiIndex=profileLmiIndex, profileEpdPpdPriority=profileEpdPpdPriority, profileFrRateIndex=profileFrRateIndex, profileServiceMaxVccs=profileServiceMaxVccs, profileFrRateTable=profileFrRateTable, profileLmiRefCnt=profileLmiRefCnt, profileFuniOamSupport=profileFuniOamSupport, profileServiceOutBwOb=profileServiceOutBwOb, profileFrf5DefaultClp=profileFrf5DefaultClp, profileServiceRowStatus=profileServiceRowStatus, profileEpdPpdEntry=profileEpdPpdEntry, profileLmiName=profileLmiName, profileFuniActiveVciBits=profileFuniActiveVciBits, profileLmiN392=profileLmiN392, profileFrf8DefaultDe=profileFrf8DefaultDe, profileEpdPpdClp1Ppd=profileEpdPpdClp1Ppd, profileFrf8RefCnt=profileFrf8RefCnt, profileFrRateOutCir=profileFrRateOutCir, profileFrRateCmPeriod=profileFrRateCmPeriod, profileFuniActiveVpiBits=profileFuniActiveVpiBits, profileLminT3=profileLminT3, profileFrRateOutBc=profileFrRateOutBc, profileFrRateName=profileFrRateName, profileFrf8ClpMode=profileFrf8ClpMode, profileFrf8DefaultClp=profileFrf8DefaultClp, profileFrf5MaxDlcis=profileFrf5MaxDlcis, profileEpdPpdName=profileEpdPpdName, profileFrRateEntry=profileFrRateEntry, profileFrRateOutBe=profileFrRateOutBe, profileFrf5RowStatus=profileFrf5RowStatus, profileFuniMaxVci=profileFuniMaxVci, profileFrf8Entry=profileFrf8Entry, profileLmiT392=profileLmiT392, profileLmiDirection=profileLmiDirection, profileFrRateRowStatus=profileFrRateRowStatus, profileLmiTable=profileLmiTable, profileFrRateMinBc=profileFrRateMinBc, profileServiceRefCnt=profileServiceRefCnt, profileFrf5ClpFrsscsDeMode=profileFrf5ClpFrsscsDeMode, profileFuniName=profileFuniName, profileFuniIlmiSupport=profileFuniIlmiSupport, profileLmiFlavour=profileLmiFlavour, profileFuniSigVpi=profileFuniSigVpi, profileServiceMaxPayloadSize=profileServiceMaxPayloadSize, profileFuniIndex=profileFuniIndex, profileFrRateInCir=profileFrRateInCir, profileFuniConfMode=profileFuniConfMode, profileFuniRowStatus=profileFuniRowStatus, profileFuniEntry=profileFuniEntry, profileFuniTable=profileFuniTable, profileFrf8RowStatus=profileFrf8RowStatus, profileFrf5MaxPayloadSize=profileFrf5MaxPayloadSize, profileFrf8Name=profileFrf8Name, profileEpdPpdClp0Epd=profileEpdPpdClp0Epd)
