#
# PySNMP MIB module CHIPFDDINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPFDDINET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Gauge32, enterprises, TimeTicks, iso, Counter64, NotificationType, ObjectIdentity, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "enterprises", "TimeTicks", "iso", "Counter64", "NotificationType", "ObjectIdentity", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
olFDDIStatsModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2), )
if mibBuilder.loadTexts: olFDDIStatsModTable.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModTable.setDescription('A table of statistical information counted for each module in each FDDI network.')
olFDDIStatsModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1), ).setIndexNames((0, "CHIPFDDINET-MIB", "olFDDIStatsModSlotIndex"))
if mibBuilder.loadTexts: olFDDIStatsModEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModEntry.setDescription('A list of statistical information for each module on each FDDI network in the concentrator.')
olFDDIStatsModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModSlotIndex.setDescription('The slot number that contains this module.')
olFDDIStatsModMgtRcvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModMgtRcvErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModMgtRcvErrs.setDescription('The number of errors encountered while receiving data on the Management Channel.')
olFDDIStatsModMgtXmitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModMgtXmitErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModMgtXmitErrs.setDescription('The number of errors encountered while transmitting data on the Management Channel.')
olFDDIStatsModBackplaneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModBackplaneErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModBackplaneErrs.setDescription('The number of errors while receiving and transmitting network data on the backplane.')
olFDDIStatsModPllUnlockErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsModPllUnlockErrs.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsModPllUnlockErrs.setDescription('The number of times the phased lock loop on the backplane network data channel was lost.')
olFDDIStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3), )
if mibBuilder.loadTexts: olFDDIStatsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortTable.setDescription('A table of statistical information counted for each Port in each FDDI network.')
olFDDIStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1), ).setIndexNames((0, "CHIPFDDINET-MIB", "olFDDIStatsPortSlotIndex"), (0, "CHIPFDDINET-MIB", "olFDDIStatsPortIndex"))
if mibBuilder.loadTexts: olFDDIStatsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortEntry.setDescription('A list of statistical information for each Port on each FDDI network in the concentrator.')
olFDDIStatsPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortSlotIndex.setDescription('The slot number that contains this Port.')
olFDDIStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortIndex.setDescription('The Port number of this port')
olFDDIStatsPortLCTFailCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLCTFailCts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLCTFailCts.setDescription('The count of the consecutive times the link confidence test (LCT) has failed during connection management. Once the connection has been established, the count is zeroed. (refer to ANSI 9.4.1).')
olFDDIStatsPortLerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLerEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLerEstimate.setDescription('A long term average link error rate. It ranges from 10**-4 to 10**-15 and is reported as the absolute value of the exponent of the estimate (the larger the number, the smaller the value).')
olFDDIStatsPortLemRejectCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLemRejectCts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLemRejectCts.setDescription('A link error monitoring count of the times that a link has been removed from the ring due to the LerCutOff threshold being exceeded.')
olFDDIStatsPortLemCts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDIStatsPortLemCts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDIStatsPortLemCts.setDescription("The aggregate link error monitor error count, set to zero only on station power up. This variable's long term rate average is lerEstimate.")
olFDDInetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4), )
if mibBuilder.loadTexts: olFDDInetStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsTable.setDescription('A table of statistical information counted for each FDDI network in the concentrator')
olFDDInetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1), ).setIndexNames((0, "CHIPFDDINET-MIB", "olFDDInetStatsNetID"))
if mibBuilder.loadTexts: olFDDInetStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsEntry.setDescription('A list of statistical information for each FDDI network in the concentrator.')
olFDDInetStatsNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 16, 17, 18, 19))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-1", 16), ("fddi-2", 17), ("fddi-3", 18), ("fddi-4", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsNetID.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsNetID.setDescription('The network index that uniquely identifies this network. One of isolated, fddi-1, fddi-2, fddi-3, or fddi-4.')
olFDDInetStatsRingOpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsRingOpCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsRingOpCounts.setDescription('The number times the ring transitioned to operational.')
olFDDInetStatsFrameCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsFrameCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsFrameCounts.setDescription('Frame_Ct (refer to ANSI MAC 2.2.1).')
olFDDInetStatsErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsErrorCounts.setDescription('Error_Ct (refer to ANSI MAC 2.2.1).')
olFDDInetStatsLostCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsLostCounts.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsLostCounts.setDescription('Lost_Ct (refer to ANSI MAC 2.2.1).')
olFDDInetStatsFrameErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olFDDInetStatsFrameErrorRatio.setStatus('mandatory')
if mibBuilder.loadTexts: olFDDInetStatsFrameErrorRatio.setDescription('This attribute is the actual ratio, ((delta snmpFddiMACLostCt + delta snmpFddiMACErrorCt) / (delta snmpFddiMACFrameCt + delta snmpFddiMACLostCt)) x 2**16.')
mibBuilder.exportSymbols("CHIPFDDINET-MIB", olFDDIStatsModSlotIndex=olFDDIStatsModSlotIndex, olNets=olNets, ol50nnMRCTL=ol50nnMRCTL, softwareGroup=softwareGroup, hubSysGroup=hubSysGroup, olFDDInetStatsRingOpCounts=olFDDInetStatsRingOpCounts, olThresh=olThresh, olFDDInetStatsLostCounts=olFDDInetStatsLostCounts, dot1dBridge=dot1dBridge, oeim=oeim, olFDDIStatsModMgtRcvErrs=olFDDIStatsModMgtRcvErrs, olThreshControl=olThreshControl, chipTTY=chipTTY, ol53nnMMGT=ol53nnMMGT, ol52nnMFR=ol52nnMFR, ol51nnMAUIF=ol51nnMAUIF, olFDDIStatsModPllUnlockErrs=olFDDIStatsModPllUnlockErrs, online=online, chipExpTokenRing=chipExpTokenRing, olConc=olConc, ol51nnREE=ol51nnREE, ol53nnMFIBST=ol53nnMFIBST, ol51nnMTPL=ol51nnMTPL, olFDDIStatsModEntry=olFDDIStatsModEntry, ol51nnMBNC=ol51nnMBNC, ol51nnMTPPL=ol51nnMTPPL, trmm=trmm, ol51nnBEE=ol51nnBEE, ol51nnMAUIM=ol51nnMAUIM, chipEcho=chipEcho, olEnv=olEnv, chipProducts=chipProducts, olFDDIStatsPortTable=olFDDIStatsPortTable, ol51nnMFP=ol51nnMFP, olFDDIStatsPortLemRejectCts=olFDDIStatsPortLemRejectCts, chipDownload=chipDownload, olFDDInet=olFDDInet, olSpecMods=olSpecMods, dot5=dot5, ol51nnMTPCL=ol51nnMTPCL, olFDDInetStatsFrameErrorRatio=olFDDInetStatsFrameErrorRatio, fmm=fmm, chipmib02=chipmib02, olFDDIStatsModMgtXmitErrs=olFDDIStatsModMgtXmitErrs, olFDDInetStatsErrorCounts=olFDDInetStatsErrorCounts, ol51nnMFL=ol51nnMFL, chipGen=chipGen, olFDDIStatsPortEntry=olFDDIStatsPortEntry, midnight=midnight, olGroups=olGroups, ol51nnRES=ol51nnRES, olFDDIStatsPortSlotIndex=olFDDIStatsPortSlotIndex, ol53nnMFBMIC=ol53nnMFBMIC, olFDDInetStatsFrameCounts=olFDDInetStatsFrameCounts, olFDDIStatsPortLemCts=olFDDIStatsPortLemCts, emm=emm, olFDDInetStatsEntry=olFDDInetStatsEntry, olEnet=olEnet, ol52nnMMGT=ol52nnMMGT, olFDDIStatsPortLCTFailCts=olFDDIStatsPortLCTFailCts, olNet=olNet, chipcom=chipcom, ol51nnMFBP=ol51nnMFBP, ol51nnIx=ol51nnIx, olFDDIStatsModBackplaneErrs=olFDDIStatsModBackplaneErrs, olModules=olModules, olFDDInetStatsTable=olFDDInetStatsTable, alarmGroup=alarmGroup, ol51nnMTP=ol51nnMTP, olFDDIStatsModTable=olFDDIStatsModTable, ol51nnMFIB=ol51nnMFIB, ol51nnMTS=ol51nnMTS, focus1=focus1, chipTFTP=chipTFTP, olTRnet=olTRnet, workGroupHub=workGroupHub, hardwareGroup=hardwareGroup, ol51nnMUTP=ol51nnMUTP, ol53nnMSTP=ol53nnMSTP, olFDDInetStatsNetID=olFDDInetStatsNetID, ol51nnMMGT=ol51nnMMGT, chipExperiment=chipExperiment, chipBridge=chipBridge, boardGroup=boardGroup, ol52nnBTT=ol52nnBTT, olAlarm=olAlarm, olFDDIStatsPortIndex=olFDDIStatsPortIndex, ol5208MTP=ol5208MTP, ol50nnMHCTL=ol50nnMHCTL, portGroup=portGroup, oebm=oebm, ol51nnMFB=ol51nnMFB, hubGroup=hubGroup, olFDDIStatsPortLerEstimate=olFDDIStatsPortLerEstimate, ol50nnMCTL=ol50nnMCTL, ol52nnMTP=ol52nnMTP, olAgents=olAgents)
