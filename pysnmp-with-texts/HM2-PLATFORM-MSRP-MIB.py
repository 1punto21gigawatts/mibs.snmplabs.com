#
# PySNMP MIB module HM2-PLATFORM-MSRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-MSRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hm2AgentDot1qMrpMxrp, = mibBuilder.importSymbols("HM2-PLATFORM-MRP-MIB", "hm2AgentDot1qMrpMxrp")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Counter32, Unsigned32, TimeTicks, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Bits, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Counter32", "Unsigned32", "TimeTicks", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Bits", "ModuleIdentity", "Gauge32")
TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
hm2PlatformMSRP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3))
hm2PlatformMSRP.setRevisions(('2013-04-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformMSRP.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformMSRP.setLastUpdated('201304100000Z')
if mibBuilder.loadTexts: hm2PlatformMSRP.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformMSRP.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformMSRP.setDescription('The Hirschmann Private Platform2 MIB for 802.1Qat, 802.1Qav Configuration. Copyright (C) 2013. All Rights Reserved.')
class Hm2AgentDot1qPriorityValue(TextualConvention, Unsigned32):
    reference = '12.13.3.3'
    description = 'An 802.1Q user priority value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class Hm2AgentDot1qMsrpStreamRankValue(TextualConvention, Integer32):
    reference = '35.2.2.8.5b'
    description = 'An 802.1 SRP Stream Rank value. This is an integer, with the following interpretation placed on the value: 0: Emergency, high-rank stream, 1: Non-emergency stream.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("emergency", 0), ("nonEmergency", 1))

class Hm2AgentDot1qMsrpStreamIdValue(TextualConvention, OctetString):
    description = 'Represents an SRP Stream ID, which is often defined as a MAC Address followed by a unique 16-bit ID.'
    status = 'current'
    displayHint = '1x:1x:1x:1x:1x:1x.1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Hm2AgentDot1qMsrpReservationDirectionValue(TextualConvention, Integer32):
    reference = '35.2.1.2'
    description = 'An 802.1 SRP Stream Reservation Direction value. This is an integer, with the following interpretation placed on the value: 0: Talker registrations, 1: Listener registrations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("talkerRegistrations", 0), ("listenerRegistrations", 1))

class Hm2AgentDot1qMsrpReservationDeclarationTypeValue(TextualConvention, Integer32):
    reference = '35.2.1.3'
    description = 'An 802.1 SRP Stream Reservation Declaration Type value. This is an integer, with the following interpretation placed on the value: 0: Talker Advertise, 1: Talker Failed, 2: Listener Asking Failed, 3: Listener Ready, 4: Listener Ready Failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("talkerAdvertise", 0), ("talkerFailed", 1), ("listenerAskingFailed", 2), ("listenerReady", 3), ("listenerReadyFailed", 4))

class Hm2AgentDot1qMsrpReservationFailureCodeValue(TextualConvention, Integer32):
    reference = '35.2.2.8.7'
    description = 'An 802.1 SRP Stream Reservation Failure Code value. This is an integer, with the following interpretation placed on the value: 0: No failure, 1: Insufficient bandwidth, 2: Insufficient Bridge resources, 3: Insufficient bandwidth for Traffic Class, 4: StreamID in use by another Talker, 5: Stream destination address already in use, 6: Stream pre-empted by higher rank, 7: Reported latency has changed, 8: Egress port is not AVBCapable, 9: Use a different destination_address, 10: Out of MSRP resources, 11: Out of MMRP resources, 12: Cannot store destination_address, 13: Requested priority is not an SR Class priority, 14: MaxFrameSize is too large for media, 15: maxFanInPorts limit has been reached, 16: Changes in FirstValue for a registered StreamID, 17: VLAN is blocked on this egress port (Registration Forbidden), 18: VLAN tagging is disabled on this egress port (untagged set), 19: SR class priority mismatch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("noFailure", 0), ("insufficientBandwidth", 1), ("insufficientResources", 2), ("insufficientTrafficClassBandwidth", 3), ("streamIDInUse", 4), ("streamDestinationAddressInUse", 5), ("streamPreemptedByHigherRank", 6), ("latencyHasChanged", 7), ("egressPortNotAVBCapable", 8), ("useDifferentDestinationAddress", 9), ("outOfMSRPResources", 10), ("outOfMMRPResources", 11), ("cannotStoreDestinationAddress", 12), ("priorityIsNoAnSRCLass", 13), ("maxFrameSizeTooLarge", 14), ("maxFanInPortsLimitReached", 15), ("firstValueChangedForStreamID", 16), ("vlanBlockedOnEgress", 17), ("vlanTaggingDisabledOnEgress", 18), ("srClassPriorityMismatch", 19))

class Hm2AgentDot1qFqtssTrafficClassValue(TextualConvention, Unsigned32):
    reference = '12.21'
    description = 'An 802.1 FQTSS traffic class value. This is the numerical value associated with a traffic class in a Bridge. Larger values are associated with higher priority traffic classes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class Hm2AgentDot1qFqtssDeltaBandwidthValue(TextualConvention, Unsigned32):
    reference = '12.21, 34.4'
    description = 'An 802.1 FQTSS delta bandwidth percentage, represented as a fixed point number scaled by 1,000,000.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100000000)

class Hm2AgentDot1qFtqssTxSelectionAlgorithmIDValue(TextualConvention, Unsigned32):
    reference = '8.6.8, 12.21'
    description = 'An 802.1 transmission selection algorithm identifier value. This is an integer, with the following interpretation placed on the value: 0: Strict priority algorithm, 1: Credit-based shaper algorithm, 2-255: Reserved for future standardization, 256-4294967295: Vendor-specific transmission selection algorithm identifiers, consisting of a four-octet integer, where the 3 most significant octets hold an OUI value, and the least significant octet holds an integer value in the range 0-255 assigned by the owner of the OUI.'
    status = 'current'
    displayHint = 'd'

hm2AgentDot1qMsrp = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1))
hm2AgentDot1qMrpMsrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2))
hm2AgentDot1qFqtss = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3))
hm2AgentDot1qPortMsrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpTable.setDescription('A table of MSRP control information about every bridge port. This is indexed by hm2AgentDot1qMsrpPort.')
hm2AgentDot1qPortMsrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpPort"))
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpEntry.setDescription('MSRP control information for a bridge port.')
hm2AgentDot1qMsrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMsrpPort.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpPort.setDescription('The MSRP port number.')
hm2AgentDot1qPortMsrpEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpEnabledStatus.setDescription('The administrative state of MSRP operation on this port. The value true(1) indicates that MSRP is enabled on this port in all VLANs as long as hm2AgentDot1qBridgeMsrpEnabledStatus is also true(1). A value of false(2) indicates that MSRP is disabled on this port in all VLANs: any MSRP frames received will be silently discarded, and no MSRP registrations will be propagated from other ports. Setting this to a value of true(1) will be stored by the agent but will only take effect on the MSRP protocol operation if hm2AgentDot1qBridgeMsrpEnabledStatus also indicates the value true(1). This object affects all MSRP Applicant and Registrar state machines on this port. A transition from false(2) to true(1) will cause a reset of all MSRP state machines on this port. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qPortMsrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1, 1, 3), Counter64()).setUnits('failed MSRP registrations').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpFailedRegistrations.setReference('10.7.12.1')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpFailedRegistrations.setDescription('The total number of failed MSRP registrations, for any reason, in all VLANs, on this port. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
hm2AgentDot1qPortMsrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpLastPduOrigin.setReference('10.7.12.2')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpLastPduOrigin.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpLastPduOrigin.setDescription('The Source MAC Address of the last MSRP message received on this port.')
hm2AgentDot1qPortMsrpPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 1, 1, 5), VlanId().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpPvid.setReference('35.2.2.8.3b')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpPvid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMsrpPvid.setDescription('The default VLAN ID that Streams are assigned to. Talkers learn this VID from the SRP Domain attribute and tag Streams accordingly. ')
hm2AgentDot1qBridgeMsrpEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpEnabledStatus.setDescription(' The administrative status requested by management for MSRP. The value true(1) indicates that MSRP should be enabled on this device, in all VLANs, on all ports for which it has not been specifically disabled. When false(2), MSRP is disabled, in all VLANs and on all ports, and all MSRP frames will be forwarded transparently. This objects affects both Applicant and Registrar state machines. A transition from false(2) to true(1) will cause a reset of all MSRP state machines on all ports. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qBridgeMsrpTalkerPruning = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpTalkerPruning.setReference('12.22.1, 35.2.1.4b, 35.2.4.3.1')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpTalkerPruning.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpTalkerPruning.setDescription('The value of the talkerPruning parameter which controls the propagation of Talker declarations. The value true(1) indicates that Talker attributes are only declared on ports that have the Stream destination_address registered in the MMRP MAC Address Registration Entries. When false(2), Talker attribute are declared on all egress ports in the active topology. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qBridgeMsrpMaxFanInPorts = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpMaxFanInPorts.setReference('12.22.1, 35.2.1.4f')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpMaxFanInPorts.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpMaxFanInPorts.setDescription('The value of the msrpMaxFanInPorts parameter which limits the total number of ports on a Bridge that are allowed to establish reservations for inbound Streams. A value of zero (0) indicates no fan-in limit is being specified and calculations involving fan-in will only be limited by the number of MSRP enabled ports. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qBridgeMsrpBoundaryPropagate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpBoundaryPropagate.setReference('802.1ba requirement')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpBoundaryPropagate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMsrpBoundaryPropagate.setDescription('The value of the boundaryPropagate parameter which controls the propagation of Talker declarations. The value true(1) indicates that Talker attributes are propagated to the ports marked as boundary port. When false(2) Talker attributes are not propagated to the ports marked as boundary port. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qMsrpStreamTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7), )
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamTable.setDescription('A table of detailed MSRP stream information. This is indexed by Stream ID.')
hm2AgentDot1qMsrpStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpStreamIndex"))
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamEntry.setDescription('A list of objects containing characteristics for each registered Stream. Rows in the table are automatically created for Streams registered on any port of a bridge')
hm2AgentDot1qMsrpStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamIndex.setDescription('An index for MSRP Details Table.')
hm2AgentDot1qMsrpStreamID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 2), Hm2AgentDot1qMsrpStreamIdValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamID.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamID.setDescription('The Stream ID associated with the row of the table. Rows in the table are automatically created when Streams are registered via MSRP.')
hm2AgentDot1qMsrpStreamDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamDestMacAddr.setDescription('The MAC destination address for the Stream described by this reservation.')
hm2AgentDot1qMsrpStreamVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamVlanId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamVlanId.setDescription('The VLAN ID associated with the MSRP registration for this Stream.')
hm2AgentDot1qMsrpStreamTspecMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamTspecMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamTspecMaxFrameSize.setDescription('The maximum size frame that will be sent by a Talker for this Stream. This value is part of the Traffic Specification for the Stream.')
hm2AgentDot1qMsrpStreamTspecMaxIntervalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamTspecMaxIntervalFrames.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamTspecMaxIntervalFrames.setDescription('The maximum number of frame that will be sent during a class measurement interval. This value is part of the Traffic Specification for the Stream.')
hm2AgentDot1qMsrpStreamDataFramePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 7), Hm2AgentDot1qPriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamDataFramePriority.setReference('35.2.2.8.5a')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamDataFramePriority.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamDataFramePriority.setDescription('The 802.1Q user priority value that the referenced Stream will be tagged with. This value is used to distinguish Class A and Class B traffic.')
hm2AgentDot1qMsrpStreamRank = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 7, 1, 8), Hm2AgentDot1qMsrpStreamRankValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamRank.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpStreamRank.setDescription('SRP supports emergency and non-emergency. Emergency traffic will interrupt non-emergency traffic if there is insufficient bandwidth or resources available for the emergency traffic.')
hm2AgentDot1qMsrpReservationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8), )
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationTable.setDescription('A table containing Stream attribute registrations per port.')
hm2AgentDot1qMsrpReservationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpReservationStreamId"), (0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpReservationDirection"), (0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpPort"))
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationEntry.setDescription('A list of objects containing Stream attribute registrations per port. Rows in the table are automatically created for Streams registered on any port of a bridge.')
hm2AgentDot1qMsrpReservationStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 1), Hm2AgentDot1qMsrpStreamIdValue())
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationStreamId.setReference('35.2.2.8.2')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationStreamId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationStreamId.setDescription('The Stream ID associated with the row of the table. Rows in the table are automatically created when Streams are registered via MSRP.')
hm2AgentDot1qMsrpReservationDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 2), Hm2AgentDot1qMsrpReservationDirectionValue())
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDirection.setReference('35.2.1.2')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDirection.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDirection.setDescription('The source of this Stream registration, either Talker or Listener.')
hm2AgentDot1qMsrpReservationDeclarationType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 3), Hm2AgentDot1qMsrpReservationDeclarationTypeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDeclarationType.setReference('35.2.1.3')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDeclarationType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDeclarationType.setDescription('The type of Talker or Listener registration.')
hm2AgentDot1qMsrpReservationAccumulatedLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 4), Unsigned32()).setUnits('nano-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationAccumulatedLatency.setReference('35.2.2.8.6')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationAccumulatedLatency.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationAccumulatedLatency.setDescription('The Accumulated Latency associated with the current registration. For Talker registrations this represents the accumulated latency from the Talker to the ingress port of this Bridge. For Listener registrations this represents the accumulated latency to the ingress port of the neighbor Bridge or end stations. This include the latency of the media attached to this egress port.')
hm2AgentDot1qMsrpReservationFailureBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationFailureBridgeId.setReference('35.2.2.8.7a')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationFailureBridgeId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationFailureBridgeId.setDescription('The first Bridge that changes a Talker Advertise to a Talker Failed registration will report its Bridge Identification in this field. That single Bridge Identification is then propagated from Bridge to Bridge.')
hm2AgentDot1qMsrpReservationFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 6), Hm2AgentDot1qMsrpReservationFailureCodeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationFailureCode.setReference('35.2.2.8.7b')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationFailureCode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationFailureCode.setDescription('The first Bridge that changes a Talker Advertise to a Talker Failed registration will report the Failure Code in this field. That single Failure Code is then propagated from Bridge to Bridge.')
hm2AgentDot1qMsrpReservationDroppedStreamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 7), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDroppedStreamFrames.setReference('35.2.5.1')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDroppedStreamFrames.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationDroppedStreamFrames.setDescription('A count of the number of data stream frames that have been dropped for whatever reason. These are not MSRP frames, but the stream data frames that are carried by the MSRP Reservation. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
hm2AgentDot1qMsrpReservationStreamAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 1, 8, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationStreamAge.setReference('35.2.1.4c')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationStreamAge.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMsrpReservationStreamAge.setDescription('The number of seconds since the reservation was established on this port. Talkers shall report this as the seconds since the first receipt of the Talker Advertise or Talker Failed. Listeners shall report this as the number of seconds since the destination_address was first added to the Dynamic Reservations Entries.')
hm2AgentDot1qMrpMsrpPktTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktTx.setDescription('The number of frames was transmitted.')
hm2AgentDot1qMrpMsrpPktRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktRx.setDescription('The number of frames was received.')
hm2AgentDot1qMrpMsrpPktRxBadHeader = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktRxBadHeader.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktRxBadHeader.setDescription('The number of frames with bad header was received.')
hm2AgentDot1qMrpMsrpPktRxBadFormat = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktRxBadFormat.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktRxBadFormat.setDescription('The number of frames with bad data field was received.')
hm2AgentDot1qMrpMsrpPktTxFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktTxFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktTxFailure.setDescription('The number of frames was not transmitted.')
hm2AgentDot1qMrpMsrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6), )
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpStatsTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpStatsTable.setDescription('A table which contains MSRP statistics per port.')
hm2AgentDot1qMrpMsrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMrpMsrpIntf"))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpStatsEntry.setDescription('MSRP statistics entry.')
hm2AgentDot1qMrpMsrpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpIntf.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpIntf.setDescription('Index of hm2AgentDot1qMrpMsrpStatistics table.')
hm2AgentDot1qMrpMsrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktTx.setDescription('The number of frames was transmitted on interface.')
hm2AgentDot1qMrpMsrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRx.setDescription('The number of frames was received on interface.')
hm2AgentDot1qMrpMsrpPortPktRxBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRxBadHeader.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRxBadHeader.setDescription('The number of frames with bad header was received on interface.')
hm2AgentDot1qMrpMsrpPortPktRxBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRxBadFormat.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRxBadFormat.setDescription('The number of frames with bad data field was received on interface.')
hm2AgentDot1qMrpMsrpPortPktTxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktTxFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktTxFailure.setDescription('The number of frames was not transmitted on interface.')
hm2AgentDot1qMrpMsrpPortPktRegFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRegFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPortPktRegFailure.setDescription('The number of failed registration attempts on interface.')
hm2AgentDot1qMrpMsrpPktMessageFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktMessageFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMsrpPktMessageFailure.setDescription('The number of failures while adding message into MSRP queue.')
hm2AgentDot1qFqtssNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 0))
hm2AgentDot1qFqtssObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 1))
hm2AgentDot1qFqtssConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 2))
hm2AgentDot1qFqtssBap = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3))
hm2AgentDot1qFqtssMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4))
hm2AgentDot1qFqtssBapTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qFqtssBapTable.setReference('12.21.1')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssBapTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssBapTable.setDescription('A table containing a set of bandwidth availability parameters for each traffic class that supports the credit-based shaper algorithm. All writable objects in this table must be persistent over power up restart/reboot.')
hm2AgentDot1qFqtssBapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpPort"), (0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qFqtssTrafficClass"))
if mibBuilder.loadTexts: hm2AgentDot1qFqtssBapEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssBapEntry.setDescription('A list of objects containing bandwidth allocation information for each traffic class that supports the credit-based shaper algorithm. Rows in the table are automatically created and deleted as a result of the operation of the algorithm described in 34.5. ')
hm2AgentDot1qFqtssTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1, 1), Hm2AgentDot1qFqtssTrafficClassValue())
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTrafficClass.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTrafficClass.setDescription('The traffic class number associated with the row of the table. A row in this table is created for each traffic class that supports the credit-based shaper algrithm and whose bandwidth can be reserved for AV traffic.')
hm2AgentDot1qFqtssDeltaBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1, 2), Hm2AgentDot1qFqtssDeltaBandwidthValue()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssDeltaBandwidth.setReference('12.21.1, 34.3')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssDeltaBandwidth.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssDeltaBandwidth.setDescription('The value of the deltaBandwidth parameter for the traffic class. This value is represented as a fixed point number scaled by a factor of 1,000,000; i.e., 100,000,000 (the maximum value) represents 100%. The default value of the deltaBandwidth parameter for the highest numbered traffic class that supports the credit-based shaper algorithm is 75%; for all lower numbered traffic classes that support the credit-based shaper algorithm the default value is 0%. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssOperIdleSlopeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1, 3), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssOperIdleSlopeMs.setReference('12.21.1, 34.3')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssOperIdleSlopeMs.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssOperIdleSlopeMs.setDescription('The most significant 32 bits of the bandwidth, in bits per second, that is currently allocated to the traffic class (idleSlope(N)). This object MUST be read at the same time as hm2AgentDot1qFqtssOperIdleSlopeLs, which represents the LS 32 bits of the value, in order for the read operation to succeed. If SRP is supported and in operation, then the reserved bandwidth is determined by the operation of SRP; otherwise, the value of hm2AgentDot1qFqtssOperIdleSlopeMs is equal to the value of hm2AgentDot1qFqtssAdminIdleSlopeMs. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssOperIdleSlopeLs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1, 4), Unsigned32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssOperIdleSlopeLs.setReference('12.21.1, 34.3')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssOperIdleSlopeLs.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssOperIdleSlopeLs.setDescription('The least significant 32 bits of the bandwidth, in bits per second, that is currently allocated to the traffic class (idleSlope(N)). This object MUST be read at the same time as hm2AgentDot1qFqtssOperIdleSlopeMs, which represents the LS 32 bits of the value, in order for the read operation to succeed. If SRP is supported and in operation, then the reserved bandwidth is determined by the operation of SRP; otherwise, the value of hm2AgentDot1qFqtssOperIdleSlopeLs is equal to the value of hm2AgentDot1qFqtssAdminIdleSlopeLs.. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssAdminIdleSlopeMs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1, 5), Unsigned32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssAdminIdleSlopeMs.setReference('12.21.1, 34.3')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssAdminIdleSlopeMs.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssAdminIdleSlopeMs.setDescription('The most significant 32 bits of the bandwidth, in bits per second, that the manager desires to allocate to the traffic class as idleSlope(N). This object MUST be read or written at the same time as hm2AgentDot1qFqtssAdminIdleSlopeLs, which represents the LS 32 bits of the value, in order for the read or write operation to succeed. If SRP is supported and in operation, then the reserved bandwidth is determined by the operation of SRP, and any changes to the value of this object have no effect on the operational value of idleSlope(N). The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssAdminIdleSlopeLs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 3, 1, 1, 6), Unsigned32()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssAdminIdleSlopeLs.setReference('12.21.1, 34.3')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssAdminIdleSlopeLs.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssAdminIdleSlopeLs.setDescription('The least significant 32 bits of the bandwidth, in bits per second, that the manager desires to allocate to the traffic class as idleSlope(N). This object MUST be read or written at the same time as hm2AgentDot1qFqtssAdminIdleSlopeMs, which represents the LS 32 bits of the value, in order for the read or write operation to succeed. If SRP is supported and in operation, then the reserved bandwidth is determined by the operation of SRP, and any changes to the value of this object have no effect on the operational value of idleSlope(N). The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssTxSelectionAlgorithmTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmTable.setReference('8.6.8, 12.21.2, 34.5')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmTable.setDescription('A table containing the assignment of transmission selection algorithms to traffic classes for the Port. This table provides management of the Transmission Selection Algorithm Table defined in 8.6.8. For a given Port, a row in the table exists for each traffic class that is supported by the Port. The default assignments of transmission selection algorithms to traffic classes in the table are made on instantiation of the table, in accordance with the defaults defined in 8.6.8 and 34.5. All writable objects in this table must be persistent over power up restart/reboot.')
hm2AgentDot1qFqtssTxSelectionAlgorithmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpPort"), (0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qFqtssTrafficClass"))
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmEntry.setDescription('A list of objects that contain the mapping of a traffic class value to a transmission selection algorithm value.')
hm2AgentDot1qFqtssTxSelectionAlgorithmID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 1, 1, 1), Hm2AgentDot1qFtqssTxSelectionAlgorithmIDValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmID.setReference('8.6.8, 12.21.2, 34.5')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmID.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssTxSelectionAlgorithmID.setDescription('The identifier of the transmission selection algorithm assigned to the traffic class. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssSrpRegenOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 2), )
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpRegenOverrideTable.setReference('12.21.3, 6.6.4, 6.9.4')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpRegenOverrideTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpRegenOverrideTable.setDescription('A table containing the set of priority regeneration table override values for the Port. The recommended default values of priorities associated with SR classes, and the corresponding override values, are defined in 6.9.4. All writable objects in this table must be persistent over power up restart/reboot.')
hm2AgentDot1qFqtssSrpRegenOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qMsrpPort"), (0, "HM2-PLATFORM-MSRP-MIB", "hm2AgentDot1qFqtssTrafficClass"))
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpRegenOverrideEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpRegenOverrideEntry.setDescription('A list of objects that contain the mapping of a priority value to a priority regeneration override value, and a boundary port indication. Rows in the table exist for all priorities that are associated with SR classes.')
hm2AgentDot1qFqtssSrClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 2, 1, 1), Hm2AgentDot1qPriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrClassPriority.setReference('12.21.3, 6.6.4, 6.9.4')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrClassPriority.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrClassPriority.setDescription('The priority value that is overridden at the SRP domain boundary. ')
hm2AgentDot1qFqtssPriorityRegenOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 2, 1, 2), Hm2AgentDot1qPriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssPriorityRegenOverride.setReference('12.21.3, 6.6.4, 6.9.4')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssPriorityRegenOverride.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssPriorityRegenOverride.setDescription('The priority value that is used to override the priority regeneration table entry at the SRP domain boundary. The value of this object MUST be retained across reinitializations of the management system.')
hm2AgentDot1qFqtssSrpBoundaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 3, 3, 4, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpBoundaryPort.setReference('12.21.3, 6.6.4, 6.9.4')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpBoundaryPort.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qFqtssSrpBoundaryPort.setDescription('The value of the SRPdomainBoundaryPort parameter (6.6.4) for the priority. ')
mibBuilder.exportSymbols("HM2-PLATFORM-MSRP-MIB", hm2AgentDot1qFqtssOperIdleSlopeLs=hm2AgentDot1qFqtssOperIdleSlopeLs, hm2AgentDot1qMsrpPort=hm2AgentDot1qMsrpPort, hm2AgentDot1qBridgeMsrpTalkerPruning=hm2AgentDot1qBridgeMsrpTalkerPruning, hm2AgentDot1qPortMsrpTable=hm2AgentDot1qPortMsrpTable, hm2AgentDot1qMrpMsrpPktTx=hm2AgentDot1qMrpMsrpPktTx, hm2AgentDot1qBridgeMsrpEnabledStatus=hm2AgentDot1qBridgeMsrpEnabledStatus, Hm2AgentDot1qPriorityValue=Hm2AgentDot1qPriorityValue, hm2AgentDot1qMsrpReservationTable=hm2AgentDot1qMsrpReservationTable, hm2AgentDot1qMsrpStreamRank=hm2AgentDot1qMsrpStreamRank, hm2AgentDot1qMrpMsrpPortPktRxBadHeader=hm2AgentDot1qMrpMsrpPortPktRxBadHeader, hm2AgentDot1qFqtssNotifications=hm2AgentDot1qFqtssNotifications, hm2AgentDot1qMsrpStreamIndex=hm2AgentDot1qMsrpStreamIndex, hm2AgentDot1qMsrpReservationAccumulatedLatency=hm2AgentDot1qMsrpReservationAccumulatedLatency, hm2AgentDot1qMsrpStreamTable=hm2AgentDot1qMsrpStreamTable, hm2AgentDot1qMsrp=hm2AgentDot1qMsrp, Hm2AgentDot1qFtqssTxSelectionAlgorithmIDValue=Hm2AgentDot1qFtqssTxSelectionAlgorithmIDValue, hm2AgentDot1qMsrpReservationStreamAge=hm2AgentDot1qMsrpReservationStreamAge, hm2AgentDot1qFqtssOperIdleSlopeMs=hm2AgentDot1qFqtssOperIdleSlopeMs, hm2AgentDot1qMrpMsrpPortPktRxBadFormat=hm2AgentDot1qMrpMsrpPortPktRxBadFormat, hm2AgentDot1qMsrpReservationDroppedStreamFrames=hm2AgentDot1qMsrpReservationDroppedStreamFrames, hm2AgentDot1qFqtssBap=hm2AgentDot1qFqtssBap, PYSNMP_MODULE_ID=hm2PlatformMSRP, hm2AgentDot1qMrpMsrpPortPktRegFailure=hm2AgentDot1qMrpMsrpPortPktRegFailure, hm2AgentDot1qFqtssPriorityRegenOverride=hm2AgentDot1qFqtssPriorityRegenOverride, hm2AgentDot1qFqtssBapEntry=hm2AgentDot1qFqtssBapEntry, hm2AgentDot1qFqtssTxSelectionAlgorithmTable=hm2AgentDot1qFqtssTxSelectionAlgorithmTable, hm2AgentDot1qFqtssSrpBoundaryPort=hm2AgentDot1qFqtssSrpBoundaryPort, hm2AgentDot1qPortMsrpLastPduOrigin=hm2AgentDot1qPortMsrpLastPduOrigin, hm2AgentDot1qFqtssAdminIdleSlopeMs=hm2AgentDot1qFqtssAdminIdleSlopeMs, hm2AgentDot1qMsrpReservationFailureBridgeId=hm2AgentDot1qMsrpReservationFailureBridgeId, Hm2AgentDot1qMsrpReservationDirectionValue=Hm2AgentDot1qMsrpReservationDirectionValue, hm2AgentDot1qPortMsrpEnabledStatus=hm2AgentDot1qPortMsrpEnabledStatus, Hm2AgentDot1qFqtssTrafficClassValue=Hm2AgentDot1qFqtssTrafficClassValue, hm2AgentDot1qMrpMsrpPortPktTx=hm2AgentDot1qMrpMsrpPortPktTx, hm2AgentDot1qMrpMsrpPktRxBadHeader=hm2AgentDot1qMrpMsrpPktRxBadHeader, hm2AgentDot1qFqtssMappings=hm2AgentDot1qFqtssMappings, hm2AgentDot1qFqtssObjects=hm2AgentDot1qFqtssObjects, hm2AgentDot1qPortMsrpFailedRegistrations=hm2AgentDot1qPortMsrpFailedRegistrations, hm2AgentDot1qMrpMsrpPktRxBadFormat=hm2AgentDot1qMrpMsrpPktRxBadFormat, hm2AgentDot1qFqtss=hm2AgentDot1qFqtss, hm2AgentDot1qMsrpStreamDestMacAddr=hm2AgentDot1qMsrpStreamDestMacAddr, hm2AgentDot1qBridgeMsrpBoundaryPropagate=hm2AgentDot1qBridgeMsrpBoundaryPropagate, hm2AgentDot1qMsrpReservationDeclarationType=hm2AgentDot1qMsrpReservationDeclarationType, hm2AgentDot1qFqtssSrClassPriority=hm2AgentDot1qFqtssSrClassPriority, hm2AgentDot1qMrpMsrpStatsTable=hm2AgentDot1qMrpMsrpStatsTable, hm2AgentDot1qMrpMsrpPktRx=hm2AgentDot1qMrpMsrpPktRx, hm2AgentDot1qMsrpReservationStreamId=hm2AgentDot1qMsrpReservationStreamId, hm2AgentDot1qBridgeMsrpMaxFanInPorts=hm2AgentDot1qBridgeMsrpMaxFanInPorts, hm2AgentDot1qMsrpStreamTspecMaxIntervalFrames=hm2AgentDot1qMsrpStreamTspecMaxIntervalFrames, hm2PlatformMSRP=hm2PlatformMSRP, hm2AgentDot1qMrpMsrpIntf=hm2AgentDot1qMrpMsrpIntf, hm2AgentDot1qFqtssBapTable=hm2AgentDot1qFqtssBapTable, hm2AgentDot1qFqtssDeltaBandwidth=hm2AgentDot1qFqtssDeltaBandwidth, hm2AgentDot1qMsrpStreamDataFramePriority=hm2AgentDot1qMsrpStreamDataFramePriority, hm2AgentDot1qMrpMsrpPortPktRx=hm2AgentDot1qMrpMsrpPortPktRx, hm2AgentDot1qMrpMsrpStats=hm2AgentDot1qMrpMsrpStats, hm2AgentDot1qMrpMsrpStatsEntry=hm2AgentDot1qMrpMsrpStatsEntry, hm2AgentDot1qMrpMsrpPktTxFailure=hm2AgentDot1qMrpMsrpPktTxFailure, hm2AgentDot1qMsrpReservationEntry=hm2AgentDot1qMsrpReservationEntry, hm2AgentDot1qMsrpStreamVlanId=hm2AgentDot1qMsrpStreamVlanId, hm2AgentDot1qPortMsrpEntry=hm2AgentDot1qPortMsrpEntry, Hm2AgentDot1qMsrpStreamIdValue=Hm2AgentDot1qMsrpStreamIdValue, hm2AgentDot1qFqtssAdminIdleSlopeLs=hm2AgentDot1qFqtssAdminIdleSlopeLs, hm2AgentDot1qMsrpStreamID=hm2AgentDot1qMsrpStreamID, hm2AgentDot1qPortMsrpPvid=hm2AgentDot1qPortMsrpPvid, hm2AgentDot1qFqtssSrpRegenOverrideTable=hm2AgentDot1qFqtssSrpRegenOverrideTable, Hm2AgentDot1qFqtssDeltaBandwidthValue=Hm2AgentDot1qFqtssDeltaBandwidthValue, hm2AgentDot1qFqtssConformance=hm2AgentDot1qFqtssConformance, hm2AgentDot1qMsrpReservationDirection=hm2AgentDot1qMsrpReservationDirection, hm2AgentDot1qMsrpReservationFailureCode=hm2AgentDot1qMsrpReservationFailureCode, hm2AgentDot1qFqtssTxSelectionAlgorithmEntry=hm2AgentDot1qFqtssTxSelectionAlgorithmEntry, Hm2AgentDot1qMsrpReservationFailureCodeValue=Hm2AgentDot1qMsrpReservationFailureCodeValue, hm2AgentDot1qMsrpStreamEntry=hm2AgentDot1qMsrpStreamEntry, hm2AgentDot1qMrpMsrpPortPktTxFailure=hm2AgentDot1qMrpMsrpPortPktTxFailure, hm2AgentDot1qFqtssSrpRegenOverrideEntry=hm2AgentDot1qFqtssSrpRegenOverrideEntry, hm2AgentDot1qMrpMsrpPktMessageFailure=hm2AgentDot1qMrpMsrpPktMessageFailure, Hm2AgentDot1qMsrpReservationDeclarationTypeValue=Hm2AgentDot1qMsrpReservationDeclarationTypeValue, hm2AgentDot1qMsrpStreamTspecMaxFrameSize=hm2AgentDot1qMsrpStreamTspecMaxFrameSize, hm2AgentDot1qFqtssTrafficClass=hm2AgentDot1qFqtssTrafficClass, hm2AgentDot1qFqtssTxSelectionAlgorithmID=hm2AgentDot1qFqtssTxSelectionAlgorithmID, Hm2AgentDot1qMsrpStreamRankValue=Hm2AgentDot1qMsrpStreamRankValue)
