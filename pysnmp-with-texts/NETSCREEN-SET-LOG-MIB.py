#
# PySNMP MIB module NETSCREEN-SET-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SET-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
netscreenSettingMibModule, netscreenSetting = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSettingMibModule", "netscreenSetting")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, MibIdentifier, Unsigned32, iso, ModuleIdentity, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Bits, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibIdentifier", "Unsigned32", "iso", "ModuleIdentity", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Bits", "IpAddress", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netscreenSetLogMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 8))
netscreenSetLogMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-10 00:00', '2001-09-28 00:00', '2001-05-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenSetLogMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenSetLogMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenSetLogMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenSetLogMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenSetLogMibModule.setDescription('This module defines the object that are used to monitor syslog setting')
nsSetLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 8))
nsSetLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogEnable.setStatus('current')
if mibBuilder.loadTexts: nsSetLogEnable.setDescription('Enable Syslog messages')
nsSetLogVPNEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogVPNEnable.setStatus('current')
if mibBuilder.loadTexts: nsSetLogVPNEnable.setDescription('Secure syslog message traffic using VPN encryption')
nsSetLogTraffic = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogTraffic.setStatus('current')
if mibBuilder.loadTexts: nsSetLogTraffic.setDescription('Including traffic log when recording administration log')
nsSetLogHostName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogHostName.setStatus('current')
if mibBuilder.loadTexts: nsSetLogHostName.setDescription('syslog server name or ip address')
nsSetLogPort = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogPort.setStatus('current')
if mibBuilder.loadTexts: nsSetLogPort.setDescription('syslog server port number')
nsSetLogSecFacility = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23, 4))).clone(namedValues=NamedValues(("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23), ("auth-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogSecFacility.setStatus('current')
if mibBuilder.loadTexts: nsSetLogSecFacility.setDescription('Security Facility of syslog server')
nsSetLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23, 4))).clone(namedValues=NamedValues(("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("lcoal5", 21), ("local6", 22), ("loca7", 23), ("auth-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogFacility.setStatus('current')
if mibBuilder.loadTexts: nsSetLogFacility.setDescription('Facility of syslog server')
nsSetLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("aleart", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogLevel.setStatus('current')
if mibBuilder.loadTexts: nsSetLogLevel.setDescription('Only log messages with a priority level of EMERGENCY/ALERT/CRITICAL/ERROR/WARNING/NOTICE/INFO/DEBUG or higher')
nsSetLogWebTrendsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogWebTrendsEnable.setStatus('current')
if mibBuilder.loadTexts: nsSetLogWebTrendsEnable.setDescription('Enable WebTrends Firewall syslog report.')
nsSetLogWebTrendsVPNEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogWebTrendsVPNEnable.setStatus('current')
if mibBuilder.loadTexts: nsSetLogWebTrendsVPNEnable.setDescription('Secure WebTrends message via VPN encryption')
nsSetLogWebTrendsHostName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogWebTrendsHostName.setStatus('current')
if mibBuilder.loadTexts: nsSetLogWebTrendsHostName.setDescription('WebTrends Host Name')
nsSetLogWebTrendsPort = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetLogWebTrendsPort.setStatus('current')
if mibBuilder.loadTexts: nsSetLogWebTrendsPort.setDescription('WebTrends Host Port')
mibBuilder.exportSymbols("NETSCREEN-SET-LOG-MIB", nsSetLogPort=nsSetLogPort, nsSetLogSecFacility=nsSetLogSecFacility, nsSetLogWebTrendsEnable=nsSetLogWebTrendsEnable, nsSetLogEnable=nsSetLogEnable, netscreenSetLogMibModule=netscreenSetLogMibModule, nsSetLogLevel=nsSetLogLevel, nsSetLog=nsSetLog, nsSetLogHostName=nsSetLogHostName, nsSetLogFacility=nsSetLogFacility, nsSetLogWebTrendsVPNEnable=nsSetLogWebTrendsVPNEnable, nsSetLogVPNEnable=nsSetLogVPNEnable, nsSetLogWebTrendsHostName=nsSetLogWebTrendsHostName, nsSetLogTraffic=nsSetLogTraffic, nsSetLogWebTrendsPort=nsSetLogWebTrendsPort, PYSNMP_MODULE_ID=netscreenSetLogMibModule)
