#
# PySNMP MIB module SVRNTCLU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SVRNTCLU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, enterprises, Counter32, Integer32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Gauge32, mgmt, ModuleIdentity, TimeTicks, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "enterprises", "Counter32", "Integer32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Gauge32", "mgmt", "ModuleIdentity", "TimeTicks", "NotificationType", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
class ObjectType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("objectUnknown", 1), ("objectOther", 2), ("share", 3), ("disk", 4), ("application", 5), ("ipAddress", 6), ("fileShare", 7))

class PolicyType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("policyUnknown", 1), ("policyOther", 2), ("inOrder", 3), ("random", 4), ("leastLoad", 5), ("roundRobin", 6))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class DateAndTime(DisplayString):
    pass

class FailoverReason(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("reasonUnknown", 1), ("reasonOther", 2), ("reconfiguration", 3), ("failure", 4), ("failback", 5))

mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
svrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22))
svrCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4))
svrNTClu = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2))
svrNTCluObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1))
svrNTCluMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 1))
svrNTCluClusterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2))
ntcExMgtMibMajorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExMgtMibMajorRev.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExMgtMibMajorRev.setDescription('Major revision of this MIB. Should equal 1.')
ntcExMgtMibMinorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExMgtMibMinorRev.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExMgtMibMinorRev.setDescription('Minor Revision of the MIB. Should equal 0.')
ntcExAlias = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExAlias.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExAlias.setDescription('Cluster alias name.')
ntcExGroupTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7), )
if mibBuilder.loadTexts: ntcExGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupTable.setDescription('Table of ntcExGroupEntry')
ntcExGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1), ).setIndexNames((0, "SVRNTCLU-MIB", "ntcExGroupIndex"))
if mibBuilder.loadTexts: ntcExGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupEntry.setDescription('lists all cluster groups for this cluster')
ntcExGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupIndex.setDescription('Unique index for each entry.')
ntcExGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupName.setDescription('The group name.')
ntcExGroupComment = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupComment.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupComment.setDescription('Description of the group.')
ntcExGroupOnLine = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupOnLine.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupOnLine.setDescription('Index in the member table of the node that currently controls this group.')
ntcExGroupFailedOver = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 5), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupFailedOver.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupFailedOver.setDescription('True if this group is failed over from the primary Online server.')
ntcExGroupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 6), PolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupPolicy.setDescription('Reflects the policy of choosing the on-line node.')
ntcExGroupReevaluate = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 7), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupReevaluate.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupReevaluate.setDescription('Indicates whether the object shall be reevaluated for movement to a new server when nodes in the group go up or down.')
ntcExGroupMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupMembers.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupMembers.setDescription('This is list of member names where each name is separated by a space.')
ntcExGroupObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExGroupObjects.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExGroupObjects.setDescription('This is a list of object names - those that make up this group. Each name is separated by a space.')
ntcExObjectTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8), )
if mibBuilder.loadTexts: ntcExObjectTable.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectTable.setDescription('Table of ntcExObjectEntry')
ntcExObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1), ).setIndexNames((0, "SVRNTCLU-MIB", "ntcExObjectIndex"))
if mibBuilder.loadTexts: ntcExObjectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectEntry.setDescription('list of all cluster objects')
ntcExObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExObjectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectIndex.setDescription('Unique index for each entry.')
ntcExObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExObjectName.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectName.setDescription('Name of the cluster object.')
ntcExObjectComment = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExObjectComment.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectComment.setDescription('Description of the object. ')
ntcExObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1, 4), ObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExObjectType.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectType.setDescription('Type of cluster object - disk, share, app...')
ntcExObjectDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExObjectDrives.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectDrives.setDescription('If instance is a disk, this object is a list of comma separated drive letters (e.g. F:,G:).')
ntcExObjectIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 4, 2, 1, 2, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntcExObjectIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ntcExObjectIpAddress.setDescription('The IP address which was assigned to this object/resource. If this object/resource has no IP address a value of 0.0.0.0 will be returned.')
mibBuilder.exportSymbols("SVRNTCLU-MIB", dec=dec, FailoverReason=FailoverReason, svrNTCluObjects=svrNTCluObjects, ntcExGroupEntry=ntcExGroupEntry, ntcExGroupIndex=ntcExGroupIndex, DateAndTime=DateAndTime, ntcExGroupFailedOver=ntcExGroupFailedOver, svrNTCluClusterInfo=svrNTCluClusterInfo, Boolean=Boolean, ntcExGroupComment=ntcExGroupComment, ntcExObjectIndex=ntcExObjectIndex, ntcExObjectName=ntcExObjectName, ntcExGroupPolicy=ntcExGroupPolicy, ntcExAlias=ntcExAlias, ema=ema, ntcExGroupTable=ntcExGroupTable, ObjectType=ObjectType, ntcExObjectComment=ntcExObjectComment, ntcExMgtMibMajorRev=ntcExMgtMibMajorRev, ntcExGroupObjects=ntcExGroupObjects, ntcExObjectTable=ntcExObjectTable, svrCluster=svrCluster, ntcExGroupName=ntcExGroupName, ntcExGroupOnLine=ntcExGroupOnLine, svrNTClu=svrNTClu, ntcExGroupReevaluate=ntcExGroupReevaluate, svrNTCluMibInfo=svrNTCluMibInfo, ntcExGroupMembers=ntcExGroupMembers, ntcExObjectIpAddress=ntcExObjectIpAddress, mib_extensions_1=mib_extensions_1, svrSystem=svrSystem, ntcExMgtMibMinorRev=ntcExMgtMibMinorRev, ntcExObjectType=ntcExObjectType, ntcExObjectDrives=ntcExObjectDrives, ntcExObjectEntry=ntcExObjectEntry, PolicyType=PolicyType)
