#
# PySNMP MIB module HH3C-LOGIC-VOLUME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LOGIC-VOLUME-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
Hh3cStorageActionType, Hh3cWwpnListType, Hh3cStorageEnableState, Hh3cLvIDType, Hh3cSessionIDType, Hh3cRaidIDType, hh3cStorageRef, Hh3cStorageLedStateType = mibBuilder.importSymbols("HH3C-STORAGE-REF-MIB", "Hh3cStorageActionType", "Hh3cWwpnListType", "Hh3cStorageEnableState", "Hh3cLvIDType", "Hh3cSessionIDType", "Hh3cRaidIDType", "hh3cStorageRef", "Hh3cStorageLedStateType")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, NotificationType, Counter64, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Counter32, Bits, Integer32, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "NotificationType", "Counter64", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Counter32", "Bits", "Integer32", "Gauge32", "MibIdentifier")
RowStatus, DisplayString, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "DateAndTime", "TextualConvention")
hh3cLogicVolume = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 10, 5))
if mibBuilder.loadTexts: hh3cLogicVolume.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: hh3cLogicVolume.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cLogicVolume.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cLogicVolume.setDescription('This MIB describes the general information of disk device.')
hh3cLvMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1))
hh3cLogicResourceCapacityObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1))
hh3cLvCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvCount.setStatus('current')
if mibBuilder.loadTexts: hh3cLvCount.setDescription('This object identifies the maximal number of logic volumes supported.')
hh3cLvMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 2), Integer32()).setUnits('TB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvMaxSize.setStatus('current')
if mibBuilder.loadTexts: hh3cLvMaxSize.setDescription('This object identifies the maximal size of logic volumes supported.')
hh3cTargetCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTargetCount.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetCount.setDescription('This object identifies the maximal number of targets supported.')
hh3cInitiatorCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cInitiatorCount.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorCount.setDescription('This object identifies the maximal number of initiators supported.')
hh3cSanClientCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSanClientCount.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientCount.setDescription('This object identifies the maximal number of SAN client supported.')
hh3cLogicVolumeResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2))
hh3cLvCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 1), Hh3cLvIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvCreateIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cLvCreateIndex.setDescription('This object supplys an valid index which uses to create a new entry for the hh3cLvTable object. Reference to hh3cLvRowStatus object for more information. Note that if an entry of the associated table has been created or deleted, the historical value of this object may be an invalid index to create a new entry for the associated table.')
hh3cLvTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cLvTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLvTable.setDescription('This table describes the logic resource information of a logic volume.')
hh3cLvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"))
if mibBuilder.loadTexts: hh3cLvEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLvEntry.setDescription('An entry containing management information applicable to a particular logic resource.')
hh3cLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 1), Hh3cLvIDType())
if mibBuilder.loadTexts: hh3cLvIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cLvIndex.setDescription('This object describes the symbol of a logic volume.')
hh3cLvName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvName.setStatus('current')
if mibBuilder.loadTexts: hh3cLvName.setDescription('This object identifies the name of a logic volume.')
hh3cLvTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvTotalSize.setStatus('current')
if mibBuilder.loadTexts: hh3cLvTotalSize.setDescription('This object describes the total size of a logic volume. The units is million bytes.')
hh3cLvCreateRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 4), Hh3cRaidIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvCreateRaidUuid.setStatus('current')
if mibBuilder.loadTexts: hh3cLvCreateRaidUuid.setDescription('This object describes the ID of array where a logic volume build on.')
hh3cLvCreateRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvCreateRaidSize.setStatus('current')
if mibBuilder.loadTexts: hh3cLvCreateRaidSize.setDescription('This object describes the size of a logic volume when create it. The units is million bytes.')
hh3cLvSedInquiryStringKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvSedInquiryStringKeep.setStatus('current')
if mibBuilder.loadTexts: hh3cLvSedInquiryStringKeep.setDescription("This object identifies if the inquiry string of the logic volume should be reserved. This value of this object is valid only when the associated hh3cLvType is equal to 'serviceEnabled'.")
hh3cLvSedRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 7), Hh3cRaidIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvSedRaidUuid.setStatus('current')
if mibBuilder.loadTexts: hh3cLvSedRaidUuid.setDescription('This object describes the location where the SED infomation is build on.')
hh3cLvState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("usable", 1), ("unusable", 2), ("conflict", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvState.setStatus('current')
if mibBuilder.loadTexts: hh3cLvState.setDescription("This object identifies the state of a logic volume. The value 'conflict' means the names of two or more logic volume are reduplicate.")
hh3cLvAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvAssigned.setStatus('current')
if mibBuilder.loadTexts: hh3cLvAssigned.setDescription('This object identifies if the logic volume has be designated for target or SAN client.')
hh3cLvType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("virtual", 1), ("direct", 2), ("serviceEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvType.setStatus('current')
if mibBuilder.loadTexts: hh3cLvType.setDescription("This object describes the type of a logic volume. The value 'virtual' means virtual devices are defined as sets of storage blocks from one or more physical array. This allows the creation of virtual devices that can be a portion of a larger physical array, or an aggregation of multiple physical array. The value 'direct' means direct devices are directly mapped SCSI devices. Because they are not virtualized, direct devices cannot take advantage of advanced storage options, such as mirroring, failover, replication, or snapshot copy. The value 'serviceEnabled' means service enabled devices are all maintained in a one-to-one mapping relationship(one physical array equals one logical device).")
hh3cLvExtendTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvExtendTimes.setStatus('current')
if mibBuilder.loadTexts: hh3cLvExtendTimes.setDescription('This object describes the times the logic volume has been extended.')
hh3cLvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cLvRowStatus.setDescription('This object describes the actions to create or delete a logic volume.')
hh3cLvExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3), )
if mibBuilder.loadTexts: hh3cLvExtTable.setStatus('current')
if mibBuilder.loadTexts: hh3cLvExtTable.setDescription('This table contains the extend resource information of the logic volume.')
hh3cLvExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvRaidUuid"))
if mibBuilder.loadTexts: hh3cLvExtEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cLvExtEntry.setDescription('An entry containing management information applicable to extend resource of logic volume.')
hh3cLvRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 1), Hh3cRaidIDType())
if mibBuilder.loadTexts: hh3cLvRaidUuid.setStatus('current')
if mibBuilder.loadTexts: hh3cLvRaidUuid.setDescription('This index is identical to hh3cRaidUuid in HH3C-RAID-MIB.')
hh3cLvExtSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvExtSize.setStatus('current')
if mibBuilder.loadTexts: hh3cLvExtSize.setDescription('This object describes the extend size of the logic volume in a specific raid. The units is million bytes. This object will always return zero when read.')
hh3cLvRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvRaidSize.setStatus('current')
if mibBuilder.loadTexts: hh3cLvRaidSize.setDescription('This object describes the size of logic volume on the specific raid. The units is million bytes.')
hh3cLvExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cLvExtRowStatus.setDescription('This object describes the action to extend the logic volume.')
hh3cTargetResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4))
hh3cTargetCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTargetCreateIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetCreateIndex.setDescription('This object supplys an valid index which uses to create a new entry for the hh3cTargetTable object. Note that if an entry of the associated table has been created or deleted, the historical value of this object may be an invalid index to create a new entry for the associated table.')
hh3cTargetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2), )
if mibBuilder.loadTexts: hh3cTargetTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetTable.setDescription('This table describes some information when creating a target.')
hh3cTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"))
if mibBuilder.loadTexts: hh3cTargetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetEntry.setDescription('An entry containing management information applicable to a target when create it.')
hh3cTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cTargetId.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetId.setDescription('This object identifies the ID of a target.')
hh3cTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetName.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetName.setDescription('This object describes the name of a target.')
hh3cTargetMinLun = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetMinLun.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetMinLun.setDescription('This object describes the mini LUN(logical unit number) number of a target.')
hh3cTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetRowStatus.setDescription('This object describes the actions to add or delete the target.')
hh3cTargetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5), )
if mibBuilder.loadTexts: hh3cTargetAddressTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetAddressTable.setDescription('This table described some address information of a target.')
hh3cTargetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetIpAddrType"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetIpAddress"))
if mibBuilder.loadTexts: hh3cTargetAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetAddressEntry.setDescription('An entry containing management information applicable to the address of a target.')
hh3cTargetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1, 1), InetAddress())
if mibBuilder.loadTexts: hh3cTargetIpAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetIpAddress.setDescription('This object describes the IP address of a target.')
hh3cTargetIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hh3cTargetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetIpAddrType.setDescription('This object describes the type of IP address.')
hh3cTargetIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetIpRowStatus.setDescription('This object describes the actions to add or delete a IP address of a target.')
hh3cTargetLvAssignTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6), )
if mibBuilder.loadTexts: hh3cTargetLvAssignTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetLvAssignTable.setDescription('This table describes logic resource information of a target.')
hh3cTargetLvAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"))
if mibBuilder.loadTexts: hh3cTargetLvAssignEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetLvAssignEntry.setDescription('An entry containing management information applicable to the logic resource of a target.')
hh3cTargetLvLun = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTargetLvLun.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetLvLun.setDescription('This object identifies the init LUN number of a target.')
hh3cTargetLvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetLvRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetLvRowStatus.setDescription('This object describes the actions to add or delete the logic resource of a target.')
hh3cInitiatorResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7))
hh3cInitiatorCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cInitiatorCreateIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorCreateIndex.setDescription('This object supplys an valid index which uses to create a new entry for the hh3cInitiatorTable object. Note that if an entry of the associated table has been created or deleted, the historical value of this object may be an invalid index to create a new entry for the associated table.')
hh3cInitiatorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2), )
if mibBuilder.loadTexts: hh3cInitiatorTable.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorTable.setDescription('This table describes the creation information of initiators.')
hh3cInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cSanClientId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cInitiatorId"))
if mibBuilder.loadTexts: hh3cInitiatorEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorEntry.setDescription('An entry containing management information applicable to the creation of initiator.')
hh3cInitiatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cInitiatorId.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorId.setDescription('This object identifies the ID of the initiator.')
hh3cInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cInitiatorName.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorName.setDescription('This object describes the name of the initiator.')
hh3cInitiatorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cInitiatorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cInitiatorRowStatus.setDescription('This object describes the actions to add or delete initiators.')
hh3cTargetInitiatorAssociateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8), )
if mibBuilder.loadTexts: hh3cTargetInitiatorAssociateTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetInitiatorAssociateTable.setDescription('This table describes the associate information between the target and initiator.')
hh3cTargetInitiatorAssociateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cInitiatorId"))
if mibBuilder.loadTexts: hh3cTargetInitiatorAssociateEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTargetInitiatorAssociateEntry.setDescription('An entry containing management information applicable to association between the target and initiator.')
hh3cTIAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("nonexclusive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIAccessMode.setStatus('current')
if mibBuilder.loadTexts: hh3cTIAccessMode.setDescription("This object identifies the mode of accessing between the target and initiator. The value 'read' means read available. The value 'write' means read/write available, and write available only for one association. The value 'nonexclusive' means read/write available for multi-association.")
hh3cTIChap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 2), Hh3cStorageEnableState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIChap.setStatus('current')
if mibBuilder.loadTexts: hh3cTIChap.setDescription('This object identifies the state of the chap attestation.')
hh3cTIUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIUserName.setStatus('current')
if mibBuilder.loadTexts: hh3cTIUserName.setDescription('This object identifies the user name for the chap attestation.')
hh3cTIPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIPassword.setStatus('current')
if mibBuilder.loadTexts: hh3cTIPassword.setDescription('This object identifies the password for the chap attestation. It is proclaimed and can be modified.')
hh3cTIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cTIRowStatus.setDescription('This object describes the actions to add or delete the association.')
hh3cTISessionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9), )
if mibBuilder.loadTexts: hh3cTISessionTable.setStatus('current')
if mibBuilder.loadTexts: hh3cTISessionTable.setDescription('This table described the information of the sessions.')
hh3cTISessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTISessionId"))
if mibBuilder.loadTexts: hh3cTISessionEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cTISessionEntry.setDescription('An entry containing management information applicable to the sessions.')
hh3cTISessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1, 1), Hh3cSessionIDType())
if mibBuilder.loadTexts: hh3cTISessionId.setStatus('current')
if mibBuilder.loadTexts: hh3cTISessionId.setDescription('This object identifies the ID of a session.')
hh3cTISessionConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTISessionConnectionCount.setStatus('current')
if mibBuilder.loadTexts: hh3cTISessionConnectionCount.setDescription('This object describes the number of connections between the targets and initiators.')
hh3cTISessionInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTISessionInitiatorName.setStatus('current')
if mibBuilder.loadTexts: hh3cTISessionInitiatorName.setDescription("This object identifies the initiator's name of a session.")
hh3cSanClientResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10))
hh3cSanClientCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSanClientCreateIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientCreateIndex.setDescription('This object supplys an valid index which uses to create a new entry for the hh3cSanClientTable object. Note that if an entry of the associated table has been created or deleted, the historical value of this object may be an invalid index to create a new entry for the associated table.')
hh3cSanClientTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2), )
if mibBuilder.loadTexts: hh3cSanClientTable.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientTable.setDescription('This table described the information of SAN(Storage Area Network) clients.')
hh3cSanClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cSanClientId"))
if mibBuilder.loadTexts: hh3cSanClientEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientEntry.setDescription('An entry containing management information applicable to the SAN clients.')
hh3cSanClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cSanClientId.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientId.setDescription('This object identifies the index of a SAN client.')
hh3cSanClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSanClientName.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientName.setDescription('This object identifies the name of a SAN client.')
hh3cSanClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iscsi", 1), ("fc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSanClientType.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientType.setDescription('This object identifies the type of a SAN client.')
hh3cFcInitiatorWwpnList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 4), Hh3cWwpnListType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcInitiatorWwpnList.setStatus('current')
if mibBuilder.loadTexts: hh3cFcInitiatorWwpnList.setDescription("This object identifies the name list of FC Initiator WWPN(World Wide Port Name). The value of this object is invalid and should be ignored when the value of associated hh3cSanClientType object is not equal to 'fc'.")
hh3cFcAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("nonexclusive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcAccessMode.setStatus('current')
if mibBuilder.loadTexts: hh3cFcAccessMode.setDescription("This object identifies the mode of access. The value of this object is invalid and should be ignored when the value of associated hh3cSanClientType object is not equal to 'fc'. The value 'read' means read available. The value 'write' means read/write available, and write available only for one association. The value 'nonexclusive' means read/write available for multi-association.")
hh3cSanClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSanClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cSanClientRowStatus.setDescription('This object describes the action to create or delete a SAN client.')
hh3cFcLogicResourceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11), )
if mibBuilder.loadTexts: hh3cFcLogicResourceTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFcLogicResourceTable.setDescription('This table describes logic resource information of a FC.')
hh3cFcLogicResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cSanClientId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"))
if mibBuilder.loadTexts: hh3cFcLogicResourceEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFcLogicResourceEntry.setDescription('An entry containing management information applicable to the logic resource of a FC.')
hh3cFcLvLun = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcLvLun.setStatus('current')
if mibBuilder.loadTexts: hh3cFcLvLun.setDescription('This object identifies the init LUN number of a FC.')
hh3cFcTargetWwpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 2), Hh3cWwpnListType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcTargetWwpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cFcTargetWwpnName.setDescription('This object identifies the name list of FC Target WWPN(World Wide Port Name). ')
hh3cFcInitiatorWwpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 3), Hh3cWwpnListType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcInitiatorWwpnName.setStatus('current')
if mibBuilder.loadTexts: hh3cFcInitiatorWwpnName.setDescription('This object identifies the name list of FC Initiator WWPN(World Wide Port Name). ')
hh3cFcLvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcLvRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFcLvRowStatus.setDescription('This object describes the actions to add or delete the logic resource of a FC.')
mibBuilder.exportSymbols("HH3C-LOGIC-VOLUME-MIB", hh3cLvName=hh3cLvName, hh3cFcLogicResourceTable=hh3cFcLogicResourceTable, hh3cTISessionTable=hh3cTISessionTable, hh3cLogicVolume=hh3cLogicVolume, hh3cTISessionInitiatorName=hh3cTISessionInitiatorName, hh3cLvRaidSize=hh3cLvRaidSize, hh3cTIPassword=hh3cTIPassword, hh3cLvTotalSize=hh3cLvTotalSize, hh3cInitiatorId=hh3cInitiatorId, hh3cFcLogicResourceEntry=hh3cFcLogicResourceEntry, hh3cTargetCreateIndex=hh3cTargetCreateIndex, hh3cTISessionId=hh3cTISessionId, hh3cLvSedRaidUuid=hh3cLvSedRaidUuid, hh3cLvExtTable=hh3cLvExtTable, hh3cTISessionEntry=hh3cTISessionEntry, hh3cTargetInitiatorAssociateEntry=hh3cTargetInitiatorAssociateEntry, hh3cSanClientCreateIndex=hh3cSanClientCreateIndex, hh3cInitiatorRowStatus=hh3cInitiatorRowStatus, hh3cTargetAddressTable=hh3cTargetAddressTable, hh3cTargetTable=hh3cTargetTable, hh3cTargetResource=hh3cTargetResource, hh3cTargetCount=hh3cTargetCount, hh3cInitiatorCount=hh3cInitiatorCount, hh3cTargetIpAddrType=hh3cTargetIpAddrType, hh3cLvAssigned=hh3cLvAssigned, hh3cLvRaidUuid=hh3cLvRaidUuid, hh3cLvRowStatus=hh3cLvRowStatus, hh3cInitiatorTable=hh3cInitiatorTable, hh3cLvExtendTimes=hh3cLvExtendTimes, hh3cSanClientName=hh3cSanClientName, hh3cTargetAddressEntry=hh3cTargetAddressEntry, hh3cLvType=hh3cLvType, hh3cTargetIpRowStatus=hh3cTargetIpRowStatus, hh3cLvTable=hh3cLvTable, hh3cSanClientTable=hh3cSanClientTable, hh3cTargetIpAddress=hh3cTargetIpAddress, hh3cSanClientResource=hh3cSanClientResource, hh3cTargetName=hh3cTargetName, hh3cTargetLvLun=hh3cTargetLvLun, hh3cSanClientType=hh3cSanClientType, hh3cSanClientRowStatus=hh3cSanClientRowStatus, hh3cFcLvLun=hh3cFcLvLun, hh3cLvExtRowStatus=hh3cLvExtRowStatus, hh3cFcAccessMode=hh3cFcAccessMode, hh3cLvMibObjects=hh3cLvMibObjects, hh3cInitiatorEntry=hh3cInitiatorEntry, hh3cTargetId=hh3cTargetId, hh3cSanClientEntry=hh3cSanClientEntry, hh3cTargetLvAssignEntry=hh3cTargetLvAssignEntry, hh3cLvMaxSize=hh3cLvMaxSize, hh3cLvCreateRaidUuid=hh3cLvCreateRaidUuid, hh3cLvExtSize=hh3cLvExtSize, hh3cTargetLvRowStatus=hh3cTargetLvRowStatus, hh3cFcInitiatorWwpnList=hh3cFcInitiatorWwpnList, hh3cTargetLvAssignTable=hh3cTargetLvAssignTable, hh3cLvExtEntry=hh3cLvExtEntry, hh3cLvEntry=hh3cLvEntry, hh3cTISessionConnectionCount=hh3cTISessionConnectionCount, hh3cTargetInitiatorAssociateTable=hh3cTargetInitiatorAssociateTable, hh3cFcTargetWwpnName=hh3cFcTargetWwpnName, hh3cTargetEntry=hh3cTargetEntry, hh3cLogicResourceCapacityObject=hh3cLogicResourceCapacityObject, PYSNMP_MODULE_ID=hh3cLogicVolume, hh3cLvIndex=hh3cLvIndex, hh3cSanClientCount=hh3cSanClientCount, hh3cLvCreateRaidSize=hh3cLvCreateRaidSize, hh3cLvCount=hh3cLvCount, hh3cLogicVolumeResource=hh3cLogicVolumeResource, hh3cLvState=hh3cLvState, hh3cTargetRowStatus=hh3cTargetRowStatus, hh3cFcLvRowStatus=hh3cFcLvRowStatus, hh3cTargetMinLun=hh3cTargetMinLun, hh3cSanClientId=hh3cSanClientId, hh3cTIAccessMode=hh3cTIAccessMode, hh3cLvSedInquiryStringKeep=hh3cLvSedInquiryStringKeep, hh3cInitiatorCreateIndex=hh3cInitiatorCreateIndex, hh3cLvCreateIndex=hh3cLvCreateIndex, hh3cTIUserName=hh3cTIUserName, hh3cInitiatorResource=hh3cInitiatorResource, hh3cFcInitiatorWwpnName=hh3cFcInitiatorWwpnName, hh3cInitiatorName=hh3cInitiatorName, hh3cTIChap=hh3cTIChap, hh3cTIRowStatus=hh3cTIRowStatus)
