#
# PySNMP MIB module FOUNDRY-SN-VSRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-VSRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:15:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
snSwitch, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, NotificationType, Unsigned32, iso, IpAddress, Integer32, Gauge32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "NotificationType", "Unsigned32", "iso", "IpAddress", "Integer32", "Gauge32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snVsrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21))
snVsrp.setRevisions(('2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snVsrp.setRevisionsDescriptions(('Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'convert from SMIv1 to SMIv2',))
if mibBuilder.loadTexts: snVsrp.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snVsrp.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snVsrp.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snVsrp.setDescription("Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class MacAddress(TextualConvention, OctetString):
    description = ' This data type is used to model media addresses. For many types of media, this will be in a binary representation. For example, an ethernet address would be represented as a string of 6 octets. '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snVsrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1))
snVsrpIfIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2))
snVsrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3))
snVsrpGroupOperModeVsrp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpGroupOperModeVsrp.setStatus('current')
if mibBuilder.loadTexts: snVsrpGroupOperModeVsrp.setDescription('The VSRP is configured on this system either enabled or disabled and thedefault is disabled mode. disabled(0)..........disable VSRP enabled(1)...........activate VSRP')
snVsrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfStateChangeTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate VSRP interface state change traps.')
snVsrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerIntf.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerIntf.setDescription('Indicates the maximum number of VRID per interface.')
snVsrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerSystem.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerSystem.setDescription('Indicates the maximum number of VRID per system.')
snVsrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpClearVrrpStat.setStatus('current')
if mibBuilder.loadTexts: snVsrpClearVrrpStat.setDescription('Clear VSRP statistics command.')
snVsrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1), )
if mibBuilder.loadTexts: snVsrpIfTable.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfTable.setDescription('The VSRP Interface Table describes the interfaces from the viewpoint of VSRP.')
snVsrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-VSRP-MIB", "snVsrpIfVlanId"))
if mibBuilder.loadTexts: snVsrpIfEntry.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfEntry.setDescription('The VSRP Interface Entry describes one interface from the viewpoint of VSRP.')
snVsrpIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfVlanId.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfVlanId.setDescription('Vlan index.')
snVsrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfAuthType.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfAuthType.setDescription('The authentication type of this interface.')
snVsrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfAuthPassword.setStatus('current')
if mibBuilder.loadTexts: snVsrpIfAuthPassword.setDescription('The simple text password is allowed if only if the snVsrpIfAuthType type is simpleTextPasswd and the size should be greater than zero. On reading this object, if the snVsrpIfAuthType type is noAuth, then zero length string will be returned')
snVsrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1), )
if mibBuilder.loadTexts: snVsrpVirRtrTable.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrTable.setDescription('The vsrp virtual router Entry describes one virtual router from the viewpoint of vsrp.')
snVsrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-VSRP-MIB", "snVsrpVirRtrVlanId"), (0, "FOUNDRY-SN-VSRP-MIB", "snVsrpVirRtrId"))
if mibBuilder.loadTexts: snVsrpVirRtrEntry.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrEntry.setDescription('The vsrp virtual router Entry describes one virtual router from the viewpoint of vsrp.')
snVsrpVirRtrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrVlanId.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrVlanId.setDescription('Vlan index.')
snVsrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrId.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrId.setDescription('One of the virtual router ID of this vsrp interface.')
snVsrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrOwnership.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrOwnership.setDescription('The ownership of this vsrp router interface can be set to backup(2). VirRtr SNMP-GET returns incomplete(0), it means no IP address has assigned to this vsrp router interface.')
snVsrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrCfgPriority.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrCfgPriority.setDescription('The higher the number the higher the priority is. This parameter decides which backup router should becomes the Active Router for the interface. A backup Router with higher priority selected to becomes the Active Router. Therefore, this Object can be set if only if snVsrpVirRtrOwnership is set to backup(2). For NetIron platforms, the range is between 8 to 255.')
snVsrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrTrackPriority.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrTrackPriority.setDescription('The higher the number the higher the priority is. after this object is configured, the snVsrpVirRtrCurrPriority of this interface will be adjusted dynamically with this track priority when the Track Port states first changes from UP to DOWN.')
snVsrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurrPriority.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrCurrPriority.setDescription('The higher the number the higher the priority is. This object will be adjusted dynamically with the track priority when the Track Port states first changes from UP to DOWN.')
snVsrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrHelloInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrHelloInt.setDescription('Time interval between advertisements (seconds).')
snVsrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrDeadInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrDeadInt.setDescription('Dead interval (seconds).')
snVsrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrPreemptMode.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrPreemptMode.setDescription('This mode controls whether a higher priority Backup router preempts a lower priority Master. The mode with enabled(1) allow preemption and disabled(0) prohibit preemption.')
snVsrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrState.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrState.setDescription("This object specifies the vsrp Router's interface state as: init(0)...initialization state. master(1)...master state. backup(2)...backup state.")
snVsrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrIpAddrMask.setDescription('The numbers of IP Addresses of this virtual router of this interface, this holds good for L3 vsrp.')
snVsrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrActivate.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrActivate.setDescription("This object specifies the vsrp Router's activate command as: disabled(0)...deactivate this vsrp Router. enabled(1)....activate this vsrp Router.")
snVsrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrTrackPortList.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrTrackPortList.setDescription("This object specifies the identity of the physical port and virtual ports whose state is to be monitored. Each port index is an ifIndex, if there are consecutive 4 or more ifIndex then they will be encoded like below. Encoding and decoding scheme is range based: Each range prefix with 0000 (2 octets) where 0000 is not valid ifIndex. Next 2 octets indicates lower range ifIndex, followed by 2 octets of higher range ifIndex. Individual(non range) ones will be displayed as it is. Ex: port list: 0001..0005 0015 0032..0047 Port list in PDU: 0000 0001 0005 000f 0000 0020 002f. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router VSRP physical track port membership.")
snVsrpVirRtrAdvertiseBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrAdvertiseBackup.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrAdvertiseBackup.setDescription('Set Advertise this backup router to master ')
snVsrpVirRtrHoldDownInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrHoldDownInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrHoldDownInt.setDescription('VSRP protection mechanism, an extra delay for a switch in backup mode to upgrade itself to master mode')
snVsrpVirRtrInitTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrInitTtl.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrInitTtl.setDescription('VSRP:TTL in the hello packet to regulate the distance that a hello packet can travel. It prevents the flooding of VSRP hello packets in the network')
snVsrpVirRtrIncPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrIncPortList.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrIncPortList.setDescription('Include all free ports of the VLAN into its control ports')
snVsrpVirRtrSave = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrSave.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrSave.setDescription('Set VSRP to save current parameters value')
snVsrpVirRtrBackupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrBackupInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrBackupInt.setDescription('Time interval between backup routers hello message advertisements (seconds).')
snVsrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrRowStatus.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an existing row VirRtr the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snVsrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxArpPktDropCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxArpPktDropCnts.setDescription('The received vsrp ARP Packet Drop Counts.')
snVsrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxIpPktDropCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxIpPktDropCnts.setDescription('The received VSRP IP Packet Drop Counts.')
snVsrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxPortMismatchCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxPortMismatchCnts.setDescription('The received vsrp Port mismatching Counts.')
snVsrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxNumOfIpMismatchCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxNumOfIpMismatchCnts.setDescription('The received VSRP Number of IP Addresses mismatching Counts.')
snVsrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxIpMismatchCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxIpMismatchCnts.setDescription('The received vsrp IP Address mismatching Counts.')
snVsrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxHelloIntMismatchCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxHelloIntMismatchCnts.setDescription('The counts of the virtual router interface with hello interval mismatch counts.')
snVsrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxPriorityZeroFromMasterCnts.setDescription('The counts of the virtual router interface with Priority zero from the master.')
snVsrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxHigherPriorityCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrRxHigherPriorityCnts.setDescription('The counts of the virtual router interface with higher Priority.')
snVsrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrTransToMasterStateCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrTransToMasterStateCnts.setDescription('The counts of the virtual router interface transition to master state.')
snVsrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrTransToBackupStateCnts.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrTransToBackupStateCnts.setDescription('The counts of the virtual router interface transition to backup state.')
snVsrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurrDeadInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrCurrDeadInt.setDescription('Current Dead interval (in 100 milliseconds).')
snVsrpVirRtrCurHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurHelloInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrCurHelloInt.setDescription('Set backup router hello interval')
snVsrpVirRtrCurHoldDownInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurHoldDownInt.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrCurHoldDownInt.setDescription('VSRP protection mechanism, an extra delay for a switch in backup mode to upgrade itself to master mode')
snVsrpVirRtrCurInitTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurInitTtl.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrCurInitTtl.setDescription('VSRP:TTL in the hello packet to regulate the distance that a hello packet can travel. It prevents the flooding of VSRP hello packets in the network')
snVsrpVirRtrHelloMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 35), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrHelloMacAddress.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrHelloMacAddress.setDescription('Hello MAC address.')
snVsrpVirRtrMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 21, 3, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrMasterIpAddr.setStatus('current')
if mibBuilder.loadTexts: snVsrpVirRtrMasterIpAddr.setDescription("The master router's real/virtual (primary) IP address. This is the IP address listed as the source in vsrp advertisement last received by this virtual router.")
mibBuilder.exportSymbols("FOUNDRY-SN-VSRP-MIB", snVsrpVirRtrRxArpPktDropCnts=snVsrpVirRtrRxArpPktDropCnts, snVsrpVirRtrHoldDownInt=snVsrpVirRtrHoldDownInt, snVsrpIfAuthType=snVsrpIfAuthType, snVsrpVirRtrHelloMacAddress=snVsrpVirRtrHelloMacAddress, snVsrpVirRtrActivate=snVsrpVirRtrActivate, snVsrpGlobal=snVsrpGlobal, snVsrpVirRtrOwnership=snVsrpVirRtrOwnership, snVsrpVirRtrCfgPriority=snVsrpVirRtrCfgPriority, snVsrpVirRtrRxHelloIntMismatchCnts=snVsrpVirRtrRxHelloIntMismatchCnts, snVsrpVirRtrMasterIpAddr=snVsrpVirRtrMasterIpAddr, MacAddress=MacAddress, snVsrpVirRtrInitTtl=snVsrpVirRtrInitTtl, snVsrpVirRtrRxHigherPriorityCnts=snVsrpVirRtrRxHigherPriorityCnts, snVsrpVirRtrRxPriorityZeroFromMasterCnts=snVsrpVirRtrRxPriorityZeroFromMasterCnts, snVsrpVirRtrId=snVsrpVirRtrId, snVsrpVirRtrBackupInt=snVsrpVirRtrBackupInt, snVsrpVirRtrTransToBackupStateCnts=snVsrpVirRtrTransToBackupStateCnts, snVsrp=snVsrp, snVsrpVirRtrPreemptMode=snVsrpVirRtrPreemptMode, snVsrpVirRtrSave=snVsrpVirRtrSave, PYSNMP_MODULE_ID=snVsrp, snVsrpIfMaxNumVridPerSystem=snVsrpIfMaxNumVridPerSystem, snVsrpIfIntf=snVsrpIfIntf, snVsrpVirRtrCurHelloInt=snVsrpVirRtrCurHelloInt, snVsrpClearVrrpStat=snVsrpClearVrrpStat, snVsrpVirRtrDeadInt=snVsrpVirRtrDeadInt, snVsrpIfEntry=snVsrpIfEntry, snVsrpVirRtrCurInitTtl=snVsrpVirRtrCurInitTtl, snVsrpVirRtrIpAddrMask=snVsrpVirRtrIpAddrMask, snVsrpVirRtr=snVsrpVirRtr, snVsrpGroupOperModeVsrp=snVsrpGroupOperModeVsrp, snVsrpVirRtrAdvertiseBackup=snVsrpVirRtrAdvertiseBackup, snVsrpVirRtrCurrDeadInt=snVsrpVirRtrCurrDeadInt, snVsrpVirRtrVlanId=snVsrpVirRtrVlanId, snVsrpVirRtrIncPortList=snVsrpVirRtrIncPortList, snVsrpIfMaxNumVridPerIntf=snVsrpIfMaxNumVridPerIntf, snVsrpVirRtrTable=snVsrpVirRtrTable, snVsrpVirRtrRxPortMismatchCnts=snVsrpVirRtrRxPortMismatchCnts, snVsrpVirRtrEntry=snVsrpVirRtrEntry, snVsrpVirRtrRxNumOfIpMismatchCnts=snVsrpVirRtrRxNumOfIpMismatchCnts, snVsrpVirRtrRxIpPktDropCnts=snVsrpVirRtrRxIpPktDropCnts, snVsrpIfAuthPassword=snVsrpIfAuthPassword, snVsrpVirRtrTransToMasterStateCnts=snVsrpVirRtrTransToMasterStateCnts, snVsrpIfTable=snVsrpIfTable, snVsrpVirRtrRowStatus=snVsrpVirRtrRowStatus, snVsrpVirRtrRxIpMismatchCnts=snVsrpVirRtrRxIpMismatchCnts, snVsrpVirRtrState=snVsrpVirRtrState, snVsrpIfVlanId=snVsrpIfVlanId, snVsrpIfStateChangeTrap=snVsrpIfStateChangeTrap, snVsrpVirRtrHelloInt=snVsrpVirRtrHelloInt, snVsrpVirRtrTrackPortList=snVsrpVirRtrTrackPortList, snVsrpVirRtrCurrPriority=snVsrpVirRtrCurrPriority, snVsrpVirRtrTrackPriority=snVsrpVirRtrTrackPriority, snVsrpVirRtrCurHoldDownInt=snVsrpVirRtrCurHoldDownInt)
