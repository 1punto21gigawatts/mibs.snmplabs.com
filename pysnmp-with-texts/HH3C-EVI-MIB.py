#
# PySNMP MIB module HH3C-EVI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-EVI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
IsisSystemID, = mibBuilder.importSymbols("ISIS-MIB", "IsisSystemID")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, IpAddress, NotificationType, MibIdentifier, iso, Integer32, Counter32, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "iso", "Integer32", "Counter32", "ModuleIdentity", "Gauge32")
RowStatus, TruthValue, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString", "MacAddress")
hh3cEvi = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 132))
hh3cEvi.setRevisions(('2013-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cEvi.setRevisionsDescriptions(('HH3C-EVI-MIB module for managing EVI-capable switches.',))
if mibBuilder.loadTexts: hh3cEvi.setLastUpdated('201304280000Z')
if mibBuilder.loadTexts: hh3cEvi.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cEvi.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cEvi.setDescription('This MIB contains the objects for managing Ethernet Virtual Interconnect(EVI).')
hh3cEviNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 0))
hh3cEviObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1))
hh3cEviBase = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 1))
hh3cEviIf = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2))
hh3cEviMac = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3))
hh3cEviProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4))
hh3cEviISIS = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5))
hh3cEviEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 6))
hh3cEviNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7))
class Hh3cEviMacType(TextualConvention, Integer32):
    description = 'MAC addresses include three types: dynamic, static, and flood (MACs configured for selective flooding).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("dynamic", 2), ("static", 3), ("flood", 4))

class Hh3cEviNeighborStatus(TextualConvention, Integer32):
    description = 'State of EVI neighbors.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

hh3cEviDesignatedVlan = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 1, 1), VlanId().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviDesignatedVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cEviDesignatedVlan.setDescription('The designated VLAN is used for edge devices on a multihomed site to exchange EVI IS-IS hello packets for DED election and extended-VLAN assignment.')
hh3cEviSiteID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviSiteID.setStatus('current')
if mibBuilder.loadTexts: hh3cEviSiteID.setDescription('Site ID. The edge devices in the same site must have the same site ID.')
hh3cEviIfExtendVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cEviIfExtendVlanTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfExtendVlanTable.setDescription('A table that contains extended VLAN entries. A site extends extended VLANs to remote sites over an EVI tunnel.')
hh3cEviIfExtendVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviIfExtendVlanIndex"))
if mibBuilder.loadTexts: hh3cEviIfExtendVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfExtendVlanEntry.setDescription('Detailed information about each extended VLAN.')
hh3cEviIfExtendVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: hh3cEviIfExtendVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfExtendVlanIndex.setDescription('Each VLAN index specifies a VLAN ID in the range of 1 to 4094.')
hh3cEviIfExtendVlanLAV = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviIfExtendVlanLAV.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfExtendVlanLAV.setDescription('Local Active VLANs (LAVs), which are active VLANs on the EVI tunnel interface. The interface can extend only active VLANs to remote sites.')
hh3cEviIfExtendVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEviIfExtendVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfExtendVlanRowStatus.setDescription('Entry status.')
hh3cEviIfVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cEviIfVlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfVlanMappingTable.setDescription('VLAN mapping table on the interface.')
hh3cEviIfVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviIfVlanMappingSiteId"), (0, "HH3C-EVI-MIB", "hh3cEviIfVlanMappingSrc"), (0, "HH3C-EVI-MIB", "hh3cEviIfVlanMappingDst"))
if mibBuilder.loadTexts: hh3cEviIfVlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfVlanMappingEntry.setDescription('Detailed information about each VLAN mapping.')
hh3cEviIfVlanMappingSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cEviIfVlanMappingSiteId.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfVlanMappingSiteId.setDescription("Site ID of the interface on which the VLAN mapping is configured. If '0' is specified, the operation applies to all sites.")
hh3cEviIfVlanMappingSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 2, 1, 2), VlanId())
if mibBuilder.loadTexts: hh3cEviIfVlanMappingSrc.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfVlanMappingSrc.setDescription('Local VLAN ID in the mapping.')
hh3cEviIfVlanMappingDst = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 2, 1, 3), VlanId())
if mibBuilder.loadTexts: hh3cEviIfVlanMappingDst.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfVlanMappingDst.setDescription('Remote VLAN ID in the mapping.')
hh3cEviIfVlanMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEviIfVlanMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfVlanMappingRowStatus.setDescription('Entry status.')
hh3cEviIfAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cEviIfAttributeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfAttributeTable.setDescription('A table that contains EVI tunnel attribute entries.')
hh3cEviIfAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEviIfAttributeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfAttributeEntry.setDescription('Detailed information about the attributes of each EVI tunnel.')
hh3cEviIfFloodingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviIfFloodingMode.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfFloodingMode.setDescription('State of the EVI flooding function. The function is enabled if the value is set to true.')
hh3cEviIfARPSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviIfARPSuppression.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfARPSuppression.setDescription('State of the ARP flooding suppression function. The function is enabled if the value is set to true.')
hh3cEviIfFloodingMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 4), )
if mibBuilder.loadTexts: hh3cEviIfFloodingMacTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfFloodingMacTable.setDescription('A table that contains MAC addresses configured for selective flooding.')
hh3cEviIfFloodingMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviIfFloodingMacAddress"), (0, "HH3C-EVI-MIB", "hh3cEviIfFloodMacVlanIndex"))
if mibBuilder.loadTexts: hh3cEviIfFloodingMacEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfFloodingMacEntry.setDescription('Detailed information about each MAC address used for EVI selective flooding.')
hh3cEviIfFloodingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cEviIfFloodingMacAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfFloodingMacAddress.setDescription('MAC address used for EVI selective flooding.')
hh3cEviIfFloodMacVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 4, 1, 2), VlanId())
if mibBuilder.loadTexts: hh3cEviIfFloodMacVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfFloodMacVlanIndex.setDescription('The VLAN that contains the MAC address.')
hh3cEviIfFloodingMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEviIfFloodingMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviIfFloodingMacRowStatus.setDescription('State of the MAC address entry. You can use this object to create or delete entries. Deleting entries does not delete this object.')
hh3cEviMacCountTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cEviMacCountTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacCountTable.setDescription('EVI MAC statistics table. The table contains MAC entry counts sorted by MAC address types, including local MACs, local MAC conflicts, remote MACs, and remote MAC conflicts.')
hh3cEviMacCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEviMacCountEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacCountEntry.setDescription('EVI MAC entry counts.')
hh3cEviMacLocalMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacLocalMacs.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalMacs.setDescription('Number of local MACs.')
hh3cEviMacLocalConflicts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacLocalConflicts.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalConflicts.setDescription('Number of local MACs that conflict with remote MACs.')
hh3cEviMacRemoteMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacRemoteMacs.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteMacs.setDescription('Number of remote MACs received from remote edge devices.')
hh3cEviMacRemoteConflicts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacRemoteConflicts.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteConflicts.setDescription('Number of remote MACs that conflict with local MACs.')
hh3cEviMacLocalTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cEviMacLocalTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalTable.setDescription('MAC address table that only contains MAC addresses at the site.')
hh3cEviMacLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviMacLocalVlan"), (0, "HH3C-EVI-MIB", "hh3cEviMacLocalMacAddr"))
if mibBuilder.loadTexts: hh3cEviMacLocalEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalEntry.setDescription('Detailed informaiton about each local MAC entry.')
hh3cEviMacLocalVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: hh3cEviMacLocalVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalVlan.setDescription('VLANs that contain the local MACs.')
hh3cEviMacLocalMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cEviMacLocalMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalMacAddr.setDescription('Local MAC addresses.')
hh3cEviMacLocalMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2, 1, 3), Hh3cEviMacType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacLocalMacType.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalMacType.setDescription('MAC address types, including: dynamic MACs, static MACs, and flood MACs (MACs configured for selective flooding).')
hh3cEviMacLocalConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacLocalConflict.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalConflict.setDescription('Whether the MAC conflicts with any remote MAC.')
hh3cEviMacLocalFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacLocalFiltered.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacLocalFiltered.setDescription('Whether the MAC is filtered.')
hh3cEviMacRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 3), )
if mibBuilder.loadTexts: hh3cEviMacRemoteTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteTable.setDescription('A table contains MAC addresses received from remote edge devices.')
hh3cEviMacRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviMacRemoteVlan"), (0, "HH3C-EVI-MIB", "hh3cEviMacRemoteMacAddr"))
if mibBuilder.loadTexts: hh3cEviMacRemoteEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteEntry.setDescription('Detailed information about each remote MAC.')
hh3cEviMacRemoteVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: hh3cEviMacRemoteVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteVlan.setDescription('VLANs that contain remote MAC addresses.')
hh3cEviMacRemoteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: hh3cEviMacRemoteMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteMacAddr.setDescription('Remote MAC address.')
hh3cEviMacRemoteMacEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacRemoteMacEffect.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteMacEffect.setDescription('Whether the MAC can be used for forwarding traffic.')
hh3cEviMacRemoteConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviMacRemoteConflict.setStatus('current')
if mibBuilder.loadTexts: hh3cEviMacRemoteConflict.setDescription('The remote MAC conflicts with a local MAC.')
hh3cEviProcessPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 1), )
if mibBuilder.loadTexts: hh3cEviProcessPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessPolicyTable.setDescription('A table that contains routing policy information for each EVI IS-IS process.')
hh3cEviProcessPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 1, 1), ).setIndexNames((0, "HH3C-EVI-MIB", "hh3cEviProcessId"))
if mibBuilder.loadTexts: hh3cEviProcessPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessPolicyEntry.setDescription('Detailed information about the routing policy for each EVI IS-IS process.')
hh3cEviProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEviProcessId.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessId.setDescription('EVI IS-IS process ID.')
hh3cEviProcessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviProcessPolicy.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessPolicy.setDescription('Routing policy for the EVI IS-IS process.')
hh3cEviProcessGrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 2), )
if mibBuilder.loadTexts: hh3cEviProcessGrTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessGrTable.setDescription('A table that contains graceful restart (GR) information.')
hh3cEviProcessGrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 2, 1), ).setIndexNames((0, "HH3C-EVI-MIB", "hh3cEviProcessId"))
if mibBuilder.loadTexts: hh3cEviProcessGrEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessGrEntry.setDescription('Detailed GR information for each EVI IS-IS process.')
hh3cEviProcessGrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviProcessGrEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessGrEnable.setDescription('Whether the GR function is enabled.')
hh3cEviProcessGrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 1800)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviProcessGrInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessGrInterval.setDescription('EVI IS-IS GR interval in the range of 30 to 1800, in seconds.')
hh3cEviProcessVSysTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 3), )
if mibBuilder.loadTexts: hh3cEviProcessVSysTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessVSysTable.setDescription('A table that contains virtual system entries. Virtual systems are associated with EVI IS-IS processes.')
hh3cEviProcessVSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 3, 1), ).setIndexNames((0, "HH3C-EVI-MIB", "hh3cEviProcessId"), (0, "HH3C-EVI-MIB", "hh3cEviVirtualSysId"))
if mibBuilder.loadTexts: hh3cEviProcessVSysEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviProcessVSysEntry.setDescription('Detailed information about each vitual system.')
hh3cEviVirtualSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 3, 1, 1), IsisSystemID())
if mibBuilder.loadTexts: hh3cEviVirtualSysId.setStatus('current')
if mibBuilder.loadTexts: hh3cEviVirtualSysId.setDescription('Virtual system ID in hexadecimal notation. The virtual system ID must be unique in the EVI network.')
hh3cEviVirtualSysRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEviVirtualSysRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviVirtualSysRowStatus.setDescription('Entry status.')
hh3cEviISISNbrSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 1), )
if mibBuilder.loadTexts: hh3cEviISISNbrSummaryTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrSummaryTable.setDescription('EVI neighbor statistics table.')
hh3cEviISISNbrSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 1, 1), ).setIndexNames((0, "HH3C-EVI-MIB", "hh3cEviProcessId"))
if mibBuilder.loadTexts: hh3cEviISISNbrSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrSummaryEntry.setDescription('EVI neighbor statistics table entries. The entries contain the EVI neighbor summary for each EVI IS-IS process.')
hh3cEviISISNbrMaxMultiHomes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviISISNbrMaxMultiHomes.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrMaxMultiHomes.setDescription('The maximum number of edge devices that the site can contain.')
hh3cEviISISNbrSiteNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviISISNbrSiteNbrs.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrSiteNbrs.setDescription('The count of neighbors that belong to the same site.')
hh3cEviISISNbrLinkNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviISISNbrLinkNbrs.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrLinkNbrs.setDescription('The count of neighbors that are in remote sites.')
hh3cEviISISNbrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 2), )
if mibBuilder.loadTexts: hh3cEviISISNbrTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrTable.setDescription('A table that contains generic information about all neighbors.')
hh3cEviISISNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 2, 1), ).setIndexNames((0, "HH3C-EVI-MIB", "hh3cEviProcessId"), (0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviISISNbrSysId"))
if mibBuilder.loadTexts: hh3cEviISISNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrEntry.setDescription('Detailed information about each neighbor of the edge device.')
hh3cEviISISNbrSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 2, 1, 1), IsisSystemID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEviISISNbrSysId.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrSysId.setDescription('System ID of the neighbor.')
hh3cEviISISNbrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviISISNbrMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrMacAddr.setDescription('MAC address of the neighbor.')
hh3cEviISISNbrSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviISISNbrSiteId.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrSiteId.setDescription('Site ID of the neighbor.')
hh3cEviISISNbrTransStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviISISNbrTransStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviISISNbrTransStatus.setDescription('State of EVI transport-facing links.')
hh3cEviEnableTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 6, 1), )
if mibBuilder.loadTexts: hh3cEviEnableTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviEnableTable.setDescription('A table that contains all EVI-enabled neighboring ports of the edge device.')
hh3cEviEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEviEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviEnableEntry.setDescription('Detailed information about each EVI-enabled port in the EVI network.')
hh3cEviEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 6, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviEnableStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviEnableStatus.setDescription('End station service disable (trunk port) bit. When this bit is set (true), all native frames received on the port and all native frames that would have been sent on the port are discarded. The value of this object MUST be retained across reinitializations of the management system.')
hh3cEviNbrBaseTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 1), )
if mibBuilder.loadTexts: hh3cEviNbrBaseTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrBaseTable.setDescription('A table that contains basic information about the EVI Neighbor Discovery Protocol (ENDP).')
hh3cEviNbrBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEviNbrBaseEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrBaseEntry.setDescription('Detailed information about ENDP for each EVI tunnel.')
hh3cEviNbrSelfServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviNbrSelfServerStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrSelfServerStatus.setDescription('If the value is set to true, the EVI neighbor discovery server (ENDS) is enabled. When you enable ENDS on an EVI tunnel interface, an EVI neighbor discovery client (ENDC) on the EVI tunnel interface is also enabled automatically, with the source address of the EVI tunnel as the server address.')
hh3cEviNbrAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviNbrAuthPassword.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrAuthPassword.setDescription('ENDP authentication key. It is a zero-length string when being read.')
hh3cEviNbrClientRegisterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEviNbrClientRegisterInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrClientRegisterInterval.setDescription('Interval at which the ENDCs on an EVI tunnel interface update their registration with their ENDSs.')
hh3cEviNbrRemoteServerTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 2), )
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerTable.setDescription('A table that contains basic information about the remote ENDSs.')
hh3cEviNbrRemoteServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviNbrRemoteServerType"), (0, "HH3C-EVI-MIB", "hh3cEviNbrRemoteServer"))
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerEntry.setDescription('Detailed information about each remote ENDS. When you set the address of a remote ENDS on an EVI tunnel interface, an ENDC is enabled automatically on the EVI tunnel interface.')
hh3cEviNbrRemoteServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerType.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerType.setDescription('Address type of the remote ENDS, including ipv4 and ipv6.')
hh3cEviNbrRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cEviNbrRemoteServer.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrRemoteServer.setDescription('Address of the remote ENDS. The address type is specified by the hh3cEviNbrRemoteServerType object. Address length (4 or 16 bytes) must be consistent with the address type.')
hh3cEviNbrRemoteServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrRemoteServerRowStatus.setDescription('Entry status. This object is used to create or delete entries. Deleting entries does not delete this object.')
hh3cEviNbrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3), )
if mibBuilder.loadTexts: hh3cEviNbrTable.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrTable.setDescription('A table that contains basic information about neighbors discovered with ENDP.')
hh3cEviNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EVI-MIB", "hh3cEviNbrAddressType"), (0, "HH3C-EVI-MIB", "hh3cEviNbrAddress"))
if mibBuilder.loadTexts: hh3cEviNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrEntry.setDescription('Detailed information about each EVI neighbor.')
hh3cEviNbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cEviNbrAddressType.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrAddressType.setDescription('Address type of the neighbor, including ipv4 and ipv6.')
hh3cEviNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: hh3cEviNbrAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrAddress.setDescription('Address of the neighbor. The address type is specified by the hh3cEviNbrAddressType object. Address length (4 or 16 bytes) must be consistent with the address type.')
hh3cEviNbrSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviNbrSystemID.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrSystemID.setDescription('System ID of the neighbor.')
hh3cEviNbrExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviNbrExpireTime.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrExpireTime.setDescription('Expiration time of the neighbor.')
hh3cEviNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 132, 1, 7, 3, 1, 5), Hh3cEviNeighborStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEviNbrStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNbrStatus.setDescription('State of the neighbor.')
hh3cEviNewDed = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 132, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-EVI-MIB", "hh3cEviProcessId"), ("HH3C-EVI-MIB", "hh3cEviISISNbrSysId"))
if mibBuilder.loadTexts: hh3cEviNewDed.setStatus('current')
if mibBuilder.loadTexts: hh3cEviNewDed.setDescription('Notifies that a new DED has been elected.')
hh3cEviSiteEDTopoChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 132, 0, 2)).setObjects(("HH3C-EVI-MIB", "hh3cEviProcessId"), ("HH3C-EVI-MIB", "hh3cEviISISNbrSiteNbrs"))
if mibBuilder.loadTexts: hh3cEviSiteEDTopoChange.setStatus('current')
if mibBuilder.loadTexts: hh3cEviSiteEDTopoChange.setDescription('Notifies that the EVI network topology has changed.')
hh3cEviEDLinkDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 132, 0, 3)).setObjects(("HH3C-EVI-MIB", "hh3cEviProcessId"))
if mibBuilder.loadTexts: hh3cEviEDLinkDisconnect.setStatus('current')
if mibBuilder.loadTexts: hh3cEviEDLinkDisconnect.setDescription('Notifies that all the EVI links on a tunnel are down.')
mibBuilder.exportSymbols("HH3C-EVI-MIB", hh3cEviMacLocalConflicts=hh3cEviMacLocalConflicts, hh3cEviMacLocalFiltered=hh3cEviMacLocalFiltered, PYSNMP_MODULE_ID=hh3cEvi, hh3cEviProcess=hh3cEviProcess, hh3cEviIfFloodMacVlanIndex=hh3cEviIfFloodMacVlanIndex, hh3cEviMacLocalConflict=hh3cEviMacLocalConflict, hh3cEviProcessGrEntry=hh3cEviProcessGrEntry, hh3cEviNbrSystemID=hh3cEviNbrSystemID, Hh3cEviNeighborStatus=Hh3cEviNeighborStatus, hh3cEviMacRemoteMacAddr=hh3cEviMacRemoteMacAddr, hh3cEviEnable=hh3cEviEnable, hh3cEviMacRemoteConflict=hh3cEviMacRemoteConflict, hh3cEviIfAttributeEntry=hh3cEviIfAttributeEntry, hh3cEviISISNbrSummaryEntry=hh3cEviISISNbrSummaryEntry, hh3cEviMac=hh3cEviMac, hh3cEviMacRemoteVlan=hh3cEviMacRemoteVlan, hh3cEviMacRemoteEntry=hh3cEviMacRemoteEntry, hh3cEviNbrAddressType=hh3cEviNbrAddressType, hh3cEviProcessGrEnable=hh3cEviProcessGrEnable, hh3cEviMacLocalEntry=hh3cEviMacLocalEntry, hh3cEviNbrRemoteServerEntry=hh3cEviNbrRemoteServerEntry, hh3cEviNbrBaseEntry=hh3cEviNbrBaseEntry, hh3cEviISISNbrSummaryTable=hh3cEviISISNbrSummaryTable, hh3cEviMacLocalVlan=hh3cEviMacLocalVlan, hh3cEviIfVlanMappingDst=hh3cEviIfVlanMappingDst, hh3cEviProcessVSysEntry=hh3cEviProcessVSysEntry, hh3cEviProcessId=hh3cEviProcessId, hh3cEviIf=hh3cEviIf, hh3cEviEnableStatus=hh3cEviEnableStatus, hh3cEviNbrAddress=hh3cEviNbrAddress, hh3cEviIfExtendVlanTable=hh3cEviIfExtendVlanTable, hh3cEviIfVlanMappingRowStatus=hh3cEviIfVlanMappingRowStatus, hh3cEviProcessVSysTable=hh3cEviProcessVSysTable, hh3cEviNbrAuthPassword=hh3cEviNbrAuthPassword, hh3cEviNbrSelfServerStatus=hh3cEviNbrSelfServerStatus, hh3cEviISISNbrMaxMultiHomes=hh3cEviISISNbrMaxMultiHomes, hh3cEviISISNbrSiteNbrs=hh3cEviISISNbrSiteNbrs, hh3cEviNbrRemoteServer=hh3cEviNbrRemoteServer, hh3cEviMacLocalTable=hh3cEviMacLocalTable, hh3cEviNbr=hh3cEviNbr, hh3cEviProcessGrTable=hh3cEviProcessGrTable, hh3cEviNbrBaseTable=hh3cEviNbrBaseTable, hh3cEviSiteEDTopoChange=hh3cEviSiteEDTopoChange, hh3cEviISISNbrSysId=hh3cEviISISNbrSysId, hh3cEviMacCountTable=hh3cEviMacCountTable, hh3cEviIfFloodingMacAddress=hh3cEviIfFloodingMacAddress, hh3cEviDesignatedVlan=hh3cEviDesignatedVlan, hh3cEviNbrRemoteServerRowStatus=hh3cEviNbrRemoteServerRowStatus, hh3cEviISISNbrLinkNbrs=hh3cEviISISNbrLinkNbrs, hh3cEviEnableEntry=hh3cEviEnableEntry, hh3cEviMacRemoteMacs=hh3cEviMacRemoteMacs, hh3cEviISISNbrSiteId=hh3cEviISISNbrSiteId, hh3cEviMacCountEntry=hh3cEviMacCountEntry, hh3cEviIfExtendVlanRowStatus=hh3cEviIfExtendVlanRowStatus, hh3cEviMacLocalMacs=hh3cEviMacLocalMacs, hh3cEviMacRemoteMacEffect=hh3cEviMacRemoteMacEffect, hh3cEviProcessPolicy=hh3cEviProcessPolicy, hh3cEviIfFloodingMacTable=hh3cEviIfFloodingMacTable, Hh3cEviMacType=Hh3cEviMacType, hh3cEviNotifications=hh3cEviNotifications, hh3cEviEnableTable=hh3cEviEnableTable, hh3cEviIfExtendVlanEntry=hh3cEviIfExtendVlanEntry, hh3cEviSiteID=hh3cEviSiteID, hh3cEviNbrRemoteServerType=hh3cEviNbrRemoteServerType, hh3cEviMacLocalMacType=hh3cEviMacLocalMacType, hh3cEviEDLinkDisconnect=hh3cEviEDLinkDisconnect, hh3cEviMacRemoteTable=hh3cEviMacRemoteTable, hh3cEviNbrStatus=hh3cEviNbrStatus, hh3cEviNbrRemoteServerTable=hh3cEviNbrRemoteServerTable, hh3cEviIfVlanMappingTable=hh3cEviIfVlanMappingTable, hh3cEviIfARPSuppression=hh3cEviIfARPSuppression, hh3cEviNbrExpireTime=hh3cEviNbrExpireTime, hh3cEviBase=hh3cEviBase, hh3cEviNbrClientRegisterInterval=hh3cEviNbrClientRegisterInterval, hh3cEviProcessGrInterval=hh3cEviProcessGrInterval, hh3cEviProcessPolicyTable=hh3cEviProcessPolicyTable, hh3cEviIfVlanMappingSiteId=hh3cEviIfVlanMappingSiteId, hh3cEviVirtualSysRowStatus=hh3cEviVirtualSysRowStatus, hh3cEviNbrTable=hh3cEviNbrTable, hh3cEvi=hh3cEvi, hh3cEviIfVlanMappingEntry=hh3cEviIfVlanMappingEntry, hh3cEviProcessPolicyEntry=hh3cEviProcessPolicyEntry, hh3cEviVirtualSysId=hh3cEviVirtualSysId, hh3cEviMacLocalMacAddr=hh3cEviMacLocalMacAddr, hh3cEviIfFloodingMode=hh3cEviIfFloodingMode, hh3cEviISISNbrMacAddr=hh3cEviISISNbrMacAddr, hh3cEviNewDed=hh3cEviNewDed, hh3cEviIfFloodingMacEntry=hh3cEviIfFloodingMacEntry, hh3cEviISISNbrTable=hh3cEviISISNbrTable, hh3cEviMacRemoteConflicts=hh3cEviMacRemoteConflicts, hh3cEviObjects=hh3cEviObjects, hh3cEviIfVlanMappingSrc=hh3cEviIfVlanMappingSrc, hh3cEviISISNbrTransStatus=hh3cEviISISNbrTransStatus, hh3cEviIfExtendVlanIndex=hh3cEviIfExtendVlanIndex, hh3cEviIfExtendVlanLAV=hh3cEviIfExtendVlanLAV, hh3cEviIfAttributeTable=hh3cEviIfAttributeTable, hh3cEviISIS=hh3cEviISIS, hh3cEviISISNbrEntry=hh3cEviISISNbrEntry, hh3cEviNbrEntry=hh3cEviNbrEntry, hh3cEviIfFloodingMacRowStatus=hh3cEviIfFloodingMacRowStatus)
