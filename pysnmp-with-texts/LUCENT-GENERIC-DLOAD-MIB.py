#
# PySNMP MIB module LUCENT-GENERIC-DLOAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LUCENT-GENERIC-DLOAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, ModuleIdentity, IpAddress, Gauge32, MibIdentifier, iso, ObjectIdentity, NotificationType, Counter64, enterprises, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "ModuleIdentity", "IpAddress", "Gauge32", "MibIdentifier", "iso", "ObjectIdentity", "NotificationType", "Counter64", "enterprises", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
luDload = ModuleIdentity((1, 3, 6, 1, 4, 1, 677))
if mibBuilder.loadTexts: luDload.setLastUpdated('9902230000Z')
if mibBuilder.loadTexts: luDload.setOrganization('Lucent Technologies Inc.')
if mibBuilder.loadTexts: luDload.setContactInfo('Erick Crowell -- ecrowell@lucent.com Ira Steckler -- isteckler@lucent.com')
if mibBuilder.loadTexts: luDload.setDescription('Lucent Generic Download / Upload Private MIB')
luOpTable = MibTable((1, 3, 6, 1, 4, 1, 677, 1), )
if mibBuilder.loadTexts: luOpTable.setStatus('current')
if mibBuilder.loadTexts: luOpTable.setDescription('')
luOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 677, 1, 1), ).setIndexNames((0, "LUCENT-GENERIC-DLOAD-MIB", "luOpIndex"))
if mibBuilder.loadTexts: luOpEntry.setStatus('current')
if mibBuilder.loadTexts: luOpEntry.setDescription('Each entry in the LU Operations Table corresponds to a unique logical managed device. It is possible that a single HW device can have resident severial Logical managed devices.')
luOpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luOpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: luOpSerialNumber.setDescription('The identifier of the device. This is a unique number and in most cases maps directly to the base MAC address of the device. Otherwise any combination of characters up to 32 bytes long.')
luOpMCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: luOpMCodeVersion.setStatus('current')
if mibBuilder.loadTexts: luOpMCodeVersion.setDescription('Microcode version of the device. Stored in the format :- first Byte - not used 2nd Byte - microcode major version number 3rd Byte - microcode minor version number 4th Byte - microcode debug version number.')
luOpBCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: luOpBCodeVersion.setStatus('current')
if mibBuilder.loadTexts: luOpBCodeVersion.setDescription('Bootcode version of the device and the hardware version. Stored in the format :- first Byte - hardware version number 2nd Byte - microcode major version number 3rd Byte - microcode minor version number 4th Byte - microcode debug version number.')
luOpMCodeFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luOpMCodeFilename.setStatus('current')
if mibBuilder.loadTexts: luOpMCodeFilename.setDescription('Original filename for the microcode that has been downloaded to the device.')
luOpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("normal", 1), ("reboot", 2), ("identify", 3), ("test", 4), ("erase-config", 5), ("erase-flash", 6), ("tftp-ip", 7), ("tftp-ipx", 8), ("rpl-ipx", 9), ("rpl-llc", 10), ("halt", 11), ("up-tftp-ip", 12), ("up-tftp-ipx", 13), ("snapshot", 14), ("snapshot-tftp", 15), ("startup-tftp", 16), ("file-tftp", 17), ("tftp-snapshot", 18), ("tftp-startup", 19), ("tftp-start-snap", 20), ("tftp-file", 21), ("snapshot-startup", 22), ("file-snapshot", 23), ("file-startup", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luOpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: luOpAdminStatus.setDescription("The desired operating mode of the device. The mode can be changed by setting this object. If the device does not support the action it will return a bad value error. The behaviour of these states is device specific and some of the states may latch until the state is returned to normal. normal - standard operating mode / can be used to cancel a download or return the device from any latching state. reboot - force the device to reboot. The device will reboot into the version of flash identified by luOpDefaultFlashVersion. identify - force the device to identify itself by flashing lights. This state may latch. test - force the device to do a self test. This state may latch. erase-config - erase all configuration info erase-flash - erase the version of microcode stored in the flash bank identifed by luOpEraseFlashVersion. tftp-ip - force the device to start a TFTP download over IP tftp-ipx - force the device to start a TFTP download over IPX rpl-ipx - force the device to start a RPL download over IPX rpl-llc - force the device to start a RPL download over LLC halt - force the defice to shutdown ready for power off up-tftp-ip - force the device to start a TFTP upload over IP up-tftp-ipx - force the device to start a TFTP upload over IPX snapshot - force the device to take a snapshot of its current configuration and save it to the name specified by the luOpConfFileName object. snapshot-tftp - force the device to take a snapshot of its running configuration and tftp it to a server. startup-tftp - force the device to upload it's startup configuration to a tftp server. file-tftp - force the device to upload a configuration file (specified in the luOpConfFileName object ) to a tftp server. tftp-startup - force the device to download it's startup configuration from a tftp server. tftp-snapshot - force the device to download it's running configuration from a tftp server. tftp-start-snap - force the device to download it's running configuration & startup configuration from a tftp server. tftp-file - force the device to download a configuration file from a tftp server. snapshot-startup - force the device to take a snapshot of it's running configuration and save it as the startup configuration. file-snapshot - force the device to copy the file specified in the luOpConfFileName to it's running configuration file-startup - force the device to copy the file specified in the luOpConfFileName to it's startup configuration")
luOpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("reboot", 2), ("identify", 3), ("test", 4), ("downloading", 5), ("uploading", 6), ("reading-config", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luOpOperStatus.setStatus('current')
if mibBuilder.loadTexts: luOpOperStatus.setDescription('The current operating mode of the device. normal - standard operating mode reboot - the device is rebooting identify - the device is identifying itself test - the device is performing a self-test downloading - the device is performing a download uploading - the device is performing an upload reading-config - the device is reading a configuration file NOTE:This variable is only available on devices that support version 1.2 or greater of the Box MIB')
luOpEraseFlashVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luOpEraseFlashVersion.setStatus('current')
if mibBuilder.loadTexts: luOpEraseFlashVersion.setDescription('A valid version index for the bank of flash or a software component to erase when AdminStatus is set to erase-flash. NOTE:This variable is only available on devices that support version 1.2 or greater of the Box MIB')
luOpDefaultFlashVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luOpDefaultFlashVersion.setStatus('current')
if mibBuilder.loadTexts: luOpDefaultFlashVersion.setDescription('The version index of the default flash bank that a device will reboot into when a standard reboot is performed. NOTE:This variable is only available on devices that support version 1.2 or greater of the Box MIB')
luOpConfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luOpConfFileName.setStatus('current')
if mibBuilder.loadTexts: luOpConfFileName.setDescription('This specifies the filename under which to store the current configuration. ')
luOpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luOpIndex.setStatus('current')
if mibBuilder.loadTexts: luOpIndex.setDescription('')
luDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 677, 2), )
if mibBuilder.loadTexts: luDeviceTable.setStatus('current')
if mibBuilder.loadTexts: luDeviceTable.setDescription('A table containing information for all downloadable locations in the device components in a device.')
luDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 677, 2, 1), ).setIndexNames((0, "LUCENT-GENERIC-DLOAD-MIB", "luOpIndex"), (0, "LUCENT-GENERIC-DLOAD-MIB", "luDeviceIndex"))
if mibBuilder.loadTexts: luDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: luDeviceEntry.setDescription('An entry containing information for a specific downloadable location in a device.')
luDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: luDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: luDeviceIndex.setDescription('Index into the table. Note: To support backwards compatibility, the following restrictions apply to the assignment of luDeviceIndex values. luDeviceIndex value 1 -- flash device Bank A, luDeviceIndex value 2 -- flash device Bank B')
luDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: luDeviceDescription.setDescription('A string containing a textual description for the component identified by this entry.')
luDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceLocation.setStatus('current')
if mibBuilder.loadTexts: luDeviceLocation.setDescription('A string containing a textual description of the location of the component identified by this entry. eg Flash Bank A Flash ROM Boot ROM Boot Bank A Base Hardware Hardware Module NvRam non-Volitile Ram storage')
luDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceNumber.setStatus('current')
if mibBuilder.loadTexts: luDeviceNumber.setDescription('Version number for the component. Stored in the format :- 1st Byte - major version number 2nd Byte - minor version number 3rd Byte - debug version number.')
luDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21))).clone(namedValues=NamedValues(("flash", 1), ("boot-fixed", 2), ("boot-updateable", 3), ("hardware-fixed", 4), ("hardware-upgradeable", 5), ("other", 6), ("sw-running", 7), ("sw-component", 8), ("default-image", 9), ("non-default-image", 10), ("default-boot-loader", 11), ("non-default-boot-loader", 12), ("unknown", 20), ("nvram", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceType.setStatus('current')
if mibBuilder.loadTexts: luDeviceType.setDescription('The type of object that this table entry contains Location information for. flash : code image resident in flash OR the flash bank itself boot-fixed : the version of the fixed boot ROM. boot-updateable : the current version of boot ROM code where the code can be updated. hardware-fixed : Hardware that cannot be upgraded. hardware-upgradeable : a plug in card that can be changed. sw_running : code image that is currently running in RAM. sw_component : a subcomponent of the entire software. Can be resident in flash or ram. These items should be placed in the version table following the version of which they are a subcomponent. default-image: The default image. non-default-image: Other images. default-boot-loader: The default boot loader. non-default-boot-loader: Other boot loaders. unknown - unknown. nvram - non-volitile Ram')
luDeviceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDeviceFileName.setStatus('current')
if mibBuilder.loadTexts: luDeviceFileName.setDescription('A string containing the file name of the component identified by this entry. Allows to rename a file.')
luDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 677, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDeviceCount.setStatus('current')
if mibBuilder.loadTexts: luDeviceCount.setDescription('The number of entries in the Location table')
luDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 677, 4), )
if mibBuilder.loadTexts: luDownloadTable.setStatus('current')
if mibBuilder.loadTexts: luDownloadTable.setDescription('')
luDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 677, 4, 1), ).setIndexNames((0, "LUCENT-GENERIC-DLOAD-MIB", "luOpIndex"))
if mibBuilder.loadTexts: luDownloadEntry.setStatus('current')
if mibBuilder.loadTexts: luDownloadEntry.setDescription('')
luDownloadIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDownloadIPAddress.setStatus('current')
if mibBuilder.loadTexts: luDownloadIPAddress.setDescription('The IP address of the server to use for the download when using TFTP-IP')
luDownloadIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadIPGateway.setStatus('current')
if mibBuilder.loadTexts: luDownloadIPGateway.setDescription('The IP gateway to be used to access the server. If this variable is zero then use the default gateway in luOpIPGateway.')
luDownloadIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadIPXAddress.setStatus('current')
if mibBuilder.loadTexts: luDownloadIPXAddress.setDescription('The IPX address of the server to use for the download when using TFTP-IPX or RPL-IPX. The format of the address is <ipx network><node address><socket> = 12 bytes.')
luDownloadNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadNodeAddress.setStatus('current')
if mibBuilder.loadTexts: luDownloadNodeAddress.setDescription('The Node address of the server to use for the download when using RPL-LLC ')
luDownloadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadFileName.setStatus('current')
if mibBuilder.loadTexts: luDownloadFileName.setDescription('The filename of the microcode to download. The maximum length of this string is device specific. If a string that is too long is written to this variable BAD VALUE will be returned.')
luDownloadDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadDestination.setStatus('current')
if mibBuilder.loadTexts: luDownloadDestination.setDescription('The destination for the download. This will contain the luDeviceIndex for the download destination.')
luDownloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("tftp-waiting-ip", 2), ("tftp-running-ip", 3), ("tftp-waiting-ipx", 4), ("tftp-running-ipx", 5), ("waiting-xmodem", 6), ("running-xmodem", 7), ("rpl-waiting-ipx", 8), ("rpl-running-ipx", 9), ("rpl-waiting-llc", 10), ("rpl-running-llc", 11), ("reading-configuration", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDownloadState.setStatus('current')
if mibBuilder.loadTexts: luDownloadState.setDescription('The current state of the download')
luDownloadFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 100, 101, 102, 103, 104, 105, 106, 107))).clone(namedValues=NamedValues(("no-error", 1), ("config-error", 2), ("busy", 3), ("timeout", 4), ("cancelled", 5), ("incompatible-file", 6), ("file-too-big", 7), ("protocol-error", 8), ("flash-write-error", 9), ("nvram-write-error", 10), ("conf-file-gen-err", 11), ("conf-file-parse-error", 12), ("conf-file-exec-error", 13), ("undefined-error", 100), ("file-not-found", 101), ("access-violation", 102), ("out-of-memory", 103), ("illegal-operation", 104), ("unknown-transfer-id", 105), ("file-already-exists", 106), ("no-such-user", 107)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDownloadFailureCode.setStatus('current')
if mibBuilder.loadTexts: luDownloadFailureCode.setDescription("While a download is in progress this will always be 'no-error'. After a download is complete this indicates the success or failure of the download. If it is anything other than 'no-error' then 'luDownloadStatusText' will contain a textual description of the error. Error codes from 100 upwards are errors returned from a TFTP server. Errors below this are locally generated. Configuration files may return errors after download as a result of reading a config file into the system. conf-file-gen-err - General (unknown error) conf-file-parse-error - Reading of config file resulted in parsing errors. conf-file-exec-error - Reading of config file resulted in execution errors.")
luDownloadStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDownloadStatusText.setStatus('current')
if mibBuilder.loadTexts: luDownloadStatusText.setDescription('A display string describing the status of the download in progress, or the reason for failure of the last download. If FailureCode = no-error then StatusText may be empty.')
luDownloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luDownloadSize.setStatus('current')
if mibBuilder.loadTexts: luDownloadSize.setDescription('While a download is in progress this indicates the number of bytes transferred so far. After the download is completed this remains at the final size downloaded.')
luDownloadErrorLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadErrorLogName.setStatus('current')
if mibBuilder.loadTexts: luDownloadErrorLogName.setDescription('The filename under which an error log has been created. In the case of file downloads that produce errors this file should contain a log of errors that occured')
luDownloadErrorLogLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luDownloadErrorLogLocation.setStatus('current')
if mibBuilder.loadTexts: luDownloadErrorLogLocation.setDescription('The location of the error log. This will contain the luDeviceIndex for the error log')
luUploadTable = MibTable((1, 3, 6, 1, 4, 1, 677, 5), )
if mibBuilder.loadTexts: luUploadTable.setStatus('current')
if mibBuilder.loadTexts: luUploadTable.setDescription('')
luUploadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 677, 5, 1), ).setIndexNames((0, "LUCENT-GENERIC-DLOAD-MIB", "luOpIndex"))
if mibBuilder.loadTexts: luUploadEntry.setStatus('current')
if mibBuilder.loadTexts: luUploadEntry.setDescription('')
luUploadIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luUploadIPAddress.setStatus('current')
if mibBuilder.loadTexts: luUploadIPAddress.setDescription('The IP address of the server to use for the upload when using TFTP-IP')
luUploadIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luUploadIPGateway.setStatus('current')
if mibBuilder.loadTexts: luUploadIPGateway.setDescription('The IP gateway to be used to access the server. If this variable is zero then use the default gateway in luOpIPGateway.')
luUploadIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luUploadIPXAddress.setStatus('current')
if mibBuilder.loadTexts: luUploadIPXAddress.setDescription('The IPX address of the server to use for the upload when using TFTP-IPX. The format of the address is <ipx network><node address><socket> = 12 bytes.')
luUploadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luUploadFileName.setStatus('current')
if mibBuilder.loadTexts: luUploadFileName.setDescription('The filename under which to store the uploaded microcode. The maximum length of this string is device specific. If a string that is too long is written to this variable BAD VALUE will be returned.')
luUploadSource = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luUploadSource.setStatus('current')
if mibBuilder.loadTexts: luUploadSource.setDescription('The source for the upload. This will contain the luDeviceIndex for the upload source.')
luUploadState = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("tftp-waiting-ip", 2), ("tftp-running-ip", 3), ("tftp-waiting-ipx", 4), ("tftp-running-ipx", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luUploadState.setStatus('current')
if mibBuilder.loadTexts: luUploadState.setDescription('The current state of the Upload')
luUploadFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107))).clone(namedValues=NamedValues(("no-error", 1), ("config-error", 2), ("busy", 3), ("timeout", 4), ("cancelled", 5), ("incompatible-file", 6), ("file-too-big", 7), ("protocol-error", 8), ("flash-write-error", 9), ("nvram-read-error", 10), ("conf-file-gen-err", 11), ("conf-file-exec-error", 12), ("undefined-error", 100), ("file-not-found", 101), ("access-violation", 102), ("out-of-memory", 103), ("illegal-operation", 104), ("unknown-transfer-id", 105), ("file-already-exists", 106), ("no-such-user", 107)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luUploadFailureCode.setStatus('current')
if mibBuilder.loadTexts: luUploadFailureCode.setDescription("While an upload is in progress this will always be 'no-error'. After an upload is complete this indicates the success or failure of the upload. If it is anything other than 'no-error' then 'luUploadStatusText' will contain a textual description of the error. Error codes from 100 upwards are errors returned from a TFTP server. Errors below this are locally generated. Configuration files may return errors after / before upload, as a result of reading a config file into the system. conf-file-gen-err - General (unknown error) conf-file-exec-error - Generation of config file resulted in execution errors.")
luUploadStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: luUploadStatusText.setStatus('current')
if mibBuilder.loadTexts: luUploadStatusText.setDescription('A display string describing the status of the upload in progress, or the reason for failure of the last upload. If FailureCode = no-error then StatusText may be empty.')
luUploadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: luUploadSize.setStatus('current')
if mibBuilder.loadTexts: luUploadSize.setDescription('While an upload is in progress this indicates the number of bytes transferred so far. After the upload is completed this remains at the final size uploaded.')
luUploadErrorLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luUploadErrorLogName.setStatus('current')
if mibBuilder.loadTexts: luUploadErrorLogName.setDescription('The filename under which an error log has been created. In the case of file uploads that produce errors this file should contain a log of errors that occured')
luUploadErrorLogLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: luUploadErrorLogLocation.setStatus('current')
if mibBuilder.loadTexts: luUploadErrorLogLocation.setDescription('The location of the error log. This will contain the luDeviceIndex for the error log')
luDloadNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 677, 6))
luNotificationNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 677, 6, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationNextIndex.setStatus('current')
if mibBuilder.loadTexts: luNotificationNextIndex.setDescription('The Next available Index of the luNotificationDestTable')
luNotificationDestTable = MibTable((1, 3, 6, 1, 4, 1, 677, 6, 2), )
if mibBuilder.loadTexts: luNotificationDestTable.setStatus('current')
if mibBuilder.loadTexts: luNotificationDestTable.setDescription('')
luNotificationDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 677, 6, 2, 1), ).setIndexNames((0, "LUCENT-GENERIC-DLOAD-MIB", "luNotificationIndex"))
if mibBuilder.loadTexts: luNotificationDestEntry.setStatus('current')
if mibBuilder.loadTexts: luNotificationDestEntry.setDescription('')
luNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationIndex.setStatus('current')
if mibBuilder.loadTexts: luNotificationIndex.setDescription('The Index of this Destination entry.')
luNotificationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationIPAddress.setStatus('current')
if mibBuilder.loadTexts: luNotificationIPAddress.setDescription('The IP address of the trap receiver. If IPX Addresses are being used this entry must be zero.')
luNotificationIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationIPGateway.setStatus('current')
if mibBuilder.loadTexts: luNotificationIPGateway.setDescription('The IP gateway of the trap receiver. If IPX Addresses are being used this entry must be zero.')
luNotificationIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationIPXAddress.setStatus('current')
if mibBuilder.loadTexts: luNotificationIPXAddress.setDescription('The IPX address of the trap receiver. If IP Addresses are being used this entry must be zero. The format of the address is <ipx network><node address><socket> = 12 bytes.')
luNotificationNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationNodeAddress.setStatus('current')
if mibBuilder.loadTexts: luNotificationNodeAddress.setDescription('The Node address of the trap receiver. If IP Addresses are being used this entry must be zero.')
luNotificationTrapTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noDloadTraps", 0), ("allDloadTraps", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationTrapTypes.setStatus('current')
if mibBuilder.loadTexts: luNotificationTrapTypes.setDescription('The Trap types this entry should receive.')
luNotificationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 677, 6, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: luNotificationRowStatus.setStatus('current')
if mibBuilder.loadTexts: luNotificationRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active. notInService(2) -- Configured but disabled. notReady(3), -- NOT fully configured. createAndGo(4), createAndWait(5) or destroy(6) ')
luDloadTrapCompleted = NotificationType((1, 3, 6, 1, 4, 1, 677, 6, 3)).setObjects(("LUCENT-GENERIC-DLOAD-MIB", "luOpIndex"), ("LUCENT-GENERIC-DLOAD-MIB", "luDownloadDestination"), ("LUCENT-GENERIC-DLOAD-MIB", "luDownloadFileName"), ("LUCENT-GENERIC-DLOAD-MIB", "luDownloadFailureCode"))
if mibBuilder.loadTexts: luDloadTrapCompleted.setStatus('current')
if mibBuilder.loadTexts: luDloadTrapCompleted.setDescription('Indicates that a download has completed.')
luUpLoadTrapCompleted = NotificationType((1, 3, 6, 1, 4, 1, 677, 6, 4)).setObjects(("LUCENT-GENERIC-DLOAD-MIB", "luOpIndex"), ("LUCENT-GENERIC-DLOAD-MIB", "luUploadSource"), ("LUCENT-GENERIC-DLOAD-MIB", "luUploadFileName"), ("LUCENT-GENERIC-DLOAD-MIB", "luUploadFailureCode"))
if mibBuilder.loadTexts: luUpLoadTrapCompleted.setStatus('current')
if mibBuilder.loadTexts: luUpLoadTrapCompleted.setDescription('Indicates that a upload has completed.')
mibBuilder.exportSymbols("LUCENT-GENERIC-DLOAD-MIB", luUploadSource=luUploadSource, luDload=luDload, luNotificationNodeAddress=luNotificationNodeAddress, luUploadTable=luUploadTable, luUploadErrorLogLocation=luUploadErrorLogLocation, luDownloadDestination=luDownloadDestination, luNotificationIndex=luNotificationIndex, luOpOperStatus=luOpOperStatus, luDownloadStatusText=luDownloadStatusText, luDeviceDescription=luDeviceDescription, luOpIndex=luOpIndex, luOpTable=luOpTable, luUploadIPXAddress=luUploadIPXAddress, luDownloadTable=luDownloadTable, luNotificationDestEntry=luNotificationDestEntry, luDloadTrapCompleted=luDloadTrapCompleted, luDownloadSize=luDownloadSize, luDownloadErrorLogLocation=luDownloadErrorLogLocation, luDeviceNumber=luDeviceNumber, luNotificationDestTable=luNotificationDestTable, luOpSerialNumber=luOpSerialNumber, luOpBCodeVersion=luOpBCodeVersion, luUploadFailureCode=luUploadFailureCode, luUploadState=luUploadState, luDownloadNodeAddress=luDownloadNodeAddress, luDownloadFileName=luDownloadFileName, luOpAdminStatus=luOpAdminStatus, luDownloadIPAddress=luDownloadIPAddress, luDownloadErrorLogName=luDownloadErrorLogName, luOpConfFileName=luOpConfFileName, luDeviceCount=luDeviceCount, luNotificationNextIndex=luNotificationNextIndex, luUploadFileName=luUploadFileName, luUploadErrorLogName=luUploadErrorLogName, luDeviceEntry=luDeviceEntry, luDloadNotifications=luDloadNotifications, luDownloadIPXAddress=luDownloadIPXAddress, luUploadSize=luUploadSize, luUploadEntry=luUploadEntry, luDeviceType=luDeviceType, luOpEntry=luOpEntry, luDeviceTable=luDeviceTable, luDeviceFileName=luDeviceFileName, luDownloadIPGateway=luDownloadIPGateway, luDownloadFailureCode=luDownloadFailureCode, luDeviceIndex=luDeviceIndex, luUploadStatusText=luUploadStatusText, PYSNMP_MODULE_ID=luDload, luOpMCodeFilename=luOpMCodeFilename, luDeviceLocation=luDeviceLocation, luUpLoadTrapCompleted=luUpLoadTrapCompleted, luDownloadState=luDownloadState, luNotificationTrapTypes=luNotificationTrapTypes, luOpEraseFlashVersion=luOpEraseFlashVersion, luNotificationIPXAddress=luNotificationIPXAddress, luUploadIPAddress=luUploadIPAddress, luOpDefaultFlashVersion=luOpDefaultFlashVersion, luUploadIPGateway=luUploadIPGateway, luNotificationIPAddress=luNotificationIPAddress, luDownloadEntry=luDownloadEntry, luNotificationRowStatus=luNotificationRowStatus, luOpMCodeVersion=luOpMCodeVersion, luNotificationIPGateway=luNotificationIPGateway)
