#
# PySNMP MIB module INTEL-LAN-ADAPTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-LAN-ADAPTERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, IpAddress, Integer32, ModuleIdentity, enterprises, TimeTicks, Unsigned32, Gauge32, MibIdentifier, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Integer32", "ModuleIdentity", "enterprises", "TimeTicks", "Unsigned32", "Gauge32", "MibIdentifier", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Counter64")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
intellan = ModuleIdentity((1, 3, 6, 1, 4, 1, 3183))
intellan.setRevisions(('2012-10-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: intellan.setRevisionsDescriptions(('Version 1.4.10 Removed the extra 1 after enterprises ID',))
if mibBuilder.loadTexts: intellan.setLastUpdated('201210310000Z')
if mibBuilder.loadTexts: intellan.setOrganization('Intel Corp')
if mibBuilder.loadTexts: intellan.setContactInfo('Intel Corp http://www.intel.com/')
if mibBuilder.loadTexts: intellan.setDescription('The MIB module for Intel LAN SNMP agent.')
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
nic_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7)).setLabel("nic-products")
intel_lan_adapters = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2)).setLabel("intel-lan-adapters")
component_description = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1)).setLabel("component-description")
class InterfaceIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each interface or interface sub-layer in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

company = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: company.setStatus('current')
if mibBuilder.loadTexts: company.setDescription('Company that provided this MIB - Intel(R) Corporation.')
description = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: description.setStatus('current')
if mibBuilder.loadTexts: description.setDescription('Description of this component - Intel(R) Network Adapter(s), Advanced Management.')
operatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystem.setStatus('current')
if mibBuilder.loadTexts: operatingSystem.setDescription('Operating System of the server on which the SNMP agent is executed.')
mibVersion1_4_3 = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 4), DisplayString()).setLabel("mibVersion1-4-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: mibVersion1_4_3.setStatus('current')
if mibBuilder.loadTexts: mibVersion1_4_3.setDescription('Version of this MIB - the empty string is always returned.')
mibVersionSupported = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibVersionSupported.setStatus('current')
if mibBuilder.loadTexts: mibVersionSupported.setDescription('Version of the MIB supported by the agent. 1.x.y indicates that every MIB version of that template is supported by the agent.')
agentExtensionVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExtensionVersion.setStatus('current')
if mibBuilder.loadTexts: agentExtensionVersion.setDescription('Version of the SNMP extension agent.')
status = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("baseDriverNotLoadedAnsNotLoaded", 0), ("baseDriverLoadedAnsNotLoaded", 1), ("baseDriverNotLoadedAnsLoaded", 2), ("baseDriverLoadedAnsLoaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('Indicates status and functionality of the adapter(s) - whether the base driver and ANS are loaded.')
adaptersTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2))
genericAdaptersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1))
genericAdaptersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1), )
if mibBuilder.loadTexts: genericAdaptersAttrTable.setStatus('current')
if mibBuilder.loadTexts: genericAdaptersAttrTable.setDescription('Attributes common to all kinds of adapters.')
genericAdapterAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if mibBuilder.loadTexts: genericAdapterAttrEntry.setStatus('current')
if mibBuilder.loadTexts: genericAdapterAttrEntry.setDescription("Attributes common to all kinds of adapters. There is one 'entry' for each physical or virtual adapter.")
adapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterIndex.setStatus('current')
if mibBuilder.loadTexts: adapterIndex.setDescription('A unique value, greater than or equal to zero, for each interface.')
adapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterName.setStatus('current')
if mibBuilder.loadTexts: adapterName.setDescription('Name of the adapter interface. There is a unique name for each instance.')
adapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standAlone", 0), ("teamMember", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterType.setStatus('current')
if mibBuilder.loadTexts: adapterType.setDescription('Type of adapter (member, stand-alone, or virtual).')
adapterDriverLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loaded", 0), ("notLoaded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverLoadStatus.setStatus('current')
if mibBuilder.loadTexts: adapterDriverLoadStatus.setDescription("Load status of the driver: -'loaded' if the driver is loaded on the NIC; 'notLoaded' otherwise. A status of 'notLoaded' means that the NIC is missing (via 'hotRemove') or the driver is not fully loaded for some reason.")
genericAdaptersDriversAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2), )
if mibBuilder.loadTexts: genericAdaptersDriversAttrTable.setStatus('current')
if mibBuilder.loadTexts: genericAdaptersDriversAttrTable.setDescription('Attributes common to all kinds of adapter drivers.')
genericAdapterDriverAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if mibBuilder.loadTexts: genericAdapterDriverAttrEntry.setStatus('current')
if mibBuilder.loadTexts: genericAdapterDriverAttrEntry.setDescription("Attributes common to all kinds of adapter drivers. There is one 'entry' for each adapter driver")
adapterDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverName.setStatus('current')
if mibBuilder.loadTexts: adapterDriverName.setDescription('Name of the adapter driver.')
adapterDriverInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverInfo.setStatus('current')
if mibBuilder.loadTexts: adapterDriverInfo.setDescription('Additional information about the adapter. Includes name of the NIC.')
adapterDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverVersion.setStatus('current')
if mibBuilder.loadTexts: adapterDriverVersion.setDescription('Adapter driver version number.')
adapterDriverPath = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverPath.setStatus('current')
if mibBuilder.loadTexts: adapterDriverPath.setDescription('Adapter driver path name.')
adapterDriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverDate.setStatus('current')
if mibBuilder.loadTexts: adapterDriverDate.setDescription('Adapter driver creation date (in mm/dd/yy format).')
adapterDriverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverSize.setStatus('current')
if mibBuilder.loadTexts: adapterDriverSize.setDescription('Adapter driver file size.')
adapterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterIpAddress.setStatus('current')
if mibBuilder.loadTexts: adapterIpAddress.setDescription('Adapter IP address')
genericAdaptersTrafficStatsAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3), )
if mibBuilder.loadTexts: genericAdaptersTrafficStatsAttrTable.setStatus('current')
if mibBuilder.loadTexts: genericAdaptersTrafficStatsAttrTable.setDescription('Traffic stats common to all kinds of adapters.')
genericAdapterTrafficStatsAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if mibBuilder.loadTexts: genericAdapterTrafficStatsAttrEntry.setStatus('current')
if mibBuilder.loadTexts: genericAdapterTrafficStatsAttrEntry.setDescription("Traffic stats common to all kinds of adapters. There is one 'entry' for each adapter instance.")
adapterRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxPackets.setStatus('current')
if mibBuilder.loadTexts: adapterRxPackets.setDescription('Total number of packets received.')
adapterTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxPackets.setStatus('current')
if mibBuilder.loadTexts: adapterTxPackets.setDescription('Total number of packets transmitted.')
adapterRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxBytes.setStatus('current')
if mibBuilder.loadTexts: adapterRxBytes.setDescription('Total number of bytes received.')
adapterTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxBytes.setStatus('current')
if mibBuilder.loadTexts: adapterTxBytes.setDescription('Total number of bytes transmitted.')
adapterRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxErrors.setStatus('current')
if mibBuilder.loadTexts: adapterRxErrors.setDescription('Total number of packets received with errors (packets that failed to reach the protocol).')
adapterTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxErrors.setStatus('current')
if mibBuilder.loadTexts: adapterTxErrors.setDescription('Total number of packets that failed to transmit.')
adapterRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxDropped.setStatus('current')
if mibBuilder.loadTexts: adapterRxDropped.setDescription('Total number of receive packets dropped due to overrun.')
adapterTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxDropped.setStatus('current')
if mibBuilder.loadTexts: adapterTxDropped.setDescription('Total number of transmit packets dropped due to successive collisions.')
adapterRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxMulticast.setStatus('current')
if mibBuilder.loadTexts: adapterRxMulticast.setDescription('Total number of Multicast packets received.')
adapterCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterCollisions.setStatus('current')
if mibBuilder.loadTexts: adapterCollisions.setDescription('Total number of single collisions.')
physicalAdaptersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2))
physicalAdaptersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1), )
if mibBuilder.loadTexts: physicalAdaptersAttrTable.setStatus('current')
if mibBuilder.loadTexts: physicalAdaptersAttrTable.setDescription('Attributes common to all Physical Adapters.')
physicalAdapterAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterAttrEntry.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterAttrEntry.setDescription("Attributes common to all Physical Adapters. There is one 'entry' for each standalone or member adapter.")
physicalAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIndex.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterIndex.setDescription('A unique value, greater than or equal to zero, for each interface.')
physicalAdapterLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("link-up", 0), ("link-down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterLinkStatus.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterLinkStatus.setDescription('Physical adapter link status. Appears only if available - that is, only if the driver is compliant with SNMP; otherwise, NO_SUCH_NAME is returned.')
physicalAdapterLinkStatusChangesCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterLinkStatusChangesCounter.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterLinkStatusChangesCounter.setDescription("Number of changes in physical adapter link status. Any change ('up-to-down' or 'down- to-up') is counted. This value can be reset (to zero) by the user; no other value is permitted. This value appears only if it is available - that is, only if the driver is compliant with SNMP; otherwise, NO_SUCH_NAME is returned.")
physicalAdapterSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterSpeed.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterSpeed.setDescription('Physical adapter speed (in Mbps). Appears only for an SNMP-compliant adapter with link up.')
physicalAdapterDplxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-available", 0), ("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterDplxMode.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterDplxMode.setDescription('Physical Adapter Duplex Mode. Appears only for an SNMP-compliant adapter with link up.')
physicalAdapterAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterAutoNegotiation.setDescription('Physical adapter autonegotiation mode. This value appears only if it is available - that is, only if the driver is compliant with SNMP; otherwise, NO_SUCH_NAME is returned.')
physicalAdapterPciBus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterPciBus.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterPciBus.setDescription('Physical adapter PCI bus number.')
physicalAdapterPciSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterPciSlot.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterPciSlot.setDescription('Physical adapter PCI slot number.')
physicalAdapterIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIrq.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterIrq.setDescription('Physical adapter Interrupt Request number.')
physicalAdapterCurrentNA = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterCurrentNA.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterCurrentNA.setDescription('Current MAC address of the physical adapter(in hex notation).')
physicalAdapterPermanentNA = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterPermanentNA.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterPermanentNA.setDescription('Permanent MAC address of the physical adapter(in hex notation).')
physicalAdapterOnlineDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("failed", 0), ("passed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterOnlineDiagStatus.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterOnlineDiagStatus.setDescription('The Online Diagnostics Status of the Physical Adapter. Online Diagnostics consist of Link Test and other Hardware Tests.')
physicalAdapterExpressTeamed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-available", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterExpressTeamed.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterExpressTeamed.setDescription('Physical Adapter Express team status. Appears only for an adapter with express teaming capability.')
physicalAdapterExpressTeamBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterExpressTeamBundleId.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterExpressTeamBundleId.setDescription('Unique value to identify the express team in the system.')
physicalAdaptersAttrOffloadTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2), )
if mibBuilder.loadTexts: physicalAdaptersAttrOffloadTable.setStatus('current')
if mibBuilder.loadTexts: physicalAdaptersAttrOffloadTable.setDescription("Attributes of offloading-enabled physical adapters. There is one 'entry' for each SNMP-compliant physical adapter.")
physicalAdapterAttrOffloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterAttrOffloadEntry.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterAttrOffloadEntry.setDescription("Attributes of offloading-enabled physical adapters. There is one 'entry' for each SNMP-compliant physical adapter.")
physicalAdapterTcpRxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterTcpRxChecksumOffLoadEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterTcpRxChecksumOffLoadEnable.setDescription("When enabled, TCP for 'receive' checksums are performed in hardware.")
physicalAdapterTcpRxChecksumBad = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterTcpRxChecksumBad.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterTcpRxChecksumBad.setDescription("Number of bad 'receive' checksums.")
physicalAdapterTcpTxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterTcpTxChecksumOffLoadEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterTcpTxChecksumOffLoadEnable.setDescription("When enabled, TCP for 'transmit' checksums are performed in hardware.")
physicalAdapterIpv4RxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIpv4RxChecksumOffLoadEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterIpv4RxChecksumOffLoadEnable.setDescription("When enabled, IPv4 for 'receive' checksums are performed in hardware.")
physicalAdapterIpv4TxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIpv4TxChecksumOffLoadEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterIpv4TxChecksumOffLoadEnable.setDescription("When enabled, IPv4 for 'receive' checksums are performed in hardware.")
physicalAdapterIpv4TCPSegmentationOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIpv4TCPSegmentationOffLoadEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterIpv4TCPSegmentationOffLoadEnable.setDescription('When enabled, TCP Segmentation is performed in hardware.')
virtualAdaptersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3))
virtualAdaptersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1), )
if mibBuilder.loadTexts: virtualAdaptersAttrTable.setStatus('current')
if mibBuilder.loadTexts: virtualAdaptersAttrTable.setDescription('Attributes common to all iANS-virtual adapters.')
virtualAdapterAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if mibBuilder.loadTexts: virtualAdapterAttrEntry.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterAttrEntry.setDescription("Attributes common to all iANS-virtual adapters. There is one 'entry' for each virtual adapter")
virtualAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAdapterIndex.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterIndex.setDescription('A unique value, greater than or equal to zero, for each interface.')
virtualAdapterAnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAdapterAnsId.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterAnsId.setDescription('ID of the team to which the adapter belongs.')
virtualAdaptersVlanAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 2), )
if mibBuilder.loadTexts: virtualAdaptersVlanAttrTable.setStatus('current')
if mibBuilder.loadTexts: virtualAdaptersVlanAttrTable.setDescription('Attributes common to all iANS-virtual adapters VLANs.')
virtualAdapterVlanAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if mibBuilder.loadTexts: virtualAdapterVlanAttrEntry.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterVlanAttrEntry.setDescription("VLAN attributes.Appears for virtual adapters that support VLANs only. There is one 'entry' for each VLAN.")
virtualAdapterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAdapterVlanId.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterVlanId.setDescription('ID for this virtual adapter VLAN.')
ansAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4))
ansAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1), )
if mibBuilder.loadTexts: ansAttrTable.setStatus('current')
if mibBuilder.loadTexts: ansAttrTable.setDescription('ANS attributes.')
ansAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansAttrEntry.setStatus('current')
if mibBuilder.loadTexts: ansAttrEntry.setDescription("ANS attributes. There is one 'entry' for each team")
ansId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansId.setStatus('current')
if mibBuilder.loadTexts: ansId.setDescription('ANS ID. A unique value.')
ansNumberOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansNumberOfMembers.setStatus('current')
if mibBuilder.loadTexts: ansNumberOfMembers.setDescription('Number of member adapters in the team.')
ansNumberOfVirtualAdapters = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansNumberOfVirtualAdapters.setStatus('current')
if mibBuilder.loadTexts: ansNumberOfVirtualAdapters.setDescription('Number of virtual adapters in the team.')
ansVlansAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 2), )
if mibBuilder.loadTexts: ansVlansAttrTable.setStatus('current')
if mibBuilder.loadTexts: ansVlansAttrTable.setDescription('ANS attributes.')
ansVlanAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansVlanAttrEntry.setStatus('current')
if mibBuilder.loadTexts: ansVlanAttrEntry.setDescription("ANS VLAN attributes. Appears only if VLAN is active. There is one 'entry' for each Vlan.")
ansVlanTaggingType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("tag-802-1Q", 1), ("tag-802-1P", 2), ("tag-802-3AC", 3), ("tag-iSL", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansVlanTaggingType.setStatus('current')
if mibBuilder.loadTexts: ansVlanTaggingType.setDescription('Tagging type of the VLAN adapter.')
ansTeamsAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3), )
if mibBuilder.loadTexts: ansTeamsAttrTable.setStatus('current')
if mibBuilder.loadTexts: ansTeamsAttrTable.setDescription('ANS team attributes.')
ansTeamAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansTeamAttrEntry.setStatus('current')
if mibBuilder.loadTexts: ansTeamAttrEntry.setDescription("ANS team attributes. Appears only when adapter teaming exist. There is one 'entry' for each team.")
ansTeamName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamName.setStatus('current')
if mibBuilder.loadTexts: ansTeamName.setDescription('Unique ANS team name')
ansTeamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("adapter-fault-tolerance", 0), ("adaptive-load-balancing", 1), ("static-link-aggregation", 2), ("iEEE-802-3ad", 4), ("switch-fault-tolerance", 5), ("none", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMode.setStatus('current')
if mibBuilder.loadTexts: ansTeamMode.setDescription('Team mode.')
ansTeamLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamLinkState.setStatus('current')
if mibBuilder.loadTexts: ansTeamLinkState.setDescription('Team link state. Aggregation of the link state of all team members ( 0 = some up).')
ansTeamSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamSpeed.setStatus('current')
if mibBuilder.loadTexts: ansTeamSpeed.setDescription('Team speed.Speed of the current primary member (in Mbps).')
ansTeamProbesState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("probes-enabled", 0), ("probes-disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamProbesState.setStatus('current')
if mibBuilder.loadTexts: ansTeamProbesState.setDescription('If enabled, the ANS uses probes to check on its members.')
ansTeamProbesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("broadcast", 0), ("multicast", 1), ("not-available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamProbesMode.setStatus('current')
if mibBuilder.loadTexts: ansTeamProbesMode.setDescription('Mode of probe usage.')
ansTeamLoadBalanceRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("not-available", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamLoadBalanceRefresh.setStatus('current')
if mibBuilder.loadTexts: ansTeamLoadBalanceRefresh.setDescription('In seconds. If available, the number of seconds that passes before the software resets or refreshes the current load across team members.')
ansTeamProbesSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("not-available", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamProbesSendTime.setStatus('current')
if mibBuilder.loadTexts: ansTeamProbesSendTime.setDescription('In seconds. If available, the interval in seconds during which probe packets are sent.')
ansTeamPreferredPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("not-available", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamPreferredPrimaryIndex.setStatus('current')
if mibBuilder.loadTexts: ansTeamPreferredPrimaryIndex.setDescription('Index of the preferred primary member adapter. ')
ansTeamCurrentPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("not-available", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamCurrentPrimaryIndex.setStatus('current')
if mibBuilder.loadTexts: ansTeamCurrentPrimaryIndex.setDescription('Index of the current primary member adapter.')
ansTeamPreviousPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("not-available", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamPreviousPrimaryIndex.setStatus('current')
if mibBuilder.loadTexts: ansTeamPreviousPrimaryIndex.setDescription('Index of the previous primary member adapter.')
ansTeamFailoverCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamFailoverCounter.setStatus('current')
if mibBuilder.loadTexts: ansTeamFailoverCounter.setDescription('Failover counter - that is, the number of failovers the team suffered. This value can be reset by the user - that is, it can be set to zero only; no other value is permitted.')
ansTeamSlaCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamSlaCompatible.setStatus('current')
if mibBuilder.loadTexts: ansTeamSlaCompatible.setDescription('Indicates compatibility with Static Link Aggregation mode when in IEEE 802.3AD mode.')
ansTeamAggrSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("bandwidth", 0), ("count", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamAggrSelectionMode.setStatus('current')
if mibBuilder.loadTexts: ansTeamAggrSelectionMode.setDescription('Indicates aggregation selection mode when in IEEE 802.3AD mode.')
ansTeamRlbSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamRlbSupport.setStatus('current')
if mibBuilder.loadTexts: ansTeamRlbSupport.setDescription("Indicates whether 'receive load balancing support' is enabled when in AdaptiveLoadBalancing teaming mode. (If disabled, only the transmission is balanced.)")
ansMembersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5))
ansMembersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1), )
if mibBuilder.loadTexts: ansMembersAttrTable.setStatus('current')
if mibBuilder.loadTexts: ansMembersAttrTable.setDescription('Attributes common to all iANS-TeamMember Adapters.')
ansMemberAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"))
if mibBuilder.loadTexts: ansMemberAttrEntry.setStatus('current')
if mibBuilder.loadTexts: ansMemberAttrEntry.setDescription("Attributes common to all iANS-TeamMember Adapters. There is one 'entry' for each team member adapter.")
ansMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansMemberIndex.setStatus('current')
if mibBuilder.loadTexts: ansMemberIndex.setDescription('A unique value for each member. The value is non-negative and identical to the value of the physical adapter associated with this member.')
ansMemberAnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansMemberAnsId.setStatus('current')
if mibBuilder.loadTexts: ansMemberAnsId.setDescription('ID of the ANS to which the Adapter belongs.')
ansTeamMembersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2), )
if mibBuilder.loadTexts: ansTeamMembersAttrTable.setStatus('current')
if mibBuilder.loadTexts: ansTeamMembersAttrTable.setDescription('Attributes common to all iANS-TeamMember Adapters.')
ansTeamMemberAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"))
if mibBuilder.loadTexts: ansTeamMemberAttrEntry.setStatus('current')
if mibBuilder.loadTexts: ansTeamMemberAttrEntry.setDescription('Attributes of iANS-TeamMember Adapters related to adapter teaming. Appears only if adapter teaming exists.')
ansTeamMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("active", 0), ("disabled", 1), ("standby", 2), ("active-secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMemberState.setStatus('current')
if mibBuilder.loadTexts: ansTeamMemberState.setDescription('iANS-TeamMember adapter state.')
ansTeamMemberFailureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMemberFailureCounter.setStatus('current')
if mibBuilder.loadTexts: ansTeamMemberFailureCounter.setDescription('Failure counter - that is, the number of failovers from this member. This value can be reset by the user - that is, it can be set to zero only; no other value is permitted.')
ansTeamMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMemberPriority.setStatus('current')
if mibBuilder.loadTexts: ansTeamMemberPriority.setDescription('Priority of the team member.')
events = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3))
physicalAdaptersEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1))
physicalAdaptersTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1))
physicalAdapterLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterLinkUpTrap.setDescription('Adapter has reached a linkup state.')
physicalAdapterLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterLinkDownTrap.setDescription('Adapter has reached a link down state.')
physicalAdapterAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 3)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterAddedTrap.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterAddedTrap.setDescription('Adapter has been installed.')
physicalAdapterRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 4)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterRemovedTrap.setDescription('Adapter has been uninstalled.')
physicalAdapterOnlineDiagPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 5)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterOnlineDiagPassedTrap.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterOnlineDiagPassedTrap.setDescription("Adapter's online diagnostics passed.")
physicalAdapterOnlineDiagFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 6)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterOnlineDiagFailedTrap.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterOnlineDiagFailedTrap.setDescription("Adapter's online diagnostics failed. Online diagnostics might fail because of link loss or other hardware issues.")
physicalAdapterLinkUpDownTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAdapterLinkUpDownTrapEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterLinkUpDownTrapEnable.setDescription("Indicates whether a physical adapter's link up and link down traps are enabled. The user can set this value.")
physicalAdapterAddedRemovedTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAdapterAddedRemovedTrapEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterAddedRemovedTrapEnable.setDescription("Indicates whether a physical adapter's 'added' and 'removed' traps are enabled. The user can set this value.")
physicalAdapterOnlineDiagPassedFailedTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAdapterOnlineDiagPassedFailedTrapEnable.setStatus('current')
if mibBuilder.loadTexts: physicalAdapterOnlineDiagPassedFailedTrapEnable.setDescription("Indicates whether physicalAdapterOnlineDiag 'passed' and 'failed' are enabled.")
virtualAdaptersEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2))
virtualAdaptersTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 1))
virtualAdapterAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: virtualAdapterAddedTrap.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterAddedTrap.setDescription('Virtual adapter has been added to a team.')
virtualAdapterRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if mibBuilder.loadTexts: virtualAdapterRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: virtualAdapterRemovedTrap.setDescription('Virtual adapter has been removed from a team.')
virtualAdaptersTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAdaptersTrapEnable.setStatus('current')
if mibBuilder.loadTexts: virtualAdaptersTrapEnable.setDescription('Indicates whether virtual adapter traps are enabled. The user can set this value.')
ansEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3))
ansTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1))
ansTeamFailoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamCurrentPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamPreviousPrimaryIndex"))
if mibBuilder.loadTexts: ansTeamFailoverTrap.setStatus('current')
if mibBuilder.loadTexts: ansTeamFailoverTrap.setDescription('The primary team member has been changed.')
ansAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansAddedTrap.setStatus('current')
if mibBuilder.loadTexts: ansAddedTrap.setDescription('Team has been added.')
ansRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1, 3)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: ansRemovedTrap.setDescription('Team has been removed.')
ansTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansTrapEnable.setStatus('current')
if mibBuilder.loadTexts: ansTrapEnable.setDescription('Indicates whether team traps are enabled. The user can set this value.')
teamMembersEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4))
teamMembersTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 1))
teamMemberAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: teamMemberAddedTrap.setStatus('current')
if mibBuilder.loadTexts: teamMemberAddedTrap.setDescription('Member has been added to a team.')
teamMemberRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"))
if mibBuilder.loadTexts: teamMemberRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: teamMemberRemovedTrap.setDescription('Member has been removed from a team.')
teamMemberTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teamMemberTrapEnable.setStatus('current')
if mibBuilder.loadTexts: teamMemberTrapEnable.setDescription('Indicates whether traps for members are enabled. The user can set this value.')
intellan_conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1)).setLabel("intellan-conformance")
phyAdapterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 1))
phyAdapterNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 2))
miscGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 3))
vtAdapterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 4))
vtAdapterNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 5))
ansGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 6))
ansNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 7))
teamGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 8))
teamNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 9))
intellanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 10))
intellan_compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3183, 1, 10, 1)).setLabel("intellan-compliance").setObjects(("INTEL-LAN-ADAPTERS-MIB", "phyAdapterGroup"), ("INTEL-LAN-ADAPTERS-MIB", "phyAdapterNotificationGroup"), ("INTEL-LAN-ADAPTERS-MIB", "miscGroup"), ("INTEL-LAN-ADAPTERS-MIB", "vtAdapterGroup"), ("INTEL-LAN-ADAPTERS-MIB", "vtAdapterNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    intellan_compliance = intellan_compliance.setStatus('current')
if mibBuilder.loadTexts: intellan_compliance.setDescription('Compliance statements for the Intel Lan Agent.')
phyAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagPassedFailedTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterAddedRemovedTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkUpDownTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIpv4TCPSegmentationOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIpv4TxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIpv4RxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterTcpTxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterTcpRxChecksumBad"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterTcpRxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterExpressTeamBundleId"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterExpressTeamed"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagStatus"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterPermanentNA"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterCurrentNA"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIrq"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterPciSlot"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterPciBus"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterAutoNegotiation"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterDplxMode"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterSpeed"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkStatusChangesCounter"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkStatus"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"), ("INTEL-LAN-ADAPTERS-MIB", "adapterCollisions"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxMulticast"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxDropped"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxDropped"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxErrors"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxErrors"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxBytes"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxBytes"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxPackets"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxPackets"), ("INTEL-LAN-ADAPTERS-MIB", "adapterIpAddress"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverSize"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverDate"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverPath"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverVersion"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverInfo"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverName"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverLoadStatus"), ("INTEL-LAN-ADAPTERS-MIB", "adapterType"), ("INTEL-LAN-ADAPTERS-MIB", "adapterName"), ("INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyAdapterGroup = phyAdapterGroup.setStatus('current')
if mibBuilder.loadTexts: phyAdapterGroup.setDescription('A collection of objects for phyiscal adapter group')
phyAdapterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 2, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagFailedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagPassedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterRemovedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterAddedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkDownTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkUpTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyAdapterNotificationGroup = phyAdapterNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: phyAdapterNotificationGroup.setDescription('A collection of notification for physical adapter notification')
vtAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 4, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdaptersTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterVlanId"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterAnsId"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtAdapterGroup = vtAdapterGroup.setStatus('current')
if mibBuilder.loadTexts: vtAdapterGroup.setDescription('A collection of objects for virtual adapter group')
vtAdapterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 5, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterRemovedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterAddedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtAdapterNotificationGroup = vtAdapterNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: vtAdapterNotificationGroup.setDescription('A collection of notification for virtual adapter notification')
ansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 6, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"), ("INTEL-LAN-ADAPTERS-MIB", "ansNumberOfMembers"), ("INTEL-LAN-ADAPTERS-MIB", "ansNumberOfVirtualAdapters"), ("INTEL-LAN-ADAPTERS-MIB", "ansVlanTaggingType"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamName"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMode"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamLinkState"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamSpeed"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamProbesState"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamProbesMode"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamLoadBalanceRefresh"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamProbesSendTime"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamPreferredPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamCurrentPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamPreviousPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamFailoverCounter"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamSlaCompatible"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamAggrSelectionMode"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamRlbSupport"), ("INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansMemberAnsId"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMemberState"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMemberFailureCounter"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMemberPriority"), ("INTEL-LAN-ADAPTERS-MIB", "ansTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ansGroup = ansGroup.setStatus('current')
if mibBuilder.loadTexts: ansGroup.setDescription('A collection of objects for ans group')
ansNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 7, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansTeamFailoverTrap"), ("INTEL-LAN-ADAPTERS-MIB", "ansAddedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "ansRemovedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ansNotificationGroup = ansNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ansNotificationGroup.setDescription('A collection of notification for ans notification')
teamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 8, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "teamMemberTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teamGroup = teamGroup.setStatus('current')
if mibBuilder.loadTexts: teamGroup.setDescription('A collection of objects for team group')
teamNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 9, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "teamMemberAddedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "teamMemberRemovedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teamNotificationGroup = teamNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: teamNotificationGroup.setDescription('A collection of notification for team notification')
miscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 3, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "status"), ("INTEL-LAN-ADAPTERS-MIB", "agentExtensionVersion"), ("INTEL-LAN-ADAPTERS-MIB", "mibVersionSupported"), ("INTEL-LAN-ADAPTERS-MIB", "mibVersion1_4_3"), ("INTEL-LAN-ADAPTERS-MIB", "operatingSystem"), ("INTEL-LAN-ADAPTERS-MIB", "description"), ("INTEL-LAN-ADAPTERS-MIB", "company"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    miscGroup = miscGroup.setStatus('current')
if mibBuilder.loadTexts: miscGroup.setDescription('A collection of objects for misc. group')
mibBuilder.exportSymbols("INTEL-LAN-ADAPTERS-MIB", ansTeamProbesSendTime=ansTeamProbesSendTime, physicalAdapterExpressTeamed=physicalAdapterExpressTeamed, ansTeamPreferredPrimaryIndex=ansTeamPreferredPrimaryIndex, ansTeamMemberFailureCounter=ansTeamMemberFailureCounter, phyAdapterNotificationGroup=phyAdapterNotificationGroup, mibVersionSupported=mibVersionSupported, virtualAdapterAddedTrap=virtualAdapterAddedTrap, component_description=component_description, ansMembersAttrTables=ansMembersAttrTables, miscGroups=miscGroups, physicalAdapterTcpRxChecksumBad=physicalAdapterTcpRxChecksumBad, InterfaceIndex=InterfaceIndex, physicalAdapterSpeed=physicalAdapterSpeed, adapterRxBytes=adapterRxBytes, adapterDriverPath=adapterDriverPath, physicalAdapterPermanentNA=physicalAdapterPermanentNA, physicalAdapterLinkUpDownTrapEnable=physicalAdapterLinkUpDownTrapEnable, physicalAdapterAutoNegotiation=physicalAdapterAutoNegotiation, physicalAdapterOnlineDiagPassedTrap=physicalAdapterOnlineDiagPassedTrap, ansAttrTable=ansAttrTable, ansTeamName=ansTeamName, vtAdapterNotificationGroups=vtAdapterNotificationGroups, teamMembersTraps=teamMembersTraps, ansTeamMode=ansTeamMode, ansTeamLinkState=ansTeamLinkState, physicalAdapterOnlineDiagPassedFailedTrapEnable=physicalAdapterOnlineDiagPassedFailedTrapEnable, physicalAdapterIpv4RxChecksumOffLoadEnable=physicalAdapterIpv4RxChecksumOffLoadEnable, adapterType=adapterType, physicalAdapterCurrentNA=physicalAdapterCurrentNA, virtualAdapterVlanId=virtualAdapterVlanId, teamMemberTrapEnable=teamMemberTrapEnable, adapterDriverLoadStatus=adapterDriverLoadStatus, ansMembersAttrTable=ansMembersAttrTable, agentExtensionVersion=agentExtensionVersion, vtAdapterGroup=vtAdapterGroup, vtAdapterNotificationGroup=vtAdapterNotificationGroup, genericAdapterTrafficStatsAttrEntry=genericAdapterTrafficStatsAttrEntry, teamMemberAddedTrap=teamMemberAddedTrap, ansAttrEntry=ansAttrEntry, ansTeamPreviousPrimaryIndex=ansTeamPreviousPrimaryIndex, ansTeamMemberPriority=ansTeamMemberPriority, phyAdapterNotificationGroups=phyAdapterNotificationGroups, physicalAdapterAddedTrap=physicalAdapterAddedTrap, virtualAdapterVlanAttrEntry=virtualAdapterVlanAttrEntry, ansMemberIndex=ansMemberIndex, adapterTxErrors=adapterTxErrors, ansNumberOfVirtualAdapters=ansNumberOfVirtualAdapters, virtualAdaptersTrapEnable=virtualAdaptersTrapEnable, teamGroup=teamGroup, miscGroup=miscGroup, ansTeamMembersAttrTable=ansTeamMembersAttrTable, physicalAdapterRemovedTrap=physicalAdapterRemovedTrap, phyAdapterGroup=phyAdapterGroup, adapterCollisions=adapterCollisions, ansGroups=ansGroups, physicalAdapterLinkDownTrap=physicalAdapterLinkDownTrap, ansTrapEnable=ansTrapEnable, virtualAdapterRemovedTrap=virtualAdapterRemovedTrap, physicalAdapterIpv4TxChecksumOffLoadEnable=physicalAdapterIpv4TxChecksumOffLoadEnable, virtualAdapterAttrEntry=virtualAdapterAttrEntry, ansTeamSlaCompatible=ansTeamSlaCompatible, ansVlanAttrEntry=ansVlanAttrEntry, ansVlanTaggingType=ansVlanTaggingType, teamMemberRemovedTrap=teamMemberRemovedTrap, physicalAdapterPciBus=physicalAdapterPciBus, physicalAdaptersTraps=physicalAdaptersTraps, adapterIpAddress=adapterIpAddress, virtualAdaptersAttrTables=virtualAdaptersAttrTables, adapterRxPackets=adapterRxPackets, physicalAdapterDplxMode=physicalAdapterDplxMode, ansTeamMemberAttrEntry=ansTeamMemberAttrEntry, virtualAdaptersTraps=virtualAdaptersTraps, adapterDriverDate=adapterDriverDate, physicalAdapterTcpTxChecksumOffLoadEnable=physicalAdapterTcpTxChecksumOffLoadEnable, ansTeamProbesState=ansTeamProbesState, teamMembersEvents=teamMembersEvents, adapterRxDropped=adapterRxDropped, adapterDriverSize=adapterDriverSize, intel_lan_adapters=intel_lan_adapters, virtualAdaptersEvents=virtualAdaptersEvents, physicalAdapterAddedRemovedTrapEnable=physicalAdapterAddedRemovedTrapEnable, physicalAdaptersAttrOffloadTable=physicalAdaptersAttrOffloadTable, ansTeamCurrentPrimaryIndex=ansTeamCurrentPrimaryIndex, adapterDriverName=adapterDriverName, physicalAdapterAttrOffloadEntry=physicalAdapterAttrOffloadEntry, ansTeamFailoverCounter=ansTeamFailoverCounter, genericAdaptersAttrTable=genericAdaptersAttrTable, ansTeamAttrEntry=ansTeamAttrEntry, vtAdapterGroups=vtAdapterGroups, physicalAdapterLinkStatus=physicalAdapterLinkStatus, intellan=intellan, ansTeamRlbSupport=ansTeamRlbSupport, virtualAdaptersAttrTable=virtualAdaptersAttrTable, virtualAdapterIndex=virtualAdapterIndex, intellan_conformance=intellan_conformance, ansTeamAggrSelectionMode=ansTeamAggrSelectionMode, PYSNMP_MODULE_ID=intellan, physicalAdaptersAttrTable=physicalAdaptersAttrTable, intel=intel, physicalAdapterIpv4TCPSegmentationOffLoadEnable=physicalAdapterIpv4TCPSegmentationOffLoadEnable, physicalAdapterLinkUpTrap=physicalAdapterLinkUpTrap, adapterTxBytes=adapterTxBytes, ansRemovedTrap=ansRemovedTrap, ansMemberAnsId=ansMemberAnsId, ansTeamMemberState=ansTeamMemberState, genericAdaptersTrafficStatsAttrTable=genericAdaptersTrafficStatsAttrTable, ansNotificationGroups=ansNotificationGroups, adapterRxMulticast=adapterRxMulticast, status=status, teamNotificationGroups=teamNotificationGroups, physicalAdaptersAttrTables=physicalAdaptersAttrTables, company=company, physicalAdapterExpressTeamBundleId=physicalAdapterExpressTeamBundleId, ansMemberAttrEntry=ansMemberAttrEntry, adapterTxDropped=adapterTxDropped, ansTeamLoadBalanceRefresh=ansTeamLoadBalanceRefresh, ansTraps=ansTraps, physicalAdapterPciSlot=physicalAdapterPciSlot, physicalAdapterOnlineDiagFailedTrap=physicalAdapterOnlineDiagFailedTrap, description=description, genericAdapterDriverAttrEntry=genericAdapterDriverAttrEntry, ansTeamsAttrTable=ansTeamsAttrTable, ansNumberOfMembers=ansNumberOfMembers, phyAdapterGroups=phyAdapterGroups, events=events, ansTeamProbesMode=ansTeamProbesMode, physicalAdaptersEvents=physicalAdaptersEvents, physicalAdapterIndex=physicalAdapterIndex, operatingSystem=operatingSystem, mibVersion1_4_3=mibVersion1_4_3, genericAdapterAttrEntry=genericAdapterAttrEntry, ansTeamSpeed=ansTeamSpeed, ansGroup=ansGroup, adapterRxErrors=adapterRxErrors, nic_products=nic_products, intellan_compliance=intellan_compliance, ansAttrTables=ansAttrTables, adapterName=adapterName, ansVlansAttrTable=ansVlansAttrTable, virtualAdapterAnsId=virtualAdapterAnsId, genericAdaptersDriversAttrTable=genericAdaptersDriversAttrTable, virtualAdaptersVlanAttrTable=virtualAdaptersVlanAttrTable, adaptersTables=adaptersTables, physicalAdapterOnlineDiagStatus=physicalAdapterOnlineDiagStatus, physicalAdapterAttrEntry=physicalAdapterAttrEntry, physicalAdapterLinkStatusChangesCounter=physicalAdapterLinkStatusChangesCounter, adapterDriverVersion=adapterDriverVersion, adapterTxPackets=adapterTxPackets, physicalAdapterIrq=physicalAdapterIrq, ansEvents=ansEvents, ansTeamFailoverTrap=ansTeamFailoverTrap, teamNotificationGroup=teamNotificationGroup, genericAdaptersAttrTables=genericAdaptersAttrTables, teamGroups=teamGroups, intellanCompliances=intellanCompliances, ansAddedTrap=ansAddedTrap, adapterIndex=adapterIndex, products=products, ansId=ansId, adapterDriverInfo=adapterDriverInfo, physicalAdapterTcpRxChecksumOffLoadEnable=physicalAdapterTcpRxChecksumOffLoadEnable, ansNotificationGroup=ansNotificationGroup)
