#
# PySNMP MIB module DCP-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DCP-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Unsigned32, Counter64, Counter32, iso, Bits, ObjectIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Unsigned32", "Counter64", "Counter32", "iso", "Bits", "ObjectIdentity", "IpAddress", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
class Counter8(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class DisplayString(OctetString):
    pass

cdx6500OSTDCPTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: cdx6500OSTDCPTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500OSTDCPTable.setDescription('A list of Data Connection & Protection(DCP) statistics parameters for the port with DCP.')
cdx6500DCPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "DCP-OPT-MIB", "cdx6500DCPPortNumber"), (0, "DCP-OPT-MIB", "cdx6500DCPChanNumber"))
if mibBuilder.loadTexts: cdx6500DCPStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPStatEntry.setDescription('Each DCP parameter entry should be accessed using the double index, the DCP port number as the primary index, and the channel number as the secondary index. For PAD ports the secondary index, channel number must be a zero.')
cdx6500DCPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPPortNumber.setDescription('This is the port number with DCP enabled, which is used as a primary index to access DCP statistics.')
cdx6500DCPChanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPChanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPChanNumber.setDescription('This is the channel number with DCP enabled, which is used as a secondary index to access DCP statistics. For PAD ports the secondary index, channel number must be a zero.')
cdx6500DCPNegProtLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPNegProtLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPNegProtLevel.setDescription('This is the currently negotiated level of Data Connection Protection for a call. It will differ from the configured protection level if the peer has negotiated to a lower protection level.')
cdx6500DCPCurrConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPCurrConnState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPCurrConnState.setDescription('Indicates the state of the port with DCP. OPEN : There is a call. CLOSE: There is no call.')
cdx6500DCPUnackDataTpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 5), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPUnackDataTpdu.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPUnackDataTpdu.setDescription('Number of packets sent to the peer DCP layer but awaiting an acknowledgment packet.')
cdx6500DCPDataTpduQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 6), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDataTpduQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDataTpduQueued.setDescription('Number of data packets queued but not sent.')
cdx6500DCPInboundFlowSt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPInboundFlowSt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPInboundFlowSt.setDescription("Indicates whether flow control from the user equipment (Access Port) to the network is enabled or disabled. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500DCPOutboundFlowSt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPOutboundFlowSt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPOutboundFlowSt.setDescription("Indicates whether flow control from the network is enabled or disabled. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500DCPConnReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 9), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPConnReqTx.setDescription('Number of Connect Request TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPConnConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 10), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnConfTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPConnConfTx.setDescription('Number of Connect Confirmation TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPReconnReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 11), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPReconnReqTx.setDescription('Number of Reconnect Request TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPReconnConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 12), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnConfTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPReconnConfTx.setDescription('Number of Reconnect Confirmation TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPDiscReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 13), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDiscReqTx.setDescription('Number of Disconnect Request TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPDiscConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 14), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscConfTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDiscConfTx.setDescription('Number of Disconnect Confirmation TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDataTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDataTx.setDescription('Number of Data TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPAckTx.setDescription('Number of Acknowledgment TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPIntReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 17), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPIntReqTx.setDescription('Number of Interrupt Request TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPIntConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 18), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntConfTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPIntConfTx.setDescription('Number of Interrupt Confirm TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPResetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 19), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPResetReqTx.setDescription('Number of Reset Request TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPResetConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 20), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetConfTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPResetConfTx.setDescription('Number of Reset Confirm TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 21), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPRejTx.setDescription('Number of Reject TPDUs(Transport layer Protocol Data Unit) sent to the connection at the other end of this network connection.')
cdx6500DCPConnReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 22), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnReqRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPConnReqRcv.setDescription('Number of Connect Request TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPConnConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 23), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnConfRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPConnConfRcv.setDescription('Number of Connect Confirmation TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPReconnReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 24), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnReqRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPReconnReqRcv.setDescription('Number of Reconnect Request TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPReconnConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 25), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnConfRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPReconnConfRcv.setDescription('Number of Reconnect Confirmation TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPDiscReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 26), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscReqRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDiscReqRcv.setDescription('Number of Disconnect Request TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPDiscConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 27), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscConfRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDiscConfRcv.setDescription('Number of Disconnect Confirmation TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPDataRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDataRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPDataRcv.setDescription('Number of Data TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPAckRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPAckRcv.setDescription('Number of Acknowledgment TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPIntReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 30), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntReqRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPIntReqRcv.setDescription('Number of Interrupt Request TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPIntConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 31), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntConfRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPIntConfRcv.setDescription('Number of Interrupt Confirm TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPResetReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 32), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetReqRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPResetReqRcv.setDescription('Number of Reset Request TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPResetConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 33), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetConfRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPResetConfRcv.setDescription('Number of Reset Confirm TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
cdx6500DCPRejRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 34), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPRejRcv.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500DCPRejRcv.setDescription('Number of Reject TPDUs(Transport layer Protocol Data Unit) received from the connection at the other end of this network connection.')
mibBuilder.exportSymbols("DCP-OPT-MIB", cdx6500DCPReconnConfRcv=cdx6500DCPReconnConfRcv, cdx6500=cdx6500, DisplayString=DisplayString, cdx6500DCPCurrConnState=cdx6500DCPCurrConnState, cdx6500DCPDiscConfRcv=cdx6500DCPDiscConfRcv, cdx6500DCPInboundFlowSt=cdx6500DCPInboundFlowSt, cdx6500DCPStatEntry=cdx6500DCPStatEntry, cdx6500Statistics=cdx6500Statistics, cdx6500DCPReconnReqRcv=cdx6500DCPReconnReqRcv, cdx6500DCPResetReqRcv=cdx6500DCPResetReqRcv, cdx6500DCPResetConfTx=cdx6500DCPResetConfTx, cdx6500DCPConnConfRcv=cdx6500DCPConnConfRcv, cdx6500DCPDiscReqTx=cdx6500DCPDiscReqTx, cdx6500DCPNegProtLevel=cdx6500DCPNegProtLevel, cdx6500DCPDataRcv=cdx6500DCPDataRcv, cdx6500DCPDataTpduQueued=cdx6500DCPDataTpduQueued, cdxProductSpecific=cdxProductSpecific, cdx6500DCPPortNumber=cdx6500DCPPortNumber, cdx6500DCPDataTx=cdx6500DCPDataTx, cdx6500DCPChanNumber=cdx6500DCPChanNumber, cdx6500DCPRejRcv=cdx6500DCPRejRcv, cdx6500DCPReconnReqTx=cdx6500DCPReconnReqTx, cdx6500DCPResetReqTx=cdx6500DCPResetReqTx, cdx6500DCPDiscReqRcv=cdx6500DCPDiscReqRcv, cdx6500DCPConnReqRcv=cdx6500DCPConnReqRcv, cdx6500DCPResetConfRcv=cdx6500DCPResetConfRcv, cdx6500DCPOutboundFlowSt=cdx6500DCPOutboundFlowSt, cdx6500DCPIntConfTx=cdx6500DCPIntConfTx, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdx6500DCPIntReqTx=cdx6500DCPIntReqTx, Counter8=Counter8, codex=codex, cdx6500DCPDiscConfTx=cdx6500DCPDiscConfTx, cdx6500DCPIntConfRcv=cdx6500DCPIntConfRcv, cdx6500DCPAckTx=cdx6500DCPAckTx, cdx6500DCPConnReqTx=cdx6500DCPConnReqTx, cdx6500DCPConnConfTx=cdx6500DCPConnConfTx, cdx6500DCPRejTx=cdx6500DCPRejTx, cdx6500DCPIntReqRcv=cdx6500DCPIntReqRcv, cdx6500DCPReconnConfTx=cdx6500DCPReconnConfTx, cdx6500DCPAckRcv=cdx6500DCPAckRcv, cdx6500OSTDCPTable=cdx6500OSTDCPTable, cdx6500DCPUnackDataTpdu=cdx6500DCPUnackDataTpdu)
