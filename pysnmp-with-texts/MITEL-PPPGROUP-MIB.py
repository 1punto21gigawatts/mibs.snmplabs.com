#
# PySNMP MIB module MITEL-PPPGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MITEL-PPPGROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, TimeTicks, IpAddress, NotificationType, MibIdentifier, Gauge32, enterprises, Integer32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "Gauge32", "enterprises", "Integer32", "Bits", "Counter64")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
mitelRouterPppGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2))
mitelRouterPppGroup.setRevisions(('2003-03-24 10:33', '1999-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mitelRouterPppGroup.setRevisionsDescriptions(('Convert to SMIv2', 'PPP MIB Version 1.0',))
if mibBuilder.loadTexts: mitelRouterPppGroup.setLastUpdated('200303241033Z')
if mibBuilder.loadTexts: mitelRouterPppGroup.setOrganization('MITEL Corporation')
if mibBuilder.loadTexts: mitelRouterPppGroup.setContactInfo('Standards Group, Postal: MITEL Corporation 350 Legget Drive, PO Box 13089 Kanata, Ontario Canada K2K 1X3 Tel: +1 613 592 2122 Fax: +1 613 592 4784 E-mail: std@mitel.com')
if mibBuilder.loadTexts: mitelRouterPppGroup.setDescription('The MITEL PPP MIB module.')
mitel = MibIdentifier((1, 3, 6, 1, 4, 1, 1027))
mitelProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4))
mitelPropIpNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8))
mitelIpNetRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1))
mitelPppGrpGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1))
mitelGblGrpNegotiateFirst = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2), ("mschap", 3))).clone('chap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpNegotiateFirst.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpNegotiateFirst.setDescription('This attribute defines which PPP authentication protocol is negotiated first on incoming call. DEFAULT = chap')
mitelGblGrpDynamicIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpDynamicIpAddr.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpDynamicIpAddr.setDescription('This attribute defines the start address of the dynamic addres pool.')
mitelGblGrpNumDynamicIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpNumDynamicIpAddr.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpNumDynamicIpAddr.setDescription('This attribute defines the number of dynamic IP addresses in the pool.')
mitelGblGrpDynamicIpAdrrHoldoff = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpDynamicIpAdrrHoldoff.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpDynamicIpAdrrHoldoff.setDescription('This attribute defines the time in seconds before the same IP address can be reused after a call has been disconnected.')
mitelGblGrpRemDnsIpAddrHandling = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("override", 2), ("overridewith", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpRemDnsIpAddrHandling.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpRemDnsIpAddrHandling.setDescription('This attribute determines wether the system can accept or override the DNS IP address submitted by a remote system. DEFAULT = accept. Override has been superceded by overridewith.')
mitelGblGrpPrimaryWinsServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpPrimaryWinsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpPrimaryWinsServerIpAddr.setDescription('This attribute defines the Primary WINS server IP address of your Network.')
mitelGblGrpSecondaryWinsServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelGblGrpSecondaryWinsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: mitelGblGrpSecondaryWinsServerIpAddr.setDescription('This attribute defines the Secondary WINS server IP address of your Network.')
mitelPppGrpRemoteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2), )
if mibBuilder.loadTexts: mitelPppGrpRemoteConfigTable.setStatus('current')
if mibBuilder.loadTexts: mitelPppGrpRemoteConfigTable.setDescription('This table contains objects that pertain to the management of remote LANs that use the PPP Internet standard link protocol.')
mitelPppGrpRemoteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2, 1), ).setIndexNames((0, "MITEL-PPPGROUP-MIB", "mitelRmtCfgTableIndex"))
if mibBuilder.loadTexts: mitelPppGrpRemoteConfigEntry.setStatus('current')
if mibBuilder.loadTexts: mitelPppGrpRemoteConfigEntry.setDescription('A default entry at conceptual row zero does exist in this table. The default entry can be used to specify the PPP authentication protocol only.')
mitelRmtCfgTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelRmtCfgTableIndex.setStatus('current')
if mibBuilder.loadTexts: mitelRmtCfgTableIndex.setDescription(' This object uniquely identifies this object ')
mitelRmtCfgTableIpAddrHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("override", 2), ("assign", 3))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelRmtCfgTableIpAddrHandling.setStatus('current')
if mibBuilder.loadTexts: mitelRmtCfgTableIpAddrHandling.setDescription('This attribute determines wether the system can accept or override the DNS IP address submitted by a remote system. DEFAULT = accept.')
mitelRmtCfgTableRemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelRmtCfgTableRemIpAddr.setStatus('current')
if mibBuilder.loadTexts: mitelRmtCfgTableRemIpAddr.setDescription('The IP address to assign to remote if mitelRmtCfgTableIPAddrHandling is set to assign(3)')
mitelRmtCfgTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelRmtCfgTableStatus.setStatus('current')
if mibBuilder.loadTexts: mitelRmtCfgTableStatus.setDescription('The current status of this entry.')
mitelRmtCfgTablePppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelRmtCfgTablePppMode.setStatus('current')
if mibBuilder.loadTexts: mitelRmtCfgTablePppMode.setDescription('The mode PPP will be using for the given destination.')
mitelPppGrpPppOverEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3), )
if mibBuilder.loadTexts: mitelPppGrpPppOverEthernetTable.setStatus('current')
if mibBuilder.loadTexts: mitelPppGrpPppOverEthernetTable.setDescription('Table containing the configuration items needed by the PPPoE stack.')
mitelPppGrpPppOverEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1), ).setIndexNames((0, "MITEL-PPPGROUP-MIB", "mitelPppOEthTableIndex"))
if mibBuilder.loadTexts: mitelPppGrpPppOverEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: mitelPppGrpPppOverEthernetEntry.setDescription('PPPoE information')
mitelPppOEthTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTableIndex.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTableIndex.setDescription('Unique Identifier for an entry in PPP over Ethernet Table.')
mitelPppOEthTableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTableEnabled.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTableEnabled.setDescription('Is this PPPoE instance enabled or not.')
mitelPppOEthTablePacketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTablePacketTimeout.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTablePacketTimeout.setDescription('The time to wait, in seconds, for a valid response to a discovery packet before resending it. Warning: this value is doubled ever time a packet is resent.')
mitelPppOEthTablePacketRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTablePacketRetries.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTablePacketRetries.setDescription('The number of times to resend discovery packets before giving up on the negotiation.')
mitelPppOEthTableTotalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTableTotalRetries.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTableTotalRetries.setDescription('The RFC states that failure to receive a valid PADS packet should restart the negotiation. This count stops the system retrying indefinitely on duff PADS packets by capping the total number of retry attempts.')
mitelPppOEthTableServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTableServiceName.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTableServiceName.setDescription('The service we wish to request from the remote access concentrator. Examples of the use of the service name are to indicate an ISP or a class or quality of service. An empty string indicates any service.')
mitelPppOEthTableACName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelPppOEthTableACName.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTableACName.setDescription('Description of the remote access concentrator we wish to connect to. An empty string indicates no preference.')
mitelPppOEthTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelPppOEthTableStatus.setStatus('current')
if mibBuilder.loadTexts: mitelPppOEthTableStatus.setDescription("The entry's row status.")
mibBuilder.exportSymbols("MITEL-PPPGROUP-MIB", PYSNMP_MODULE_ID=mitelRouterPppGroup, mitelGblGrpNumDynamicIpAddr=mitelGblGrpNumDynamicIpAddr, mitelPppOEthTablePacketTimeout=mitelPppOEthTablePacketTimeout, mitelRmtCfgTableIndex=mitelRmtCfgTableIndex, mitelPppGrpPppOverEthernetEntry=mitelPppGrpPppOverEthernetEntry, mitelRouterPppGroup=mitelRouterPppGroup, mitelRmtCfgTableStatus=mitelRmtCfgTableStatus, mitelPppOEthTableTotalRetries=mitelPppOEthTableTotalRetries, mitelRmtCfgTableIpAddrHandling=mitelRmtCfgTableIpAddrHandling, mitelPppOEthTableIndex=mitelPppOEthTableIndex, mitelPppOEthTableStatus=mitelPppOEthTableStatus, mitelGblGrpSecondaryWinsServerIpAddr=mitelGblGrpSecondaryWinsServerIpAddr, mitelGblGrpDynamicIpAddr=mitelGblGrpDynamicIpAddr, mitelPppOEthTableServiceName=mitelPppOEthTableServiceName, mitelPppGrpRemoteConfigEntry=mitelPppGrpRemoteConfigEntry, mitelProprietary=mitelProprietary, mitelPppOEthTableEnabled=mitelPppOEthTableEnabled, mitelGblGrpNegotiateFirst=mitelGblGrpNegotiateFirst, mitelRmtCfgTableRemIpAddr=mitelRmtCfgTableRemIpAddr, mitel=mitel, mitelPppGrpPppOverEthernetTable=mitelPppGrpPppOverEthernetTable, mitelGblGrpRemDnsIpAddrHandling=mitelGblGrpRemDnsIpAddrHandling, mitelGblGrpPrimaryWinsServerIpAddr=mitelGblGrpPrimaryWinsServerIpAddr, mitelRmtCfgTablePppMode=mitelRmtCfgTablePppMode, mitelPppGrpRemoteConfigTable=mitelPppGrpRemoteConfigTable, mitelPppOEthTablePacketRetries=mitelPppOEthTablePacketRetries, mitelPppGrpGlobalGroup=mitelPppGrpGlobalGroup, mitelGblGrpDynamicIpAdrrHoldoff=mitelGblGrpDynamicIpAdrrHoldoff, mitelPppOEthTableACName=mitelPppOEthTableACName, mitelPropIpNetworking=mitelPropIpNetworking, mitelIpNetRouter=mitelIpNetRouter)
