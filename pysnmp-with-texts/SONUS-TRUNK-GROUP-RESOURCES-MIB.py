#
# PySNMP MIB module SONUS-TRUNK-GROUP-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-TRUNK-GROUP-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Counter64, Integer32, TimeTicks, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, NotificationType, Gauge32, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "TimeTicks", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Gauge32", "MibIdentifier", "Unsigned32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
sonusEventLevel, sonusEventDescription, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventLevel", "sonusEventDescription", "sonusEventClass")
sonusResourcesMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusResourcesMIBs")
SonusName, SonusBoolean = mibBuilder.importSymbols("SONUS-TC", "SonusName", "SonusBoolean")
sonusTrunkGroupResourcesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3))
if mibBuilder.loadTexts: sonusTrunkGroupResourcesMIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusTrunkGroupResourcesMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusTrunkGroupResourcesMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusTrunkGroupResourcesMIB.setDescription('The MIB Module for Trunk Group Resources Management.')
sonusTrunkGroupResourcesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1))
sonusTrunkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1))
sonusTrunkConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 1))
sonusTgMaxRpcLpcs = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxRpcLpcs.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxRpcLpcs.setDescription('Maximum number of RPC-LPC pairs for this gateway.')
sonusTgMaxCics = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxCics.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxCics.setDescription('Maximum number of CICs for this gateway.')
sonusTgMaxTrunkGroups = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxTrunkGroups.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxTrunkGroups.setDescription('Maximum number of trunk groups for this gateway.')
sonusTgMaxServiceGroups = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxServiceGroups.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxServiceGroups.setDescription('Maximum number of Service Groups for this gateway.')
sonusTgMaxSgInstances = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxSgInstances.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxSgInstances.setDescription('Maximum number of Service Group Instances for this gateway.')
sonusTgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2))
sonusTgNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgNextIndex.setDescription('The next valid index to use when creating a new sonusTgEntry')
sonusTgTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2), )
if mibBuilder.loadTexts: sonusTgTable.setStatus('current')
if mibBuilder.loadTexts: sonusTgTable.setDescription('A list of trunk group entries.')
sonusTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgIndex"))
if mibBuilder.loadTexts: sonusTgEntry.setStatus('current')
if mibBuilder.loadTexts: sonusTgEntry.setDescription('Each sonusTgEntry containing configuration objects. Rules & Behaviors: A sonusTgEntry cannot be deleted when it is enabled. When disabling the trunk group entry, it must not have any associated SGs. All SGs must be removed before disabling the trunk group. A sonusTgEntry cannot be modified when it is enabled.')
sonusTgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgIndex.setDescription('A unique value for each trunk group that is between 1 and maximum allowed')
sonusTgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgName.setStatus('current')
if mibBuilder.loadTexts: sonusTgName.setDescription('The name of the trunk group.')
sonusTgProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfName.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfName.setDescription('The name of the profile applied to this trunk group entry. ')
sonusTgSgSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("leastcost", 1), ("configured", 2), ("circularforward", 3), ("circularbackward", 4))).clone('leastcost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgSgSelect.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgSelect.setDescription('Selection for hunting within a PSTN trunk group that has more than 1 associated service group(SG). It is either based on cost associated with each SG, how the SG is ordered during configuration (for circular also). If either circular option is chosen, then SG hunt algorithm is ignored.')
sonusTgLnpTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 5), SonusBoolean().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgLnpTranslate.setStatus('current')
if mibBuilder.loadTexts: sonusTgLnpTranslate.setDescription('This is only meaningful for PSTN trunk groups that may require LNP translation for the called number.')
sonusTg800Translate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 6), SonusBoolean().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTg800Translate.setStatus('current')
if mibBuilder.loadTexts: sonusTg800Translate.setDescription('This is only meaningful for PSTN trunk groups that may require 800 number translation for the called number.')
sonusTgCallingNumVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 7), SonusBoolean().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgCallingNumVerify.setStatus('current')
if mibBuilder.loadTexts: sonusTgCallingNumVerify.setDescription('This is only meaningful for PSTN trunk groups that requires verification for the calling number.')
sonusTgInboundReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgInboundReserved.setStatus('current')
if mibBuilder.loadTexts: sonusTgInboundReserved.setDescription('This is only meaninful for PSTN Trunk Groups. This the percent of channels reserved for handling inbound calls. Default is 0% and valid for both direction type trunks. The amount reserved is round off to next number. For example, 50% of 23 hannels is 12.5 or 13 channels. Percentage selection allowed in 5% increments.')
sonusTgIsupOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 9), SonusBoolean().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgIsupOnly.setStatus('current')
if mibBuilder.loadTexts: sonusTgIsupOnly.setDescription('This is only meaningful for PSTN trunk groups that is either an ISUP only or mixed of ISUP and other PSTN types')
sonusTgCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgCarrier.setStatus('current')
if mibBuilder.loadTexts: sonusTgCarrier.setDescription('This is only meaningful for PSTN trunk groups and is specific to Isup only. This is the name of the Isup that this trunk group is bound to. ')
sonusTgIsupNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgIsupNode.setStatus('current')
if mibBuilder.loadTexts: sonusTgIsupNode.setDescription('This is meaningful for PSTN trunk groups and is specific to Isup only. This is the name of the Isup that this trunk group is bound to. ')
sonusTgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusTgAdminState.setDescription('Administrative state to disable or enable a trunk group. All trunk groups are created with its state disabled. If trunk group is disabled, the trunk group must be enabled to allow calls to proceed.')
sonusTgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2))).clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMode.setStatus('current')
if mibBuilder.loadTexts: sonusTgMode.setDescription('The operation mode for this trunk.')
sonusTgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dryUp", 1), ("force", 2))).clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgAction.setStatus('current')
if mibBuilder.loadTexts: sonusTgAction.setDescription('The action for the operation mode for this trunk.')
sonusTgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusTgTimeout.setDescription('Timeout value in minutes for the dry up action.')
sonusTgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusTgRowStatus.setDescription('This is for SNMP use.')
sonusTgCirResvState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgCirResvState.setStatus('current')
if mibBuilder.loadTexts: sonusTgCirResvState.setDescription('Administrative state to disable or enable the circuit reservation feature on a trunk group. All trunk groups are created with this feature disabled. If this feature is enabled, the sonusTgInboundReserved feature is overriden automatically.')
sonusTgPriorityCallReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgPriorityCallReserve.setStatus('current')
if mibBuilder.loadTexts: sonusTgPriorityCallReserve.setDescription('The minimum number of priority call allowed set for this trunk group when sonusTgCirResvState is set to enabled.')
sonusTgIncomingCallReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgIncomingCallReserve.setStatus('current')
if mibBuilder.loadTexts: sonusTgIncomingCallReserve.setDescription('The minimum number of incoming call allowed set for this trunk group when sonusTgCirResvState is set to enabled.')
sonusTgOutgoingCallReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgOutgoingCallReserve.setStatus('current')
if mibBuilder.loadTexts: sonusTgOutgoingCallReserve.setDescription('The minimum percent of outgoing call allowed set for this trunk group when sonusTgCirResvState is set to enabled.')
sonusTgStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: sonusTgStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusTgStatusTable.setDescription('This table contains status information of a PSTN trunk group. There may not be any SG registered to a trunk group in which case all statistics will be zero.')
sonusTgStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgStatusIndex"))
if mibBuilder.loadTexts: sonusTgStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusTgStatusEntry.setDescription('Each entry describes the current status of a PSTN trunk group.')
sonusTgStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgStatusIndex.setDescription('A unique value for each trunk group between 1 and maximum allowed.')
sonusTgOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("oosPending", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgOperState.setStatus('current')
if mibBuilder.loadTexts: sonusTgOperState.setDescription('Current operational state of the trunk group.')
sonusTgPstnTotalAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgPstnTotalAvailable.setStatus('current')
if mibBuilder.loadTexts: sonusTgPstnTotalAvailable.setDescription('The sum of all available or unblocked PSTN channels for this trunk group.')
sonusTgPstnTotalInboundRsv = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgPstnTotalInboundRsv.setStatus('current')
if mibBuilder.loadTexts: sonusTgPstnTotalInboundRsv.setDescription('This is meaningful for PSTN trunk groups that are configured for inbound or both directions only. This is the reserved count as specified by the percentage configred for this trunk group.')
sonusTgPstnInboundUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgPstnInboundUsage.setStatus('current')
if mibBuilder.loadTexts: sonusTgPstnInboundUsage.setDescription('This is only meaningful for PSTN trunk groups that are configured for inbound or both directions. This reflects the current inbound or incoming usage count of this trunk group.')
sonusTgPstnOutboundUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgPstnOutboundUsage.setStatus('current')
if mibBuilder.loadTexts: sonusTgPstnOutboundUsage.setDescription('This is only meaningful for PSTN trunk groups that are configured for outbound or both directions. This reflects the current outbound, outgoing or non-priority usage count of this trunk group.')
sonusTgPstnTotalConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgPstnTotalConfigured.setStatus('current')
if mibBuilder.loadTexts: sonusTgPstnTotalConfigured.setDescription('The sum of all configured and registered PSTN channels for this trunk group.')
sonusTgAccCurrentACL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgAccCurrentACL.setStatus('current')
if mibBuilder.loadTexts: sonusTgAccCurrentACL.setDescription('Current congestion level for the Trunk Group')
sonusTgPriorityCallUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgPriorityCallUsage.setStatus('current')
if mibBuilder.loadTexts: sonusTgPriorityCallUsage.setDescription('This is only meaningful for ISUP trunk groups that are configured and when sonusTgCirResvState is enabled. This reflects the current priority usage count of this trunk group.')
sonusTgSgTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 4), )
if mibBuilder.loadTexts: sonusTgSgTable.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgTable.setDescription('This is a virtual table containing a list of service groups that belong to the same trunk group. This is a doubly indexed table so that further details about each service group may be queried by name.')
sonusTgSgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 4, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgSgTgIndex"), (0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgSgIndex"))
if mibBuilder.loadTexts: sonusTgSgEntry.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgEntry.setDescription('Each entry lists the name and order of each service group.')
sonusTgSgTgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgSgTgIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgTgIndex.setDescription('The Trunk Group index that has the following set of Service Groups.')
sonusTgSgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgSgIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgIndex.setDescription('A unique value for each service group in this trunk group')
sonusTgSgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgSgName.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgName.setDescription('The name of the service group.')
sonusTgSgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ss7", 1), ("cas", 2), ("isdn", 3), ("h323", 4), ("gateway", 5), ("dedicated", 6), ("twostagedial", 7), ("ras", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgSgType.setStatus('current')
if mibBuilder.loadTexts: sonusTgSgType.setDescription('The type of the service group.')
sonusTgProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5))
sonusTgProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileNextIndex.setDescription('The next valid index to use when creating a new sonusTgProfileEntry')
sonusTgProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6), )
if mibBuilder.loadTexts: sonusTgProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileTable.setDescription('A list of trunk group entries.')
sonusTgProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgProfileIndex"))
if mibBuilder.loadTexts: sonusTgProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileEntry.setDescription('Each sonusTgProfileEntry containing configuration objects. Rules & Behaviors: A sonusTgProfileEntry cannot be deleted when it is enabled. When disabling the trunk group entry, it must not have any associated SGs. All SGs must be removed before disabling the trunk group. A sonusTgProfileEntry cannot be modified when it is enabled.')
sonusTgProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTgProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileIndex.setDescription('A unique value for each trunk group profile that is between 1 and maximum allowed')
sonusTgProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileName.setDescription('The name of this trunk group Profile.')
sonusTgProfileSgSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("leastcost", 1), ("configured", 2), ("circularforward", 3), ("circularbackward", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileSgSelect.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileSgSelect.setDescription('Selection for hunting within a PSTN trunk group that has more than 1 associated service group(SG). It is based on cost associated with each SG, how the SG is ordered during configuration (for circular also). If either circular option is chosen, then SG hunt algorithm is ignored.')
sonusTgProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileAdminState.setDescription('Administrator state to use a trunk group Profile. All trunk group profiles are created with its state disabled. When disabled, the profile must be enabled to allowed to be used.')
sonusTgProfileInboundReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileInboundReserved.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileInboundReserved.setDescription('This is only meaninful for PSTN Trunk Groups. This the percent of channels reserved for handling inbound calls. Default is 0% and valid for both direction type trunks. The amount reserved is round off to next number. For example, 50% of 23 hannels is 12.5 or 13 channels. Percentage selection allowed in 5% increments.')
sonusTgProfileLnpTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 6), SonusBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileLnpTranslate.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileLnpTranslate.setDescription('This is only meaningful for PSTN trunk groups that may require LNP translation for the called number.')
sonusTgProfile800Translate = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 7), SonusBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfile800Translate.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfile800Translate.setDescription('This is only meaningful for PSTN trunk groups that may require 800 number translation for the called number.')
sonusTgProfileCallingNumVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 8), SonusBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileCallingNumVerify.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileCallingNumVerify.setDescription('This is only meaningful for PSTN trunk groups that requires verification for the calling number.')
sonusTgProfileIsupOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 9), SonusBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileIsupOnly.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileIsupOnly.setDescription('This is only meaningful for PSTN trunk groups that is either an ISUP only or mixed of ISUP and other PSTN types')
sonusTgProfileCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileCarrier.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileCarrier.setDescription('This is only meaningful for PSTN trunk groups and is specific to Isup only. This is the name of the Isup that this trunk group is bound to. ')
sonusTgProfileIsupNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileIsupNode.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileIsupNode.setDescription('This is only meaningful for PSTN trunk groups and is specific to Isup only. This is the name of the Isup that this trunk group is bound to. ')
sonusTgProfSgSelectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfSgSelectState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfSgSelectState.setDescription('Indicates whether sonusTgProfileSgSelect object is present in this profile')
sonusTgProfInboundReservedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfInboundReservedState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfInboundReservedState.setDescription('Indicates whether sonusTgProfileInboundReserved object is present in this profile')
sonusTgProfLnpTranslateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfLnpTranslateState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfLnpTranslateState.setDescription('Indicates whether sonusTgProfileLnpTranslate object is present in this profile')
sonusTgProf800TranslateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProf800TranslateState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProf800TranslateState.setDescription('Indicates whether sonusTgProfile800Translate object is present in this profile')
sonusTgProfCallingNumVerifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfCallingNumVerifyState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfCallingNumVerifyState.setDescription('Indicates whether sonusTgProfileCallingNumVerify object is present in this profile')
sonusTgProfIsupOnlyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfIsupOnlyState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfIsupOnlyState.setDescription('Indicates whether sonusTgProfileIsupOnly object is present in this profile')
sonusTgProfCarrierState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfCarrierState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfCarrierState.setDescription('Indicates whether sonusTgProfileCarrier object is present in this profile')
sonusTgProfIsupNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfIsupNodeState.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfIsupNodeState.setDescription('Indicates whether sonusTgProfileIsupNode object is present in this profile')
sonusTgProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 1, 5, 6, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusTgProfileRowStatus.setDescription('This is for SNMP use.')
sonusGatewayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2))
sonusGatewayConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 1))
sonusTgMaxGateways = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxGateways.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxGateways.setDescription('Maximum allowable destination or remote gateways in the configuration.')
sonusDestGatewayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2))
sonusGatewayNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusGatewayNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayNextIndex.setDescription('The next valid index to use when creating a new sonusGatewayEntry')
sonusGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2), )
if mibBuilder.loadTexts: sonusGatewayTable.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayTable.setDescription('This is a table containing a list of IP telephony gateways in the network.')
sonusGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusGatewayIndex"))
if mibBuilder.loadTexts: sonusGatewayEntry.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayEntry.setDescription('Each entry lists the name and order of each gateway.')
sonusGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayIndex.setDescription('A unique value for each gateway between 1 and maximum allowed.')
sonusGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayName.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayName.setDescription('The name of the IP Telephony gateway.')
sonusGatewayProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayProfName.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayProfName.setDescription('The name of the profile applied to this gateway entry. ')
sonusGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gsx9000", 1), ("h323", 2), ("sip", 3))).clone('gsx9000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayType.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayType.setDescription('The type of gateway.')
sonusGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayIpAddress.setDescription('This is signaling Ip address of the gateway.')
sonusGatewayPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayPortNum.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayPortNum.setDescription('This is the port number assigned for the signaling Ip address of the gateway (default is Sonus registered port 2569).')
sonusGatewayMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayMaxConn.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayMaxConn.setDescription('This is the maximum connections allowed for this gateway to the remote gateway specified by the sonusGatewayName.')
sonusGatewayAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayAdminState.setDescription('Allow administrator to disable or enable the connection from this gateway to the remote gateway. All connections to the remote gateways are created with its state disabled. Once disabled, the gateway must be enabled to allow calls to proceed again.')
sonusGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusGatewayRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusGatewayRowStatus.setDescription('This is for SNMP use.')
sonusDestGatewayStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 3))
sonusGwStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 3, 3), )
if mibBuilder.loadTexts: sonusGwStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusGwStatusTable.setDescription('This is a table containing a list of IP telephony gateways in the network.')
sonusGwStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 3, 3, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusGwStatusIndex"))
if mibBuilder.loadTexts: sonusGwStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusGwStatusEntry.setDescription('Each entry lists the current connections and order of each gateway.')
sonusGwStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusGwStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusGwStatusIndex.setDescription('A unique value for each gateway between 1 and maximum allowed.')
sonusGwCurrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusGwCurrConnections.setStatus('current')
if mibBuilder.loadTexts: sonusGwCurrConnections.setDescription('The Current number of connections between this gateway and the remote gateway.')
sonusCarrierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3))
sonusCarrierConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 1))
sonusTgMaxCarrierCodes = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusTgMaxCarrierCodes.setStatus('current')
if mibBuilder.loadTexts: sonusTgMaxCarrierCodes.setDescription('Maximum number of Carrier Codes for this gateway.')
sonusCarrierCodeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2))
sonusCarrierCodeNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusCarrierCodeNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeNextIndex.setDescription('The next valid index to use when creating a new sonusCarrierCodeEntry')
sonusCarrierCodeTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: sonusCarrierCodeTable.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeTable.setDescription('This is a table containing a list of IP telephony gateways in the network.')
sonusCarrierCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusCarrierCodeIndex"))
if mibBuilder.loadTexts: sonusCarrierCodeEntry.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeEntry.setDescription('Each entry lists the name and order of each gateway.')
sonusCarrierCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusCarrierCodeIndex.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeIndex.setDescription('A unique value for each carrier code between 1 and maximum allowed.')
sonusCarrierCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusCarrierCodeName.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeName.setDescription('The name assigned to this carrier code.')
sonusCarrierCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusCarrierCode.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCode.setDescription('This is the carrier code specified by the sonusCarrierCodeName. There are a maximum of up to 4 digits.')
sonusCarrierCodeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusCarrierCodeAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeAdminState.setDescription('Allow administrator to disable or enable this carrier code. Once disabled, this carrier code must be enabled to allow calls to proceed again.')
sonusCarrierCodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusCarrierCodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeRowStatus.setDescription('This is for SNMP use.')
sonusCarrierCodeNetworkIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ccitt", 1), ("national", 2), ("other", 3))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusCarrierCodeNetworkIdType.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeNetworkIdType.setDescription('The type of network identification for this carrier code')
sonusCarrierCodeNetworkIdPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ccittunknown", 1), ("ccittpublicdatanetwork", 2), ("ccittlandmobilenetwork", 3), ("ccittreserved1", 4), ("ccittreserved2", 5), ("nationalunknown", 6), ("national3digitcarriercode", 7), ("national4digitcarriercode", 8), ("nationalreserved1", 9), ("nationalreserved2", 10))).clone('national4digitcarriercode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusCarrierCodeNetworkIdPlan.setStatus('current')
if mibBuilder.loadTexts: sonusCarrierCodeNetworkIdPlan.setDescription('The network identification plan for this carrier code')
sonusTrunkGroupResourcesMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2))
sonusTrunkGroupResourcesMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 0))
sonusTrunkGroupResourcesMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 1))
sonusTrunkOutOfServiceReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("allResourcesBlocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusTrunkOutOfServiceReason.setStatus('current')
if mibBuilder.loadTexts: sonusTrunkOutOfServiceReason.setDescription('The reason why the Trunk Group is out of service.')
sonusTrunkEnabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 0, 1)).setObjects(("SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusTrunkEnabledNotification.setStatus('current')
if mibBuilder.loadTexts: sonusTrunkEnabledNotification.setDescription('This trap indicates a Trunk Group is now enabled.')
sonusTrunkDisabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 0, 2)).setObjects(("SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusTrunkDisabledNotification.setStatus('current')
if mibBuilder.loadTexts: sonusTrunkDisabledNotification.setDescription('This trap indicates a Trunk Group is now disabled.')
sonusTrunkInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 0, 3)).setObjects(("SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusTrunkInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusTrunkInServiceNotification.setDescription('This trap indicates a Trunk Group is now in service.')
sonusTrunkOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 0, 4)).setObjects(("SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgName"), ("SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTrunkOutOfServiceReason"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusTrunkOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusTrunkOutOfServiceNotification.setDescription('This trap indicates that a Trunk Group is out of service.')
sonusTrunkDeletedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 2, 3, 2, 0, 5)).setObjects(("SONUS-TRUNK-GROUP-RESOURCES-MIB", "sonusTgName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusTrunkDeletedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusTrunkDeletedNotification.setDescription('This trap indicates a Trunk Group is now deleted.')
mibBuilder.exportSymbols("SONUS-TRUNK-GROUP-RESOURCES-MIB", sonusTrunkGroupResourcesMIBNotifications=sonusTrunkGroupResourcesMIBNotifications, sonusGatewayNextIndex=sonusGatewayNextIndex, sonusCarrierCodeNextIndex=sonusCarrierCodeNextIndex, sonusCarrierConfigObjects=sonusCarrierConfigObjects, sonusTgProfInboundReservedState=sonusTgProfInboundReservedState, sonusTgPstnTotalAvailable=sonusTgPstnTotalAvailable, sonusTgProfileCarrier=sonusTgProfileCarrier, sonusCarrierCodeRowStatus=sonusCarrierCodeRowStatus, sonusTgAdminState=sonusTgAdminState, sonusTgMaxGateways=sonusTgMaxGateways, sonusTgProfileSgSelect=sonusTgProfileSgSelect, sonusTgPstnTotalConfigured=sonusTgPstnTotalConfigured, sonusTgProfIsupNodeState=sonusTgProfIsupNodeState, sonusTgProfileTable=sonusTgProfileTable, sonusGatewayAdminState=sonusGatewayAdminState, sonusTrunkConfigObjects=sonusTrunkConfigObjects, sonusTrunkGroupResourcesMIB=sonusTrunkGroupResourcesMIB, sonusTgProfileIndex=sonusTgProfileIndex, sonusCarrierCodeEntry=sonusCarrierCodeEntry, sonusGatewayConfigObjects=sonusGatewayConfigObjects, sonusTgSgTgIndex=sonusTgSgTgIndex, sonusTrunkGroupResourcesMIBObjects=sonusTrunkGroupResourcesMIBObjects, sonusTrunkOutOfServiceReason=sonusTrunkOutOfServiceReason, sonusTgProfileRowStatus=sonusTgProfileRowStatus, sonusTgProf800TranslateState=sonusTgProf800TranslateState, sonusTgSgSelect=sonusTgSgSelect, sonusTgProfCarrierState=sonusTgProfCarrierState, sonusGatewayEntry=sonusGatewayEntry, sonusTgProfileLnpTranslate=sonusTgProfileLnpTranslate, sonusTgPriorityCallUsage=sonusTgPriorityCallUsage, sonusTgPstnTotalInboundRsv=sonusTgPstnTotalInboundRsv, sonusTgSgType=sonusTgSgType, sonusTrunkObjects=sonusTrunkObjects, sonusTgRowStatus=sonusTgRowStatus, sonusTgIncomingCallReserve=sonusTgIncomingCallReserve, sonusTgProfName=sonusTgProfName, sonusTgCarrier=sonusTgCarrier, sonusTgCallingNumVerify=sonusTgCallingNumVerify, sonusTrunkOutOfServiceNotification=sonusTrunkOutOfServiceNotification, sonusTgPriorityCallReserve=sonusTgPriorityCallReserve, sonusTgProfile800Translate=sonusTgProfile800Translate, sonusGwCurrConnections=sonusGwCurrConnections, PYSNMP_MODULE_ID=sonusTrunkGroupResourcesMIB, sonusTgName=sonusTgName, sonusTgProfileObjects=sonusTgProfileObjects, sonusTgSgTable=sonusTgSgTable, sonusTgAccCurrentACL=sonusTgAccCurrentACL, sonusTgMaxRpcLpcs=sonusTgMaxRpcLpcs, sonusTrunkGroupResourcesMIBNotificationsObjects=sonusTrunkGroupResourcesMIBNotificationsObjects, sonusTgPstnOutboundUsage=sonusTgPstnOutboundUsage, sonusTgIsupNode=sonusTgIsupNode, sonusTgProfCallingNumVerifyState=sonusTgProfCallingNumVerifyState, sonusGwStatusEntry=sonusGwStatusEntry, sonusTrunkInServiceNotification=sonusTrunkInServiceNotification, sonusGwStatusTable=sonusGwStatusTable, sonusTgEntry=sonusTgEntry, sonusTgProfileEntry=sonusTgProfileEntry, sonusTgMaxTrunkGroups=sonusTgMaxTrunkGroups, sonusGatewayMaxConn=sonusGatewayMaxConn, sonusTgStatusEntry=sonusTgStatusEntry, sonusGatewayType=sonusGatewayType, sonusTgProfileAdminState=sonusTgProfileAdminState, sonusCarrierCodeNetworkIdType=sonusCarrierCodeNetworkIdType, sonusCarrierCode=sonusCarrierCode, sonusTgOutgoingCallReserve=sonusTgOutgoingCallReserve, sonusTgSgEntry=sonusTgSgEntry, sonusTgOperState=sonusTgOperState, sonusGwStatusIndex=sonusGwStatusIndex, sonusGatewayIndex=sonusGatewayIndex, sonusTgLnpTranslate=sonusTgLnpTranslate, sonusTgIsupOnly=sonusTgIsupOnly, sonusTrunkGroupResourcesMIBNotificationsPrefix=sonusTrunkGroupResourcesMIBNotificationsPrefix, sonusCarrierCodeTable=sonusCarrierCodeTable, sonusTgCirResvState=sonusTgCirResvState, sonusTgStatusIndex=sonusTgStatusIndex, sonusTgProfSgSelectState=sonusTgProfSgSelectState, sonusTgProfIsupOnlyState=sonusTgProfIsupOnlyState, sonusGatewayIpAddress=sonusGatewayIpAddress, sonusCarrierObjects=sonusCarrierObjects, sonusGatewayName=sonusGatewayName, sonusTgProfileName=sonusTgProfileName, sonusGatewayTable=sonusGatewayTable, sonusTgProfileIsupNode=sonusTgProfileIsupNode, sonusTrunkDeletedNotification=sonusTrunkDeletedNotification, sonusTgTimeout=sonusTgTimeout, sonusCarrierCodeObjects=sonusCarrierCodeObjects, sonusTgMaxCics=sonusTgMaxCics, sonusTgMode=sonusTgMode, sonusCarrierCodeAdminState=sonusCarrierCodeAdminState, sonusTrunkDisabledNotification=sonusTrunkDisabledNotification, sonusTg800Translate=sonusTg800Translate, sonusDestGatewayObjects=sonusDestGatewayObjects, sonusTgPstnInboundUsage=sonusTgPstnInboundUsage, sonusTgProfileNextIndex=sonusTgProfileNextIndex, sonusTgSgIndex=sonusTgSgIndex, sonusTgNextIndex=sonusTgNextIndex, sonusTgMaxSgInstances=sonusTgMaxSgInstances, sonusCarrierCodeNetworkIdPlan=sonusCarrierCodeNetworkIdPlan, sonusCarrierCodeIndex=sonusCarrierCodeIndex, sonusGatewayObjects=sonusGatewayObjects, sonusTgProfileIsupOnly=sonusTgProfileIsupOnly, sonusTgStatusTable=sonusTgStatusTable, sonusGatewayPortNum=sonusGatewayPortNum, sonusTgMaxCarrierCodes=sonusTgMaxCarrierCodes, sonusCarrierCodeName=sonusCarrierCodeName, sonusDestGatewayStatusObjects=sonusDestGatewayStatusObjects, sonusTgObjects=sonusTgObjects, sonusTgSgName=sonusTgSgName, sonusTrunkEnabledNotification=sonusTrunkEnabledNotification, sonusGatewayProfName=sonusGatewayProfName, sonusTgInboundReserved=sonusTgInboundReserved, sonusTgProfileInboundReserved=sonusTgProfileInboundReserved, sonusGatewayRowStatus=sonusGatewayRowStatus, sonusTgProfLnpTranslateState=sonusTgProfLnpTranslateState, sonusTgMaxServiceGroups=sonusTgMaxServiceGroups, sonusTgAction=sonusTgAction, sonusTgProfileCallingNumVerify=sonusTgProfileCallingNumVerify, sonusTgIndex=sonusTgIndex, sonusTgTable=sonusTgTable)
