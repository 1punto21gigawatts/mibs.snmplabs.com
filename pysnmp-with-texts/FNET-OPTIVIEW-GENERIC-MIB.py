#
# PySNMP MIB module FNET-OPTIVIEW-GENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FNET-OPTIVIEW-GENERIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
fnetOptiViewGeneric, = mibBuilder.importSymbols("FNET-GLOBAL-REG", "fnetOptiViewGeneric")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter32, Gauge32, TimeTicks, ObjectIdentity, IpAddress, MibIdentifier, Unsigned32, Counter64, NotificationType, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter32", "Gauge32", "TimeTicks", "ObjectIdentity", "IpAddress", "MibIdentifier", "Unsigned32", "Counter64", "NotificationType", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class OvTrapSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("inform", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5))

class OvTrapStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("discovered", 1), ("resolved", 2))

ovStdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1))
ovTrapAgentSysName = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: ovTrapAgentSysName.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapAgentSysName.setDescription('The System Group name or best name of the agent that generated the trap.')
ovTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 2), OvTrapSeverity())
if mibBuilder.loadTexts: ovTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapSeverity.setDescription('Alarm severity information delivered with the trap. Values are critical, major, minor, warning and informational.')
ovTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 3), OvTrapStatus())
if mibBuilder.loadTexts: ovTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapStatus.setDescription('Status of the problem being reported. Values are discovered and resolved.')
ovTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: ovTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapDescription.setDescription('The alarm description. Probably the same string as what is shown in the problem log.')
ovTrapOffenderName = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: ovTrapOffenderName.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapOffenderName.setDescription('The best name (MAC, IP, DNS or SNMP) of the host that the alarm message is associated to.')
ovTrapOffenderNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: ovTrapOffenderNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapOffenderNetAddr.setDescription('The network address (IP, IPX, NETBIOS DOMAIN) of the host that the alarm message is associated to.')
ovTrapOffenderPhyAddr = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: ovTrapOffenderPhyAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ovTrapOffenderPhyAddr.setDescription('The MAC address of the host that the alarm message is associated to.')
ovTrapOffenderSubId = MibScalar((1, 3, 6, 1, 4, 1, 1226, 2, 1, 1, 8), Integer32())
if mibBuilder.loadTexts: ovTrapOffenderSubId.setStatus('optional')
if mibBuilder.loadTexts: ovTrapOffenderSubId.setDescription('A secondary key to identify the problem instance. This is used when more than one problem of the SAME type can occur on the SAME offender. For example, some problems occur on a particular interface of an offender host. In this case, an NMS station can use the offender information along with this SubId to track the problem. The identifier is arbitrary and managed by the agent.')
ovProbDupIp = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,1)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderPhyAddr"))
if mibBuilder.loadTexts: ovProbDupIp.setDescription('The SNMP trap that is generated when a duplicate IP is detected and generates an event that is configured for sending SNMP traps.')
probBadMask = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,2)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probBadMask.setDescription('Incorrect subnet mask.')
ovProbBadDefRouter = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,3)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: ovProbBadDefRouter.setDescription('Default router not responding.')
probLoneIp = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,4)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probLoneIp.setDescription('Lone ranger IP subnet.')
probLoneNbDomain = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,5)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probLoneNbDomain.setDescription('Lone ranger NetBIOS domain.')
probLoneIpxNet = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,6)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probLoneIpxNet.setDescription('Lone ranger IPX network.')
probLoneIpxType = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,7)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probLoneIpxType.setDescription('Lone ranger IPX encaps for a network.')
probKeyDevNoResp = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,8)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probKeyDevNoResp.setDescription('Key Device not responding.')
probReboot = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,9)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probReboot.setDescription('ThisOptiview has powered on or rebooted. (ovTrapSeverity = inform)')
probRerunTest = NotificationType((1, 3, 6, 1, 4, 1, 1226, 2, 1) + (0,10)).setObjects(("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapAgentSysName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapSeverity"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapStatus"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapDescription"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderName"), ("FNET-OPTIVIEW-GENERIC-MIB", "ovTrapOffenderNetAddr"))
if mibBuilder.loadTexts: probRerunTest.setDescription('A user has cleared historical data and started a new test. (ovTrapSeverity = inform)')
mibBuilder.exportSymbols("FNET-OPTIVIEW-GENERIC-MIB", ovTrapOffenderPhyAddr=ovTrapOffenderPhyAddr, OvTrapStatus=OvTrapStatus, ovTrapOffenderSubId=ovTrapOffenderSubId, ovTrapOffenderName=ovTrapOffenderName, ovProbDupIp=ovProbDupIp, ovStdTraps=ovStdTraps, ovTrapAgentSysName=ovTrapAgentSysName, ovTrapOffenderNetAddr=ovTrapOffenderNetAddr, ovTrapSeverity=ovTrapSeverity, probRerunTest=probRerunTest, probReboot=probReboot, probLoneNbDomain=probLoneNbDomain, probLoneIpxNet=probLoneIpxNet, probLoneIpxType=probLoneIpxType, ovProbBadDefRouter=ovProbBadDefRouter, OvTrapSeverity=OvTrapSeverity, ovTrapDescription=ovTrapDescription, ovTrapStatus=ovTrapStatus, probKeyDevNoResp=probKeyDevNoResp, probLoneIp=probLoneIp, probBadMask=probBadMask)
