#
# PySNMP MIB module CISCO-ATM-VIRTUAL-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-VIRTUAL-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
AtmVpIdentifier, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Unsigned32, Integer32, Bits, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ObjectIdentity, NotificationType, ModuleIdentity, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "Integer32", "Bits", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType", "ModuleIdentity", "MibIdentifier", "TimeTicks")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
ciscoAtmVirtualIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 129))
ciscoAtmVirtualIfMIB.setRevisions(('2002-10-11 00:00', '2002-05-07 00:00', '2001-09-03 00:00', '2000-08-11 00:00', '2000-01-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmVirtualIfMIB.setRevisionsDescriptions(('1. Added caviIngressIntervalTable. ', '1. Added following objects to caviStatEgressTable, as upper 32-bits for 64-bit wide counters: caviHighEgrRcvClp0Cells, caviHighEgrRcvClp1Cells, caviHighEgrClp0DiscCells, caviHighEgrClp1DiscCells, caviHighEgrXmtClp0Cells, caviHighEgrXmtClp1Cells. 2. Added following 64-bit objects to caviStatEgressTable for 64-bit counter support: caviHEgrRcvClp0Cells, caviHEgrClp0DiscCells, caviHEgrClp0DiscCells, caviHEgrClp1DiscCells. 3. Added following objects to caviEgressIntervalTable, as upper 32-bits for 64-bit wide counters: caviHighIntEgrRcvClp0Cells, caviHighIntEgrRcvClp1Cells, caviHighIntEgrClp0DiscCells, caviHighIntEgrClp1DiscCells, caviHighIntEgrXmtClp0Cells, caviHighIntEgrXmtClp1Cells. 4. Added following 64-bit objects to caviEgressIntervalTable: caviHIntEgrRcvClp0Cells, caviHIntEgrRcvClp1Cells, caviHIntEgrClp0DiscCells, caviHIntEgrClp1DiscCells, caviHIntEgrXmtClp0Cells, caviHIntEgrXmtClp1Cells. 5. Added following objects to caviStatIngressTable, as upper 32-bits for 64-bit wide counters: caviHighIngRcvClp0Cells, caviHighIngRcvClp1Cells, caviHighIngClp0DiscCells, caviHighIngClp1DiscCells, caviHighIngXmtClp0Cells, caviHighIngXmtClp1Cells. 6. Added following 64-bit objects to caviStatIngressTable: caviHIngClp0DiscCells, caviHIngClp1DiscCells, caviHIngXmtClp0Cells, caviHIngXmtClp1Cells. 7. Changed IMPORT for Unsigned32 to SNMPv2-SMI, instead of CISCO-TC.', 'Added caviMinVpiNum and caviMaxVpiNum. Modified description for caviEntry and caviIfType.', 'Changed description of objects caviMinRate and caviMaxRate. Modified range for caviMinRate, caviMaxRate and caviFileId.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAtmVirtualIfMIB.setLastUpdated('200210110000Z')
if mibBuilder.loadTexts: ciscoAtmVirtualIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmVirtualIfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmVirtualIfMIB.setDescription('The MIB module to manage ATM Virtual interface objects. ATM virtual interfaces are configured on a physical line.')
ciscoAtmVirtualIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 129, 1))
caviConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1))
caviStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2))
caviTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1), )
if mibBuilder.loadTexts: caviTable.setStatus('current')
if mibBuilder.loadTexts: caviTable.setDescription('This table is used for creating ATM virtual Interfaces. The ATM virtual interfaces are created on physical interfaces. For each entry created in this table, there will be an entry created in the ifTable with ifType atmVirtual(149). For each entry deleted from this table, the corresponding entry from ifTable will be deleted. The ifIndex value for ifType atmVirtual(149) is used for indexing to atmInterfaceConfTable for getting information on a ATM virtual interface.')
caviEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ATM-VIRTUAL-IF-MIB", "caviIndex"))
if mibBuilder.loadTexts: caviEntry.setStatus('current')
if mibBuilder.loadTexts: caviEntry.setDescription('An entry in the caviTable table for each ATM virtual interface. An entry in this table can only be created if values for all objects in a row are provided. The caviVpiNum object is applicable only to interfaces of caviIfType vnni (3) or vuni (4). The caviMinVpiNum and caviMaxVpiNum are applicable only to interfaces of caviIfType evuni(5) or evnni(6).')
caviIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: caviIndex.setStatus('current')
if mibBuilder.loadTexts: caviIndex.setDescription('A unique value for the ATM virtual interface.')
caviPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviPhyIfIndex.setStatus('current')
if mibBuilder.loadTexts: caviPhyIfIndex.setDescription("This object identifies the interface number ( 'ifIndex' ) assigned to sonet(39),ds3(30),ds1(18),atmIma(107).")
caviViIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviViIfIndex.setStatus('current')
if mibBuilder.loadTexts: caviViIfIndex.setDescription("This object identifies the ATM virtual interface number ('ifIndex') assigned to this entry, and is used to identify corresponding rows in the IF-MIB. Note that re-inititalization of the management agent may cause a client's 'caviViIfIndex' to change.")
caviMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 4), Unsigned32()).setUnits('cells-per-second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviMinRate.setStatus('current')
if mibBuilder.loadTexts: caviMinRate.setDescription("ATM virtual interface's guaranteed cell rate. This is the guaranteed bandwidth allocated for the interface. The sum of caviMinRate of all ATM virtual interfaces configured on a single physical line, must not exceed the bandwidth of the physical line. Creation of a row is rejected when the sum of caviMinRate of all existing ATM virtual interfaces exceeds the physical line bandwidth. The value of this object can't exceed the 'ifSpeed' or 'ifHighSpeed' value in ifTable for the associated 'caviPhyIfIndex'. ATM cell bandwidths for various physical lines are: OC192 line : 22605280 cells/sec OC48 line : 5651320 cells/sec OC12 line : 1412830 cells/sec OC3 line : 353207 cells/sec T3 line : 96000 cells/sec E3 line : 80000 cells/sec.")
caviMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 5), Unsigned32()).setUnits('cells-per-second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviMaxRate.setStatus('current')
if mibBuilder.loadTexts: caviMaxRate.setDescription("ATM virtual interface's maximum cell rate. If bandwidth is available, the interface will be allocated bandwidth upto this value. The total bandwidth of connections configured over this interface cannot exceed this value. The value of this object can't exceed the 'ifSpeed' or 'ifHighSpeed' value in ifTable for the associated 'caviPhyIfIndex'. ATM cell bandwidths for various physical lines are: OC192 line : 22605280 cells/sec OC48 line : 5651320 cells/sec OC12 line : 1412830 cells/sec OC3 line : 353207 cells/sec T3 line : 96000 cells/sec E3 line : 80000 cells/sec.")
caviFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviFileId.setStatus('current')
if mibBuilder.loadTexts: caviFileId.setDescription('The ID of the file that holds module specific configuration parameters for this ATM virtual interface.')
caviIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2), ("vnni", 3), ("vuni", 4), ("evuni", 5), ("evnni", 6))).clone('uni')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviIfType.setStatus('current')
if mibBuilder.loadTexts: caviIfType.setDescription('This object reflects the type of ATM virtual interface that can be configured within a physical interface. The supported types of virtual interfaces and their description is shown below: uni : Only one virtual interface of uni type can be configured within a physical interface. The ATM cells used in this interface would use a 8 bit VPI and a 4 bit GFC. nni : Only one virtual interface of nni type can be configured within a physical interface.The ATM cells used in this interface would use a 12 bit VPI. vnni: Multiple virtual interfaces of vnni type can be configured within a physical interface. However, all cells sent on this interface belong to a single VPI (defined by caviVpiNum) and the cells use a 12 bit VPI. vuni: Multiple virtual interfaces of vuni type can be configured within a physical interface. However, all cells sent on this interface belong to a single VPI (defined by caviVpiNum) and the cells use a 8 bit VPI and a 4 bit GFC. evuni: Multiple virtual interfaces of evuni type can be configured within a physical interface. However, all cells sent on this interface belong to a range of VPI (defined by caviMinVpiNum & caviMaxVpiNum) and the cells use a 8 bit VPI and a 4 bit GFC. evnni: Multiple virtual interfaces of evuni type can be configured within a physical interface. However, all cells sent on this interface belong to a range of VPI (defined by caviMinVpiNum & caviMaxVpiNum) and the cells use a 12 bit VPI.')
caviVpiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 8), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviVpiNum.setStatus('current')
if mibBuilder.loadTexts: caviVpiNum.setDescription('This object is used when configuring ATM virtual interfaces of caviIftype vuni(4) or vnni (3). A non-zero value is required for vuni / vnni operation. The value set in this object for other type of caviIfTypes would be ignored by the agent. The GET operation on this object would return 0 for caviIfTypes other than vuni/vnni.')
caviRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviRowStatus.setStatus('current')
if mibBuilder.loadTexts: caviRowStatus.setDescription('This object allows create and delete operations on caviTable entries. An entry is created in the table by setting this object to createAndGo(4). An entry is deleted from the table by setting this object to destroy(6). An entry in this table may be modified after creation.')
caviMinVpiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 10), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviMinVpiNum.setStatus('current')
if mibBuilder.loadTexts: caviMinVpiNum.setDescription('This object is mandatory while configuring this ATM virtual interface as caviIfType evuni(5) or evnni(6). The range of VPI accepted by the agent depends on caviIfType. The evuni accepts a range from 0 to 255, while the evnni accepts a range from 0 to 4095. The object specifies the minimum VPI for a evuni/evnni interface. The agent ignores a SET on this object for any interface other than a evuni/evnni. A GET operation for interfaces other than a evuni/evnni would always yield 0')
caviMaxVpiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 1, 1, 1, 11), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: caviMaxVpiNum.setStatus('current')
if mibBuilder.loadTexts: caviMaxVpiNum.setDescription('This object is mandatory while configuring this ATM virtual interface as caviIfType evuni(5) or evnni(6). The range of VPI accepted by the agent depends on caviIfType. The evuni accepts a range from 0 to 255, while the evnni accepts a range from 0 to 4095. The agent rejects a SET on this object for any interface other than a evuni/evnni. A GET operation for interfaces other than a evuni/evnni would always yield 0')
caviStatEgressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1), )
if mibBuilder.loadTexts: caviStatEgressTable.setStatus('current')
if mibBuilder.loadTexts: caviStatEgressTable.setDescription('This table reflects real time statistics associated with each of the ATM virtual interfaces on the egress side. Ingress direction means coming from network into switch, Egress direction means going from switch into the network.')
caviStatEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caviStatEgressEntry.setStatus('current')
if mibBuilder.loadTexts: caviStatEgressEntry.setDescription('An entry for egress ATM virtual interface statistics. In all the following descriptions, CLP-0 means Cell Loss Priority = 0, CLP-1 means Cell Loss Priority = 1. Statistics are being collected before and after the traffic management and policing device.')
caviEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviEgrRcvClp0Cells.setDescription('The number of CLP-0 cells received from switch at the traffic management and policing device.')
caviEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviEgrRcvClp1Cells.setDescription('The number of CLP-1 cells received from switch at the traffic management and policing device.')
caviEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviEgrClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing.')
caviEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviEgrClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing.')
caviEgrXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviEgrXmtClp0Cells.setDescription('The number of CLP-0 cells transmitted to the network after traffic management and policing.')
caviEgrXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviEgrXmtClp1Cells.setDescription('The number of CLP-1 cells transmitted to the network after traffic management and policing.')
caviEgrRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviEgrRcvOAMCells.setDescription('The number of OAM cells received from the switch at the traffic management and policing device.')
caviEgrRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrRMCells.setStatus('current')
if mibBuilder.loadTexts: caviEgrRMCells.setDescription('The number of RM cells transmitted to the network from the switch.')
caviEgrXmtEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrXmtEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviEgrXmtEFCICells.setDescription('The number of EFCI cells transmitted to the network after traffic management and policing.')
caviEgrRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviEgrRcvEFCICells.setDescription('The number of EFCI cells received from the switch at traffic management and policing device.')
caviEgrXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgrXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviEgrXmtOAMCells.setDescription('The number of OAM loopback cells transmitted to network after traffic management and policing.')
caviHEgrXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHEgrXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHEgrXmtClp0Cells.setDescription('The 64-bit version of caviEgrXmtClp0Cells.')
caviHEgrXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHEgrXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHEgrXmtClp1Cells.setDescription('The 64-bit version of caviEgrXmtClp1Cells.')
caviHighEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighEgrRcvClp0Cells.setDescription('The Upper 32 bit of the number of CLP-0 cells received from switch at the traffic management and policing device.')
caviHighEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighEgrRcvClp1Cells.setDescription('The Upper 32 bit of the number of CLP-1 cells received from switch at the traffic management and policing device.')
caviHighEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighEgrClp0DiscCells.setDescription('The Upper 32 bit of the number of CLP-0 cells discarded due to policing.')
caviHighEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighEgrClp1DiscCells.setDescription('The Upper 32 bit of the number of CLP-1 cells discarded due to policing.')
caviHighEgrXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighEgrXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighEgrXmtClp0Cells.setDescription('The Upper 32 bit of the number of CLP-0 cells transmitted to the network after traffic management and policing.')
caviHighEgrXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighEgrXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighEgrXmtClp1Cells.setDescription('The Upper 32 bit of the number of CLP-1 cells transmitted to the network after traffic management and policing.')
caviHEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHEgrRcvClp0Cells.setDescription('The 64 bit version of the number of CLP-0 cells received from switch at the traffic management and policing device.')
caviHEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHEgrRcvClp1Cells.setDescription('The 64 bit version of the number of CLP-1 cells received from switch at the traffic management and policing device.')
caviHEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHEgrClp0DiscCells.setDescription('The 64 bit version of the number of CLP-0 cells discarded due to policing.')
caviHEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHEgrClp1DiscCells.setDescription('The 64 bit version of the number of CLP-1 cells discarded due to policing.')
caviEgressIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2), )
if mibBuilder.loadTexts: caviEgressIntervalTable.setStatus('current')
if mibBuilder.loadTexts: caviEgressIntervalTable.setDescription('This table reflects interval statistics associated with each of the ATM virtual interfaces in egress direction.')
caviEgressIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalNumber"))
if mibBuilder.loadTexts: caviEgressIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: caviEgressIntervalEntry.setDescription('An entry for egress ATM virtual interface interval statistics. In addition to the current 15-minute interval bucket, the previous 24 hours worth of 15-minute interval buckets are collected for each ATM virtual interface. Statistics are being collected before and after the traffic management and policing device, in egress direction.')
caviEgressIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviEgressIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: caviEgressIntervalNumber.setDescription("A number used to uniquely identify a ATM virtual interface's interval statistics. 0 is used to identify the current 15-minute interval. 1-96 identify the previous 24 hours of 15-minute interval buckets.")
caviIntEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrRcvClp0Cells.setDescription('The number of CLP-0 cells received from switch at the traffic management and policing device during a 15 minute interval.')
caviIntEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrRcvClp1Cells.setDescription('The number of CLP-1 cells received from switch at the traffic management and policing device during a 15 minute interval.')
caviIntEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing during a 15 minute interval.')
caviIntEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing during a 15 minute interval.')
caviIntEgrXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrXmtClp0Cells.setDescription('The number of CLP-0 cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviIntEgrXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrXmtClp1Cells.setDescription('The number of CLP-1 cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviIntEgrRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrRcvOAMCells.setDescription('The number of OAM cells received from the switch at the traffic management and policing device during a 15 minute interval.')
caviIntEgrRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrRMCells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrRMCells.setDescription('The number of RM cells transmitted to the network from the switch during a 15 minute interval.')
caviIntEgrXmtEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrXmtEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrXmtEFCICells.setDescription('The number of EFCI cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviIntEgrRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrRcvEFCICells.setDescription('The number of EFCI cells received from the switch at traffic management and policing device during a 15 minute interval.')
caviIntEgrXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntEgrXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviIntEgrXmtOAMCells.setDescription('The number of OAM loopback cells transmitted to network after traffic management and policing during a 15 minute interval.')
caviHighIntEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntEgrRcvClp0Cells.setDescription('The upper 32 bits of the number of CLP-0 cells received from switch at the traffic management and policing device during a 15 minute interval.')
caviHighIntEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntEgrRcvClp1Cells.setDescription('The upper 32 bits of the number of CLP-1 cells received from switch at the traffic management and policing device during a 15 minute interval.')
caviHighIntEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntEgrClp0DiscCells.setDescription('The upper 32 bits of the number of CLP-0 cells discarded due to policing during a 15 minute interval.')
caviHighIntEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntEgrClp1DiscCells.setDescription('The upper 32 bits of the number of CLP-1 cells discarded due to policing during a 15 minute interval.')
caviHighIntEgrXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntEgrXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntEgrXmtClp0Cells.setDescription('The upper 32 bits of the number of CLP-0 cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviHighIntEgrXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntEgrXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntEgrXmtClp1Cells.setDescription('The upper 32 bits of the number of CLP-1 cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviHIntEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntEgrRcvClp0Cells.setDescription('The 64 bit version of the number of CLP-0 cells received from switch at the traffic management and policing device during a 15 minute interval.')
caviHIntEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntEgrRcvClp1Cells.setDescription('The 64 bit version of the number of CLP-1 cells received from switch at the traffic management and policing device during a 15 minute interval.')
caviHIntEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHIntEgrClp0DiscCells.setDescription('The 64 bit version of the number of CLP-0 cells discarded due to policing during a 15 minute interval.')
caviHIntEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHIntEgrClp1DiscCells.setDescription('The 64 bit version of the number of CLP-1 cells discarded due to policing during a 15 minute interval.')
caviHIntEgrXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntEgrXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntEgrXmtClp0Cells.setDescription('The 64 bit version of the number of CLP-0 cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviHIntEgrXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntEgrXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntEgrXmtClp1Cells.setDescription('The 64 bit version of the number of CLP-1 cells transmitted to the network after traffic management and policing during a 15 minute interval.')
caviStatIngressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3), )
if mibBuilder.loadTexts: caviStatIngressTable.setStatus('current')
if mibBuilder.loadTexts: caviStatIngressTable.setDescription('This table reflects real time statistics associated with each of the ATM virtual interfaces on the ingress side.')
caviStatIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caviStatIngressEntry.setStatus('current')
if mibBuilder.loadTexts: caviStatIngressEntry.setDescription('An entry for egress ATM virtual interface statistics. In all the following descriptions, CLP-0 means Cell Loss Priority = 0, CLP-1 means Cell Loss Priority = 1. Statistics are being collected before and after the traffic management and policing device.')
caviIngRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviIngRcvClp0Cells.setDescription('The number of CLP-0 cells received from network at the traffic management and policing device in ingress direction.')
caviIngRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviIngRcvClp1Cells.setDescription('The number of CLP-1 cells received from network at the traffic management and policing device in ingress direction.')
caviIngClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviIngClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing in ingress direction.')
caviIngClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviIngClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing in ingress direction.')
caviIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviIngXmtClp0Cells.setDescription('The number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction.')
caviIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviIngXmtClp1Cells.setDescription('The number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction.')
caviIngRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviIngRcvOAMCells.setDescription('The number of OAM cells received from the network at the traffic management and policing device in ingress direction.')
caviIngRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngRMCells.setStatus('current')
if mibBuilder.loadTexts: caviIngRMCells.setDescription('The number of RM cells transmitted to the switch from the network in ingress direction.')
caviIngXmtEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngXmtEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviIngXmtEFCICells.setDescription('The number of EFCI cells transmitted to the switch after traffic management and policing in ingress direction.')
caviIngRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviIngRcvEFCICells.setDescription('The number of EFCI cells received from the network at traffic management and policing device in ingress direction.')
caviIngXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIngXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviIngXmtOAMCells.setDescription('The number of OAM loopback cells transmitted to switch after traffic management and policing in ingress direction.')
caviHIngRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIngRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIngRcvClp0Cells.setDescription('The 64-bit version of caviIngRcvClp0Cells in ingress direction.')
caviHIngRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIngRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIngRcvClp1Cells.setDescription('The 64-bit version of caviIngRcvClp1Cells in ingress direction.')
caviHighIngRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIngRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIngRcvClp0Cells.setDescription('The upper 32 bits of the number of CLP-0 cells received from network at the traffic management and policing device in ingress direction.')
caviHighIngRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIngRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIngRcvClp1Cells.setDescription('The upper 32 bits of the number of CLP-1 cells received from network at the traffic management and policing device in ingress direction.')
caviHighIngClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIngClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighIngClp0DiscCells.setDescription('The upper 32 bits of the number of CLP-0 cells discarded due to policing in ingress direction.')
caviHighIngClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIngClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighIngClp1DiscCells.setDescription('The upper 32 bits of the number of CLP-1 cells discarded due to policing in ingress direction.')
caviHighIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIngXmtClp0Cells.setDescription('The upper 32 bits of the number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction.')
caviHighIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIngXmtClp1Cells.setDescription('The upper 32 bits of the number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction.')
caviHIngClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIngClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHIngClp0DiscCells.setDescription('The 64 bit version of the number of CLP-0 cells discarded due to policing in ingress direction.')
caviHIngClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIngClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHIngClp1DiscCells.setDescription('The 64 bit version of the number of CLP-1 cells discarded due to policing in ingress direction.')
caviHIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIngXmtClp0Cells.setDescription('The 64 bit version of the number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction.')
caviHIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIngXmtClp1Cells.setDescription('The 64 bit version of the number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction.')
caviIngressIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4), )
if mibBuilder.loadTexts: caviIngressIntervalTable.setStatus('current')
if mibBuilder.loadTexts: caviIngressIntervalTable.setDescription('This table reflects interval statistics associated with each of the ATM virtual interfaces on the ingress side.')
caviIngressIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressIntervalNumber"))
if mibBuilder.loadTexts: caviIngressIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: caviIngressIntervalEntry.setDescription('An entry for ingress ATM virtual interface interval statistics. In addition to the current 15-minute interval bucket, the previous 24 hours worth of 15-minute interval buckets are collected for each ATM virtual interface. Statistics are being collected before and after the traffic management and policing device, in ingress direction.')
caviIngressIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96)))
if mibBuilder.loadTexts: caviIngressIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: caviIngressIntervalNumber.setDescription("A number used to uniquely identify a ATM virtual interface's interval statistics. 0 is used to identify the current 15-minute interval, which is currently being updated. 1-96 identify the previous 24 hours of 15-minute interval buckets, where interval 1 representing the most recent 15-minute interval and interval 96 representing the least recent 15-minute interval")
caviIntIngRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngRcvClp0Cells.setDescription('The number of CLP-0 cells received from network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviIntIngRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngRcvClp1Cells.setDescription('The number of CLP-1 cells received from network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviIntIngClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing in ingress direction, during a 15-minute interval.')
caviIntIngClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing in ingress direction, during a 15-minute interval .')
caviIntIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngXmtClp0Cells.setDescription('The number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviIntIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngXmtClp1Cells.setDescription('The number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviIntIngRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngRcvOAMCells.setDescription('The number of OAM cells received from the network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviIntIngRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngRMCells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngRMCells.setDescription('The number of RM cells transmitted to the switch from the network in ingress direction, during a 15-minute interval.')
caviIntIngXmtEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngXmtEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngXmtEFCICells.setDescription('The number of EFCI cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviIntIngRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngRcvEFCICells.setDescription('The number of EFCI cells received from the network at traffic management and policing device in ingress direction, during a 15-minute interval.')
caviIntIngXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviIntIngXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: caviIntIngXmtOAMCells.setDescription('The number of OAM loopback cells transmitted to switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviHighIntIngRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntIngRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntIngRcvClp0Cells.setDescription('The upper 32 bits of the number of CLP-0 cells received from network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviHighIntIngRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntIngRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntIngRcvClp1Cells.setDescription('The upper 32 bits of the number of CLP-1 cells received from network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviHighIntIngClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntIngClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntIngClp0DiscCells.setDescription('The upper 32 bits of the number of CLP-0 cells discarded due to policing in ingress direction, during a 15-minute interval.')
caviHighIntIngClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntIngClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntIngClp1DiscCells.setDescription('The upper 32 bits of the number of CLP-1 cells discarded due to policing in ingress direction, during a 15-minute interval.')
caviHighIntIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntIngXmtClp0Cells.setDescription('The upper 32 bits of the number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviHighIntIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHighIntIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHighIntIngXmtClp1Cells.setDescription('The upper 32 bits of the number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviHIntIngRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntIngRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntIngRcvClp0Cells.setDescription('The 64-bit version of the number of CLP-0 cells received from network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviHIntIngRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntIngRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntIngRcvClp1Cells.setDescription('The 64-bit version of the number of CLP-1 cells received from network at the traffic management and policing device in ingress direction, during a 15-minute interval.')
caviHIntIngClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntIngClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHIntIngClp0DiscCells.setDescription('The 64 bit version of the number of CLP-0 cells discarded due to policing in ingress direction, during a 15-minute interval.')
caviHIntIngClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntIngClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: caviHIntIngClp1DiscCells.setDescription('The 64 bit version of the number of CLP-1 cells discarded due to policing in ingress direction, during a 15-minute interval.')
caviHIntIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntIngXmtClp0Cells.setDescription('The 64 bit version of the number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviHIntIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 129, 1, 2, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caviHIntIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: caviHIntIngXmtClp1Cells.setDescription('The 64 bit version of the number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction, during a 15-minute interval.')
caviMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 129, 3))
caviMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 1))
caviMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2))
caviMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 1, 1)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressStatMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressHighSpeedStatMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressStatMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressHighSpeedStatMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviMIBCompliance = caviMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: caviMIBCompliance.setDescription('The Compliance statement for cisco AtmVirtualIf management group.')
caviMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 1, 2)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviMIBGroupRev1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressStatMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressHighSpeedStatMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressStatMIBGroup"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressHighSpeedStatMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviMIBComplianceRev1 = caviMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: caviMIBComplianceRev1.setDescription('Compliance statement for cisco AtmVirtualIf management group with support for virtual user and network ports')
caviMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 1, 3)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviMIBGroupRev1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressStatMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressHighSpeedStatMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressStatMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngHighSpeedStatMIBGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviMIBComplianceRev2 = caviMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: caviMIBComplianceRev2.setDescription('Compliance statement for cisco AtmVirtualIf management group with support for virtual user and network ports')
caviMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 1, 4)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviMIBGroupRev1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressStatMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressHighSpeedStatMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressStatMIBGroup1"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngHighSpeedStatMIBGroup2"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngressIntervalStatMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviMIBComplianceRev3 = caviMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: caviMIBComplianceRev3.setDescription('Compliance statement for cisco AtmVirtualIf management group with support for virtual user and network ports')
caviMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 1)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviPhyIfIndex"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviViIfIndex"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviMinRate"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviMaxRate"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviFileId"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIfType"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviVpiNum"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviMIBGroup = caviMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caviMIBGroup.setDescription('These are objects related to ciscoAtmVirtualIf configuration group.')
caviEgressStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 2)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviEgressStatMIBGroup = caviEgressStatMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caviEgressStatMIBGroup.setDescription('These are objects related to the ATM virtual interface statistics group caviStatistics.')
caviEgressHighSpeedStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 3)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviEgressHighSpeedStatMIBGroup = caviEgressHighSpeedStatMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caviEgressHighSpeedStatMIBGroup.setDescription('These statistics apply to ingress ATM virtual interfaces with speed of OC12 or higher.')
caviEgressIntervalMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 4)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalNumber"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviEgressIntervalMIBGroup = caviEgressIntervalMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caviEgressIntervalMIBGroup.setDescription('These are objects related to the ATM virtual interface interval statistics group.')
caviIngressStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 5)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviIngressStatMIBGroup = caviIngressStatMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caviIngressStatMIBGroup.setDescription('These are objects related to the ingress ATM virtual interface statistics.')
caviIngressHighSpeedStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 6)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngRcvClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviIngressHighSpeedStatMIBGroup = caviIngressHighSpeedStatMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caviIngressHighSpeedStatMIBGroup.setDescription('These statistics apply to ingress ATM virtual interfaces with speed of OC12 or higher.')
caviMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 7)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviPhyIfIndex"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviViIfIndex"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviMinRate"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviMaxRate"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviFileId"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIfType"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviVpiNum"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviRowStatus"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviMinVpiNum"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviMaxVpiNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviMIBGroupRev1 = caviMIBGroupRev1.setStatus('current')
if mibBuilder.loadTexts: caviMIBGroupRev1.setDescription('Definition of additional objects caviMinVpiNum and caviMaxVpiNum, which are required to support the evuni and evnni functionality.')
caviEgressStatMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 8)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgrXmtOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighEgrXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviEgressStatMIBGroup1 = caviEgressStatMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caviEgressStatMIBGroup1.setDescription('These are objects related to the ATM virtual interface statistics group caviStatistics.')
caviEgressHighSpeedStatMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 9)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntEgrXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviEgressHighSpeedStatMIBGroup1 = caviEgressHighSpeedStatMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caviEgressHighSpeedStatMIBGroup1.setDescription('These statistics apply to ingress ATM virtual interfaces with speed of OC12 or higher.')
caviEgressIntervalMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 10)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviEgressIntervalNumber"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntEgrXmtOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntEgrRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntEgrRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntEgrClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntEgrClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntEgrXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntEgrXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviEgressIntervalMIBGroup1 = caviEgressIntervalMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caviEgressIntervalMIBGroup1.setDescription('These are objects related to the ATM virtual interface interval statistics group.')
caviIngressStatMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 11)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIngXmtOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIngXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviIngressStatMIBGroup1 = caviIngressStatMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caviIngressStatMIBGroup1.setDescription('These are objects related to the ingress ATM virtual interface statistics.')
caviIngHighSpeedStatMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 12)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviIngHighSpeedStatMIBGroup1 = caviIngHighSpeedStatMIBGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: caviIngHighSpeedStatMIBGroup1.setDescription('These statistics apply to ingress ATM virtual interfaces with speed of OC12 or higher.')
caviIngressIntervalStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 13)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngRcvOAMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngRMCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngXmtEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngRcvEFCICells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviIntIngXmtOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviIngressIntervalStatMIBGroup = caviIngressIntervalStatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: caviIngressIntervalStatMIBGroup.setDescription('These are objects related to the ingress ATM virtual interface statistics.')
caviIngHighSpeedStatMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 129, 3, 2, 14)).setObjects(("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHighIntIngXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIngXmtClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntIngRcvClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntIngRcvClp1Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntIngClp0DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntIngClp1DiscCells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntIngXmtClp0Cells"), ("CISCO-ATM-VIRTUAL-IF-MIB", "caviHIntIngXmtClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caviIngHighSpeedStatMIBGroup2 = caviIngHighSpeedStatMIBGroup2.setStatus('current')
if mibBuilder.loadTexts: caviIngHighSpeedStatMIBGroup2.setDescription('These statistics apply to ingress ATM virtual interfaces with speed of OC12 or higher.')
mibBuilder.exportSymbols("CISCO-ATM-VIRTUAL-IF-MIB", caviEgrXmtClp1Cells=caviEgrXmtClp1Cells, caviIntIngRcvClp1Cells=caviIntIngRcvClp1Cells, caviEgrClp1DiscCells=caviEgrClp1DiscCells, caviEgressIntervalMIBGroup=caviEgressIntervalMIBGroup, caviIntIngRcvEFCICells=caviIntIngRcvEFCICells, caviEgrXmtOAMCells=caviEgrXmtOAMCells, caviIntEgrXmtOAMCells=caviIntEgrXmtOAMCells, caviEgrRcvEFCICells=caviEgrRcvEFCICells, caviHighIntIngXmtClp0Cells=caviHighIntIngXmtClp0Cells, caviEgrClp0DiscCells=caviEgrClp0DiscCells, caviIngClp1DiscCells=caviIngClp1DiscCells, caviHEgrRcvClp0Cells=caviHEgrRcvClp0Cells, caviIntEgrXmtEFCICells=caviIntEgrXmtEFCICells, caviEgressIntervalNumber=caviEgressIntervalNumber, caviIntIngRcvClp0Cells=caviIntIngRcvClp0Cells, caviHIntEgrXmtClp0Cells=caviHIntEgrXmtClp0Cells, caviHighIntEgrXmtClp0Cells=caviHighIntEgrXmtClp0Cells, caviFileId=caviFileId, caviHighIntEgrClp1DiscCells=caviHighIntEgrClp1DiscCells, caviHIntIngXmtClp1Cells=caviHIntIngXmtClp1Cells, caviStatIngressTable=caviStatIngressTable, ciscoAtmVirtualIfMIB=ciscoAtmVirtualIfMIB, caviMinRate=caviMinRate, caviIntEgrClp1DiscCells=caviIntEgrClp1DiscCells, caviEgressIntervalMIBGroup1=caviEgressIntervalMIBGroup1, caviHEgrXmtClp0Cells=caviHEgrXmtClp0Cells, caviIngressIntervalStatMIBGroup=caviIngressIntervalStatMIBGroup, caviHighIntIngRcvClp1Cells=caviHighIntIngRcvClp1Cells, caviIntEgrRMCells=caviIntEgrRMCells, caviIngRcvEFCICells=caviIngRcvEFCICells, caviMinVpiNum=caviMinVpiNum, caviHighEgrXmtClp1Cells=caviHighEgrXmtClp1Cells, caviIntEgrRcvClp1Cells=caviIntEgrRcvClp1Cells, caviHIntEgrXmtClp1Cells=caviHIntEgrXmtClp1Cells, caviIngClp0DiscCells=caviIngClp0DiscCells, caviVpiNum=caviVpiNum, caviIngressIntervalNumber=caviIngressIntervalNumber, caviRowStatus=caviRowStatus, caviHIntIngClp1DiscCells=caviHIntIngClp1DiscCells, caviIngHighSpeedStatMIBGroup1=caviIngHighSpeedStatMIBGroup1, caviEgrRcvOAMCells=caviEgrRcvOAMCells, caviIntIngXmtClp0Cells=caviIntIngXmtClp0Cells, caviIntEgrXmtClp0Cells=caviIntEgrXmtClp0Cells, caviHighIntEgrXmtClp1Cells=caviHighIntEgrXmtClp1Cells, caviMaxRate=caviMaxRate, caviIngRMCells=caviIngRMCells, caviHighIngRcvClp1Cells=caviHighIngRcvClp1Cells, caviIndex=caviIndex, caviIntIngXmtOAMCells=caviIntIngXmtOAMCells, caviMIBComplianceRev3=caviMIBComplianceRev3, caviHIntIngClp0DiscCells=caviHIntIngClp0DiscCells, caviHIntEgrClp1DiscCells=caviHIntEgrClp1DiscCells, caviIntEgrRcvOAMCells=caviIntEgrRcvOAMCells, caviStatEgressEntry=caviStatEgressEntry, caviIntEgrRcvEFCICells=caviIntEgrRcvEFCICells, caviHIntEgrRcvClp0Cells=caviHIntEgrRcvClp0Cells, caviHighIngRcvClp0Cells=caviHighIngRcvClp0Cells, caviEgrRcvClp1Cells=caviEgrRcvClp1Cells, caviHighEgrRcvClp1Cells=caviHighEgrRcvClp1Cells, caviHighIngXmtClp0Cells=caviHighIngXmtClp0Cells, caviMIBCompliances=caviMIBCompliances, caviEgressHighSpeedStatMIBGroup1=caviEgressHighSpeedStatMIBGroup1, caviMIBGroupRev1=caviMIBGroupRev1, caviHighIngXmtClp1Cells=caviHighIngXmtClp1Cells, caviHIntIngRcvClp0Cells=caviHIntIngRcvClp0Cells, caviMIBGroups=caviMIBGroups, caviHEgrRcvClp1Cells=caviHEgrRcvClp1Cells, caviHighIntIngClp1DiscCells=caviHighIntIngClp1DiscCells, caviHIngClp0DiscCells=caviHIngClp0DiscCells, caviIntEgrRcvClp0Cells=caviIntEgrRcvClp0Cells, caviEgrXmtClp0Cells=caviEgrXmtClp0Cells, PYSNMP_MODULE_ID=ciscoAtmVirtualIfMIB, caviHighIntIngRcvClp0Cells=caviHighIntIngRcvClp0Cells, caviEgressIntervalEntry=caviEgressIntervalEntry, caviHighEgrClp1DiscCells=caviHighEgrClp1DiscCells, caviStatEgressTable=caviStatEgressTable, caviHIntIngXmtClp0Cells=caviHIntIngXmtClp0Cells, caviIntEgrXmtClp1Cells=caviIntEgrXmtClp1Cells, caviHighEgrClp0DiscCells=caviHighEgrClp0DiscCells, caviHighEgrRcvClp0Cells=caviHighEgrRcvClp0Cells, caviHighEgrXmtClp0Cells=caviHighEgrXmtClp0Cells, caviHighIntEgrRcvClp1Cells=caviHighIntEgrRcvClp1Cells, caviHighIntEgrClp0DiscCells=caviHighIntEgrClp0DiscCells, caviIngressHighSpeedStatMIBGroup=caviIngressHighSpeedStatMIBGroup, caviHighIngClp0DiscCells=caviHighIngClp0DiscCells, caviConfig=caviConfig, caviEgrRcvClp0Cells=caviEgrRcvClp0Cells, caviIfType=caviIfType, caviIngXmtClp0Cells=caviIngXmtClp0Cells, caviHighIntEgrRcvClp0Cells=caviHighIntEgrRcvClp0Cells, caviHIntIngRcvClp1Cells=caviHIntIngRcvClp1Cells, caviHIngXmtClp1Cells=caviHIngXmtClp1Cells, caviIntIngClp1DiscCells=caviIntIngClp1DiscCells, caviEntry=caviEntry, caviIngXmtClp1Cells=caviIngXmtClp1Cells, caviHighIngClp1DiscCells=caviHighIngClp1DiscCells, caviIntIngClp0DiscCells=caviIntIngClp0DiscCells, caviIngressStatMIBGroup=caviIngressStatMIBGroup, caviHEgrXmtClp1Cells=caviHEgrXmtClp1Cells, caviIngressIntervalEntry=caviIngressIntervalEntry, caviViIfIndex=caviViIfIndex, caviHIngRcvClp0Cells=caviHIngRcvClp0Cells, caviMIBConformance=caviMIBConformance, caviEgrRMCells=caviEgrRMCells, caviIngRcvClp0Cells=caviIngRcvClp0Cells, caviHIngClp1DiscCells=caviHIngClp1DiscCells, caviStatistics=caviStatistics, caviPhyIfIndex=caviPhyIfIndex, caviHIntEgrRcvClp1Cells=caviHIntEgrRcvClp1Cells, caviHIngXmtClp0Cells=caviHIngXmtClp0Cells, caviMaxVpiNum=caviMaxVpiNum, caviMIBComplianceRev1=caviMIBComplianceRev1, caviEgressIntervalTable=caviEgressIntervalTable, caviHIngRcvClp1Cells=caviHIngRcvClp1Cells, caviMIBComplianceRev2=caviMIBComplianceRev2, caviIngXmtEFCICells=caviIngXmtEFCICells, caviStatIngressEntry=caviStatIngressEntry, caviHighIntIngClp0DiscCells=caviHighIntIngClp0DiscCells, caviEgrXmtEFCICells=caviEgrXmtEFCICells, caviIntEgrClp0DiscCells=caviIntEgrClp0DiscCells, caviEgressHighSpeedStatMIBGroup=caviEgressHighSpeedStatMIBGroup, caviIngRcvOAMCells=caviIngRcvOAMCells, caviIngXmtOAMCells=caviIngXmtOAMCells, caviHighIntIngXmtClp1Cells=caviHighIntIngXmtClp1Cells, caviIngressIntervalTable=caviIngressIntervalTable, ciscoAtmVirtualIfMIBObjects=ciscoAtmVirtualIfMIBObjects, caviIntIngXmtEFCICells=caviIntIngXmtEFCICells, caviHEgrClp1DiscCells=caviHEgrClp1DiscCells, caviIngHighSpeedStatMIBGroup2=caviIngHighSpeedStatMIBGroup2, caviIntIngRcvOAMCells=caviIntIngRcvOAMCells, caviEgressStatMIBGroup1=caviEgressStatMIBGroup1, caviIngRcvClp1Cells=caviIngRcvClp1Cells, caviHIntEgrClp0DiscCells=caviHIntEgrClp0DiscCells, caviTable=caviTable, caviMIBGroup=caviMIBGroup, caviIngressStatMIBGroup1=caviIngressStatMIBGroup1, caviHEgrClp0DiscCells=caviHEgrClp0DiscCells, caviEgressStatMIBGroup=caviEgressStatMIBGroup, caviMIBCompliance=caviMIBCompliance, caviIntIngRMCells=caviIntIngRMCells, caviIntIngXmtClp1Cells=caviIntIngXmtClp1Cells)
