#
# PySNMP MIB module RLLAN1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RLLAN1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, iso, ModuleIdentity, Bits, Counter32, Unsigned32, ObjectIdentity, Counter64, Integer32, IpAddress, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "iso", "ModuleIdentity", "Bits", "Counter32", "Unsigned32", "ObjectIdentity", "Counter64", "Integer32", "IpAddress", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, MacAddress, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TruthValue", "TextualConvention")
rlLan1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 224))
rlLan1.setRevisions(('2015-06-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlLan1.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: rlLan1.setLastUpdated('201506300000Z')
if mibBuilder.loadTexts: rlLan1.setOrganization('MARVELL')
if mibBuilder.loadTexts: rlLan1.setContactInfo('Email: gain@marvell.com')
if mibBuilder.loadTexts: rlLan1.setDescription('The Lan1 MIB module for supporting Lan1 fetaure.')
class GroupId(TextualConvention, Integer32):
    description = 'group id.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1279)

class GroupIdList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight groups, with the first octet specifying groups 1 through 8, the second octet specifying groups 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered group, and the least significant bit represents the highest numbered group. Thus, each group is represented by a single bit within the value of this object. If that bit has a value of '1' then that group is included in the set of groups; the group is not included if its bit has a value of '0'."
    status = 'current'

class VlanIdOrNone(TextualConvention, Integer32):
    description = 'group id.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4094)

rlLan1STagEtherType = MibScalar((1, 3, 6, 1, 4, 1, 89, 224, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="88A8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1STagEtherType.setStatus('current')
if mibBuilder.loadTexts: rlLan1STagEtherType.setDescription('Specifies the Ethernet type identifying the S-VLAN tag.')
rlLan1CPVlanId = MibScalar((1, 3, 6, 1, 4, 1, 89, 224, 2), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1CPVlanId.setStatus('current')
if mibBuilder.loadTexts: rlLan1CPVlanId.setDescription('Specifies the CP VLAN ID. 0 indicateds no CP vlan.')
rlLan1CPVlanCos = MibScalar((1, 3, 6, 1, 4, 1, 89, 224, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1CPVlanCos.setStatus('current')
if mibBuilder.loadTexts: rlLan1CPVlanCos.setDescription('Specifies the cos assigned to ingress traffic on module ports into the CP VLAN.')
rlLan1x86Port = MibScalar((1, 3, 6, 1, 4, 1, 89, 224, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86Port.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86Port.setDescription('Specifies the interface-id of the Ethernet port connecting LAN1 to the x86 environment implementing Virtual Functions (VFs). 0 indicateds no x86 port defined.')
rlLan1CPVlanMulticastMappingVlanId = MibScalar((1, 3, 6, 1, 4, 1, 89, 224, 5), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1CPVlanMulticastMappingVlanId.setStatus('current')
if mibBuilder.loadTexts: rlLan1CPVlanMulticastMappingVlanId.setDescription('Specifies the VF which S-VLAN-ID is assigned to multicast/broadcast traffic bridged into the CP VLAN from modules to x86. 0 indicateds no vlan.')
rlLan1NonCPVlanMulticastMappingVlanId = MibScalar((1, 3, 6, 1, 4, 1, 89, 224, 6), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1NonCPVlanMulticastMappingVlanId.setStatus('current')
if mibBuilder.loadTexts: rlLan1NonCPVlanMulticastMappingVlanId.setDescription('Specifies the VF which S-VLAN-ID is assigned to multicast/broadcast traffic bridged into the non-CP VLAN from modules to x86. 0 indicateds no vlan.')
rlLan1x86VlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 224, 7), )
if mibBuilder.loadTexts: rlLan1x86VlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86VlanMappingTable.setDescription('A table that contains information mapping s-tag to group id.')
rlLan1x86VlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 224, 7, 1), ).setIndexNames((0, "RLLAN1-MIB", "rlLan1x86VlanMappingVlanId"))
if mibBuilder.loadTexts: rlLan1x86VlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86VlanMappingEntry.setDescription('A mapping of incoming s-tag to a group.')
rlLan1x86VlanMappingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 7, 1, 1), VlanId())
if mibBuilder.loadTexts: rlLan1x86VlanMappingVlanId.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86VlanMappingVlanId.setDescription('The s-tag to mapped to group')
rlLan1x86VlanMappingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 7, 1, 2), GroupId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86VlanMappingGroupId.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86VlanMappingGroupId.setDescription('group for filtering traffic')
rlLan1x86VlanMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlLan1x86VlanMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86VlanMappingRowStatus.setDescription('This object indicates the status of this entry.')
rlLan1x86MacMappingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 224, 8), )
if mibBuilder.loadTexts: rlLan1x86MacMappingTable.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86MacMappingTable.setDescription('A table that contains information mapping Mac to s-tag.')
rlLan1x86MacMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 224, 8, 1), ).setIndexNames((0, "RLLAN1-MIB", "rlLan1x86MacMappingDstMacAddress"))
if mibBuilder.loadTexts: rlLan1x86MacMappingEntry.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86MacMappingEntry.setDescription('A mapping of incoming s-tag to a group.')
rlLan1x86MacMappingDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 8, 1, 1), MacAddress())
if mibBuilder.loadTexts: rlLan1x86MacMappingDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86MacMappingDstMacAddress.setDescription('destination mac address')
rlLan1x86MacMappingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 8, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86MacMappingVlanId.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86MacMappingVlanId.setDescription('The s-tag')
rlLan1x86MacMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlLan1x86MacMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86MacMappingRowStatus.setDescription('This object indicates the status of this entry.')
rlLan1x86ModulePortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 224, 9), )
if mibBuilder.loadTexts: rlLan1x86ModulePortTable.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortTable.setDescription('A table that contains information on a LAN1 module port.')
rlLan1x86ModulePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 224, 9, 1), ).setIndexNames((0, "RLLAN1-MIB", "rlLan1x86ModulePortIfIndex"))
if mibBuilder.loadTexts: rlLan1x86ModulePortEntry.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortEntry.setDescription('A mapping of incoming s-tag to a group.')
rlLan1x86ModulePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: rlLan1x86ModulePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortIfIndex.setDescription('Specifies the interface-id.')
rlLan1x86ModulePortCPAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 9, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86ModulePortCPAllowed.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortCPAllowed.setDescription('Specifies that CP traffic is allowed on the port, it is used to allow CP multicast/broadcast traffic.')
rlLan1x86ModulePortCPUntaggedAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86ModulePortCPUntaggedAllowed.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortCPUntaggedAllowed.setDescription('Specifies that untagged traffic belongs to the CP VLAN, it is used to allow ingress untagged multicast/broadcast traffic.')
rlLan1x86ModulePortMulticastBroadcastAllowedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("cp", 2), ("noncp", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86ModulePortMulticastBroadcastAllowedVlan.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortMulticastBroadcastAllowedVlan.setDescription('Specifies that multicast/broadcast traffic is allowed on the CP VLAN or on non-CP VLAN. If the parameter is not configured then only unicast traffic is allowed.')
rlLan1x86ModulePortIngressGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 9, 1, 5), GroupId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86ModulePortIngressGroupId.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortIngressGroupId.setDescription('Specifies the group number assigned to the input frame on the interface')
rlLan1x86ModulePortEgressGroupIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 224, 9, 1, 6), GroupIdList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLan1x86ModulePortEgressGroupIdList.setStatus('current')
if mibBuilder.loadTexts: rlLan1x86ModulePortEgressGroupIdList.setDescription('Specifies the list of egress group numbers')
mibBuilder.exportSymbols("RLLAN1-MIB", rlLan1x86MacMappingEntry=rlLan1x86MacMappingEntry, rlLan1x86ModulePortCPUntaggedAllowed=rlLan1x86ModulePortCPUntaggedAllowed, rlLan1CPVlanId=rlLan1CPVlanId, GroupIdList=GroupIdList, rlLan1x86MacMappingTable=rlLan1x86MacMappingTable, rlLan1CPVlanMulticastMappingVlanId=rlLan1CPVlanMulticastMappingVlanId, rlLan1x86ModulePortCPAllowed=rlLan1x86ModulePortCPAllowed, rlLan1x86MacMappingRowStatus=rlLan1x86MacMappingRowStatus, VlanIdOrNone=VlanIdOrNone, rlLan1STagEtherType=rlLan1STagEtherType, rlLan1x86VlanMappingTable=rlLan1x86VlanMappingTable, rlLan1x86ModulePortEntry=rlLan1x86ModulePortEntry, GroupId=GroupId, rlLan1x86Port=rlLan1x86Port, rlLan1NonCPVlanMulticastMappingVlanId=rlLan1NonCPVlanMulticastMappingVlanId, rlLan1x86MacMappingDstMacAddress=rlLan1x86MacMappingDstMacAddress, rlLan1x86ModulePortIngressGroupId=rlLan1x86ModulePortIngressGroupId, rlLan1x86VlanMappingEntry=rlLan1x86VlanMappingEntry, rlLan1x86VlanMappingVlanId=rlLan1x86VlanMappingVlanId, rlLan1x86VlanMappingRowStatus=rlLan1x86VlanMappingRowStatus, PYSNMP_MODULE_ID=rlLan1, rlLan1x86ModulePortTable=rlLan1x86ModulePortTable, rlLan1x86MacMappingVlanId=rlLan1x86MacMappingVlanId, rlLan1x86ModulePortEgressGroupIdList=rlLan1x86ModulePortEgressGroupIdList, rlLan1x86ModulePortMulticastBroadcastAllowedVlan=rlLan1x86ModulePortMulticastBroadcastAllowedVlan, rlLan1x86VlanMappingGroupId=rlLan1x86VlanMappingGroupId, rlLan1=rlLan1, rlLan1x86ModulePortIfIndex=rlLan1x86ModulePortIfIndex, rlLan1CPVlanCos=rlLan1CPVlanCos)
