#
# PySNMP MIB module IBMNETU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMNETU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, MibIdentifier, ObjectIdentity, Integer32, Counter64, enterprises, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, IpAddress, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "MibIdentifier", "ObjectIdentity", "Integer32", "Counter64", "enterprises", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "IpAddress", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibmnetu = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150))
ibmnetuadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1))
ibmnetusystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 2))
ibmnetuhardware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 3))
ibmneturouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 4))
ibmnetuswitching = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 5))
ibmnetuadminproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 1))
ibmnetumod400 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 1, 1))
ibmnetuadminOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 2))
ibmnetuadminDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 3))
ibmnetusystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 2, 1))
ibmnetucfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 2, 2))
ibmnetuhardwareGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1))
ibmnetuhardware400Specific = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 2))
ibmnetuEnetChipSet = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 2, 1))
enetChipSetToshiba = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 2, 1, 1))
enetChipSetAMD = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 150, 1, 2, 1, 2))
ibmnetuPCIAdapTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 1), )
if mibBuilder.loadTexts: ibmnetuPCIAdapTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuPCIAdapTable.setDescription('A table of information about PCI adapters in this box.')
ibmnetuPCIAdapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 1, 1), ).setIndexNames((0, "IBMNETU-MIB", "ibmnetuPCIAdapSlotNum"))
if mibBuilder.loadTexts: ibmnetuPCIAdapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuPCIAdapEntry.setDescription('An entry containing objects to describe the adapter in a given slot.')
ibmnetuPCIAdapSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnetuPCIAdapSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuPCIAdapSlotNum.setDescription('The number identifying a slot location where an adapter can be inserted.')
ibmnetuPCIAdapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("unknown", 1), ("not-present", 2), ("atm-mmf-lic294", 3), ("reserved1", 4), ("atm-smf-lic295", 5), ("reserved2", 6), ("token-ring-lic280", 7), ("escon-lic287", 8), ("reserved3", 9), ("reserved4", 10), ("serial-rs232-lic282", 11), ("serial-v35-lic290", 12), ("serial-x21-lic291", 13), ("ethernet-lic281", 14), ("ethernet-fast-lic288", 15), ("serial-hssi-lic289", 16), ("fddi-lic286", 17), ("reserved5", 18), ("reserved6", 19), ("parallel-channel-lic299", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnetuPCIAdapType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuPCIAdapType.setDescription('The type of adapter that is inserted into this slot. If no adapter is present, the variable will take the value not-present(2). The enumerations marked reserved# are saved for future enhancements.')
ibmnetuPCIAdapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("not-configured", 2), ("not-present", 3), ("does-not-apply", 4), ("enable-pending", 5), ("enabled", 6), ("disable-pending", 7), ("disabled", 8), ("not-initialized", 9), ("unknown-device", 10), ("hardware-error", 11), ("not-powered", 12), ("diagnostics", 13), ("wrs-available", 14), ("mis-configured", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnetuPCIAdapOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuPCIAdapOperStatus.setDescription('The operational status of this PCI adapter. unknown (1) : If there was problem determining the operational status of the adapter. not-configured (2) : If the adapter inserted in the slot is recognized but no router configuration exists. not-present (3) : If no adapter is currently inserted. does-not-apply (4) : If this adapter does not contain an operational state. enable-pending (5) : If commands have been issued to enable the adapter but have not been completed. enabled (6) : If commands have been successfully issued to enable the adapter. disable-pending (7) : If commands have been issued to disable the adapter but have not been completed. disabled (8) : If commands have been successfully issued to disable the adapter. not-initialized (9) : If the adapter has not completed its initialization. unknown-device (10) : If the adapter inserted in the slot can not be recognized. hardware-error (11) : If the adapter can not be used nor made ready to be used. not-powered (12) : If the adapter has had a problem obtaining power from its slot. diagnostics (13) : If the adapter is currently undergoing diagnostics. wrs-available (14) : If the adapter is currently configured and available for WAN restoral. mis-configured (15) : If the adapter is inserted in the slot but the router configuration is of a different type.')
ibmnetuGraphicTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 2), )
if mibBuilder.loadTexts: ibmnetuGraphicTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuGraphicTable.setDescription('A table of information mapping a slot and port to an interface table ifIndex. An entry exists in this table only if the ifConnectorPresent object is true')
ibmnetuGraphicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 2, 1), ).setIndexNames((0, "IBMNETU-MIB", "ibmnetuGraphicSlotNum"), (0, "IBMNETU-MIB", "ibmnetuGraphicPortNum"))
if mibBuilder.loadTexts: ibmnetuGraphicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuGraphicEntry.setDescription('An entry mapping slot and port to an interface table ifIndex.')
ibmnetuGraphicSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnetuGraphicSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuGraphicSlotNum.setDescription('The number identifying a slot location where an adapter can be inserted.')
ibmnetuGraphicPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnetuGraphicPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuGraphicPortNum.setDescription('The number identifying a port on a given adapter. A port implies a physical connector is associated with it.')
ibmnetuGraphicifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 150, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmnetuGraphicifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmnetuGraphicifIndex.setDescription('The ifIndex of the interface table entry associated with this port on an adapter. By definition, the ifEntry has ifConnectorPresent = true.')
mibBuilder.exportSymbols("IBMNETU-MIB", ibmnetuswitching=ibmnetuswitching, ibmnetusystem=ibmnetusystem, ibmnetucfgInfo=ibmnetucfgInfo, ibmnetuhardware400Specific=ibmnetuhardware400Specific, enetChipSetAMD=enetChipSetAMD, ibmnetu=ibmnetu, ibmnetuadminDebug=ibmnetuadminDebug, ibmnetuPCIAdapEntry=ibmnetuPCIAdapEntry, ibmnetuGraphicTable=ibmnetuGraphicTable, ibmnetumod400=ibmnetumod400, ibmneturouting=ibmneturouting, ibmnetuGraphicifIndex=ibmnetuGraphicifIndex, ibmnetuhardware=ibmnetuhardware, ibm=ibm, ibmnetuPCIAdapTable=ibmnetuPCIAdapTable, ibmnetuPCIAdapOperStatus=ibmnetuPCIAdapOperStatus, ibmnetuGraphicSlotNum=ibmnetuGraphicSlotNum, ibmnetuGraphicEntry=ibmnetuGraphicEntry, ibmnetuadminproducts=ibmnetuadminproducts, ibmnetuadmin=ibmnetuadmin, ibmnetuEnetChipSet=ibmnetuEnetChipSet, ibmnetuPCIAdapSlotNum=ibmnetuPCIAdapSlotNum, ibmnetuhardwareGeneral=ibmnetuhardwareGeneral, ibmnetuadminOID=ibmnetuadminOID, ibmnetuPCIAdapType=ibmnetuPCIAdapType, enetChipSetToshiba=enetChipSetToshiba, ibmnetuGraphicPortNum=ibmnetuGraphicPortNum, ibmProd=ibmProd, ibmnetusystemInfo=ibmnetusystemInfo)
