#
# PySNMP MIB module JUNIPER-PMon-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-PMon-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
jnxMibs, jnxPMonNotifications = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxPMonNotifications")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, IpAddress, Counter64, NotificationType, MibIdentifier, TimeTicks, Integer32, Counter32, ObjectIdentity, Gauge32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "IpAddress", "Counter64", "NotificationType", "MibIdentifier", "TimeTicks", "Integer32", "Counter32", "ObjectIdentity", "Gauge32", "iso", "Unsigned32")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
jnxPMon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 19))
jnxPMon.setRevisions(('2002-06-05 00:00', '2002-08-27 00:00', '2002-09-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxPMon.setRevisionsDescriptions(('Added Passive Monitoring PIC stats.', 'jnxPMonCurrentActiveFlows, jnxPMonTenSecondAvyyerageFlowPackets, jnxPMonTenSecondAverageFlowBytes, jnxPMonAllocPerSecond, jnxPMonFreePerSecond, jnxPMonTotalMemoryUsed, jnxPMonTotalMemoryFree: change type Counter32 to Gauge32', 'Added overload notifications and objects to jnxPMonErrorTable.',))
if mibBuilder.loadTexts: jnxPMon.setLastUpdated('200307182153Z')
if mibBuilder.loadTexts: jnxPMon.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxPMon.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxPMon.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for Passive Monitoring PIC")
class JnxPMonOverloadId(TextualConvention, Bits):
    description = 'Identifies specific overload conditions that may exist on an interface.'
    status = 'current'
    namedValues = NamedValues(("pmonMemOverload", 0), ("pmonPpsOverload", 1), ("pmonBpsOverload", 2), ("pmonMemWarning", 3))

jnxPMonFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1), )
if mibBuilder.loadTexts: jnxPMonFlowTable.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowTable.setDescription('a list of flow entry for Passive Monitoring PIC')
jnxPMonFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonFlowEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowEntry.setDescription('An entry containing management information applicable to a particular monitor interfaces.')
jnxPMonCurrentActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonCurrentActiveFlows.setStatus('current')
if mibBuilder.loadTexts: jnxPMonCurrentActiveFlows.setDescription('The number of flows currently active.')
jnxPMonTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlows.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlows.setDescription('The cumulative number of total flows.')
jnxPMonTotalFlowsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsPackets.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlowsPackets.setDescription('The number of total flows packets.')
jnxPMonTenSecondAverageFlowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowPackets.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowPackets.setDescription('The number of flow packets per second in 10 second average.')
jnxPMonTotalFlowsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsBytes.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlowsBytes.setDescription('The number of total flows bytes.')
jnxPMonTenSecondAverageFlowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowBytes.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTenSecondAverageFlowBytes.setDescription('The number of flow bytes per second in 10 second average.')
jnxPMonTotalFlowsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsExpired.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlowsExpired.setDescription('The cumulative number of total flows expired.')
jnxPMonTotalFlowsAged = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsAged.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlowsAged.setDescription('The cumulative number of total flows aged.')
jnxPMonTotalFlowsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsExported.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlowsExported.setDescription('The cumulative number of total flows exported.')
jnxPMonTotalFlowsPacketsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalFlowsPacketsExported.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalFlowsPacketsExported.setDescription('The cumulative number of total flows packets exported.')
jnxPMonErrorTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2), )
if mibBuilder.loadTexts: jnxPMonErrorTable.setStatus('current')
if mibBuilder.loadTexts: jnxPMonErrorTable.setDescription('a list of error entry for Passive Monitoring PIC')
jnxPMonErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonErrorEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPMonErrorEntry.setDescription('An entry containing management information applicable to a particular monitor interfaces.')
jnxPMonFlowAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowAllocFailures.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowAllocFailures.setDescription('The number of flow allocation failures.')
jnxPMonFlowFreeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowFreeFailures.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowFreeFailures.setDescription('The number of flow free failures.')
jnxPMonFreeListFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFreeListFailures.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFreeListFailures.setDescription('The number of free list failures.')
jnxPMonNoMemDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNoMemDrops.setStatus('current')
if mibBuilder.loadTexts: jnxPMonNoMemDrops.setDescription('The number of packet drops due to low/no memory.')
jnxPMonNotIPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNotIPDrops.setStatus('current')
if mibBuilder.loadTexts: jnxPMonNotIPDrops.setDescription('The number of packet drops due to not IP.')
jnxPMonNotIPv4Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonNotIPv4Drops.setStatus('current')
if mibBuilder.loadTexts: jnxPMonNotIPv4Drops.setDescription('The number of packet drops due to not IPv4.')
jnxPMonTooSmallDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTooSmallDrops.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTooSmallDrops.setDescription('The number of packet drops due to too small on header.')
jnxPMonCurrentOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 8), JnxPMonOverloadId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonCurrentOverload.setStatus('current')
if mibBuilder.loadTexts: jnxPMonCurrentOverload.setDescription('Identifies current overload conditions that exist on this interface.')
jnxPMonLastOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 9), JnxPMonOverloadId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverload.setStatus('current')
if mibBuilder.loadTexts: jnxPMonLastOverload.setDescription('Identifies the last overload condition to change on this interface.')
jnxPMonLastOverloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadTime.setStatus('current')
if mibBuilder.loadTexts: jnxPMonLastOverloadTime.setDescription('The value of sysUpTime when the management subsystem last learned of a change to the overload condition on this interface.')
jnxPMonLastOverloadDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadDate.setStatus('current')
if mibBuilder.loadTexts: jnxPMonLastOverloadDate.setDescription('The system date and time when the management subsystem last learned of a change to the overload condition on this interface.')
jnxPMonLastOverloadEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("set", 2), ("cleared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonLastOverloadEvent.setStatus('current')
if mibBuilder.loadTexts: jnxPMonLastOverloadEvent.setDescription('This indicates whether the last overload event set a new overload condition or cleared an existing condition.')
jnxPMonMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3), )
if mibBuilder.loadTexts: jnxPMonMemoryTable.setStatus('current')
if mibBuilder.loadTexts: jnxPMonMemoryTable.setDescription('a list of memory entry for Passive Monitoring PIC')
jnxPMonMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPMonMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPMonMemoryEntry.setDescription('An entry containing management information applicable to a particular monitor interfaces.')
jnxPMonFlowTotalAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowTotalAlloc.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowTotalAlloc.setDescription('The number of flow records allocated.')
jnxPMonFlowTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowTotalFree.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowTotalFree.setDescription('The number of flow records freed.')
jnxPMonFlowMaxAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFlowMaxAlloc.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFlowMaxAlloc.setDescription('The number of maximum flow records allocated.')
jnxPMonAllocPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonAllocPerSecond.setStatus('current')
if mibBuilder.loadTexts: jnxPMonAllocPerSecond.setDescription('The number of flow records allocated per second.')
jnxPMonFreePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonFreePerSecond.setStatus('current')
if mibBuilder.loadTexts: jnxPMonFreePerSecond.setDescription('The number of flow records freed per second.')
jnxPMonTotalMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalMemoryUsed.setDescription('The total amount of memory currently used in KBbytes.')
jnxPMonTotalMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 19, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPMonTotalMemoryFree.setStatus('current')
if mibBuilder.loadTexts: jnxPMonTotalMemoryFree.setDescription('The total amount of memory currently freed in KBbytes.')
jnxPMonNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0))
jnxPMonOverloadSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverload"), ("JUNIPER-PMon-MIB", "jnxPMonCurrentOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverloadDate"))
if mibBuilder.loadTexts: jnxPMonOverloadSet.setStatus('current')
if mibBuilder.loadTexts: jnxPMonOverloadSet.setDescription('Notification of a new overload condition on a Passive Monitoring interface.')
jnxPMonOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 7, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverload"), ("JUNIPER-PMon-MIB", "jnxPMonCurrentOverload"), ("JUNIPER-PMon-MIB", "jnxPMonLastOverloadDate"))
if mibBuilder.loadTexts: jnxPMonOverloadCleared.setStatus('current')
if mibBuilder.loadTexts: jnxPMonOverloadCleared.setDescription('Notification of a cleared overload condition on a Passive Monitoring interface.')
mibBuilder.exportSymbols("JUNIPER-PMon-MIB", jnxPMonMemoryEntry=jnxPMonMemoryEntry, jnxPMon=jnxPMon, jnxPMonFlowMaxAlloc=jnxPMonFlowMaxAlloc, jnxPMonNotificationPrefix=jnxPMonNotificationPrefix, jnxPMonNotIPDrops=jnxPMonNotIPDrops, jnxPMonNoMemDrops=jnxPMonNoMemDrops, jnxPMonNotIPv4Drops=jnxPMonNotIPv4Drops, jnxPMonFlowTable=jnxPMonFlowTable, jnxPMonTotalFlowsPackets=jnxPMonTotalFlowsPackets, jnxPMonLastOverloadDate=jnxPMonLastOverloadDate, jnxPMonFlowTotalAlloc=jnxPMonFlowTotalAlloc, jnxPMonMemoryTable=jnxPMonMemoryTable, jnxPMonTotalFlows=jnxPMonTotalFlows, jnxPMonAllocPerSecond=jnxPMonAllocPerSecond, jnxPMonOverloadSet=jnxPMonOverloadSet, jnxPMonCurrentOverload=jnxPMonCurrentOverload, jnxPMonErrorTable=jnxPMonErrorTable, jnxPMonTotalFlowsBytes=jnxPMonTotalFlowsBytes, jnxPMonFlowAllocFailures=jnxPMonFlowAllocFailures, jnxPMonTenSecondAverageFlowBytes=jnxPMonTenSecondAverageFlowBytes, jnxPMonFlowFreeFailures=jnxPMonFlowFreeFailures, jnxPMonErrorEntry=jnxPMonErrorEntry, PYSNMP_MODULE_ID=jnxPMon, jnxPMonTooSmallDrops=jnxPMonTooSmallDrops, jnxPMonFlowEntry=jnxPMonFlowEntry, jnxPMonTotalFlowsExported=jnxPMonTotalFlowsExported, jnxPMonTenSecondAverageFlowPackets=jnxPMonTenSecondAverageFlowPackets, jnxPMonTotalFlowsExpired=jnxPMonTotalFlowsExpired, jnxPMonTotalMemoryUsed=jnxPMonTotalMemoryUsed, jnxPMonFreeListFailures=jnxPMonFreeListFailures, jnxPMonLastOverloadTime=jnxPMonLastOverloadTime, jnxPMonTotalFlowsPacketsExported=jnxPMonTotalFlowsPacketsExported, jnxPMonFlowTotalFree=jnxPMonFlowTotalFree, JnxPMonOverloadId=JnxPMonOverloadId, jnxPMonFreePerSecond=jnxPMonFreePerSecond, jnxPMonCurrentActiveFlows=jnxPMonCurrentActiveFlows, jnxPMonOverloadCleared=jnxPMonOverloadCleared, jnxPMonTotalMemoryFree=jnxPMonTotalMemoryFree, jnxPMonLastOverload=jnxPMonLastOverload, jnxPMonLastOverloadEvent=jnxPMonLastOverloadEvent, jnxPMonTotalFlowsAged=jnxPMonTotalFlowsAged)
