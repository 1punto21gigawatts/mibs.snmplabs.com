#
# PySNMP MIB module CISCO-FC-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, iso, ModuleIdentity, Unsigned32, Gauge32, ObjectIdentity, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "iso", "ModuleIdentity", "Unsigned32", "Gauge32", "ObjectIdentity", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "IpAddress", "Bits")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
ciscoFiberChannelTunnelMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 9999))
ciscoFiberChannelTunnelMIB.setRevisions(('2002-03-08 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFiberChannelTunnelMIB.setRevisionsDescriptions(('Initial version. Only supports Fiber Channel TCP tunneling.',))
if mibBuilder.loadTexts: ciscoFiberChannelTunnelMIB.setLastUpdated('200203081700Z')
if mibBuilder.loadTexts: ciscoFiberChannelTunnelMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFiberChannelTunnelMIB.setContactInfo('Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-cat6000@cisco.com')
if mibBuilder.loadTexts: ciscoFiberChannelTunnelMIB.setDescription('The CISCO-FC-TUNNEL-MIB is used to configure Fiber Channel (FC) tunneled by other protocols, i.e. TCP (Transmision Control Protocol) or UDP (User Datagram Protocol), and monitor the status of the tunnels. And Fiber Channel Command and Data messages can be tunneled by those protocols through the internet to extend the Fiber Channel network.')
ciscoFCTunnelMIBNotifi = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9999, 0))
ciscoFCTunnelMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1))
ciscoFCTunnelMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2))
cftTcpTunnelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1))
cftMaxTcpTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftMaxTcpTunnels.setStatus('current')
if mibBuilder.loadTexts: cftMaxTcpTunnels.setDescription('Maximum number of Fiber Channel TCP tunnels that can be built per Fiber Channel interface.')
cftTcpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2), )
if mibBuilder.loadTexts: cftTcpTunnelTable.setReference('RFC 793, Transmission Control Protocol. RFC 2581, TCP Congestion Control')
if mibBuilder.loadTexts: cftTcpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelTable.setDescription("This table contains TCP tunnels' information for FC interfaces. FC can use these TCP tunnels to communicate with each other through the internet. The TCP tunnels will help to build up reliable connections between FC interfaces to exchange FC Command and Data information. This table is for configuring the TCP tunnels and monitoring the status of tunnels. And the number of entries in this table is decided by the MIB object cftMaxTcpTunnels.")
cftTcpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-FC-TUNNEL-MIB", "cftFiberChannelIf"), (1, "CISCO-FC-TUNNEL-MIB", "cftTcpTunnelName"))
if mibBuilder.loadTexts: cftTcpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelEntry.setDescription("An entry contains the configuration and status objects of a TCP tunnel. The configuration includes the TCP connection 4-tuples, source IP, destination IP, source port , destination port, and some other TCP connection's options. The status includes the TCP connections and Tunnel's administration and operation. For each TCP tunnel, there are 2 TCP connections that will be built up in the tunneling. One is for FC Command communication and the other is for FC Data communication.")
cftFiberChannelIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cftFiberChannelIf.setStatus('current')
if mibBuilder.loadTexts: cftFiberChannelIf.setDescription('The interface index of the FC interface with TCP tunneling capable.')
cftTcpTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cftTcpTunnelName.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelName.setDescription('The name of the FC TCP tunnel.')
cftTcpTunnelSrcIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelSrcIpType.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelSrcIpType.setDescription('The source IP address type of the FC TCP tunnel.')
cftTcpTunnelSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelSrcIp.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelSrcIp.setDescription('The source IP address of the FC TCP tunnel. The type of the IP address is determined by the object cftTcpTunnelSrcIpType in the same entry.')
cftTcpTunnelDestIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDestIpType.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDestIpType.setDescription('The destination IP address type of the FC TCP tunnel.')
cftTcpTunnelDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDestIp.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDestIp.setDescription('The destination IP address of the FC TCP tunnel. The type of the IP address is determined by the object cftTcpTunnelDestIpType in the same entry.')
cftTcpTunnelCmdSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelCmdSrcPort.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdSrcPort.setDescription('The source port of the TCP connection for FC Command communication.')
cftTcpTunnelCmdDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelCmdDestPort.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdDestPort.setDescription('The destination port of the TCP connection for FC Command communication.')
cftTcpTunnelDataSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDataSrcPort.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataSrcPort.setDescription('The source port of the TCP connection for FC Data communication.')
cftTcpTunnelDataDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDataDestPort.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataDestPort.setDescription('The destination port of the TCP connection for FC Data communication.')
cftTcpTunnelCmdMWS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ws32kbytes", 1), ("ws128kbytes", 2), ("ws256kbytes", 3), ("ws512kbytes", 4))).clone('ws32kbytes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelCmdMWS.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdMWS.setDescription('The maximum window size of the TCP connection for FC Command communication. ws32kbytes : means the window size is 32 kilo-bytes. ws128kbytes : means the window size is 128 kilo-bytes. ws256kbytes : means the window size is 256 kilo-bytes. ws512kbytes : means the window size is 512 kilo-bytes.')
cftTcpTunnelDataMWS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ws32kbytes", 1), ("ws128kbytes", 2), ("ws256kbytes", 3), ("ws512kbytes", 4))).clone('ws32kbytes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDataMWS.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataMWS.setDescription('The maximum window size of the TCP connection for FC Data communication. ws32kbytes : means the window size is 32 kilo-bytes. ws128kbytes : means the window size is 128 kilo-bytes. ws256kbytes : means the window size is 256 kilo-bytes. ws512kbytes : means the window size is 512 kilo-bytes.')
cftTcpTunnelCmdKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3600, 10800)).clone(7200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelCmdKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdKeepAliveTime.setDescription('The keep alive time of the TCP connection for FC Command communication.')
cftTcpTunnelDataKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3600, 10800)).clone(7200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDataKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataKeepAliveTime.setDescription('The keep alive time of the TCP connection for FC Data communication.')
cftTcpTunnelCmdSelectiveAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelCmdSelectiveAck.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdSelectiveAck.setDescription('The selective acknowledge option of the TCP connection for FC Command communication.')
cftTcpTunnelDataSelectiveAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 16), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelDataSelectiveAck.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataSelectiveAck.setDescription('The selective acknowledge option of the TCP connection for FC Data communication.')
cftTcpTunnelCmdConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdConnectStatus.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdConnectStatus.setDescription('The status of the TCP connection for FC Command communication. connected(1) means the TCP connection for FC Command has been connected for communication. notConnected(2) means the TCP connection for FC Command is not successful.')
cftTcpTunnelDataConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataConnectStatus.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataConnectStatus.setDescription('The status of the TCP connection for FC Data communication. connected(1) means the TCP connection for FC Data has been connected for communication. notConnected(2) means the TCP connection for FC Data is not successful.')
cftTcpTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelOperStatus.setDescription('The operational status of this TCP tunnel. up(1) means this TCP tunnel is up and active. down(2) means this TCP tunnel is not active.')
cftTcpTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cftTcpTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelStatus.setDescription('The status of this TCP tunnel entry. If this object is active, the other objects in the same row cannot be modified by the management station.')
cftTcpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3), )
if mibBuilder.loadTexts: cftTcpTunnelStatsTable.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelStatsTable.setDescription('The table of traffic statistics information for FC tunnels. The entries in this table are shown only if the cftTcpTunnelStatus object of the corresponding entries are active in the cftTcpTunnelTable.')
cftTcpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-FC-TUNNEL-MIB", "cftFiberChannelIf"), (1, "CISCO-FC-TUNNEL-MIB", "cftTcpTunnelName"))
if mibBuilder.loadTexts: cftTcpTunnelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelStatsEntry.setDescription('The entry is indexed by the same index in the cftTcpTunnelTable. And this entry contains statistics information of FC Command TCP connection and FC Data TCP connection.')
cftTcpTunnelCmdRxSegmentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdRxSegmentOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdRxSegmentOctets.setDescription('Number of TCP segment bytes received in the FC TCP Command connection.')
cftTcpTunnelDataRxSegmentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataRxSegmentOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataRxSegmentOctets.setDescription('Number of TCP segment bytes received in the FC TCP Data connection.')
cftTcpTunnelCmdRxPrestufOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdRxPrestufOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdRxPrestufOctets.setDescription('Number of bytes received before stuffing the internal hardware bus header in the FC TCP Command connection.')
cftTcpTunnelDataRxPrestufOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataRxPrestufOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataRxPrestufOctets.setDescription('Number of bytes received before stuffing the internal hardware bus header in the FC TCP Data connection.')
cftTcpTunnelCmdRxPoststufOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdRxPoststufOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdRxPoststufOctets.setDescription('Number of bytes received after stuffing the internal hardward bus header in the FC TCP Command connection.')
cftTcpTunnelDataRxPoststufOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataRxPoststufOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataRxPoststufOctets.setDescription('Number of bytes received after stuffing the internal hardward bus header in the FC TCP Data connection.')
cftTcpTunnelCmdTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 7), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdTxOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdTxOctets.setDescription('Number of bytes sent in the FC TCP Command connection.')
cftTcpTunnelDataTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 8), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataTxOctets.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataTxOctets.setDescription('Number of bytes sent in the FC TCP Data connection.')
cftTcpTunnelCmdTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdTxPkts.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdTxPkts.setDescription('Number of packets sent in the FC TCP Command connection.')
cftTcpTunnelDataTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataTxPkts.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataTxPkts.setDescription('Number of packets sent in the FC TCP Data connection.')
cftTcpTunnelCmdTxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelCmdTxDrops.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelCmdTxDrops.setDescription('Number of packets dropped in the FC TCP Command connection.')
cftTcpTunnelDataTxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 3, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cftTcpTunnelDataTxDrops.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelDataTxDrops.setDescription('Number of packets dropped in the FC TCP Data connection.')
cftIfTcpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4), )
if mibBuilder.loadTexts: cftIfTcpTable.setReference('RFC 793, Transmission Control Protocol.')
if mibBuilder.loadTexts: cftIfTcpTable.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTable.setDescription('This table contains the statistics information of the Fiber Channel interface with the ability of TCP tunneling.')
cftIfTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-FC-TUNNEL-MIB", "cftIfTcpIndex"))
if mibBuilder.loadTexts: cftIfTcpEntry.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpEntry.setDescription('This entry contains TCP statistics information for a given FC interface with the ability of TCP tunneling.')
cftIfTcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cftIfTcpIndex.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpIndex.setDescription('The interface index of the FC interface capable of carrying TCP tunnels.')
cftIfTcpConnInit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnInit.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnInit.setDescription('Number of TCP connections initiated.')
cftIfTcpConnAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnAccepted.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnAccepted.setDescription('Number of TCP requested connections accepted.')
cftIfTcpConnEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnEstablished.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnEstablished.setDescription('Number of TCP connections established.')
cftIfTcpConnDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnDrops.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnDrops.setDescription('Number of TCP connections dropped.')
cftIfTcpConnClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnClosed.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnClosed.setDescription('Number of TCP connections closed. This includes those connections dropped.')
cftIfTcpTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxPkts.setDescription('Number of TCP transmitting packets. This includes TCP control and data packets.')
cftIfTcpTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxDataPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxDataPkts.setDescription("Number of TCP transmitting data packets. This doesn't include those TCP control traffic.")
cftIfTcpTxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxDataOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxDataOctets.setDescription("Number of TCP transmitting data octets. This doesn't include those TCP control traffic.")
cftIfTcpRetxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRetxDataPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRetxDataPkts.setDescription("Number of TCP re-transmitting data packets. This doesn't include those TCP control traffic.")
cftIfTcpRetxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRetxDataOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRetxDataOctets.setDescription("Number of TCP re-transmitting data octets. This doesn't include those TCP control traffic.")
cftIfTcpRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxPkts.setDescription('Number of TCP packets received.')
cftIfTcpRxInSequencePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxInSequencePkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxInSequencePkts.setDescription('Number of TCP packets received in sequence.')
cftIfTcpRxInSequenceOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxInSequenceOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxInSequenceOctets.setDescription('Number of TCP octets received in sequence.')
cftIfTcpRxCcksumErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxCcksumErrPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxCcksumErrPkts.setDescription('Number of TCP packets received with checksum error.')
cftIfTcpRxBadOffsetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxBadOffsetPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxBadOffsetPkts.setDescription('Number of TCP packets received with bad offset.')
cftIfTcpRxOutOfOrderPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxOutOfOrderPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxOutOfOrderPkts.setDescription('Number of out-of-order TCP packets received.')
cftIfTcpRxOutOfOrderOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxOutOfOrderOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxOutOfOrderOctets.setDescription('Number of out-of-order TCP octets received.')
cftIfTcpExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5), )
if mibBuilder.loadTexts: cftIfTcpExtTable.setReference('RFC 793, Transmission Control Protocol. RFC 2581, TCP Congestion Control')
if mibBuilder.loadTexts: cftIfTcpExtTable.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpExtTable.setDescription('This table contains the statistics information of the Fiber Channel interface with the ability of TCP tunneling. This table is an extension of cftIfTcpTable and this table provides more specific counters that not all TCP protocol stack will support.')
cftIfTcpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-FC-TUNNEL-MIB", "cftIfTcpIndex"))
if mibBuilder.loadTexts: cftIfTcpExtEntry.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpExtEntry.setDescription('This entry contains TCP statistics information for a given FC interface with the ability of TCP tunneling.')
cftIfTcpEmbryonicConnDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpEmbryonicConnDrops.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpEmbryonicConnDrops.setDescription('Number of TCP embryonic connections dropped. The embryonic drop counter tells the user how many times the connections did not go through because of not receiving a reply for the SYN packets - which gives a measure for the quality of the path between the two peers.')
cftIfTcpSegsTryToGetRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpSegsTryToGetRTT.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpSegsTryToGetRTT.setDescription('Number of TCP segments which try to get RTT (Round Trip Time).')
cftIfTcpSegsSucceedToGetRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpSegsSucceedToGetRTT.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpSegsSucceedToGetRTT.setDescription('Number of TCP segments which get RTT (Round Trip Time) successfully.')
cftIfTcpDelayedAcksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpDelayedAcksSent.setReference('RFC 1072, TCP Extensions for Long-Delay Paths, Section 4.2 (A)')
if mibBuilder.loadTexts: cftIfTcpDelayedAcksSent.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpDelayedAcksSent.setDescription('number of TCP delayed ACKs sent.')
cftIfTcpConnDroppedRxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnDroppedRxTimeout.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnDroppedRxTimeout.setDescription('Number of TCP connections dropped because of receiving timeout.')
cftIfTcpRetransmitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRetransmitTimeout.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRetransmitTimeout.setDescription('Number of TCP retransmitting timeouts.')
cftIfTcpPersistTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpPersistTimeout.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpPersistTimeout.setDescription('Number of TCP persisting timeouts.')
cftIfTcpKeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpKeepaliveTimeout.setDescription('Number of TCP keepalive timeouts.')
cftIfTcpKeepaliveProbesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpKeepaliveProbesSent.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpKeepaliveProbesSent.setDescription('Number of TCP keep-alive probes sent.')
cftIfTcpConnDroppedInKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnDroppedInKeepalive.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnDroppedInKeepalive.setDescription('Number of TCP connections dropped in keepalive.')
cftIfTcpConnDroppedInPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnDroppedInPersist.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnDroppedInPersist.setDescription('Number of TCP connections dropped in persisting.')
cftIfTcpConnDrainedByNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpConnDrainedByNoMemory.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpConnDrainedByNoMemory.setDescription('Number of TCP connections drained dut to memory shortage.')
cftIfTcpAckOnlyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpAckOnlyPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpAckOnlyPkts.setDescription('Number of TCP packets sent with only ACK flag on.')
cftIfTcpTxWindowProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxWindowProbes.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxWindowProbes.setDescription('Number of TCP window probing packets sent.')
cftIfTcpTxURGPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxURGPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxURGPkts.setDescription('Number of TCP packets sent with URG flag on.')
cftIfTcpTxWindowUpdateOnlyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxWindowUpdateOnlyPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxWindowUpdateOnlyPkts.setDescription('Number of TCP packets sent only for only updating the window size.')
cftIfTcpTxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxControlPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxControlPkts.setDescription('Number of TCP packets sent with SYN, FIN, or RST flags on.')
cftIfTcpRxDroppedByNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDroppedByNoMemory.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDroppedByNoMemory.setDescription('Number of receiving TCP packets dropped because of lacking of memory.')
cftIfTcpRxTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxTooShort.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxTooShort.setDescription('Number of TCP packets received with too short length.')
cftIfTcpRxDupOnlyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDupOnlyPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDupOnlyPkts.setDescription('Number of duplicated TCP packets received.')
cftIfTcpRxDupOnlyOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDupOnlyOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDupOnlyOctets.setDescription('Number of duplicated TCP octets received.')
cftIfTcpRxDupDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDupDataPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDupDataPkts.setDescription('Number of TCP packets received with duplicated data.')
cftIfTcpRxDupOctetsInPartDupPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDupOctetsInPartDupPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDupOctetsInPartDupPkts.setDescription('Number of duplicated TCP octets received in part of duplicated packets.')
cftIfTcpRxDataAfterWindowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDataAfterWindowPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDataAfterWindowPkts.setDescription('Number of TCP packets with data received after window.')
cftIfTcpRxDataAfterWindowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDataAfterWindowOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDataAfterWindowOctets.setDescription('Number of TCP octets with data received after window.')
cftIfTcpRxPktsAfterConnClose = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxPktsAfterConnClose.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxPktsAfterConnClose.setDescription('Number of TCP packets received after the connection close.')
cftIfTcpRxWindowProbesPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxWindowProbesPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxWindowProbesPkts.setDescription('Number of TCP window probing packets received.')
cftIfTcpRxDupAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxDupAcks.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxDupAcks.setDescription('Number of duplicated TCP acknowledge packets received.')
cftIfTcpRxAcksForUnsentData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxAcksForUnsentData.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxAcksForUnsentData.setDescription('Number of TCP acknowledge packets received for unsent data.')
cftIfTcpRxAcksPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxAcksPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxAcksPkts.setDescription('Number of TCP packets received with ACK flag on.')
cftIfTcpOctetAckedByRxAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpOctetAckedByRxAcks.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpOctetAckedByRxAcks.setDescription('Number of TCP octets received with ACK flag on.')
cftIfTcpRxWindowUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRxWindowUpdatePkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRxWindowUpdatePkts.setDescription('Number of TCP packets received for updating window size.')
cftIfTcpSegDropByPAWS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpSegDropByPAWS.setReference('RFC 2883, An Extension to the Selective Acknowledgement (SACK) Option for TCP')
if mibBuilder.loadTexts: cftIfTcpSegDropByPAWS.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpSegDropByPAWS.setDescription('Number of TCP segments dropped due to Protection Against Wrapped Sequence Number (PAWS) algorithm.')
cftIfTcpTxSackFackDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxSackFackDataPkts.setReference('RFC 2018, TCP Selective Acknowledgment Options RFC 2883, An Extension to the Selective Acknowledgement (SACK) Option for TCP')
if mibBuilder.loadTexts: cftIfTcpTxSackFackDataPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxSackFackDataPkts.setDescription('Number of TCP data packets sent with SACK option on.')
cftIfTcpTxSackFackDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpTxSackFackDataOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpTxSackFackDataOctets.setDescription('Number of TCP data octets sent with SACK option on.')
cftIfTcpRetxSackFackDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRetxSackFackDataPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRetxSackFackDataPkts.setDescription('Number of TCP data packets re-sent with SACK option on.')
cftIfTcpRetxSackFackDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRetxSackFackDataOctets.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRetxSackFackDataOctets.setDescription('Number of TCP data octets re-sent with SACK option on.')
cftIfTcpSackFackConnClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpSackFackConnClosed.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpSackFackConnClosed.setDescription('Number of TCP connections closed with SACK option on.')
cftIfTcpRetxSackFackTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpRetxSackFackTimeouts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpRetxSackFackTimeouts.setDescription('Number of TCP timeouts re-sent with SACK option on.')
cftIfTcpHdrPredictOkForAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpHdrPredictOkForAcks.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpHdrPredictOkForAcks.setDescription('Number of times the header predication code is hit by TCP packets with ACK option on.')
cftIfTcpHdrPredictOkForDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 9999, 1, 1, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cftIfTcpHdrPredictOkForDataPkts.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpHdrPredictOkForDataPkts.setDescription('Number of times the header predication code is hit by the packets of FC Data TCP connection.')
cftTunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 1))
cftTunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 2))
cftTunnelMIBComplianceV01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 1, 1)).setObjects(("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cftTunnelMIBComplianceV01 = cftTunnelMIBComplianceV01.setStatus('current')
if mibBuilder.loadTexts: cftTunnelMIBComplianceV01.setDescription('A Fiber Channel tunneling implementation that lists the groups supporting configuration tunnels and statistics information of the tunnels.')
cftTcpTunnelConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 2, 1)).setObjects(("CISCO-FC-TUNNEL-MIB", "cftMaxTcpTunnels"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelSrcIpType"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelSrcIp"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDestIpType"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDestIp"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdSrcPort"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdDestPort"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataSrcPort"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataDestPort"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdMWS"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataMWS"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdKeepAliveTime"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataKeepAliveTime"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdSelectiveAck"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataSelectiveAck"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdConnectStatus"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataConnectStatus"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelOperStatus"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cftTcpTunnelConfigGroup = cftTcpTunnelConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelConfigGroup.setDescription('The collection of objects which are used to describe and configure Fiber Channal TCP tunneling.')
cftTcpTunnelStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 2, 2)).setObjects(("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdRxSegmentOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataRxSegmentOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdRxPrestufOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataRxPrestufOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdRxPoststufOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataRxPoststufOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdTxOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataTxOctets"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdTxPkts"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataTxPkts"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelCmdTxDrops"), ("CISCO-FC-TUNNEL-MIB", "cftTcpTunnelDataTxDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cftTcpTunnelStatGroup = cftTcpTunnelStatGroup.setStatus('current')
if mibBuilder.loadTexts: cftTcpTunnelStatGroup.setDescription('The collection of objects which are used to monitor the traffic of TCP tunnels.')
cftIfTcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 2, 3)).setObjects(("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnInit"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnAccepted"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnEstablished"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnDrops"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnClosed"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxDataPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxDataOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRetxDataPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRetxDataOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxInSequencePkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxInSequenceOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxCcksumErrPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxBadOffsetPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxOutOfOrderPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxOutOfOrderOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cftIfTcpGroup = cftIfTcpGroup.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpGroup.setDescription('The collection of objects which are used to monitor the status and statistics information of the TCP stack for the tunneled Fiber Channel interface.')
cftIfTcpExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 9999, 2, 2, 4)).setObjects(("CISCO-FC-TUNNEL-MIB", "cftIfTcpEmbryonicConnDrops"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpSegsTryToGetRTT"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpSegsSucceedToGetRTT"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpDelayedAcksSent"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnDroppedRxTimeout"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRetransmitTimeout"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpPersistTimeout"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpKeepaliveTimeout"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpKeepaliveProbesSent"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnDroppedInKeepalive"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnDroppedInPersist"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpConnDrainedByNoMemory"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpAckOnlyPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxWindowProbes"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxURGPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxWindowUpdateOnlyPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxControlPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDroppedByNoMemory"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxTooShort"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDupOnlyPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDupOnlyOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDupDataPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDupOctetsInPartDupPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDataAfterWindowPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDataAfterWindowOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxPktsAfterConnClose"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxWindowProbesPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxDupAcks"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxAcksForUnsentData"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxAcksPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpOctetAckedByRxAcks"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRxWindowUpdatePkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpSegDropByPAWS"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxSackFackDataPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpTxSackFackDataOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRetxSackFackDataPkts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRetxSackFackDataOctets"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpSackFackConnClosed"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpRetxSackFackTimeouts"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpHdrPredictOkForAcks"), ("CISCO-FC-TUNNEL-MIB", "cftIfTcpHdrPredictOkForDataPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cftIfTcpExtGroup = cftIfTcpExtGroup.setStatus('current')
if mibBuilder.loadTexts: cftIfTcpExtGroup.setDescription('The collection of objects which are used to monitor the status and statistics information of the TCP stack for the tunneled Fiber Channel interface. This extension group provides more detail and specific statistics information that not all the TCP stack will support.')
mibBuilder.exportSymbols("CISCO-FC-TUNNEL-MIB", cftIfTcpSegsSucceedToGetRTT=cftIfTcpSegsSucceedToGetRTT, cftTcpTunnelDataMWS=cftTcpTunnelDataMWS, cftTcpTunnelStatGroup=cftTcpTunnelStatGroup, cftIfTcpConnAccepted=cftIfTcpConnAccepted, cftIfTcpExtEntry=cftIfTcpExtEntry, cftTcpTunnelCmdTxDrops=cftTcpTunnelCmdTxDrops, cftTcpTunnelCmdSrcPort=cftTcpTunnelCmdSrcPort, cftIfTcpRxDataAfterWindowPkts=cftIfTcpRxDataAfterWindowPkts, cftIfTcpTxURGPkts=cftIfTcpTxURGPkts, cftTcpTunnelDataKeepAliveTime=cftTcpTunnelDataKeepAliveTime, cftIfTcpRetransmitTimeout=cftIfTcpRetransmitTimeout, cftIfTcpRetxSackFackDataOctets=cftIfTcpRetxSackFackDataOctets, cftIfTcpAckOnlyPkts=cftIfTcpAckOnlyPkts, cftTcpTunnelDestIpType=cftTcpTunnelDestIpType, cftTcpTunnelTable=cftTcpTunnelTable, cftIfTcpRxAcksForUnsentData=cftIfTcpRxAcksForUnsentData, cftTcpTunnelCmdTxPkts=cftTcpTunnelCmdTxPkts, cftIfTcpRxBadOffsetPkts=cftIfTcpRxBadOffsetPkts, cftIfTcpKeepaliveTimeout=cftIfTcpKeepaliveTimeout, cftIfTcpConnDroppedInPersist=cftIfTcpConnDroppedInPersist, cftIfTcpEmbryonicConnDrops=cftIfTcpEmbryonicConnDrops, cftIfTcpRxDupOctetsInPartDupPkts=cftIfTcpRxDupOctetsInPartDupPkts, cftTunnelMIBComplianceV01=cftTunnelMIBComplianceV01, cftTcpTunnelName=cftTcpTunnelName, cftIfTcpRxDroppedByNoMemory=cftIfTcpRxDroppedByNoMemory, cftTcpTunnelEntry=cftTcpTunnelEntry, cftTcpTunnelCmdRxSegmentOctets=cftTcpTunnelCmdRxSegmentOctets, cftIfTcpTxWindowProbes=cftIfTcpTxWindowProbes, cftTunnelMIBCompliances=cftTunnelMIBCompliances, cftTcpTunnelDataSrcPort=cftTcpTunnelDataSrcPort, PYSNMP_MODULE_ID=ciscoFiberChannelTunnelMIB, cftIfTcpSegsTryToGetRTT=cftIfTcpSegsTryToGetRTT, cftIfTcpTxPkts=cftIfTcpTxPkts, cftTcpTunnelDataTxPkts=cftTcpTunnelDataTxPkts, cftIfTcpRxDupDataPkts=cftIfTcpRxDupDataPkts, cftTcpTunnelConfigGroup=cftTcpTunnelConfigGroup, cftTcpTunnelStatsEntry=cftTcpTunnelStatsEntry, cftIfTcpRetxDataOctets=cftIfTcpRetxDataOctets, cftIfTcpRxPkts=cftIfTcpRxPkts, cftIfTcpRxCcksumErrPkts=cftIfTcpRxCcksumErrPkts, cftIfTcpSackFackConnClosed=cftIfTcpSackFackConnClosed, cftIfTcpKeepaliveProbesSent=cftIfTcpKeepaliveProbesSent, cftIfTcpIndex=cftIfTcpIndex, cftTcpTunnelCmdDestPort=cftTcpTunnelCmdDestPort, cftTcpTunnelObjects=cftTcpTunnelObjects, cftIfTcpRxDupOnlyOctets=cftIfTcpRxDupOnlyOctets, cftTcpTunnelDataSelectiveAck=cftTcpTunnelDataSelectiveAck, ciscoFiberChannelTunnelMIB=ciscoFiberChannelTunnelMIB, cftTcpTunnelCmdRxPrestufOctets=cftTcpTunnelCmdRxPrestufOctets, cftTcpTunnelCmdKeepAliveTime=cftTcpTunnelCmdKeepAliveTime, cftIfTcpPersistTimeout=cftIfTcpPersistTimeout, cftTcpTunnelDataRxPrestufOctets=cftTcpTunnelDataRxPrestufOctets, cftIfTcpSegDropByPAWS=cftIfTcpSegDropByPAWS, ciscoFCTunnelMIBObjects=ciscoFCTunnelMIBObjects, cftMaxTcpTunnels=cftMaxTcpTunnels, cftIfTcpConnInit=cftIfTcpConnInit, cftTcpTunnelCmdTxOctets=cftTcpTunnelCmdTxOctets, cftTcpTunnelDataRxPoststufOctets=cftTcpTunnelDataRxPoststufOctets, cftTcpTunnelDataConnectStatus=cftTcpTunnelDataConnectStatus, cftIfTcpTxSackFackDataOctets=cftIfTcpTxSackFackDataOctets, cftIfTcpRxAcksPkts=cftIfTcpRxAcksPkts, cftIfTcpTxDataOctets=cftIfTcpTxDataOctets, cftIfTcpRxInSequenceOctets=cftIfTcpRxInSequenceOctets, cftIfTcpRxWindowUpdatePkts=cftIfTcpRxWindowUpdatePkts, cftIfTcpConnDroppedRxTimeout=cftIfTcpConnDroppedRxTimeout, cftIfTcpConnDrops=cftIfTcpConnDrops, cftTcpTunnelSrcIpType=cftTcpTunnelSrcIpType, cftIfTcpOctetAckedByRxAcks=cftIfTcpOctetAckedByRxAcks, cftIfTcpRetxSackFackDataPkts=cftIfTcpRetxSackFackDataPkts, cftIfTcpTxControlPkts=cftIfTcpTxControlPkts, cftTcpTunnelCmdConnectStatus=cftTcpTunnelCmdConnectStatus, cftIfTcpRxPktsAfterConnClose=cftIfTcpRxPktsAfterConnClose, cftIfTcpExtGroup=cftIfTcpExtGroup, cftIfTcpRetxSackFackTimeouts=cftIfTcpRetxSackFackTimeouts, cftIfTcpRetxDataPkts=cftIfTcpRetxDataPkts, cftTcpTunnelDataRxSegmentOctets=cftTcpTunnelDataRxSegmentOctets, cftIfTcpGroup=cftIfTcpGroup, cftIfTcpConnClosed=cftIfTcpConnClosed, cftIfTcpTxDataPkts=cftIfTcpTxDataPkts, cftIfTcpRxDupOnlyPkts=cftIfTcpRxDupOnlyPkts, cftIfTcpDelayedAcksSent=cftIfTcpDelayedAcksSent, cftTcpTunnelDataTxOctets=cftTcpTunnelDataTxOctets, cftIfTcpRxDataAfterWindowOctets=cftIfTcpRxDataAfterWindowOctets, cftTcpTunnelCmdRxPoststufOctets=cftTcpTunnelCmdRxPoststufOctets, cftIfTcpRxWindowProbesPkts=cftIfTcpRxWindowProbesPkts, cftTcpTunnelDataTxDrops=cftTcpTunnelDataTxDrops, cftTcpTunnelSrcIp=cftTcpTunnelSrcIp, cftIfTcpExtTable=cftIfTcpExtTable, cftIfTcpEntry=cftIfTcpEntry, cftIfTcpHdrPredictOkForAcks=cftIfTcpHdrPredictOkForAcks, cftIfTcpTable=cftIfTcpTable, cftTcpTunnelStatsTable=cftTcpTunnelStatsTable, cftIfTcpRxDupAcks=cftIfTcpRxDupAcks, cftTcpTunnelDataDestPort=cftTcpTunnelDataDestPort, cftIfTcpRxTooShort=cftIfTcpRxTooShort, cftFiberChannelIf=cftFiberChannelIf, cftTcpTunnelOperStatus=cftTcpTunnelOperStatus, cftTcpTunnelCmdSelectiveAck=cftTcpTunnelCmdSelectiveAck, cftIfTcpConnDrainedByNoMemory=cftIfTcpConnDrainedByNoMemory, cftIfTcpRxOutOfOrderOctets=cftIfTcpRxOutOfOrderOctets, cftIfTcpConnEstablished=cftIfTcpConnEstablished, cftIfTcpRxOutOfOrderPkts=cftIfTcpRxOutOfOrderPkts, cftTunnelMIBGroups=cftTunnelMIBGroups, cftTcpTunnelCmdMWS=cftTcpTunnelCmdMWS, cftIfTcpRxInSequencePkts=cftIfTcpRxInSequencePkts, ciscoFCTunnelMIBConform=ciscoFCTunnelMIBConform, cftIfTcpTxSackFackDataPkts=cftIfTcpTxSackFackDataPkts, cftIfTcpHdrPredictOkForDataPkts=cftIfTcpHdrPredictOkForDataPkts, cftTcpTunnelStatus=cftTcpTunnelStatus, cftTcpTunnelDestIp=cftTcpTunnelDestIp, ciscoFCTunnelMIBNotifi=ciscoFCTunnelMIBNotifi, cftIfTcpTxWindowUpdateOnlyPkts=cftIfTcpTxWindowUpdateOnlyPkts, cftIfTcpConnDroppedInKeepalive=cftIfTcpConnDroppedInKeepalive)
