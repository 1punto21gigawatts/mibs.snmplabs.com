#
# PySNMP MIB module NETSWITCH-DMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSWITCH-DMA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Integer32, Counter32, ObjectIdentity, IpAddress, Unsigned32, Counter64, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Bits, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "Counter32", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter64", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Bits", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
icf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14))
hpicfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11))
hpicfSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5))
hpSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1))
hpOpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 1))
hpHwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2))
hpDMAStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2))
hpDMAReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpDMAReset.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAReset.setDescription('It resets all DMA counters to 0 by providing 1')
hpDMAFrameRcvcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameRcvcnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAFrameRcvcnt.setDescription('This object is a count of the number of frames that have been received by the switch. Only good CRC frames are included.')
hpDMAOctetsRcvcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsRcvcnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAOctetsRcvcnt.setDescription('This object is a count of the number of octets that have been received by the switch. This counter is incremented by the size of each frame received by the switch.')
hpDMAPrevRcvFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevRcvFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPrevRcvFrames.setDescription('This object is a copy of hpDMARcvFrames sampled every second.')
hpDMAFrameRcvPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameRcvPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAFrameRcvPerSec.setDescription('This object is a count of the number of frames that were received by the switch in one second. It is updated every second.')
hpDMAPeakRcvFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakRcvFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPeakRcvFrames.setDescription('This object is a count of the highest hpDMAFrameRcvPerSec that have been recieved by the switch.')
hpDMAPrevRcvOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevRcvOctets.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPrevRcvOctets.setDescription('This object is a copy of hpDMAPrevRcvFrames sampled every second.')
hpDMAOctetsRcvPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsRcvPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAOctetsRcvPerSec.setDescription('This object is a count of the number of octets that were received by the switch in one second. It is updated every second.')
hpDMAPeakRcvOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakRcvOctets.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPeakRcvOctets.setDescription('This object is a count of the highest hpDMARcvOctets that have been received by the switch.')
hpDMAFrameXmtcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameXmtcnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAFrameXmtcnt.setDescription('This counter is incremented by one for each frame successfully transmitted from the switch.')
hpDMAOctetsXmtcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsXmtcnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAOctetsXmtcnt.setDescription('This object is a count of the number of octets that have been transmitted by the switch.')
hpDMAPrevXmtFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevXmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPrevXmtFrames.setDescription('This object is a copy of hpDMAXmtFrames sampled every second.')
hpDMAFrameXmtPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameXmtPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAFrameXmtPerSec.setDescription('This object is a count of the number of frames that were transmitted by the switch in one second. It is updated every second.')
hpDMAPeakXmtFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakXmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPeakXmtFrames.setDescription('This object is a count of the highest hpDMAFrameXmtPerSec that have been transmitted by the switch.')
hpDMAPrevXmtOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPrevXmtOctets.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPrevXmtOctets.setDescription('This object is a copy of hpDMAPrevXmtFrames sampled every second.')
hpDMAOctetsXmtPerSec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAOctetsXmtPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAOctetsXmtPerSec.setDescription('This object is a count of the number of octets that were transmitted by the switch in one second. It is updated every second.')
hpDMAPeakXmtOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAPeakXmtOctets.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAPeakXmtOctets.setDescription('This object is a count of the highest hpDMAXmtOctets that has been transmitted by the switch.')
hpDMAFrameClippedcnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameClippedcnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAFrameClippedcnt.setDescription('This object is a count of number of outbound frames dropped by the switch due to transmit ring overflow.')
hpDMAFrameClippedOccurance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAFrameClippedOccurance.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAFrameClippedOccurance.setDescription('This object is a count of the number of times the transmit ring overflowed.')
hpDMAMissBufCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 2, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDMAMissBufCnt.setStatus('mandatory')
if mibBuilder.loadTexts: hpDMAMissBufCnt.setDescription('This counter is incremented when buffer allocation fails.')
mibBuilder.exportSymbols("NETSWITCH-DMA-MIB", hpDMAPeakRcvOctets=hpDMAPeakRcvOctets, hpDMAPeakXmtFrames=hpDMAPeakXmtFrames, hpDMAOctetsRcvcnt=hpDMAOctetsRcvcnt, hpicfObjects=hpicfObjects, hpDMAFrameClippedOccurance=hpDMAFrameClippedOccurance, hpDMAOctetsRcvPerSec=hpDMAOctetsRcvPerSec, hpDMAPrevXmtOctets=hpDMAPrevXmtOctets, hpDMAFrameRcvcnt=hpDMAFrameRcvcnt, hpDMAFrameRcvPerSec=hpDMAFrameRcvPerSec, hpDMAFrameXmtcnt=hpDMAFrameXmtcnt, hpDMAPrevRcvFrames=hpDMAPrevRcvFrames, hpDMAFrameXmtPerSec=hpDMAFrameXmtPerSec, hpDMAPeakRcvFrames=hpDMAPeakRcvFrames, hpHwSystem=hpHwSystem, hpDMAPrevRcvOctets=hpDMAPrevRcvOctets, icf=icf, hpOpSystem=hpOpSystem, hp=hp, hpDMAStats=hpDMAStats, hpDMAOctetsXmtcnt=hpDMAOctetsXmtcnt, hpDMAPeakXmtOctets=hpDMAPeakXmtOctets, hpDMAMissBufCnt=hpDMAMissBufCnt, hpSwitch=hpSwitch, nm=nm, hpDMAFrameClippedcnt=hpDMAFrameClippedcnt, hpDMAOctetsXmtPerSec=hpDMAOctetsXmtPerSec, hpDMAPrevXmtFrames=hpDMAPrevXmtFrames, hpicfSwitch=hpicfSwitch, hpDMAReset=hpDMAReset)
