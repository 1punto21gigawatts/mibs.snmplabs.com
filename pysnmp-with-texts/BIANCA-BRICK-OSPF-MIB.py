#
# PySNMP MIB module BIANCA-BRICK-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, NotificationType, Bits, ObjectIdentity, Counter32, Gauge32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "NotificationType", "Bits", "ObjectIdentity", "Counter32", "Gauge32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "Counter64", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
ospfErr = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 11))
ospfErrOspfBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfBadVersion.setDescription('Counts the number of OSPF packets received with bad version number.')
ospfErrOspfBadPacketType = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadPacketType.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfBadPacketType.setDescription('Counts the number of OSPF packets received with bad packet type.')
ospfErrOspfBadChecksum = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfBadChecksum.setDescription('Counts the number of OSPF packets received with bad checksum.')
ospfErrIpBadDestination = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrIpBadDestination.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrIpBadDestination.setDescription('Counts the number of OSPF packets received with bad destination IP address.')
ospfErrOspfBadAreaId = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfBadAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfBadAreaId.setDescription('Counts the number of OSPF packets with the wrong area field.')
ospfErrOspfAuthenticationFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfAuthenticationFailed.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfAuthenticationFailed.setDescription('Counts the number of OSPF packets with wrong authentication.')
ospfErrOspfUnknownNeighbor = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfUnknownNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfUnknownNeighbor.setDescription('Counts the number of OSPF packets received from an unknown neighbor.')
ospfErrHelloNetmaskMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloNetmaskMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrHelloNetmaskMismatch.setDescription('Counts the number of Hello packets received with wrong network mask.')
ospfErrHelloDeadTimerMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloDeadTimerMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrHelloDeadTimerMismatch.setDescription('Counts the number of OSPF Hello packets where the DeadTimer was not equal to the DeadTimer of the associated interface.')
ospfErrHelloTimerMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloTimerMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrHelloTimerMismatch.setDescription('Counts the number of OSPF Hello packets where the HelloTimer was not equal to the DeadTimer of the associated interface.')
ospfErrHelloOptionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrHelloOptionMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrHelloOptionMismatch.setDescription('Counts the number of OSPF Hello packets with bad options.')
ospfErrOspfRouterIdConfusion = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfRouterIdConfusion.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfRouterIdConfusion.setDescription('Counts the number of packets received that used our own router id.')
ospfErrOspfUnknownLsaType = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrOspfUnknownLsaType.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrOspfUnknownLsaType.setDescription('Counts the number of unknown LSAs received.')
ospfErrDdOptionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrDdOptionMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrDdOptionMismatch.setDescription('Counts the number of OSPF DD packets with bad options.')
ospfErrDdNeighborStateLow = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrDdNeighborStateLow.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrDdNeighborStateLow.setDescription('Counts the number of OSPF DD packets received then the neighbor was in the wrong state.')
ospfErrLsackBadAck = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsackBadAck.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsackBadAck.setDescription('Counts the number of OSPF LS Acknowledge packets received that were not exactly found on the retransmission list of that neighbor, i.e. with the wrong sequence number or checksum.')
ospfErrLsackDuplicateAck = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsackDuplicateAck.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsackDuplicateAck.setDescription('Counts the number of OSPF LS Acknowledge packets received that were not found on the retransmission list of that neighbor.')
ospfErrLsreqBadRequest = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsreqBadRequest.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsreqBadRequest.setDescription('Counts the number of requests for LSAs that were not found in the database.')
ospfErrLsreqNeighborStateLow = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsreqNeighborStateLow.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsreqNeighborStateLow.setDescription('Counts the number of OSPF LS Request packets received then the neighbor was in the wrong state.')
ospfErrLsupdNeighborStateLow = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdNeighborStateLow.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsupdNeighborStateLow.setDescription('Counts the number of OSPF LS Update packets received then the neighbor was in the wrong state.')
ospfErrLsupdBadLsaChecksum = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdBadLsaChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsupdBadLsaChecksum.setDescription('Counts the number of OSPF LS Update packets with bad checksum.')
ospfErrLsupdNewerSelfgenLsa = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdNewerSelfgenLsa.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsupdNewerSelfgenLsa.setDescription('The router received an instance of one of its self-originated advertisements that is considered to be more recent.')
ospfErrLsupdLessRecentLsa = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfErrLsupdLessRecentLsa.setStatus('mandatory')
if mibBuilder.loadTexts: ospfErrLsupdLessRecentLsa.setDescription('The router received an instance of an advertisement that is considered to be less recent than the database copy.')
mibBuilder.exportSymbols("BIANCA-BRICK-OSPF-MIB", enterprises=enterprises, ospfErrLsupdNewerSelfgenLsa=ospfErrLsupdNewerSelfgenLsa, private=private, ospfErrOspfBadPacketType=ospfErrOspfBadPacketType, ospfErrLsreqBadRequest=ospfErrLsreqBadRequest, bintec=bintec, ospfErrLsupdBadLsaChecksum=ospfErrLsupdBadLsaChecksum, ospfErrHelloNetmaskMismatch=ospfErrHelloNetmaskMismatch, biboip=biboip, dod=dod, ospfErrHelloDeadTimerMismatch=ospfErrHelloDeadTimerMismatch, ospfErrLsackBadAck=ospfErrLsackBadAck, ospfErrOspfBadAreaId=ospfErrOspfBadAreaId, ospfErrDdOptionMismatch=ospfErrDdOptionMismatch, ospfErrLsupdNeighborStateLow=ospfErrLsupdNeighborStateLow, ospfErrHelloOptionMismatch=ospfErrHelloOptionMismatch, internet=internet, org=org, ospfErrDdNeighborStateLow=ospfErrDdNeighborStateLow, ospfErrOspfBadChecksum=ospfErrOspfBadChecksum, ospfErrOspfUnknownLsaType=ospfErrOspfUnknownLsaType, ospfErrLsackDuplicateAck=ospfErrLsackDuplicateAck, bibo=bibo, ospfErrIpBadDestination=ospfErrIpBadDestination, ospfErrOspfAuthenticationFailed=ospfErrOspfAuthenticationFailed, ospfErrLsupdLessRecentLsa=ospfErrLsupdLessRecentLsa, ospfErr=ospfErr, ospfErrLsreqNeighborStateLow=ospfErrLsreqNeighborStateLow, ospfErrHelloTimerMismatch=ospfErrHelloTimerMismatch, ospfErrOspfBadVersion=ospfErrOspfBadVersion, ospfErrOspfRouterIdConfusion=ospfErrOspfRouterIdConfusion, ospfErrOspfUnknownNeighbor=ospfErrOspfUnknownNeighbor)
