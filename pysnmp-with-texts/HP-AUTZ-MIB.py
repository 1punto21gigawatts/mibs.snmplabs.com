#
# PySNMP MIB module HP-AUTZ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-AUTZ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Unsigned32, NotificationType, Integer32, Gauge32, Counter32, MibIdentifier, ObjectIdentity, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "NotificationType", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "ObjectIdentity", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "TimeTicks")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
hpSwitchAuthorizationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32))
hpSwitchAuthorizationMIB.setRevisions(('2017-03-16 00:00', '2016-10-20 00:00', '2016-05-09 00:00', '2016-01-07 00:00', '2014-08-04 00:00', '2011-02-07 00:00', '2007-08-29 00:00', '2005-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpSwitchAuthorizationMIB.setRevisionsDescriptions(('Added hpSwitchAutzUserRoleDownloadedEnabled and changed hpSwitchAutzUserRoleType to support downloadable user role', 'Added hpSwitchAutzUserRoleTaggedVlanId and hpSwitchAutzUserRoleTaggedVlanName to support tagged VLAN in user role', 'Added hpSwitchAutzUserRoleTunneledNodeServerRedirect and hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole to support redirect user traffic to user tunnel.', 'Added hpSwitchAutzUserRole.', "Added hpSwitchAutzServicePrimaryMethod hpSwitchAutzServiceCommandsLevel to support 'auto' authorization and command access level.", 'Added hpSwitchLocalMgmtPrivGroupsTable, hpSwitchLocalMgmtPrivCommandsTable.', 'Added hpicfSwitchAuthServerFail notification', 'Initial version.',))
if mibBuilder.loadTexts: hpSwitchAuthorizationMIB.setLastUpdated('201703160000Z')
if mibBuilder.loadTexts: hpSwitchAuthorizationMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpSwitchAuthorizationMIB.setContactInfo('Hewlett Packard Enterprise Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpSwitchAuthorizationMIB.setDescription('This MIB module contains the definitions of objects for managing the user authorization service on HP networking devices.')
class HpAutzUserRoleName(TextualConvention, OctetString):
    description = "User role name type. All printable ASCII characters are allowed except '.', ' ', and '~'."
    status = 'current'
    displayHint = '63a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 63)

hpicfSwitchAuthorizationNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 0))
hpicfSwitchAuthServerFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 0, 1)).setObjects(("HP-AUTZ-MIB", "hpicfSwitchAuthServerType"), ("HP-AUTZ-MIB", "hpicfSwitchAuthServerIPType"), ("HP-AUTZ-MIB", "hpicfSwitchAuthServerIP"))
if mibBuilder.loadTexts: hpicfSwitchAuthServerFail.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthServerFail.setDescription('This notification indicates that the specified server is not reachable.')
hpSwitchAuthorizationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1))
hpSwitchAutzServiceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 1), )
if mibBuilder.loadTexts: hpSwitchAutzServiceTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzServiceTable.setDescription('The (conceptual) table listing the authorization service types.')
hpSwitchAutzServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 1, 1), ).setIndexNames((0, "HP-AUTZ-MIB", "hpSwitchAutzServiceType"))
if mibBuilder.loadTexts: hpSwitchAutzServiceEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzServiceEntry.setDescription('An entry (conceptual row) in the hpSwitchAutzServiceTable.')
hpSwitchAutzServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commands", 1), ("exec", 2), ("network", 3))))
if mibBuilder.loadTexts: hpSwitchAutzServiceType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzServiceType.setDescription('Signifies the authorization service type for which this entry contains configuration information.')
hpSwitchAutzServicePrimaryMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local", 1), ("tacacs", 2), ("radius", 3), ("none", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutzServicePrimaryMethod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzServicePrimaryMethod.setDescription('The primary method used for authorization. This object can be set only when the authorization service type is command. A value of local (1) indicates that authorization is performed locally. A value of tacacs (2) indicates that authorization is performed using TACACS+. A value of radius (3) indicates that authorization is performed using RADIUS. A value of none (4) indicates that authorization is not performed. A value of auto (5) indicates that authorization is performed by the same protocol that is configured for authentication.')
hpSwitchAutzServiceSecondaryMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutzServiceSecondaryMethod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzServiceSecondaryMethod.setDescription('Specifies the secondary (backup) method used for authorization.')
hpSwitchAutzServiceCommandsLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("managerlevelonly", 2))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutzServiceCommandsLevel.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzServiceCommandsLevel.setDescription("This object specifies the command level that requires authorization. A value of all (1) indicates that authorization is required for all commands. A value of managerLevelOnly (2) indicates that the authorization is required only for manager level commands. This object is only valid when the value of hpSwitchAutzServiceType is 'commands'. The default is 'all'.")
hpicfSwitchAuthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 2))
hpicfSwitchAuthServerType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2), ("other", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSwitchAuthServerType.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthServerType.setDescription('Authorization server type reported in hpicfSwitchAuthorization notifications.')
hpicfSwitchAuthServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 2, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSwitchAuthServerIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthServerIPType.setDescription('InetAddressType of the address reported in hpicfSwitchAuthServerIP.')
hpicfSwitchAuthServerIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 2, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfSwitchAuthServerIP.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthServerIP.setDescription('This object is used in an hpicfSwitchAuthorizationNotification to report the IP address of the affected server.')
hpSwitchAuthConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 3))
hpicfSwitchAuthServerNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchAuthServerNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthServerNotifyEnable.setDescription('The operational status of hpicfSwitchAuthServerFail notifications. The default value is 1 (Enabled). A value of 2 represents Disabled. Writing this object requires authentication, such as provided by SNMPv3.')
hpSwitchAuthLocalPrivConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4))
hpSwitchLocalMgmtPrivGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 1), )
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupsTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupsTable.setDescription('This table lists the local management privilege group names.')
hpSwitchLocalMgmtPrivGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 1, 1), ).setIndexNames((0, "HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivGroupIndex"))
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupsEntry.setDescription('Local Management Groups entry.')
hpSwitchLocalMgmtPrivGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupIndex.setDescription("The index value which uniquely identifies a row in the group table. The values, One (1) is reserved for a predefined manager group, Two (2) is reserved for usernames that are not assigned to a group. The privileges for usernames that do not have a group assignment is the same as operator'. ")
hpSwitchLocalMgmtPrivGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupName.setDescription('The name of a given Local Management server group.')
hpSwitchLocalMgmtPrivGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGroupStatus.setDescription('The status of the local management privilege group row.')
hpSwitchLocalMgmtPrivCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2), )
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCommandsTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCommandsTable.setDescription('This table lists the local management Privilege Command Match strings.')
hpSwitchLocalMgmtPrivCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2, 1), ).setIndexNames((0, "HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivGroupIndex"), (0, "HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivCmdSequenceIndex"))
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCommandsEntry.setDescription('Local Management Commands entry.')
hpSwitchLocalMgmtPrivCmdSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdSequenceIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdSequenceIndex.setDescription('The index value which uniquely identifies a row in the command table. See the documentation for the number of sequences allowed.')
hpSwitchLocalMgmtPrivCmdMatchStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdMatchStr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdMatchStr.setDescription('The syntax of a command within a group. See the documentation for the maximum length of the command name.')
hpSwitchLocalMgmtPrivCmdPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdPriv.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdPriv.setDescription('The privilege associated with commands that match the command string.')
hpSwitchLocalMgmtPrivCmdSendLog = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdSendLog.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdSendLog.setDescription('Determines if a log message is generated when commands matching this command string are attempted.')
hpSwitchLocalMgmtPrivCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 4, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivCmdStatus.setDescription('The status of the local management privilege command row.')
hpSwitchAutzUserRole = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5))
hpSwitchAutzUserRoleEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleEnabled.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleEnabled.setDescription('Enable user role-based authorization. When enabled, authenticated clients are assigned roles that determine authorization level. When disabled, roles are not used.')
hpSwitchAutzUserRoleInitialRoleName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 2), HpAutzUserRoleName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleInitialRoleName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleInitialRoleName.setDescription('The value of this object must match the hpSwitchAutzUserRoleName of an entry in the hpSwithcAutzUserRoleTable.')
hpSwitchAutzUserRoleDownloadedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleDownloadedEnabled.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleDownloadedEnabled.setDescription('This object enables or disables the downlodable user role feature. The hpSwitchAutzUserRoleEnabled object should be enabled before configuring this object.')
hpSwitchAutzUserRoleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3), )
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTable.setDescription('A table of configured user roles. The maximum number of entries is implementation dependent.')
hpSwitchAutzUserRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1), ).setIndexNames((0, "HP-AUTZ-MIB", "hpSwitchAutzUserRoleName"))
if mibBuilder.loadTexts: hpSwitchAutzUserRoleEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleEntry.setDescription('A user role table entry.')
hpSwitchAutzUserRoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 1), HpAutzUserRoleName())
if mibBuilder.loadTexts: hpSwitchAutzUserRoleName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleName.setDescription('The name of this user role.')
hpSwitchAutzUserRoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleRowStatus.setDescription("The Row Status of this entry. To create a new entry, send an SNMP SET request with a RowStatus of 'createAndGo'. active - the entry is ready to use. notInService - not valid for this table. notReady - the entry is not fully configured. createAndGo - create a new entry. Entries of hpSwitchAutzUserRoleType 'downloaded' cannot be created or modified. createAndWait - not valid for this table. delete - delete the entry. Entries of hpSwitchAutzUserRoleType 'predefined' and the entry assigned to hpSwitchAutzUserRoleInitialRoleName cannot be deleted.")
hpSwitchAutzUserRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("predefined", 1), ("local", 2), ("downloaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleType.setDescription('This object defines different user role types supported. Predefined user roles cannot be modified or deleted. Downloaded user roles cannot be modified or created.')
hpSwitchAutzUserRoleCaptivePortalProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleCaptivePortalProfileName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleCaptivePortalProfileName.setDescription("The name of the captive portal profile (hpicfUsrAuthCaptivePortalProfileName) associated with this role. All printable ASCII characters are allowed except '.', ' ', and '~'.")
hpSwitchAutzUserRoleIngressUserPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleIngressUserPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleIngressUserPolicyName.setDescription("The name associated with hpicfGppcv2NpPolicyName of hpicfGppcv2NpSubType 'policyUser' assigned to this role.")
hpSwitchAutzUserRoleReauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleReauthPeriod.setDescription('Specifies the period, in seconds, at which an authenticated client must re-authenticate. A value of 0 signifies that an authenticated client will never have to re-authenticate.')
hpSwitchAutzUserRoleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 7), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleVlanId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleVlanId.setDescription('The untagged VLAN ID for this role. A value of 0 indicates unset. This column is mutually exclusive with hpSwitchAutzUserRoleVlanName.')
hpSwitchAutzUserRoleVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleVlanName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleVlanName.setDescription('The untagged VLAN name for this role. This column is mutually exclusive with hpSwitchAutzUserRoleVlanId.')
hpSwitchAutzUserRoleTunneledNodeServerRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTunneledNodeServerRedirect.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTunneledNodeServerRedirect.setDescription("Enables or disables the traffic redirection to the tunnel. If the MIB object 'hpSwitchAutzUserRoleCaptivePortalProfileName' is already enabled and an attempt is made to enable this object, it will result in an error. The MIB object can be enabled only if there is a tagged or untagged VLAN present in the user role.")
hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole.setDescription("The secondary role associated with this user role. This will be applied to user traffic at tunnel-node server end. All printable ASCII characters are allowed except '.', ' ' and '~'. This object returns an error if the secondary role name is greater than 63 characters.")
hpSwitchAutzUserRoleTaggedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 11), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTaggedVlanId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTaggedVlanId.setDescription('The tagged VLAN ID for this role. A value of 0 indicates unset. This column is mutually exclusive with hpSwitchAutzUserRoleTaggedVlanName,.')
hpSwitchAutzUserRoleTaggedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 1, 5, 3, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTaggedVlanName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleTaggedVlanName.setDescription('The tagged VLAN name for this role. This column is mutually exclusive with hpSwitchAutzUserRoleTaggedVlanId.')
hpSwitchAuthorizationConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2))
hpSwitchAuthorizationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1))
hpSwitchAuthorizationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 1)).setObjects(("HP-AUTZ-MIB", "hpSwitchAuthorizationConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthorizationMIBCompliance = hpSwitchAuthorizationMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthorizationMIBCompliance.setDescription('The compliance statement for devices implementing the HP-AUTZ-MIB.')
hpSwitchLocalMgmtPrivGrpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 2)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzLocalMgmtPrivGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchLocalMgmtPrivGrpMIBCompliance = hpSwitchLocalMgmtPrivGrpMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGrpMIBCompliance.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchLocalMgmtPrivGrpMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 3)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzLocalMgmtPrivGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchLocalMgmtPrivGrpMIBCompliance1 = hpSwitchLocalMgmtPrivGrpMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivGrpMIBCompliance1.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchAuthorizationObjectsGrpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 4)).setObjects(("HP-AUTZ-MIB", "hpicfSwitchAuthorizationObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthorizationObjectsGrpMIBCompliance = hpSwitchAuthorizationObjectsGrpMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthorizationObjectsGrpMIBCompliance.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchAuthorizationNotificationGrpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 5)).setObjects(("HP-AUTZ-MIB", "hpicfSwitchAuthorizationNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthorizationNotificationGrpMIBCompliance = hpSwitchAuthorizationNotificationGrpMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthorizationNotificationGrpMIBCompliance.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchAutzRoleGrpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 6)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzRoleGrpCompliance = hpSwitchAutzRoleGrpCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAutzRoleGrpCompliance.setDescription('The compliance statement for user roles.')
hpSwitchAutzRoleGrpCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 7)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzRoleGrpCompliance1 = hpSwitchAutzRoleGrpCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAutzRoleGrpCompliance1.setDescription('The compliance statement for user roles.')
hpSwitchAutzRoleGrpCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 8)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzRoleGrpCompliance2 = hpSwitchAutzRoleGrpCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAutzRoleGrpCompliance2.setDescription('The compliance statement for user roles.')
hpSwitchAutzRoleGrpCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 1, 9)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzRoleGrpCompliance3 = hpSwitchAutzRoleGrpCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzRoleGrpCompliance3.setDescription('The compliance statement for user roles.')
hpSwitchAuthorizationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2))
hpSwitchAuthorizationConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 1)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzServicePrimaryMethod"), ("HP-AUTZ-MIB", "hpSwitchAutzServiceSecondaryMethod"), ("HP-AUTZ-MIB", "hpSwitchAutzServiceCommandsLevel"), ("HP-AUTZ-MIB", "hpicfSwitchAuthServerNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthorizationConfigGroup = hpSwitchAuthorizationConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthorizationConfigGroup.setDescription('A collection of objects to support authorization service.')
hpicfSwitchAuthorizationNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 2)).setObjects(("HP-AUTZ-MIB", "hpicfSwitchAuthServerFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSwitchAuthorizationNotificationGroup = hpicfSwitchAuthorizationNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthorizationNotificationGroup.setDescription('A group of switch authorization notifications.')
hpicfSwitchAuthorizationObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 3)).setObjects(("HP-AUTZ-MIB", "hpicfSwitchAuthServerType"), ("HP-AUTZ-MIB", "hpicfSwitchAuthServerIPType"), ("HP-AUTZ-MIB", "hpicfSwitchAuthServerIP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSwitchAuthorizationObjectsGroup = hpicfSwitchAuthorizationObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchAuthorizationObjectsGroup.setDescription('A group of switch authorization objects.')
hpSwitchAutzLocalMgmtPrivGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 4)).setObjects(("HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivGroupName"), ("HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivCmdMatchStr"), ("HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivCmdPriv"), ("HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivCmdSendLog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzLocalMgmtPrivGroup = hpSwitchAutzLocalMgmtPrivGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzLocalMgmtPrivGroup.setDescription('A collection of objects for configuring Local Manangement Privilege Groups')
hpSwitchAutzLocalMgmtPrivGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 5)).setObjects(("HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivCmdStatus"), ("HP-AUTZ-MIB", "hpSwitchLocalMgmtPrivGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzLocalMgmtPrivGroup1 = hpSwitchAutzLocalMgmtPrivGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzLocalMgmtPrivGroup1.setDescription('A collection of objects for configuring Local Mangement Privilege Groups')
hpSwitchAutzUserRoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 6)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleEnabled"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleInitialRoleName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleRowStatus"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleType"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleCaptivePortalProfileName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleIngressUserPolicyName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleReauthPeriod"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanId"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzUserRoleGroup = hpSwitchAutzUserRoleGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleGroup.setDescription('A collection of objects for supporting local user roles.')
hpSwitchAutzUserRoleGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 7)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleEnabled"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleInitialRoleName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleRowStatus"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleType"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleCaptivePortalProfileName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleIngressUserPolicyName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleReauthPeriod"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanId"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTunneledNodeServerRedirect"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzUserRoleGroup1 = hpSwitchAutzUserRoleGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleGroup1.setDescription('A collection of objects for supporting local user roles.')
hpSwitchAutzUserRoleGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 8)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleEnabled"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleInitialRoleName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleRowStatus"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleType"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleCaptivePortalProfileName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleIngressUserPolicyName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleReauthPeriod"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanId"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTunneledNodeServerRedirect"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTaggedVlanId"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTaggedVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzUserRoleGroup2 = hpSwitchAutzUserRoleGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleGroup2.setDescription('A collection of objects for supporting local user roles.')
hpSwitchAutzUserRoleGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 32, 2, 2, 9)).setObjects(("HP-AUTZ-MIB", "hpSwitchAutzUserRoleEnabled"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleInitialRoleName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleRowStatus"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleType"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleCaptivePortalProfileName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleIngressUserPolicyName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleReauthPeriod"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanId"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleVlanName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTunneledNodeServerRedirect"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTaggedVlanId"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleTaggedVlanName"), ("HP-AUTZ-MIB", "hpSwitchAutzUserRoleDownloadedEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAutzUserRoleGroup3 = hpSwitchAutzUserRoleGroup3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAutzUserRoleGroup3.setDescription('A collection of objects for supporting local user roles.')
mibBuilder.exportSymbols("HP-AUTZ-MIB", hpSwitchAutzServiceEntry=hpSwitchAutzServiceEntry, hpicfSwitchAuthServerIPType=hpicfSwitchAuthServerIPType, hpSwitchAutzUserRoleReauthPeriod=hpSwitchAutzUserRoleReauthPeriod, hpSwitchAuthorizationMIBGroups=hpSwitchAuthorizationMIBGroups, hpSwitchAutzRoleGrpCompliance1=hpSwitchAutzRoleGrpCompliance1, hpicfSwitchAuthorizationObjectsGroup=hpicfSwitchAuthorizationObjectsGroup, hpSwitchAutzServiceType=hpSwitchAutzServiceType, hpSwitchLocalMgmtPrivGroupsTable=hpSwitchLocalMgmtPrivGroupsTable, hpSwitchAutzLocalMgmtPrivGroup1=hpSwitchAutzLocalMgmtPrivGroup1, hpSwitchAutzUserRoleGroup=hpSwitchAutzUserRoleGroup, hpSwitchAutzServiceCommandsLevel=hpSwitchAutzServiceCommandsLevel, hpSwitchAuthLocalPrivConfigObjects=hpSwitchAuthLocalPrivConfigObjects, hpSwitchLocalMgmtPrivGrpMIBCompliance=hpSwitchLocalMgmtPrivGrpMIBCompliance, HpAutzUserRoleName=HpAutzUserRoleName, hpSwitchAutzUserRoleVlanName=hpSwitchAutzUserRoleVlanName, hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole=hpSwitchAutzUserRoleTunneledNodeServerSecondaryRole, hpSwitchLocalMgmtPrivGrpMIBCompliance1=hpSwitchLocalMgmtPrivGrpMIBCompliance1, hpSwitchAuthConfigObjects=hpSwitchAuthConfigObjects, hpSwitchAutzLocalMgmtPrivGroup=hpSwitchAutzLocalMgmtPrivGroup, hpSwitchLocalMgmtPrivCmdSequenceIndex=hpSwitchLocalMgmtPrivCmdSequenceIndex, hpSwitchAutzRoleGrpCompliance3=hpSwitchAutzRoleGrpCompliance3, hpicfSwitchAuthServerFail=hpicfSwitchAuthServerFail, hpicfSwitchAuthorizationNotificationGroup=hpicfSwitchAuthorizationNotificationGroup, hpSwitchAutzUserRoleTable=hpSwitchAutzUserRoleTable, PYSNMP_MODULE_ID=hpSwitchAuthorizationMIB, hpSwitchAuthorizationMIBCompliance=hpSwitchAuthorizationMIBCompliance, hpSwitchLocalMgmtPrivCmdMatchStr=hpSwitchLocalMgmtPrivCmdMatchStr, hpSwitchLocalMgmtPrivGroupsEntry=hpSwitchLocalMgmtPrivGroupsEntry, hpSwitchLocalMgmtPrivCmdSendLog=hpSwitchLocalMgmtPrivCmdSendLog, hpSwitchAutzUserRoleName=hpSwitchAutzUserRoleName, hpSwitchAutzRoleGrpCompliance2=hpSwitchAutzRoleGrpCompliance2, hpSwitchAutzUserRoleGroup2=hpSwitchAutzUserRoleGroup2, hpicfSwitchAuthObjects=hpicfSwitchAuthObjects, hpicfSwitchAuthServerType=hpicfSwitchAuthServerType, hpSwitchAutzRoleGrpCompliance=hpSwitchAutzRoleGrpCompliance, hpSwitchAutzUserRoleEntry=hpSwitchAutzUserRoleEntry, hpSwitchAutzUserRoleRowStatus=hpSwitchAutzUserRoleRowStatus, hpSwitchLocalMgmtPrivGroupIndex=hpSwitchLocalMgmtPrivGroupIndex, hpSwitchAutzUserRoleType=hpSwitchAutzUserRoleType, hpSwitchAutzUserRoleTunneledNodeServerRedirect=hpSwitchAutzUserRoleTunneledNodeServerRedirect, hpSwitchAutzUserRoleTaggedVlanName=hpSwitchAutzUserRoleTaggedVlanName, hpSwitchAutzUserRole=hpSwitchAutzUserRole, hpSwitchLocalMgmtPrivCommandsTable=hpSwitchLocalMgmtPrivCommandsTable, hpSwitchAuthorizationMIB=hpSwitchAuthorizationMIB, hpSwitchLocalMgmtPrivCmdPriv=hpSwitchLocalMgmtPrivCmdPriv, hpSwitchLocalMgmtPrivCmdStatus=hpSwitchLocalMgmtPrivCmdStatus, hpSwitchAutzServiceSecondaryMethod=hpSwitchAutzServiceSecondaryMethod, hpSwitchAutzUserRoleInitialRoleName=hpSwitchAutzUserRoleInitialRoleName, hpSwitchAutzServiceTable=hpSwitchAutzServiceTable, hpicfSwitchAuthServerIP=hpicfSwitchAuthServerIP, hpSwitchAuthorizationConformance=hpSwitchAuthorizationConformance, hpSwitchAutzUserRoleTaggedVlanId=hpSwitchAutzUserRoleTaggedVlanId, hpSwitchAutzUserRoleGroup3=hpSwitchAutzUserRoleGroup3, hpSwitchLocalMgmtPrivCommandsEntry=hpSwitchLocalMgmtPrivCommandsEntry, hpSwitchAuthorizationMIBCompliances=hpSwitchAuthorizationMIBCompliances, hpSwitchLocalMgmtPrivGroupStatus=hpSwitchLocalMgmtPrivGroupStatus, hpSwitchAuthorizationConfig=hpSwitchAuthorizationConfig, hpSwitchAutzUserRoleEnabled=hpSwitchAutzUserRoleEnabled, hpicfSwitchAuthorizationNotifications=hpicfSwitchAuthorizationNotifications, hpSwitchAutzUserRoleIngressUserPolicyName=hpSwitchAutzUserRoleIngressUserPolicyName, hpSwitchAutzUserRoleVlanId=hpSwitchAutzUserRoleVlanId, hpSwitchLocalMgmtPrivGroupName=hpSwitchLocalMgmtPrivGroupName, hpSwitchAutzUserRoleCaptivePortalProfileName=hpSwitchAutzUserRoleCaptivePortalProfileName, hpicfSwitchAuthServerNotifyEnable=hpicfSwitchAuthServerNotifyEnable, hpSwitchAuthorizationNotificationGrpMIBCompliance=hpSwitchAuthorizationNotificationGrpMIBCompliance, hpSwitchAuthorizationObjectsGrpMIBCompliance=hpSwitchAuthorizationObjectsGrpMIBCompliance, hpSwitchAutzUserRoleGroup1=hpSwitchAutzUserRoleGroup1, hpSwitchAuthorizationConfigGroup=hpSwitchAuthorizationConfigGroup, hpSwitchAutzUserRoleDownloadedEnabled=hpSwitchAutzUserRoleDownloadedEnabled, hpSwitchAutzServicePrimaryMethod=hpSwitchAutzServicePrimaryMethod)
