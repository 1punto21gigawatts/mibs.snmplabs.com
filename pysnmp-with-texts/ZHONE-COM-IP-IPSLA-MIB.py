#
# PySNMP MIB module ZHONE-COM-IP-IPSLA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-IPSLA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifName, = mibBuilder.importSymbols("IF-MIB", "ifName")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, ObjectIdentity, Bits, Gauge32, Unsigned32, TimeTicks, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Counter32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Bits", "Gauge32", "Unsigned32", "TimeTicks", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Counter32", "MibIdentifier", "Integer32")
DateAndTime, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "RowStatus")
ZhoneRDIndex, rdIndex = mibBuilder.importSymbols("ZHONE-COM-IP-RD-MIB", "ZhoneRDIndex", "rdIndex")
zhoneIp, = mibBuilder.importSymbols("Zhone", "zhoneIp")
zhoneIpSLA = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21))
zhoneIpSLA.setRevisions(('2007-06-05 07:16', '2006-11-16 10:48', '2006-11-03 07:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneIpSLA.setRevisionsDescriptions(('Added PathStatByInterval Table.', 'Removed name simplification.', 'Simplified most leaf names, removing the zhoneIpSLM prefix. Changed some leaf names to clarify their purpose. Modified the markup, correcting the Zhone provisioning model for this feature. Referencing ifIndex made little sense within this feature as IP is tied more to the management database and route domain. Traps have been modified to reference the source IP address for the connection, allowing administrators to track the location of the device originating the static path configuration.',))
if mibBuilder.loadTexts: zhoneIpSLA.setLastUpdated('200611031117Z')
if mibBuilder.loadTexts: zhoneIpSLA.setOrganization('Zhone Technologies')
if mibBuilder.loadTexts: zhoneIpSLA.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com ')
if mibBuilder.loadTexts: zhoneIpSLA.setDescription('This is the MIB Module for IPSLA Feature Configuration and reporting. ')
zhoneIpSLAMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1))
zhoneIpSLAGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLAGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAGlobalEnable.setDescription('This object specifies whether to enable feature actions.')
zhoneIpSLAGlobalPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLAGlobalPollInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAGlobalPollInterval.setDescription('This object specifies the time interval in seconds between the inband IPSLA communications among IPSLA devices.')
zhoneIpSLACosActionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3), )
if mibBuilder.loadTexts: zhoneIpSLACosActionTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionTable.setDescription('This table has the Service Level Agreement (SLA) CoS action configuration options.')
zhoneIpSLACosActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionIndex"))
if mibBuilder.loadTexts: zhoneIpSLACosActionEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionEntry.setDescription('An entry in the IPSLA Action By CoS Configuration Table.')
zhoneIpSLACosActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: zhoneIpSLACosActionIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionIndex.setDescription('There are 8 entries present for each device. actionIndex values 1 to 8 correspond exactly to Class Of Service (CoS) indices 0 to 7.')
zhoneIpSLACosActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionName.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionName.setDescription('The ascii name of the SLA CoS action entry, up to 9 characters in length. Blank names are not allowed.')
zhoneIpSLACosActionTrapOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionTrapOnError.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionTrapOnError.setDescription('Specifies whether a trap is issued when any SLA performance error threshold within this CoS is crossed.')
zhoneIpSLACosActionTimeoutErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionTimeoutErrThresh.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionTimeoutErrThresh.setDescription('Specifies the number of consecutive missed IP SLA responses within this CoS before a zhoneIpSLATimeoutTrap is issued.')
zhoneIpSLACosActionTimeoutClrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionTimeoutClrThresh.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionTimeoutClrThresh.setDescription('Specifies the number of consecutive IPSLA responses within this CoS which must be received before the timeout error condition is cleared.')
zhoneIpSLACosActionLatencyErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionLatencyErrThresh.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionLatencyErrThresh.setDescription('Specifies the 15 sample average roundtrip latency value which must be exceeded within this CoS before a zhoneIpSLALatencyTrap is issued. The value is specified in milliseconds.')
zhoneIpSLACosActionLatencyClrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionLatencyClrThresh.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionLatencyClrThresh.setDescription('Specifies the number of consecutive IPSLA latency samples for which the 15 sample average roundtrip latency must be below the configured SLA latency error threshold within this CoS before the latency error condition is cleared.')
zhoneIpSLACosActionJitterErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionJitterErrThresh.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionJitterErrThresh.setDescription('Specifies the 15 sample roundtrip jitter value which must be exceeded within this CoS before a zhoneIpSLAJitterTrap is issued. The value is specified in milliseconds.')
zhoneIpSLACosActionJitterClrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionJitterClrThresh.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionJitterClrThresh.setDescription('Specifies the number of consecutive IPSLA RTT samples for which the 15 sample roundtrip jitter must be below the configured SLA jitter error threshold within this CoS before the jitter error condition is cleared.')
zhoneIpSLACosActionMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionMetrics.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionMetrics.setDescription('Specifies if Latency and Availability meaurements should be carried out for this CoS. The default is enabled(1).')
zhoneIpSLACosActionPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2048)).clone(64)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosActionPacketSize.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionPacketSize.setDescription('Specifies the minimum IPSLA Ping packet size in bytes. The range is 64 thru 2048 if the target IP device is running IPSLA, 64 thru 512 otherwise.')
zhoneIpSLACosMapTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4), )
if mibBuilder.loadTexts: zhoneIpSLACosMapTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosMapTable.setDescription('This table contains the Service Level Management DSCP-to-CoS mapping.')
zhoneIpSLACosMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosMapDscpIndex"))
if mibBuilder.loadTexts: zhoneIpSLACosMapEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosMapEntry.setDescription('An entry in the IPSLA COS Map Table.')
zhoneIpSLACosMapDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: zhoneIpSLACosMapDscpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosMapDscpIndex.setDescription('There are 64 entries present each representing a DIFFSRV code point (0 thru 63, bits 000000 thru 111111), for each device. dscpIndex values 1 to 64 correspond exactly to DIFFSRV codepoint values 0 to 63.')
zhoneIpSLACosMapCosActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLACosMapCosActionIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosMapCosActionIndex.setDescription('This object is a pointer to the entry in zhoneIpSLACosActionTable. Value 0 indicates that no CoS action is assigned. The map entries recommended in rfc 2597 are present by default.')
zhoneIpSLAStaticPathTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5), )
if mibBuilder.loadTexts: zhoneIpSLAStaticPathTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathTable.setDescription('This table has the list of static Path IP Addresses')
zhoneIpSLAStaticPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathRdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathTargetIP"))
if mibBuilder.loadTexts: zhoneIpSLAStaticPathEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathEntry.setDescription('An entry in the IPSLA Configuration Table.')
zhoneIpSLAStaticPathRdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 1), ZhoneRDIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: zhoneIpSLAStaticPathRdIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathRdIndex.setDescription('Route Domain Index of the target IP address.')
zhoneIpSLAStaticPathTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: zhoneIpSLAStaticPathTargetIP.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathTargetIP.setDescription('Specifies the IP Address of the device which is at the other end of the path.')
zhoneIpSLAStaticPathForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIpSLAStaticPathForwarding.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathForwarding.setDescription("If enabled, all native static IP path entities will include this IP in IPSLA ping messages as a forwarded IP, resulting in remote IPSLA devices' inclusion of this IP as a dynamic IPSLA initiator. Remote IPSLA devices will then act as a proxy for the local IPSLA device in sending out IPSLA pings. Forwarded IPs are NOT propagated past the first remote IPSLA device. Received forwarded IPs are dynamic entries which get aged out unless IPSLA protocol messages are received which contain their IP as a forwarded IP. The agetime is a multiple of the proxying device's global poll-secs (object zhoneIpSLAGlobalPollInterval), based upon a certain maximum of forwarded paths per device and the number of path forwarding messages allowed within the minimum 64-byte IPSLA Ping packet. Valid values are enabled(1), disabled(2).")
zhoneIpSLAStaticPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIpSLAStaticPathState.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathState.setDescription('Specifies if the IPSLA feature actions will be exerted on the current member of the static entry list. This leaf allows the user to toggle the feature per static path without deleting the current static path configuration. Valid values are enabled(1), disabled(2).')
zhoneIpSLAStaticPathRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIpSLAStaticPathRowstatus.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathRowstatus.setDescription('This object is used to create new rows in this table, modify existing rows, and to delete existing rows.')
zhoneIpSLAPathConnectTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6), )
if mibBuilder.loadTexts: zhoneIpSLAPathConnectTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectTable.setDescription('IP Path table for reporting connection statistics.')
zhoneIpSLAPathConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1), ).setIndexNames((0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectEndpointIP"))
if mibBuilder.loadTexts: zhoneIpSLAPathConnectEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectEntry.setDescription('IP Path Connection Status Table.')
zhoneIpSLAPathConnectEndpointIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: zhoneIpSLAPathConnectEndpointIP.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectEndpointIP.setDescription('Specifies the IP Address of the target device which is at the other end of the path.')
zhoneIpSLAPathConnectDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDevName.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDevName.setDescription('Specifies the name of the remote device.')
zhoneIpSLAPathConnectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDevType.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDevType.setDescription('Specifies the type of the remote device.')
zhoneIpSLAPathConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectStatus.setDescription('Specifies the availability status of the remote.')
zhoneIpSLAPathConnectSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectSrcIP.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectSrcIP.setDescription('The object specifies the source discovery Ip Address.')
zhoneIpSLAPathConnectDiscoveryType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDiscoveryType.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectDiscoveryType.setDescription('The object specifies the source discovery type.')
zhoneIpSLAPathConnectUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectUpTime.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectUpTime.setDescription('The object specifies the amount of time in seconds that elapsed since the last transition from Inactive to Active.')
zhoneIpSLAPathConnectPollType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectPollType.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectPollType.setDescription('The object specifies the role played by the local device in collection of latency and availability statistics. Initiator(1) - this is the unit that initiates the IPSLA ping packet used for statistics collection; Responder(2) - this is the unit that returns the IPSLA ping packet sent by the Initiator.')
zhoneIpSLAPathConnectCosMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectCosMismatch.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectCosMismatch.setDescription('The object specifies the number of IPSLA ping packets received which indicate a mismatch between the Class Of Service definitions at the remote unit with those of the local unit.')
zhoneIpSLAPathConnectLastCosActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathConnectLastCosActionIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectLastCosActionIndex.setDescription('The object specifies the COS action Id used within the most recently transmitted IPSLA ping on this connection.')
zhoneIpSLAPathStatByCOSTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7), )
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSTable.setDescription('IP Path Table for reporting round-trip-time stats and dropped responses.')
zhoneIpSLAPathStatByCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSCosActIndex"), (0, "ZHONE-COM-IP-RD-MIB", "rdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSEntry.setDescription('An entry in the IP Path Statistics By COS Table.')
zhoneIpSLAPathStatByCOSCosActIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSCosActIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSCosActIndex.setDescription('Specifies the COS Action Index.')
zhoneIpSLAPathStatByCOSTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSTargetIP.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSTargetIP.setDescription('Specifies the IP Address of the device which is at the other end of the path.')
zhoneIpSLAPathStatByCOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSStatus.setDescription('Specifies the status of the Cos. Writing to this leaf will cause objects zhoneIpSLAPathStatByCOSLastRTT, zhoneIpSLAPathStatByCOSMinRTT, zhoneIpSLAPathStatByCOSAvgRTT, zhoneIpSLAPathStatByCOSMaxRTT, and zhoneIpSLAPathStatByCOSDropResp to be cleared. ')
zhoneIpSLAPathStatByCOSLastRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 4), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSLastRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSLastRTT.setDescription('The object specifies the latest round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit.')
zhoneIpSLAPathStatByCOSMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 5), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSMinRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSMinRTT.setDescription('The object specifies the minimum round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit. This is the least value of the last 15 ping trials.')
zhoneIpSLAPathStatByCOSAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 6), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSAvgRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSAvgRTT.setDescription('The object specifies the average round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit. This is the average value over the last 15 ping trials.')
zhoneIpSLAPathStatByCOSMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 7), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSMaxRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSMaxRTT.setDescription('The object specifies the maximum round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit. This is the greatest value of the last 15 ping trials.')
zhoneIpSLAPathStatByCOSDroppedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSDroppedResp.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSDroppedResp.setDescription('The object specifies the number of IPSLA pings for which a response was not received from the far end device.')
zhoneIpSLAPathStatByIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8), )
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalTable.setDescription("IP Path Table for reporting round-trip-time stats and dropped responses. This table's top index represents one of 96 slices of data taken at 15 minute intervals, allowing the user to track performance over a 24 hour period.")
zhoneIpSLAPathStatByIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1), ).setIndexNames((0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalCosActIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalRdIndex"), (0, "ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalTargetIP"))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalEntry.setDescription('An entry in the IP Path Statistics By Interval and COS Table.')
zhoneIpSLAPathStatByIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalIndex.setDescription('Specifies which of the 96 15-minute interval data slices to report.')
zhoneIpSLAPathStatByIntervalCosActIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalCosActIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalCosActIndex.setDescription('Specifies the COS Action Index.')
zhoneIpSLAPathStatByIntervalRdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 3), ZhoneRDIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 127)))
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalRdIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalRdIndex.setDescription('RdIndex of the entry.')
zhoneIpSLAPathStatByIntervalTargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 4), IpAddress())
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalTargetIP.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalTargetIP.setDescription('Specifies the IP Address of the device which is at the other end of the path.')
zhoneIpSLAPathStatByIntervalDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalDateTime.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalDateTime.setDescription('Describes the date and time the current interval data slice was stored.')
zhoneIpSLAPathStatByIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalStatus.setDescription('Specifies the status of the Cos.')
zhoneIpSLAPathStatByIntervalMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 7), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalMinRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalMinRTT.setDescription('The object specifies the minimum round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit. This is the least value of the last 15 ping trials.')
zhoneIpSLAPathStatByIntervalAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 8), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalAvgRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalAvgRTT.setDescription('The object specifies the average round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit. This is the average value over the last 15 ping trials.')
zhoneIpSLAPathStatByIntervalMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 9), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalMaxRTT.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalMaxRTT.setDescription('The object specifies the maximum round trip latency in milliseconds between this unit and the unit at the far end of the IP Enabled circuit. This is the greatest value of the last 15 ping trials.')
zhoneIpSLAPathStatByIntervalDroppedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalDroppedResp.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalDroppedResp.setDescription('The object specifies the number of IPSLA pings for which a response was not received from the far end device.')
zhoneIpSLATraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2))
zhoneIpSLATrapsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0))
if mibBuilder.loadTexts: zhoneIpSLATrapsPrefix.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLATrapsPrefix.setDescription('Prefix 0 for Zhone IPSLA MIB traps as required by SNMPv2')
zhoneIpSLATimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 1)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSDroppedResp"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTimeoutErrThresh"))
if mibBuilder.loadTexts: zhoneIpSLATimeoutTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLATimeoutTrap.setDescription('This trap is generated whenever zhoneIpSLAPathStatByCOSDropResp exceeds zhoneIpSLACosActionTimeoutErrThresh.')
zhoneIpSLALatencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 2)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSAvgRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionLatencyErrThresh"))
if mibBuilder.loadTexts: zhoneIpSLALatencyTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLALatencyTrap.setDescription('This trap is generated whenever zhoneIpSLAPathStatByCOSAvgRTT exceeds zhoneIpSLACosActionLatencyErrThresh.')
zhoneIpSLAJitterTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 3)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMinRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMaxRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionJitterErrThresh"))
if mibBuilder.loadTexts: zhoneIpSLAJitterTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAJitterTrap.setDescription('This trap is generated whenever (zhoneIpSLAPathStatByCOSMaxRTT - zhoneIpSLAPathStatByCOSMinRTT) exceeds zhoneIpSLACosActionJitterErrThresh.')
zhoneIpSLATimeoutClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 4)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"))
if mibBuilder.loadTexts: zhoneIpSLATimeoutClearTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLATimeoutClearTrap.setDescription('This trap is generated to clear a timeout threshold violation condition.')
zhoneIpSLALatencyClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 5)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"))
if mibBuilder.loadTexts: zhoneIpSLALatencyClearTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLALatencyClearTrap.setDescription('This trap is generated to clear a latency threshold violation condition.')
zhoneIpSLAJitterClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 2, 0, 6)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"))
if mibBuilder.loadTexts: zhoneIpSLAJitterClearTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAJitterClearTrap.setDescription('This trap is generated to clear a jitter threshold violation condition.')
zhoneIpSLAConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3))
zhoneIpSLAMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1))
zhoneIpSLAGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 1)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAGlobalEnable"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAGlobalPollInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAGlobalsGroup = zhoneIpSLAGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAGlobalsGroup.setDescription('The objects determining overall IPSLA behavior.')
zhoneIpSLACosActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 2)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTrapOnError"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTimeoutErrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionTimeoutClrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionLatencyErrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionLatencyClrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionJitterErrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionJitterClrThresh"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionMetrics"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionPacketSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLACosActionGroup = zhoneIpSLACosActionGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACosActionGroup.setDescription('The objects in the IPSLA Cos Action table.')
zhoneIpSLACOSMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 3)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosMapCosActionIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLACOSMapGroup = zhoneIpSLACOSMapGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACOSMapGroup.setDescription('The objects in the IPSLA COS Map table.')
zhoneIpSLAStaticPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 4)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathForwarding"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathState"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathRowstatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAStaticPathGroup = zhoneIpSLAStaticPathGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAStaticPathGroup.setDescription('The objects in the IPSLA Static Path table.')
zhoneIpSLAPathConnectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 5)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectDevName"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectDevType"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectStatus"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectSrcIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectDiscoveryType"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectUpTime"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectPollType"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectCosMismatch"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectLastCosActionIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAPathConnectGroup = zhoneIpSLAPathConnectGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathConnectGroup.setDescription('The objects in the IPSLA Path Connection table.')
zhoneIpSLAPathStatByCOSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 6)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSTargetIP"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSStatus"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSLastRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMinRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSAvgRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSMaxRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSDroppedResp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAPathStatByCOSGroup = zhoneIpSLAPathStatByCOSGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByCOSGroup.setDescription('The objects in the IPSLA Path Stats By COS table.')
zhoneIpSLAPathStatByIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 7)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalDateTime"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalStatus"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalMinRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalAvgRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalMaxRTT"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalDroppedResp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLAPathStatByIntervalGroup = zhoneIpSLAPathStatByIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLAPathStatByIntervalGroup.setDescription('The objects in the IPSLA Path Stats By Interval table.')
zhoneIpSLANotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 1, 8)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLATimeoutTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLALatencyTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAJitterTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLATimeoutClearTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLALatencyClearTrap"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAJitterClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLANotificationGroup = zhoneIpSLANotificationGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLANotificationGroup.setDescription('IPSLA Notifications Group')
zhoneIpSLACompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 2))
zhoneIpSLACompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 4, 1, 21, 3, 2, 1)).setObjects(("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAGlobalsGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACosActionGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLACOSMapGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAStaticPathGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathConnectGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByCOSGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLANotificationGroup"), ("ZHONE-COM-IP-IPSLA-MIB", "zhoneIpSLAPathStatByIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneIpSLACompliance = zhoneIpSLACompliance.setStatus('current')
if mibBuilder.loadTexts: zhoneIpSLACompliance.setDescription('The compliance statement for SNMP entities which support IPSLA configuration.')
mibBuilder.exportSymbols("ZHONE-COM-IP-IPSLA-MIB", zhoneIpSLAMIBGroups=zhoneIpSLAMIBGroups, zhoneIpSLACosActionJitterClrThresh=zhoneIpSLACosActionJitterClrThresh, zhoneIpSLACOSMapGroup=zhoneIpSLACOSMapGroup, zhoneIpSLAPathStatByIntervalGroup=zhoneIpSLAPathStatByIntervalGroup, zhoneIpSLACosActionGroup=zhoneIpSLACosActionGroup, zhoneIpSLAStaticPathTargetIP=zhoneIpSLAStaticPathTargetIP, zhoneIpSLAStaticPathRowstatus=zhoneIpSLAStaticPathRowstatus, zhoneIpSLACosMapDscpIndex=zhoneIpSLACosMapDscpIndex, zhoneIpSLAPathConnectLastCosActionIndex=zhoneIpSLAPathConnectLastCosActionIndex, zhoneIpSLA=zhoneIpSLA, zhoneIpSLAPathStatByCOSTargetIP=zhoneIpSLAPathStatByCOSTargetIP, zhoneIpSLAPathStatByIntervalIndex=zhoneIpSLAPathStatByIntervalIndex, zhoneIpSLAPathStatByIntervalCosActIndex=zhoneIpSLAPathStatByIntervalCosActIndex, zhoneIpSLAPathConnectDevName=zhoneIpSLAPathConnectDevName, zhoneIpSLALatencyTrap=zhoneIpSLALatencyTrap, zhoneIpSLAPathStatByCOSStatus=zhoneIpSLAPathStatByCOSStatus, zhoneIpSLACosActionJitterErrThresh=zhoneIpSLACosActionJitterErrThresh, zhoneIpSLAPathStatByIntervalRdIndex=zhoneIpSLAPathStatByIntervalRdIndex, zhoneIpSLAConformance=zhoneIpSLAConformance, zhoneIpSLAPathStatByIntervalDateTime=zhoneIpSLAPathStatByIntervalDateTime, zhoneIpSLALatencyClearTrap=zhoneIpSLALatencyClearTrap, zhoneIpSLAPathStatByIntervalTable=zhoneIpSLAPathStatByIntervalTable, zhoneIpSLATimeoutClearTrap=zhoneIpSLATimeoutClearTrap, zhoneIpSLACosActionTrapOnError=zhoneIpSLACosActionTrapOnError, zhoneIpSLAStaticPathForwarding=zhoneIpSLAStaticPathForwarding, zhoneIpSLAPathStatByCOSGroup=zhoneIpSLAPathStatByCOSGroup, zhoneIpSLAJitterClearTrap=zhoneIpSLAJitterClearTrap, zhoneIpSLAPathStatByCOSTable=zhoneIpSLAPathStatByCOSTable, zhoneIpSLAGlobalPollInterval=zhoneIpSLAGlobalPollInterval, zhoneIpSLAJitterTrap=zhoneIpSLAJitterTrap, zhoneIpSLATimeoutTrap=zhoneIpSLATimeoutTrap, zhoneIpSLAMibObjects=zhoneIpSLAMibObjects, zhoneIpSLANotificationGroup=zhoneIpSLANotificationGroup, zhoneIpSLAPathConnectCosMismatch=zhoneIpSLAPathConnectCosMismatch, zhoneIpSLAPathStatByCOSAvgRTT=zhoneIpSLAPathStatByCOSAvgRTT, zhoneIpSLACompliance=zhoneIpSLACompliance, zhoneIpSLAPathConnectStatus=zhoneIpSLAPathConnectStatus, zhoneIpSLACosMapEntry=zhoneIpSLACosMapEntry, PYSNMP_MODULE_ID=zhoneIpSLA, zhoneIpSLAPathStatByIntervalStatus=zhoneIpSLAPathStatByIntervalStatus, zhoneIpSLAGlobalsGroup=zhoneIpSLAGlobalsGroup, zhoneIpSLATrapsPrefix=zhoneIpSLATrapsPrefix, zhoneIpSLACosActionPacketSize=zhoneIpSLACosActionPacketSize, zhoneIpSLAStaticPathState=zhoneIpSLAStaticPathState, zhoneIpSLACosActionLatencyErrThresh=zhoneIpSLACosActionLatencyErrThresh, zhoneIpSLACompliances=zhoneIpSLACompliances, zhoneIpSLAPathStatByIntervalAvgRTT=zhoneIpSLAPathStatByIntervalAvgRTT, zhoneIpSLAPathStatByCOSMinRTT=zhoneIpSLAPathStatByCOSMinRTT, zhoneIpSLAPathConnectDiscoveryType=zhoneIpSLAPathConnectDiscoveryType, zhoneIpSLACosActionIndex=zhoneIpSLACosActionIndex, zhoneIpSLAPathConnectUpTime=zhoneIpSLAPathConnectUpTime, zhoneIpSLATraps=zhoneIpSLATraps, zhoneIpSLAPathStatByCOSDroppedResp=zhoneIpSLAPathStatByCOSDroppedResp, zhoneIpSLACosActionEntry=zhoneIpSLACosActionEntry, zhoneIpSLAStaticPathTable=zhoneIpSLAStaticPathTable, zhoneIpSLACosMapCosActionIndex=zhoneIpSLACosMapCosActionIndex, zhoneIpSLACosActionMetrics=zhoneIpSLACosActionMetrics, zhoneIpSLAStaticPathEntry=zhoneIpSLAStaticPathEntry, zhoneIpSLACosActionLatencyClrThresh=zhoneIpSLACosActionLatencyClrThresh, zhoneIpSLAPathConnectSrcIP=zhoneIpSLAPathConnectSrcIP, zhoneIpSLAPathStatByIntervalMaxRTT=zhoneIpSLAPathStatByIntervalMaxRTT, zhoneIpSLAStaticPathGroup=zhoneIpSLAStaticPathGroup, zhoneIpSLAPathStatByIntervalTargetIP=zhoneIpSLAPathStatByIntervalTargetIP, zhoneIpSLAPathConnectDevType=zhoneIpSLAPathConnectDevType, zhoneIpSLAPathStatByIntervalMinRTT=zhoneIpSLAPathStatByIntervalMinRTT, zhoneIpSLACosActionName=zhoneIpSLACosActionName, zhoneIpSLAPathStatByIntervalEntry=zhoneIpSLAPathStatByIntervalEntry, zhoneIpSLACosMapTable=zhoneIpSLACosMapTable, zhoneIpSLAPathConnectEndpointIP=zhoneIpSLAPathConnectEndpointIP, zhoneIpSLAPathStatByCOSCosActIndex=zhoneIpSLAPathStatByCOSCosActIndex, zhoneIpSLACosActionTimeoutClrThresh=zhoneIpSLACosActionTimeoutClrThresh, zhoneIpSLAPathConnectTable=zhoneIpSLAPathConnectTable, zhoneIpSLAGlobalEnable=zhoneIpSLAGlobalEnable, zhoneIpSLAPathConnectPollType=zhoneIpSLAPathConnectPollType, zhoneIpSLAPathStatByCOSMaxRTT=zhoneIpSLAPathStatByCOSMaxRTT, zhoneIpSLAPathStatByIntervalDroppedResp=zhoneIpSLAPathStatByIntervalDroppedResp, zhoneIpSLAStaticPathRdIndex=zhoneIpSLAStaticPathRdIndex, zhoneIpSLAPathConnectEntry=zhoneIpSLAPathConnectEntry, zhoneIpSLAPathConnectGroup=zhoneIpSLAPathConnectGroup, zhoneIpSLACosActionTimeoutErrThresh=zhoneIpSLACosActionTimeoutErrThresh, zhoneIpSLAPathStatByCOSLastRTT=zhoneIpSLAPathStatByCOSLastRTT, zhoneIpSLAPathStatByCOSEntry=zhoneIpSLAPathStatByCOSEntry, zhoneIpSLACosActionTable=zhoneIpSLACosActionTable)
