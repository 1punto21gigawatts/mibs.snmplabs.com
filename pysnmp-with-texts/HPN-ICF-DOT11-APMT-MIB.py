#
# PySNMP MIB module HPN-ICF-DOT11-APMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOT11-APMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
HpnicfDot11ObjectIDType, HpnicfDot11RadioScopeType, HpnicfDot11TxPwrLevelScopeType, HpnicfDot11RFModeType, HpnicfDot11SSIDStringType, HpnicfDot11MACModeType, HpnicfDot11ChannelScopeType, hpnicfDot11APElementIndex, HpnicfDot11ServicePolicyIDType, HpnicfDot11NotifyReasonType, hpnicfDot11, HpnicfDot11RadioElementIndex = mibBuilder.importSymbols("HPN-ICF-DOT11-REF-MIB", "HpnicfDot11ObjectIDType", "HpnicfDot11RadioScopeType", "HpnicfDot11TxPwrLevelScopeType", "HpnicfDot11RFModeType", "HpnicfDot11SSIDStringType", "HpnicfDot11MACModeType", "HpnicfDot11ChannelScopeType", "hpnicfDot11APElementIndex", "HpnicfDot11ServicePolicyIDType", "HpnicfDot11NotifyReasonType", "hpnicfDot11", "HpnicfDot11RadioElementIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, Unsigned32, NotificationType, Integer32, Gauge32, Bits, TimeTicks, ObjectIdentity, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Unsigned32", "NotificationType", "Integer32", "Gauge32", "Bits", "TimeTicks", "ObjectIdentity", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress")
TruthValue, DateAndTime, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention", "MacAddress")
hpnicfDot11APMT = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2))
hpnicfDot11APMT.setRevisions(('2012-05-07 18:00', '2010-10-11 18:00', '2010-09-15 12:00', '2009-08-07 18:00', '2009-07-29 18:00', '2009-05-07 20:00', '2008-11-07 10:00', '2008-07-09 18:00', '2008-02-25 18:00', '2007-12-21 18:00', '2007-06-19 18:00', '2007-04-27 20:00', '2007-02-01 20:00', '2006-05-10 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfDot11APMT.setRevisionsDescriptions(('Modified to add new tables.', 'Modified to add new nodes.', 'Modified to add new table.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new tables and new nodes.', 'Modified to add new tables and new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new tables and new nodes.', 'Modified for new requirements and fix some issue.', 'Modified to fix some issue.', 'Modified to support fat AP.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfDot11APMT.setLastUpdated('201205071800Z')
if mibBuilder.loadTexts: hpnicfDot11APMT.setOrganization('')
if mibBuilder.loadTexts: hpnicfDot11APMT.setContactInfo('')
if mibBuilder.loadTexts: hpnicfDot11APMT.setDescription('This MIB provides AP information which includes AP current object information, AP statistic data. GLOSSARY IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Access control (AC) To control and manage multi-APs, it will bridge wireless and wired network. Fat AP Applied in the home, SOHO and so on, and it could work independently without help from AC. Fit AP Applied in the enterprise environment, it will work under the control and management from AC. Control And Provisioning of Wireless Access Points Protocol The short name of protocol is CAPWAP. AC will control and manage AP by CAPWAP tunnel protocol defined by IETF. Also, a data tunnel will be set up between AC and AP. BSS IEEE 802.11 Basic Service Set (Radio Cell). The BSS of an AP comprises of the stations directly associating with the AP. Radio The chip set to receive and send wireless signal. Association The service used to establish access point or station mapping and enable STA invocation of the distribution system services. (Wireless clients attempt to connect to access points.) Basic Rate A data rate that is mandatory for client devices to support in order for them to achieve successful association.')
hpnicfDot11APObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1))
hpnicfDot11APStatisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2))
hpnicfDot11APMtNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3))
hpnicfDot11APObjectStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1), )
if mibBuilder.loadTexts: hpnicfDot11APObjectStatusTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APObjectStatusTable.setDescription('The table will provide the general information about APs in different status.')
hpnicfDot11APObjectStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"))
if mibBuilder.loadTexts: hpnicfDot11APObjectStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APObjectStatusEntry.setDescription('Each entry contains the general information of an AP.')
hpnicfDot11APID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 1), HpnicfDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APID.setDescription('To uniquely identify each AP, and relation-ship between hpnicfDot11APID and AP device will be static.')
hpnicfDot11APIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIPAddress.setDescription('Represents the IP address of an AP.')
hpnicfDot11APMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAddress.setDescription('Represents the MAC address of an AP.')
hpnicfDot11APOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("join", 1), ("joinConfirm", 2), ("download", 3), ("config", 4), ("run", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APOperationStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APOperationStatus.setDescription('Represents operational status of AP. The following values are supported: join - AP is joining to AC. joinConfirm - AC confirm whether permit AP to join. download - AP is downloading software from AC. config - AP and AC exchange configuration before AP - provide WLAN service. run - The WLAN service is ready.')
hpnicfDot11APTemplateNameOfAP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTemplateNameOfAP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemplateNameOfAP.setDescription('Represents the name of current AP template configured for AP.')
hpnicfDot11APReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APReset.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReset.setDescription('When read the value from the node 2: Represents the AP can not be reseted. 1: Represents the AP can be reseted. When write the value to the node 1: Represents reseting the AP. Other values are not supported')
hpnicfDot11APCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCpuUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCpuUsage.setDescription('Represents the current CPU usage for AP.')
hpnicfDot11APConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APConnectionType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APConnectionType.setDescription('Represents the current connection type.')
hpnicfDot11APLastImgDownloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APLastImgDownloadTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLastImgDownloadTime.setDescription('Represents the time at which the device last downloaded image.')
hpnicfDot11APIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIPv6Address.setDescription('Represents the IPv6 address of AP.')
hpnicfDot11APLastRegisterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APLastRegisterTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLastRegisterTime.setDescription('Represents the time at which the device last registered with AC.')
hpnicfDot11APResetCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APResetCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APResetCM.setDescription('When reading the value from the node normal - Represents the AP cannot be reset. restart - Represents the AP can be reset. When writing the value to the node restart - Represents resetting the AP. Other values are not supported.')
hpnicfDot11APObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2), )
if mibBuilder.loadTexts: hpnicfDot11APObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APObjectTable.setDescription('The table will provide information for APs in the running status.')
hpnicfDot11APObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APObjID"))
if mibBuilder.loadTexts: hpnicfDot11APObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APObjectEntry.setDescription('Each entry contains information of an AP in run status.')
hpnicfDot11APObjID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 1), HpnicfDot11ObjectIDType())
if mibBuilder.loadTexts: hpnicfDot11APObjID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APObjID.setDescription('To uniquely identify each AP, and relation-ship between hpnicfDot11APObjID and AP device will be static.')
hpnicfDot11CurrAPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPIPAddress.setDescription('Represents the IP address of an AP.')
hpnicfDot11CurrAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPMacAddress.setDescription('Represents the MAC address of an AP.')
hpnicfDot11CurrACPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrACPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrACPortIndex.setDescription('Represents the port on the AC, by which the traffic of this AP comes through. NMS could refer it to access information kept in the MIB-2.')
hpnicfDot11CurrAPMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 5), HpnicfDot11MACModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPMACMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPMACMode.setDescription('Represents what MAC mode defined in the CAPWAP is applied. For fat AP, the value will be fatap.')
hpnicfDot11CurrAPTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPTemplateName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPTemplateName.setDescription('Represents the name of current AP template.')
hpnicfDot11CurrAPStationAssocCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPStationAssocCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPStationAssocCount.setDescription('Represents the total number of stations which are associating to AP.')
hpnicfDot11CurrAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPName.setDescription('Represents the name of AP.')
hpnicfDot11CurrAPModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPModelName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPModelName.setDescription('Represents index of WTP model,with it to get AP model information.')
hpnicfDot11CurrAPImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPImageName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPImageName.setDescription('Represents the image file name of AP.')
hpnicfDot11CurrAPSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPSoftwareVersion.setDescription('Represents the software version of AP.')
hpnicfDot11CurrAPIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPIPNetMask.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPIPNetMask.setDescription('Represents the IP netmask of AP.')
hpnicfDot11CurrRadioModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrRadioModeSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrRadioModeSupport.setDescription('Represents which radio type supported by the AP. The WLAN system support the following possible radio type. dot11a(1), dot11b(2), dot11g(4), dot11n(8) For a AP,it could support multiple radio types at the same time.So the value of object could combine multiple value of radio type above. For example: For one AP which support both b and g mode radio, when getting the value from the node, the value is 6(2 + 4).')
hpnicfDot11CurrIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrIfNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrIfNumber.setDescription('Represents number of interface of the AP.')
hpnicfDot11CurrAPElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPElementID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPElementID.setDescription('Represents the AP element ID.')
hpnicfDot11CurrAPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("route", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPMode.setDescription('Represents the forward mode of the AP.')
hpnicfDot11CurrAPIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPIPv6Address.setDescription('Represents the IPv6 address of AP.')
hpnicfDot11CurrAPSSIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPSSIDNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPSSIDNumber.setDescription('Represents the number of SSID configured on AP.')
hpnicfDot11CurrAPManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPManufacturer.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPManufacturer.setDescription("By the 'SMI Network Management Private Enterprise Codes' assigned by the IANA, NMS could know which vendor manufactures the AP.")
hpnicfDot11CurrAPMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 20), Integer32()).setUnits('kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPMemorySize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPMemorySize.setDescription('Represents the size of AP memory.')
hpnicfDot11CurrAPMemSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 21), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPMemSizeInBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPMemSizeInBytes.setDescription('Represents the size of AP memory.')
hpnicfDot11CurrAPFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 22), Integer32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPFlashSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPFlashSize.setDescription('Represents the size of AP flash.')
hpnicfDot11CurrAPFlashSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 23), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPFlashSizeInBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPFlashSizeInBytes.setDescription('This object represents the size of AP flash.')
hpnicfDot11CurrAPReleasedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPReleasedVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPReleasedVersion.setDescription('Represents the released version of AP.')
hpnicfDot11CurrRadioModeSupport2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrRadioModeSupport2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrRadioModeSupport2.setDescription('Represents which radio type supported by the AP. The WLAN system support the following possible radio type. dot11a(1), dot11b(2), dot11g(4), dot11an(8), dot11gn(16) For a AP,it could support multiple radio types at the same time.So the value of object could combine multiple value of radio type above. For example: For one AP which support both b and g mode radio, when getting the value from the node, the value is 6(2 + 4).')
hpnicfDot11CurrAPCPUTypeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPCPUTypeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPCPUTypeCM.setDescription('Represents the CPU type of AP.')
hpnicfDot11CurrAPMemoryTypeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPMemoryTypeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPMemoryTypeCM.setDescription('Represents the memory card type of AP.')
hpnicfDot11CurrAPBSSIDNumberCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrAPBSSIDNumberCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrAPBSSIDNumberCM.setDescription('Represents the number of BSSID configured on AP.')
hpnicfDot11APRadioTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3), )
if mibBuilder.loadTexts: hpnicfDot11APRadioTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRadioTable.setDescription('The table will describe the radio information of AP. The AP here will be in running status.')
hpnicfDot11APRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11APRadioEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRadioEntry.setDescription('Each entry contains the information of each radio of a specific AP.')
hpnicfDot11CurAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: hpnicfDot11CurAPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurAPID.setDescription('To uniquely identify a AP in running status.')
hpnicfDot11RadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11RadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioID.setDescription('Represents each radio.')
hpnicfDot11AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AdminStatus.setDescription('Represents the administrator status of radio.')
hpnicfDot11OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11OperStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11OperStatus.setDescription('Represents the operational status of radio.')
hpnicfDot11Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 5), HpnicfDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Channel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Channel.setDescription('Represents the current channel allocation for radio.')
hpnicfDot11TxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 6), HpnicfDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxPowerLevel.setDescription('Represents the current transmit power level for radio.')
hpnicfDot11APRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APRadioIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRadioIfIndex.setDescription('Represents the interface index for the radio.')
hpnicfDot11AntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 8), Integer32()).setUnits('dBi').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AntennaGain.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AntennaGain.setDescription('Represents the current gain for antenna.')
hpnicfDot11MaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 9), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MaxBandwidth.setDescription('Represents the maximum bandwidth for the radio.')
hpnicfDot11ResourceUseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 10), Integer32()).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ResourceUseRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ResourceUseRatio.setDescription('Represents the ratio of radio resource usage.')
hpnicfDot11RadioModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioModeSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioModeSupport.setDescription('Represents radio type supported by the radio. The WLAN system supports the following possible radio type: dot11a(1), dot11b(2), dot11g(4), dot11gn(16), dot11an(32). For the radio, it could support multiple radio types at the same time. So the value of this object could combine multiple values of radio type above. For example: For one radio which supports both dot11b and dot11g mode, when get value from the object, the value is 5(1 + 4).')
hpnicfDot11TxPowerLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxPowerLevel2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxPowerLevel2.setDescription('The TxPowerLevel N currently being used to transmit data.')
hpnicfDot11PowerMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11PowerMgmtStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PowerMgmtStatus.setDescription('Represents status of power management of the radio.')
hpnicfDot11ChannelSwitchTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ChannelSwitchTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ChannelSwitchTimes.setDescription('Represents the channel switch times.')
hpnicfDot11AntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AntennaType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AntennaType.setDescription('Represents type of the antenna which radio used.')
hpnicfDot11DiversitySelectionRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11DiversitySelectionRx.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DiversitySelectionRx.setDescription('Represents the diversity selection received.')
hpnicfDot11MaxTxPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MaxTxPwrLvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MaxTxPwrLvl.setDescription('Represents the maximum transmit power.')
hpnicfDot11PwrAttRange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11PwrAttRange.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PwrAttRange.setDescription('Represents the range of power attenuation.')
hpnicfDot11AvgRxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 19), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AvgRxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AvgRxSignalStrength.setDescription('Represents the average received signal strength.')
hpnicfDot11HighestRxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 20), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11HighestRxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11HighestRxSignalStrength.setDescription('Represents the highest received signal strength.')
hpnicfDot11LowestRxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 21), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11LowestRxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11LowestRxSignalStrength.setDescription('Represents the lowest received signal strength.')
hpnicfDot11RadioIfUpdownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioIfUpdownTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIfUpdownTimes.setDescription('Represents the up/down times on radio interface.')
hpnicfDot11RadioIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioIfLastChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIfLastChange.setDescription('Represents time at last change that occurred on radio interface.')
hpnicfDot11RadioModeSupport2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioModeSupport2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioModeSupport2.setDescription('Represents radio type supported by the radio. The WLAN system supports the following possible radio type: dot11a(1), dot11b(2), dot11g(4), dot11an(8), dot11gn(16). For the radio, it could support multiple radio types at the same time. So the value of this object could combine multiple values of radio type above. For example: For one radio which supports both dot11b and dot11g mode, when get value from the object, the value is 5(1 + 4).')
hpnicfDot11OperStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("admindown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11OperStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11OperStatusCM.setDescription('Represents the operational status of radio.')
hpnicfDot11APBSSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4), )
if mibBuilder.loadTexts: hpnicfDot11APBSSTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APBSSTable.setDescription('After AP connect to AC and get AP template configuration, it will create BSS data structure for each radio. The table will describe BSS information of AP and service policy as per BSS.')
hpnicfDot11APBSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11APBSSEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APBSSEntry.setDescription('Each entry contains information of each BSS for specific radio.')
hpnicfDot11WlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfDot11WlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanID.setDescription('Represents ID of a specific ESS.')
hpnicfDot11BSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSID.setDescription('As MAC Address format, it is to identify BSS.')
hpnicfDot11CurrSvcPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1, 3), HpnicfDot11ServicePolicyIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrSvcPolicyID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrSvcPolicyID.setDescription('Represents the ID of each service policy used by the AP.')
hpnicfDot11SSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11SSID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSID.setDescription('This object represents the SSID corresponding to this BSS.')
hpnicfDot11CurrSSIDResourceUseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CurrSSIDResourceUseRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrSSIDResourceUseRatio.setDescription('Represents the ratio of resource usage of curr SSID')
hpnicfDot11APEssVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APEssVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APEssVlanId.setDescription('This object represents the VlanID of the interface ESS corresponding to this BSS.')
hpnicfDot11APModelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5), )
if mibBuilder.loadTexts: hpnicfDot11APModelTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APModelTable.setDescription('The table defines the capability information for a specific kind of AP.')
hpnicfDot11APModelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1), ).setIndexNames((1, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APModelAlias"))
if mibBuilder.loadTexts: hpnicfDot11APModelEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APModelEntry.setDescription('Each entry contains capability information for a specific kind of AP.')
hpnicfDot11APModelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11APModelAlias.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APModelAlias.setDescription('Represents alias of AP model name.')
hpnicfDot11APModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APModelName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APModelName.setDescription('Represents AP model name(like WA2100).')
hpnicfDot11RadioNumSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 3), HpnicfDot11RadioScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioNumSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioNumSupport.setDescription('Represents how many radios the specific AP model could support.')
hpnicfDot11StationNumSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11StationNumSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StationNumSupport.setDescription('Represents how many station could be supported by a specific AP model.')
hpnicfDot11MACModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 5), HpnicfDot11MACModeType().clone('split')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MACModeSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MACModeSupport.setDescription('Represents the MAC mode type could be supported by a specific AP model.')
hpnicfDot11APManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APManufacturer.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APManufacturer.setDescription("By the 'SMI Network Management Private Enterprise Codes' assigned by the IANA, NMS could know which vendor manufactures the AP.")
hpnicfDot11APCPUType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCPUType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCPUType.setDescription('Represents the CPU type of AP')
hpnicfDot11APCPUClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 8), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCPUClockSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCPUClockSpeed.setDescription('Represents the clock speed of CPU.')
hpnicfDot11APMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemoryType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemoryType.setDescription('Represents the memory card type of AP')
hpnicfDot11APMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 20), Unsigned32()).setUnits('kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemorySize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemorySize.setDescription('Represents the size of AP memory card.')
hpnicfDot11APFlashType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APFlashType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APFlashType.setDescription('Represents the flash card type of AP')
hpnicfDot11APFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 12), Unsigned32()).setUnits('kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APFlashSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APFlashSize.setDescription('Represents the size of AP flash card.')
hpnicfDot11APMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 13), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemSize.setDescription('Represents the size of AP memory card.')
hpnicfDot11APFlashSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 5, 1, 14), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APFlashSizeInBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APFlashSizeInBytes.setDescription('This object represents the size of AP flash card in bytes.')
hpnicfDot11APIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6), )
if mibBuilder.loadTexts: hpnicfDot11APIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfTable.setDescription('This table represents the AP interface informations.')
hpnicfDot11APIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APObjID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIfIndex"))
if mibBuilder.loadTexts: hpnicfDot11APIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfEntry.setDescription('Each entry of the table will provide data for the interface of AP.')
hpnicfDot11APIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11APIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfIndex.setDescription('Represents the index for a interface.')
hpnicfDot11APIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfDescr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfDescr.setDescription('Represents the interface description for a interface.')
hpnicfDot11APIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfType.setDescription('Represents the interface type for a interface.')
hpnicfDot11APIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APIfMtu.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfMtu.setDescription('Represents size of the largest datagram which can be sent/received on the interface, specified in octets.')
hpnicfDot11APIfPHYAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfPHYAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfPHYAddress.setDescription('Represents the PHY address of interface.')
hpnicfDot11APIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 6), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfSpeed.setDescription('Represents maximum bandwidth of this interface.')
hpnicfDot11APIfInDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 7), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInDataRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInDataRate.setDescription('Represents the average input data rate of this interface in latest 300 seconds.')
hpnicfDot11APIfOutDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 8), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutDataRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutDataRate.setDescription('Represents the average output data rate of this interface in latest 300 seconds.')
hpnicfDot11APIfSpeedKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 9), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfSpeedKbps.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfSpeedKbps.setDescription('Represents maximum bandwidth of this interface.')
hpnicfDot11APIfTypeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfTypeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfTypeCM.setDescription('Represents the interface type.')
hpnicfDot11APSSIDObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 7), )
if mibBuilder.loadTexts: hpnicfDot11APSSIDObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSSIDObjectTable.setDescription('This table provides BSSID number configuration information based on SSID.')
hpnicfDot11APSSIDObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APConfigSPID"))
if mibBuilder.loadTexts: hpnicfDot11APSSIDObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSSIDObjectEntry.setDescription('Each entry provides BSSID number configuration information of a SSID.')
hpnicfDot11APConfigSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 7, 1, 1), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11APConfigSPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APConfigSPID.setDescription('Represents the service policy ID.')
hpnicfDot11APConfigSSIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 7, 1, 2), HpnicfDot11SSIDStringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APConfigSSIDName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APConfigSSIDName.setDescription('Represents the SSID name of this service policy.')
hpnicfDot11APConfigBSSIDNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APConfigBSSIDNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APConfigBSSIDNum.setDescription('Represents the number of BSSID that be configured with current SSID.')
hpnicfDot11APConfigPortalStaNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APConfigPortalStaNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APConfigPortalStaNum.setDescription('Represents the total number of associated protal stations with current SSID.')
hpnicfDot11APSysInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8), )
if mibBuilder.loadTexts: hpnicfDot11APSysInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysInfoTable.setDescription('The table provides the system information of the AP.')
hpnicfDot11APSysInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1), ).setIndexNames((0, "HPN-ICF-DOT11-REF-MIB", "hpnicfDot11APElementIndex"))
if mibBuilder.loadTexts: hpnicfDot11APSysInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysInfoEntry.setDescription('Each entry provides system information of an AP.')
hpnicfDot11APSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APSysUpTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysUpTime.setDescription('Represents how long AP has been powered on.')
hpnicfDot11APCPURTUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCPURTUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCPURTUsage.setDescription('Represents the CPU real time usage for AP.')
hpnicfDot11APCPUAvgUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCPUAvgUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCPUAvgUsage.setDescription('Represents the CPU average usage for AP.')
hpnicfDot11APMemRTUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemRTUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemRTUsage.setDescription('Represents the memory real time usage for AP.')
hpnicfDot11APMemAvgUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemAvgUsage.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemAvgUsage.setDescription('Represents the average memory usage for AP.')
hpnicfDot11APIPAddressGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIPAddressGateway.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIPAddressGateway.setDescription('Represents the IP address gateway for AP.')
hpnicfDot11APACAssociateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("deassociated", 2), ("downloadingImage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APACAssociateStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APACAssociateStatus.setDescription('Represents associate status of AP and AC.')
hpnicfDot11APManuBuildInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APManuBuildInfo.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APManuBuildInfo.setDescription('Represents the device version information for AP.')
hpnicfDot11APFlashFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APFlashFreeSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APFlashFreeSize.setDescription('Represents the free size of AP flash card.')
hpnicfDot11APTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTemperature.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemperature.setDescription('Represents the device temperature information for AP.')
hpnicfDot11APIdleListTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 9), )
if mibBuilder.loadTexts: hpnicfDot11APIdleListTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIdleListTable.setDescription('This table provides the list of idle AP.')
hpnicfDot11APIdleListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 9, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIdleTemplateName"))
if mibBuilder.loadTexts: hpnicfDot11APIdleListEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIdleListEntry.setDescription('Each entry provides information of a idle AP.')
hpnicfDot11APIdleTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11APIdleTemplateName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIdleTemplateName.setDescription('Represents the name of idle AP template.')
hpnicfDot11APIdleSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIdleSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIdleSerialID.setDescription('Represents AP serial ID.')
hpnicfDot11APSysInfoByAPIDTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10), )
if mibBuilder.loadTexts: hpnicfDot11APSysInfoByAPIDTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysInfoByAPIDTable.setDescription('The table provides the system information of the AP.')
hpnicfDot11APSysInfoByAPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APObjID"))
if mibBuilder.loadTexts: hpnicfDot11APSysInfoByAPIDEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysInfoByAPIDEntry.setDescription('Each entry provides system information of an AP.')
hpnicfDot11APSysUpTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APSysUpTime2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysUpTime2.setDescription('Represents how long AP has been powered on.')
hpnicfDot11APCPURTUsage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCPURTUsage2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCPURTUsage2.setDescription('Represents the CPU real time usage for AP.')
hpnicfDot11APCPUAvgUsage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APCPUAvgUsage2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCPUAvgUsage2.setDescription('Represents the CPU average usage for AP.')
hpnicfDot11APMemRTUsage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemRTUsage2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemRTUsage2.setDescription('Represents the memory real time usage for AP.')
hpnicfDot11APMemAvgUsage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMemAvgUsage2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemAvgUsage2.setDescription('Represents the average memory usage for AP.')
hpnicfDot11APIPAddressGateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIPAddressGateway2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIPAddressGateway2.setDescription('Represents the IP address gateway for AP.')
hpnicfDot11APACAssociateStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("associated", 1), ("deassociated", 2), ("downloadingImage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APACAssociateStatus2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APACAssociateStatus2.setDescription('Represents associate status of AP and AC.')
hpnicfDot11APManuBuildInfo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APManuBuildInfo2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APManuBuildInfo2.setDescription('Represents the device version information for AP.')
hpnicfDot11APFlashFreeSize2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APFlashFreeSize2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APFlashFreeSize2.setDescription('Represents the free size of AP flash card.')
hpnicfDot11APTemperature2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTemperature2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemperature2.setDescription('Represents the device temperature information for AP.')
hpnicfDot11APMacAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAddress2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAddress2.setDescription('Represents the MAC address of AP.')
hpnicfDot11APACAssociateStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deassociated", 0), ("associated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APACAssociateStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APACAssociateStatusCM.setDescription('Represents associate status of AP and AC.')
hpnicfDot11APRxStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1), )
if mibBuilder.loadTexts: hpnicfDot11APRxStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRxStatisTable.setDescription('The table will provide the receiving statistic for a specific radio of AP.')
hpnicfDot11APRxStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11APRxStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRxStatisEntry.setDescription('Each entry of the table will provide the statistic data for each radio of a specific AP.')
hpnicfDot11RxFrameDupCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxFrameDupCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxFrameDupCnt.setDescription('Represents the number of duplicate frames reception.')
hpnicfDot11RxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxFrameCnt.setDescription('Represents the number of frames reception.')
hpnicfDot11RxUcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxUcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxUcastFrameCnt.setDescription('Represents the number of unicast frames reception.')
hpnicfDot11RxBcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxBcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxBcastFrameCnt.setDescription('Represents the number of broadcast frames reception.')
hpnicfDot11RxMcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxMcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxMcastFrameCnt.setDescription('Represents the number of multicast frames reception.')
hpnicfDot11RxDiscardFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxDiscardFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxDiscardFrameCnt.setDescription('Represents the number of frames discarded by AP.')
hpnicfDot11RxFragCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxFragCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxFragCnt.setDescription('Represents the number of frame fragments reception.')
hpnicfDot11RxFcsErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxFcsErrCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxFcsErrCnt.setDescription('Represents the number of FCS error frames reception.')
hpnicfDot11RxFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxFrameBytes.setDescription('Represents the bytes of frames reception.')
hpnicfDot11RxUcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxUcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxUcastFrameBytes.setDescription('Represents the bytes of unicast frames reception.')
hpnicfDot11RxBcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxBcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxBcastFrameBytes.setDescription('Represents the bytes of broadcast frames reception.')
hpnicfDot11RxMcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxMcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxMcastFrameBytes.setDescription('Represents the bytes of multicast frames reception.')
hpnicfDot11RxDiscardFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxDiscardFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxDiscardFrameBytes.setDescription('Represents the bytes of frames discarded by AP.')
hpnicfDot11RxMgmtFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxMgmtFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxMgmtFrameCnt.setDescription('Represents the number of management frames reception.')
hpnicfDot11RxCtrlFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxCtrlFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxCtrlFrameCnt.setDescription('Represents the number of control frames reception.')
hpnicfDot11RxDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxDataFrameCnt.setDescription('Represents the number of data frames reception.')
hpnicfDot11RxDecryptErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxDecryptErrorCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxDecryptErrorCnt.setDescription('Represents the number of decryption error.')
hpnicfDot11RxAuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxAuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxAuthenFrameCnt.setDescription('Represents the number of authentication frame reception.')
hpnicfDot11RxAssociateFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxAssociateFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxAssociateFrameCnt.setDescription('Represents the number of associate frame reception.')
hpnicfDot11RxFrameErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 20), Integer32()).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxFrameErrorRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxFrameErrorRatio.setDescription('Represents the ratio of error frame.')
hpnicfDot11RxPhyErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxPhyErrorCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxPhyErrorCnt.setDescription('Represents the number of physical reception error.')
hpnicfDot11RxMICErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxMICErrorCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxMICErrorCnt.setDescription('Represents the number of MIC verification error.')
hpnicfDot11RxDataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxDataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxDataFrameBytes.setDescription('Represents the bytes of data frames reception.')
hpnicfDot11RadioRxAverSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioRxAverSnr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioRxAverSnr.setDescription('Represents the average signal noise rate of this radio.')
hpnicfDot11RxPayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxPayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxPayloadBytes.setDescription('Represents the payload bytes of data frames reception.')
hpnicfDot11RxTrafficSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 26), Integer32()).setUnits('byte/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxTrafficSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxTrafficSpeed.setDescription('Represents the bytes of frames reception per second.')
hpnicfDot11RxUcastDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxUcastDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxUcastDataFrameCnt.setDescription('Represents the number of unicast data frames reception.')
hpnicfDot11RxNUcastDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxNUcastDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxNUcastDataFrameCnt.setDescription('Represents the number of non-unicast data frames reception.')
hpnicfDot11RxTotalDiscardFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxTotalDiscardFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxTotalDiscardFrameCnt.setDescription('Represents the number of total frames discarded by radio.')
hpnicfDot11RxTotalIPCheckErrPacketCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxTotalIPCheckErrPacketCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxTotalIPCheckErrPacketCnt.setDescription('Represents the total number of IP checksum error packets received through the current radio.')
hpnicfDot11RxSignalStrengthPacketCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxSignalStrengthPacketCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxSignalStrengthPacketCntCM.setDescription('Represents the count of received packets according to signal strength.')
hpnicfDot11RxDataFrameCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RxDataFrameCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RxDataFrameCntCM.setDescription('Represents the number of received data frames, excluding retransmitted frames.')
hpnicfDot11APTxStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2), )
if mibBuilder.loadTexts: hpnicfDot11APTxStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTxStatisTable.setDescription('The table will provide the transmission statistic for a specific radio of AP.')
hpnicfDot11APTxStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11APTxStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTxStatisEntry.setDescription('Each entry of the table will provide the statistic data for each radio of a specific AP.')
hpnicfDot11TxFragCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxFragCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxFragCnt.setDescription('Represents the number of fragmented frames transmission.')
hpnicfDot11FailedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11FailedCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11FailedCnt.setDescription('Represents the number of transmission failures.')
hpnicfDot11RetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RetryCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RetryCnt.setDescription('Represents the number of transmit retries.')
hpnicfDot11MultiRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MultiRetryCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MultiRetryCnt.setDescription('Represents the number of transmits that required more than one retry.')
hpnicfDot11RtsSuccessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RtsSuccessCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RtsSuccessCnt.setDescription('Represents the number of successful RTS (Request to send) transmission.')
hpnicfDot11RtsFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RtsFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RtsFailCnt.setDescription('Represents the number of RTS transmission failures.')
hpnicfDot11AckFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AckFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AckFailCnt.setDescription('Represents the number of acknowledgement failures.')
hpnicfDot11TxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxFrameCnt.setDescription('Represents the total number of frames transmission.')
hpnicfDot11TxUcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxUcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxUcastFrameCnt.setDescription('Represents the number of unicast frames transmission.')
hpnicfDot11TxBcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxBcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxBcastFrameCnt.setDescription('Represents the number of broadcast frames transmission.')
hpnicfDot11TxMcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxMcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxMcastFrameCnt.setDescription('Represents the number of multicast frames transmission.')
hpnicfDot11TxDiscardFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxDiscardFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxDiscardFrameCnt.setDescription('Represents the number of frames discarded by AP.')
hpnicfDot11TxFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxFrameBytes.setDescription('Represents the total bytes of frames transmission.')
hpnicfDot11TxUcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxUcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxUcastFrameBytes.setDescription('Represents the bytes of unicast frames transmission.')
hpnicfDot11TxBcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxBcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxBcastFrameBytes.setDescription('Represents the bytes of broadcast frames transmission.')
hpnicfDot11TxMcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxMcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxMcastFrameBytes.setDescription('Represents the bytes of multicast frames transmission.')
hpnicfDot11TxDiscardFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxDiscardFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxDiscardFrameBytes.setDescription('Represents the bytes of multicast frames transmission.')
hpnicfDot11TxAuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxAuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxAuthenFrameCnt.setDescription('Represents the number of authentication frame transmission.')
hpnicfDot11TxAssociateFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxAssociateFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxAssociateFrameCnt.setDescription('Represents the number of associate frame transmission.')
hpnicfDot11TxFrameRetryRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 20), Integer32()).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxFrameRetryRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxFrameRetryRatio.setDescription('Represents the ratio of retry frame.')
hpnicfDot11TxDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxDataFrameCnt.setDescription('Represents the number of data frame transmission.')
hpnicfDot11TxDataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxDataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxDataFrameBytes.setDescription('Represents the bytes of data frame transmission.')
hpnicfDot11TxMSDUCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxMSDUCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxMSDUCnt.setDescription('Represents the total number of MSDU transmission.')
hpnicfDot11TxDiscardMSDUCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxDiscardMSDUCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxDiscardMSDUCnt.setDescription('Represents the number of discarded MSDU transmission.')
hpnicfDot11RetryMSDUCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RetryMSDUCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RetryMSDUCnt.setDescription('Represents the number of retransfer MSDU.')
hpnicfDot11TxPayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxPayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxPayloadBytes.setDescription('Represents the payload bytes of data frames transmission.')
hpnicfDot11TxTrafficSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 27), Integer32()).setUnits('byte/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxTrafficSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxTrafficSpeed.setDescription('Represents the bytes of frames transmission per second.')
hpnicfDot11TxErrFrameRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 28), Integer32()).setUnits('onepercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxErrFrameRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxErrFrameRatio.setDescription('Represents the ratio of error frame.')
hpnicfDot11TxFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxFrameRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxFrameRate.setDescription('Represents the count of frames transmission per second.')
hpnicfDot11TxMgtFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxMgtFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxMgtFrameCnt.setDescription('Represents the number of transmitted management frames.')
hpnicfDot11TxCtrlFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxCtrlFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxCtrlFrameCnt.setDescription('Represents the number of transmission control frames.')
hpnicfDot11TxMACErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxMACErrCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxMACErrCnt.setDescription('Represents the count of MAC error frame.')
hpnicfDot11TxErrFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxErrFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxErrFrameCnt.setDescription('Represents the count of error frame.')
hpnicfDot11TxUcastDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxUcastDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxUcastDataFrameCnt.setDescription('Represents the number of unicast data frames transmission.')
hpnicfDot11TxNUcastDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11TxNUcastDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TxNUcastDataFrameCnt.setDescription('Represents the number of non-unicast data frames transmission.')
hpnicfDot11APAssocStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3), )
if mibBuilder.loadTexts: hpnicfDot11APAssocStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocStatisTable.setDescription('The table will provide the station association statistic for AP.')
hpnicfDot11APAssocStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APAssocStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocStatisEntry.setDescription('Each entry of the table will provide the statistic data of station association for AP.')
hpnicfDot11ApStationAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocSum.setDescription('Represents the total number of station association with this AP.')
hpnicfDot11ApStationAssocFailSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocFailSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocFailSum.setDescription('Represents the total number of station association failure with this AP.')
hpnicfDot11ApStationReassocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationReassocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationReassocSum.setDescription('Represents the total number of station reassociation with this AP.')
hpnicfDot11ApStationAssocRejectSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocRejectSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocRejectSum.setDescription('Represents the total number of station association rejected on account of resource limit with this AP.')
hpnicfDot11ApStationExDeAuthenSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationExDeAuthenSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationExDeAuthenSum.setDescription('Represents the total number of exceptional station deauthentication (Without sending a deauthentication to AP) with this AP.')
hpnicfDot11ApStationCurAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationCurAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationCurAssocSum.setDescription('Represents the total number of current associated stations with this AP.')
hpnicfDot11ApStaCurAuthSuccSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStaCurAuthSuccSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStaCurAuthSuccSum.setDescription('Represents the successful number of station authentication with this AP.')
hpnicfDot11AllStationUpSumTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 8), Counter32()).setUnits('minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AllStationUpSumTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllStationUpSumTime.setDescription('Represents the sum of duration of all stations which associate with this AP.')
hpnicfDot11ApStationAssocReqSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocReqSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationAssocReqSum.setDescription('Represents the number of station association request with this AP.')
hpnicfDot11AllStationUpSumTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AllStationUpSumTimeTicks.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllStationUpSumTimeTicks.setDescription('Represents the sum of duration of all stations which associate with this AP.')
hpnicfDot11ApStationReassocReqSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationReassocReqSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationReassocReqSum.setDescription('Represents the total number of station reassociation request with this AP.')
hpnicfDot11ApStationReassocFailSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11ApStationReassocFailSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApStationReassocFailSum.setDescription('Represents the total number of station reassociation failure with this AP.')
hpnicfDot11BSSRxStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4), )
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatisTable.setDescription('The table will provide the reception statistic for a specific BSS on a radio.')
hpnicfDot11BSSRxStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatisEntry.setDescription('Each entry of the table will provide the statistic data for each BSS on a specific radio.')
hpnicfDot11BSSRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxFrameCnt.setDescription('Represents the number of frames reception with this BSS.')
hpnicfDot11BSSRxFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxFrameBytes.setDescription('Represents the bytes of frames reception with this BSS.')
hpnicfDot11BSSRxDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxDataFrameCnt.setDescription('Represents the number of data frames reception with this BSS.')
hpnicfDot11BSSRxDataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxDataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxDataFrameBytes.setDescription('Represents the bytes of data frames reception with this BSS.')
hpnicfDot11BSSRxAssociateFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxAssociateFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxAssociateFrameCnt.setDescription('Represents the number of associate frames reception with this BSS.')
hpnicfDot11BSSRxFrameErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 6), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxFrameErrorRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxFrameErrorRatio.setDescription('Represents the ratio of error frames reception with this BSS.')
hpnicfDot11BSSRxPayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxPayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxPayloadBytes.setDescription('Represents the payload bytes of data frames reception with this BSS.')
hpnicfDot11BSSRxUniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxUniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxUniFrameCnt.setDescription('Represents the count of unicast frames received.')
hpnicfDot11BSSRxNonUniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxNonUniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxNonUniFrameCnt.setDescription('Represents the count of non-unicast frames received.')
hpnicfDot11BSSRxAuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRxAuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxAuthenFrameCnt.setDescription('Represents the count of authentication frames received.')
hpnicfDot11BSSTxStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5), )
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatisTable.setDescription('The table will provide the transmission statistic for a specific BSS on a radio.')
hpnicfDot11BSSTxStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatisEntry.setDescription('Each entry of the table will provide the statistic data for each BSS on a specific radio.')
hpnicfDot11BSSTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxFrameCnt.setDescription('Represents the total number of frames transmission with this BSS.')
hpnicfDot11BSSTxFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxFrameBytes.setDescription('Represents the total number of bytes transmission with this BSS.')
hpnicfDot11BSSTxDataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxDataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxDataFrameCnt.setDescription('Represents the number of data frame transmission with this BSS.')
hpnicfDot11BSSTxDataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxDataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxDataFrameBytes.setDescription('Represents the bytes of data frame transmission with this BSS.')
hpnicfDot11BSSTxAssociateFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxAssociateFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxAssociateFrameCnt.setDescription('Represents the number of associate frame transmission with this BSS.')
hpnicfDot11BSSTxPayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxPayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxPayloadBytes.setDescription('Represents the payload bytes of data frame transmission with this BSS.')
hpnicfDot11BSSTxRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxRetryCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxRetryCnt.setDescription('Represents the count of bytes retransmitted with this BSS.')
hpnicfDot11BSSTxUniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxUniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxUniFrameCnt.setDescription('Represents the count of unicast frames transmission with this BSS.')
hpnicfDot11BSSTxNonUniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxNonUniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxNonUniFrameCnt.setDescription('Represents the number of non-unicast frames transmission with this BSS.')
hpnicfDot11BSSTxAuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTxAuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxAuthenFrameCnt.setDescription('Represents the count of authentication frames transmission with this BSS.')
hpnicfDot11BSSAssocStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6), )
if mibBuilder.loadTexts: hpnicfDot11BSSAssocStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSAssocStatisTable.setDescription('The table will provide the station association statistic for BSS.')
hpnicfDot11BSSAssocStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11BSSAssocStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSAssocStatisEntry.setDescription('Each entry of the table will provide the statistic data of station association for BSS.')
hpnicfDot11BSSStationAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocSum.setDescription('Represents the total number of station association with this BSS.')
hpnicfDot11BSSStationAssocFailSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocFailSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocFailSum.setDescription('Represents the total number of station association failure with this BSS.')
hpnicfDot11BSSStationReassocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationReassocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationReassocSum.setDescription('Represents the total number of station reassociation with this BSS.')
hpnicfDot11BSSStationAssocRejectSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocRejectSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocRejectSum.setDescription('Represents the total number of station association rejected on account of resource limit with this BSS.')
hpnicfDot11BSSStationExDeAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationExDeAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationExDeAssocSum.setDescription('Represents the total number of exceptional station deauthentication (Without sending a deauthentication to AP) with this BSS.')
hpnicfDot11BSSStationCurAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationCurAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationCurAssocSum.setDescription('Represents the total number of current associated stations with this BSS.')
hpnicfDot11BSSStationAssocReqSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocReqSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationAssocReqSum.setDescription('Represents the total number of station association request with this BSS.')
hpnicfDot11BSSStationCurAuthSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSStationCurAuthSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSStationCurAuthSum.setDescription('Represents the total number of current associated stations which have passed portal or 1x authentication with this BSS.')
hpnicfDot11APLinkStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 7), )
if mibBuilder.loadTexts: hpnicfDot11APLinkStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLinkStatisTable.setDescription('The table will provide the link statistic for AP.')
hpnicfDot11APLinkStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APLinkStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLinkStatisEntry.setDescription('Each entry provides the link statistic of the AP.')
hpnicfDot11UpLinkUpDownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11UpLinkUpDownTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UpLinkUpDownTimes.setDescription('Represents up/down times of uplink interface of the AP.')
hpnicfDot11DownLinkUpDownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11DownLinkUpDownTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DownLinkUpDownTimes.setDescription('Represents up/down times of downlink interface of the AP.')
hpnicfDot11RadioAssocStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8), )
if mibBuilder.loadTexts: hpnicfDot11RadioAssocStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioAssocStatisTable.setDescription('The table will provide the station association statistic for radio.')
hpnicfDot11RadioAssocStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11RadioAssocStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioAssocStatisEntry.setDescription('Each entry of the table will provide the statistic data of station association for radio.')
hpnicfDot11RadioStaAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioStaAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStaAssocSum.setDescription('Represents the total number of station association with this radio.')
hpnicfDot11RadioStaAssocFailSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioStaAssocFailSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStaAssocFailSum.setDescription('Represents the total number of station association failure with this radio.')
hpnicfDot11RadioStaReassocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioStaReassocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStaReassocSum.setDescription('Represents the total number of station re-association with this radio.')
hpnicfDot11RadioStaAssocRejectSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioStaAssocRejectSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStaAssocRejectSum.setDescription('Represents the total number of station association rejected on account of resource limit with this radio.')
hpnicfDot11RadioStaExDeAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioStaExDeAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStaExDeAssocSum.setDescription('Represents the total number of exceptional station de-authentication (Without sending a de-authentication to AP) with this radio.')
hpnicfDot11RadioStaCurAssocSum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioStaCurAssocSum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStaCurAssocSum.setDescription('Represents the total number of current associated stations with this radio.')
hpnicfDot11RadioMngFrameStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 9), )
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrameStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrameStatisTable.setDescription('The table will provide the management frame statistic for this radio.')
hpnicfDot11RadioMngFrameStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioStatisIndex"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11MngFrameType"))
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrameStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrameStatisEntry.setDescription('Each entry of the table will provide the management frame statistic for this radio.')
hpnicfDot11RadioStatisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 9, 1, 1), HpnicfDot11RadioElementIndex())
if mibBuilder.loadTexts: hpnicfDot11RadioStatisIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioStatisIndex.setDescription('Represents index of radio.')
hpnicfDot11MngFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("assocReq", 1), ("assocResp", 2), ("reassocReq", 3), ("reassocResp", 4), ("probeReq", 5), ("probeResp", 6), ("beacon", 7), ("atim", 8), ("disassociation", 9), ("authentication", 10), ("deauthentication", 11), ("action", 12))))
if mibBuilder.loadTexts: hpnicfDot11MngFrameType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MngFrameType.setDescription('Represents the type of the management frame on this radio.')
hpnicfDot11MngFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MngFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MngFrameCnt.setDescription('Represents the total number of each type for management frame on this radio.')
hpnicfDot11APAuthFailStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 10), )
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisTable.setDescription('The table will provide the authentication failure statistic for this AP.')
hpnicfDot11APAuthFailStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APAuthFailStatisType"))
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisEntry.setDescription('Each entry of the table will provide the authentication failure statistic for this AP.')
hpnicfDot11APAuthFailStatisType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalidation", 1), ("overtime", 2), ("rejected", 3), ("other", 4))))
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisType.setDescription('Represents the type of authentication failure with this AP.')
hpnicfDot11APAuthFailStatisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAuthFailStatisCnt.setDescription('Represents the total number of each type for authentication failure on this AP.')
hpnicfDot11APAssocFailStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 11), )
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisTable.setDescription('The table will provide the association failure statistic for this AP.')
hpnicfDot11APAssocFailStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 11, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APAssocFailStatisType"))
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisEntry.setDescription('Each entry of the table will provide the association failure statistic for this AP.')
hpnicfDot11APAssocFailStatisType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalidation", 1), ("overtime", 2), ("rejected", 3), ("other", 4))))
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisType.setDescription('Represents the type of association failure with this AP.')
hpnicfDot11APAssocFailStatisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisCnt.setDescription('Represents the total number of each type for association failure on this AP.')
hpnicfDot11APReassocStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 12), )
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisTable.setDescription('The table will provide the re-association statistic for this AP.')
hpnicfDot11APReassocStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 12, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APReassocStatisType"))
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisEntry.setDescription('Each entry of the table will provide the re-association statistic for this AP.')
hpnicfDot11APReassocStatisType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("total", 1), ("success", 2), ("invalidation", 3), ("overtime", 4), ("rejected", 5), ("other", 6))))
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisType.setDescription('Represents the type of re-association with this AP.')
hpnicfDot11APReassocStatisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocStatisCnt.setDescription('Represents the total number of each type for re-association with this AP.')
hpnicfDot11APUserAuthStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 13), )
if mibBuilder.loadTexts: hpnicfDot11APUserAuthStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthStatisTable.setDescription('The table will provide the user authentication statistic for this AP.')
hpnicfDot11APUserAuthStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 13, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11UserAuthStatisType"))
if mibBuilder.loadTexts: hpnicfDot11APUserAuthStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthStatisEntry.setDescription('Each entry of the table will provide the user authentication statistic for this AP.')
hpnicfDot11UserAuthStatisType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("total", 1), ("success", 2), ("keyError", 3), ("invalidation", 4), ("overtime", 5), ("rejected", 6), ("other", 7))))
if mibBuilder.loadTexts: hpnicfDot11UserAuthStatisType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UserAuthStatisType.setDescription('Represents the type of user authentication with this AP.')
hpnicfDot11UserAuthStatisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11UserAuthStatisCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UserAuthStatisCnt.setDescription('Represents the total number of each type for user authentication with this AP.')
hpnicfDot11APDeauthStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 14), )
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisTable.setDescription('The table will provide the de-authentication statistic for this AP.')
hpnicfDot11APDeauthStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 14, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APDeauthStatisType"))
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisEntry.setDescription('Each entry of the table will provide the de-authentication statistic for this AP.')
hpnicfDot11APDeauthStatisType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("total", 1), ("stationLeaving", 2), ("shortResource", 3), ("exception", 4), ("other", 5))))
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisType.setDescription('Represents the type of de-authentication for this AP.')
hpnicfDot11APDeauthStatisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeauthStatisCnt.setDescription('Represents the total number of each type for de-authentication with this AP.')
hpnicfDot11APDeassocStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 15), )
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisTable.setDescription('The table will provide the de-association statistic for this AP.')
hpnicfDot11APDeassocStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 15, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APDeassocStatisType"))
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisEntry.setDescription('Each entry of the table will provide the de-association statistic for this AP.')
hpnicfDot11APDeassocStatisType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("total", 1), ("stationLeaving", 2), ("shortResource", 3), ("exception", 4), ("other", 5))))
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisType.setDescription('Represents the type of de-association with this AP.')
hpnicfDot11APDeassocStatisCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDeassocStatisCnt.setDescription('Represents the total number of each type for de-association with this AP.')
hpnicfDot11APAssocFailStatis2Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 16), )
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Table.setDescription('This table will provide statistic of association fails for each ap.')
hpnicfDot11APAssocFailStatis2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 16, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APAssocFailStatis2Type"))
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Entry.setDescription('Each entry will provide statistic of association fails for this ap.')
hpnicfDot11APAssocFailStatis2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shortResource", 1), ("notSupportRateSet", 2), ("unknownReasonCode", 3), ("other", 4))))
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Type.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Type.setDescription('Represents the type of association fails for this AP')
hpnicfDot11APAssocFailStatis2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Cnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis2Cnt.setDescription('Represents the total count of association fails for this AP.')
hpnicfDot11APIfStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17), )
if mibBuilder.loadTexts: hpnicfDot11APIfStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfStatisTable.setDescription('The table will provide the statistics on the interface of the AP.')
hpnicfDot11APIfStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1), ).setIndexNames((0, "HPN-ICF-DOT11-REF-MIB", "hpnicfDot11APElementIndex"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIfIndex"))
if mibBuilder.loadTexts: hpnicfDot11APIfStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfStatisEntry.setDescription('Each entry of the table will provide statistics on the interface of the AP.')
hpnicfDot11APIfInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInPkts.setDescription('Represents the total number of packets received on the interface.')
hpnicfDot11APIfInNormalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInNormalPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInNormalPkts.setDescription('Represents the total number of correct packets received on the interface.')
hpnicfDot11APIfInErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInErrorPkts.setDescription('Represents the total number of error packets received on the interface.')
hpnicfDot11APIfOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutPkts.setDescription('Represents the total number of packets sent from the interface.')
hpnicfDot11APIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInOctets.setDescription('Represents the total number of octets received on the interface.')
hpnicfDot11APIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutOctets.setDescription('Represents the total number of octets sent from the interface.')
hpnicfDot11APIfFlowOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfFlowOut.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfFlowOut.setDescription('Represents the traffic rate (byte/s) on the uplink interface during a sampling period.')
hpnicfDot11APIfFlowIN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfFlowIN.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfFlowIN.setDescription('Represents the traffic rate (byte/s) on the downlink interface during a sampling period.')
hpnicfDot11APIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInUcastPkts.setDescription('Represents the number of unicast packets received on the interface.')
hpnicfDot11APIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInNUcastPkts.setDescription('Represents the number of non-unicast packets received on the wired interface.')
hpnicfDot11APIfInDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInDiscardPkts.setDescription('Represents the number of unicast packets discarded on the interface.')
hpnicfDot11APIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutUcastPkts.setDescription('Represents the number of unicast packets send on the interface.')
hpnicfDot11APIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutNUcastPkts.setDescription('Represents the number of non-unicast packets send on the interface.')
hpnicfDot11APIfOutDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutDiscardPkts.setDescription('Represents the number of discarded packets send on the interface.')
hpnicfDot11APIfOutErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutErrorPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutErrorPkts.setDescription('Represents the number of error packets send on the interface.')
hpnicfDot11APIfUpdownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfUpdownTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfUpdownTimes.setDescription('Represents the up/down times on the interface.')
hpnicfDot11APIfStatusKeepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfStatusKeepTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfStatusKeepTime.setDescription('Represents the last change time on the interface.')
hpnicfDot11APIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOperStatus.setDescription('Represents the operational state of the interface.')
hpnicfDot11APIfInBrdcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInBrdcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInBrdcastPkts.setDescription('Represents the number of broadcast packets received on the interface.')
hpnicfDot11APIfOutBrdcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutBrdcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutBrdcastPkts.setDescription('Represents the number of broadcast packets sent on the interface.')
hpnicfDot11APIfInMulcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInMulcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInMulcastPkts.setDescription('Represents the number of multicast packets received on the interface.')
hpnicfDot11APIfOutMulcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutMulcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutMulcastPkts.setDescription('Represents the number of multicast packets sent on the interface.')
hpnicfDot11APIfInPayloadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInPayloadOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInPayloadOctets.setDescription('Represents the number of actual octets received on the interface.')
hpnicfDot11APIfOutPayloadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 17, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutPayloadOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutPayloadOctets.setDescription('Represents the number of actual octets sent on the interface.')
hpnicfDot11RadioMngFrmStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 18), )
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrmStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrmStatisTable.setDescription('The table will provide the management frame statistic of this radio.')
hpnicfDot11RadioMngFrmStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 18, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11MngFrmType"))
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrmStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioMngFrmStatisEntry.setDescription('Each entry of the table will provide the management frame statistic of this radio.')
hpnicfDot11MngFrmType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("assocReq", 1), ("assocResp", 2), ("reassocReq", 3), ("reassocResp", 4), ("probeReq", 5), ("probeResp", 6), ("beacon", 7), ("atim", 8), ("disassociation", 9), ("authentication", 10), ("deauthentication", 11), ("action", 12))))
if mibBuilder.loadTexts: hpnicfDot11MngFrmType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MngFrmType.setDescription('Represents the type of the management frame on this radio.')
hpnicfDot11MngFrmCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11MngFrmCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MngFrmCnt.setDescription('Represents the total number of each type of management frame on this radio.')
hpnicfDot11APPacketSizeStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 19), )
if mibBuilder.loadTexts: hpnicfDot11APPacketSizeStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketSizeStatisTable.setDescription('This table provides packets statistic base on size.')
hpnicfDot11APPacketSizeStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 19, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APPacketSize"))
if mibBuilder.loadTexts: hpnicfDot11APPacketSizeStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketSizeStatisEntry.setDescription('Each entry provides packets statistic base on size for each radio of a specific AP.')
hpnicfDot11APPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sizeLevel1", 1), ("sizeLevel2", 2), ("sizeLevel3", 3), ("sizeLevel4", 4))))
if mibBuilder.loadTexts: hpnicfDot11APPacketSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketSize.setDescription('This node represents packet size: sizeLevel1 : size <= 128 sizeLevel2 : 128 < size <= 512 sizeLevel3 : 512 < size <= 1024 sizeLevel4 : size > 1024')
hpnicfDot11APRXPacketSizeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 19, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APRXPacketSizeCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRXPacketSizeCount.setDescription('Represents the count of packets reception base on frame size.')
hpnicfDot11APTXPacketSizeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 19, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTXPacketSizeCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTXPacketSizeCount.setDescription('Represents the count of packets transmission base on frame size.')
hpnicfDot11APPacketRateStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 20), )
if mibBuilder.loadTexts: hpnicfDot11APPacketRateStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketRateStatisTable.setDescription('This table provides packets statistic base on rate.')
hpnicfDot11APPacketRateStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 20, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APPacketRate"))
if mibBuilder.loadTexts: hpnicfDot11APPacketRateStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketRateStatisEntry.setDescription('Each entry provides packets statistic base on rate for each radio of a specific AP.')
hpnicfDot11APPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11APPacketRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketRate.setDescription('Represents transmit data rate(twice as actual rate).')
hpnicfDot11APRXPacketRateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 20, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APRXPacketRateCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRXPacketRateCount.setDescription('Represents the count of packets reception base on transmit data rate.')
hpnicfDot11APTXPacketRateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 20, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTXPacketRateCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTXPacketRateCount.setDescription('Represents the count of packets transmission base on transmit data rate.')
hpnicfDot11APPacketMCSRateStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 21), )
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatisTable.setDescription('This table provides packets statistic base on MCS rate.')
hpnicfDot11APPacketMCSRateStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 21, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APPacketMCSRate"))
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatisEntry.setDescription('Each entry provides packets statistic base on MCS rate for each radio of a specific AP.')
hpnicfDot11APPacketMCSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRate.setDescription('Represents transmit data rate(twice as actual rate).')
hpnicfDot11APRXPacketMCSRateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 21, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APRXPacketMCSRateCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRXPacketMCSRateCount.setDescription('Represents the count of packets reception base on transmit data rate.')
hpnicfDot11APTXPacketMCSRateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 21, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTXPacketMCSRateCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTXPacketMCSRateCount.setDescription('Represents the count of packets transmission base on transmit data rate.')
hpnicfDot11APAssocFailStatis3Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22), )
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3Table.setDescription('This table will provide statistic of association fails for each AP.')
hpnicfDot11APAssocFailStatis3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3Entry.setDescription('Each entry will provide statistic of association failure with this AP because of different reasons.')
hpnicfDot11APAssocFailStatis3SRCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3SRCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3SRCnt.setDescription('This object represents the count of association failure because of lack of resource.')
hpnicfDot11APAssocFailStatis3NSRCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3NSRCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3NSRCnt.setDescription('This object represents the count of association failure because of not support rate set.')
hpnicfDot11APAssocFailStatis3URCCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3URCCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3URCCnt.setDescription('This object represents the count of association failure because of unknown reason code.')
hpnicfDot11APAssocFailStatis3RFCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3RFCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3RFCnt.setDescription('This object represents the count of association failure because of re-associate failed.')
hpnicfDot11APAssocFailStatis3OtherCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3OtherCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatis3OtherCnt.setDescription('This object represents the count of association fails because of reason not in 802.11 the protocol.')
hpnicfDot11APAssocFailStatisRSSILowCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisRSSILowCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocFailStatisRSSILowCntCM.setDescription('Represents the count of failed associations due to low RSSI.')
hpnicfDot11APIfStatisByAPIDTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23), )
if mibBuilder.loadTexts: hpnicfDot11APIfStatisByAPIDTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfStatisByAPIDTable.setDescription('The table will provide the statistics on the interface of the AP.')
hpnicfDot11APIfStatisByAPIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIfIndex"))
if mibBuilder.loadTexts: hpnicfDot11APIfStatisByAPIDEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfStatisByAPIDEntry.setDescription('Each entry of the table will provide statistics on the interface of the AP.')
hpnicfDot11APIfInPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInPkts2.setDescription('Represents the total number of packets received on the interface.')
hpnicfDot11APIfInNormalPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInNormalPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInNormalPkts2.setDescription('Represents the total number of correct packets received on the interface.')
hpnicfDot11APIfInErrorPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInErrorPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInErrorPkts2.setDescription('Represents the total number of error packets received on the interface.')
hpnicfDot11APIfOutPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutPkts2.setDescription('Represents the total number of packets sent from the interface.')
hpnicfDot11APIfInOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInOctets2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInOctets2.setDescription('Represents the total number of octets received on the interface.')
hpnicfDot11APIfOutOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutOctets2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutOctets2.setDescription('Represents the total number of octets sent from the interface.')
hpnicfDot11APIfFlowOut2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfFlowOut2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfFlowOut2.setDescription('Represents the traffic rate (byte/s) on the uplink interface during a sampling period.')
hpnicfDot11APIfFlowIN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfFlowIN2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfFlowIN2.setDescription('Represents the traffic rate (byte/s) on the downlink interface during a sampling period.')
hpnicfDot11APIfInUcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInUcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInUcastPkts2.setDescription('Represents the number of unicast packets received on the interface.')
hpnicfDot11APIfInNUcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInNUcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInNUcastPkts2.setDescription('Represents the number of non-unicast packets received on the wired interface.')
hpnicfDot11APIfInDiscardPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInDiscardPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInDiscardPkts2.setDescription('Represents the number of unicast packets discarded on the interface.')
hpnicfDot11APIfOutUcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutUcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutUcastPkts2.setDescription('Represents the number of unicast packets send on the interface.')
hpnicfDot11APIfOutNUcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutNUcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutNUcastPkts2.setDescription('Represents the number of non-unicast packets send on the interface.')
hpnicfDot11APIfOutDiscardPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutDiscardPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutDiscardPkts2.setDescription('Represents the number of discarded packets send on the interface.')
hpnicfDot11APIfOutErrorPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutErrorPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutErrorPkts2.setDescription('Represents the number of error packets send on the interface.')
hpnicfDot11APIfUpdownTimes2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfUpdownTimes2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfUpdownTimes2.setDescription('Represents the up/down times on the interface.')
hpnicfDot11APIfStatusKeepTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfStatusKeepTime2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfStatusKeepTime2.setDescription('Represents the last change time on the interface.')
hpnicfDot11APIfOperStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOperStatus2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOperStatus2.setDescription('Represents the operational state of the interface.')
hpnicfDot11APIfInBrdcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInBrdcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInBrdcastPkts2.setDescription('Represents the number of broadcast packets received on the interface.')
hpnicfDot11APIfOutBrdcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutBrdcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutBrdcastPkts2.setDescription('Represents the number of broadcast packets sent on the interface.')
hpnicfDot11APIfInMulcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInMulcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInMulcastPkts2.setDescription('Represents the number of multicast packets received on the interface.')
hpnicfDot11APIfOutMulcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutMulcastPkts2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutMulcastPkts2.setDescription('Represents the number of multicast packets sent on the interface.')
hpnicfDot11APIfInPayloadOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInPayloadOctets2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInPayloadOctets2.setDescription('Represents the number of actual octets received on the interface.')
hpnicfDot11APIfOutPayloadOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutPayloadOctets2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutPayloadOctets2.setDescription('Represents the number of actual octets sent on the interface.')
hpnicfDot11APIfInDataOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfInDataOctets2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfInDataOctets2.setDescription('Represents the number of actual data octets received on the interface.')
hpnicfDot11APIfOutDataOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOutDataOctets2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOutDataOctets2.setDescription('Represents the number of actual data octets sent on the interface.')
hpnicfDot11APIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfAdminStatus.setDescription('Expected state of the interface. In testing state the interface does not forward any operational packets. When a managed system is initialized, all interfaces start with hpnicfDot11APIfAdminStatus in the down state. As a result of either explicit management action or per configuration information retained by the managed system, hpnicfDot11APIfAdminStatus is then changed to either the up or testing state or remains in the down state.')
hpnicfDot11APIfOperStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 23, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("admindown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APIfOperStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfOperStatusCM.setDescription('Operational status of the interface.')
hpnicfDot11APUserSecAuthStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24), )
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisTable.setDescription('The table will provide the user authentication statistic for this AP.')
hpnicfDot11APUserSecAuthStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisEntry.setDescription('Each entry of the table will provide the user authentication statistic for this AP.')
hpnicfDot11APUserAuthCurNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthCurNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthCurNumber.setDescription('Represents the current number of user authenticated with this AP.')
hpnicfDot11APUserConnFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserConnFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserConnFailCnt.setDescription('Represents the total number of user disconnected with this AP.')
hpnicfDot11APUserAuthReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthReqCnt.setDescription('Represents the total number of user authentication request with this AP.')
hpnicfDot11APUserAuthSuccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthSuccCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthSuccCnt.setDescription('Represents the total number of successful authenticated users with this AP.')
hpnicfDot11APUserAuthFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthFailCnt.setDescription('Represents the total number of user authentication failures with this AP.')
hpnicfDot11AllUserOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 24, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AllUserOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllUserOnlineTime.setDescription('Represents the online time of all successful authenticated users with this AP.')
hpnicfDot11APUserInfoStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25), )
if mibBuilder.loadTexts: hpnicfDot11APUserInfoStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserInfoStatisTable.setDescription('The table will provide the user information statistic of this AP.')
hpnicfDot11APUserInfoStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APUserMacAddr"))
if mibBuilder.loadTexts: hpnicfDot11APUserInfoStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserInfoStatisEntry.setDescription('Each entry of the table will provide the user information statistic of this AP.')
hpnicfDot11APUserMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfDot11APUserMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserMacAddr.setDescription('Represents the mac address of user logging to this AP.')
hpnicfDot11APUserIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserIpAddr.setDescription('Represents the ip address of user logging to this AP.')
hpnicfDot11APUserLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserLoginName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserLoginName.setDescription('Represents the login name of user logging to this AP.')
hpnicfDot11APUserLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserLoginTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserLoginTime.setDescription('Represents the login time of user with this AP.')
hpnicfDot11APUserOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserOnlineTime.setDescription('Represents the online time of user with this AP.')
hpnicfDot11APUserLoginNameCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserLoginNameCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserLoginNameCM.setDescription('Represents the login name of dot1x user logging to this AP.')
hpnicfDot11APUserAuthTypeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("authFree", 1), ("associateAuth", 2), ("portalAuth", 3), ("autoAuth", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthTypeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthTypeCM.setDescription('Represents the authentication type of user with this AP. authFree - There is no need others authentiaction, user will surf internet after association. associateAuth - Include WEP PSK authentication. portalAuth - The authentication lunched by portal pop-up program. autoAuth - 802.1X authentication.')
hpnicfDot11APUserTxPacketCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserTxPacketCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserTxPacketCntCM.setDescription('Represents the total count of packets sent to online users.')
hpnicfDot11APUserTxBytesCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserTxBytesCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserTxBytesCM.setDescription('Represents the total bytes sent to online users.')
hpnicfDot11APUserRxPacketCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserRxPacketCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserRxPacketCntCM.setDescription('Represents the total count of packets received from online users.')
hpnicfDot11APUserRxBytesCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 25, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserRxBytesCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserRxBytesCM.setDescription('Represents the total bytes received from online users.')
hpnicfDot11APReassocStatis2Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 26), )
if mibBuilder.loadTexts: hpnicfDot11APReassocStatis2Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocStatis2Table.setDescription('This table will provide statistic of reassociation for each AP.')
hpnicfDot11APReassocStatis2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 26, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APReassocStatis2Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocStatis2Entry.setDescription('Each entry will provide statistic of reassociation with this AP because of different reasons.')
hpnicfDot11APReassocFailStatis2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 26, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APReassocFailStatis2Cnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APReassocFailStatis2Cnt.setDescription('This object represents the count of reassociation failure because of lack of resource.')
hpnicfDot11TrafficTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27), )
if mibBuilder.loadTexts: hpnicfDot11TrafficTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TrafficTable.setDescription("The table describes user's traffic based on ssid")
hpnicfDot11TrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11SSIDIndex"))
if mibBuilder.loadTexts: hpnicfDot11TrafficEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TrafficEntry.setDescription('Each entry contains the traffc information of a ssid.')
hpnicfDot11SSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27, 1, 1), OctetString())
if mibBuilder.loadTexts: hpnicfDot11SSIDIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSIDIndex.setDescription('Represents the SSID.')
hpnicfDot11UpPacketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11UpPacketNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UpPacketNumber.setDescription('Represents the packet count of up link.')
hpnicfDot11UpByteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11UpByteNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UpByteNumber.setDescription('Represents the byte count of up link.')
hpnicfDot11DownPacketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11DownPacketNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DownPacketNumber.setDescription('Represents the packet count of down link.')
hpnicfDot11DownByteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 27, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11DownByteNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DownByteNumber.setDescription('Represents the byte count of down link.')
hpnicfDot11APEchoStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 28), )
if mibBuilder.loadTexts: hpnicfDot11APEchoStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APEchoStatisTable.setDescription('The table will provide the Echo statistic of this AP.')
hpnicfDot11APEchoInfoStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 28, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APEchoInfoStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APEchoInfoStatisEntry.setDescription('Each entry of the table will provide the Echo statistic of this AP.')
hpnicfDot11APEchoAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 28, 1, 1), Integer32()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APEchoAvgDelay.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APEchoAvgDelay.setDescription('This object represents the average time delay of heart beat in this AP.')
hpnicfDot11APEchoRequestCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 28, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APEchoRequestCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APEchoRequestCnt.setDescription('This object represents the count of echo request in this AP.')
hpnicfDot11APEchoRespLossCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 28, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APEchoRespLossCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APEchoRespLossCnt.setDescription('This object represents the loss count of echo response in this AP.')
hpnicfDot11APUserSecAuthTypeStatisTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29), )
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthTypeStatisTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthTypeStatisTable.setDescription('The table will provide the user authentication type statistic for this AP.')
hpnicfDot11APUserSecAuthTypeStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"))
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthTypeStatisEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthTypeStatisEntry.setDescription('Each entry of the table will provide the user authentication type statistic for this AP.')
hpnicfDot11APPortalOnlineUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APPortalOnlineUserNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPortalOnlineUserNum.setDescription('Represents the number of online portal users of this AP, including MAC-trigger and IMSIAuth users.')
hpnicfDot11APAuthFreeOnlineUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAuthFreeOnlineUserNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAuthFreeOnlineUserNum.setDescription('Represents the online number of user free authenticated with this AP.')
hpnicfDot11APAssocAuthOnlineUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthOnlineUserNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthOnlineUserNum.setDescription('Represents the number of online users authenticated by associated authentication with this AP, excluding AutoAuth users.')
hpnicfDot11APMacAuthOnlineUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAuthOnlineUserNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAuthOnlineUserNum.setDescription('Represents the online number of user MAC address authenticated with this AP.')
hpnicfDot11APAllPortalUserOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAllPortalUserOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAllPortalUserOnlineTime.setDescription('Represents the online time of all user portal authenticated with this AP.')
hpnicfDot11APAllAuthFreeUserOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAllAuthFreeUserOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAllAuthFreeUserOnlineTime.setDescription('Represents the online time of all user free authenticated with this AP.')
hpnicfDot11APAllAssocAuthUserOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAllAssocAuthUserOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAllAssocAuthUserOnlineTime.setDescription('Represents the online time of all user associated authenticated with this AP.')
hpnicfDot11APAllMacAuthUserOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAllMacAuthUserOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAllMacAuthUserOnlineTime.setDescription('Represents the online time of all user MAC address authenticated with this AP.')
hpnicfDot11APPortalUserLostCnntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APPortalUserLostCnntCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPortalUserLostCnntCnt.setDescription('Represents the lost connective count of user portal authenticated with this AP.')
hpnicfDot11APAuthFreeUserLostCnntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAuthFreeUserLostCnntCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAuthFreeUserLostCnntCnt.setDescription('Represents the lost connective count of user free authenticated with this AP.')
hpnicfDot11APAssocAuthUserLostCnntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthUserLostCnntCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthUserLostCnntCnt.setDescription('Represents the lost connective count of user associate authenticated with this AP.')
hpnicfDot11APMacAuthUserLostCnntCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAuthUserLostCnntCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAuthUserLostCnntCnt.setDescription('Represents the lost connective count of user MAC address authenticated with this AP.')
hpnicfDot11APPortalAuthReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APPortalAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPortalAuthReqCnt.setDescription('Represents the request count of user portal authenticated with this AP.')
hpnicfDot11APAssocAuthReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthReqCnt.setDescription('Represents the request count of user associate authenticated with this AP.')
hpnicfDot11APMacAuthReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAuthReqCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAuthReqCnt.setDescription('Represents the request count of user MAC address authenticated with this AP.')
hpnicfDot11APPortalAuthSucCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APPortalAuthSucCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPortalAuthSucCnt.setDescription('Represents the count of user portal authenticated successed with this AP.')
hpnicfDot11APAssocAuthSucCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthSucCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthSucCnt.setDescription('Represents the count of user associate authenticated successed with this AP.')
hpnicfDot11APMacAuthSucCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAuthSucCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAuthSucCnt.setDescription('Represents the count of user MAC address authenticated successed with this AP.')
hpnicfDot11APPortalAuthReqFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APPortalAuthReqFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPortalAuthReqFailCnt.setDescription('Represents the count of user portal authenticated failed with this AP.')
hpnicfDot11APAssocAuthReqFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthReqFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAssocAuthReqFailCnt.setDescription('Represents the count of user associate authenticated failed with this AP.')
hpnicfDot11APMacAuthReqFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APMacAuthReqFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMacAuthReqFailCnt.setDescription('Represents the count of user MAC address authenticated failed with this AP.')
hpnicfDot11APAutoAuthOnlineUserNumCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthOnlineUserNumCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthOnlineUserNumCM.setDescription('Represents the number of online users authenticated by auto authentication with this AP.')
hpnicfDot11APAllAutoAuthUserOnlineTimeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAllAutoAuthUserOnlineTimeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAllAutoAuthUserOnlineTimeCM.setDescription('Represents the online time of users authenticated by auto authentication with this AP.')
hpnicfDot11APAutoAuthUserLostCnntCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthUserLostCnntCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthUserLostCnntCntCM.setDescription('Represents the disconnection count of AutoAuth users.')
hpnicfDot11APAutoAuthReqCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthReqCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthReqCntCM.setDescription('Represents the count of AutoAuth requests with this AP.')
hpnicfDot11APAutoAuthSucCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthSucCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthSucCntCM.setDescription('Represents the count of successful AutoAuth authentications with this AP.')
hpnicfDot11APAutoAuthReqFailCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 29, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthReqFailCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APAutoAuthReqFailCntCM.setDescription('Represents the count of failed AutoAuth requests with this AP.')
hpnicfDot11RadioRxStatis64Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30), )
if mibBuilder.loadTexts: hpnicfDot11RadioRxStatis64Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioRxStatis64Table.setDescription('The table will provide the reception statistic for a specific radio of AP.')
hpnicfDot11RadioRxStatis64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11RadioRxStatis64Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioRxStatis64Entry.setDescription('Each entry of the table will provide the reception statistic data for each radio of a specific AP.')
hpnicfDot11Rx64FrameDupCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64FrameDupCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64FrameDupCnt.setDescription('Represents the number of duplicate frames reception.')
hpnicfDot11Rx64FrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64FrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64FrameCnt.setDescription('Represents the number of frames reception.')
hpnicfDot11Rx64UcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64UcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64UcastFrameCnt.setDescription('Represents the number of unicast frames reception.')
hpnicfDot11Rx64BcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64BcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64BcastFrameCnt.setDescription('Represents the number of broadcast frames reception.')
hpnicfDot11Rx64McastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64McastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64McastFrameCnt.setDescription('Represents the number of multicast frames reception.')
hpnicfDot11Rx64DiscardFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64DiscardFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64DiscardFrameCnt.setDescription('Represents the number of discarded frames reception.')
hpnicfDot11Rx64FragCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64FragCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64FragCnt.setDescription('Represents the number of frame fragments reception.')
hpnicfDot11Rx64FcsErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64FcsErrCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64FcsErrCnt.setDescription('Represents the number of FCS error frames reception.')
hpnicfDot11Rx64FrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64FrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64FrameBytes.setDescription('Represents the bytes of frames reception.')
hpnicfDot11Rx64UcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64UcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64UcastFrameBytes.setDescription('Represents the bytes of unicast frames reception.')
hpnicfDot11Rx64BcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64BcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64BcastFrameBytes.setDescription('Represents the bytes of broadcast frames reception.')
hpnicfDot11Rx64McastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64McastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64McastFrameBytes.setDescription('Represents the bytes of multicast frames reception.')
hpnicfDot11Rx64DiscardFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64DiscardFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64DiscardFrameBytes.setDescription('Represents the bytes of discarded frames reception.')
hpnicfDot11Rx64MgmtFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64MgmtFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64MgmtFrameCnt.setDescription('Represents the number of management frames reception.')
hpnicfDot11Rx64CtrlFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64CtrlFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64CtrlFrameCnt.setDescription('Represents the number of control frames reception.')
hpnicfDot11Rx64DataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64DataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64DataFrameCnt.setDescription('Represents the number of data frames reception.')
hpnicfDot11Rx64DecryptErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64DecryptErrorCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64DecryptErrorCnt.setDescription('Represents the number of decryption error reception.')
hpnicfDot11Rx64AuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64AuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64AuthenFrameCnt.setDescription('Represents the number of authentication frame reception.')
hpnicfDot11Rx64AssociateFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64AssociateFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64AssociateFrameCnt.setDescription('Represents the number of associate frame reception.')
hpnicfDot11Rx64PhyErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64PhyErrorCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64PhyErrorCnt.setDescription('Represents the number of physical error reception.')
hpnicfDot11Rx64MICErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64MICErrorCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64MICErrorCnt.setDescription('Represents the number of MIC verification error reception.')
hpnicfDot11Rx64DataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64DataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64DataFrameBytes.setDescription('Represents the bytes of data frames reception.')
hpnicfDot11Rx64PayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64PayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64PayloadBytes.setDescription('Represents the payload bytes of data frames reception.')
hpnicfDot11Rx64DataFrameBytesCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 30, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Rx64DataFrameBytesCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Rx64DataFrameBytesCM.setDescription('Represents the number of received data frames, excluding retransmitted frames.')
hpnicfDot11RadioTxStatis64Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31), )
if mibBuilder.loadTexts: hpnicfDot11RadioTxStatis64Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioTxStatis64Table.setDescription('The table will provide the transmission statistic for a specific radio of AP.')
hpnicfDot11RadioTxStatis64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11RadioTxStatis64Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioTxStatis64Entry.setDescription('Each entry of the table will provide the transmission statistic data for each radio of a specific AP.')
hpnicfDot11Tx64FragCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64FragCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64FragCnt.setDescription('Represents the number of fragmented frames transmission.')
hpnicfDot11Tx64FailedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64FailedCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64FailedCnt.setDescription('Represents the number of failures transmission.')
hpnicfDot11Tx64RetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64RetryCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64RetryCnt.setDescription('Represents the number of retries transmission.')
hpnicfDot11Tx64MultiRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64MultiRetryCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64MultiRetryCnt.setDescription('Represents the number of transmits that required more than one retry transmission.')
hpnicfDot11Tx64RtsSuccessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64RtsSuccessCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64RtsSuccessCnt.setDescription('Represents the number of successful RTS (Request to send) transmission.')
hpnicfDot11Tx64RtsFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64RtsFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64RtsFailCnt.setDescription('Represents the number of RTS failures transmission.')
hpnicfDot11Tx64AckFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64AckFailCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64AckFailCnt.setDescription('Represents the number of acknowledgement failures transmission.')
hpnicfDot11Tx64FrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64FrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64FrameCnt.setDescription('Represents the total number of frames transmission.')
hpnicfDot11Tx64UcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64UcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64UcastFrameCnt.setDescription('Represents the number of unicast frames transmission.')
hpnicfDot11Tx64BcastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64BcastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64BcastFrameCnt.setDescription('Represents the number of broadcast frames transmission.')
hpnicfDot11Tx64McastFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64McastFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64McastFrameCnt.setDescription('Represents the number of multicast frames transmission.')
hpnicfDot11Tx64DiscardFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64DiscardFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64DiscardFrameCnt.setDescription('Represents the number of discarded frames transmission.')
hpnicfDot11Tx64FrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64FrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64FrameBytes.setDescription('Represents the total bytes of frames transmission.')
hpnicfDot11Tx64UcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64UcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64UcastFrameBytes.setDescription('Represents the bytes of unicast frames transmission.')
hpnicfDot11Tx64BcastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64BcastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64BcastFrameBytes.setDescription('Represents the bytes of broadcast frames transmission.')
hpnicfDot11Tx64McastFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64McastFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64McastFrameBytes.setDescription('Represents the bytes of multicast frames transmission.')
hpnicfDot11Tx64DiscardFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64DiscardFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64DiscardFrameBytes.setDescription('Represents the bytes of discard frames transmission.')
hpnicfDot11Tx64AuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64AuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64AuthenFrameCnt.setDescription('Represents the number of authentication frame transmission.')
hpnicfDot11Tx64AssociateFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64AssociateFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64AssociateFrameCnt.setDescription('Represents the number of associate frame transmission.')
hpnicfDot11Tx64DataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64DataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64DataFrameCnt.setDescription('Represents the number of data frame transmission.')
hpnicfDot11Tx64DataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64DataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64DataFrameBytes.setDescription('Represents the bytes of data frame transmission.')
hpnicfDot11Tx64MSDUCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64MSDUCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64MSDUCnt.setDescription('Represents the total number of MSDU transmission.')
hpnicfDot11Tx64DiscardMSDUCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64DiscardMSDUCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64DiscardMSDUCnt.setDescription('Represents the number of discarded MSDU transmission.')
hpnicfDot11Tx64RetryMSDUCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64RetryMSDUCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64RetryMSDUCnt.setDescription('Represents the number of retransfer MSDU transmission.')
hpnicfDot11Tx64PayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64PayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64PayloadBytes.setDescription('Represents the payload bytes of data frames transmission.')
hpnicfDot11Tx64MgtFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64MgtFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64MgtFrameCnt.setDescription('Represents the number of management frames transmission.')
hpnicfDot11Tx64CtrlFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64CtrlFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64CtrlFrameCnt.setDescription('Represents the number of control frames transmission.')
hpnicfDot11Tx64MACErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64MACErrCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64MACErrCnt.setDescription('Represents the number of MAC error frame transmission.')
hpnicfDot11Tx64ErrFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 31, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11Tx64ErrFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Tx64ErrFrameCnt.setDescription('Represents the number of error frame transmission.')
hpnicfDot11BSSRxStatis64Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32), )
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatis64Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatis64Table.setDescription('The table will provide the reception statistic for a specific BSS on a radio.')
hpnicfDot11BSSRxStatis64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatis64Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRxStatis64Entry.setDescription('Each entry of the table will provide the reception statistic data for each BSS on a specific radio.')
hpnicfDot11BSSRx64FrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64FrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64FrameCnt.setDescription('Represents the number of frames reception with this BSS.')
hpnicfDot11BSSRx64FrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64FrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64FrameBytes.setDescription('Represents the bytes of frames reception with this BSS.')
hpnicfDot11BSSRx64DataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64DataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64DataFrameCnt.setDescription('Represents the number of data frames reception with this BSS.')
hpnicfDot11BSSRx64DataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64DataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64DataFrameBytes.setDescription('Represents the bytes of data frames reception with this BSS.')
hpnicfDot11BSSRx64AssocFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64AssocFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64AssocFrameCnt.setDescription('Represents the number of associate frames reception with this BSS.')
hpnicfDot11BSSRx64PayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64PayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64PayloadBytes.setDescription('Represents the payload bytes of data frames reception with this BSS.')
hpnicfDot11BSSRx64UniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64UniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64UniFrameCnt.setDescription('Represents the number of unicast frames reception with this BSS.')
hpnicfDot11BSSRx64NonUniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64NonUniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64NonUniFrameCnt.setDescription('Represents the number of non-unicast frames reception with this BSS.')
hpnicfDot11BSSRx64AuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 32, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSRx64AuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSRx64AuthenFrameCnt.setDescription('Represents the number of authentication frames reception with this BSS.')
hpnicfDot11BSSTxStatis64Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33), )
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatis64Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatis64Table.setDescription('The table will provide the transmission statistic for a specific BSS on a radio.')
hpnicfDot11BSSTxStatis64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatis64Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTxStatis64Entry.setDescription('Each entry of the table will provide the transmission statistic data for each BSS on a specific radio.')
hpnicfDot11BSSTx64FrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64FrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64FrameCnt.setDescription('Represents the total number of frames transmission with this BSS.')
hpnicfDot11BSSTx64FrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64FrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64FrameBytes.setDescription('Represents the total number of bytes transmission with this BSS.')
hpnicfDot11BSSTx64DataFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64DataFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64DataFrameCnt.setDescription('Represents the number of data frame transmission with this BSS.')
hpnicfDot11BSSTx64DataFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64DataFrameBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64DataFrameBytes.setDescription('Represents the bytes of data frame transmission with this BSS.')
hpnicfDot11BSSTx64AssocFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64AssocFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64AssocFrameCnt.setDescription('Represents the number of associate frame transmission with this BSS.')
hpnicfDot11BSSTx64PayloadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64PayloadBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64PayloadBytes.setDescription('Represents the payload bytes of data frame transmission with this BSS.')
hpnicfDot11BSSTx64RetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64RetryCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64RetryCnt.setDescription('Represents the number of bytes retransmitted with this BSS.')
hpnicfDot11BSSTx64UniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64UniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64UniFrameCnt.setDescription('Represents the number of unicast frames transmission with this BSS.')
hpnicfDot11BSSTx64NonUniFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64NonUniFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64NonUniFrameCnt.setDescription('Represents the number of non-unicast frames transmission with this BSS.')
hpnicfDot11BSSTx64AuthenFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 33, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11BSSTx64AuthenFrameCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BSSTx64AuthenFrameCnt.setDescription('Represents the number of authentication frames transmission with this BSS.')
hpnicfDot11APPacketMCSRateStatis2Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 34), )
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatis2Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatis2Table.setDescription('This table provides packet statistics based on MCS rate.')
hpnicfDot11APPacketMCSRateStatis2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 34, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APPacketMCS2Rate"))
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatis2Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketMCSRateStatis2Entry.setDescription('Each entry provides packet statistics based on MCS rate for each radio of a specific AP.')
hpnicfDot11APPacketMCS2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: hpnicfDot11APPacketMCS2Rate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPacketMCS2Rate.setDescription('Represents data transmission rate(Tenfold as actual rate).')
hpnicfDot11APRXPacketMCSRate2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 34, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APRXPacketMCSRate2Count.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRXPacketMCSRate2Count.setDescription('Represents the count of packets received based on data transmission rate.')
hpnicfDot11APTXPacketMCSRate2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 34, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APTXPacketMCSRate2Count.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTXPacketMCSRate2Count.setDescription('Represents the count of packets transmitted base on data transmission rate.')
hpnicfDot11APUserSecAuthStatisCMTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35), )
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisCMTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisCMTable.setDescription('The table provides the user authentication statistics.')
hpnicfDot11APUserSecAuthStatisCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35, 1), ).setIndexNames((0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurAPID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), (0, "HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11WlanID"))
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisCMEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserSecAuthStatisCMEntry.setDescription('Each entry of the table provides the user authentication statistics of AP.')
hpnicfDot11APUserConnFailCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserConnFailCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserConnFailCntCM.setDescription('Represents the failed connection count of users with this AP.')
hpnicfDot11APUserAuthReqCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthReqCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthReqCntCM.setDescription('Represents the total number of user authentication requests with this AP.')
hpnicfDot11APUserAuthSuccCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthSuccCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthSuccCntCM.setDescription('Represents the total number of successful user authentications with this AP.')
hpnicfDot11APUserAuthFailCntCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APUserAuthFailCntCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserAuthFailCntCM.setDescription('Represents the total number of failed user authentications with this AP.')
hpnicfDot11AllUserOnlineTimeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 2, 35, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11AllUserOnlineTimeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllUserOnlineTimeCM.setDescription('Represents the online time of all users with this AP.')
hpnicfDot11APMtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0))
hpnicfDot11APMtWorkModeChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 1)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APChgWorkMode"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtWorkModeChgTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtWorkModeChgTrap.setDescription('The notification will be sent when AP changes the work mode, and hpnicfDot11APWorkMode suggests which work mode will be used by AP.')
hpnicfDot11APMtCfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 2)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapCfgErrReason"))
if mibBuilder.loadTexts: hpnicfDot11APMtCfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtCfgErrorTrap.setDescription('The notification will represent errors caused by the configuration operation of AP.')
hpnicfDot11APMtRadioFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 3)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapRadioFailReason"))
if mibBuilder.loadTexts: hpnicfDot11APMtRadioFailTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtRadioFailTrap.setDescription('The notification will notify which the operational status of radio becomes down.')
hpnicfDot11APMtRadioFailRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 4)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"))
if mibBuilder.loadTexts: hpnicfDot11APMtRadioFailRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtRadioFailRecoverTrap.setDescription('The notification will notify the operational status of which radio becomes up again.')
hpnicfDot11APMtRdoChanlChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 5)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APChannelChgMode"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapOldChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapNewChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtChanlChgCount"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtRdoChanlChgTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtRdoChanlChgTrap.setDescription('The notification will represent which radio changes the channel.')
hpnicfDot11APMtTimeSynFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 6)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"))
if mibBuilder.loadTexts: hpnicfDot11APMtTimeSynFail.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTimeSynFail.setDescription('The notification will be sent when AC and AP failed to synchronize their time.')
hpnicfDot11APMtChlIntfDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 7)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"))
if mibBuilder.loadTexts: hpnicfDot11APMtChlIntfDetected.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtChlIntfDetected.setDescription('The notification will be sent when some ambient device interferes with current channel.')
hpnicfDot11APMtIntfAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 8)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIntfDevMACAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtIntfAPDetected.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtIntfAPDetected.setDescription('The notification will be sent when some ambient AP interferes with current channel.')
hpnicfDot11APMtIntfStaDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 9)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIntfDevMACAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtIntfStaDetected.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtIntfStaDetected.setDescription('The notification will be sent when some ambient station interferes with current channel.')
hpnicfDot11APMtIPChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 10)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APIPAddress"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapOldIPAddr"))
if mibBuilder.loadTexts: hpnicfDot11APMtIPChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtIPChange.setDescription('The notification will be sent when IP address of the AP changes.')
hpnicfDot11APFlashWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 11)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFormerApVersion"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APFlashWriteFailure.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APFlashWriteFailure.setDescription('The notification will be sent when AP failed to write data into flash.')
hpnicfDot11APSysReboot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 12)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"))
if mibBuilder.loadTexts: hpnicfDot11APSysReboot.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysReboot.setDescription('The notification will be sent when AP reboots.')
hpnicfDot11APMtAvailChlTooLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 13)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtAvailChlTooLow.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtAvailChlTooLow.setDescription('The notification will be sent when number of available channels is too low. ')
hpnicfDot11APImgDwldSuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 14)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurrAPName"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurrAPIPAddress"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurrAPSoftwareVersion"))
if mibBuilder.loadTexts: hpnicfDot11APImgDwldSuccess.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APImgDwldSuccess.setDescription('The notification will be sent when AP succeeds to download image from AC. ')
hpnicfDot11APInterfDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 15)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurrInterfDetectedNum"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11InterfMacList"))
if mibBuilder.loadTexts: hpnicfDot11APInterfDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APInterfDetectedTrap.setDescription('This notification will be sent when some ambient AP interferes with current channel.')
hpnicfDot11APInterfClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 16)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtInterfMacAdd"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APInterfClearTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APInterfClearTrap.setDescription('This notification will be sent when interference caused by ambient APs on the current channel disappears.')
hpnicfDot11StaInterfDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 17)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11CurrInterfDetectedNum"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11InterfMacList"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDot11StaInterfDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaInterfDetectedTrap.setDescription('This notification will be sent when interference caused by ambient STAs on the current channel disappears.')
hpnicfDot11StaInterfClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 18)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtInterfMacAdd"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11StaInterfClearTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaInterfClearTrap.setDescription('This notification will be sent when interference caused by ambient devices on the current channel happens.')
hpnicfDot11OtherDevIntDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 19)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDot11OtherDevIntDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11OtherDevIntDetectedTrap.setDescription('This notification will be sent when interference caused by ambient devices on the current channel disappears.')
hpnicfDot11OtherDevIntClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 20)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11Channel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11OtherDevIntClearTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11OtherDevIntClearTrap.setDescription('This notification will be sent when previous ambient device disappeared with the same channel.')
hpnicfDot11APModuleTroubleTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 21)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APModuleTroubleTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APModuleTroubleTrap.setDescription('This notification will be sent when WLAN module failed.')
hpnicfDot11APModuleTroubleClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 22)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APModuleTroubleClearTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APModuleTroubleClearTrap.setDescription('The notification will be sent when WLAN module recovered.')
hpnicfDot11APRadioDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 23)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APRadioDownReason"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APRadioDownTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRadioDownTrap.setDescription('This notification will be sent when WLAN links interrupted.')
hpnicfDot11APRadioDownRecovTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 24)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APRadioDownRecovTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRadioDownRecovTrap.setDescription('This notification will be sent when WLAN links recover.')
hpnicfDot11APStaFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 25)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11StaLimitNumber"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11StaFullReason"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APStaFullTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APStaFullTrap.setDescription('This notification will be sent when STA number reach limit number.')
hpnicfDot11APStaFullRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 26)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11StaLimitNumber"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11StaFullReason"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APStaFullRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APStaFullRecoverTrap.setDescription('This notification will be sent when STA number recover enough level.')
hpnicfDot11DFSFreeCntBelowThrRecov = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 27)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11RadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11DFSFreeCntBelowThrRecov.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DFSFreeCntBelowThrRecov.setDescription('This notification will be sent when available channels number recover enough level.')
hpnicfDot11APCpuUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 28)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APCPURTUsage"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APCpuUsageHigh.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCpuUsageHigh.setDescription('The notification will be sent when the AP CPU usage exceeds the threshold. ')
hpnicfDot11APCpuUsageHighRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 29)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APCPURTUsage"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APCpuUsageHighRecover.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCpuUsageHighRecover.setDescription('The notification will be sent when the AP CPU usage descends the threshold. ')
hpnicfDot11APMemUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 30)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMemRTUsage"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMemUsageHigh.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemUsageHigh.setDescription('The notification will be sent when the AP memory usage exceeds the threshold. ')
hpnicfDot11APMemUsageHighRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 31)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMemRTUsage"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMemUsageHighRecover.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemUsageHighRecover.setDescription('The notification will be sent when the AP memory usage descends the threshold. ')
hpnicfDot11APTrapUserCntExceedThre = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 32)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APTrapUserCnt"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APTrapUserThreshold"))
if mibBuilder.loadTexts: hpnicfDot11APTrapUserCntExceedThre.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTrapUserCntExceedThre.setDescription('The notification will be sent when the online user counter exceeds the threshold.')
hpnicfDot11APMtDetectedIntfAP = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 33)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtInterfMacAdd"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtDetectedIntfAP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtDetectedIntfAP.setDescription('This notification will be sent when some ambient AP interferes with current channel.')
hpnicfDot11APMtDetectedIntfSTA = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 34)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtInterfMacAdd"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtDetectedIntfSTA.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtDetectedIntfSTA.setDescription('This notification will be sent when some ambient STA interferes with current channel.')
hpnicfDot11APMtDetectedIntfOtherDev = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 35)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtTrapAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11APMtDetectedIntfOtherDev.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtDetectedIntfOtherDev.setDescription('This notification will be sent when other device interferes with current channel.')
hpnicfDot11DetcAdjChlIntfAP = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 36)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAdjChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtInterfMacAdd"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDot11DetcAdjChlIntfAP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DetcAdjChlIntfAP.setDescription('This notification will be sent when some ambient AP interferes with adjacent channel.')
hpnicfDot11DetcAdjChlIntfAPClear = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 0, 37)).setObjects(("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAPID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtRadioID"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtAdjChannel"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtInterfMacAdd"), ("HPN-ICF-DOT11-APMT-MIB", "hpnicfDot11APMtFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDot11DetcAdjChlIntfAPClear.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DetcAdjChlIntfAPClear.setDescription('This notification will be sent when interference caused by ambient APs on the adjacent channel disappears.')
hpnicfDot11APMtTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1))
hpnicfDot11APMtTrapCfgErrReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 1), HpnicfDot11NotifyReasonType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtTrapCfgErrReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTrapCfgErrReason.setDescription('Represents errors caused by configuration operation.')
hpnicfDot11APMtTrapRadioFailReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("config", 1), ("hpnicferror", 2), ("swerror", 3), ("radar", 4), ("unknown", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtTrapRadioFailReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTrapRadioFailReason.setDescription('Represents errors caused by configuration operation. The following values are supported: config - Configuration error hpnicferror - Hardware error swerror - Software error radar - Radar Detection unknown - Unknown reason')
hpnicfDot11APMtTrapOldChannel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 3), HpnicfDot11ChannelScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtTrapOldChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTrapOldChannel.setDescription('Represents which channel the radio used to use.')
hpnicfDot11APMtTrapNewChannel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 4), HpnicfDot11ChannelScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtTrapNewChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTrapNewChannel.setDescription('Represents which channel the radio will use.')
hpnicfDot11APChannelChgMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 5), HpnicfDot11RFModeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APChannelChgMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APChannelChgMode.setDescription('Represents the channel change mode for a radio.')
hpnicfDot11APChgWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APChgWorkMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APChgWorkMode.setDescription('Represents what work mode for AP. The following values are supported: normal - AP will supply WLAN service. monitor - AP will be a monitor to detect attack. hybrid - AP will supply WLAN service and detect attack.')
hpnicfDot11APIntfDevMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APIntfDevMACAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIntfDevMACAddress.setDescription('Represents MAC address of the device which triggers the notification.')
hpnicfDot11APMtTrapOldIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtTrapOldIPAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTrapOldIPAddr.setDescription('Represents the IP address of AP.')
hpnicfDot11CurrInterfDetectedNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11CurrInterfDetectedNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrInterfDetectedNum.setDescription('Represents the number of interfere detected.')
hpnicfDot11StaFullReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ap", 1), ("bss", 2), ("radio", 3), ("radioConcur", 4), ("radiopolicy", 5), ("ac", 6), ("acConcur", 7), ("aid", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StaFullReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaFullReason.setDescription('Reports which kind maximum number of STA is reached. New STA is not able to associate.')
hpnicfDot11StaLimitNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11StaLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaLimitNumber.setDescription('Represents the limit number of STA.')
hpnicfDot11APRadioDownReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phyicalUnusable", 1), ("configDisable", 2), ("operatinUnusable", 3), ("apTunnelDown", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APRadioDownReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APRadioDownReason.setDescription('Reports the reason why WLAN links is interrupted.')
hpnicfDot11InterfMacList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11InterfMacList.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11InterfMacList.setDescription('Represents MAC address list of interfere detected.')
hpnicfDot11APTrapUserCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APTrapUserCnt.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTrapUserCnt.setDescription('Represents the online user counter of AP.')
hpnicfDot11APTrapUserThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APTrapUserThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTrapUserThreshold.setDescription("Represents threshold of AP's online user counter.")
hpnicfDot11APMtChanlChgCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtChanlChgCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtChanlChgCount.setDescription('Represents how many times that channel changed.')
hpnicfDot11APMtFormerApVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 17), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtFormerApVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtFormerApVersion.setDescription('Represents former software version of AP.')
hpnicfDot11APMtAPID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 18), HpnicfDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtAPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtAPID.setDescription('To uniquely identify each AP.')
hpnicfDot11APMtRadioID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 19), HpnicfDot11RadioScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtRadioID.setDescription('Represents each radio.')
hpnicfDot11APMtChannel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 20), HpnicfDot11ChannelScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtChannel.setDescription('Represents the current channel allocation for radio.')
hpnicfDot11APMtInterfMacAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 21), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtInterfMacAdd.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtInterfMacAdd.setDescription('Represents the MAC address of an AP.')
hpnicfDot11APMtAdjChannel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 22), HpnicfDot11ChannelScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtAdjChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtAdjChannel.setDescription('Represents the adjacent channel of radio.')
hpnicfDot11APMtFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 23), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtFirstTrapTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtFirstTrapTime.setDescription('Represents the first trap time.')
hpnicfDot11APMtTrapAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 2, 3, 1, 24), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11APMtTrapAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMtTrapAPMacAddress.setDescription('Represents the MAC address of an AP.')
mibBuilder.exportSymbols("HPN-ICF-DOT11-APMT-MIB", hpnicfDot11BSSTxRetryCnt=hpnicfDot11BSSTxRetryCnt, hpnicfDot11APManuBuildInfo=hpnicfDot11APManuBuildInfo, hpnicfDot11APTXPacketMCSRate2Count=hpnicfDot11APTXPacketMCSRate2Count, hpnicfDot11RxMcastFrameCnt=hpnicfDot11RxMcastFrameCnt, hpnicfDot11AllUserOnlineTimeCM=hpnicfDot11AllUserOnlineTimeCM, hpnicfDot11APRadioEntry=hpnicfDot11APRadioEntry, hpnicfDot11RadioAssocStatisEntry=hpnicfDot11RadioAssocStatisEntry, hpnicfDot11APMtTimeSynFail=hpnicfDot11APMtTimeSynFail, hpnicfDot11APFlashFreeSize2=hpnicfDot11APFlashFreeSize2, hpnicfDot11APRxStatisTable=hpnicfDot11APRxStatisTable, hpnicfDot11APAssocFailStatisTable=hpnicfDot11APAssocFailStatisTable, hpnicfDot11APObjectStatusTable=hpnicfDot11APObjectStatusTable, hpnicfDot11AllUserOnlineTime=hpnicfDot11AllUserOnlineTime, hpnicfDot11ApStationReassocReqSum=hpnicfDot11ApStationReassocReqSum, hpnicfDot11Rx64DataFrameBytes=hpnicfDot11Rx64DataFrameBytes, hpnicfDot11APUserConnFailCntCM=hpnicfDot11APUserConnFailCntCM, hpnicfDot11APMtDetectedIntfSTA=hpnicfDot11APMtDetectedIntfSTA, hpnicfDot11APLinkStatisEntry=hpnicfDot11APLinkStatisEntry, hpnicfDot11APIfInUcastPkts=hpnicfDot11APIfInUcastPkts, hpnicfDot11APAssocAuthOnlineUserNum=hpnicfDot11APAssocAuthOnlineUserNum, hpnicfDot11RadioMngFrameStatisTable=hpnicfDot11RadioMngFrameStatisTable, hpnicfDot11Tx64UcastFrameCnt=hpnicfDot11Tx64UcastFrameCnt, hpnicfDot11APRXPacketSizeCount=hpnicfDot11APRXPacketSizeCount, hpnicfDot11Tx64CtrlFrameCnt=hpnicfDot11Tx64CtrlFrameCnt, hpnicfDot11APIfPHYAddress=hpnicfDot11APIfPHYAddress, hpnicfDot11BSSRxDataFrameBytes=hpnicfDot11BSSRxDataFrameBytes, hpnicfDot11APDeauthStatisType=hpnicfDot11APDeauthStatisType, hpnicfDot11RadioStaCurAssocSum=hpnicfDot11RadioStaCurAssocSum, hpnicfDot11APIfInUcastPkts2=hpnicfDot11APIfInUcastPkts2, hpnicfDot11APIfStatisEntry=hpnicfDot11APIfStatisEntry, hpnicfDot11APID=hpnicfDot11APID, hpnicfDot11DownLinkUpDownTimes=hpnicfDot11DownLinkUpDownTimes, hpnicfDot11APPacketSize=hpnicfDot11APPacketSize, hpnicfDot11SSIDIndex=hpnicfDot11SSIDIndex, hpnicfDot11APPacketMCSRateStatis2Table=hpnicfDot11APPacketMCSRateStatis2Table, hpnicfDot11Tx64MultiRetryCnt=hpnicfDot11Tx64MultiRetryCnt, hpnicfDot11MngFrmType=hpnicfDot11MngFrmType, hpnicfDot11UpByteNumber=hpnicfDot11UpByteNumber, hpnicfDot11APStaFullTrap=hpnicfDot11APStaFullTrap, hpnicfDot11BSSRx64AuthenFrameCnt=hpnicfDot11BSSRx64AuthenFrameCnt, hpnicfDot11TxTrafficSpeed=hpnicfDot11TxTrafficSpeed, hpnicfDot11BSSRxAssociateFrameCnt=hpnicfDot11BSSRxAssociateFrameCnt, hpnicfDot11APUserAuthStatisEntry=hpnicfDot11APUserAuthStatisEntry, hpnicfDot11APIfInOctets2=hpnicfDot11APIfInOctets2, hpnicfDot11OtherDevIntClearTrap=hpnicfDot11OtherDevIntClearTrap, hpnicfDot11APAssocFailStatis3Entry=hpnicfDot11APAssocFailStatis3Entry, hpnicfDot11APIfStatusKeepTime=hpnicfDot11APIfStatusKeepTime, hpnicfDot11TxErrFrameRatio=hpnicfDot11TxErrFrameRatio, hpnicfDot11APMacAuthReqCnt=hpnicfDot11APMacAuthReqCnt, hpnicfDot11Tx64RetryCnt=hpnicfDot11Tx64RetryCnt, hpnicfDot11APMtFormerApVersion=hpnicfDot11APMtFormerApVersion, hpnicfDot11UpPacketNumber=hpnicfDot11UpPacketNumber, hpnicfDot11BSSTx64FrameBytes=hpnicfDot11BSSTx64FrameBytes, hpnicfDot11APIfInBrdcastPkts=hpnicfDot11APIfInBrdcastPkts, hpnicfDot11APRadioTable=hpnicfDot11APRadioTable, hpnicfDot11LowestRxSignalStrength=hpnicfDot11LowestRxSignalStrength, hpnicfDot11APMtIPChange=hpnicfDot11APMtIPChange, hpnicfDot11RxPayloadBytes=hpnicfDot11RxPayloadBytes, hpnicfDot11APUserLoginTime=hpnicfDot11APUserLoginTime, hpnicfDot11APIfInDataOctets2=hpnicfDot11APIfInDataOctets2, hpnicfDot11BSSTx64DataFrameBytes=hpnicfDot11BSSTx64DataFrameBytes, hpnicfDot11InterfMacList=hpnicfDot11InterfMacList, hpnicfDot11MngFrameType=hpnicfDot11MngFrameType, hpnicfDot11APMacAddress2=hpnicfDot11APMacAddress2, hpnicfDot11APAssocAuthSucCnt=hpnicfDot11APAssocAuthSucCnt, hpnicfDot11ApStationCurAssocSum=hpnicfDot11ApStationCurAssocSum, hpnicfDot11APMemoryType=hpnicfDot11APMemoryType, hpnicfDot11APLastRegisterTime=hpnicfDot11APLastRegisterTime, hpnicfDot11APSysUpTime=hpnicfDot11APSysUpTime, hpnicfDot11APCPUAvgUsage=hpnicfDot11APCPUAvgUsage, hpnicfDot11DetcAdjChlIntfAP=hpnicfDot11DetcAdjChlIntfAP, hpnicfDot11RadioStaExDeAssocSum=hpnicfDot11RadioStaExDeAssocSum, hpnicfDot11ApStationAssocFailSum=hpnicfDot11ApStationAssocFailSum, hpnicfDot11APTemplateNameOfAP=hpnicfDot11APTemplateNameOfAP, hpnicfDot11DetcAdjChlIntfAPClear=hpnicfDot11DetcAdjChlIntfAPClear, hpnicfDot11RxFrameCnt=hpnicfDot11RxFrameCnt, hpnicfDot11APIfOutDiscardPkts=hpnicfDot11APIfOutDiscardPkts, hpnicfDot11APAllPortalUserOnlineTime=hpnicfDot11APAllPortalUserOnlineTime, hpnicfDot11APAllAssocAuthUserOnlineTime=hpnicfDot11APAllAssocAuthUserOnlineTime, hpnicfDot11Rx64PhyErrorCnt=hpnicfDot11Rx64PhyErrorCnt, hpnicfDot11APMemAvgUsage=hpnicfDot11APMemAvgUsage, hpnicfDot11APBSSTable=hpnicfDot11APBSSTable, hpnicfDot11Rx64FrameBytes=hpnicfDot11Rx64FrameBytes, hpnicfDot11ResourceUseRatio=hpnicfDot11ResourceUseRatio, hpnicfDot11APMacAuthReqFailCnt=hpnicfDot11APMacAuthReqFailCnt, hpnicfDot11APIfSpeed=hpnicfDot11APIfSpeed, hpnicfDot11APCPUAvgUsage2=hpnicfDot11APCPUAvgUsage2, hpnicfDot11BSSRx64FrameBytes=hpnicfDot11BSSRx64FrameBytes, hpnicfDot11APAssocStatisEntry=hpnicfDot11APAssocStatisEntry, hpnicfDot11APMtRadioID=hpnicfDot11APMtRadioID, hpnicfDot11BSSTxStatisEntry=hpnicfDot11BSSTxStatisEntry, hpnicfDot11ChannelSwitchTimes=hpnicfDot11ChannelSwitchTimes, hpnicfDot11CurrAPStationAssocCount=hpnicfDot11CurrAPStationAssocCount, hpnicfDot11APIfSpeedKbps=hpnicfDot11APIfSpeedKbps, hpnicfDot11APIfUpdownTimes2=hpnicfDot11APIfUpdownTimes2, hpnicfDot11APRXPacketMCSRateCount=hpnicfDot11APRXPacketMCSRateCount, hpnicfDot11APFlashSizeInBytes=hpnicfDot11APFlashSizeInBytes, hpnicfDot11APIfOutNUcastPkts=hpnicfDot11APIfOutNUcastPkts, hpnicfDot11APPacketSizeStatisEntry=hpnicfDot11APPacketSizeStatisEntry, hpnicfDot11CurrAPIPv6Address=hpnicfDot11CurrAPIPv6Address, hpnicfDot11APIfOperStatusCM=hpnicfDot11APIfOperStatusCM, hpnicfDot11APPortalUserLostCnntCnt=hpnicfDot11APPortalUserLostCnntCnt, hpnicfDot11APAssocAuthUserLostCnntCnt=hpnicfDot11APAssocAuthUserLostCnntCnt, hpnicfDot11APAuthFailStatisType=hpnicfDot11APAuthFailStatisType, hpnicfDot11APIfOperStatus=hpnicfDot11APIfOperStatus, hpnicfDot11Rx64McastFrameBytes=hpnicfDot11Rx64McastFrameBytes, hpnicfDot11APIfOutOctets2=hpnicfDot11APIfOutOctets2, hpnicfDot11APAssocFailStatis3NSRCnt=hpnicfDot11APAssocFailStatis3NSRCnt, hpnicfDot11APMtTrapVarObjects=hpnicfDot11APMtTrapVarObjects, hpnicfDot11BSSRx64FrameCnt=hpnicfDot11BSSRx64FrameCnt, hpnicfDot11BSSStationCurAssocSum=hpnicfDot11BSSStationCurAssocSum, hpnicfDot11APRXPacketMCSRate2Count=hpnicfDot11APRXPacketMCSRate2Count, hpnicfDot11APModelTable=hpnicfDot11APModelTable, hpnicfDot11TrafficTable=hpnicfDot11TrafficTable, hpnicfDot11APMtChannel=hpnicfDot11APMtChannel, hpnicfDot11RadioStaReassocSum=hpnicfDot11RadioStaReassocSum, hpnicfDot11APIfStatisByAPIDEntry=hpnicfDot11APIfStatisByAPIDEntry, hpnicfDot11BSSRxFrameCnt=hpnicfDot11BSSRxFrameCnt, hpnicfDot11APMemUsageHighRecover=hpnicfDot11APMemUsageHighRecover, hpnicfDot11APManufacturer=hpnicfDot11APManufacturer, hpnicfDot11RxUcastDataFrameCnt=hpnicfDot11RxUcastDataFrameCnt, hpnicfDot11APModuleTroubleTrap=hpnicfDot11APModuleTroubleTrap, hpnicfDot11APTxStatisTable=hpnicfDot11APTxStatisTable, hpnicfDot11APAuthFailStatisEntry=hpnicfDot11APAuthFailStatisEntry, hpnicfDot11APIfOutNUcastPkts2=hpnicfDot11APIfOutNUcastPkts2, hpnicfDot11APTrapUserCntExceedThre=hpnicfDot11APTrapUserCntExceedThre, hpnicfDot11APSysInfoTable=hpnicfDot11APSysInfoTable, hpnicfDot11CurrAPMemSizeInBytes=hpnicfDot11CurrAPMemSizeInBytes, hpnicfDot11APReassocStatisTable=hpnicfDot11APReassocStatisTable, hpnicfDot11Tx64DiscardFrameCnt=hpnicfDot11Tx64DiscardFrameCnt, hpnicfDot11APInterfDetectedTrap=hpnicfDot11APInterfDetectedTrap, hpnicfDot11AllStationUpSumTime=hpnicfDot11AllStationUpSumTime, hpnicfDot11CurrACPortIndex=hpnicfDot11CurrACPortIndex, hpnicfDot11APPacketMCSRateStatisTable=hpnicfDot11APPacketMCSRateStatisTable, hpnicfDot11APIfInDataRate=hpnicfDot11APIfInDataRate, hpnicfDot11RadioIfLastChange=hpnicfDot11RadioIfLastChange, hpnicfDot11Rx64BcastFrameCnt=hpnicfDot11Rx64BcastFrameCnt, hpnicfDot11APMtTrapOldIPAddr=hpnicfDot11APMtTrapOldIPAddr, hpnicfDot11HighestRxSignalStrength=hpnicfDot11HighestRxSignalStrength, hpnicfDot11APSysInfoByAPIDTable=hpnicfDot11APSysInfoByAPIDTable, hpnicfDot11APRXPacketRateCount=hpnicfDot11APRXPacketRateCount, hpnicfDot11APUserSecAuthStatisCMEntry=hpnicfDot11APUserSecAuthStatisCMEntry, hpnicfDot11APMtRadioFailRecoverTrap=hpnicfDot11APMtRadioFailRecoverTrap, hpnicfDot11APIfStatisByAPIDTable=hpnicfDot11APIfStatisByAPIDTable, hpnicfDot11TxDiscardMSDUCnt=hpnicfDot11TxDiscardMSDUCnt, hpnicfDot11APMacAuthUserLostCnntCnt=hpnicfDot11APMacAuthUserLostCnntCnt, hpnicfDot11TxDiscardFrameBytes=hpnicfDot11TxDiscardFrameBytes, hpnicfDot11APResetCM=hpnicfDot11APResetCM, hpnicfDot11APMtRdoChanlChgTrap=hpnicfDot11APMtRdoChanlChgTrap, hpnicfDot11TxFrameRate=hpnicfDot11TxFrameRate, hpnicfDot11RadioModeSupport=hpnicfDot11RadioModeSupport, hpnicfDot11APMtTrapCfgErrReason=hpnicfDot11APMtTrapCfgErrReason, hpnicfDot11APPacketMCSRateStatis2Entry=hpnicfDot11APPacketMCSRateStatis2Entry, hpnicfDot11APDeassocStatisType=hpnicfDot11APDeassocStatisType, hpnicfDot11APEssVlanId=hpnicfDot11APEssVlanId, hpnicfDot11Rx64UcastFrameBytes=hpnicfDot11Rx64UcastFrameBytes, hpnicfDot11APFlashType=hpnicfDot11APFlashType, hpnicfDot11APAutoAuthUserLostCnntCntCM=hpnicfDot11APAutoAuthUserLostCnntCntCM, hpnicfDot11Tx64McastFrameBytes=hpnicfDot11Tx64McastFrameBytes, hpnicfDot11BSSStationExDeAssocSum=hpnicfDot11BSSStationExDeAssocSum, hpnicfDot11Tx64DataFrameCnt=hpnicfDot11Tx64DataFrameCnt, hpnicfDot11APIfTable=hpnicfDot11APIfTable, hpnicfDot11BSSTxPayloadBytes=hpnicfDot11BSSTxPayloadBytes, hpnicfDot11RadioStatisIndex=hpnicfDot11RadioStatisIndex, hpnicfDot11APReassocStatisType=hpnicfDot11APReassocStatisType, hpnicfDot11APIfStatisTable=hpnicfDot11APIfStatisTable, hpnicfDot11APMemRTUsage2=hpnicfDot11APMemRTUsage2, hpnicfDot11BSSTx64AuthenFrameCnt=hpnicfDot11BSSTx64AuthenFrameCnt, hpnicfDot11APMtRadioFailTrap=hpnicfDot11APMtRadioFailTrap, hpnicfDot11TxAssociateFrameCnt=hpnicfDot11TxAssociateFrameCnt, hpnicfDot11BSSTx64NonUniFrameCnt=hpnicfDot11BSSTx64NonUniFrameCnt, hpnicfDot11APIfInPkts2=hpnicfDot11APIfInPkts2, hpnicfDot11BSSRx64NonUniFrameCnt=hpnicfDot11BSSRx64NonUniFrameCnt, hpnicfDot11TxErrFrameCnt=hpnicfDot11TxErrFrameCnt, hpnicfDot11APPacketMCSRate=hpnicfDot11APPacketMCSRate, hpnicfDot11RxTotalIPCheckErrPacketCnt=hpnicfDot11RxTotalIPCheckErrPacketCnt, hpnicfDot11APRadioDownTrap=hpnicfDot11APRadioDownTrap, hpnicfDot11BSSRxDataFrameCnt=hpnicfDot11BSSRxDataFrameCnt, hpnicfDot11BSSStationAssocSum=hpnicfDot11BSSStationAssocSum, hpnicfDot11StaInterfDetectedTrap=hpnicfDot11StaInterfDetectedTrap, hpnicfDot11RtsSuccessCnt=hpnicfDot11RtsSuccessCnt, hpnicfDot11APIfFlowIN=hpnicfDot11APIfFlowIN, hpnicfDot11TxDiscardFrameCnt=hpnicfDot11TxDiscardFrameCnt, hpnicfDot11StaFullReason=hpnicfDot11StaFullReason, hpnicfDot11APIfInPayloadOctets2=hpnicfDot11APIfInPayloadOctets2, hpnicfDot11AllStationUpSumTimeTicks=hpnicfDot11AllStationUpSumTimeTicks, hpnicfDot11Rx64DiscardFrameCnt=hpnicfDot11Rx64DiscardFrameCnt, hpnicfDot11CurrAPFlashSize=hpnicfDot11CurrAPFlashSize, hpnicfDot11RxFragCnt=hpnicfDot11RxFragCnt, hpnicfDot11TxFragCnt=hpnicfDot11TxFragCnt, hpnicfDot11APCpuUsage=hpnicfDot11APCpuUsage, hpnicfDot11APIfAdminStatus=hpnicfDot11APIfAdminStatus, hpnicfDot11APMtAPID=hpnicfDot11APMtAPID, hpnicfDot11BSSRxAuthenFrameCnt=hpnicfDot11BSSRxAuthenFrameCnt, hpnicfDot11RxBcastFrameCnt=hpnicfDot11RxBcastFrameCnt, hpnicfDot11Tx64UcastFrameBytes=hpnicfDot11Tx64UcastFrameBytes, hpnicfDot11APPacketRateStatisEntry=hpnicfDot11APPacketRateStatisEntry, hpnicfDot11BSSTx64AssocFrameCnt=hpnicfDot11BSSTx64AssocFrameCnt, hpnicfDot11APUserAuthSuccCnt=hpnicfDot11APUserAuthSuccCnt, hpnicfDot11TxUcastFrameCnt=hpnicfDot11TxUcastFrameCnt, hpnicfDot11BSSTxAuthenFrameCnt=hpnicfDot11BSSTxAuthenFrameCnt, hpnicfDot11BSSStationAssocReqSum=hpnicfDot11BSSStationAssocReqSum, hpnicfDot11Tx64BcastFrameCnt=hpnicfDot11Tx64BcastFrameCnt, hpnicfDot11RadioStaAssocRejectSum=hpnicfDot11RadioStaAssocRejectSum, hpnicfDot11Tx64MACErrCnt=hpnicfDot11Tx64MACErrCnt, hpnicfDot11ApStationAssocSum=hpnicfDot11ApStationAssocSum, hpnicfDot11ApStaCurAuthSuccSum=hpnicfDot11ApStaCurAuthSuccSum, hpnicfDot11BSSRxPayloadBytes=hpnicfDot11BSSRxPayloadBytes, hpnicfDot11APIfInOctets=hpnicfDot11APIfInOctets, hpnicfDot11Tx64AckFailCnt=hpnicfDot11Tx64AckFailCnt, hpnicfDot11TxPowerLevel=hpnicfDot11TxPowerLevel, hpnicfDot11APIfInNormalPkts=hpnicfDot11APIfInNormalPkts, hpnicfDot11APAssocFailStatis2Table=hpnicfDot11APAssocFailStatis2Table, hpnicfDot11APACAssociateStatusCM=hpnicfDot11APACAssociateStatusCM, hpnicfDot11APUserConnFailCnt=hpnicfDot11APUserConnFailCnt, hpnicfDot11APAutoAuthOnlineUserNumCM=hpnicfDot11APAutoAuthOnlineUserNumCM, hpnicfDot11BSSRxFrameBytes=hpnicfDot11BSSRxFrameBytes, hpnicfDot11APAutoAuthSucCntCM=hpnicfDot11APAutoAuthSucCntCM, hpnicfDot11APUserMacAddr=hpnicfDot11APUserMacAddr, hpnicfDot11Rx64AssociateFrameCnt=hpnicfDot11Rx64AssociateFrameCnt, hpnicfDot11Rx64BcastFrameBytes=hpnicfDot11Rx64BcastFrameBytes, hpnicfDot11APObjectEntry=hpnicfDot11APObjectEntry, hpnicfDot11APRxStatisEntry=hpnicfDot11APRxStatisEntry, hpnicfDot11APReassocStatisCnt=hpnicfDot11APReassocStatisCnt, hpnicfDot11Tx64FrameBytes=hpnicfDot11Tx64FrameBytes, hpnicfDot11APModelName=hpnicfDot11APModelName, hpnicfDot11APAutoAuthReqCntCM=hpnicfDot11APAutoAuthReqCntCM, hpnicfDot11APAssocFailStatis2Cnt=hpnicfDot11APAssocFailStatis2Cnt, hpnicfDot11BSSTxFrameCnt=hpnicfDot11BSSTxFrameCnt, hpnicfDot11APMtIntfAPDetected=hpnicfDot11APMtIntfAPDetected, hpnicfDot11APMtTrapNewChannel=hpnicfDot11APMtTrapNewChannel, hpnicfDot11APUserAuthCurNumber=hpnicfDot11APUserAuthCurNumber, hpnicfDot11APStatisGroup=hpnicfDot11APStatisGroup, hpnicfDot11AckFailCnt=hpnicfDot11AckFailCnt, hpnicfDot11APIfUpdownTimes=hpnicfDot11APIfUpdownTimes, hpnicfDot11BSSStationReassocSum=hpnicfDot11BSSStationReassocSum, hpnicfDot11APUserRxBytesCM=hpnicfDot11APUserRxBytesCM, hpnicfDot11SSID=hpnicfDot11SSID, hpnicfDot11APUserSecAuthTypeStatisEntry=hpnicfDot11APUserSecAuthTypeStatisEntry, hpnicfDot11APModuleTroubleClearTrap=hpnicfDot11APModuleTroubleClearTrap, hpnicfDot11DiversitySelectionRx=hpnicfDot11DiversitySelectionRx, hpnicfDot11APIfInErrorPkts2=hpnicfDot11APIfInErrorPkts2, hpnicfDot11StationNumSupport=hpnicfDot11StationNumSupport, hpnicfDot11RxFrameBytes=hpnicfDot11RxFrameBytes, hpnicfDot11APTemperature2=hpnicfDot11APTemperature2, hpnicfDot11CurrAPBSSIDNumberCM=hpnicfDot11CurrAPBSSIDNumberCM, hpnicfDot11APMtFirstTrapTime=hpnicfDot11APMtFirstTrapTime, hpnicfDot11TxNUcastDataFrameCnt=hpnicfDot11TxNUcastDataFrameCnt, hpnicfDot11APPacketSizeStatisTable=hpnicfDot11APPacketSizeStatisTable, hpnicfDot11BSSRxFrameErrorRatio=hpnicfDot11BSSRxFrameErrorRatio, hpnicfDot11TxPowerLevel2=hpnicfDot11TxPowerLevel2, hpnicfDot11APAssocFailStatis3OtherCnt=hpnicfDot11APAssocFailStatis3OtherCnt, hpnicfDot11RxFcsErrCnt=hpnicfDot11RxFcsErrCnt, hpnicfDot11BSSRxStatis64Entry=hpnicfDot11BSSRxStatis64Entry)
mibBuilder.exportSymbols("HPN-ICF-DOT11-APMT-MIB", hpnicfDot11APIdleTemplateName=hpnicfDot11APIdleTemplateName, hpnicfDot11Tx64AssociateFrameCnt=hpnicfDot11Tx64AssociateFrameCnt, hpnicfDot11RadioMngFrameStatisEntry=hpnicfDot11RadioMngFrameStatisEntry, hpnicfDot11Tx64RtsFailCnt=hpnicfDot11Tx64RtsFailCnt, hpnicfDot11PwrAttRange=hpnicfDot11PwrAttRange, hpnicfDot11Tx64RetryMSDUCnt=hpnicfDot11Tx64RetryMSDUCnt, PYSNMP_MODULE_ID=hpnicfDot11APMT, hpnicfDot11PowerMgmtStatus=hpnicfDot11PowerMgmtStatus, hpnicfDot11Tx64ErrFrameCnt=hpnicfDot11Tx64ErrFrameCnt, hpnicfDot11BSSTx64UniFrameCnt=hpnicfDot11BSSTx64UniFrameCnt, hpnicfDot11APMtTrapRadioFailReason=hpnicfDot11APMtTrapRadioFailReason, hpnicfDot11APIfInPayloadOctets=hpnicfDot11APIfInPayloadOctets, hpnicfDot11Rx64McastFrameCnt=hpnicfDot11Rx64McastFrameCnt, hpnicfDot11Tx64RtsSuccessCnt=hpnicfDot11Tx64RtsSuccessCnt, hpnicfDot11UserAuthStatisType=hpnicfDot11UserAuthStatisType, hpnicfDot11CurrAPTemplateName=hpnicfDot11CurrAPTemplateName, hpnicfDot11RadioIfUpdownTimes=hpnicfDot11RadioIfUpdownTimes, hpnicfDot11TxBcastFrameCnt=hpnicfDot11TxBcastFrameCnt, hpnicfDot11APAssocFailStatis3URCCnt=hpnicfDot11APAssocFailStatis3URCCnt, hpnicfDot11TxPayloadBytes=hpnicfDot11TxPayloadBytes, hpnicfDot11RxDecryptErrorCnt=hpnicfDot11RxDecryptErrorCnt, hpnicfDot11RxNUcastDataFrameCnt=hpnicfDot11RxNUcastDataFrameCnt, hpnicfDot11TxMcastFrameCnt=hpnicfDot11TxMcastFrameCnt, hpnicfDot11CurrAPCPUTypeCM=hpnicfDot11CurrAPCPUTypeCM, hpnicfDot11TxFrameCnt=hpnicfDot11TxFrameCnt, hpnicfDot11APMemSize=hpnicfDot11APMemSize, hpnicfDot11CurrAPMACMode=hpnicfDot11CurrAPMACMode, hpnicfDot11ApStationReassocSum=hpnicfDot11ApStationReassocSum, hpnicfDot11APIPAddressGateway2=hpnicfDot11APIPAddressGateway2, hpnicfDot11APLastImgDownloadTime=hpnicfDot11APLastImgDownloadTime, hpnicfDot11APSysUpTime2=hpnicfDot11APSysUpTime2, hpnicfDot11BSSTxAssociateFrameCnt=hpnicfDot11BSSTxAssociateFrameCnt, hpnicfDot11CurrAPMemorySize=hpnicfDot11CurrAPMemorySize, hpnicfDot11APPortalOnlineUserNum=hpnicfDot11APPortalOnlineUserNum, hpnicfDot11RxTotalDiscardFrameCnt=hpnicfDot11RxTotalDiscardFrameCnt, hpnicfDot11StaInterfClearTrap=hpnicfDot11StaInterfClearTrap, hpnicfDot11APFlashSize=hpnicfDot11APFlashSize, hpnicfDot11BSSStationCurAuthSum=hpnicfDot11BSSStationCurAuthSum, hpnicfDot11APUserAuthSuccCntCM=hpnicfDot11APUserAuthSuccCntCM, hpnicfDot11APMtTraps=hpnicfDot11APMtTraps, hpnicfDot11MultiRetryCnt=hpnicfDot11MultiRetryCnt, hpnicfDot11APBSSEntry=hpnicfDot11APBSSEntry, hpnicfDot11APAllAutoAuthUserOnlineTimeCM=hpnicfDot11APAllAutoAuthUserOnlineTimeCM, hpnicfDot11CurrAPFlashSizeInBytes=hpnicfDot11CurrAPFlashSizeInBytes, hpnicfDot11RadioRxStatis64Entry=hpnicfDot11RadioRxStatis64Entry, hpnicfDot11APTemperature=hpnicfDot11APTemperature, hpnicfDot11APAuthFreeUserLostCnntCnt=hpnicfDot11APAuthFreeUserLostCnntCnt, hpnicfDot11TxUcastFrameBytes=hpnicfDot11TxUcastFrameBytes, hpnicfDot11WlanID=hpnicfDot11WlanID, hpnicfDot11CurrAPMemoryTypeCM=hpnicfDot11CurrAPMemoryTypeCM, hpnicfDot11Tx64FragCnt=hpnicfDot11Tx64FragCnt, hpnicfDot11ApStationReassocFailSum=hpnicfDot11ApStationReassocFailSum, hpnicfDot11DownPacketNumber=hpnicfDot11DownPacketNumber, hpnicfDot11BSSRx64PayloadBytes=hpnicfDot11BSSRx64PayloadBytes, hpnicfDot11APMtTrapAPMacAddress=hpnicfDot11APMtTrapAPMacAddress, hpnicfDot11APIdleListTable=hpnicfDot11APIdleListTable, hpnicfDot11APMtAvailChlTooLow=hpnicfDot11APMtAvailChlTooLow, hpnicfDot11RtsFailCnt=hpnicfDot11RtsFailCnt, hpnicfDot11APIfFlowOut2=hpnicfDot11APIfFlowOut2, hpnicfDot11APUserOnlineTime=hpnicfDot11APUserOnlineTime, hpnicfDot11Tx64FailedCnt=hpnicfDot11Tx64FailedCnt, hpnicfDot11FailedCnt=hpnicfDot11FailedCnt, hpnicfDot11APFlashFreeSize=hpnicfDot11APFlashFreeSize, hpnicfDot11APObjectGroup=hpnicfDot11APObjectGroup, hpnicfDot11Tx64AuthenFrameCnt=hpnicfDot11Tx64AuthenFrameCnt, hpnicfDot11APUserInfoStatisTable=hpnicfDot11APUserInfoStatisTable, hpnicfDot11Tx64PayloadBytes=hpnicfDot11Tx64PayloadBytes, hpnicfDot11BSSRxUniFrameCnt=hpnicfDot11BSSRxUniFrameCnt, hpnicfDot11APAuthFailStatisCnt=hpnicfDot11APAuthFailStatisCnt, hpnicfDot11CurrAPManufacturer=hpnicfDot11CurrAPManufacturer, hpnicfDot11APCPURTUsage=hpnicfDot11APCPURTUsage, hpnicfDot11APStaFullRecoverTrap=hpnicfDot11APStaFullRecoverTrap, hpnicfDot11APMtChanlChgCount=hpnicfDot11APMtChanlChgCount, hpnicfDot11APIfFlowOut=hpnicfDot11APIfFlowOut, hpnicfDot11Tx64FrameCnt=hpnicfDot11Tx64FrameCnt, hpnicfDot11StaLimitNumber=hpnicfDot11StaLimitNumber, hpnicfDot11APUserInfoStatisEntry=hpnicfDot11APUserInfoStatisEntry, hpnicfDot11RxPhyErrorCnt=hpnicfDot11RxPhyErrorCnt, hpnicfDot11BSSTx64RetryCnt=hpnicfDot11BSSTx64RetryCnt, hpnicfDot11BSSID=hpnicfDot11BSSID, hpnicfDot11APIPAddressGateway=hpnicfDot11APIPAddressGateway, hpnicfDot11APUserAuthFailCntCM=hpnicfDot11APUserAuthFailCntCM, hpnicfDot11APIfEntry=hpnicfDot11APIfEntry, hpnicfDot11APIfInDiscardPkts=hpnicfDot11APIfInDiscardPkts, hpnicfDot11APRadioDownRecovTrap=hpnicfDot11APRadioDownRecovTrap, hpnicfDot11RxFrameDupCnt=hpnicfDot11RxFrameDupCnt, hpnicfDot11APMemAvgUsage2=hpnicfDot11APMemAvgUsage2, hpnicfDot11Rx64MgmtFrameCnt=hpnicfDot11Rx64MgmtFrameCnt, hpnicfDot11ApStationAssocReqSum=hpnicfDot11ApStationAssocReqSum, hpnicfDot11APAllMacAuthUserOnlineTime=hpnicfDot11APAllMacAuthUserOnlineTime, hpnicfDot11APIPv6Address=hpnicfDot11APIPv6Address, hpnicfDot11APTrapUserThreshold=hpnicfDot11APTrapUserThreshold, hpnicfDot11Rx64DecryptErrorCnt=hpnicfDot11Rx64DecryptErrorCnt, hpnicfDot11APAssocStatisTable=hpnicfDot11APAssocStatisTable, hpnicfDot11APIdleSerialID=hpnicfDot11APIdleSerialID, hpnicfDot11APLinkStatisTable=hpnicfDot11APLinkStatisTable, hpnicfDot11Tx64DiscardFrameBytes=hpnicfDot11Tx64DiscardFrameBytes, hpnicfDot11CurrAPName=hpnicfDot11CurrAPName, hpnicfDot11APCpuUsageHighRecover=hpnicfDot11APCpuUsageHighRecover, hpnicfDot11APCPUType=hpnicfDot11APCPUType, hpnicfDot11APSysInfoEntry=hpnicfDot11APSysInfoEntry, hpnicfDot11MngFrmCnt=hpnicfDot11MngFrmCnt, hpnicfDot11APDeassocStatisTable=hpnicfDot11APDeassocStatisTable, hpnicfDot11CurAPID=hpnicfDot11CurAPID, hpnicfDot11APEchoRequestCnt=hpnicfDot11APEchoRequestCnt, hpnicfDot11BSSTxDataFrameBytes=hpnicfDot11BSSTxDataFrameBytes, hpnicfDot11CurrAPElementID=hpnicfDot11CurrAPElementID, hpnicfDot11Rx64FrameDupCnt=hpnicfDot11Rx64FrameDupCnt, hpnicfDot11RetryMSDUCnt=hpnicfDot11RetryMSDUCnt, hpnicfDot11APInterfClearTrap=hpnicfDot11APInterfClearTrap, hpnicfDot11APOperationStatus=hpnicfDot11APOperationStatus, hpnicfDot11APACAssociateStatus=hpnicfDot11APACAssociateStatus, hpnicfDot11BSSTxUniFrameCnt=hpnicfDot11BSSTxUniFrameCnt, hpnicfDot11Rx64DiscardFrameBytes=hpnicfDot11Rx64DiscardFrameBytes, hpnicfDot11APMemRTUsage=hpnicfDot11APMemRTUsage, hpnicfDot11APMtInterfMacAdd=hpnicfDot11APMtInterfMacAdd, hpnicfDot11RxMICErrorCnt=hpnicfDot11RxMICErrorCnt, hpnicfDot11BSSRx64AssocFrameCnt=hpnicfDot11BSSRx64AssocFrameCnt, hpnicfDot11APIfTypeCM=hpnicfDot11APIfTypeCM, hpnicfDot11APSSIDObjectEntry=hpnicfDot11APSSIDObjectEntry, hpnicfDot11APTrapUserCnt=hpnicfDot11APTrapUserCnt, hpnicfDot11CurrIfNumber=hpnicfDot11CurrIfNumber, hpnicfDot11APIfDescr=hpnicfDot11APIfDescr, hpnicfDot11APIfOutDataOctets2=hpnicfDot11APIfOutDataOctets2, hpnicfDot11APIfInMulcastPkts2=hpnicfDot11APIfInMulcastPkts2, hpnicfDot11APUserSecAuthStatisEntry=hpnicfDot11APUserSecAuthStatisEntry, hpnicfDot11APUserSecAuthStatisTable=hpnicfDot11APUserSecAuthStatisTable, hpnicfDot11CurrRadioModeSupport2=hpnicfDot11CurrRadioModeSupport2, hpnicfDot11RxCtrlFrameCnt=hpnicfDot11RxCtrlFrameCnt, hpnicfDot11APModelEntry=hpnicfDot11APModelEntry, hpnicfDot11RxFrameErrorRatio=hpnicfDot11RxFrameErrorRatio, hpnicfDot11APPacketMCSRateStatisEntry=hpnicfDot11APPacketMCSRateStatisEntry, hpnicfDot11APImgDwldSuccess=hpnicfDot11APImgDwldSuccess, hpnicfDot11APMemorySize=hpnicfDot11APMemorySize, hpnicfDot11APUserTxBytesCM=hpnicfDot11APUserTxBytesCM, hpnicfDot11APAssocFailStatis2Entry=hpnicfDot11APAssocFailStatis2Entry, hpnicfDot11APMtDetectedIntfOtherDev=hpnicfDot11APMtDetectedIntfOtherDev, hpnicfDot11APAssocFailStatis3SRCnt=hpnicfDot11APAssocFailStatis3SRCnt, hpnicfDot11Rx64FcsErrCnt=hpnicfDot11Rx64FcsErrCnt, hpnicfDot11ApStationAssocRejectSum=hpnicfDot11ApStationAssocRejectSum, hpnicfDot11APSysReboot=hpnicfDot11APSysReboot, hpnicfDot11APFlashWriteFailure=hpnicfDot11APFlashWriteFailure, hpnicfDot11BSSStationAssocRejectSum=hpnicfDot11BSSStationAssocRejectSum, hpnicfDot11Tx64MgtFrameCnt=hpnicfDot11Tx64MgtFrameCnt, hpnicfDot11DownByteNumber=hpnicfDot11DownByteNumber, hpnicfDot11APMtWorkModeChgTrap=hpnicfDot11APMtWorkModeChgTrap, hpnicfDot11APUserSecAuthTypeStatisTable=hpnicfDot11APUserSecAuthTypeStatisTable, hpnicfDot11APCPUClockSpeed=hpnicfDot11APCPUClockSpeed, hpnicfDot11APAssocFailStatis2Type=hpnicfDot11APAssocFailStatis2Type, hpnicfDot11APUserAuthTypeCM=hpnicfDot11APUserAuthTypeCM, hpnicfDot11MngFrameCnt=hpnicfDot11MngFrameCnt, hpnicfDot11APReassocStatis2Table=hpnicfDot11APReassocStatis2Table, hpnicfDot11RadioRxAverSnr=hpnicfDot11RadioRxAverSnr, hpnicfDot11APIfOutErrorPkts2=hpnicfDot11APIfOutErrorPkts2, hpnicfDot11APEchoAvgDelay=hpnicfDot11APEchoAvgDelay, hpnicfDot11APMT=hpnicfDot11APMT, hpnicfDot11APAssocAuthReqCnt=hpnicfDot11APAssocAuthReqCnt, hpnicfDot11APMtAdjChannel=hpnicfDot11APMtAdjChannel, hpnicfDot11APAssocFailStatisEntry=hpnicfDot11APAssocFailStatisEntry, hpnicfDot11RxDiscardFrameCnt=hpnicfDot11RxDiscardFrameCnt, hpnicfDot11APIfOutDataRate=hpnicfDot11APIfOutDataRate, hpnicfDot11TxFrameRetryRatio=hpnicfDot11TxFrameRetryRatio, hpnicfDot11APIfInDiscardPkts2=hpnicfDot11APIfInDiscardPkts2, hpnicfDot11APReassocFailStatis2Cnt=hpnicfDot11APReassocFailStatis2Cnt, hpnicfDot11APObjectStatusEntry=hpnicfDot11APObjectStatusEntry, hpnicfDot11APPortalAuthReqFailCnt=hpnicfDot11APPortalAuthReqFailCnt, hpnicfDot11APCpuUsageHigh=hpnicfDot11APCpuUsageHigh, hpnicfDot11APChgWorkMode=hpnicfDot11APChgWorkMode, hpnicfDot11APMtChlIntfDetected=hpnicfDot11APMtChlIntfDetected, hpnicfDot11APMacAddress=hpnicfDot11APMacAddress, hpnicfDot11APACAssociateStatus2=hpnicfDot11APACAssociateStatus2, hpnicfDot11RadioStaAssocSum=hpnicfDot11RadioStaAssocSum, hpnicfDot11DFSFreeCntBelowThrRecov=hpnicfDot11DFSFreeCntBelowThrRecov, hpnicfDot11MACModeSupport=hpnicfDot11MACModeSupport, hpnicfDot11APUserLoginNameCM=hpnicfDot11APUserLoginNameCM, hpnicfDot11BSSTx64PayloadBytes=hpnicfDot11BSSTx64PayloadBytes, hpnicfDot11APIfInMulcastPkts=hpnicfDot11APIfInMulcastPkts, hpnicfDot11UpLinkUpDownTimes=hpnicfDot11UpLinkUpDownTimes, hpnicfDot11CurrAPIPAddress=hpnicfDot11CurrAPIPAddress, hpnicfDot11BSSTxFrameBytes=hpnicfDot11BSSTxFrameBytes, hpnicfDot11RadioRxStatis64Table=hpnicfDot11RadioRxStatis64Table, hpnicfDot11CurrRadioModeSupport=hpnicfDot11CurrRadioModeSupport, hpnicfDot11APEchoStatisTable=hpnicfDot11APEchoStatisTable, hpnicfDot11CurrAPMode=hpnicfDot11CurrAPMode, hpnicfDot11APIfOutBrdcastPkts=hpnicfDot11APIfOutBrdcastPkts, hpnicfDot11RxUcastFrameCnt=hpnicfDot11RxUcastFrameCnt, hpnicfDot11RxTrafficSpeed=hpnicfDot11RxTrafficSpeed, hpnicfDot11RxMcastFrameBytes=hpnicfDot11RxMcastFrameBytes, hpnicfDot11APTXPacketRateCount=hpnicfDot11APTXPacketRateCount, hpnicfDot11RadioStaAssocFailSum=hpnicfDot11RadioStaAssocFailSum, hpnicfDot11TxMcastFrameBytes=hpnicfDot11TxMcastFrameBytes, hpnicfDot11TxAuthenFrameCnt=hpnicfDot11TxAuthenFrameCnt, hpnicfDot11BSSRxStatisTable=hpnicfDot11BSSRxStatisTable, hpnicfDot11APIfInErrorPkts=hpnicfDot11APIfInErrorPkts, hpnicfDot11TrafficEntry=hpnicfDot11TrafficEntry, hpnicfDot11APUserLoginName=hpnicfDot11APUserLoginName, hpnicfDot11APPacketRate=hpnicfDot11APPacketRate, hpnicfDot11CurrAPSSIDNumber=hpnicfDot11CurrAPSSIDNumber, hpnicfDot11TxMACErrCnt=hpnicfDot11TxMACErrCnt, hpnicfDot11AvgRxSignalStrength=hpnicfDot11AvgRxSignalStrength, hpnicfDot11APPortalAuthReqCnt=hpnicfDot11APPortalAuthReqCnt, hpnicfDot11APPortalAuthSucCnt=hpnicfDot11APPortalAuthSucCnt, hpnicfDot11ApStationExDeAuthenSum=hpnicfDot11ApStationExDeAuthenSum, hpnicfDot11CurrAPSoftwareVersion=hpnicfDot11CurrAPSoftwareVersion, hpnicfDot11UserAuthStatisCnt=hpnicfDot11UserAuthStatisCnt, hpnicfDot11CurrSvcPolicyID=hpnicfDot11CurrSvcPolicyID, hpnicfDot11APPacketRateStatisTable=hpnicfDot11APPacketRateStatisTable, hpnicfDot11BSSAssocStatisEntry=hpnicfDot11BSSAssocStatisEntry, hpnicfDot11CurrAPImageName=hpnicfDot11CurrAPImageName, hpnicfDot11TxMgtFrameCnt=hpnicfDot11TxMgtFrameCnt, hpnicfDot11APMtTrapOldChannel=hpnicfDot11APMtTrapOldChannel, hpnicfDot11APRadioDownReason=hpnicfDot11APRadioDownReason, hpnicfDot11APDeauthStatisEntry=hpnicfDot11APDeauthStatisEntry, hpnicfDot11RxAssociateFrameCnt=hpnicfDot11RxAssociateFrameCnt, hpnicfDot11APTXPacketSizeCount=hpnicfDot11APTXPacketSizeCount, hpnicfDot11APMtIntfStaDetected=hpnicfDot11APMtIntfStaDetected, hpnicfDot11APIfOutPkts2=hpnicfDot11APIfOutPkts2, hpnicfDot11AntennaGain=hpnicfDot11AntennaGain, hpnicfDot11APIfOutBrdcastPkts2=hpnicfDot11APIfOutBrdcastPkts2, hpnicfDot11APChannelChgMode=hpnicfDot11APChannelChgMode, hpnicfDot11TxFrameBytes=hpnicfDot11TxFrameBytes, hpnicfDot11APAssocAuthReqFailCnt=hpnicfDot11APAssocAuthReqFailCnt, hpnicfDot11RadioID=hpnicfDot11RadioID, hpnicfDot11APModelAlias=hpnicfDot11APModelAlias, hpnicfDot11RadioMngFrmStatisEntry=hpnicfDot11RadioMngFrmStatisEntry, hpnicfDot11APIfOutUcastPkts2=hpnicfDot11APIfOutUcastPkts2, hpnicfDot11Tx64BcastFrameBytes=hpnicfDot11Tx64BcastFrameBytes, hpnicfDot11APUserAuthReqCntCM=hpnicfDot11APUserAuthReqCntCM, hpnicfDot11CurrInterfDetectedNum=hpnicfDot11CurrInterfDetectedNum, hpnicfDot11CurrAPIPNetMask=hpnicfDot11CurrAPIPNetMask, hpnicfDot11APUserAuthReqCnt=hpnicfDot11APUserAuthReqCnt, hpnicfDot11APManuBuildInfo2=hpnicfDot11APManuBuildInfo2, hpnicfDot11APRadioIfIndex=hpnicfDot11APRadioIfIndex, hpnicfDot11BSSTxStatis64Entry=hpnicfDot11BSSTxStatis64Entry, hpnicfDot11RxMgmtFrameCnt=hpnicfDot11RxMgmtFrameCnt, hpnicfDot11TxDataFrameCnt=hpnicfDot11TxDataFrameCnt, hpnicfDot11APIfOutPayloadOctets=hpnicfDot11APIfOutPayloadOctets, hpnicfDot11BSSTxStatisTable=hpnicfDot11BSSTxStatisTable, hpnicfDot11APEchoInfoStatisEntry=hpnicfDot11APEchoInfoStatisEntry, hpnicfDot11RadioModeSupport2=hpnicfDot11RadioModeSupport2, hpnicfDot11Rx64FrameCnt=hpnicfDot11Rx64FrameCnt, hpnicfDot11BSSAssocStatisTable=hpnicfDot11BSSAssocStatisTable, hpnicfDot11Tx64DiscardMSDUCnt=hpnicfDot11Tx64DiscardMSDUCnt, hpnicfDot11Rx64DataFrameBytesCM=hpnicfDot11Rx64DataFrameBytesCM, hpnicfDot11APDeassocStatisCnt=hpnicfDot11APDeassocStatisCnt, hpnicfDot11TxDataFrameBytes=hpnicfDot11TxDataFrameBytes, hpnicfDot11APMtNotifyGroup=hpnicfDot11APMtNotifyGroup, hpnicfDot11Tx64MSDUCnt=hpnicfDot11Tx64MSDUCnt, hpnicfDot11APMacAuthSucCnt=hpnicfDot11APMacAuthSucCnt, hpnicfDot11TxMSDUCnt=hpnicfDot11TxMSDUCnt, hpnicfDot11APIPAddress=hpnicfDot11APIPAddress, hpnicfDot11APIfStatusKeepTime2=hpnicfDot11APIfStatusKeepTime2, hpnicfDot11APMtCfgErrorTrap=hpnicfDot11APMtCfgErrorTrap, hpnicfDot11APConfigSSIDName=hpnicfDot11APConfigSSIDName)
mibBuilder.exportSymbols("HPN-ICF-DOT11-APMT-MIB", hpnicfDot11Tx64McastFrameCnt=hpnicfDot11Tx64McastFrameCnt, hpnicfDot11RxDataFrameBytes=hpnicfDot11RxDataFrameBytes, hpnicfDot11APMemUsageHigh=hpnicfDot11APMemUsageHigh, hpnicfDot11RxDataFrameCntCM=hpnicfDot11RxDataFrameCntCM, hpnicfDot11MaxTxPwrLvl=hpnicfDot11MaxTxPwrLvl, hpnicfDot11RetryCnt=hpnicfDot11RetryCnt, hpnicfDot11BSSTxDataFrameCnt=hpnicfDot11BSSTxDataFrameCnt, hpnicfDot11APCPURTUsage2=hpnicfDot11APCPURTUsage2, hpnicfDot11RxSignalStrengthPacketCntCM=hpnicfDot11RxSignalStrengthPacketCntCM, hpnicfDot11APAssocFailStatisRSSILowCntCM=hpnicfDot11APAssocFailStatisRSSILowCntCM, hpnicfDot11BSSRx64DataFrameBytes=hpnicfDot11BSSRx64DataFrameBytes, hpnicfDot11OperStatus=hpnicfDot11OperStatus, hpnicfDot11APIfOutUcastPkts=hpnicfDot11APIfOutUcastPkts, hpnicfDot11APConfigBSSIDNum=hpnicfDot11APConfigBSSIDNum, hpnicfDot11CurrAPMacAddress=hpnicfDot11CurrAPMacAddress, hpnicfDot11APIdleListEntry=hpnicfDot11APIdleListEntry, hpnicfDot11APIfIndex=hpnicfDot11APIfIndex, hpnicfDot11RadioTxStatis64Table=hpnicfDot11RadioTxStatis64Table, hpnicfDot11TxCtrlFrameCnt=hpnicfDot11TxCtrlFrameCnt, hpnicfDot11BSSRxStatis64Table=hpnicfDot11BSSRxStatis64Table, hpnicfDot11Rx64MICErrorCnt=hpnicfDot11Rx64MICErrorCnt, hpnicfDot11APConfigSPID=hpnicfDot11APConfigSPID, hpnicfDot11APIfOutMulcastPkts2=hpnicfDot11APIfOutMulcastPkts2, hpnicfDot11BSSStationAssocFailSum=hpnicfDot11BSSStationAssocFailSum, hpnicfDot11RxAuthenFrameCnt=hpnicfDot11RxAuthenFrameCnt, hpnicfDot11APMacAuthOnlineUserNum=hpnicfDot11APMacAuthOnlineUserNum, hpnicfDot11APDeassocStatisEntry=hpnicfDot11APDeassocStatisEntry, hpnicfDot11RadioAssocStatisTable=hpnicfDot11RadioAssocStatisTable, hpnicfDot11APIfInNormalPkts2=hpnicfDot11APIfInNormalPkts2, hpnicfDot11APIfType=hpnicfDot11APIfType, hpnicfDot11APConfigPortalStaNum=hpnicfDot11APConfigPortalStaNum, hpnicfDot11APIntfDevMACAddress=hpnicfDot11APIntfDevMACAddress, hpnicfDot11RadioNumSupport=hpnicfDot11RadioNumSupport, hpnicfDot11Rx64PayloadBytes=hpnicfDot11Rx64PayloadBytes, hpnicfDot11CurrAPModelName=hpnicfDot11CurrAPModelName, hpnicfDot11APAllAuthFreeUserOnlineTime=hpnicfDot11APAllAuthFreeUserOnlineTime, hpnicfDot11APAssocFailStatisType=hpnicfDot11APAssocFailStatisType, hpnicfDot11TxBcastFrameBytes=hpnicfDot11TxBcastFrameBytes, hpnicfDot11APSysInfoByAPIDEntry=hpnicfDot11APSysInfoByAPIDEntry, hpnicfDot11APIfOutDiscardPkts2=hpnicfDot11APIfOutDiscardPkts2, hpnicfDot11BSSRx64DataFrameCnt=hpnicfDot11BSSRx64DataFrameCnt, hpnicfDot11APIfInNUcastPkts2=hpnicfDot11APIfInNUcastPkts2, hpnicfDot11RxDataFrameCnt=hpnicfDot11RxDataFrameCnt, hpnicfDot11AntennaType=hpnicfDot11AntennaType, hpnicfDot11APReassocStatisEntry=hpnicfDot11APReassocStatisEntry, hpnicfDot11BSSTx64FrameCnt=hpnicfDot11BSSTx64FrameCnt, hpnicfDot11APIfOutPkts=hpnicfDot11APIfOutPkts, hpnicfDot11APDeauthStatisTable=hpnicfDot11APDeauthStatisTable, hpnicfDot11APTxStatisEntry=hpnicfDot11APTxStatisEntry, hpnicfDot11APPacketMCS2Rate=hpnicfDot11APPacketMCS2Rate, hpnicfDot11APAssocFailStatisCnt=hpnicfDot11APAssocFailStatisCnt, hpnicfDot11APIfInPkts=hpnicfDot11APIfInPkts, hpnicfDot11Rx64AuthenFrameCnt=hpnicfDot11Rx64AuthenFrameCnt, hpnicfDot11OperStatusCM=hpnicfDot11OperStatusCM, hpnicfDot11OtherDevIntDetectedTrap=hpnicfDot11OtherDevIntDetectedTrap, hpnicfDot11APMtDetectedIntfAP=hpnicfDot11APMtDetectedIntfAP, hpnicfDot11APIfOutErrorPkts=hpnicfDot11APIfOutErrorPkts, hpnicfDot11BSSTxNonUniFrameCnt=hpnicfDot11BSSTxNonUniFrameCnt, hpnicfDot11Rx64UcastFrameCnt=hpnicfDot11Rx64UcastFrameCnt, hpnicfDot11TxUcastDataFrameCnt=hpnicfDot11TxUcastDataFrameCnt, hpnicfDot11RxBcastFrameBytes=hpnicfDot11RxBcastFrameBytes, hpnicfDot11Rx64DataFrameCnt=hpnicfDot11Rx64DataFrameCnt, hpnicfDot11APSSIDObjectTable=hpnicfDot11APSSIDObjectTable, hpnicfDot11APIfFlowIN2=hpnicfDot11APIfFlowIN2, hpnicfDot11BSSTxStatis64Table=hpnicfDot11BSSTxStatis64Table, hpnicfDot11Rx64FragCnt=hpnicfDot11Rx64FragCnt, hpnicfDot11APAuthFreeOnlineUserNum=hpnicfDot11APAuthFreeOnlineUserNum, hpnicfDot11APIfOperStatus2=hpnicfDot11APIfOperStatus2, hpnicfDot11RadioTxStatis64Entry=hpnicfDot11RadioTxStatis64Entry, hpnicfDot11APTXPacketMCSRateCount=hpnicfDot11APTXPacketMCSRateCount, hpnicfDot11CurrAPReleasedVersion=hpnicfDot11CurrAPReleasedVersion, hpnicfDot11BSSTx64DataFrameCnt=hpnicfDot11BSSTx64DataFrameCnt, hpnicfDot11APIfInBrdcastPkts2=hpnicfDot11APIfInBrdcastPkts2, hpnicfDot11Tx64DataFrameBytes=hpnicfDot11Tx64DataFrameBytes, hpnicfDot11BSSRxStatisEntry=hpnicfDot11BSSRxStatisEntry, hpnicfDot11APAssocFailStatis3Table=hpnicfDot11APAssocFailStatis3Table, hpnicfDot11APConnectionType=hpnicfDot11APConnectionType, hpnicfDot11APReset=hpnicfDot11APReset, hpnicfDot11APReassocStatis2Entry=hpnicfDot11APReassocStatis2Entry, hpnicfDot11APIfInNUcastPkts=hpnicfDot11APIfInNUcastPkts, hpnicfDot11APIfMtu=hpnicfDot11APIfMtu, hpnicfDot11APUserTxPacketCntCM=hpnicfDot11APUserTxPacketCntCM, hpnicfDot11APEchoRespLossCnt=hpnicfDot11APEchoRespLossCnt, hpnicfDot11CurrSSIDResourceUseRatio=hpnicfDot11CurrSSIDResourceUseRatio, hpnicfDot11APIfOutOctets=hpnicfDot11APIfOutOctets, hpnicfDot11APUserSecAuthStatisCMTable=hpnicfDot11APUserSecAuthStatisCMTable, hpnicfDot11RxDiscardFrameBytes=hpnicfDot11RxDiscardFrameBytes, hpnicfDot11APUserAuthFailCnt=hpnicfDot11APUserAuthFailCnt, hpnicfDot11APUserAuthStatisTable=hpnicfDot11APUserAuthStatisTable, hpnicfDot11APIfOutPayloadOctets2=hpnicfDot11APIfOutPayloadOctets2, hpnicfDot11APObjID=hpnicfDot11APObjID, hpnicfDot11Channel=hpnicfDot11Channel, hpnicfDot11RxUcastFrameBytes=hpnicfDot11RxUcastFrameBytes, hpnicfDot11BSSRxNonUniFrameCnt=hpnicfDot11BSSRxNonUniFrameCnt, hpnicfDot11APObjectTable=hpnicfDot11APObjectTable, hpnicfDot11APDeauthStatisCnt=hpnicfDot11APDeauthStatisCnt, hpnicfDot11Rx64CtrlFrameCnt=hpnicfDot11Rx64CtrlFrameCnt, hpnicfDot11APIfOutMulcastPkts=hpnicfDot11APIfOutMulcastPkts, hpnicfDot11APAssocFailStatis3RFCnt=hpnicfDot11APAssocFailStatis3RFCnt, hpnicfDot11MaxBandwidth=hpnicfDot11MaxBandwidth, hpnicfDot11BSSRx64UniFrameCnt=hpnicfDot11BSSRx64UniFrameCnt, hpnicfDot11AdminStatus=hpnicfDot11AdminStatus, hpnicfDot11APUserRxPacketCntCM=hpnicfDot11APUserRxPacketCntCM, hpnicfDot11APAutoAuthReqFailCntCM=hpnicfDot11APAutoAuthReqFailCntCM, hpnicfDot11APAuthFailStatisTable=hpnicfDot11APAuthFailStatisTable, hpnicfDot11RadioMngFrmStatisTable=hpnicfDot11RadioMngFrmStatisTable, hpnicfDot11APUserIpAddr=hpnicfDot11APUserIpAddr)
