#
# PySNMP MIB module JCImSeries-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JCImSeries-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
mSeries, = mibBuilder.importSymbols("JCIControlsGroup-MIB", "mSeries")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Gauge32, Counter64, iso, Counter32, TimeTicks, Unsigned32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Gauge32", "Counter64", "iso", "Counter32", "TimeTicks", "Unsigned32", "Integer32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jcimSeriesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 1))
if mibBuilder.loadTexts: jcimSeriesMIB.setLastUpdated('0110251448Z')
if mibBuilder.loadTexts: jcimSeriesMIB.setOrganization('Johnson Controls')
if mibBuilder.loadTexts: jcimSeriesMIB.setContactInfo(' Mary Kehoss Postal: Johnson Controls, Inc. 507 East Michigan Street Milwaukee, WI 53201 US Fax: +1 414-524-4400 Email: mary.e.kehoss@jci.com')
if mibBuilder.loadTexts: jcimSeriesMIB.setDescription('This MIB module describes all attributes included in traps created from Metasys OPC Event Data.')
opcTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2))
opcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3))
opcN1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1))
opcBacnetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2))
opcStandardTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 3))
opcSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcSeverity.setStatus('current')
if mibBuilder.loadTexts: opcSeverity.setDescription('Indicates the severity of the OPCEvent represented by the trap where a values of 1-333 are low, 334-666 are medium and 667-1000 are high.')
opcSource = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcSource.setStatus('current')
if mibBuilder.loadTexts: opcSource.setDescription('The name of the device or system that has sent the event.')
opcTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcTimeStamp.setStatus('current')
if mibBuilder.loadTexts: opcTimeStamp.setDescription('A string identifying the time the OPC-Event has occured. Note that the time is given as UTC-time.')
opcMessage = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcMessage.setStatus('current')
if mibBuilder.loadTexts: opcMessage.setDescription('A string that contains further information about the event. Often this string is used to specify the action that the operator should take.')
opcEventCategory = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcEventCategory.setStatus('current')
if mibBuilder.loadTexts: opcEventCategory.setDescription('Describes the category this event belongs, for example, Fire or General.')
opcEventCategoryText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcEventCategoryText.setStatus('current')
if mibBuilder.loadTexts: opcEventCategoryText.setDescription('Describes the category this event belongs, for example, Fire or General.')
opcEventType = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("simpleEvent", 1), ("trackingEvent", 2), ("conditionEvent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcEventType.setStatus('current')
if mibBuilder.loadTexts: opcEventType.setDescription('Indicates the type of OPC-Event represented by the trap.')
opcEventTypeText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcEventTypeText.setStatus('current')
if mibBuilder.loadTexts: opcEventTypeText.setDescription('The same as opcEventType except that it will return a humand readable text describing the type of the event. The possible event types are: Conditional, Simple or Tracking-Event.')
opcCondition = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcCondition.setStatus('current')
if mibBuilder.loadTexts: opcCondition.setDescription('Indicates the condition type of the OPCEvent represented by the trap, for example, Alarm or Normal.')
opcSubCondition = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcSubCondition.setStatus('current')
if mibBuilder.loadTexts: opcSubCondition.setDescription('Indicates the subcondition status of the OPCEvent represented by the trap, for example, a subcondition of an alarm is low alarm.')
opcActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcActiveTime.setStatus('current')
if mibBuilder.loadTexts: opcActiveTime.setDescription('Shows the UTC-time this event became active.')
opcQuality = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcQuality.setStatus('current')
if mibBuilder.loadTexts: opcQuality.setDescription('The raw value of the OPC-quality according to the OPC DA specificatoin.')
opcQualityText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcQualityText.setStatus('current')
if mibBuilder.loadTexts: opcQualityText.setDescription('The same as opcQuality except that it contains a human readable text.')
opcNewState = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("opcConditionEnabled", 1), ("opcConditionActive", 2), ("opcConditionAcked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcNewState.setStatus('current')
if mibBuilder.loadTexts: opcNewState.setDescription('Indicates the new state of the alarm.')
opcNewStateText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcNewStateText.setStatus('current')
if mibBuilder.loadTexts: opcNewStateText.setDescription('Indicates the new state of the alarm.')
opcAckRequired = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcAckRequired.setStatus('current')
if mibBuilder.loadTexts: opcAckRequired.setDescription('Indicates whether this alarm has to be acknowledged or not.')
opcAckRequiredText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcAckRequiredText.setStatus('current')
if mibBuilder.loadTexts: opcAckRequiredText.setDescription('Outputs ACKNOWLEDGE REQUIRED if integer value is 1.')
opcCookie = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcCookie.setStatus('current')
if mibBuilder.loadTexts: opcCookie.setDescription('A unique ID for this event, normally for internal use only.')
opcChangeMask = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcChangeMask.setStatus('current')
if mibBuilder.loadTexts: opcChangeMask.setDescription('A set of bit flags indicating which properties of the alarm or event have changed: Bit 0 set = active state of the alarm. Bit 1 set = alarm has been acknowledged. Bit 2 set = alarm condition has been enabled or disabled. Bit 4 set = the quality of the data the alarm is based upon, has changed. Bit 5 set = the severity of the alarm has changed. Bit 6 set = the alarm has changed to another subcondition. Bit 7 set = the alarm message has changed. Bit 8 set = an attribute of the alarm has changed.')
opcChangeMaskText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcChangeMaskText.setStatus('current')
if mibBuilder.loadTexts: opcChangeMaskText.setDescription('A list of properties of the alarm or event have changed For example, the event has become inactive and acknowledged.')
opcActorID = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opcActorID.setStatus('current')
if mibBuilder.loadTexts: opcActorID.setDescription('For conditional events, this is the operator or software that has acknowledged the event. For tracking events, this is the actor ID.')
originalDate = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: originalDate.setStatus('current')
if mibBuilder.loadTexts: originalDate.setDescription('Identifies the date of the original event.')
originalTime = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: originalTime.setStatus('current')
if mibBuilder.loadTexts: originalTime.setDescription('Identifies the time of the original event.')
networkName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkName.setStatus('current')
if mibBuilder.loadTexts: networkName.setDescription('The Metasys network which is the source of the event, this string is also included in the OPCsource.')
ncmName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmName.setStatus('current')
if mibBuilder.loadTexts: ncmName.setDescription('The Metasys network controller which is the source of the event, this string is also included in the OPCsource.')
systemID = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemID.setStatus('current')
if mibBuilder.loadTexts: systemID.setDescription('The system which is the source of the event, this string is also included in the OPCsource.')
id = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: id.setStatus('current')
if mibBuilder.loadTexts: id.setDescription('The object which is the source of the event, this string is also included in the OPCsource.')
expandedID = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expandedID.setStatus('current')
if mibBuilder.loadTexts: expandedID.setDescription('The long name of the object which is the source of the event.')
presentvalue = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: presentvalue.setStatus('current')
if mibBuilder.loadTexts: presentvalue.setDescription('The value of the object when the event occurred.')
units = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: units.setStatus('current')
if mibBuilder.loadTexts: units.setDescription('The engineering units asssigned to the object.')
reportType = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportType.setStatus('current')
if mibBuilder.loadTexts: reportType.setDescription('The report type of the event, CRITICAL, STATUS or FOLLOWUP.')
alarmType = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmType.setStatus('current')
if mibBuilder.loadTexts: alarmType.setDescription('The report type of the event, CRITICAL, STATUS or FOLLOWUP.')
availattribute1 = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: availattribute1.setStatus('current')
if mibBuilder.loadTexts: availattribute1.setDescription('Available for future use.')
alarmPriority = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPriority.setStatus('current')
if mibBuilder.loadTexts: alarmPriority.setDescription('The original Metasys Report severity (1-4)')
featureStatus = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureStatus.setStatus('current')
if mibBuilder.loadTexts: featureStatus.setDescription('For feature related transactions, the name of the feature. For operator commands, the status of the object. ')
reportDate = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportDate.setStatus('current')
if mibBuilder.loadTexts: reportDate.setDescription('The date the transaction occurred.')
reportTime = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportTime.setStatus('current')
if mibBuilder.loadTexts: reportTime.setDescription('The time the transaction occurred.')
transactionType = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("logonLogoff", 1), ("object", 2), ("feature", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionType.setStatus('current')
if mibBuilder.loadTexts: transactionType.setDescription('Transaction Type as an enumeration')
transactionTypeText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 64), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionTypeText.setStatus('current')
if mibBuilder.loadTexts: transactionTypeText.setDescription('Transaction Type ')
location = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: location.setStatus('current')
if mibBuilder.loadTexts: location.setDescription('Location. ')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('The name of the operator device where the transaction occurred.')
userID = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userID.setStatus('current')
if mibBuilder.loadTexts: userID.setDescription('The three character password ID of the operator who performed the transaction.')
accssLevel = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accssLevel.setStatus('current')
if mibBuilder.loadTexts: accssLevel.setDescription('For logon, the users access level. For logoff, 0. Otherwise, the access level required to perform the transaction.')
transactionText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 69), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionText.setStatus('current')
if mibBuilder.loadTexts: transactionText.setDescription('A description of the transaction.')
firstName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firstName.setStatus('current')
if mibBuilder.loadTexts: firstName.setDescription('First Name of the operator who performed a transaction.')
lastName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastName.setStatus('current')
if mibBuilder.loadTexts: lastName.setDescription('Last Name of the operator who performed a transaction.')
spclText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spclText.setStatus('current')
if mibBuilder.loadTexts: spclText.setDescription('Information about the event.')
cardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardNumber.setStatus('current')
if mibBuilder.loadTexts: cardNumber.setDescription('Card Number used in the transaction.')
deviceTimePresent = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 74), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTimePresent.setStatus('current')
if mibBuilder.loadTexts: deviceTimePresent.setDescription('If true, the reported time is from the device. ')
esjAckComment = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esjAckComment.setStatus('current')
if mibBuilder.loadTexts: esjAckComment.setDescription('A comment entered by the operator acknowledging the event.')
propertyValue = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propertyValue.setStatus('current')
if mibBuilder.loadTexts: propertyValue.setDescription('The current value of the attribute.')
unit = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unit.setStatus('current')
if mibBuilder.loadTexts: unit.setDescription('The unit of the value.')
propertyName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propertyName.setStatus('current')
if mibBuilder.loadTexts: propertyName.setDescription('The name of the attribute.')
fromState = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fromState.setStatus('current')
if mibBuilder.loadTexts: fromState.setDescription('The previous state before the transition occurred.')
vendorIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorIdentifier.setStatus('current')
if mibBuilder.loadTexts: vendorIdentifier.setDescription('The Bacnet Vendor Identifier number. 5 will be set for JC devices.')
areas = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 105), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: areas.setStatus('current')
if mibBuilder.loadTexts: areas.setDescription('The Query Filter String.')
bacnetEventType = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bacnetEventType.setStatus('current')
if mibBuilder.loadTexts: bacnetEventType.setDescription('The Bacnet defined event type.')
ackComment = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 107), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ackComment.setStatus('current')
if mibBuilder.loadTexts: ackComment.setDescription('A comment entered by the operator acknowledging the event.')
completeAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: completeAcknowledge.setStatus('current')
if mibBuilder.loadTexts: completeAcknowledge.setDescription('A indication of whether the controller needs complete acknowledgement.')
badgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: badgeNumber.setStatus('current')
if mibBuilder.loadTexts: badgeNumber.setDescription('The badge number of the badge holder.')
badgeTrace = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: badgeTrace.setStatus('current')
if mibBuilder.loadTexts: badgeTrace.setDescription('Specifies if the card event set to be part of trace.')
issueLevel = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: issueLevel.setStatus('current')
if mibBuilder.loadTexts: issueLevel.setDescription('The current issue of badge that created event.')
timedOverride = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timedOverride.setStatus('current')
if mibBuilder.loadTexts: timedOverride.setDescription('Timed Override')
facilityCode = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 113), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: facilityCode.setStatus('current')
if mibBuilder.loadTexts: facilityCode.setDescription('The facility code of badge.')
direction = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 114), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: direction.setStatus('current')
if mibBuilder.loadTexts: direction.setDescription('Enum=in,out,toggle,unknown,muster.')
functionKey = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 115), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: functionKey.setStatus('current')
if mibBuilder.loadTexts: functionKey.setDescription('Function Key')
barcodeAttach = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 116), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: barcodeAttach.setStatus('current')
if mibBuilder.loadTexts: barcodeAttach.setDescription('32 character string- NULL if N/A.')
terminalName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 117), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminalName.setStatus('current')
if mibBuilder.loadTexts: terminalName.setDescription('Terminal Name')
userName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 118), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('User Name')
auditItemName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 119), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditItemName.setStatus('current')
if mibBuilder.loadTexts: auditItemName.setDescription('Audit Item Name')
pegasysEventName = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 120), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pegasysEventName.setStatus('current')
if mibBuilder.loadTexts: pegasysEventName.setDescription('Pegasys Event Name')
errorLogType = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 121), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorLogType.setStatus('current')
if mibBuilder.loadTexts: errorLogType.setDescription('Error Log Type')
triggerCode = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 122), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerCode.setStatus('current')
if mibBuilder.loadTexts: triggerCode.setDescription('Trigger Code')
triggerText = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 123), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerText.setStatus('current')
if mibBuilder.loadTexts: triggerText.setDescription('Trigger Text')
triggerValue = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 124), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerValue.setStatus('current')
if mibBuilder.loadTexts: triggerValue.setDescription('Trigger Value')
reliability = MibScalar((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 2, 125), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliability.setStatus('current')
if mibBuilder.loadTexts: reliability.setDescription('Reliability')
n1HvacActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 1)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1HvacActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1HvacActiveConditionalEvent.setDescription('This trap is sent when a n1 HVAC conditional event becomes active.')
n1HvacInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 2)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1HvacInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1HvacInactiveConditionalEvent.setDescription('This trap is sent if when a n1 HVAC conditional event becomes inactive.')
n1HvacConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 3)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "esjAckComment"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1HvacConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: n1HvacConditionalEventAcknowledged.setDescription('This trap is sent when a n1 HVAC conditional event is acknowledged by a Metasys operator.')
n1FireActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 4)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1FireActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1FireActiveConditionalEvent.setDescription('This trap is sent if when a n1 fire conditional event becomes active.')
n1FireInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 5)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1FireInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1FireInactiveConditionalEvent.setDescription('This trap is sent if when a n1 fire conditional event becomes inactive.')
n1FireConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 6)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "esjAckComment"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1FireConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: n1FireConditionalEventAcknowledged.setDescription('This trap is sent when a n1 fire conditional event is acknowledged by a Metasys operator.')
n1ServicesActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 7)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1ServicesActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1ServicesActiveConditionalEvent.setDescription('This trap is sent if when a n1 services conditional event becomes active.')
n1ServicesInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 8)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1ServicesInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1ServicesInactiveConditionalEvent.setDescription('This trap is sent if when a n1 services conditional event becomes inactive.')
n1ServicesConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 9)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "esjAckComment"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1ServicesConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: n1ServicesConditionalEventAcknowledged.setDescription('This trap is sent when a n1 services conditional event is acknowledged by a Metasys operator.')
n1SecurityActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 10)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1SecurityActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1SecurityActiveConditionalEvent.setDescription('This trap is sent if when a n1 security conditional event becomes active.')
n1SecurityInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 11)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "cardNumber"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "featureStatus"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1SecurityInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1SecurityInactiveConditionalEvent.setDescription('This trap is sent if when a n1 security conditional event becomes inactive.')
n1SecurityConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 12)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "cardNumber"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "featureStatus"), ("JCImSeries-MIB", "esjAckComment"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1SecurityConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: n1SecurityConditionalEventAcknowledged.setDescription('This trap is sent when a n1 security conditional event is acknowledged by a Metasys operator.')
n1AdminActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 13)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1AdminActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1AdminActiveConditionalEvent.setDescription('This trap is sent if when an n1 administrative conditional event becomes active.')
n1AdminInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 14)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1AdminInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1AdminInactiveConditionalEvent.setDescription('This trap is sent if when a n1 administrative conditional event becomes inactive.')
n1AdminConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 15)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "esjAckComment"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1AdminConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: n1AdminConditionalEventAcknowledged.setDescription('This trap is sent when a n1 administrative conditional event is acknowledged by a Metasys operator.')
n1GeneralActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 16)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1GeneralActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1GeneralActiveConditionalEvent.setDescription('This trap is sent if when a n1 general conditional event becomes active.')
n1GeneralInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 17)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1GeneralInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: n1GeneralInactiveConditionalEvent.setDescription('This trap is sent when a n1 general conditional event becomes inactive.')
n1GeneralConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 18)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "esjAckComment"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1GeneralConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: n1GeneralConditionalEventAcknowledged.setDescription('This trap is sent when a n1 general conditional event is acknowledged by a Metasys operator.')
n1HvacSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 19)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1HvacSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: n1HvacSimpleEvent.setDescription('This is a n1 HVAC information trap.')
n1FireSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 20)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1FireSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: n1FireSimpleEvent.setDescription('This is a n1 fire information trap.')
n1ServicesSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 21)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1ServicesSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: n1ServicesSimpleEvent.setDescription('This is a n1 services information trap.')
n1SecuritySimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 22)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1SecuritySimpleEvent.setStatus('current')
if mibBuilder.loadTexts: n1SecuritySimpleEvent.setDescription('This is a n1 security information trap.')
n1AdminSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 23)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1AdminSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: n1AdminSimpleEvent.setDescription('This is a n1 administrative information trap.')
n1GeneralSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 24)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1GeneralSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: n1GeneralSimpleEvent.setDescription('This is a n1 general information trap.')
n1HvacTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 25)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "originalDate"), ("JCImSeries-MIB", "originalTime"), ("JCImSeries-MIB", "featureStatus"), ("JCImSeries-MIB", "reportDate"), ("JCImSeries-MIB", "reportTime"), ("JCImSeries-MIB", "location"), ("JCImSeries-MIB", "deviceName"), ("JCImSeries-MIB", "userID"), ("JCImSeries-MIB", "accssLevel"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1HvacTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: n1HvacTrackingEvent.setDescription('This is a n1 HVAC tracking trap.')
n1FireTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 26)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "featureStatus"), ("JCImSeries-MIB", "reportDate"), ("JCImSeries-MIB", "reportTime"), ("JCImSeries-MIB", "location"), ("JCImSeries-MIB", "deviceName"), ("JCImSeries-MIB", "userID"), ("JCImSeries-MIB", "accssLevel"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1FireTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: n1FireTrackingEvent.setDescription('This is a n1 fire tracking trap.')
n1ServicesTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 27)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "originalDate"), ("JCImSeries-MIB", "originalTime"), ("JCImSeries-MIB", "featureStatus"), ("JCImSeries-MIB", "reportDate"), ("JCImSeries-MIB", "reportTime"), ("JCImSeries-MIB", "location"), ("JCImSeries-MIB", "deviceName"), ("JCImSeries-MIB", "userID"), ("JCImSeries-MIB", "accssLevel"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1ServicesTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: n1ServicesTrackingEvent.setDescription('This is a n1 service tracking trap.')
n1SecurityTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 28)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "cardNumber"), ("JCImSeries-MIB", "featureStatus"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1SecurityTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: n1SecurityTrackingEvent.setDescription('This is a n1 security tracking trap.')
n1AdminTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 29)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "originalDate"), ("JCImSeries-MIB", "originalTime"), ("JCImSeries-MIB", "featureStatus"), ("JCImSeries-MIB", "reportDate"), ("JCImSeries-MIB", "reportTime"), ("JCImSeries-MIB", "location"), ("JCImSeries-MIB", "deviceName"), ("JCImSeries-MIB", "userID"), ("JCImSeries-MIB", "accssLevel"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1AdminTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: n1AdminTrackingEvent.setDescription('This is a n1 administrative tracking trap.')
n1GeneralTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 1, 0, 30)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "presentvalue"), ("JCImSeries-MIB", "units"), ("JCImSeries-MIB", "spclText"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "expandedID"), ("JCImSeries-MIB", "originalDate"), ("JCImSeries-MIB", "originalTime"), ("JCImSeries-MIB", "featureStatus"), ("JCImSeries-MIB", "reportDate"), ("JCImSeries-MIB", "reportTime"), ("JCImSeries-MIB", "location"), ("JCImSeries-MIB", "deviceName"), ("JCImSeries-MIB", "userID"), ("JCImSeries-MIB", "accssLevel"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: n1GeneralTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: n1GeneralTrackingEvent.setDescription('This is a n1 general tracking trap.')
bacnetDeviceFailureActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 1)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetDeviceFailureActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetDeviceFailureActiveConditionalEvent.setDescription('This trap is sent when a bacnet device failure conditional event becomes active.')
bacnetDeviceFailureInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 2)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetDeviceFailureInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetDeviceFailureInactiveConditionalEvent.setDescription('This trap is sent when a bacnet device failure conditional event becomes inactive.')
bacnetDeviceFailureConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 3)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetDeviceFailureConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetDeviceFailureConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet device failure condition is acknowledged by a Metasys operator.')
bacnetHvacActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 4)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHvacActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHvacActiveConditionalEvent.setDescription('This trap is sent when a bacnet HVAC conditional event becomes active.')
bacnetHvacInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 5)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHvacInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHvacInactiveConditionalEvent.setDescription('This trap is sent when a bacnet HVAC conditional event becomes inactive.')
bacnetHvacConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 6)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHvacConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetHvacConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet HVAC condition is acknowledged by a Metasys operator.')
bacnetFireActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 7)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetFireActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetFireActiveConditionalEvent.setDescription('This trap is sent when a bacnet fire conditional event becomes active.')
bacnetFireInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 8)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetFireInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetFireInactiveConditionalEvent.setDescription('This trap is sent when a bacnet fire conditional event becomes inactive.')
bacnetFireConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 9)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetFireConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetFireConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet fire condition is acknowledged by a Metasys operator.')
bacnetSecurityActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 10)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetSecurityActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetSecurityActiveConditionalEvent.setDescription('This trap is sent when a security conditional event becomes active.')
bacnetSecurityInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 11)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetSecurityInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetSecurityInactiveConditionalEvent.setDescription('This trap is sent when a security conditional event becomes inactive.')
bacnetSecurityConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 12)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetSecurityConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetSecurityConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet security condition is acknowledged by a Metasys operator.')
bacnetServicesActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 13)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetServicesActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetServicesActiveConditionalEvent.setDescription('This trap is sent when a bacnet services condition becomes active.')
bacnetServicesInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 14)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetServicesInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetServicesInactiveConditionalEvent.setDescription('This trap is sent when a bacnet services condition becomes inactive.')
bacnetServicesConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 15)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetServicesConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetServicesConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet services condition is acknowledged by a Metasys operator.')
bacnetAdminActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 16)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAdminActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetAdminActiveConditionalEvent.setDescription('This trap is sent when a bacnet administrative condition becomes active')
bacnetAdminInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 17)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAdminInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetAdminInactiveConditionalEvent.setDescription('This trap is sent when a bacnet administrative condition becomes inactive.')
bacnetAdminConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 18)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAdminConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetAdminConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet administrative condition is acknowledged by a Metasys operator.')
bacnetGeneralAlarmActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 19)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralAlarmActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralAlarmActiveConditionalEvent.setDescription('This trap is sent when a bacnet general alarm is active.')
bacnetGeneralAlarmInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 20)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralAlarmInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralAlarmInactiveConditionalEvent.setDescription('This trap is sent when a bacnet general alarm becomes inactive.')
bacnetGeneralAlarmConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 21)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralAlarmConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralAlarmConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet general alarm is acknowledged by a Metasys operator.')
bacnetGeneralEventActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 22)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralEventActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralEventActiveConditionalEvent.setDescription('This trap is sent when a device failure alarm is activated.')
bacnetGeneralEventInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 23)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralEventInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralEventInactiveConditionalEvent.setDescription('This trap is sent when a device failure alarm is no longer active.')
bacnetGeneralEventConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 24)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "deviceTimePresent"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralEventConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralEventConditionalEventAcknowledged.setDescription('This trap is sent when a device failure alarm has been acknowledged by an operator.')
bacnetPanelEventActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 25)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelEventActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelEventActiveConditionalEvent.setDescription('This trap is sent when a bacnet panel event condition becomes active.')
bacnetPanelEventInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 26)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelEventInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelEventInactiveConditionalEvent.setDescription('This trap is sent when a bacnet panel event condition becomes inactive.')
bacnetPanelEventConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 27)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelEventConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelEventConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet panel event condition is acknowledged by a Metasys operator.')
bacnetPanelHWStatusActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 28)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelHWStatusActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelHWStatusActiveConditionalEvent.setDescription('This trap is sent when a bacnet panel hardware status conditional event has becomes active.')
bacnetPanelHWStatusInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 29)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelHWStatusInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelHWStatusInactiveConditionalEvent.setDescription('This trap is sent when a bacnet panel hardware status conditional event has becomes inactive.')
bacnetPanelHWStatusConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 30)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelHWStatusConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelHWStatusConditionalEventAcknowledged.setDescription('This trap is sent when a panel hardware status conditional event has been acknowledged by an operator.')
bacnetHostLogActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 31)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "userName"), ("JCImSeries-MIB", "auditItemName"), ("JCImSeries-MIB", "pegasysEventName"), ("JCImSeries-MIB", "errorLogType"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHostLogActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHostLogActiveConditionalEvent.setDescription('This trap is sent when a bacnet host log condition becomes active.')
bacnetHostLogInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 32)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "userName"), ("JCImSeries-MIB", "auditItemName"), ("JCImSeries-MIB", "pegasysEventName"), ("JCImSeries-MIB", "errorLogType"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHostLogInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHostLogInactiveConditionalEvent.setDescription('This trap is sent when a bacnet host log condition becomes inactive.')
bacnetHostLogConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 33)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "userName"), ("JCImSeries-MIB", "auditItemName"), ("JCImSeries-MIB", "pegasysEventName"), ("JCImSeries-MIB", "errorLogType"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHostLogConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetHostLogConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet host log condition has been acknowledged by an operator.')
bacnetOutputPointStatusActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 34)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetOutputPointStatusActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetOutputPointStatusActiveConditionalEvent.setDescription('This trap is sent when a bacnet output point status conditional event is activated.')
bacnetOutputPointStatusInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 35)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetOutputPointStatusInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetOutputPointStatusInactiveConditionalEvent.setDescription('This trap is sent when a bacnet output point status conditional event is no longer active.')
bacnetOutputPointStatusConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 36)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetOutputPointStatusConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetOutputPointStatusConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet output point status condition has been acknowledged by an operator.')
bacnetInputPointStatusActiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 37)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetInputPointStatusActiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetInputPointStatusActiveConditionalEvent.setDescription('This trap is sent when a bacnet input point status event becomes active.')
bacnetInputPointStatusInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 38)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetInputPointStatusInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetInputPointStatusInactiveConditionalEvent.setDescription('This trap is sent when a bacnet input point status event is no longer active.')
bacnetInputPointStatusConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 39)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "ackComment"), ("JCImSeries-MIB", "completeAcknowledge"), ("JCImSeries-MIB", "reliability"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetInputPointStatusConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: bacnetInputPointStatusConditionalEventAcknowledged.setDescription('This trap is sent when a bacnet input point status event has been acknowledged by an operator.')
bacnetHvacSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 40)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHvacSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHvacSimpleEvent.setDescription('This is a bacnet HVAC information trap.')
bacnetFireSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 41)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetFireSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetFireSimpleEvent.setDescription('This is a bacnet fire information trap.')
bacnetSecuritySimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 42)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetSecuritySimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetSecuritySimpleEvent.setDescription('This is a bacnet security information trap.')
bacnetServicesSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 43)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetServicesSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetServicesSimpleEvent.setDescription('This is a bacnet services information trap.')
bacnetAdminSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 44)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "propertyName"), ("JCImSeries-MIB", "unit"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAdminSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetAdminSimpleEvent.setDescription('This is a bacnet administrative information trap.')
bacnetAccessGrantSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 45)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "badgeTrace"), ("JCImSeries-MIB", "badgeNumber"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "issueLevel"), ("JCImSeries-MIB", "timedOverride"), ("JCImSeries-MIB", "facilityCode"), ("JCImSeries-MIB", "direction"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAccessGrantSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetAccessGrantSimpleEvent.setDescription('This is a bacnet access granted information trap.')
bacnetAccessDenySimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 46)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "badgeTrace"), ("JCImSeries-MIB", "badgeNumber"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "issueLevel"), ("JCImSeries-MIB", "timedOverride"), ("JCImSeries-MIB", "facilityCode"), ("JCImSeries-MIB", "direction"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAccessDenySimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetAccessDenySimpleEvent.setDescription('This is a bacnet access denied information trap.')
bacnetCardTraceSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 47)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "badgeTrace"), ("JCImSeries-MIB", "badgeNumber"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "issueLevel"), ("JCImSeries-MIB", "timedOverride"), ("JCImSeries-MIB", "facilityCode"), ("JCImSeries-MIB", "direction"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetCardTraceSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetCardTraceSimpleEvent.setDescription('This is a bacnet card trace information trap.')
bacnetTAAccessGrantSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 48)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "badgeTrace"), ("JCImSeries-MIB", "badgeNumber"), ("JCImSeries-MIB", "lastName"), ("JCImSeries-MIB", "firstName"), ("JCImSeries-MIB", "timedOverride"), ("JCImSeries-MIB", "direction"), ("JCImSeries-MIB", "functionKey"), ("JCImSeries-MIB", "barcodeAttach"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetTAAccessGrantSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetTAAccessGrantSimpleEvent.setDescription('This is a bacnet granted information trap.')
bacnetOutputPointStatusSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 49)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetOutputPointStatusSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetOutputPointStatusSimpleEvent.setDescription('This is a bacnet output point status information trap.')
bacnetInputPointStatusSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 50)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "propertyValue"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetInputPointStatusSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetInputPointStatusSimpleEvent.setDescription('This is a bacnet input point status information trap.')
bacnetAuditSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 51)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "userName"), ("JCImSeries-MIB", "auditItemName"), ("JCImSeries-MIB", "pegasysEventName"), ("JCImSeries-MIB", "errorLogType"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetAuditSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetAuditSimpleEvent.setDescription('This is a bacnet audit information trap.')
bacnetHostEventSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 52)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "userName"), ("JCImSeries-MIB", "auditItemName"), ("JCImSeries-MIB", "pegasysEventName"), ("JCImSeries-MIB", "errorLogType"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHostEventSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHostEventSimpleEvent.setDescription('This is a bacnet host event information trap.')
bacnetHostLogSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 53)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "userName"), ("JCImSeries-MIB", "auditItemName"), ("JCImSeries-MIB", "pegasysEventName"), ("JCImSeries-MIB", "errorLogType"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHostLogSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHostLogSimpleEvent.setDescription('This is a bacnet host log information trap.')
bacnetHostLogicSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 54)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "triggerCode"), ("JCImSeries-MIB", "triggerText"), ("JCImSeries-MIB", "triggerValue"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetHostLogicSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetHostLogicSimpleEvent.setDescription('This is a bacnet host logic information trap.')
bacnetPanelEventSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 55)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelEventSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelEventSimpleEvent.setDescription('This is a bacnet panel event information trap.')
bacnetPanelHWStatusSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 56)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "bacnetEventType"), ("JCImSeries-MIB", "vendorIdentifier"), ("JCImSeries-MIB", "areas"), ("JCImSeries-MIB", "fromState"), ("JCImSeries-MIB", "terminalName"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetPanelHWStatusSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetPanelHWStatusSimpleEvent.setDescription('This is a bacnet panel hardware status information trap.')
bacnetCommErrorSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 57)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetCommErrorSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetCommErrorSimpleEvent.setDescription('This is a bacnet communication error information trap.')
bacnetGeneralSimpleEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 2, 0, 58)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bacnetGeneralSimpleEvent.setStatus('current')
if mibBuilder.loadTexts: bacnetGeneralSimpleEvent.setDescription('This is a bacnet general information trap.')
opcStandardActiveGeneralConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 3, 0, 1)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: opcStandardActiveGeneralConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: opcStandardActiveGeneralConditionalEvent.setDescription('This trap is sent when an opc conditional event occurs.')
opcStandardInactiveConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 3, 0, 2)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: opcStandardInactiveConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: opcStandardInactiveConditionalEvent.setDescription('This trap is sent when an opc conditional event becomes inactive.')
opcStandardGeneralConditionalEventAcknowledged = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 3, 0, 3)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcSubCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcActorID"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: opcStandardGeneralConditionalEventAcknowledged.setStatus('current')
if mibBuilder.loadTexts: opcStandardGeneralConditionalEventAcknowledged.setDescription('This trap is sent when an opc conditional event is acknowledged.')
opcStandardSimpleNotification = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 3, 0, 4)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: opcStandardSimpleNotification.setStatus('current')
if mibBuilder.loadTexts: opcStandardSimpleNotification.setDescription('This trap is sent for information purposes when an opc Simple event occurs.')
opcStandardTrackingEvent = NotificationType((1, 3, 6, 1, 4, 1, 4399, 2, 1, 10, 3, 3, 0, 5)).setObjects(("JCImSeries-MIB", "opcSeverity"), ("JCImSeries-MIB", "opcCondition"), ("JCImSeries-MIB", "opcSource"), ("JCImSeries-MIB", "opcMessage"), ("JCImSeries-MIB", "opcTimeStamp"), ("JCImSeries-MIB", "opcEventTypeText"), ("JCImSeries-MIB", "opcEventCategoryText"), ("JCImSeries-MIB", "opcActiveTime"), ("JCImSeries-MIB", "opcQualityText"), ("JCImSeries-MIB", "opcNewStateText"), ("JCImSeries-MIB", "opcChangeMaskText"), ("JCImSeries-MIB", "opcAckRequired"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: opcStandardTrackingEvent.setStatus('current')
if mibBuilder.loadTexts: opcStandardTrackingEvent.setDescription('This is a generic opc Tracking notification sent for information purposes.')
mibBuilder.exportSymbols("JCImSeries-MIB", propertyValue=propertyValue, bacnetGeneralAlarmActiveConditionalEvent=bacnetGeneralAlarmActiveConditionalEvent, opcSource=opcSource, n1SecurityInactiveConditionalEvent=n1SecurityInactiveConditionalEvent, reportTime=reportTime, opcEventTypeText=opcEventTypeText, bacnetHostLogSimpleEvent=bacnetHostLogSimpleEvent, bacnetHostLogicSimpleEvent=bacnetHostLogicSimpleEvent, transactionTypeText=transactionTypeText, opcMessage=opcMessage, opcActiveTime=opcActiveTime, pegasysEventName=pegasysEventName, n1HvacConditionalEventAcknowledged=n1HvacConditionalEventAcknowledged, n1SecurityConditionalEventAcknowledged=n1SecurityConditionalEventAcknowledged, bacnetInputPointStatusConditionalEventAcknowledged=bacnetInputPointStatusConditionalEventAcknowledged, bacnetAccessDenySimpleEvent=bacnetAccessDenySimpleEvent, alarmType=alarmType, opcStandardTraps=opcStandardTraps, bacnetDeviceFailureInactiveConditionalEvent=bacnetDeviceFailureInactiveConditionalEvent, bacnetInputPointStatusSimpleEvent=bacnetInputPointStatusSimpleEvent, n1GeneralSimpleEvent=n1GeneralSimpleEvent, alarmPriority=alarmPriority, n1GeneralConditionalEventAcknowledged=n1GeneralConditionalEventAcknowledged, n1AdminSimpleEvent=n1AdminSimpleEvent, n1FireActiveConditionalEvent=n1FireActiveConditionalEvent, opcN1Traps=opcN1Traps, id=id, bacnetGeneralAlarmConditionalEventAcknowledged=bacnetGeneralAlarmConditionalEventAcknowledged, bacnetServicesConditionalEventAcknowledged=bacnetServicesConditionalEventAcknowledged, badgeNumber=badgeNumber, bacnetPanelHWStatusActiveConditionalEvent=bacnetPanelHWStatusActiveConditionalEvent, bacnetAdminInactiveConditionalEvent=bacnetAdminInactiveConditionalEvent, bacnetInputPointStatusActiveConditionalEvent=bacnetInputPointStatusActiveConditionalEvent, opcQualityText=opcQualityText, bacnetServicesActiveConditionalEvent=bacnetServicesActiveConditionalEvent, opcStandardGeneralConditionalEventAcknowledged=opcStandardGeneralConditionalEventAcknowledged, opcNewStateText=opcNewStateText, spclText=spclText, bacnetHostEventSimpleEvent=bacnetHostEventSimpleEvent, opcTraps=opcTraps, systemID=systemID, cardNumber=cardNumber, opcSeverity=opcSeverity, bacnetAdminConditionalEventAcknowledged=bacnetAdminConditionalEventAcknowledged, n1SecurityTrackingEvent=n1SecurityTrackingEvent, opcCondition=opcCondition, opcStandardActiveGeneralConditionalEvent=opcStandardActiveGeneralConditionalEvent, ncmName=ncmName, opcTypes=opcTypes, opcChangeMaskText=opcChangeMaskText, n1ServicesTrackingEvent=n1ServicesTrackingEvent, userName=userName, originalDate=originalDate, bacnetAccessGrantSimpleEvent=bacnetAccessGrantSimpleEvent, esjAckComment=esjAckComment, bacnetGeneralEventInactiveConditionalEvent=bacnetGeneralEventInactiveConditionalEvent, bacnetSecurityActiveConditionalEvent=bacnetSecurityActiveConditionalEvent, opcNewState=opcNewState, reportDate=reportDate, fromState=fromState, opcStandardTrackingEvent=opcStandardTrackingEvent, n1GeneralTrackingEvent=n1GeneralTrackingEvent, accssLevel=accssLevel, errorLogType=errorLogType, lastName=lastName, deviceName=deviceName, transactionText=transactionText, networkName=networkName, opcSubCondition=opcSubCondition, opcTimeStamp=opcTimeStamp, bacnetGeneralSimpleEvent=bacnetGeneralSimpleEvent, bacnetFireConditionalEventAcknowledged=bacnetFireConditionalEventAcknowledged, barcodeAttach=barcodeAttach, n1ServicesInactiveConditionalEvent=n1ServicesInactiveConditionalEvent, badgeTrace=badgeTrace, transactionType=transactionType, userID=userID, bacnetServicesSimpleEvent=bacnetServicesSimpleEvent, n1HvacActiveConditionalEvent=n1HvacActiveConditionalEvent, expandedID=expandedID, bacnetHostLogInactiveConditionalEvent=bacnetHostLogInactiveConditionalEvent, opcBacnetTraps=opcBacnetTraps, direction=direction, n1AdminConditionalEventAcknowledged=n1AdminConditionalEventAcknowledged, bacnetFireActiveConditionalEvent=bacnetFireActiveConditionalEvent, n1ServicesSimpleEvent=n1ServicesSimpleEvent, bacnetPanelEventActiveConditionalEvent=bacnetPanelEventActiveConditionalEvent, bacnetSecuritySimpleEvent=bacnetSecuritySimpleEvent, opcStandardInactiveConditionalEvent=opcStandardInactiveConditionalEvent, jcimSeriesMIB=jcimSeriesMIB, bacnetHostLogActiveConditionalEvent=bacnetHostLogActiveConditionalEvent, n1AdminTrackingEvent=n1AdminTrackingEvent, featureStatus=featureStatus, opcChangeMask=opcChangeMask, triggerValue=triggerValue, bacnetHvacInactiveConditionalEvent=bacnetHvacInactiveConditionalEvent, bacnetHostLogConditionalEventAcknowledged=bacnetHostLogConditionalEventAcknowledged, propertyName=propertyName, reliability=reliability, n1HvacTrackingEvent=n1HvacTrackingEvent, opcActorID=opcActorID, bacnetCommErrorSimpleEvent=bacnetCommErrorSimpleEvent, n1SecuritySimpleEvent=n1SecuritySimpleEvent, bacnetTAAccessGrantSimpleEvent=bacnetTAAccessGrantSimpleEvent, bacnetAdminActiveConditionalEvent=bacnetAdminActiveConditionalEvent, bacnetDeviceFailureActiveConditionalEvent=bacnetDeviceFailureActiveConditionalEvent, location=location, ackComment=ackComment, bacnetSecurityConditionalEventAcknowledged=bacnetSecurityConditionalEventAcknowledged, bacnetSecurityInactiveConditionalEvent=bacnetSecurityInactiveConditionalEvent, bacnetGeneralAlarmInactiveConditionalEvent=bacnetGeneralAlarmInactiveConditionalEvent, n1AdminInactiveConditionalEvent=n1AdminInactiveConditionalEvent, timedOverride=timedOverride, bacnetHvacActiveConditionalEvent=bacnetHvacActiveConditionalEvent, completeAcknowledge=completeAcknowledge, triggerText=triggerText, bacnetOutputPointStatusInactiveConditionalEvent=bacnetOutputPointStatusInactiveConditionalEvent, bacnetOutputPointStatusSimpleEvent=bacnetOutputPointStatusSimpleEvent, bacnetServicesInactiveConditionalEvent=bacnetServicesInactiveConditionalEvent, opcAckRequired=opcAckRequired, n1ServicesActiveConditionalEvent=n1ServicesActiveConditionalEvent, bacnetCardTraceSimpleEvent=bacnetCardTraceSimpleEvent, units=units, bacnetOutputPointStatusActiveConditionalEvent=bacnetOutputPointStatusActiveConditionalEvent, bacnetPanelHWStatusSimpleEvent=bacnetPanelHWStatusSimpleEvent, bacnetAdminSimpleEvent=bacnetAdminSimpleEvent, n1FireTrackingEvent=n1FireTrackingEvent, availattribute1=availattribute1, bacnetOutputPointStatusConditionalEventAcknowledged=bacnetOutputPointStatusConditionalEventAcknowledged, n1AdminActiveConditionalEvent=n1AdminActiveConditionalEvent, bacnetPanelEventInactiveConditionalEvent=bacnetPanelEventInactiveConditionalEvent, opcEventType=opcEventType, bacnetPanelEventSimpleEvent=bacnetPanelEventSimpleEvent, bacnetGeneralEventConditionalEventAcknowledged=bacnetGeneralEventConditionalEventAcknowledged, n1SecurityActiveConditionalEvent=n1SecurityActiveConditionalEvent, bacnetFireSimpleEvent=bacnetFireSimpleEvent, bacnetEventType=bacnetEventType, opcEventCategoryText=opcEventCategoryText, terminalName=terminalName, n1GeneralActiveConditionalEvent=n1GeneralActiveConditionalEvent, bacnetGeneralEventActiveConditionalEvent=bacnetGeneralEventActiveConditionalEvent, reportType=reportType, bacnetHvacSimpleEvent=bacnetHvacSimpleEvent, PYSNMP_MODULE_ID=jcimSeriesMIB, opcEventCategory=opcEventCategory, triggerCode=triggerCode, bacnetDeviceFailureConditionalEventAcknowledged=bacnetDeviceFailureConditionalEventAcknowledged, opcStandardSimpleNotification=opcStandardSimpleNotification, opcCookie=opcCookie, auditItemName=auditItemName, n1HvacInactiveConditionalEvent=n1HvacInactiveConditionalEvent, n1GeneralInactiveConditionalEvent=n1GeneralInactiveConditionalEvent, n1HvacSimpleEvent=n1HvacSimpleEvent, bacnetPanelEventConditionalEventAcknowledged=bacnetPanelEventConditionalEventAcknowledged, bacnetAuditSimpleEvent=bacnetAuditSimpleEvent, areas=areas, functionKey=functionKey, bacnetHvacConditionalEventAcknowledged=bacnetHvacConditionalEventAcknowledged, deviceTimePresent=deviceTimePresent, presentvalue=presentvalue, n1FireConditionalEventAcknowledged=n1FireConditionalEventAcknowledged, bacnetFireInactiveConditionalEvent=bacnetFireInactiveConditionalEvent, firstName=firstName, n1FireInactiveConditionalEvent=n1FireInactiveConditionalEvent, unit=unit, opcQuality=opcQuality, n1FireSimpleEvent=n1FireSimpleEvent, bacnetPanelHWStatusConditionalEventAcknowledged=bacnetPanelHWStatusConditionalEventAcknowledged, facilityCode=facilityCode, opcAckRequiredText=opcAckRequiredText, originalTime=originalTime, issueLevel=issueLevel, n1ServicesConditionalEventAcknowledged=n1ServicesConditionalEventAcknowledged, bacnetPanelHWStatusInactiveConditionalEvent=bacnetPanelHWStatusInactiveConditionalEvent, bacnetInputPointStatusInactiveConditionalEvent=bacnetInputPointStatusInactiveConditionalEvent, vendorIdentifier=vendorIdentifier)
