#
# PySNMP MIB module PDN-MPE-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-MPE-FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
mpe_filter, = mibBuilder.importSymbols("PDN-HEADER-MIB", "mpe-filter")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, IpAddress, Gauge32, MibIdentifier, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ModuleIdentity, ObjectIdentity, Counter32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "IpAddress", "Gauge32", "MibIdentifier", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Counter32", "NotificationType", "Bits")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
mpeSysDevFilterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1))
mpeSysDevFilterMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 2))
mpeSysDevIpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1))
mpeSysDevIpFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1), )
if mibBuilder.loadTexts: mpeSysDevIpFilterConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterConfigTable.setDescription('This table allows the user to configure filtering information. Every filter is comprised of a number of rules(see SysDevRuleTable). When a filter is bound to an interface, all the rules of that particular filter apply to that particular interface. Also the same filter maybe bound to several interfaces. This table only allows us to configure information about a particular filter. this table is indexed by entPhysicalIndex and sysDevIpFilterName.')
mpeSysDevIpFilterConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "PDN-MPE-FILTER-MIB", "mpeSysDevIpFilterName"))
if mibBuilder.loadTexts: mpeSysDevIpFilterConfigTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterConfigTableEntry.setDescription('Describes a specific entry of the filter configuration table.')
mpeSysDevIpFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterName.setDescription('The value of this object corresponds directly to the name of the filter.')
mpeSysDevIpDefFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpDefFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpDefFilterAction.setDescription('The value of this object corresponds to the default action taken on a particular IP packet based on the filter rule. forward - the packet is forwarded discard - the packet is discarded. delete - the rule of a particular filter or the filter as a whole is deleted.')
mpeSysDevIpFilterNumOfDynamicRules = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpFilterNumOfDynamicRules.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterNumOfDynamicRules.setDescription('This object corresponds to the number of dynamic rules configured for this filter')
mpeSysDevIpFilterNumOfStaticRules = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpFilterNumOfStaticRules.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterNumOfStaticRules.setDescription('This object corresponds to the number of static rules configured for this filter')
mpeSysDevIpFilterRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpFilterRefCount.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRefCount.setDescription("This object corresponds to the number of references for this filter by the various interfaces of the system For Example if filter 'abc' is bound to two of the DSL interfaces as input filters. then the reference count for this filter is 2. if a filter 'def' is bound to the 10BaseT interface as both an input and an output filter. The reference count for this filter would be 2. Filters can be deleted from the system (by a user) only if the reference count equals 0")
mpeSysDevIpFilterTcpAckFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("noOp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterTcpAckFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterTcpAckFilterAction.setDescription('The value of this object corresponds to the default action taken on the first TCP ACK packet of the TCP connection. This object is not supported for MCC.')
mpeSysDevIpFilterDhcpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2), ("noOp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterDhcpFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterDhcpFilterAction.setDescription('The value of this object corresponds to the default action taken on the DHCP transaction messages. This object is not supported for mcc.')
mpeSysDevIpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRowStatus.setDescription('The object is used to add or delete a row from this table.')
mpeSysDevIpFilterRuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2), )
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleConfigTable.setDescription('This table allows the user to configure the rules of each IP filter. When a filter is bound to an interface, all the rules of that particular filter apply to that particular interface. Also, the same filter may be found to several interfaces. This table is indexed by entPhysicalIndex, sysDevIpFilterName and sysDevIpFilterRuleNumber.')
mpeSysDevIpFilterRuleConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "PDN-MPE-FILTER-MIB", "mpeSysDevIpRuleFilterName"), (0, "PDN-MPE-FILTER-MIB", "mpeSysDevIpFilterRuleNumber"))
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleConfigTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleConfigTableEntry.setDescription('Describes a specific entry of the filter rule configuration table.')
mpeSysDevIpRuleFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpRuleFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpRuleFilterName.setDescription('The value of this object corresponds directly to the name of the filter.')
mpeSysDevIpFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleNumber.setDescription('The value of this object corresponds directly to a rule within a particular filter. If the value of this object is 0, then the sets apply to the filter as a whole. For example one may want to delete the whole filter. for a get only the name of the filter is returned.')
mpeSysDevIpFilterRuleSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcAddress.setDescription('The value of this object corresponds directly to an source IP Address. This object could be set if IP packets need to be filtered based on where it is coming from. Setting this object to 0.0.0.0 disables source IP address comparison.')
mpeSysDevIpFilterRuleSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcAddrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcAddrMask.setDescription('The value of this object corresponds directly to an source IP Address Mask. The value of this object is bitwise anded with the source address within the IP packet and then compared with the mpeSysDevIPFilterSrcAddress.')
mpeSysDevIpFilterRuleSrcAddrCompEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("noOp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcAddrCompEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcAddrCompEnable.setDescription('This object enables or disables the source address comparison. It is not supported for MCC.')
mpeSysDevIpFilterRuleSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcPortNum.setDescription('The UDP or TCP port number of the source on which this filter is applied.')
mpeSysDevIpFilterRuleMaxSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleMaxSrcPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleMaxSrcPortNum.setDescription('The maximum UDP or TCP port number of the source on which this filter is applied. This object is valid only if the source comparison type is in-range or out-range')
mpeSysDevIpFilterRuleSrcCompType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("neq", 3), ("gt", 4), ("lt", 5), ("inRange", 6), ("outRange", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcCompType.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleSrcCompType.setDescription('The value of this object corresponds to the type of comparison which is to be made for source based filtering for the particular rule of the filter. none - no comparison is to be made. eq - equal to neq - not equal to gt - greater than lt - less than inRange - the source port number of the TCP or UDP packet is within a specified range. outRange - the source port number of the TCP or UDP packet lies outside a specified range.')
mpeSysDevIpFilterRuleDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestAddress.setDescription('The value of this object corresponds directly to an destination IP Address. This object could be set if IP packets need to be filtered based on where it is going to.')
mpeSysDevIpFilterRuleDestAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestAddrMask.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestAddrMask.setDescription('The value of this object corresponds directly to an destination IP Address Mask. The value of this object is bitwise anded with the destination address within the IP packet and then compared with the mpeSysDevIPFilterRuleDestAddress')
mpeSysDevIpFilterRuleDestAddrCompEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("noOp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestAddrCompEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestAddrCompEnable.setDescription('This object enables or disables the destination address comparison. It is not supported for MCC.')
mpeSysDevIpFilterRuleDestPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestPortNum.setDescription('The UDP or TCP port number of the destination on which this filter is applied')
mpeSysDevIpFilterRuleMaxDestPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleMaxDestPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleMaxDestPortNum.setDescription('The maximum UDP or TCP port number of the destination on which this filter is applied. This object is valid only if the destination comparison type is in-range or out-range')
mpeSysDevIpFilterRuleDestCompType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("eq", 2), ("neq", 3), ("gt", 4), ("lt", 5), ("inRange", 6), ("outRange", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestCompType.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleDestCompType.setDescription('The value of this object corresponds to the type of comparison which is to be made for destination based filtering for the particular rule of the filter. none - no comparison is to be made. eq - equal to neq - not equal to gt - greater than lt - less than inRange - the source port number of the TCP or UDP packet is within a specified range. outRange - the source port number of the TCP or UDP packet lies outside a specified range.')
mpeSysDevIpFilterRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleType.setDescription('The value of this object corresponds to the type of type of rule configured static - This indicates that the rule was configured by an NMS either by SNMP, console or using telnet dynamic - this indicates that the rule was configured by the the system for end-users who have obtaimed an IP address using the DHCP protocol.')
mpeSysDevIpFilterRuleProtocolTypeUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleProtocolTypeUdp.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleProtocolTypeUdp.setDescription('The value of this object corresponds to the action taken on a particular UDP packet based on the source/ destination port comparison rule.')
mpeSysDevIpFilterRuleProtocolTypeTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleProtocolTypeTcp.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleProtocolTypeTcp.setDescription('The value of this object corresponds to the action taken on a particular TCP packet bases on the source/ destination port comparison rule.')
mpeSysDevIpFilterRuleProtocolTypeIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleProtocolTypeIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleProtocolTypeIcmp.setDescription('The value of this object corresponds to the action taken on a particular ICMP packet bases on the protocol type comparison rule.')
mpeSysDevIpFilterRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 2, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevIpFilterRuleRowStatus.setDescription('The object is used to add or delete a row from this table.')
mpeSysDevMaxNumOfIpFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 3), )
if mibBuilder.loadTexts: mpeSysDevMaxNumOfIpFiltersTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevMaxNumOfIpFiltersTable.setDescription('This table contains the maximum number of IP filters supported on a device. It is indexed by entPhysicalIndex.')
mpeSysDevMaxNumOfIpFiltersTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: mpeSysDevMaxNumOfIpFiltersTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevMaxNumOfIpFiltersTableEntry.setDescription('Describes a specific entry of the max number of filters table.')
mpeSysDevMaxNumOfInputIpFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevMaxNumOfInputIpFilters.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevMaxNumOfInputIpFilters.setDescription('The value of this object corresponds directly to the max number of input IP filters supported by each device.')
mpeSysDevMaxNumOfOutputIpFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 12, 23, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpeSysDevMaxNumOfOutputIpFilters.setStatus('mandatory')
if mibBuilder.loadTexts: mpeSysDevMaxNumOfOutputIpFilters.setDescription('The value of this object corresponds directly to the max number of Output IP filters supported by each device.')
mibBuilder.exportSymbols("PDN-MPE-FILTER-MIB", mpeSysDevIpFilterRuleConfigTableEntry=mpeSysDevIpFilterRuleConfigTableEntry, mpeSysDevIpFilterRuleSrcCompType=mpeSysDevIpFilterRuleSrcCompType, mpeSysDevIpFilter=mpeSysDevIpFilter, mpeSysDevIpFilterRuleProtocolTypeTcp=mpeSysDevIpFilterRuleProtocolTypeTcp, mpeSysDevMaxNumOfInputIpFilters=mpeSysDevMaxNumOfInputIpFilters, mpeSysDevIpFilterRuleDestAddress=mpeSysDevIpFilterRuleDestAddress, mpeSysDevIpFilterConfigTableEntry=mpeSysDevIpFilterConfigTableEntry, mpeSysDevIpFilterNumOfDynamicRules=mpeSysDevIpFilterNumOfDynamicRules, mpeSysDevIpFilterRuleSrcAddrMask=mpeSysDevIpFilterRuleSrcAddrMask, mpeSysDevIpFilterRuleRowStatus=mpeSysDevIpFilterRuleRowStatus, mpeSysDevIpFilterRuleProtocolTypeUdp=mpeSysDevIpFilterRuleProtocolTypeUdp, mpeSysDevMaxNumOfIpFiltersTable=mpeSysDevMaxNumOfIpFiltersTable, mpeSysDevIpFilterRowStatus=mpeSysDevIpFilterRowStatus, mpeSysDevIpFilterRuleType=mpeSysDevIpFilterRuleType, mpeSysDevIpFilterDhcpFilterAction=mpeSysDevIpFilterDhcpFilterAction, mpeSysDevIpFilterRuleNumber=mpeSysDevIpFilterRuleNumber, mpeSysDevIpFilterRuleMaxDestPortNum=mpeSysDevIpFilterRuleMaxDestPortNum, mpeSysDevFilterMIBTraps=mpeSysDevFilterMIBTraps, mpeSysDevFilterMIBObjects=mpeSysDevFilterMIBObjects, mpeSysDevIpFilterRuleSrcAddress=mpeSysDevIpFilterRuleSrcAddress, mpeSysDevIpFilterRuleDestAddrCompEnable=mpeSysDevIpFilterRuleDestAddrCompEnable, mpeSysDevIpFilterConfigTable=mpeSysDevIpFilterConfigTable, mpeSysDevIpFilterRuleSrcPortNum=mpeSysDevIpFilterRuleSrcPortNum, mpeSysDevIpDefFilterAction=mpeSysDevIpDefFilterAction, mpeSysDevIpFilterRuleMaxSrcPortNum=mpeSysDevIpFilterRuleMaxSrcPortNum, mpeSysDevIpFilterRuleDestAddrMask=mpeSysDevIpFilterRuleDestAddrMask, mpeSysDevIpFilterRuleProtocolTypeIcmp=mpeSysDevIpFilterRuleProtocolTypeIcmp, mpeSysDevMaxNumOfOutputIpFilters=mpeSysDevMaxNumOfOutputIpFilters, mpeSysDevIpFilterRuleDestPortNum=mpeSysDevIpFilterRuleDestPortNum, mpeSysDevIpFilterRuleDestCompType=mpeSysDevIpFilterRuleDestCompType, mpeSysDevIpFilterNumOfStaticRules=mpeSysDevIpFilterNumOfStaticRules, mpeSysDevIpFilterName=mpeSysDevIpFilterName, mpeSysDevIpFilterRuleConfigTable=mpeSysDevIpFilterRuleConfigTable, mpeSysDevMaxNumOfIpFiltersTableEntry=mpeSysDevMaxNumOfIpFiltersTableEntry, mpeSysDevIpFilterTcpAckFilterAction=mpeSysDevIpFilterTcpAckFilterAction, mpeSysDevIpRuleFilterName=mpeSysDevIpRuleFilterName, mpeSysDevIpFilterRuleSrcAddrCompEnable=mpeSysDevIpFilterRuleSrcAddrCompEnable, mpeSysDevIpFilterRefCount=mpeSysDevIpFilterRefCount)
