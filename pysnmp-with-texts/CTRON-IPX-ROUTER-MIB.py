#
# PySNMP MIB module CTRON-IPX-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-IPX-ROUTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
nwRtrProtoSuites, = mibBuilder.importSymbols("ROUTER-OIDS", "nwRtrProtoSuites")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, Integer32, Counter64, NotificationType, ObjectIdentity, iso, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
nwIpxRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2))
nwIpxMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 1))
nwIpxComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2))
nwIpxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1))
nwIpxForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2))
nwIpxTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4))
nwIpxFib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5))
nwIpxEndSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6))
nwIpxAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7))
nwIpxFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 8))
nwIpxRedirector = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9))
nwIpxEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10))
nwIpxWorkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 11))
nwIpxSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 1))
nwIpxSysAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 2))
nwIpxFwdSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1))
nwIpxFwdInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2))
nwIpxFwdCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1))
nwIpxFwdIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1))
nwIpxFwdIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2))
nwIpxDistanceVector = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1))
nwIpxLinkState = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 2))
nwIpxRip = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1))
nwIpxSap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2))
nwIpxRipSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1))
nwIpxRipInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2))
nwIpxRipDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3))
nwIpxRipFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 4))
nwIpxRipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1))
nwIpxRipCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2))
nwIpxRipIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1))
nwIpxRipIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2))
nwIpxSapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1))
nwIpxSapInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2))
nwIpxSapServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3))
nwIpxSapFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 4))
nwIpxSapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1))
nwIpxSapCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2))
nwIpxSapIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1))
nwIpxSapIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2))
nwIpxNlsp = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 2, 1))
nwIpxHostsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 1))
nwIpxHostsInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 2))
nwIpxHostsToMedia = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3))
nwIpxNetBIOS = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1))
nwIpxBroadcast = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2))
nwIpxEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3))
nwIpxNetBIOSSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1))
nwIpxNetBIOSInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2))
nwIpxNetBIOSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 1))
nwIpxNetBIOSCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2))
nwIpxNetBIOSIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1))
nwIpxNetBIOSIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2))
nwIpxBroadcastSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1))
nwIpxBroadcastInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2))
nwIpxBroadcastConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 1))
nwIpxBroadcastCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2))
nwIpxBroadcastIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1))
nwIpxBroadcastIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2))
nwIpxEchoSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1))
nwIpxEchoInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2))
nwIpxEchoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 1))
nwIpxEchoCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2))
nwIpxEchoIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1))
nwIpxEchoIfCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2))
nwIpxEventLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 1))
nwIpxEventLogFilterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2))
nwIpxEventLogTable = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3))
class IpxAddress(OctetString):
    pass

nwIpxMibRevText = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxMibRevText.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxMibRevText.setDescription('Indicates the current revision level of the IPX MIB in textual format.')
nwIpxSysRouterId = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 1, 1), IpxAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSysRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSysRouterId.setDescription('The IPX Address used to uniquely identify the host (device) running IPX Routing Services. The value of nwIpxSysRouterId is equal to the highest IPX address assigned in the IPX Address Table.')
nwIpxSysAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSysAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSysAdminStatus.setDescription('Sets the administrative state of IPX Routing Services system-wide. Enabled (3) causes IPX Routing Services to become active on all router ports configured and enabled for IPX Routing Services. Disabled (2) causes IPX routing services to become inactive system-wide.')
nwIpxSysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSysOperStatus.setDescription('Indicates the operating condition of IPX Routing Services system-wide. The value of nwIpxSysOperStatus indicates any problem with your IPX Routing Services configuration. A value of 6 indicates that regardless of the value of nwIpxSysAdminStatus, IPX Routing Services is not operating because of an invalid configuration.')
nwIpxSysAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSysAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSysAdminReset.setDescription('Resets IPX Routing Services system-wide. Reset (2) forces a restart of IPX Routing Services without a graceful shutdown on any active router ports and without affecting any other routing services.')
nwIpxSysOperationalTimel = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSysOperationalTimel.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSysOperationalTimel.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxSysOperStatus has been in its current administrative state.')
nwIpxSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSysVersion.setDescription('Indicates the current revision level of the IPX Routing Services firmware in textual format.')
nwIpxFwdCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrAdminStatus.setDescription('Sets the administrative state of the aggregate (system-wide) IPX packet and byte counters. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwIpxFwdCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrReset.setDescription('Resets the aggregate (system-wide) IPX packet and byte counters. Reset (2) resets the IPX aggregate counters to 0. nwIpxFwdCtrOperationalTime is also reset to 0.')
nwIpxFwdCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxFwdCtrAdminStatus has been in the current state.')
nwIpxFwdCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrInPkts.setDescription('Indicates the total number of IPX packets that have been received, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrOutPkts.setDescription('Indicates the total number of IPX packets that have been transmitted, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrFwdPkts.setDescription('Indicates the total number of IPX packets that have been forwarded, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrFilteredPkts.setDescription('Indicates the total number of IPX packets that have been administratively filtered, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrDiscardPkts.setDescription('Indicates the total number of IPX packets that have been discarded, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrAddrErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrAddrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrAddrErrPkts.setDescription('Indicates the total number of IPX packets that have been discarded, system-wide, during nwIpxFwdCtrOperationalTime, because of addressing errors in the IPX header.')
nwIpxFwdCtrLenErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrLenErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrLenErrPkts.setDescription('Indicates the total number of IPX packets that have been discarded, system-wide, during nwIpxFwdCtrOperationalTime, because an invalid packet length is contained in the IPX header.')
nwIpxFwdCtrHdrErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHdrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHdrErrPkts.setDescription('Indicates the total number of IPX packets that have been discarded, system-wide, during nwIpxFwdCtrOperationalTime, because of an invalid IPX header.')
nwIpxFwdCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrInBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been received, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrOutBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been transmitted, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrFwdBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrFwdBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been forwarded, system-wide, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been administratively filtered, system-wide, during nwIpxFwd-CtrOperationalTime.')
nwIpxFwdCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrDiscardBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been discarded, system-wide during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrHostInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHostInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHostInPkts.setDescription('Indicates the total number of IPX packets that have been successfully delivered to the local host, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrHostOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHostOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHostOutPkts.setDescription('Indicates the total number of IPX packets that have been transmitted by the local host, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrHostDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHostDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHostDiscardPkts.setDescription('Indicates the total number of IPX packets that have been discarded by the local host, during nwIpxFwdCtrOperationalTime, due to a lack of host resources.')
nwIpxFwdCtrHostInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHostInBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been received by the local host, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrHostOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHostOutBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been transmitted by the local host, during nwIpxFwdCtrOperationalTime.')
nwIpxFwdCtrHostDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdCtrHostDiscardBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been discarded by the local host, during nwIpxFwdCtrOperationalTime due to a lack of host resources.')
nwIpxFwdIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nwIpxFwdIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfTable.setDescription('This table contains an entry for each router port. This table is indexed by nwIpxFwdIfIndex, which indicates the value of MIB2 ifIndex, which identifies the router port for which the entry exists.')
nwIpxFwdIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxFwdIfIndex"))
if mibBuilder.loadTexts: nwIpxFwdIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfEntry.setDescription('Each entry specifies the IPX Routing Services configuration for the router port for which the entry exists.')
nwIpxFwdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxFwdIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfAdminStatus.setDescription('Sets the administrative state of IPX Routing Services on the router port for which the entry exists. Enabled (3) causes IPX Routing Services to become active. Disabled (2) causes it to become inactive.')
nwIpxFwdIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfOperStatus.setDescription('Indicates the current operating condition of IPX Routing Services on the router port for which the entry exists. The value of nwIpxFwdIfOperStatus indicates any problem with the configuration of IPX Routing Services on the router port. A value of 6 indicates that regardless of the state of nwIpxFwdIfAdminStatus IPX Routing Services is not operating because of an invalid port-level configuration.')
nwIpxFwdIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxFwdIfOperStatus has been in its current state.')
nwIpxFwdIfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3))).clone('delete')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfControl.setDescription('This object does not apply to this protocol. It is a common object inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwIpxFwdIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 6), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfMtu.setDescription('Specifies the Maximum Transmission Unit (MTU) for IPX packets on the router port for which the entry exists. This includes the IPX header and data but does not include framing.')
nwIpxFwdIfForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfForwarding.setDescription('Controls forwarding of IPX packets on the router port for which the entry exists. Enabled (3) causes IPX packets to be forwarded. Disabled (2) prevents IPX packets from being forwarded.')
nwIpxFwdIfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("snap", 3), ("i8022", 4), ("novell", 6), ("nativewan", 8), ("encapenet", 9), ("encapenet8022", 10), ("encapenetsnap", 11), ("encapenetnovell", 12), ("encaptr8022", 13), ("encaptrsnap", 14), ("encapfddi8022", 15), ("encapfddisnap", 16), ("canonical", 17))).clone('i8022')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfFrameType.setDescription('Specifies the framing type for IPX packets forwarded on the router port for which the entry exists. Some frame types are valid for specific media types. The comments reflect those valid media types.')
nwIpxFwdIfAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfAclIdentifier.setDescription('Specifies the Access Control ID of the Access Control List in effect for IPX packets being routed on the router port for which the entry exists. A value of 0 indicates that no Access Control List is in effect.')
nwIpxFwdIfAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfAclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfAclStatus.setDescription('Controls the operation of any Access Control List configured for IPX traffic on the router port for which the entry exists. Enabled (3) applies the Access Control List indicated by the value of nwIpxFwdIfAclIdentifier to all IPX traffic being routed to the port. Disabled (2) prevents the Access Control List from being applied.')
nwIpxFwdIfCacheControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfCacheControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCacheControl.setDescription('Controls IPX Address caching on the router port for which the entry exists. When IPX Address caching is enabled, IPX Addresses used for address validation, filtering, and forwarding are stored in the cache. This cache is checked first before doing a full route table lookup, which speeds up the switching process. Enabled (3) turns on IPX Address caching. Disabled (2) turns it off.')
nwIpxFwdIfCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCacheEntries.setDescription('Indicates the number of entries in the IPX Address cache on the router port for which the entry exists.')
nwIpxFwdIfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCacheHits.setDescription('Indicates the number of times entries in the IPX Adddress cache have been used to provide the IPX Address required to validate, filter, or forward an IPX packet on the router port.')
nwIpxFwdIfCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCacheMisses.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCacheMisses.setDescription('Indicates the number of times the IPX Address required to validate, filter, or forward an IPX packet on the router port was not found in the IPX Address cache.')
nwIpxAddressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: nwIpxAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAddressTable.setDescription('This table contains an entry for each Novell network address assigned to each router port.')
nwIpxAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxAddrIfIndex"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxAddrIfAddress"))
if mibBuilder.loadTexts: nwIpxAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAddrEntry.setDescription('Each entry specifies the Novell network addressing information for the logical Novll network for which the entry exists.')
nwIpxAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxAddrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAddrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxAddrIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 2), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxAddrIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAddrIfAddress.setDescription('This is the Novell network number assigned to the logical Novell network for which the entry exists. The IpxAddress consists of a network number of 4 octets.')
nwIpxAddrIfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAddrIfControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAddrIfControl.setDescription('Set this object to add or delete this entry from the table.')
nwIpxAddrIfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("secondary", 3))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAddrIfAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAddrIfAddrType.setDescription('Specifies whether the Novell network number, nwIpxAddrIfAddress, is the primary or secondary address for the router port.')
nwIpxFwdIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nwIpxFwdIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrTable.setDescription('This table contains an entry for each router port configured and enabled for IPX Routing Services.')
nwIpxFwdIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxFwdIfCtrIfIndex"))
if mibBuilder.loadTexts: nwIpxFwdIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrEntry.setDescription('Each entry indicates the current packet and byte count of IPX packets on the port for which the entry exists.')
nwIpxFwdIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxFwdIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrAdminStatus.setDescription('Sets the administrative state of the per-port IPX packet and byte counters on the router port for which the entry exists. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwIpxFwdIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFwdIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrReset.setDescription('Resets the per-port IPX packet and byte counters on the router port for which this entry exists. Reset (2) resets the counters to 0. nwIpxFwdIfCtrOperationalTime is also reset to 0.')
nwIpxFwdIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxFwdIfCtrAdminStatus has been in the current state.')
nwIpxFwdIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrInPkts.setDescription('Indicates the total number of IPX packets that have been received, during nwIpxFwdIfCtrOperationaltime, on the router port for which the entry exists.')
nwIpxFwdIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrOutPkts.setDescription('Indicates the total number of IPX packets that have been transmitted, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrFwdPkts.setDescription('Indicates the total number of IPX packets that have been forwarded, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrFilteredPkts.setDescription('Indicates the total number of IPX packets that have been administratively filtered, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrDiscardPkts.setDescription('Indicates the total number of IPX packets that have been discarded (dropped), during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrAddrErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrAddrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrAddrErrPkts.setDescription('Indicates the total number of IPX packets that have been discarded because of IPX addressing errors in the IPX header, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrLenErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrLenErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrLenErrPkts.setDescription('Indicates the total number of IPX packets that have been discarded because an invalid packet length was contained in the IPX header, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrHdrErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHdrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHdrErrPkts.setDescription('Indicates the total number of IPX packets that have been discarded because of an invalid IPX header, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrInBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been received, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrOutBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been transmitted, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrFwdBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been forwarded, during nwIpxFwdCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX packets administratively filtered, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been discarded, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrHostInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostInPkts.setDescription('Indicates the total number of IPX packets that have been successfully delivered to the local host, during nwIpxFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxFwdIfCtrHostOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostOutPkts.setDescription('Indicates the total number of IPX packets that have been forwarded by the local host, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrHostDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostDiscardPkts.setDescription('Indicates the total number of IPX packets that have been discarded by the local host, due to a lack of host resources, during nwIpxFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxFwdIfCtrHostInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostInBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been successfully delivered to the local host, during nwIpxFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxFwdIfCtrHostOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostOutBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been transmitted by the local host, during nwIpxFwdIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxFwdIfCtrHostDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFwdIfCtrHostDiscardBytes.setDescription('Indicates the total number of bytes in the IPX packets that have been discarded by the local host, due to a lack of host resources that were received, during nwIpxFwdIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxRipAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipAdminStatus.setDescription('Sets the administrative state of the IPX-RIP routing protocol system-wide. Enabled (3) causes IPX-RIP to become active on all router ports configured and enabled for IPX Routing Services. Disabled (2) causes IPX-RIP to become inactive.')
nwIpxRipOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipOperStatus.setDescription('Indicates the current operating condition of IPX-RIP system-wide. The value of nwIpxRipOperStatus indicates any problem with your IPX-RIP configuration. A value of 6 indicates that regardless of the value of nwIpxRipAdminStatus, IPX-RIP is not operating because of an invalid configuration.')
nwIpxRipAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipAdminReset.setDescription('Resets the IPX-RIP routing protocol. Reset (2) forces a system-wide restart of IPX-RIP, without a graceful shutdown on any active router ports.')
nwIpxRipOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxRipOperStatus has been in its current state.')
nwIpxRipVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipVersion.setDescription('Indicates the current revision level of the IPX-RIP routing protocol firmware, in textual format.')
nwIpxRipStackSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 6), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipStackSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipStackSize.setDescription('Specifies the stack size of the IPX-RIP routing protocol thread. In order for a change of this value to take effect, the protocol (nwIpxRipAdminReset), IPX Routing Services (nwIpxSysAdminReset), or the device running Routing Services must be reset.')
nwIpxRipThreadPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 7), Integer32().clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipThreadPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipThreadPriority.setDescription('Specifies the run-time execution priority of the IPX-RIP routing protocol thread. In order for a change of this value to take effect, IPX-RIP (nwIpxRipAdminReset), IPX Routing Services (nwIpxAdminReset), or the device running Routing services must be reset.')
nwIpxRipDatabaseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 8), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipDatabaseThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipDatabaseThreshold.setDescription('Specifies the run-time maximum number of IPX-RIP entries that can be held in the IPX-RIP route table.')
nwIpxRipAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 9), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipAgeOut.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipAgeOut.setDescription('Specifies the amount of time, in seconds, that an inactive route table entry remains in the IPX-RIP route table before it is aged-out.')
nwIpxRipHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 1, 10), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipHoldDown.setDescription('Specifies the amount of time, in seconds, to wait before removing an entry from the route table, after receiving an update indicating that the destination has become unreachable. All routers exchanging IPX-RIP information must have the same hold down time. The time must be long enough to allow all participating routers to receive the same update.')
nwIpxRipCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrAdminStatus.setDescription('Sets the administrative state of the aggregate system-wide IPX-RIP packet and byte counters. Enabled (3) causes these counters to become active on all router ports. Disabled (2) causes these counters to become inactive.')
nwIpxRipCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrReset.setDescription('Resets the aggregate system-wide IPX-RIP protocol packet and byte counters. Reset (2) resets the IPX-RIP aggregate counters to 0. nwIpxRipCtrOperationalTime is also reset to 0.')
nwIpxRipCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxRipCtrAdminStatus has been in the current state.')
nwIpxRipCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrInPkts.setDescription('Indicates the total number of IPX-RIP packets that have been received, system-wide, during nwIpxRipCtrOperationalTime.')
nwIpxRipCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrOutPkts.setDescription('Indicates the total number of IPX-RIP packets that have been transmitted, system-wide, during nwIpxRipCtrOperationalTime.')
nwIpxRipCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrFilteredPkts.setDescription('Indicates the total number of IPX-RIP packets that have been administratively filtered, system-wide, during` nwIpxRipCtrOperationalTime.')
nwIpxRipCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrDiscardPkts.setDescription('Indicates the total number of IPX-RIP packets that have been discarded, system-wide, during nwIpxRipCtrOperationalTime.')
nwIpxRipCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrInBytes.setDescription('Indicates the total number of bytes in the IPX-RIP packets that have been received, system-wide, during nwIpxRipCtrOperationalTime.')
nwIpxRipCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrOutBytes.setDescription('Indicates the total number of bytes in the IPX-RIP packets that have been transmitted, system-wide, during nwIpxRipCtrOperationalTime.')
nwIpxRipCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX-RIP packets that have been administratively filtered, system-wide, during nwIpxRipCtrOperationalTime.')
nwIpxRipCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipCtrDiscardBytes.setDescription('Indicates the total number of bytes in the IPX-RIP packets that have been discarded, during nwIpxRipCtrOperationalTime.')
nwIpxRipIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: nwIpxRipIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfTable.setDescription('This table contains an entry for each router port. Each entry can contain different values, allowing the routing protocol configuration to vary from router port to router port. This table is indexed by nwIpxRipIfIndex, which indicates the value of MIB 2 ifindex, which identifies the router port for which each entry exists.')
nwIpxRipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxRipIfIndex"))
if mibBuilder.loadTexts: nwIpxRipIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfEntry.setDescription('Each entry contains the IPX-RIP configuration for the router port for which the entry exists.')
nwIpxRipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxRipIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfAdminStatus.setDescription('Sets the administrative state of the IPX-RIP routing protocol on the router port for which the entry exists. Enabled (3) causes IPX-RIP to become active on the router port. Disabled (2) causes RIP to become inactive.')
nwIpxRipIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfOperStatus.setDescription('Indicates the current operating condition of the IPX-RIP routing protocol on the router port for which the entry exists. The value of nwIpxRipIfOperStatus indicates any problem with your IPX-RIP configuration on the router port. A value of 6 indicates that regardless of the value of nwIpxRipIfAdminStatus, IPX-RIP is not operating on the router port because of an invalid configuration.')
nwIpxRipIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxRipIfOperStatus has been in its current state.')
nwIpxRipIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfVersion.setDescription('Indicates the revision level of the IPX-RIP routing protocol in textual format.')
nwIpxRipIfAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 6), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfAdvertisement.setDescription('Sets the interval, in seconds, at which IPX-RIP advertises its route table on the router port for which the entry exists. Change this value to cause IPX-RIP to advertise its route table more or less frequently.')
nwIpxRipIfFloodDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 7), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfFloodDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfFloodDelay.setDescription('Specifies the length of time, in seconds, that the IPX-RIP routing protocol will wait after discovering that a directly connected route has gone down, before flooding updates (triggered updates) on the router port for which the entry exists. A value of 0 specifies that if a directly connected route goes down, updates will be sent immediately.')
nwIpxRipIfRequestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 8), Integer32().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfRequestDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfRequestDelay.setDescription('Specifies the length of time, in seconds, that the IPX-RIP routing protocol will wait after receiving a route request packet before sending a response on the router port for which the entry exists. A value of 0 specifies that if a route request packet is received on the port, a response will be sent immediately.')
nwIpxRipIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfPriority.setDescription('This object does not apply to this protocol. It is a common object, inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwIpxRipIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 10), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfHelloTimer.setDescription('This object does not apply to this protocol. It is a common object, inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwIpxRipIfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfSplitHorizon.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfSplitHorizon.setDescription('Controls the operation of Split Horizon on the router port for which the entry exists. When Split Horizon is enabled, IPX-RIP keeps track of which router port route information is received on, and prevents information about a route from being sent back out the same router port it was received on.')
nwIpxRipIfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfPoisonReverse.setDescription('Controls the operation of Poison Reverse on the router port for which the entry exists. When Poison Reverse is enabled, IPX-RIP advertises any downed route as unreachable during the period of time that it must wait (nwIpxRipHoldDown) before removing the route from the route table.')
nwIpxRipIfSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfSnooping.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfSnooping.setDescription('Controls the operation of IPX-RIP Snooping on the router port. When RIP Snooping is enabled the IPX-RIP routing protocol operates in passive mode, so that it receives route information, builds and maintains a route table, but does not advertise or send updates on the router port for which the entry exists.')
nwIpxRipIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bma", 2), ("nbma", 3))).clone('bma')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfType.setDescription('Indicates whether the directly connected network segment does or does not support broadcast media access. If broadcast media access is supported, IPX-RIP advertisements are sent out one broadcast packet per router port. If broadcast media access is not supported, IPX-RIP advertisements are sent to each neighbor directly.')
nwIpxRipIfXmitCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfXmitCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfXmitCost.setDescription('This object does not apply to this protocol. It is a common object, inherited from the common MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwIpxRipIfAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfAclIdentifier.setDescription('Specifies the Access Control ID of the access control list in effect for IPX-RIP routing protocol packets on the router port for which the entry exists. A value of 0 indicates that there is no access control list in effect for IPX-RIP routing protocol packets on the router port.')
nwIpxRipIfAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfAclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfAclStatus.setDescription('Controls the operation of the access control list identified by nwIpxRipIfAclIdentifier. Enabled (3) applies the access control list to all IPX-RIP routing protocol packet traffic on the router port for which the entry exists. Disabled (2) prevents the access control list from being applied. ')
nwIpxRipIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: nwIpxRipIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrTable.setDescription('This table contains an entry for each router port.This table is indexed by nwIpxRipIfCtrIfIndex, which indicates the value of MIB2 ifindex, which indentifies the router port for which the entry exists.')
nwIpxRipIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxRipIfCtrIfIndex"))
if mibBuilder.loadTexts: nwIpxRipIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrEntry.setDescription('Each entry indicates the current packet and byte count of IPX-RIP routing protocol packets on the router port for which the entry exists.')
nwIpxRipIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxRipIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrAdminStatus.setDescription('Sets the administrative state of the per-port IPX-RIP packet and byte counters on the router port for which the entry exists. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwIpxRipIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxRipIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrReset.setDescription('Resets the per-port IPX-RIP packet and byte counters on the router port for which this entry exists. Reset (2) resets the counters to 0. nwIpxRipIfCtrOperationalTime is also reset to 0.')
nwIpxRipIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpRipIfCtrAdminStatus has been in the current state.')
nwIpxRipIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrInPkts.setDescription('Indicates the total number of IPX-RIP routing protocol packets that have been received, during nwIpxRipIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxRipIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrOutPkts.setDescription('Indicates the total number of IPX-RIP routing protocol packets that have been transmitted, during nwIpxRipIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxRipIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrFilteredPkts.setDescription('Indicates the total number of IPX-RIP routing protocol packets that have been administratively filtered, during nwIpxRipIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxRipIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrDiscardPkts.setDescription('Indicates the total number of IPX-RIP routing protocol packets that have been discarded, during nwIpxRipIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxRipIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrInBytes.setDescription('Indicates the total number of bytes in the IPX-RIP routing protocol packets that have been received, during nwIpxRipIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxRipIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrOutBytes.setDescription('Indicates the total number of bytes in the IPX-RIP routing protocol packets that have been transmitted, during nwIpxRipIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxRipIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX-RIP routing protocol packets that have been administratively filtered, during nwIpxRipIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxRipIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the IPX-RIP routing protocol packets that have been discarded, during nwIpRipIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxRipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: nwIpxRipRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRouteTable.setDescription('This table contains the IPX-RIP route table. This table contains an entry for each route learned through the IPX-RIP routing protocol. Only the best routes from this table are added to the IPX forwarding table to be used for packet switching.')
nwIpxRipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxRipRtNetId"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxRipRtIfIndex"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxRipRtSrcNode"))
if mibBuilder.loadTexts: nwIpxRipRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRouteEntry.setDescription('Each entry describes the IPX-RIP route to the destination network for which the entry exists.')
nwIpxRipRtNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 1), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtNetId.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtNetId.setDescription('This is the primary index into the IPX-RIP route table. This number indicates the Novell Network Number of the destination for which the entry exists. The IpxAddress consists of a network number of 4 octets')
nwIpxRipRtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtIfIndex.setDescription('This is a secondary index into the IPX-RIP route table. This number corresponds to the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxRipRtSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 3), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtSrcNode.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtSrcNode.setDescription('This is a secondary index into the RIP route table. This number indicates the MAC-layer address of the source router from which this route was learned. A value of 0.0.0.0.0.0 indicates that the source is on the network segment directly connected to the router port, nwIpxRipRtIfIndex.')
nwIpxRipRtHops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtHops.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtHops.setDescription('Indicates the number of hops required to reach the destination for which the entry exists.')
nwIpxRipRtTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtTicks.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtTicks.setDescription('Indicates the amount of time (number of Time Ticks) required to reach the destination for which the entry exists.')
nwIpxRipRtAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtAge.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtAge.setDescription('Indicates the amount of time, in seconds, since an update has been received for the route for which the entry exists.')
nwIpxRipRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtType.setDescription('Indicates whether the destination network is directly connected through the router port specified by nwIpxRipRtIndex, or is indirectly connected through another router, specified by nwIpxRipRtSrcNode.')
nwIpxRipRtFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxRipRtFlags.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxRipRtFlags.setDescription('Specifies properties of the IPX-RIP route. The bit mask is as follows: source-changed (1), best source (2), local-net (4), net-down (8), update-fib-only (16).')
nwIpxSapAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapAdminStatus.setDescription('Sets the administrative state of the SAP protocol system-wide. Enabled (3) causes SAP to become active on all router ports configured and enabled for IPX routing services. Disabled (2) causes the protocol to become inactive.')
nwIpxSapOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapOperStatus.setDescription('Indicates the current operating condition of the SAP protocol system-wide. The value of nwIpxSapOperStatus indicates any problem with your SAP configuration. A value of 6 indicates that regardless of the value of nwIpxSAPAdminStatus, the SAP protocol is not operating because of an invalid configuration.')
nwIpxSapAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapAdminReset.setDescription('Resets the SAP protocol. Reset (2) forces a system-wide restart of SAP, without a graceful shutdown on any active router ports.')
nwIpxSapOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxSapOperStatus, has been in its current state.')
nwIpxSapVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapVersion.setDescription('Indicates the current revision level of the SAP protocol firmware, in textual format.')
nwIpxSapStackSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 6), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapStackSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapStackSize.setDescription('Specifies the stack size of the SAP protocol thread. In order for a change to this value to take effect, the protocol (nwIpxSapAdminReset), IPX Routing Services (nwIpxSysAdminReset), or the device running Routing Services must be reset.')
nwIpxSapThreadPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 7), Integer32().clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapThreadPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapThreadPriority.setDescription('Specifies the run-time execution priority of the SAP protocol thread. In order for a change to this value to take effect, SAP (nwIpxSapAdminReset), IPX Routing Services (nwIpxAdminReset), or the device running Routing Services must be reset.')
nwIpxSapDatabaseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 8), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapDatabaseThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapDatabaseThreshold.setDescription('Specifies the run-time maximum number of entries that can be held in the SAP server table.')
nwIpxSapAgeOut = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 9), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapAgeOut.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapAgeOut.setDescription('Specifies the amount of time, in seconds, that an inactive server table entry remains in the SAP server table before it is aged out.')
nwIpxSapHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 1, 10), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapHoldDown.setDescription('Specifies the amount of time, in seconds, to wait before removing an entry from the SAP server table, after receiving an update indicating that the destination has become unreachable. All routers exchanging SAP information must have the same hold down time. The time must be long enough to allow all participating routers to receive the same update.')
nwIpxSapCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrAdminStatus.setDescription('Sets the administrative state of the aggregate (system-wide) SAP protocol packet and byte counters. Enabled (3) causes these counters to become active on all router ports. Disabled (2) causes these counters to become inactive.')
nwIpxSapCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrReset.setDescription('Resets the aggregate (system-wide) SAP protocol packet and byte counters. Reset (2) resets the SAP aggregate counters to 0. nwIpxSapCtrOperationalTime is also reset to 0.')
nwIpxSapCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxSapCtrAdminStatus, has been in the current state.')
nwIpxSapCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrInPkts.setDescription('Indicates the total number of SAP packets that have been received, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrOutPkts.setDescription('Indicates the total number of SAP packets that have been transmitted, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrFilteredPkts.setDescription('Indicates the total number of SAP packets that have been administratively filtered, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrDiscardPkts.setDescription('Indicates the total number of SAP packets that have been discarded, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrInBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been received, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrOutBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been transmitted, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrFilteredBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been administratively filtered, system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapCtrDiscardBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been discarded system-wide, during nwIpxSapCtrOperationalTime.')
nwIpxSapIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nwIpxSapIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfTable.setDescription('This table contains an entry for each router port. Each entry can contain different values, allowing the SAP configuration to vary from router port to router port. This table is indexed by nwIpxSapIfIndex, which indicates the value of MIB 2 ifindex, which identifies the router port for which each entry exists.')
nwIpxSapIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapIfIndex"))
if mibBuilder.loadTexts: nwIpxSapIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfEntry.setDescription('Each entry contains the SAP configuration for the router port for which the entry exists.')
nwIpxSapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxSapIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfAdminStatus.setDescription('Sets the administrative state of the SAP protocol on the router port for which the entry exists. Enabled (3) causes SAP to become active on the router port. Disabled (2) causes SAP to become inactive.')
nwIpxSapIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfOperStatus.setDescription('Indicates the current operating condition of the SAP protocol on the router port for which the entry exists. The value of nwIpxSapIfOperStatus indicates any problem with your SAP configuration on the router port. A value of 6 indicates that regardless of the value of nwIpxSapIfAdminStatus. SAP is not operating because of an invalid configuration.')
nwIpxSapIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxSapIfOperStatus has been in its current state.')
nwIpxSapIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfVersion.setDescription('Indicates the revision level of the SAP protocol in textual format.')
nwIpxSapIfAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 6), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfAdvertisement.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfAdvertisement.setDescription('Sets the interval, in seconds, at which SAP advertises its server table on the router port for which the entry exists. Change this value to cause SAP to advertise its server table more or less frequently.')
nwIpxSapIfFloodDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 7), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfFloodDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfFloodDelay.setDescription('Specifies the length of time, in seconds, that the SAP protocol will wait after discovering that a directly connected route has gone down, before flooding updates (triggered updates) on the router port for which the entry exists. A value of 0 specifies that if a directly connected route goes down, updates should be sent immediately .')
nwIpxSapIfRequestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfRequestDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfRequestDelay.setDescription('Specifies the length of time, in seconds, that the SAP protocol will wait after receiving a server request packet, before sending a response on the router port for which the entry exists. A value of 0 specifies that if a server request packet is received on the port, a response will be sent immediately.')
nwIpxSapIfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfPriority.setDescription('This object does not apply to this protocol. It is a common object, inherited from the MIB framework used to provide a management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwIpxSapIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 10), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfHelloTimer.setDescription('This object does not apply to this protocol. It is a common object, inherited from the MIB framework used to provide a management interface to all the Cabletron Routing Services protocol-specific MIBs.Setting this object has no effect.')
nwIpxSapIfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfSplitHorizon.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfSplitHorizon.setDescription('Controls the operation of Split Horizon on the router port for which the entry exists. When Split Horizon is enabled, SAP keeps track of which router port information is received on, and prevents information about a server from being sent back out the same router port it was received on.')
nwIpxSapIfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfPoisonReverse.setDescription('Controls the operation of Poison Reverse on the router port for which the entry exists. When Poison Reverse is enabled, SAP advertises any downed server as unreachable during the period of time that it must wait (nwIpxSapIfHoldDown) before removing the server from the server table.')
nwIpxSapIfSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfSnooping.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfSnooping.setDescription('Controls the operation of SAP Snooping on the router port. When SAP Snooping is enabled SAP operates in passive mode, so it receives service information, builds and maintains a server table, but does not advertise or send updates on the router port for which the entry exists. Enabled (3) turns on SAP Snooping. Disabled (2) turns off SAP Snooping.')
nwIpxSapIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bma", 2), ("nbma", 3))).clone('bma')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfType.setDescription('Indicates whether the directly connected network segment does or does not support broadcast media access. If broadcast media access is supported, SAP advertisements are sent out, one broadcast packet per router port. If broadcast media access is not supported, SAP advertisements are sent to each neighbor router directly.')
nwIpxSapIfXmitCost = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfXmitCost.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfXmitCost.setDescription('This object does not apply to this protocol. It is a common object, inherited from the MIB framework used to provide a common management interface to all the Cabletron Routing Services protocol-specific MIBs. Setting this object has no effect.')
nwIpxSapIfAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfAclIdentifier.setDescription('Specifies the Access Control List ID of the access control list in effect for SAP protocol packets on the router port for which the entry exists. A value of 0 indicates that there is no access control list in effect for SAP protocol packets on the router port for which the entry exists.')
nwIpxSapIfAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfAclStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfAclStatus.setDescription('Controls the operation of the access control list identified by nwIpxSapIfAclIdentifier. Enabled (3) causes the access control list to be applied to all SAP protocol packet traffic on the router port for which the entry exists. Disabled (2) prevents the access control list from being applied.')
nwIpxSapIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nwIpxSapIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrTable.setDescription('This table contains an entry for each router port. This table is indexed by nwIpxSapIfCtrIfIndex which indicates the value of MIB2 ifindex, which indentifies the router port for which the entry exists.')
nwIpxSapIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapIfCtrIfIndex"))
if mibBuilder.loadTexts: nwIpxSapIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrEntry.setDescription('Each entry indicates the current packet and byte count of SAP protocol packets on the router port for which the entry exists.')
nwIpxSapIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrIfIndex.setDescription('Indicates the value of the MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxSapIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrAdminStatus.setDescription('Sets the administrative state of the per-port SAP packet and byte counters on the router port for which this entry exists. Enabled (3) causes these counters to become active. Disabled (2) causes these counters to become inactive.')
nwIpxSapIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxSapIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrReset.setDescription('Resets the per-port SAP packet and byte counters on the router port for which the entry exists. Reset (2) resets the counters to 0. nwIpxSapIfCtrOperationalTime is also reset to 0.')
nwIpxSapIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxSapIfCtrAdminStatus has been in the current state.')
nwIpxSapIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrInPkts.setDescription('Indicates the total number of SAP protocol packets that have been received, during nwIpxSapIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxSapIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrOutPkts.setDescription('Indicates the total number of SAP packets that have been transmitted, during nwIpxSapIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxSapIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrFilteredPkts.setDescription('Indicates the total number of SAP packets that have been administratively filtered, during nwIpxSapIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxSapIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrDiscardPkts.setDescription('Indicates the total number of SAP packets that have been discarded, during nwIpxSapIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxSapIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrInBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been received, during nwIpxSapIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxSapIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrOutBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been transmitted, during nwIpxSapIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxSapIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been administratively filtered, during nwIpxSapIfCtrOperationalTime, on the router port for which the entry exists.')
nwIpxSapIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the SAP packets that have been discarded, during nwIpxSapIfCtrOperationalTime, that were received on the router port for which the entry exists.')
nwIpxSapServerIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1), )
if mibBuilder.loadTexts: nwIpxSapServerIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfTable.setDescription('The table contains the SAP server table. This table contains an entry for each service learned of through the SAP protocol.')
nwIpxSapServerIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapServerIfNetId"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapServerIfNode"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapServerIfSocket"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapServerIfServiceType"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapServerIfIfNum"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxSapServerIfSrcNode"))
if mibBuilder.loadTexts: nwIpxSapServerIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfEntry.setDescription('Each entry contains the SAP route information for the Novell server and router port for which the entry exists.')
nwIpxSapServerIfNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 1), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfNetId.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfNetId.setDescription('This is the primary index into the SAP server table. This number corresponds to the Novell Network Number of the server offering the service. The network number consists of 4 octets.')
nwIpxSapServerIfNode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfNode.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfNode.setDescription('This is a secondary index into the SAP Server Table. This is the MAC-layer address represented as an octetstring of the service offering the server for which the entry exists, represented as an octet string.')
nwIpxSapServerIfSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfSocket.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfSocket.setDescription('This is a secondary index into the SAP Server Table. This is the socket number of the server application for which the entry exists.')
nwIpxSapServerIfServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfServiceType.setDescription('This is a secondary index into the SAP Server Table. This is the service type of the server application for which the entry exists.')
nwIpxSapServerIfIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfIfNum.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port through which the service for which the entry exits is available.')
nwIpxSapServerIfSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfSrcNode.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfSrcNode.setDescription('This is the MAC-layer address of the neighbor router from which the service was learned about.')
nwIpxSapServerIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfName.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfName.setDescription('This is the name of the server offering the service for which the entry exists.')
nwIpxSapServerIfHops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfHops.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfHops.setDescription('Indicates the number of hops required to reach the server offering the service for which the entry exists.')
nwIpxSapServerIfAge = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfAge.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfAge.setDescription('Indicates the amount of time since a SAP update was last received for the server and service for which the entry exits.')
nwIpxSapServerIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfType.setDescription('Indicates whether the server is on a network that is directly connected through the router port for which the entry exists, or is indirectly connected through another router specified by the value of nwIpxSapServerIfSrcNode.')
nwIpxSapServerIfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 4, 1, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxSapServerIfFlags.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxSapServerIfFlags.setDescription('Specifies properties of the SAP service for which the entry exist. The bit mask is as follows: source-changed (1), best-source (2), not used (4), net-down (8), not used (16).')
nwIpxFibTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1), )
if mibBuilder.loadTexts: nwIpxFibTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibTable.setDescription('This table contains an entry describing each route being used to forward IPX traffic to each destination Novell network and node.')
nwIpxFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxFibNetId"))
if mibBuilder.loadTexts: nwIpxFibEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibEntry.setDescription('Each entry describes the route to the destination Novell network and node for which the entry exists.')
nwIpxFibNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 1), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxFibNetId.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibNetId.setDescription('Specifies the Novell Network Number of the destination for which the entry exists. The IpxAddress consists of four octets')
nwIpxFibHops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFibHops.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibHops.setDescription('Indicates the number of hops required to reach the destination for which the entry exists. It is considered as metric 1.')
nwIpxFibTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFibTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibTimeTicks.setDescription('Indicates the amount of time, indicated by the number of TimeTicks, required for a packet to reach the destination network for which the entry exists. It is considered as metric 2.')
nwIpxFibNextHopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFibNextHopIf.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibNextHopIf.setDescription('Indicates the router port through which the next hop node is available. Packets destined for the network specified by the value of nwIpxFibNetId will be forwarded on this port.')
nwIpxFibNextHopNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFibNextHopNet.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibNextHopNet.setDescription('Indicates the Novell Network Number portion of the fully formed next hop IPX Address of the next hop node.')
nwIpxFibNextHopNode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFibNextHopNode.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibNextHopNode.setDescription('Indicates the node portion of the fully formed next hop IPX Address.')
nwIpxFibRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("remote", 4))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxFibRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxFibRouteType.setDescription('Indicates the status of the route. A value of 3 indicates that the destination is on the network segment that is directly connected to the router port identified by nwIpxFibNextHopIf. A value of 4 indicates that the destination is on an indirectly connected network segment, which is reachable through the next hop router indicated by the value of nwIpxFibNextHopNodeId. A value of 2 indicates that the route is invalid.')
nwIpxAclValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxAclValidEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclValidEntries.setDescription('Indicates the number of valid entries that exist in the access control list table.')
nwIpxAclTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2), )
if mibBuilder.loadTexts: nwIpxAclTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclTable.setDescription('This table contains the access control list information for IPX traffic. This table contains entries, each of which allows packet forwarding between source/destination pairs to be permitted or denied. The list is identified by the Access Control List ID. Each list may contain multiple entries ordered by sequence number. When a particular access control list is searched, it is searched in sequence number order and the first match found ends the search. If no match if found, access defaults to permitted.')
nwIpxAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxAclIdentifier"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxAclSequence"))
if mibBuilder.loadTexts: nwIpxAclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclEntry.setDescription('Each entry contains IPX source/destination access information.')
nwIpxAclIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxAclIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclIdentifier.setDescription('This is the primary (major) index into the IPX access control list table. This value identifies the access control list by a unique identifier (at least 1) arbitrarily assigned by the user. All entries that have the same value for nwIpxAclIdentifier belong to the same access control list.')
nwIpxAclSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxAclSequence.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclSequence.setDescription('This is the secondary (minor) index into the IPX access control list table. This number corresponds to a sequence number used to order multiple entries within the same access control list.')
nwIpxAclPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permit", 3), ("deny", 4), ("permit-bidirectional", 5), ("deny-bidirectional", 6))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclPermission.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclPermission.setDescription('Specifies whether access is allowed or denied between the source and destination address pair. Note that source and destination are interchangeable when bi-directional control is selected. To remove an existing entry set nwIpxAclPermission to invalid (2). Invalid entries disappear after reboot.')
nwIpxAclMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxAclMatches.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclMatches.setDescription('Indicates the number of matches on this entry that have resulted in the permit/deny access restriction being applied as part of the forwarding process.')
nwIpxAclDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclDestNetNum.setDescription('Specifies the destination Novell Network Number used to compare for matches on the access control list. A 0 value is a wildcard which matches any Novell Network Number.')
nwIpxAclDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclDestNode.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclDestNode.setDescription('Specifies the MAC-layer address of the destination node (represented as an octet string), used to compare for matches on the access control list. A value 0 is a wildcard, which matches any node.')
nwIpxAclDestSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclDestSocket.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclDestSocket.setDescription('Specifies the socket number of the destination socket used to compare for matches on the access control list. A 0 value is a wildcard matching any socket.')
nwIpxAclSrcNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclSrcNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclSrcNetNum.setDescription('Specifies the Novell Network Number of the source Novell Network used to compare for matches on the access control list. A 0 value is a wildcard matching any Novell Network Number.')
nwIpxAclSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclSrcNode.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclSrcNode.setDescription('Specifies the MAC-layer address of the source node (represented as an octet string), used to compare for matches on the Access Control List. A 0 value is a wildcard matching any node.')
nwIpxAclSrcSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 7, 2, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxAclSrcSocket.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxAclSrcSocket.setDescription('Specifies the socket number of the source socket to compare for matches on the Access Control List. A 0 value is a wildcard matching any socket.')
nwIpxNetBIOSAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSAdminStatus.setDescription('Sets the administrative state of the NetBIOS Broadcast Redirector, system-wide. Enabled (3) causes the NetBios Broadcast Redirector to become active on any router port configured and enabled for IPX Routing Services. Disabled (2) causes the NetBIOS Broadcast Redirector to perform a graceful shut-down on any active IPX router port.')
nwIpxNetBIOSOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSOperStatus.setDescription('Indicates the current operating condition of the NetBIOS Broadcast Redirector, system-wide. ')
nwIpxNetBIOSAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSAdminReset.setDescription('Resets the NetBIOS Broadcast Redirector, system-wide. Reset (2) forces a restart of the NetBIOS Broadcast Redirector without a graceful shut-down on any active router port and without effecting any other router application.')
nwIpxNetBIOSOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxNetBiosOperStatus has been in the current state.')
nwIpxNetBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSVersion.setDescription('Indicates the current revision level of the NetBIOS Broadcast Redirector firmware, in textual format.')
nwIpxNetBIOSCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrAdminStatus.setDescription('Sets the administrative state of the aggregate (system-wide) NetBIOS broadcast packet and byte counters. Enabled (3) causes these counters to become active on all router port. Disabled (2) causes these counters to become inactive.')
nwIpxNetBIOSCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrReset.setDescription('Resets the aggregate (system-wide) NetBIOS broadcast packet and byte counters. Reset (2) resets the NetBIOS broadcast aggregate counters to 0. nwIpxNetBIOSCtrOperationalTime is also reset to 0.')
nwIpxNetBIOSCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrOperationalTime.setDescription('Indicates the elapsed time, in hundreds of a second, that the nwIpxNetBIOSCtrAdminStatus has been in the current state.')
nwIpxNetBIOSCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrInPkts.setDescription('Indicates the total number of NetBIOS broadcast packets that have been received, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrOutPkts.setDescription('Indicates the total number of NetBIOS broadcast packets that have been transmitted, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrFilteredPkts.setDescription('Indicates the total number of NetBIOS broadcast packets that have been administratively filtered, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrDiscardPkts.setDescription('Indicates the total number of NetBIOS broadcast packets that have been discarded, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrInBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been received, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrOutBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been transmitted, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrFilteredBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been administratively filtered, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSCtrDiscardBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been discarded, system-wide, during nwIpxNetBIOSCtrOperationalTime.')
nwIpxNetBIOSIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1, 1), )
if mibBuilder.loadTexts: nwIpxNetBIOSIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfTable.setDescription('This table contains an entry for each router port. Each entry can contain different values, allowing the NetBIOS Broadcast Redirector configuration to vary from router port to router port. This table is indexed by nwIpxNetBIOSIfIndex, which indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxNetBIOSIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxNetBIOSIfIndex"))
if mibBuilder.loadTexts: nwIpxNetBIOSIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfEntry.setDescription('Each entry contains the IPX NetBIOS broadcasting configuration for the router port for which the entry exists.')
nwIpxNetBIOSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfIndex.setDescription('Indicates the value in MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxNetBIOSIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfAdminStatus.setDescription('Sets the administrative state of IPX NetBIOS broadcasting on the router port for which the entry exists. Enabled (3) causes this router port to become active. Disabled (2) causes it to become inactive.')
nwIpxNetBIOSIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfOperStatus.setDescription('Indicates the current operating condition of IPX NetBIOS broadcasting on the IPX router port for which the entry exists.')
nwIpxNetBIOSIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that IPX NetBIOS broadcasting, nwIpxNetBIOSIfOperStatus, has been in its current state on the router port for which the entry exists.')
nwIpxNetBIOSIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1), )
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrTable.setDescription('This table contains the IPX NetBIOS packet and byte counters for each router port on this device.')
nwIpxNetBIOSIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxNetBIOSIfCtrIfIndex"))
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrEntry.setDescription('This is the primary index into the NetBIOS Interface Counter Table. This number corresponds to the index into the MIB 2 Interface Table which describes the router port for which this entry exists.')
nwIpxNetBIOSIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrIfIndex.setDescription('This is the primary index into the IPX NetBIOS Interface Counter Table. This number correspoonds to the index into the MIB 2 Interface Table which describes the router port for which the entry exists.')
nwIpxNetBIOSIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrAdminStatus.setDescription('Sets the administrative state of the IPX NetBIOS packet and bytes counters on the IPX router port for which the entry exists. Enabled (3) causes these counters to become active on the configured NetBIOS router port. Disabled (2) causes thes counters to become inactive on the configured NetBIOS router port.')
nwIpxNetBIOSIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrReset.setDescription('Resets the NetBIOS packet and bvyte counters on the router port for which the entry exists. Reset (2) resets the interface-specific counters to 0. nwIpxNetBIOSIfCtrOperationalTime is also reset to 0.')
nwIpxNetBIOSIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that the interface-specific NetBIOS packet and byte counters have been active on the router port for which the entry exists.')
nwIpxNetBIOSIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrInPkts.setDescription('Indicates the total number of NetBIOS packets that have been recieved, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxNetBIOSIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrOutPkts.setDescription('Indicates the total number of NetBIOS packets that have been transmitted, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationallTime.')
nwIpxNetBIOSIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrFilteredPkts.setDescription('Indicates the total number of NetBIOS packets that have been administratively filtered, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxNetBIOSIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrDiscardPkts.setDescription('Indicates the total number of NetBIOS packets that have been discarded, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxNetBIOSIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrInBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been recieved, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxNetBIOSIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrOutBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been transmitted, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxNetBIOSIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been administratively filtered, that were recieved on the router port for which the entry exists during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxNetBIOSIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 1, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxNetBIOSIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the NetBIOS packets that have been discarded, on the router port for which the entry exists, during nwIpxNetBIOSIfCtrOperationalTime.')
nwIpxBcastAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastAdminStatus.setDescription('Sets the administrative state of IPX Broadcast. Enabled (3) casuses IPX Broadcast to become active on any configured IPX router port. Disabled (2) causes IPX Broadcast to perform a graceful shutdown on any active IPX router ports.')
nwIpxBcastOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastOperStatus.setDescription('Indicates the current operating condition of the IPX Broadcast.')
nwIpxBcastAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastAdminReset.setDescription('Resets the IPX Broadcast. Reset (2) will force a restart of the IPX Broadcast without a graceful shutdown on any active IPX router port, without effecting any other router applications.')
nwIpxBcastOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that IPX Broadcast has been in its current operational state.')
nwIpxBcastVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastVersion.setDescription('Indicates the current revision level of IPX Broadcast.')
nwIpxBcastCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrAdminStatus.setDescription('Sets the administrative state of the aggregate (device-wide) Broadcast packet and byte counters. enable (3) causes these counters to become active on any router port running Broadcast. disabled (2) causes these counters to become inactive on all router port running Broadcast.')
nwIpxBcastCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrReset.setDescription('Resets the aggregate (device-wide) IPX Broadcast packet and byte counters. Reset (2) resets the IPX Broadcast aggregate counters to 0. nwIpxBcasstCtrOperationalTime is also reset to 0.')
nwIpxBcastCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that the aggregate (device-wide) IPX Broadcast packet and byte counters have been in the current administrative state.')
nwIpxBcastCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrInPkts.setDescription('Indicates the total number of IPX Broadcast packets that have been received, device-wide, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrOutPkts.setDescription('Indicates the total number of IPX Broadcast packets that have been transmitted, device-wide, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrFilteredPkts.setDescription('Indicates the total number of IPX Broadcast packets that have been administaratively filtered, device-wide, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrDiscardPkts.setDescription('Indicates the total number of IPX Broadcast packets that have been discarded, device-wide, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrInBytes.setDescription('Indicates the total number of IPX Broadcast packets that have been recieved, device-wide, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrOutBytes.setDescription('Indicates the total number of IPX Broadcast packets that have been transmitted, device-wide, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX Broadcast packets that have been administratively filtered, device-wide, during nwIpxBcastOperationalTime.')
nwIpxBcastCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastCtrDiscardBytes.setDescription('Indicates the total number of bytes in the Broadcast packets that have been discarded, during nwIpxBcastCtrOperationalTime.')
nwIpxBcastIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nwIpxBcastIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfTable.setDescription('This table contains an entry for each router port configured for the IPX distance-vector based routing protocol. Each entry can contain different values, allowing the routing protocol configuration to vary from router port to router port. This table is indexed by nwIpxBcastIfIndex, which indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxBcastIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxBcastIfIndex"))
if mibBuilder.loadTexts: nwIpxBcastIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfEntry.setDescription('Specifies the IPX Broadcast configuration information for the logical IPX interface for which this entry exists.')
nwIpxBcastIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfIndex.setDescription('This index corresponds to the primary index into the MIB 2 Interface Table, which describes the router port for which the entry exists.')
nwIpxBcastIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfAdminStatus.setDescription('Sets the administrative state of the IPX Broadcast on the router port for which the entry exists. Enabled (2) causes IPX Broadcast on this router port to become active. Disabled (2) causes IPX Broadcast to become inactive.')
nwIpxBcastIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfOperStatus.setDescription('Indicates the current operating condition of the IPX Broadcast on the router port for which the entry exists.')
nwIpxBcastIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIPXBcastIfOperStatus has been in its current state.')
nwIpxBcastIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nwIpxBcastIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrTable.setDescription('This table contains the IPX Broadcast packet and byte counters for each router port on this device.')
nwIpxBcastIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxBcastIfCtrIfIndex"))
if mibBuilder.loadTexts: nwIpxBcastIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrEntry.setDescription('This is the primary index into the Broadcast Interface Counter Table. This number corresponds to the index into the MIB 2 Interface Table which describes the router port for which the entry exists.')
nwIpxBcastIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrIfIndex.setDescription('This is the primary index into the IPX Broadcast Interface Counter Table. This number corresponds to the index into the MIB 2 Interface Table which describes the router port for which the entry exists.')
nwIpxBcastIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrAdminStatus.setDescription('Sets the administrative state of the IPX Broadcast packet and byte counters on the router port for which the entry exists. Enabled (3) causes these counters to become acive on the configured IPX Broadcast router port. Disabled (2) causes these counters to become inactive on the configured IPX Broadcast router port.')
nwIpxBcastIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxBcastIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrReset.setDescription('Resets the IPX Broadcast packet and byte counters on the router port for which the entry exists. Reset (2) resets the interface-specific counters to 0. nwIpxBcastIfCtrOperationalTime is also reset to 0.')
nwIpxBcastIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that the interface-specific IPX Broadcast packet and byte counters have been in the current administrative state on the router port for which the entry exists.')
nwIpxBcastIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrInPkts.setDescription('Indicates the total number of IPX Broadcast packets that have been recieved, on the router port for which the entry exists, during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrOutPkts.setDescription('Indicates the total number of Broadcast packets that have been transmitted, on the router port for which the entry existsl, during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrFilteredPkts.setDescription('Indicates the total number of IPX Broadcast packets that have been administratively filtered, on the router port for which the entry exists, during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrDiscardPkts.setDescription('Indicates the total number of Broadcast packets that have been dis- carded, on the router port for which the entry exists, during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrInBytes.setDescription('Indicates the total number of bytes in the IPX Broadcast packets that have been recieved, on the router port for which the entry exists, during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrOutBytes.setDescription('Indicates the total number of bytes in the IPX Broadcast packets that have been transmitted, on the router port for which the entry exists, during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX Broadcast packets that have been administratively filtered on the router port for which the entry exists during nwIpxBcastIfCtrOperationalTime.')
nwIpxBcastIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 2, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxBcastIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxBcastIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the IPX Broadcast packets that have been discarded on the router port for which the entry exists, during nwIpxBcastIfCtrOperationalTime.')
nwIpxEchoAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoAdminStatus.setDescription('Sets the administrative state of the IPX Echo. Enabled (3) causes IPX ECHO to become active on any configured IPX router ports. Disabled (2) causes IPX Echo to perform a graceful shutdown on any active IPX router port.')
nwIpxEchoOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoOperStatus.setDescription('Indicates the operating condition of IPX Echo.')
nwIpxEchoAdminReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoAdminReset.setDescription('Resets IPX Echo. Reset (2) will force a restart of IPX Echo without a graceful shutdown on any active IPX router port, without effecting any other router applications.')
nwIpxEchoOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that IPX Echo has been in its current administrative state, nwIpxEchoOperStatus.')
nwIpxEchoVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoVersion.setDescription('Indicates the current revision level of IPX Echo firmware.')
nwIpxEchoCtrAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrAdminStatus.setDescription('Sets the administrative state of the aggregae (device-wide) IPX Echo packet and byte counters. Enabled (3) causes these counters to become active on any router port running IPX Echo. Disabled (2) causes these counters to become inactive on all router ports.')
nwIpxEchoCtrReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrReset.setDescription('Resets the aggregate (device-wide) IPX Echo packet and byte counters. Reset (2) resets the IPX Echo aggregate counters to 0. nwIpxEchoCtrOperationalTime is also reset to 0.')
nwIpxEchoCtrOperationalTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that the aggreagate (device-wide) IPX Echo packet and byte counters have been in the current administrative state.')
nwIpxEchoCtrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrInPkts.setDescription('Indicates the total number of IPX Echo packets that have been recieved, device-wide, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoCtrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrOutPkts.setDescription('Indicates the total number of IPX Echo packets that have been transmitted, device-wide, during nwIpxEchoCtrOperationalTIme.')
nwIpxEchoCtrFilteredPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrFilteredPkts.setDescription('Indicates the total number of IPX Echo packets that have been administratively filtered, device-wide, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoCtrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrDiscardPkts.setDescription('Indicates the total number of IPX Echo packets that have been discarded, device-wide, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoCtrInBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrInBytes.setDescription('Indicates the total number of IPX Echo packets that have been recieved, device-wide, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoCtrOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrOutBytes.setDescription('Indicates the total number of IPX Echo packets that have been transmitted, device-wide, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoCtrFilteredBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoCtrFilteredBytes.setDescription('Indicates the total number of IPX Echo packets that have been administratively filtered, device-wide, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoSCtrDiscardBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoSCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoSCtrDiscardBytes.setDescription('Indicates the total number of bytes in the Echo packets that have been discarded, during nwIpxEchoCtrOperationalTime.')
nwIpxEchoIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1, 1), )
if mibBuilder.loadTexts: nwIpxEchoIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfTable.setDescription('This table contains an entry for each router port configured for IPX Echo. Each entry can contain different values, allowing the routing protocol configuration to vary from router port to router port. This table is indexed by nwIpxEchoIfIndex, which indicates the value of MIB 2 ifindex, which identifies the router port for which the entry exists.')
nwIpxEchoIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxEchoIfIndex"))
if mibBuilder.loadTexts: nwIpxEchoIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfEntry.setDescription('Specifies the IPX Echo information for the logical IPX interface for which the entry exists.')
nwIpxEchoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfIndex.setDescription('This index corresponds to the primary index into the MIB 2 ifTable, which describes the router port for which the entry exists.')
nwIpxEchoIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfAdminStatus.setDescription('Sets the administrative state of IPX Echo on the router port for which the entry exists. Enabled (2) causes this router port to become active. Disabled (3) causes this router port to become inactive.')
nwIpxEchoIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfOperStatus.setDescription('Indicates the current operating condition of IPX Echo on the router port for which the entry exists.')
nwIpxEchoIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfOperationalTime.setDescription('Indicates the elapsed time, in hundredths of a second, that nwIpxEchoIfAdminStatus has been in its current state.')
nwIpxEchoIfCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1), )
if mibBuilder.loadTexts: nwIpxEchoIfCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrTable.setDescription('This table contains the IPX Echo packet and byte counters for each router port on this device.')
nwIpxEchoIfCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxEchoIfCtrIfIndex"))
if mibBuilder.loadTexts: nwIpxEchoIfCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrEntry.setDescription('This is the primary index into the Echo Interface Counter Table. This number corresponds to the index into the MIB 2 Interface Table which describes the router port for which the entry exists.')
nwIpxEchoIfCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrIfIndex.setDescription('This is the primary index into the IPX Echo Interface Counter Table. This number corresponds to the index into the MIB 2 Interfcace Table which describes the router port for which the entry exists.')
nwIpxEchoIfCtrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoIfCtrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrAdminStatus.setDescription('Sets the administrative state of the IPX Echo packet and byte counters on the IPX router port for which the entry exists. Enabled (3) causes these counters to become active on the router port configured for IPX Echo. Disabled (2) causes these counters to become inactive on the configured IPX Echo router port.')
nwIpxEchoIfCtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEchoIfCtrReset.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrReset.setDescription('Resets the IPX Echo packet andbyte counters on the router port for which the entryexists. Reset (2) resets the interface-specific counters to 0. nwIpxEchoIfCtrOperationalTime is also reset to 0.')
nwIpxEchoIfCtrOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrOperationalTime.setDescription('Indicates the amount of time, in hundredths of a second, that the interface-specific IPX Echo packet and byte counters have been in the current administrative state on the router port for which the entry exists.')
nwIpxEchoIfCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrInPkts.setDescription('Indicates the total number of IPX Echo packets that have been recieved, on the router port for which the entry exists, during nwIpxEchoIfCtrOperationalTime.')
nwIpxEchoIfCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrOutPkts.setDescription('Indicates the total number of IPX Echo packets that have been transmitted, on the router port for which the entry exists, during nwIpxEchoIfCrOperationalTIme.')
nwIpxEchoIfCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrFilteredPkts.setDescription('Indicates the total number of IPX Echo packets that have been administratively filtered, on the router port for which the entry exists, during nwIpxEchoIfCtrOperationalTime.')
nwIpxEchoIfCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrDiscardPkts.setDescription('Indicates the total number of IPX Echo packets that have been discaded, on the router port for which the entry exists, during nwIpxEchoIfCtrOperationalTime.')
nwIpxEchoIfCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrInBytes.setDescription('Indicates the total number of bytes in the IPX Echo packets that have been recieved, on the router port for which the entry exists, during nwIpxEchoIfCtrOpeationalTime.')
nwIpxEchoIfCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrOutBytes.setDescription('Indicates the total number of bytes in the IPX Echo packets that have been transmitted, on the router port for which the entry exists, during nwIpxEchoIfCtrOperationalTime.')
nwIpxEchoIfCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrFilteredBytes.setDescription('Indicates the total number of bytes in the IPX Echo packets that have been administratively filtered and recieved on the router port for which the entry exists, during nwIpxEchoIfCtrOperationalTime.')
nwIpxEchoIfCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 9, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEchoIfCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEchoIfCtrDiscardBytes.setDescription('Indicates the total number of bytes in the IPX Echo packets that have been discarded, that were recieved on the router port for which the entry exists, during nwIpxEchoIfCtrOperationalTime.')
nwIpxHostMapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1), )
if mibBuilder.loadTexts: nwIpxHostMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapTable.setDescription('The Ipx Address translation table used for mapping an IPX address to a circuit identifier (if applicable), corresponding port number, and framing type.')
nwIpxHostMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxHostMapIfIndex"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxHostMapIpxAddr"))
if mibBuilder.loadTexts: nwIpxHostMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapEntry.setDescription('Each entry contains one IpxAddress to circuit equivalence. Also provided is the framing required to converse with this host, and the corresponding logical port number.')
nwIpxHostMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxHostMapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapIfIndex.setDescription('This is the primary (major) index into the Ipx HostMap table. This number corresponds to the index into the MIB-2 Interfaces Group which describes the IPX router port for which the entry exists.')
nwIpxHostMapIpxAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 2), IpxAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxHostMapIpxAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapIpxAddr.setDescription('The IpxAddress of the host on the corresponding interface and circuit (if applicable). The IpxAddress consists of a network number of 4 octets followed by 6 octets of node identifier.')
nwIpxHostMapPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxHostMapPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapPhysAddr.setDescription("The media-dependent 'physical' address. The value of this object is 0 for entries indicating native-wan(8) framing.")
nwIpxHostMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("inactive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxHostMapType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapType.setDescription('Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the nwIpxHostMapTable. That is, it effectively dissasociates the circuit and/or interface identified with said entry from the mapping identified with said entry. It is an implementation- specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper inter- pretation of such entries requires examination of the relevant wIpxHostMapType object.')
nwIpxHostMapCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxHostMapCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapCircuitID.setDescription('The identifier for the virtual circuit present on the interface. On an interface configured for Frame Relay, this number is the DLCI for the IPX Address at the end of the circuit. For non-WAN interfaces, the value of this object is zero.')
nwIpxHostMapFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("snap", 3), ("i8022", 4), ("novell", 6), ("nativewan", 8), ("encapenet", 9), ("encapenet8022", 10), ("encapenetsnap", 11), ("encapenetnovell", 12), ("encaptr8022", 13), ("encaptrsnap", 14), ("encapfddi8022", 15), ("encapfddisnap", 16), ("canonical", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxHostMapFraming.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapFraming.setDescription('Specifies the framing type required to converse with the host for which this entry exists.')
nwIpxHostMapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 6, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxHostMapPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxHostMapPortNumber.setDescription("The unique value for the logical port number. It's value ranges between 1 and a maximum value which is dependent on both the number of configured interfaces in the system and the number of circuits present on those interfaces which are of WAN type.")
nwIpxEventAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventAdminStatus.setDescription('Sets the administrative state of IPX event logging. Enabled (3) causes the event log to become active. Disabled (2) causes the event log to become inactive.')
nwIpxEventMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 1, 2), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventMaxEntries.setDescription('Sets the maximum size of the event log table. When the table size exceeds the maximum, the first entry is deleted until the size of the table does not exceed the maximum.')
nwIpxEventTraceAll = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventTraceAll.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventTraceAll.setDescription('Sets the administrative state of the event log. Enabled (3) allows logging of all event types on all router ports from all protocols and components. Disabled (2) causes the filter table to specify which events to log.')
nwIpxEventFilterTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1), )
if mibBuilder.loadTexts: nwIpxEventFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFilterTable.setDescription('This table contains an entry for each event filter configured for IPX Routing Services events.')
nwIpxEventFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxEventFltrProtocol"), (0, "CTRON-IPX-ROUTER-MIB", "nwIpxEventFltrIfNum"))
if mibBuilder.loadTexts: nwIpxEventFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFilterEntry.setDescription('Each entry describes an event filter which defines a particular type of event to be logged to the event log. The nwIpxEventProtocol refers to the instance used in the nwRtgProtocolTable and nwComponentTable specified by the Cabletron Routing Services MIB, and identifies the protocol to which the entry applies.')
nwIpxEventFltrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventFltrProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFltrProtocol.setDescription('Specifies the routing protocol involved in the event for which the event filter exists.')
nwIpxEventFltrIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventFltrIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFltrIfNum.setDescription('Specifies the router port involved in the event for which the event filter exists.')
nwIpxEventFltrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 2), ("add", 3))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventFltrControl.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFltrControl.setDescription('Set this value to 3 to add the event filter to the Event Filter Table. Set this value to 2 to delete the event filter from the Event Filter Table.')
nwIpxEventFltrType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("misc", 1), ("timer", 2), ("rcv", 4), ("xmit", 8), ("event", 16), ("error", 32))).clone('misc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventFltrType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFltrType.setDescription('This 6 bit mask specifies the types of events to be logged. By default all 6 bits are set to 1, indicating that all types of events will be logged. Setting any bit to 0 removes an event type from this field and prevents that type of event from being logged. Adding event types to this field will enable those types of events to be logged.')
nwIpxEventFltrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest", 1), ("highmed", 2), ("highlow", 3))).clone('highest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventFltrSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFltrSeverity.setDescription("This object controls the amount of logging by ignoring events of lower priority than specified by this filter value. The highest value will ignore all events except those of the highest severity. `Highmed' will log all events highest priority through lowest. `Highlow' will log all events highest priority through lowest. The `highmed' severity is the default setting.")
nwIpxEventFltrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("log", 1), ("trap", 2), ("log-trap", 3))).clone('log')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwIpxEventFltrAction.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventFltrAction.setDescription("This field specifies how the events are to be logged. Logging to the `log' stores the events in the event log table. Logging to `trap' sends events out through the trap mechanism.")
nwIpxEventTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1), )
if mibBuilder.loadTexts: nwIpxEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventTable.setDescription('This table contains an entry for each event that has been logged.')
nwIpxEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1), ).setIndexNames((0, "CTRON-IPX-ROUTER-MIB", "nwIpxEventNumber"))
if mibBuilder.loadTexts: nwIpxEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventEntry.setDescription('Each entry contains the information about an event that has been logged to the event table.')
nwIpxEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventNumber.setDescription('An ordinal value assigned to the event for which the entry exists. nwIpxEventNumber is assigned so that each event in the event log can be uniquely identified by the value of nwIpxEventNumber.')
nwIpxEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventTime.setDescription('Indicates the time at which the event was logged to the event log.')
nwIpxEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("misc", 1), ("timer", 2), ("rcv", 4), ("xmit", 8), ("event", 16), ("error", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventType.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventType.setDescription('Indicates the type of event that was logged.')
nwIpxEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highest", 1), ("highmed", 2), ("highlow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventSeverity.setDescription('Indicates the priority that was assigned to this type event.')
nwIpxEventProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventProtocol.setDescription('Indicates the routing protocol that was involved in this event.')
nwIpxEventIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventIfNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventIfNum.setDescription('Indicates the router port that was involved in the event.')
nwIpxEventTextString = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 2, 2, 10, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwIpxEventTextString.setStatus('mandatory')
if mibBuilder.loadTexts: nwIpxEventTextString.setDescription('Contains the actual text string that was logged.')
mibBuilder.exportSymbols("CTRON-IPX-ROUTER-MIB", nwIpxEchoIfCtrOutPkts=nwIpxEchoIfCtrOutPkts, nwIpxFwdCtrHostDiscardPkts=nwIpxFwdCtrHostDiscardPkts, nwIpxBcastIfCtrFilteredBytes=nwIpxBcastIfCtrFilteredBytes, nwIpxAddrIfIndex=nwIpxAddrIfIndex, nwIpxRipIfSplitHorizon=nwIpxRipIfSplitHorizon, nwIpxFwdIfControl=nwIpxFwdIfControl, nwIpxNetBIOSVersion=nwIpxNetBIOSVersion, nwIpxSapCounters=nwIpxSapCounters, nwIpxFwdIfCtrInBytes=nwIpxFwdIfCtrInBytes, nwIpxNetBIOSIfCtrIfIndex=nwIpxNetBIOSIfCtrIfIndex, nwIpxBroadcastIfConfig=nwIpxBroadcastIfConfig, nwIpxRipIfAdminStatus=nwIpxRipIfAdminStatus, nwIpxRipDatabase=nwIpxRipDatabase, nwIpxRipRtNetId=nwIpxRipRtNetId, nwIpxFwdIfConfig=nwIpxFwdIfConfig, nwIpxAddrEntry=nwIpxAddrEntry, nwIpxFwdIfCtrLenErrPkts=nwIpxFwdIfCtrLenErrPkts, nwIpxAclDestNode=nwIpxAclDestNode, nwIpxBcastCtrOperationalTime=nwIpxBcastCtrOperationalTime, nwIpxEchoCtrFilteredPkts=nwIpxEchoCtrFilteredPkts, nwIpxRipIfCtrEntry=nwIpxRipIfCtrEntry, nwIpxSapCtrDiscardPkts=nwIpxSapCtrDiscardPkts, nwIpxSapOperStatus=nwIpxSapOperStatus, nwIpxBcastCtrInPkts=nwIpxBcastCtrInPkts, nwIpxRipIfCtrDiscardPkts=nwIpxRipIfCtrDiscardPkts, nwIpxFwdIfAdminStatus=nwIpxFwdIfAdminStatus, nwIpxRipSystem=nwIpxRipSystem, nwIpxBcastIfAdminStatus=nwIpxBcastIfAdminStatus, nwIpxNetBIOSConfig=nwIpxNetBIOSConfig, nwIpxFibHops=nwIpxFibHops, nwIpxNetBIOSIfTable=nwIpxNetBIOSIfTable, nwIpxRipIfConfig=nwIpxRipIfConfig, nwIpxRipConfig=nwIpxRipConfig, nwIpxBroadcastSystem=nwIpxBroadcastSystem, nwIpxSapIfXmitCost=nwIpxSapIfXmitCost, nwIpxAclMatches=nwIpxAclMatches, nwIpxHostMapType=nwIpxHostMapType, nwIpxEchoAdminReset=nwIpxEchoAdminReset, nwIpxEchoIfCtrDiscardPkts=nwIpxEchoIfCtrDiscardPkts, nwIpxSapIfCtrFilteredBytes=nwIpxSapIfCtrFilteredBytes, nwIpxRipRtSrcNode=nwIpxRipRtSrcNode, nwIpxAclValidEntries=nwIpxAclValidEntries, nwIpxEchoCtrDiscardPkts=nwIpxEchoCtrDiscardPkts, nwIpxEchoCtrOutPkts=nwIpxEchoCtrOutPkts, nwIpxSapIfCtrOutBytes=nwIpxSapIfCtrOutBytes, nwIpxFwdIfCacheMisses=nwIpxFwdIfCacheMisses, nwIpxNetBIOSIfConfig=nwIpxNetBIOSIfConfig, nwIpxFwdIfCtrAdminStatus=nwIpxFwdIfCtrAdminStatus, nwIpxFwdCtrFwdBytes=nwIpxFwdCtrFwdBytes, nwIpxFwdIfAclIdentifier=nwIpxFwdIfAclIdentifier, nwIpxEchoCtrReset=nwIpxEchoCtrReset, nwIpxRipIfPriority=nwIpxRipIfPriority, nwIpxEchoCtrOperationalTime=nwIpxEchoCtrOperationalTime, nwIpxFwdIfTable=nwIpxFwdIfTable, nwIpxSapServerIfIfNum=nwIpxSapServerIfIfNum, nwIpxRipIfCtrInPkts=nwIpxRipIfCtrInPkts, nwIpxMibs=nwIpxMibs, nwIpxSapIfPriority=nwIpxSapIfPriority, nwIpxEchoIfCtrInBytes=nwIpxEchoIfCtrInBytes, nwIpxBcastIfCtrInBytes=nwIpxBcastIfCtrInBytes, nwIpxEchoSystem=nwIpxEchoSystem, nwIpxRipCtrInBytes=nwIpxRipCtrInBytes, nwIpxNetBIOSIfOperStatus=nwIpxNetBIOSIfOperStatus, nwIpxFwdIfFrameType=nwIpxFwdIfFrameType, nwIpxFwdCtrFilteredPkts=nwIpxFwdCtrFilteredPkts, nwIpxSapCtrFilteredPkts=nwIpxSapCtrFilteredPkts, nwIpxEventProtocol=nwIpxEventProtocol, nwIpxNetBIOSCtrFilteredBytes=nwIpxNetBIOSCtrFilteredBytes, nwIpxRipIfXmitCost=nwIpxRipIfXmitCost, nwIpxSapCtrReset=nwIpxSapCtrReset, nwIpxSapSystem=nwIpxSapSystem, nwIpxNetBIOSCtrOperationalTime=nwIpxNetBIOSCtrOperationalTime, nwIpxSapAgeOut=nwIpxSapAgeOut, nwIpxEchoIfCtrTable=nwIpxEchoIfCtrTable, nwIpxSapCtrFilteredBytes=nwIpxSapCtrFilteredBytes, nwIpxEventTime=nwIpxEventTime, nwIpxFwdIfCtrIfIndex=nwIpxFwdIfCtrIfIndex, nwIpxEventAdminStatus=nwIpxEventAdminStatus, nwIpxTopology=nwIpxTopology, nwIpxFilters=nwIpxFilters, nwIpxEchoIfCtrReset=nwIpxEchoIfCtrReset, nwIpxSapIfCtrReset=nwIpxSapIfCtrReset, nwIpxEchoIfIndex=nwIpxEchoIfIndex, nwIpxFwdIfCtrHostOutPkts=nwIpxFwdIfCtrHostOutPkts, nwIpxSapIfCtrDiscardBytes=nwIpxSapIfCtrDiscardBytes, nwIpxFwdIfCtrDiscardPkts=nwIpxFwdIfCtrDiscardPkts, nwIpxNetBIOSIfCtrFilteredBytes=nwIpxNetBIOSIfCtrFilteredBytes, nwIpxFwdCtrHdrErrPkts=nwIpxFwdCtrHdrErrPkts, nwIpxHostMapEntry=nwIpxHostMapEntry, nwIpxEventTable=nwIpxEventTable, nwIpxSapIfAdminStatus=nwIpxSapIfAdminStatus, nwIpxRipRtAge=nwIpxRipRtAge, nwIpxNetBIOSIfCtrEntry=nwIpxNetBIOSIfCtrEntry, nwIpxRipIfCtrOutPkts=nwIpxRipIfCtrOutPkts, nwIpxSapServerIfSocket=nwIpxSapServerIfSocket, nwIpxRipHoldDown=nwIpxRipHoldDown, nwIpxRipCtrReset=nwIpxRipCtrReset, nwIpxSysConfig=nwIpxSysConfig, nwIpxBcastIfCtrDiscardPkts=nwIpxBcastIfCtrDiscardPkts, nwIpxFwdIfCtrDiscardBytes=nwIpxFwdIfCtrDiscardBytes, nwIpxSapIfConfig=nwIpxSapIfConfig, nwIpxFwdCtrDiscardPkts=nwIpxFwdCtrDiscardPkts, nwIpxRipIfEntry=nwIpxRipIfEntry, nwIpxRipIfVersion=nwIpxRipIfVersion, nwIpxRipIfCtrTable=nwIpxRipIfCtrTable, nwIpxSapIfRequestDelay=nwIpxSapIfRequestDelay, nwIpxEchoIfCounters=nwIpxEchoIfCounters, nwIpxSapIfCtrTable=nwIpxSapIfCtrTable, nwIpxEventFltrAction=nwIpxEventFltrAction, nwIpxFibNextHopNode=nwIpxFibNextHopNode, nwIpxFwdIfCtrEntry=nwIpxFwdIfCtrEntry, nwIpxNetBIOSIfCtrOperationalTime=nwIpxNetBIOSIfCtrOperationalTime, nwIpxNetBIOS=nwIpxNetBIOS, nwIpxFibNextHopIf=nwIpxFibNextHopIf, nwIpxBcastCtrFilteredPkts=nwIpxBcastCtrFilteredPkts, nwIpxBcastAdminReset=nwIpxBcastAdminReset, nwIpxFwdCtrDiscardBytes=nwIpxFwdCtrDiscardBytes, nwIpxFibRouteType=nwIpxFibRouteType, nwIpxFwdIfCtrHostInBytes=nwIpxFwdIfCtrHostInBytes, nwIpxEchoIfOperStatus=nwIpxEchoIfOperStatus, nwIpxRipIfCtrOperationalTime=nwIpxRipIfCtrOperationalTime, nwIpxBcastIfOperStatus=nwIpxBcastIfOperStatus, nwIpxRipRtType=nwIpxRipRtType, nwIpxEchoIfOperationalTime=nwIpxEchoIfOperationalTime, nwIpxNetBIOSIfCtrAdminStatus=nwIpxNetBIOSIfCtrAdminStatus, nwIpxSapIfCtrFilteredPkts=nwIpxSapIfCtrFilteredPkts, nwIpxEchoIfCtrOperationalTime=nwIpxEchoIfCtrOperationalTime, nwIpxFwdIfCtrAddrErrPkts=nwIpxFwdIfCtrAddrErrPkts, nwIpxBcastOperationalTime=nwIpxBcastOperationalTime, nwIpxNetBIOSCounters=nwIpxNetBIOSCounters, nwIpxSapOperationalTime=nwIpxSapOperationalTime, nwIpxLinkState=nwIpxLinkState, nwIpxSapCtrOutBytes=nwIpxSapCtrOutBytes, nwIpxSapVersion=nwIpxSapVersion, nwIpxNetBIOSIfCtrOutBytes=nwIpxNetBIOSIfCtrOutBytes, nwIpxBcastIfEntry=nwIpxBcastIfEntry, nwIpxEchoCtrInPkts=nwIpxEchoCtrInPkts, nwIpxNetBIOSCtrDiscardPkts=nwIpxNetBIOSCtrDiscardPkts, nwIpxBcastIfTable=nwIpxBcastIfTable, nwIpxFwdCtrOutBytes=nwIpxFwdCtrOutBytes, nwIpxSapServerIfType=nwIpxSapServerIfType, nwIpxEventTraceAll=nwIpxEventTraceAll, nwIpxRipAdminReset=nwIpxRipAdminReset, nwIpxSapIfAclStatus=nwIpxSapIfAclStatus, nwIpxNetBIOSIfCtrInPkts=nwIpxNetBIOSIfCtrInPkts, nwIpxNetBIOSIfAdminStatus=nwIpxNetBIOSIfAdminStatus, nwIpxEventEntry=nwIpxEventEntry, nwIpxEchoIfAdminStatus=nwIpxEchoIfAdminStatus, nwIpxSapAdminReset=nwIpxSapAdminReset, nwIpxFwdCtrLenErrPkts=nwIpxFwdCtrLenErrPkts, nwIpxRipIfCtrIfIndex=nwIpxRipIfCtrIfIndex, nwIpxEventFltrIfNum=nwIpxEventFltrIfNum, nwIpxRipIfCtrDiscardBytes=nwIpxRipIfCtrDiscardBytes, nwIpxAclTable=nwIpxAclTable, nwIpxRipCtrOutPkts=nwIpxRipCtrOutPkts, nwIpxSapServerIfAge=nwIpxSapServerIfAge, nwIpxSystem=nwIpxSystem, nwIpxRipRtTicks=nwIpxRipRtTicks, nwIpxSapIfCtrOperationalTime=nwIpxSapIfCtrOperationalTime, nwIpxSysAdministration=nwIpxSysAdministration, nwIpxSapHoldDown=nwIpxSapHoldDown, nwIpxFwdIfCtrHdrErrPkts=nwIpxFwdIfCtrHdrErrPkts, nwIpxFwdCtrInBytes=nwIpxFwdCtrInBytes, nwIpxEchoIfCtrFilteredPkts=nwIpxEchoIfCtrFilteredPkts, nwIpxFwdIfOperationalTime=nwIpxFwdIfOperationalTime, nwIpxSapServerTable=nwIpxSapServerTable, nwIpxFwdInterfaces=nwIpxFwdInterfaces, nwIpxSapIfTable=nwIpxSapIfTable, nwIpxBcastIfIndex=nwIpxBcastIfIndex, nwIpxBcastIfCtrOperationalTime=nwIpxBcastIfCtrOperationalTime, nwIpxRipOperStatus=nwIpxRipOperStatus, nwIpxRipCtrFilteredPkts=nwIpxRipCtrFilteredPkts, nwIpxAccessControl=nwIpxAccessControl, nwIpxFwdCtrOutPkts=nwIpxFwdCtrOutPkts, nwIpxRipOperationalTime=nwIpxRipOperationalTime, nwIpxBcastIfCtrAdminStatus=nwIpxBcastIfCtrAdminStatus, nwIpxSapCtrOperationalTime=nwIpxSapCtrOperationalTime, nwIpxSapServerIfFlags=nwIpxSapServerIfFlags, nwIpxEchoConfig=nwIpxEchoConfig, nwIpxRipCtrOperationalTime=nwIpxRipCtrOperationalTime, nwIpxSapIfEntry=nwIpxSapIfEntry, nwIpxRipIfSnooping=nwIpxRipIfSnooping, nwIpxEvent=nwIpxEvent, nwIpxBcastAdminStatus=nwIpxBcastAdminStatus, nwIpxFwdIfCtrFwdPkts=nwIpxFwdIfCtrFwdPkts, nwIpxComponents=nwIpxComponents, nwIpxNetBIOSCtrOutBytes=nwIpxNetBIOSCtrOutBytes, nwIpxRipIfCounters=nwIpxRipIfCounters, nwIpxEchoIfCtrEntry=nwIpxEchoIfCtrEntry, nwIpxBcastCtrDiscardPkts=nwIpxBcastCtrDiscardPkts, nwIpxBcastIfCtrOutPkts=nwIpxBcastIfCtrOutPkts, nwIpxFwdIfCtrInPkts=nwIpxFwdIfCtrInPkts, nwIpxNetBIOSIfCtrInBytes=nwIpxNetBIOSIfCtrInBytes, nwIpxEventFltrProtocol=nwIpxEventFltrProtocol, nwIpxFwdIfMtu=nwIpxFwdIfMtu, nwIpxRipCtrFilteredBytes=nwIpxRipCtrFilteredBytes, nwIpxSysOperStatus=nwIpxSysOperStatus, nwIpxAclDestNetNum=nwIpxAclDestNetNum, nwIpxFwdCtrAddrErrPkts=nwIpxFwdCtrAddrErrPkts, nwIpxFwdCtrHostOutBytes=nwIpxFwdCtrHostOutBytes, nwIpxBcastIfCtrDiscardBytes=nwIpxBcastIfCtrDiscardBytes, nwIpxRedirector=nwIpxRedirector, nwIpxEchoIfCtrOutBytes=nwIpxEchoIfCtrOutBytes, nwIpxBroadcast=nwIpxBroadcast, nwIpxNetBIOSIfCounters=nwIpxNetBIOSIfCounters, nwIpxRouter=nwIpxRouter, nwIpxRipRtHops=nwIpxRipRtHops, nwIpxFwdIfCacheEntries=nwIpxFwdIfCacheEntries, nwIpxBcastCtrAdminStatus=nwIpxBcastCtrAdminStatus, nwIpxFwdCtrHostDiscardBytes=nwIpxFwdCtrHostDiscardBytes, nwIpxSapIfAclIdentifier=nwIpxSapIfAclIdentifier, nwIpxSapIfCtrInPkts=nwIpxSapIfCtrInPkts, nwIpxAddrIfAddress=nwIpxAddrIfAddress, nwIpxFwdCtrFilteredBytes=nwIpxFwdCtrFilteredBytes, nwIpxEchoIfCtrFilteredBytes=nwIpxEchoIfCtrFilteredBytes, nwIpxForwarding=nwIpxForwarding, nwIpxNetBIOSOperationalTime=nwIpxNetBIOSOperationalTime, nwIpxRipIfAclIdentifier=nwIpxRipIfAclIdentifier, nwIpxNetBIOSCtrFilteredPkts=nwIpxNetBIOSCtrFilteredPkts, nwIpxBroadcastCounters=nwIpxBroadcastCounters, nwIpxRipStackSize=nwIpxRipStackSize, nwIpxEchoCtrOutBytes=nwIpxEchoCtrOutBytes, nwIpxSapServerIfSrcNode=nwIpxSapServerIfSrcNode, nwIpxRipIfCtrReset=nwIpxRipIfCtrReset, nwIpxBcastIfCtrEntry=nwIpxBcastIfCtrEntry, nwIpxFwdIfEntry=nwIpxFwdIfEntry, nwIpxNetBIOSIfCtrFilteredPkts=nwIpxNetBIOSIfCtrFilteredPkts, nwIpxFibNextHopNet=nwIpxFibNextHopNet, nwIpxRipVersion=nwIpxRipVersion, nwIpxFwdIfCtrTable=nwIpxFwdIfCtrTable, nwIpxSapCtrAdminStatus=nwIpxSapCtrAdminStatus, nwIpxBroadcastConfig=nwIpxBroadcastConfig, nwIpxFwdIfCtrOutBytes=nwIpxFwdIfCtrOutBytes, nwIpxEchoIfEntry=nwIpxEchoIfEntry, nwIpxHostMapPortNumber=nwIpxHostMapPortNumber, nwIpxSapCtrDiscardBytes=nwIpxSapCtrDiscardBytes, nwIpxEventSeverity=nwIpxEventSeverity, nwIpxNetBIOSAdminStatus=nwIpxNetBIOSAdminStatus, nwIpxFwdIfAclStatus=nwIpxFwdIfAclStatus, nwIpxNetBIOSIfCtrOutPkts=nwIpxNetBIOSIfCtrOutPkts, nwIpxEchoIfConfig=nwIpxEchoIfConfig, nwIpxSapAdminStatus=nwIpxSapAdminStatus, nwIpxSapStackSize=nwIpxSapStackSize, nwIpxEndSystems=nwIpxEndSystems, nwIpxAclSequence=nwIpxAclSequence, nwIpxFwdIfIndex=nwIpxFwdIfIndex, nwIpxNetBIOSIfOperationalTime=nwIpxNetBIOSIfOperationalTime, nwIpxNetBIOSInterface=nwIpxNetBIOSInterface, nwIpxEchoInterface=nwIpxEchoInterface, nwIpxBcastCtrInBytes=nwIpxBcastCtrInBytes, nwIpxSapIfCtrEntry=nwIpxSapIfCtrEntry, nwIpxEchoCounters=nwIpxEchoCounters, nwIpxNetBIOSCtrAdminStatus=nwIpxNetBIOSCtrAdminStatus, nwIpxFibTable=nwIpxFibTable)
mibBuilder.exportSymbols("CTRON-IPX-ROUTER-MIB", nwIpxRipIfCtrAdminStatus=nwIpxRipIfCtrAdminStatus, nwIpxEchoAdminStatus=nwIpxEchoAdminStatus, nwIpxSapIfIndex=nwIpxSapIfIndex, nwIpxRipIfPoisonReverse=nwIpxRipIfPoisonReverse, nwIpxSapFilters=nwIpxSapFilters, nwIpxHostMapFraming=nwIpxHostMapFraming, nwIpxNetBIOSIfIndex=nwIpxNetBIOSIfIndex, nwIpxSysAdminStatus=nwIpxSysAdminStatus, nwIpxHostMapIfIndex=nwIpxHostMapIfIndex, nwIpxFwdCtrOperationalTime=nwIpxFwdCtrOperationalTime, nwIpxAclPermission=nwIpxAclPermission, nwIpxEventLogConfig=nwIpxEventLogConfig, nwIpxNetBIOSIfCtrDiscardPkts=nwIpxNetBIOSIfCtrDiscardPkts, nwIpxSapIfAdvertisement=nwIpxSapIfAdvertisement, nwIpxRipRtIfIndex=nwIpxRipRtIfIndex, nwIpxFwdCtrHostInBytes=nwIpxFwdCtrHostInBytes, nwIpxSapThreadPriority=nwIpxSapThreadPriority, nwIpxSapIfCtrAdminStatus=nwIpxSapIfCtrAdminStatus, nwIpxAclSrcNetNum=nwIpxAclSrcNetNum, nwIpxSap=nwIpxSap, nwIpxEchoOperationalTime=nwIpxEchoOperationalTime, nwIpxAclIdentifier=nwIpxAclIdentifier, nwIpxBcastCtrReset=nwIpxBcastCtrReset, nwIpxHostMapPhysAddr=nwIpxHostMapPhysAddr, nwIpxEventTextString=nwIpxEventTextString, nwIpxRipDatabaseThreshold=nwIpxRipDatabaseThreshold, nwIpxFwdCtrFwdPkts=nwIpxFwdCtrFwdPkts, nwIpxFwdIfCtrHostInPkts=nwIpxFwdIfCtrHostInPkts, nwIpxRipIfOperStatus=nwIpxRipIfOperStatus, nwIpxSapIfCtrDiscardPkts=nwIpxSapIfCtrDiscardPkts, nwIpxRipCtrAdminStatus=nwIpxRipCtrAdminStatus, nwIpxNetBIOSCtrOutPkts=nwIpxNetBIOSCtrOutPkts, nwIpxBroadcastInterface=nwIpxBroadcastInterface, nwIpxSapIfCtrOutPkts=nwIpxSapIfCtrOutPkts, nwIpxFwdCtrInPkts=nwIpxFwdCtrInPkts, nwIpxEchoVersion=nwIpxEchoVersion, nwIpxFwdIfCtrReset=nwIpxFwdIfCtrReset, nwIpxRipIfType=nwIpxRipIfType, nwIpxSapIfSplitHorizon=nwIpxSapIfSplitHorizon, nwIpxNetBIOSCtrInBytes=nwIpxNetBIOSCtrInBytes, nwIpxAclEntry=nwIpxAclEntry, nwIpxEchoCtrInBytes=nwIpxEchoCtrInBytes, nwIpxAddrIfControl=nwIpxAddrIfControl, nwIpxSysAdminReset=nwIpxSysAdminReset, nwIpxSapServerIfEntry=nwIpxSapServerIfEntry, nwIpxEchoIfCtrAdminStatus=nwIpxEchoIfCtrAdminStatus, nwIpxFwdIfCacheControl=nwIpxFwdIfCacheControl, nwIpxAddrIfAddrType=nwIpxAddrIfAddrType, nwIpxRipIfHelloTimer=nwIpxRipIfHelloTimer, nwIpxRipAdminStatus=nwIpxRipAdminStatus, nwIpxRipIfRequestDelay=nwIpxRipIfRequestDelay, nwIpxBcastIfCtrIfIndex=nwIpxBcastIfCtrIfIndex, nwIpxMibRevText=nwIpxMibRevText, nwIpxSapCtrOutPkts=nwIpxSapCtrOutPkts, nwIpxNlsp=nwIpxNlsp, nwIpxEventFilterEntry=nwIpxEventFilterEntry, nwIpxEventType=nwIpxEventType, nwIpxFwdCtrReset=nwIpxFwdCtrReset, nwIpxSapInterfaces=nwIpxSapInterfaces, nwIpxBcastOperStatus=nwIpxBcastOperStatus, nwIpxFibEntry=nwIpxFibEntry, nwIpxDistanceVector=nwIpxDistanceVector, nwIpxSapIfOperationalTime=nwIpxSapIfOperationalTime, nwIpxSapIfCtrIfIndex=nwIpxSapIfCtrIfIndex, nwIpxSapIfOperStatus=nwIpxSapIfOperStatus, nwIpxFwdSystem=nwIpxFwdSystem, nwIpxFwdIfCtrFilteredBytes=nwIpxFwdIfCtrFilteredBytes, nwIpxSysOperationalTimel=nwIpxSysOperationalTimel, nwIpxBcastVersion=nwIpxBcastVersion, nwIpxNetBIOSAdminReset=nwIpxNetBIOSAdminReset, nwIpxBcastIfCtrReset=nwIpxBcastIfCtrReset, nwIpxFibTimeTicks=nwIpxFibTimeTicks, nwIpxEventFilterTable=nwIpxEventFilterTable, nwIpxRipIfAdvertisement=nwIpxRipIfAdvertisement, nwIpxFwdCounters=nwIpxFwdCounters, nwIpxRipIfCtrFilteredBytes=nwIpxRipIfCtrFilteredBytes, nwIpxNetBIOSCtrInPkts=nwIpxNetBIOSCtrInPkts, nwIpxBcastIfOperationalTime=nwIpxBcastIfOperationalTime, nwIpxRipFilters=nwIpxRipFilters, nwIpxNetBIOSIfEntry=nwIpxNetBIOSIfEntry, nwIpxEventLogFilterTable=nwIpxEventLogFilterTable, nwIpxFwdCtrAdminStatus=nwIpxFwdCtrAdminStatus, nwIpxSapServerIfHops=nwIpxSapServerIfHops, nwIpxAclSrcSocket=nwIpxAclSrcSocket, nwIpxSapCtrInPkts=nwIpxSapCtrInPkts, nwIpxFwdIfCounters=nwIpxFwdIfCounters, nwIpxRipIfIndex=nwIpxRipIfIndex, nwIpxEchoCtrFilteredBytes=nwIpxEchoCtrFilteredBytes, nwIpxRipRouteEntry=nwIpxRipRouteEntry, nwIpxFibNetId=nwIpxFibNetId, nwIpxRipIfTable=nwIpxRipIfTable, nwIpxFwdCtrHostOutPkts=nwIpxFwdCtrHostOutPkts, nwIpxRipRouteTable=nwIpxRipRouteTable, nwIpxEchoIfCtrIfIndex=nwIpxEchoIfCtrIfIndex, nwIpxWorkGroup=nwIpxWorkGroup, nwIpxBcastCtrOutPkts=nwIpxBcastCtrOutPkts, nwIpxNetBIOSSystem=nwIpxNetBIOSSystem, nwIpxAclDestSocket=nwIpxAclDestSocket, nwIpxSapConfig=nwIpxSapConfig, nwIpxSapIfHelloTimer=nwIpxSapIfHelloTimer, nwIpxBroadcastIfCounters=nwIpxBroadcastIfCounters, nwIpxRipIfAclStatus=nwIpxRipIfAclStatus, nwIpxEchoIfCtrInPkts=nwIpxEchoIfCtrInPkts, nwIpxFwdIfForwarding=nwIpxFwdIfForwarding, nwIpxSapServerIfNetId=nwIpxSapServerIfNetId, nwIpxNetBIOSCtrReset=nwIpxNetBIOSCtrReset, nwIpxSapServerIfName=nwIpxSapServerIfName, nwIpxEchoOperStatus=nwIpxEchoOperStatus, nwIpxEventNumber=nwIpxEventNumber, nwIpxFwdIfCtrOutPkts=nwIpxFwdIfCtrOutPkts, nwIpxRipIfFloodDelay=nwIpxRipIfFloodDelay, nwIpxEchoCtrAdminStatus=nwIpxEchoCtrAdminStatus, nwIpxFwdIfCtrOperationalTime=nwIpxFwdIfCtrOperationalTime, nwIpxFib=nwIpxFib, nwIpxAddressTable=nwIpxAddressTable, nwIpxFwdIfCacheHits=nwIpxFwdIfCacheHits, nwIpxEventMaxEntries=nwIpxEventMaxEntries, nwIpxRipIfCtrOutBytes=nwIpxRipIfCtrOutBytes, nwIpxSapIfCounters=nwIpxSapIfCounters, nwIpxRipRtFlags=nwIpxRipRtFlags, nwIpxSapServerIfServiceType=nwIpxSapServerIfServiceType, nwIpxRipIfCtrInBytes=nwIpxRipIfCtrInBytes, nwIpxHostMapCircuitID=nwIpxHostMapCircuitID, nwIpxSapCtrInBytes=nwIpxSapCtrInBytes, nwIpxSapIfSnooping=nwIpxSapIfSnooping, nwIpxFwdIfCtrHostOutBytes=nwIpxFwdIfCtrHostOutBytes, nwIpxHostMapIpxAddr=nwIpxHostMapIpxAddr, nwIpxHostMapTable=nwIpxHostMapTable, nwIpxHostsInterfaces=nwIpxHostsInterfaces, nwIpxFwdIfOperStatus=nwIpxFwdIfOperStatus, nwIpxEventIfNum=nwIpxEventIfNum, nwIpxEchoIfCtrDiscardBytes=nwIpxEchoIfCtrDiscardBytes, nwIpxEcho=nwIpxEcho, IpxAddress=IpxAddress, nwIpxFwdIfCtrFwdBytes=nwIpxFwdIfCtrFwdBytes, nwIpxRipAgeOut=nwIpxRipAgeOut, nwIpxRipThreadPriority=nwIpxRipThreadPriority, nwIpxRipCounters=nwIpxRipCounters, nwIpxSapServerIfNode=nwIpxSapServerIfNode, nwIpxNetBIOSIfCtrTable=nwIpxNetBIOSIfCtrTable, nwIpxEventFltrType=nwIpxEventFltrType, nwIpxBcastCtrFilteredBytes=nwIpxBcastCtrFilteredBytes, nwIpxRipCtrDiscardBytes=nwIpxRipCtrDiscardBytes, nwIpxSysRouterId=nwIpxSysRouterId, nwIpxSapServerIfTable=nwIpxSapServerIfTable, nwIpxBcastIfCtrFilteredPkts=nwIpxBcastIfCtrFilteredPkts, nwIpxSapIfVersion=nwIpxSapIfVersion, nwIpxBcastCtrOutBytes=nwIpxBcastCtrOutBytes, nwIpxRipIfCtrFilteredPkts=nwIpxRipIfCtrFilteredPkts, nwIpxSapIfType=nwIpxSapIfType, nwIpxRipCtrOutBytes=nwIpxRipCtrOutBytes, nwIpxNetBIOSIfCtrReset=nwIpxNetBIOSIfCtrReset, nwIpxEventFltrSeverity=nwIpxEventFltrSeverity, nwIpxHostsSystem=nwIpxHostsSystem, nwIpxHostsToMedia=nwIpxHostsToMedia, nwIpxEventLogTable=nwIpxEventLogTable, nwIpxSysVersion=nwIpxSysVersion, nwIpxFwdIfCtrFilteredPkts=nwIpxFwdIfCtrFilteredPkts, nwIpxSapIfPoisonReverse=nwIpxSapIfPoisonReverse, nwIpxNetBIOSCtrDiscardBytes=nwIpxNetBIOSCtrDiscardBytes, nwIpxRipInterfaces=nwIpxRipInterfaces, nwIpxRipIfOperationalTime=nwIpxRipIfOperationalTime, nwIpxSapIfFloodDelay=nwIpxSapIfFloodDelay, nwIpxNetBIOSOperStatus=nwIpxNetBIOSOperStatus, nwIpxNetBIOSIfCtrDiscardBytes=nwIpxNetBIOSIfCtrDiscardBytes, nwIpxEchoSCtrDiscardBytes=nwIpxEchoSCtrDiscardBytes, nwIpxFwdIfCtrHostDiscardBytes=nwIpxFwdIfCtrHostDiscardBytes, nwIpxSapDatabaseThreshold=nwIpxSapDatabaseThreshold, nwIpxBcastIfCtrOutBytes=nwIpxBcastIfCtrOutBytes, nwIpxRip=nwIpxRip, nwIpxFwdIfCtrHostDiscardPkts=nwIpxFwdIfCtrHostDiscardPkts, nwIpxBcastIfCtrInPkts=nwIpxBcastIfCtrInPkts, nwIpxRipCtrDiscardPkts=nwIpxRipCtrDiscardPkts, nwIpxBcastCtrDiscardBytes=nwIpxBcastCtrDiscardBytes, nwIpxBcastIfCtrTable=nwIpxBcastIfCtrTable, nwIpxRipCtrInPkts=nwIpxRipCtrInPkts, nwIpxEchoIfTable=nwIpxEchoIfTable, nwIpxEventFltrControl=nwIpxEventFltrControl, nwIpxAclSrcNode=nwIpxAclSrcNode, nwIpxFwdCtrHostInPkts=nwIpxFwdCtrHostInPkts, nwIpxSapIfCtrInBytes=nwIpxSapIfCtrInBytes)
