#
# PySNMP MIB module RDN-CABLE-TRAFFIC-MANAGEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-CABLE-TRAFFIC-MANAGEMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:54:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Gauge32, NotificationType, TimeTicks, ObjectIdentity, Unsigned32, IpAddress, Bits, Counter32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Gauge32", "NotificationType", "TimeTicks", "ObjectIdentity", "Unsigned32", "IpAddress", "Bits", "Counter32", "Integer32", "iso")
DisplayString, TruthValue, MacAddress, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "DateAndTime", "TextualConvention")
rdnCableTrafficManagementMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 10))
rdnCableTrafficManagementMib.setRevisions(('2008-09-16 00:00', '2008-02-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rdnCableTrafficManagementMib.setRevisionsDescriptions(("Added Copyright Statement into MIB modules's description.", 'Initial Version. ',))
if mibBuilder.loadTexts: rdnCableTrafficManagementMib.setLastUpdated('200809160000Z')
if mibBuilder.loadTexts: rdnCableTrafficManagementMib.setOrganization('Motorola')
if mibBuilder.loadTexts: rdnCableTrafficManagementMib.setContactInfo('Motorola Customer Service 101 Tournament Drive Horsham, PA 19044 US Tel: +1 888 944 4357 Int Tel: +1 215 323 0044 Fax: +1 215 323 1502 Email: CPSSupport@Motorola.com')
if mibBuilder.loadTexts: rdnCableTrafficManagementMib.setDescription('MIB module for Motorola Cable Traffic Policy. Copyright (C) 2008 by Motorola, Inc. All rights reserved.')
rdnCtmScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 10, 1))
rdnCtmEnforcedClear = MibScalar((1, 3, 6, 1, 4, 1, 4981, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnCtmEnforcedClear.setReference('Proprietary MIB, defined in CTM Product Functional Specification.')
if mibBuilder.loadTexts: rdnCtmEnforcedClear.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedClear.setDescription('Clears all monitored traffic counts thereby ending any enforcement in effect.')
rdnCtmEnforcedSince = MibScalar((1, 3, 6, 1, 4, 1, 4981, 10, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedSince.setReference('Proprietary MIB, defined in CTM Product Functional Specification.')
if mibBuilder.loadTexts: rdnCtmEnforcedSince.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedSince.setDescription("Time at which cable traffic enforcement history was last cleared via CLI command, 'clear cable traffic history' or by writing a '1' to the object rdnCtmClearHistory.")
rdnCtmClearHistory = MibScalar((1, 3, 6, 1, 4, 1, 4981, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnCtmClearHistory.setReference('Proprietary MIB, defined in CTM Product Functional Specification.')
if mibBuilder.loadTexts: rdnCtmClearHistory.setStatus('current')
if mibBuilder.loadTexts: rdnCtmClearHistory.setDescription("This object is always read as the value noAction(1). Writing the value clear(2) clears the history of last enforcement for each monitored service flow as reported in the object rdnCtmEnforcedLast and the 'LastEnforced' column of the output of the CLI command 'show cable subscriber-usage'.")
rdnCtmSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 10, 2), )
if mibBuilder.loadTexts: rdnCtmSummaryTable.setReference('Proprietary MIB, defined in CTM Product Functional Specification.')
if mibBuilder.loadTexts: rdnCtmSummaryTable.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryTable.setDescription('Summarizes the operation of the cable traffic management feature. Each entry summarizes the operation of a single cable traffic policy on a single cable interface.')
rdnCtmSummaryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1), ).setIndexNames((0, "RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", "rdnCtmSummaryIfIndex"), (0, "RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", "rdnCtmSummaryDirection"), (0, "RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", "rdnCtmSummaryTrafficPolicy"))
if mibBuilder.loadTexts: rdnCtmSummaryTableEntry.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryTableEntry.setDescription('The entry indexes are ifindex, direction, and cable traffic policy name. The direction is included as an index in order to sort the entries by direction.')
rdnCtmSummaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rdnCtmSummaryIfIndex.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryIfIndex.setDescription('MAC Domain ifIndex.')
rdnCtmSummaryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downstream", 1), ("upstream", 2))))
if mibBuilder.loadTexts: rdnCtmSummaryDirection.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryDirection.setDescription('Traffic direction.')
rdnCtmSummaryTrafficPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1, 3), DisplayString())
if mibBuilder.loadTexts: rdnCtmSummaryTrafficPolicy.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryTrafficPolicy.setDescription('Name of the cable traffic policy.')
rdnCtmSummaryMonitoredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmSummaryMonitoredCount.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryMonitoredCount.setDescription('The sum of the monitored counts for all flows controlled by the cable traffic policy on the interface of this entry.')
rdnCtmSummaryTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmSummaryTotalFlows.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryTotalFlows.setDescription('Total number of service flows controlled by the cable traffic policy on a cable interface (i.e. MAC domain).')
rdnCtmSummaryEnforcedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmSummaryEnforcedFlows.setStatus('current')
if mibBuilder.loadTexts: rdnCtmSummaryEnforcedFlows.setDescription('Number of service flows currently exceeding their credit limit while controlled by the cable traffic policy on a cable interface (i.e. MAC domain).')
rdnCtmEnforcedTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 10, 3), )
if mibBuilder.loadTexts: rdnCtmEnforcedTable.setReference('Proprietary MIB, as described in the CTM Product Functional Specification.')
if mibBuilder.loadTexts: rdnCtmEnforcedTable.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedTable.setDescription("Table of service flows which have exceeded their credit limit and been enforced since the last clearing of cable traffic history. Cable traffic history is cleared with the CLI command 'clear cable traffic history' or by writing clear(1) to the object rdnCtmClearHistory. This table does not include entries for service flows with rate limits reduced due to bidirectional enforcement.")
rdnCtmEnforcedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1), ).setIndexNames((0, "RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", "rdnCtmEnforcedIfIndex"), (0, "RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", "rdnCtmEnforcedDirection"), (0, "RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", "rdnCtmEnforcedServiceFlowId"))
if mibBuilder.loadTexts: rdnCtmEnforcedTableEntry.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedTableEntry.setDescription('Each entry corresponds to a single service flow which started enforcement due to exceeding its credit limit since the last clearing of cable traffic history.')
rdnCtmEnforcedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rdnCtmEnforcedIfIndex.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedIfIndex.setDescription('The mac domain interface index that the service flow is admitted to.')
rdnCtmEnforcedDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downstream", 1), ("upstream", 2))))
if mibBuilder.loadTexts: rdnCtmEnforcedDirection.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedDirection.setDescription('Direction of service flow.')
rdnCtmEnforcedServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: rdnCtmEnforcedServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedServiceFlowId.setDescription('The service flow ID.')
rdnCtmEnforcedCmMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedCmMacAddr.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedCmMacAddr.setDescription('The mac Address of modem to which service flow belongs.')
rdnCtmEnforcedTrafficPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedTrafficPolicy.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedTrafficPolicy.setDescription('The cable traffic policy which service flow is controlled by.')
rdnCtmEnforcedMonitoredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedMonitoredCount.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedMonitoredCount.setDescription("For 'continuous' monitored policies, represents the excess traffic beyond the enforce rate for this service flow. For 'peak-interval' monitoring, represents the total traffic transferred in the curent or last completed peak-time interval. Units are kilobytes, with 1024 bytes per kilobyte.")
rdnCtmEnforcedLast = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedLast.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedLast.setDescription('The amount of time since the service flow was last enforced. This field will be empty if it has not been enforced since the last time cable traffic history was cleared or since system start.')
rdnCtmEnforcedRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedRemain.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedRemain.setDescription('The minimum amount of time a service flow is to remain under enforcement.')
rdnCtmEnforcedLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedLimitRate.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedLimitRate.setDescription("The current scheduler limit rate for the service flow in kbps. This is either the configured maximum rate or the policy's enforce rate if flow is currently under enforcement. Units are kilobits per second, with 1000 bits per kilobit.")
rdnCtmEnforcedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("bidirectional", 2), ("enforced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedReason.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedReason.setDescription("Indicates if the service flow's rate limit is currently reduced due to the cable traffic management feature. The value of configured(1) indicates the service flow is not reduced by the feature, i.e. it is limited to its configured maximum rate. The value of bidirectional(2) is reserved for future use. The rdnCtmEnforcedTable does not include flows reduced due to bidirectional enforcement. The value of enforced(3) indicates a service flow is currently enforced, i.e. it has over-consumed its monitored traffic credit limit.")
rdnCtmEnforcedMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 10, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCtmEnforcedMonitored.setStatus('current')
if mibBuilder.loadTexts: rdnCtmEnforcedMonitored.setDescription('Indiacates if the service flow is currently being monitored, either true(1) or false(2).')
mibBuilder.exportSymbols("RDN-CABLE-TRAFFIC-MANAGEMENT-MIB", PYSNMP_MODULE_ID=rdnCableTrafficManagementMib, rdnCtmEnforcedMonitoredCount=rdnCtmEnforcedMonitoredCount, rdnCtmEnforcedServiceFlowId=rdnCtmEnforcedServiceFlowId, rdnCtmEnforcedMonitored=rdnCtmEnforcedMonitored, rdnCtmEnforcedRemain=rdnCtmEnforcedRemain, rdnCtmSummaryTotalFlows=rdnCtmSummaryTotalFlows, rdnCtmScalar=rdnCtmScalar, rdnCtmClearHistory=rdnCtmClearHistory, rdnCtmEnforcedClear=rdnCtmEnforcedClear, rdnCableTrafficManagementMib=rdnCableTrafficManagementMib, rdnCtmEnforcedReason=rdnCtmEnforcedReason, rdnCtmSummaryDirection=rdnCtmSummaryDirection, rdnCtmSummaryEnforcedFlows=rdnCtmSummaryEnforcedFlows, rdnCtmSummaryTable=rdnCtmSummaryTable, rdnCtmEnforcedTableEntry=rdnCtmEnforcedTableEntry, rdnCtmSummaryIfIndex=rdnCtmSummaryIfIndex, rdnCtmEnforcedDirection=rdnCtmEnforcedDirection, rdnCtmEnforcedLimitRate=rdnCtmEnforcedLimitRate, rdnCtmSummaryTrafficPolicy=rdnCtmSummaryTrafficPolicy, rdnCtmEnforcedCmMacAddr=rdnCtmEnforcedCmMacAddr, rdnCtmEnforcedTable=rdnCtmEnforcedTable, rdnCtmEnforcedTrafficPolicy=rdnCtmEnforcedTrafficPolicy, rdnCtmEnforcedLast=rdnCtmEnforcedLast, rdnCtmSummaryTableEntry=rdnCtmSummaryTableEntry, rdnCtmSummaryMonitoredCount=rdnCtmSummaryMonitoredCount, rdnCtmEnforcedIfIndex=rdnCtmEnforcedIfIndex, rdnCtmEnforcedSince=rdnCtmEnforcedSince)
