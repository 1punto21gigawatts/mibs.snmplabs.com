#
# PySNMP MIB module CADANT-TRAP-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-TRAP-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cadNotification, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadNotification")
InetAddressIPv4or6, = mibBuilder.importSymbols("CADANT-TC", "InetAddressIPv4or6")
docsDevEvControlEntry, = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvControlEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Unsigned32, MibIdentifier, Integer32, Counter64, Bits, ModuleIdentity, IpAddress, iso, NotificationType, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "MibIdentifier", "Integer32", "Counter64", "Bits", "ModuleIdentity", "IpAddress", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
cadTrapLogMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2))
cadTrapLogMib.setRevisions(('2006-04-20 00:00', '2005-03-31 00:00', '2004-03-16 00:00', '2004-02-04 00:00', '2003-06-30 00:00', '2003-05-30 00:00', '2003-05-07 00:00', '2003-04-29 00:00', '2002-08-13 00:00', '2002-08-06 00:00', '2001-06-19 00:00', '2001-06-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadTrapLogMib.setRevisionsDescriptions(('Add event priority override.', 'Add CM Registration notification control.', 'CM reset traps should be disabled by default.', 'Add CMResetClear notification control.', 'Add global CM reset notification control.', 'Added cadCliAuthToLogLevelTable objects', 'Changed default of cadLogHistorySize to be 2000', 'Removed cadR101LoggingEnabled and cadR102LoggingEnabled. Moved cadTrapLogMib from cadExperimental.6 to cadNotification.2', 'Modify to make syslog svr table conform to standards', 'Add syslog server table', 'Added more gloabls variables and cadEvControlTable.', 'Created.',))
if mibBuilder.loadTexts: cadTrapLogMib.setLastUpdated('200604200000Z')
if mibBuilder.loadTexts: cadTrapLogMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadTrapLogMib.setContactInfo('support@arrisi.com')
if mibBuilder.loadTexts: cadTrapLogMib.setDescription('This MIB defines objects which are used to control and report on Cadant proprietary event notificaton (trap) and logging operation.')
cadTrapLogGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 1))
cadProprietaryLoggingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadProprietaryLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: cadProprietaryLoggingEnabled.setDescription(' If this value is set to true, then all Cadant proprietary log entries are enabled. Otherwise, the syslog logs will consist only of standard logs entries. ')
cadLocalLogSize = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLocalLogSize.setStatus('current')
if mibBuilder.loadTexts: cadLocalLogSize.setDescription(' The maximum size of the local log, in number of entries. The local log is only what is put into the docsDevEventTable. ')
cadLogHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadLogHistorySize.setStatus('current')
if mibBuilder.loadTexts: cadLogHistorySize.setDescription(' The maximum size of the log history, in number of entries. This log contains both Cadant prioprietary and DOCSIS notifications. ')
cadSyslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local0", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadSyslogFacility.setStatus('current')
if mibBuilder.loadTexts: cadSyslogFacility.setDescription(' The syslog logging facility. ')
cadCmTrapInhibit = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 1, 5), Bits().clone(namedValues=NamedValues(("resetRanging", 0), ("resetProvisioning", 1), ("resetRegistered", 2), ("resetClear", 3), ("registered", 4))).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmTrapInhibit.setStatus('current')
if mibBuilder.loadTexts: cadCmTrapInhibit.setDescription(' Controls the generation of SNMP traps regarding to CM status change. A cleared bit indicates that a trap must be generated if a CM resets while in the corresponding state. If resetRanging(0) is clear, a CM reset while in the ranging state will generate a cmResetNotification trap. If resetProvisioning(1) is clear, a CM reset while in the rangingComplete or ipComplete states will generate a cmResetNotification trap. If resetRegistered(2) is clear, a CM reset while in the registrationComplete state will generate a cmResetNotification trap. If resetClear(3) is clear, a on-line CM from previous flap will generate a cmResetClearNotification trap. If registered(4) is clear, a registered CM will generate a cmRegistrationNotification trap.')
cadEvControlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: cadEvControlTable.setStatus('current')
if mibBuilder.loadTexts: cadEvControlTable.setDescription('This table allows control of the reporting of event classes. For each event priority, a combination of logging and reporting mechanisms may be chosen.')
cadEvControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 2, 1), )
docsDevEvControlEntry.registerAugmentions(("CADANT-TRAP-LOG-MIB", "cadEvControlEntry"))
cadEvControlEntry.setIndexNames(*docsDevEvControlEntry.getIndexNames())
if mibBuilder.loadTexts: cadEvControlEntry.setStatus('current')
if mibBuilder.loadTexts: cadEvControlEntry.setDescription('Allows configuration of the reporting mechanisms for a particular event priority.')
cadEvReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 2, 1, 1), Bits().clone(namedValues=NamedValues(("console", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadEvReporting.setStatus('current')
if mibBuilder.loadTexts: cadEvReporting.setDescription(' Currently, only the console destination is persistent in SNMP. Transient sessions, such as telnet, are not configurable via the MIB. Those are configurable only via CLI. ')
cadEvOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 3), )
if mibBuilder.loadTexts: cadEvOverrideTable.setStatus('current')
if mibBuilder.loadTexts: cadEvOverrideTable.setDescription('This table allows the event priority to be overridden. Each entry indicates an override condition for the given event.')
cadEvOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 3, 1), ).setIndexNames((0, "CADANT-TRAP-LOG-MIB", "cadEvOvrdEvId"))
if mibBuilder.loadTexts: cadEvOverrideEntry.setStatus('current')
if mibBuilder.loadTexts: cadEvOverrideEntry.setDescription('Allows configuration of the event priority overrides.')
cadEvOvrdEvId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadEvOvrdEvId.setStatus('current')
if mibBuilder.loadTexts: cadEvOvrdEvId.setDescription('Uniquely identifies the type of event that is reported by this entry.')
cadEvOvrdState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admit", 1), ("inhibit", 2), ("priority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEvOvrdState.setStatus('current')
if mibBuilder.loadTexts: cadEvOvrdState.setDescription('Indicates the current override state of the event. admit allows the event to be generated and inhibit prevents the event from being generated regardless of the priority is enabled for the event. Setting the priority allows the event to generated with the desired priority.')
cadEvOvrdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEvOvrdRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadEvOvrdRowStatus.setDescription('This variable indicates the status of the entry. Valid values for a set include createAndGo(4) and destroy(6).')
cadEvOvrdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("invalid", 0), ("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadEvOvrdPriority.setStatus('current')
if mibBuilder.loadTexts: cadEvOvrdPriority.setDescription('This field is only valid when the override state is set to priority and indicates the priority level that should be used when this notification is generated.')
cadSyslogSvrTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 4), )
if mibBuilder.loadTexts: cadSyslogSvrTable.setStatus('current')
if mibBuilder.loadTexts: cadSyslogSvrTable.setDescription('This table stores syslog server information when there is more than one syslog server configured.')
cadSyslogSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 4, 1), ).setIndexNames((0, "CADANT-TRAP-LOG-MIB", "cadSyslogSvrIpAddr"))
if mibBuilder.loadTexts: cadSyslogSvrEntry.setStatus('current')
if mibBuilder.loadTexts: cadSyslogSvrEntry.setDescription('Syslog server information.')
cadSyslogSvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 4, 1, 1), InetAddressIPv4or6())
if mibBuilder.loadTexts: cadSyslogSvrIpAddr.setStatus('current')
if mibBuilder.loadTexts: cadSyslogSvrIpAddr.setDescription('IP address of the syslog server.')
cadSyslogSvrFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local0", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadSyslogSvrFacility.setStatus('current')
if mibBuilder.loadTexts: cadSyslogSvrFacility.setDescription('Facility associated with the syslog server.')
cadSyslogSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadSyslogSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadSyslogSvrRowStatus.setDescription('This variable displays the status of the entry.')
cadCliAuthToLogLevelTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 5), )
if mibBuilder.loadTexts: cadCliAuthToLogLevelTable.setStatus('current')
if mibBuilder.loadTexts: cadCliAuthToLogLevelTable.setDescription('This table is used to configure the logging level for each of the CLI authorization levels.')
cadCliAuthToLogLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 5, 1), ).setIndexNames((0, "CADANT-TRAP-LOG-MIB", "cadCliAuthLevel"))
if mibBuilder.loadTexts: cadCliAuthToLogLevelEntry.setStatus('current')
if mibBuilder.loadTexts: cadCliAuthToLogLevelEntry.setDescription('Syslog server information.')
cadCliAuthLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cadCliAuthLevel.setStatus('current')
if mibBuilder.loadTexts: cadCliAuthLevel.setDescription('A CLI authorization level.')
cadCliLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCliLogLevel.setStatus('current')
if mibBuilder.loadTexts: cadCliLogLevel.setDescription('The logging level that all commands assigned to this authorization level will be output at when executed.')
cadTrapLogMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10))
cadTrapLogCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 1))
cadTrapLogGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 2))
cadTrapLogCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 1, 1)).setObjects(("CADANT-TRAP-LOG-MIB", "cadTrapLogGlobalsGroup"), ("CADANT-TRAP-LOG-MIB", "cadTrapLogEventGroup"), ("CADANT-TRAP-LOG-MIB", "cadSyslogGroup"), ("CADANT-TRAP-LOG-MIB", "cadCliAuthToLogLevelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadTrapLogCompliance = cadTrapLogCompliance.setStatus('current')
if mibBuilder.loadTexts: cadTrapLogCompliance.setDescription(' Compliance statement for entities implementing the CADANT-TRAP-LOG-MIB')
cadTrapLogGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 2, 1)).setObjects(("CADANT-TRAP-LOG-MIB", "cadProprietaryLoggingEnabled"), ("CADANT-TRAP-LOG-MIB", "cadLocalLogSize"), ("CADANT-TRAP-LOG-MIB", "cadLogHistorySize"), ("CADANT-TRAP-LOG-MIB", "cadSyslogFacility"), ("CADANT-TRAP-LOG-MIB", "cadCmTrapInhibit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadTrapLogGlobalsGroup = cadTrapLogGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: cadTrapLogGlobalsGroup.setDescription('Global trap and logging objects')
cadTrapLogEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 2, 2)).setObjects(("CADANT-TRAP-LOG-MIB", "cadEvReporting"), ("CADANT-TRAP-LOG-MIB", "cadEvOvrdEvId"), ("CADANT-TRAP-LOG-MIB", "cadEvOvrdState"), ("CADANT-TRAP-LOG-MIB", "cadEvOvrdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadTrapLogEventGroup = cadTrapLogEventGroup.setStatus('current')
if mibBuilder.loadTexts: cadTrapLogEventGroup.setDescription('Trap and log event control objects')
cadSyslogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 2, 3)).setObjects(("CADANT-TRAP-LOG-MIB", "cadSyslogSvrFacility"), ("CADANT-TRAP-LOG-MIB", "cadSyslogSvrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadSyslogGroup = cadSyslogGroup.setStatus('current')
if mibBuilder.loadTexts: cadSyslogGroup.setDescription('Syslog control objects')
cadCliAuthToLogLevelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 6, 2, 10, 2, 4)).setObjects(("CADANT-TRAP-LOG-MIB", "cadCliLogLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadCliAuthToLogLevelGroup = cadCliAuthToLogLevelGroup.setStatus('current')
if mibBuilder.loadTexts: cadCliAuthToLogLevelGroup.setDescription('CLI authorization to log level mapping control objects')
mibBuilder.exportSymbols("CADANT-TRAP-LOG-MIB", cadSyslogSvrRowStatus=cadSyslogSvrRowStatus, cadSyslogSvrIpAddr=cadSyslogSvrIpAddr, cadTrapLogCompliance=cadTrapLogCompliance, cadEvOvrdRowStatus=cadEvOvrdRowStatus, cadTrapLogGroups=cadTrapLogGroups, cadEvOvrdEvId=cadEvOvrdEvId, PYSNMP_MODULE_ID=cadTrapLogMib, cadProprietaryLoggingEnabled=cadProprietaryLoggingEnabled, cadLogHistorySize=cadLogHistorySize, cadLocalLogSize=cadLocalLogSize, cadSyslogFacility=cadSyslogFacility, cadTrapLogCompliances=cadTrapLogCompliances, cadEvOverrideTable=cadEvOverrideTable, cadEvOvrdPriority=cadEvOvrdPriority, cadEvOverrideEntry=cadEvOverrideEntry, cadSyslogGroup=cadSyslogGroup, cadCliAuthToLogLevelEntry=cadCliAuthToLogLevelEntry, cadEvOvrdState=cadEvOvrdState, cadTrapLogMib=cadTrapLogMib, cadCliAuthToLogLevelGroup=cadCliAuthToLogLevelGroup, cadTrapLogMibConformance=cadTrapLogMibConformance, cadSyslogSvrTable=cadSyslogSvrTable, cadTrapLogEventGroup=cadTrapLogEventGroup, cadEvControlEntry=cadEvControlEntry, cadEvReporting=cadEvReporting, cadSyslogSvrFacility=cadSyslogSvrFacility, cadTrapLogGlobalsGroup=cadTrapLogGlobalsGroup, cadTrapLogGlobals=cadTrapLogGlobals, cadCliLogLevel=cadCliLogLevel, cadCliAuthToLogLevelTable=cadCliAuthToLogLevelTable, cadCmTrapInhibit=cadCmTrapInhibit, cadSyslogSvrEntry=cadSyslogSvrEntry, cadEvControlTable=cadEvControlTable, cadCliAuthLevel=cadCliAuthLevel)
