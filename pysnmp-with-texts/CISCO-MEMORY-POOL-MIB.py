#
# PySNMP MIB module CISCO-MEMORY-POOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MEMORY-POOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
Percent, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, ModuleIdentity, Unsigned32, Counter64, TimeTicks, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Gauge32, Counter32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter64", "TimeTicks", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Gauge32", "Counter32", "Bits", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoMemoryPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 48))
ciscoMemoryPoolMIB.setRevisions(('2013-09-18 00:00', '2001-07-31 00:00', '1996-02-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setRevisionsDescriptions(('Added new notification ciscoMemoryPoolLowMemoryNotif. Added new notification ciscoMemoryPoolLowMemoryRecoveryNotif. Added new object ciscoMemoryPoolLowMemoryNotifEnable. Added new object ciscoMemoryPoolLowMemoryNotifThreshold. Added new group ciscoMemoryPoolGroupRev1 which deprecates ciscoMemoryPoolGroup. Added new compliance ciscoMemoryPoolComplianceRev2 which deprecates ciscoMemoryPoolComplianceRev1.', 'Added a new table, ciscoMemoryPoolUtilizationTable, which provides information about memory utilization.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setLastUpdated('201309180000Z')
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setContactInfo('Postal: Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoMemoryPoolMIB.setDescription('MIB module for monitoring memory pools')
class CiscoMemoryPoolTypes(TextualConvention, Integer32):
    description = 'Represents the different types of memory pools that may be present in a managed device. Memory pools can be roughly categorized into two groups, predefined pools and dynamic pools. The following pool types are currently predefined: 1: processor memory 2: i/o memory 3: pci memory 4: fast memory 5: multibus memory Dynamic pools will have a pool type value greater than any of the predefined types listed above. Note that only the processor pool is required to be supported by all devices. Support for other pool types is dependent on the device being managed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

ciscoMemoryPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 1))
ciscoMemoryPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1), )
if mibBuilder.loadTexts: ciscoMemoryPoolTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolTable.setDescription('A table of memory pool monitoring entries.')
ciscoMemoryPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1), ).setIndexNames((0, "CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolType"))
if mibBuilder.loadTexts: ciscoMemoryPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolEntry.setDescription('An entry in the memory pool monitoring table.')
ciscoMemoryPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 1), CiscoMemoryPoolTypes())
if mibBuilder.loadTexts: ciscoMemoryPoolType.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolType.setDescription('The type of memory pool for which this entry contains information.')
ciscoMemoryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolName.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolName.setDescription('A textual name assigned to the memory pool. This object is suitable for output to a human operator, and may also be used to distinguish among the various pool types, especially among dynamic pools.')
ciscoMemoryPoolAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolAlternate.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolAlternate.setDescription('Indicates whether or not this memory pool has an alternate pool configured. Alternate pools are used for fallback when the current pool runs out of memory. If an instance of this object has a value of zero, then this pool does not have an alternate. Otherwise the value of this object is the same as the value of ciscoMemoryPoolType of the alternate pool.')
ciscoMemoryPoolValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolValid.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolValid.setDescription('Indicates whether or not the remaining objects in this entry contain accurate data. If an instance of this object has the value false (which in and of itself indicates an internal error condition), the values of the remaining objects in the conceptual row may contain inaccurate information (specifically, the reported values may be less than the actual values).')
ciscoMemoryPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUsed.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUsed.setDescription('Indicates the number of bytes from the memory pool that are currently in use by applications on the managed device.')
ciscoMemoryPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolFree.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolFree.setDescription('Indicates the number of bytes from the memory pool that are currently unused on the managed device. Note that the sum of ciscoMemoryPoolUsed and ciscoMemoryPoolFree is the total amount of memory in the pool')
ciscoMemoryPoolLargestFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolLargestFree.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolLargestFree.setDescription('Indicates the largest number of contiguous bytes from the memory pool that are currently unused on the managed device.')
ciscoMemoryPoolLowMemoryNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 1, 1, 8), Percent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryNotifThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryNotifThreshold.setDescription("This object is used to indicate the threshold value in percentage of free memory remaining in a memory pool. If the free memory available goes below this threshold value and if ciscoMemoryPoolLowMemoryNotifEnable is set to 'true', ciscoMemoryPoolLowMemoryNotif will be generated. When the available free memory comes back to the threshold value ciscoMemoryPoolLowMemoryRecoveryNotif will be generated.")
ciscoMemoryPoolUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2), )
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationTable.setDescription('A table of memory pool utilization entries. Each of the objects provides a general idea of how much of the memory pool has been used over a given period of time. It is determined as a weighted decaying average.')
ciscoMemoryPoolUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1), )
ciscoMemoryPoolEntry.registerAugmentions(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilizationEntry"))
ciscoMemoryPoolUtilizationEntry.setIndexNames(*ciscoMemoryPoolEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationEntry.setDescription('An entry in the memory pool utilization table.')
ciscoMemoryPoolUtilization1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1, 1), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization1Min.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization1Min.setDescription('This is the memory pool utilization for 1 minute.')
ciscoMemoryPoolUtilization5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1, 2), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization5Min.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization5Min.setDescription('This is the memory pool utilization for 5 minutes.')
ciscoMemoryPoolUtilization10Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 2, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization10Min.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUtilization10Min.setDescription('This is the memory pool utilization for 10 minutes.')
ciscoMemoryPoolLowMemoryNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 48, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryNotifEnable.setDescription("This object is used to enable or disable the generation of notification when the available memory in the system has fallen below ciscoMemoryPoolLowMemoryNotifThreshold and on recovery. Setting this object to 'true' will generate ciscoMemoryPoolLowMemoryNotif and ciscoMemoryPoolLowMemoryRecoveryNotif. Setting this object to 'false' will disable the generation of ciscoMemoryPoolLowMemoryNotif and ciscoMemoryPoolLowMemoryRecoveryNotif.")
ciscoMemoryPoolNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 2))
ciscoMemoryPoolMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 2, 0))
ciscoMemoryPoolLowMemoryNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 48, 2, 0, 1)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolName"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUsed"))
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryNotif.setDescription("This notification is generated when the percentage of free memory in the system has fallen below ciscoMemoryPoolLowMemoryNotifThreshold and when the value of ciscoMemoryPoolLowMemoryNotifEnable is set to 'true'. ciscoMemoryPoolName indicates the name of the memory pool for which the notification is being generated. ciscoMemoryPoolUsed indicates the used memory in bytes for the memory pool.")
ciscoMemoryPoolLowMemoryRecoveryNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 48, 2, 0, 2)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolName"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUsed"))
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryRecoveryNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolLowMemoryRecoveryNotif.setDescription("This notification is generated when the percentage of free memory in the system has returned to ciscoMemoryPoolLowMemoryNotifThreshold after suffering from a low memory. This notification is generated when the value of ciscoMemoryPoolLowMemoryNotifEnable is set to 'true'. This notification is generated as a recovery notification for ciscoMemoryPoolLowMemoryNotif. ciscoMemoryPoolName indicates the name of the memory pool for which the notification is being generated. ciscoMemoryPoolUsed indicates the used memory in bytes for the memory pool.")
ciscoMemoryPoolConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 3))
ciscoMemoryPoolCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1))
ciscoMemoryPoolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2))
ciscoMemoryPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1, 1)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolCompliance = ciscoMemoryPoolCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMemoryPoolCompliance.setDescription('The compliance statement for entities which implement the Cisco Memory Pool MIB')
ciscoMemoryPoolComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1, 2)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolGroup"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilizationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolComplianceRev1 = ciscoMemoryPoolComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMemoryPoolComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Memory Pool MIB')
ciscoMemoryPoolComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 1, 3)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolGroupRev1"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilizationGroup"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolNotificationGroup"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolNotificationCtrlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolComplianceRev2 = ciscoMemoryPoolComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Memory Pool MIB')
ciscoMemoryPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 1)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolName"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolAlternate"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolValid"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUsed"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolFree"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLargestFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolGroup = ciscoMemoryPoolGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoMemoryPoolGroup.setDescription('A collection of objects providing memory pool monitoring.')
ciscoMemoryPoolUtilizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 2)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilization1Min"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilization5Min"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUtilization10Min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolUtilizationGroup = ciscoMemoryPoolUtilizationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolUtilizationGroup.setDescription('An optional group providing a collection of memory pool utilization objects.')
ciscoMemoryPoolNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 3)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLowMemoryNotif"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLowMemoryRecoveryNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolNotificationGroup = ciscoMemoryPoolNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolNotificationGroup.setDescription('A collection of all the notifications supported in the CISCO-MEMORY-POOL-MIB.')
ciscoMemoryPoolNotificationCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 4)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLowMemoryNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolNotificationCtrlGroup = ciscoMemoryPoolNotificationCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolNotificationCtrlGroup.setDescription('A collection of all the notification control objects.')
ciscoMemoryPoolGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 48, 3, 2, 5)).setObjects(("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolName"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolAlternate"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolValid"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolUsed"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolFree"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLargestFree"), ("CISCO-MEMORY-POOL-MIB", "ciscoMemoryPoolLowMemoryNotifThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMemoryPoolGroupRev1 = ciscoMemoryPoolGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoMemoryPoolGroupRev1.setDescription('A collection of objects providing memory pool monitoring.')
mibBuilder.exportSymbols("CISCO-MEMORY-POOL-MIB", ciscoMemoryPoolLowMemoryNotifThreshold=ciscoMemoryPoolLowMemoryNotifThreshold, ciscoMemoryPoolComplianceRev2=ciscoMemoryPoolComplianceRev2, ciscoMemoryPoolUtilization1Min=ciscoMemoryPoolUtilization1Min, ciscoMemoryPoolGroup=ciscoMemoryPoolGroup, CiscoMemoryPoolTypes=CiscoMemoryPoolTypes, ciscoMemoryPoolName=ciscoMemoryPoolName, ciscoMemoryPoolNotificationCtrlGroup=ciscoMemoryPoolNotificationCtrlGroup, PYSNMP_MODULE_ID=ciscoMemoryPoolMIB, ciscoMemoryPoolMIBNotificationPrefix=ciscoMemoryPoolMIBNotificationPrefix, ciscoMemoryPoolValid=ciscoMemoryPoolValid, ciscoMemoryPoolConformance=ciscoMemoryPoolConformance, ciscoMemoryPoolEntry=ciscoMemoryPoolEntry, ciscoMemoryPoolLowMemoryNotif=ciscoMemoryPoolLowMemoryNotif, ciscoMemoryPoolLowMemoryNotifEnable=ciscoMemoryPoolLowMemoryNotifEnable, ciscoMemoryPoolCompliances=ciscoMemoryPoolCompliances, ciscoMemoryPoolComplianceRev1=ciscoMemoryPoolComplianceRev1, ciscoMemoryPoolUtilization5Min=ciscoMemoryPoolUtilization5Min, ciscoMemoryPoolUtilizationTable=ciscoMemoryPoolUtilizationTable, ciscoMemoryPoolMIB=ciscoMemoryPoolMIB, ciscoMemoryPoolCompliance=ciscoMemoryPoolCompliance, ciscoMemoryPoolGroups=ciscoMemoryPoolGroups, ciscoMemoryPoolTable=ciscoMemoryPoolTable, ciscoMemoryPoolUtilizationEntry=ciscoMemoryPoolUtilizationEntry, ciscoMemoryPoolUsed=ciscoMemoryPoolUsed, ciscoMemoryPoolObjects=ciscoMemoryPoolObjects, ciscoMemoryPoolUtilizationGroup=ciscoMemoryPoolUtilizationGroup, ciscoMemoryPoolLowMemoryRecoveryNotif=ciscoMemoryPoolLowMemoryRecoveryNotif, ciscoMemoryPoolLargestFree=ciscoMemoryPoolLargestFree, ciscoMemoryPoolType=ciscoMemoryPoolType, ciscoMemoryPoolGroupRev1=ciscoMemoryPoolGroupRev1, ciscoMemoryPoolUtilization10Min=ciscoMemoryPoolUtilization10Min, ciscoMemoryPoolFree=ciscoMemoryPoolFree, ciscoMemoryPoolNotifications=ciscoMemoryPoolNotifications, ciscoMemoryPoolAlternate=ciscoMemoryPoolAlternate, ciscoMemoryPoolNotificationGroup=ciscoMemoryPoolNotificationGroup)
