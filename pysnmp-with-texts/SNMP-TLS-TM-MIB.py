#
# PySNMP MIB module SNMP-TLS-TM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNMP-TLS-TM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:08:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
snmpTargetAddrName, snmpTargetParamsName = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetAddrName", "snmpTargetParamsName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, mib_2, ModuleIdentity, Integer32, TimeTicks, NotificationType, ObjectIdentity, Gauge32, Counter32, Bits, snmpDomains, IpAddress, iso, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "mib-2", "ModuleIdentity", "Integer32", "TimeTicks", "NotificationType", "ObjectIdentity", "Gauge32", "Counter32", "Bits", "snmpDomains", "IpAddress", "iso", "Counter64", "MibIdentifier")
TimeStamp, RowStatus, DisplayString, AutonomousType, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DisplayString", "AutonomousType", "StorageType", "TextualConvention")
snmpTlstmMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 198))
snmpTlstmMIB.setRevisions(('2011-07-19 00:00', '2010-05-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snmpTlstmMIB.setRevisionsDescriptions(('This version of this MIB module is part of RFC 6353; see the RFC itself for full legal notices. The only change was to introduce new wording to reflect require changes for IDNA addresses in the SnmpTLSAddress TC.', 'This version of this MIB module is part of RFC 5953; see the RFC itself for full legal notices.',))
if mibBuilder.loadTexts: snmpTlstmMIB.setLastUpdated('201107190000Z')
if mibBuilder.loadTexts: snmpTlstmMIB.setOrganization('ISMS Working Group')
if mibBuilder.loadTexts: snmpTlstmMIB.setContactInfo('WG-EMail: isms@lists.ietf.org Subscribe: isms-request@lists.ietf.org Chairs: Juergen Schoenwaelder Jacobs University Bremen Campus Ring 1 28725 Bremen Germany +49 421 200-3587 j.schoenwaelder@jacobs-university.de Russ Mundy SPARTA, Inc. 7110 Samuel Morse Drive Columbia, MD 21046 USA Editor: Wes Hardaker SPARTA, Inc. P.O. Box 382 Davis, CA 95617 USA ietf@hardakers.net ')
if mibBuilder.loadTexts: snmpTlstmMIB.setDescription(" The TLS Transport Model MIB Copyright (c) 2010-2011 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
snmpTlstmNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 0))
snmpTlstmIdentities = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 1))
snmpTlstmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2))
snmpTlstmConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 3))
snmpTLSTCPDomain = ObjectIdentity((1, 3, 6, 1, 6, 1, 8))
if mibBuilder.loadTexts: snmpTLSTCPDomain.setStatus('current')
if mibBuilder.loadTexts: snmpTLSTCPDomain.setDescription("The SNMP over TLS via TCP transport domain. The corresponding transport address is of type SnmpTLSAddress. The securityName prefix to be associated with the snmpTLSTCPDomain is 'tls'. This prefix may be used by security models or other components to identify which secure transport infrastructure authenticated a securityName.")
if mibBuilder.loadTexts: snmpTLSTCPDomain.setReference('RFC 2579: Textual Conventions for SMIv2')
snmpDTLSUDPDomain = ObjectIdentity((1, 3, 6, 1, 6, 1, 9))
if mibBuilder.loadTexts: snmpDTLSUDPDomain.setStatus('current')
if mibBuilder.loadTexts: snmpDTLSUDPDomain.setDescription("The SNMP over DTLS via UDP transport domain. The corresponding transport address is of type SnmpTLSAddress. The securityName prefix to be associated with the snmpDTLSUDPDomain is 'dtls'. This prefix may be used by security models or other components to identify which secure transport infrastructure authenticated a securityName.")
if mibBuilder.loadTexts: snmpDTLSUDPDomain.setReference('RFC 2579: Textual Conventions for SMIv2')
class SnmpTLSAddress(TextualConvention, OctetString):
    reference = 'RFC 1123: Requirements for Internet Hosts - Application and Support RFC 5890: Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework RFC 5952: A Recommendation for IPv6 Address Text Representation '
    description = "Represents an IPv4 address, an IPv6 address, or a US-ASCII-encoded hostname and port number. An IPv4 address must be in dotted decimal format followed by a colon ':' (US-ASCII character 0x3A) and a decimal port number in US-ASCII. An IPv6 address must be a colon-separated format (as described in RFC 5952), surrounded by square brackets ('[', US-ASCII character 0x5B, and ']', US-ASCII character 0x5D), followed by a colon ':' (US-ASCII character 0x3A) and a decimal port number in US-ASCII. A hostname is always in US-ASCII (as per RFC 1123); internationalized hostnames are encoded as A-labels as specified in RFC 5890. The hostname is followed by a colon ':' (US-ASCII character 0x3A) and a decimal port number in US-ASCII. The name SHOULD be fully qualified whenever possible. Values of this textual convention may not be directly usable as transport-layer addressing information, and may require run-time resolution. As such, applications that write them must be prepared for handling errors if such values are not supported, or cannot be resolved (if resolution occurs at the time of the management operation). The DESCRIPTION clause of TransportAddress objects that may have SnmpTLSAddress values must fully describe how (and when) such names are to be resolved to IP addresses and vice versa. This textual convention SHOULD NOT be used directly in object definitions since it restricts addresses to a specific format. However, if it is used, it MAY be used either on its own or in conjunction with TransportAddressType or TransportDomain as a pair. When this textual convention is used as a syntax of an index object, there may be issues with the limit of 128 sub-identifiers specified in SMIv2 (STD 58). It is RECOMMENDED that all MIB documents using this textual convention make explicit any limitations on index component lengths that management software must observe. This may be done either by including SIZE constraints on the index components or by specifying applicable constraints in the conceptual row DESCRIPTION clause or in the surrounding documentation."
    status = 'current'
    displayHint = '1a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class SnmpTLSFingerprint(TextualConvention, OctetString):
    reference = 'RFC 5246: The Transport Layer Security (TLS) Protocol Version 1.2 http://www.iana.org/assignments/tls-parameters/ '
    description = 'A fingerprint value that can be used to uniquely reference other data of potentially arbitrary length. An SnmpTLSFingerprint value is composed of a 1-octet hashing algorithm identifier followed by the fingerprint value. The octet value encoded is taken from the IANA TLS HashAlgorithm Registry (RFC 5246). The remaining octets are filled using the results of the hashing algorithm. This TEXTUAL-CONVENTION allows for a zero-length (blank) SnmpTLSFingerprint value for use in tables where the fingerprint value may be optional. MIB definitions or implementations may refuse to accept a zero-length value as appropriate.'
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

snmpTlstmCertToTSNMIdentities = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 1, 1))
snmpTlstmCertSpecified = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 1))
if mibBuilder.loadTexts: snmpTlstmCertSpecified.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertSpecified.setDescription('Directly specifies the tmSecurityName to be used for this certificate. The value of the tmSecurityName to use is specified in the snmpTlstmCertToTSNData column. The snmpTlstmCertToTSNData column must contain a non-zero length SnmpAdminString compliant value or the mapping described in this row must be considered a failure.')
snmpTlstmCertSANRFC822Name = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 2))
if mibBuilder.loadTexts: snmpTlstmCertSANRFC822Name.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertSANRFC822Name.setDescription("Maps a subjectAltName's rfc822Name to a tmSecurityName. The local part of the rfc822Name is passed unaltered but the host-part of the name must be passed in lowercase. This mapping results in a 1:1 correspondence between equivalent subjectAltName rfc822Name values and tmSecurityName values except that the host-part of the name MUST be passed in lowercase. Example rfc822Name Field: FooBar@Example.COM is mapped to tmSecurityName: FooBar@example.com.")
snmpTlstmCertSANDNSName = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 3))
if mibBuilder.loadTexts: snmpTlstmCertSANDNSName.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertSANDNSName.setDescription("Maps a subjectAltName's dNSName to a tmSecurityName after first converting it to all lowercase (RFC 5280 does not specify converting to lowercase so this involves an extra step). This mapping results in a 1:1 correspondence between subjectAltName dNSName values and the tmSecurityName values.")
if mibBuilder.loadTexts: snmpTlstmCertSANDNSName.setReference('RFC 5280 - Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile.')
snmpTlstmCertSANIpAddress = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 4))
if mibBuilder.loadTexts: snmpTlstmCertSANIpAddress.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertSANIpAddress.setDescription("Maps a subjectAltName's iPAddress to a tmSecurityName by transforming the binary encoded address as follows: 1) for IPv4, the value is converted into a decimal-dotted quad address (e.g., '192.0.2.1'). 2) for IPv6 addresses, the value is converted into a 32-character all lowercase hexadecimal string without any colon separators. This mapping results in a 1:1 correspondence between subjectAltName iPAddress values and the tmSecurityName values. The resulting length of an encoded IPv6 address is the maximum length supported by the View-Based Access Control Model (VACM). Using both the Transport Security Model's support for transport prefixes (see the SNMP-TSM-MIB's snmpTsmConfigurationUsePrefix object for details) will result in securityName lengths that exceed what VACM can handle.")
snmpTlstmCertSANAny = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 5))
if mibBuilder.loadTexts: snmpTlstmCertSANAny.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertSANAny.setDescription("Maps any of the following fields using the corresponding mapping algorithms: |------------+----------------------------| | Type | Algorithm | |------------+----------------------------| | rfc822Name | snmpTlstmCertSANRFC822Name | | dNSName | snmpTlstmCertSANDNSName | | iPAddress | snmpTlstmCertSANIpAddress | |------------+----------------------------| The first matching subjectAltName value found in the certificate of the above types MUST be used when deriving the tmSecurityName. The mapping algorithm specified in the 'Algorithm' column MUST be used to derive the tmSecurityName. This mapping results in a 1:1 correspondence between subjectAltName values and tmSecurityName values. The three sub-mapping algorithms produced by this combined algorithm cannot produce conflicting results between themselves.")
snmpTlstmCertCommonName = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 6))
if mibBuilder.loadTexts: snmpTlstmCertCommonName.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertCommonName.setDescription("Maps a certificate's CommonName to a tmSecurityName after converting it to a UTF-8 encoding. The usage of CommonNames is deprecated and users are encouraged to use subjectAltName mapping methods instead. This mapping results in a 1:1 correspondence between certificate CommonName values and tmSecurityName values.")
snmpTlstmSession = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2, 1))
snmpTlstmSessionOpens = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionOpens.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionOpens.setDescription('The number of times an openSession() request has been executed as a (D)TLS client, regardless of whether it succeeded or failed.')
snmpTlstmSessionClientCloses = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionClientCloses.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionClientCloses.setDescription('The number of times a closeSession() request has been executed as a (D)TLS client, regardless of whether it succeeded or failed.')
snmpTlstmSessionOpenErrors = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionOpenErrors.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionOpenErrors.setDescription('The number of times an openSession() request failed to open a session as a (D)TLS client, for any reason.')
snmpTlstmSessionAccepts = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionAccepts.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionAccepts.setDescription('The number of times a (D)TLS server has accepted a new connection from a client and has received at least one SNMP message through it.')
snmpTlstmSessionServerCloses = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionServerCloses.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionServerCloses.setDescription('The number of times a closeSession() request has been executed as a (D)TLS server, regardless of whether it succeeded or failed.')
snmpTlstmSessionNoSessions = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionNoSessions.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionNoSessions.setDescription('The number of times an outgoing message was dropped because the session associated with the passed tmStateReference was no longer (or was never) available.')
snmpTlstmSessionInvalidClientCertificates = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionInvalidClientCertificates.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionInvalidClientCertificates.setDescription('The number of times an incoming session was not established on a (D)TLS server because the presented client certificate was invalid. Reasons for invalidation include, but are not limited to, cryptographic validation failures or lack of a suitable mapping row in the snmpTlstmCertToTSNTable.')
snmpTlstmSessionUnknownServerCertificate = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionUnknownServerCertificate.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionUnknownServerCertificate.setDescription('The number of times an outgoing session was not established on a (D)TLS client because the server certificate presented by an SNMP over (D)TLS server was invalid because no configured fingerprint or Certification Authority (CA) was acceptable to validate it. This may result because there was no entry in the snmpTlstmAddrTable or because no path could be found to a known CA.')
snmpTlstmSessionInvalidServerCertificates = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionInvalidServerCertificates.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionInvalidServerCertificates.setDescription('The number of times an outgoing session was not established on a (D)TLS client because the server certificate presented by an SNMP over (D)TLS server could not be validated even if the fingerprint or expected validation path was known. That is, a cryptographic validation error occurred during certificate validation processing. Reasons for invalidation include, but are not limited to, cryptographic validation failures.')
snmpTlstmSessionInvalidCaches = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionInvalidCaches.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmSessionInvalidCaches.setDescription('The number of outgoing messages dropped because the tmStateReference referred to an invalid cache.')
snmpTlstmConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2, 2))
snmpTlstmCertificateMapping = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2, 2, 1))
snmpTlstmCertToTSNCount = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmCertToTSNCount.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNCount.setDescription('A count of the number of entries in the snmpTlstmCertToTSNTable.')
snmpTlstmCertToTSNTableLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmCertToTSNTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNTableLastChanged.setDescription('The value of sysUpTime.0 when the snmpTlstmCertToTSNTable was last modified through any means, or 0 if it has not been modified since the command responder was started.')
snmpTlstmCertToTSNTable = MibTable((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3), )
if mibBuilder.loadTexts: snmpTlstmCertToTSNTable.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNTable.setDescription("This table is used by a (D)TLS server to map the (D)TLS client's presented X.509 certificate to a tmSecurityName. On an incoming (D)TLS/SNMP connection, the client's presented certificate must either be validated based on an established trust anchor, or it must directly match a fingerprint in this table. This table does not provide any mechanisms for configuring the trust anchors; the transfer of any needed trusted certificates for path validation is expected to occur through an out-of-band transfer. Once the certificate has been found acceptable (either by path validation or directly matching a fingerprint in this table), this table is consulted to determine the appropriate tmSecurityName to identify with the remote connection. This is done by considering each active row from this table in prioritized order according to its snmpTlstmCertToTSNID value. Each row's snmpTlstmCertToTSNFingerprint value determines whether the row is a match for the incoming connection: 1) If the row's snmpTlstmCertToTSNFingerprint value identifies the presented certificate, then consider the row as a successful match. 2) If the row's snmpTlstmCertToTSNFingerprint value identifies a locally held copy of a trusted CA certificate and that CA certificate was used to validate the path to the presented certificate, then consider the row as a successful match. Once a matching row has been found, the snmpTlstmCertToTSNMapType value can be used to determine how the tmSecurityName to associate with the session should be determined. See the snmpTlstmCertToTSNMapType column's DESCRIPTION for details on determining the tmSecurityName value. If it is impossible to determine a tmSecurityName from the row's data combined with the data presented in the certificate, then additional rows MUST be searched looking for another potential match. If a resulting tmSecurityName mapped from a given row is not compatible with the needed requirements of a tmSecurityName (e.g., VACM imposes a 32-octet-maximum length and the certificate derived securityName could be longer), then it must be considered an invalid match and additional rows MUST be searched looking for another potential match. If no matching and valid row can be found, the connection MUST be closed and SNMP messages MUST NOT be accepted over it. Missing values of snmpTlstmCertToTSNID are acceptable and implementations should continue to the next highest numbered row. It is recommended that administrators skip index values to leave room for the insertion of future rows (for example, use values of 10 and 20 when creating initial rows). Users are encouraged to make use of certificates with subjectAltName fields that can be used as tmSecurityNames so that a single root CA certificate can allow all child certificate's subjectAltName to map directly to a tmSecurityName via a 1:1 transformation. However, this table is flexible to allow for situations where existing deployed certificate infrastructures do not provide adequate subjectAltName values for use as tmSecurityNames. Certificates may also be mapped to tmSecurityNames using the CommonName portion of the Subject field. However, the usage of the CommonName field is deprecated and thus this usage is NOT RECOMMENDED. Direct mapping from each individual certificate fingerprint to a tmSecurityName is also possible but requires one entry in the table per tmSecurityName and requires more management operations to completely configure a device.")
snmpTlstmCertToTSNEntry = MibTableRow((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1), ).setIndexNames((0, "SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNID"))
if mibBuilder.loadTexts: snmpTlstmCertToTSNEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNEntry.setDescription('A row in the snmpTlstmCertToTSNTable that specifies a mapping for an incoming (D)TLS certificate to a tmSecurityName to use for a connection.')
snmpTlstmCertToTSNID = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: snmpTlstmCertToTSNID.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNID.setDescription('A unique, prioritized index for the given entry. Lower numbers indicate a higher priority.')
snmpTlstmCertToTSNFingerprint = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 2), SnmpTLSFingerprint().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNFingerprint.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNFingerprint.setDescription('A cryptographic hash of an X.509 certificate. The results of a successful matching fingerprint to either the trusted CA in the certificate validation path or to the certificate itself is dictated by the snmpTlstmCertToTSNMapType column.')
snmpTlstmCertToTSNMapType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 3), AutonomousType().clone((1, 3, 6, 1, 2, 1, 198, 1, 1, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNMapType.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNMapType.setDescription('Specifies the mapping type for deriving a tmSecurityName from a certificate. Details for mapping of a particular type SHALL be specified in the DESCRIPTION clause of the OBJECT-IDENTITY that describes the mapping. If a mapping succeeds it will return a tmSecurityName for use by the TLSTM model and processing stops. If the resulting mapped value is not compatible with the needed requirements of a tmSecurityName (e.g., VACM imposes a 32-octet-maximum length and the certificate derived securityName could be longer), then future rows MUST be searched for additional snmpTlstmCertToTSNFingerprint matches to look for a mapping that succeeds. Suitable values for assigning to this object that are defined within the SNMP-TLS-TM-MIB can be found in the snmpTlstmCertToTSNMIdentities portion of the MIB tree.')
snmpTlstmCertToTSNData = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNData.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNData.setDescription('Auxiliary data used as optional configuration information for a given mapping specified by the snmpTlstmCertToTSNMapType column. Only some mapping systems will make use of this column. The value in this column MUST be ignored for any mapping type that does not require data present in this column.')
snmpTlstmCertToTSNStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNStorageType.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
snmpTlstmCertToTSNRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCertToTSNRowStatus.setDescription('The status of this conceptual row. This object may be used to create or remove rows from this table. To create a row in this table, an administrator must set this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the snmpTlstmParamsRowStatus column is notReady(3). In particular, a newly created row cannot be made active until the corresponding snmpTlstmCertToTSNFingerprint, snmpTlstmCertToTSNMapType, and snmpTlstmCertToTSNData columns have been set. The following objects may not be modified while the value of this object is active(1): - snmpTlstmCertToTSNFingerprint - snmpTlstmCertToTSNMapType - snmpTlstmCertToTSNData An attempt to set these objects while the value of snmpTlstmParamsRowStatus is active(1) will result in an inconsistentValue error.')
snmpTlstmParamsCount = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmParamsCount.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsCount.setDescription('A count of the number of entries in the snmpTlstmParamsTable.')
snmpTlstmParamsTableLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmParamsTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsTableLastChanged.setDescription('The value of sysUpTime.0 when the snmpTlstmParamsTable was last modified through any means, or 0 if it has not been modified since the command responder was started.')
snmpTlstmParamsTable = MibTable((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6), )
if mibBuilder.loadTexts: snmpTlstmParamsTable.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsTable.setDescription("This table is used by a (D)TLS client when a (D)TLS connection is being set up using an entry in the SNMP-TARGET-MIB. It extends the SNMP-TARGET-MIB's snmpTargetParamsTable with a fingerprint of a certificate to use when establishing such a (D)TLS connection.")
snmpTlstmParamsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1), ).setIndexNames((1, "SNMP-TARGET-MIB", "snmpTargetParamsName"))
if mibBuilder.loadTexts: snmpTlstmParamsEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsEntry.setDescription("A conceptual row containing a fingerprint hash of a locally held certificate for a given snmpTargetParamsEntry. The values in this row should be ignored if the connection that needs to be established, as indicated by the SNMP-TARGET-MIB infrastructure, is not a certificate and (D)TLS based connection. The connection SHOULD NOT be established if the certificate fingerprint stored in this entry does not point to a valid locally held certificate or if it points to an unusable certificate (such as might happen when the certificate's expiration date has been reached).")
snmpTlstmParamsClientFingerprint = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1, 1), SnmpTLSFingerprint()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmParamsClientFingerprint.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsClientFingerprint.setDescription('This object stores the hash of the public portion of a locally held X.509 certificate. The X.509 certificate, its public key, and the corresponding private key will be used when initiating a (D)TLS connection as a (D)TLS client.')
snmpTlstmParamsStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmParamsStorageType.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
snmpTlstmParamsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmParamsRowStatus.setDescription('The status of this conceptual row. This object may be used to create or remove rows from this table. To create a row in this table, an administrator must set this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the snmpTlstmParamsRowStatus column is notReady(3). In particular, a newly created row cannot be made active until the corresponding snmpTlstmParamsClientFingerprint column has been set. The snmpTlstmParamsClientFingerprint object may not be modified while the value of this object is active(1). An attempt to set these objects while the value of snmpTlstmParamsRowStatus is active(1) will result in an inconsistentValue error.')
snmpTlstmAddrCount = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmAddrCount.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrCount.setDescription('A count of the number of entries in the snmpTlstmAddrTable.')
snmpTlstmAddrTableLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmAddrTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrTableLastChanged.setDescription('The value of sysUpTime.0 when the snmpTlstmAddrTable was last modified through any means, or 0 if it has not been modified since the command responder was started.')
snmpTlstmAddrTable = MibTable((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9), )
if mibBuilder.loadTexts: snmpTlstmAddrTable.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrTable.setDescription("This table is used by a (D)TLS client when a (D)TLS connection is being set up using an entry in the SNMP-TARGET-MIB. It extends the SNMP-TARGET-MIB's snmpTargetAddrTable so that the client can verify that the correct server has been reached. This verification can use either a certificate fingerprint, or an identity authenticated via certification path validation. If there is an active row in this table corresponding to the entry in the SNMP-TARGET-MIB that was used to establish the connection, and the row's snmpTlstmAddrServerFingerprint column has non-empty value, then the server's presented certificate is compared with the snmpTlstmAddrServerFingerprint value (and the snmpTlstmAddrServerIdentity column is ignored). If the fingerprint matches, the verification has succeeded. If the fingerprint does not match, then the connection MUST be closed. If the server's presented certificate has passed certification path validation [RFC5280] to a configured trust anchor, and an active row exists with a zero-length snmpTlstmAddrServerFingerprint value, then the snmpTlstmAddrServerIdentity column contains the expected host name. This expected host name is then compared against the server's certificate as follows: - Implementations MUST support matching the expected host name against a dNSName in the subjectAltName extension field and MAY support checking the name against the CommonName portion of the subject distinguished name. - The '*' (ASCII 0x2a) wildcard character is allowed in the dNSName of the subjectAltName extension (and in common name, if used to store the host name), but only as the left-most (least significant) DNS label in that value. This wildcard matches any left-most DNS label in the server name. That is, the subject *.example.com matches the server names a.example.com and b.example.com, but does not match example.com or a.b.example.com. Implementations MUST support wildcards in certificates as specified above, but MAY provide a configuration option to disable them. - If the locally configured name is an internationalized domain name, conforming implementations MUST convert it to the ASCII Compatible Encoding (ACE) format for performing comparisons, as specified in Section 7 of [RFC5280]. If the expected host name fails these conditions then the connection MUST be closed. If there is no row in this table corresponding to the entry in the SNMP-TARGET-MIB and the server can be authorized by another, implementation-dependent means, then the connection MAY still proceed.")
snmpTlstmAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1), ).setIndexNames((1, "SNMP-TARGET-MIB", "snmpTargetAddrName"))
if mibBuilder.loadTexts: snmpTlstmAddrEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrEntry.setDescription("A conceptual row containing a copy of a certificate's fingerprint for a given snmpTargetAddrEntry. The values in this row should be ignored if the connection that needs to be established, as indicated by the SNMP-TARGET-MIB infrastructure, is not a (D)TLS based connection. If an snmpTlstmAddrEntry exists for a given snmpTargetAddrEntry, then the presented server certificate MUST match or the connection MUST NOT be established. If a row in this table does not exist to match an snmpTargetAddrEntry row, then the connection SHOULD still proceed if some other certificate validation path algorithm (e.g., RFC 5280) can be used.")
snmpTlstmAddrServerFingerprint = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 1), SnmpTLSFingerprint()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrServerFingerprint.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrServerFingerprint.setDescription('A cryptographic hash of a public X.509 certificate. This object should store the hash of the public X.509 certificate that the remote server should present during the (D)TLS connection setup. The fingerprint of the presented certificate and this hash value MUST match exactly or the connection MUST NOT be established.')
snmpTlstmAddrServerIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrServerIdentity.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrServerIdentity.setDescription('The reference identity to check against the identity presented by the remote system.')
snmpTlstmAddrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrStorageType.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
snmpTlstmAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmAddrRowStatus.setDescription("The status of this conceptual row. This object may be used to create or remove rows from this table. To create a row in this table, an administrator must set this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the snmpTlstmAddrRowStatus column is notReady(3). In particular, a newly created row cannot be made active until the corresponding snmpTlstmAddrServerFingerprint column has been set. Rows MUST NOT be active if the snmpTlstmAddrServerFingerprint column is blank and the snmpTlstmAddrServerIdentity is set to '*' since this would insecurely accept any presented certificate. The snmpTlstmAddrServerFingerprint object may not be modified while the value of this object is active(1). An attempt to set these objects while the value of snmpTlstmAddrRowStatus is active(1) will result in an inconsistentValue error.")
snmpTlstmServerCertificateUnknown = NotificationType((1, 3, 6, 1, 2, 1, 198, 0, 1)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmSessionUnknownServerCertificate"))
if mibBuilder.loadTexts: snmpTlstmServerCertificateUnknown.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmServerCertificateUnknown.setDescription('Notification that the server certificate presented by an SNMP over (D)TLS server was invalid because no configured fingerprint or CA was acceptable to validate it. This may be because there was no entry in the snmpTlstmAddrTable or because no path could be found to known Certification Authority. To avoid notification loops, this notification MUST NOT be sent to servers that themselves have triggered the notification.')
snmpTlstmServerInvalidCertificate = NotificationType((1, 3, 6, 1, 2, 1, 198, 0, 2)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmAddrServerFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidServerCertificates"))
if mibBuilder.loadTexts: snmpTlstmServerInvalidCertificate.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmServerInvalidCertificate.setDescription('Notification that the server certificate presented by an SNMP over (D)TLS server could not be validated even if the fingerprint or expected validation path was known. That is, a cryptographic validation error occurred during certificate validation processing. To avoid notification loops, this notification MUST NOT be sent to servers that themselves have triggered the notification.')
snmpTlstmCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 3, 1))
snmpTlstmGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 3, 2))
snmpTlstmCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 198, 3, 1, 1)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmStatsGroup"), ("SNMP-TLS-TM-MIB", "snmpTlstmIncomingGroup"), ("SNMP-TLS-TM-MIB", "snmpTlstmOutgoingGroup"), ("SNMP-TLS-TM-MIB", "snmpTlstmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmCompliance = snmpTlstmCompliance.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmCompliance.setDescription('The compliance statement for SNMP engines that support the SNMP-TLS-TM-MIB')
snmpTlstmStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 1)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmSessionOpens"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionClientCloses"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionOpenErrors"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionAccepts"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionServerCloses"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionNoSessions"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidClientCertificates"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionUnknownServerCertificate"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidServerCertificates"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidCaches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmStatsGroup = snmpTlstmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmStatsGroup.setDescription('A collection of objects for maintaining statistical information of an SNMP engine that implements the SNMP TLS Transport Model.')
snmpTlstmIncomingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 2)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNCount"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNTableLastChanged"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNMapType"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNData"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNStorageType"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmIncomingGroup = snmpTlstmIncomingGroup.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmIncomingGroup.setDescription('A collection of objects for maintaining incoming connection certificate mappings to tmSecurityNames of an SNMP engine that implements the SNMP TLS Transport Model.')
snmpTlstmOutgoingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 3)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmParamsCount"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsTableLastChanged"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsClientFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsStorageType"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsRowStatus"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrCount"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrTableLastChanged"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrServerFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrServerIdentity"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrStorageType"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmOutgoingGroup = snmpTlstmOutgoingGroup.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmOutgoingGroup.setDescription('A collection of objects for maintaining outgoing connection certificates to use when opening connections as a result of SNMP-TARGET-MIB settings.')
snmpTlstmNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 4)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmServerCertificateUnknown"), ("SNMP-TLS-TM-MIB", "snmpTlstmServerInvalidCertificate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmNotificationGroup = snmpTlstmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: snmpTlstmNotificationGroup.setDescription('Notifications')
mibBuilder.exportSymbols("SNMP-TLS-TM-MIB", snmpTlstmAddrTable=snmpTlstmAddrTable, snmpTlstmSessionOpenErrors=snmpTlstmSessionOpenErrors, snmpTlstmCertSpecified=snmpTlstmCertSpecified, snmpTlstmCertToTSNFingerprint=snmpTlstmCertToTSNFingerprint, snmpTlstmCertCommonName=snmpTlstmCertCommonName, snmpTlstmGroups=snmpTlstmGroups, snmpTlstmConfig=snmpTlstmConfig, snmpTlstmCertToTSNTableLastChanged=snmpTlstmCertToTSNTableLastChanged, snmpTlstmParamsTable=snmpTlstmParamsTable, snmpTlstmCertToTSNMapType=snmpTlstmCertToTSNMapType, snmpTlstmObjects=snmpTlstmObjects, snmpTlstmServerCertificateUnknown=snmpTlstmServerCertificateUnknown, snmpTlstmAddrStorageType=snmpTlstmAddrStorageType, snmpTlstmCertSANDNSName=snmpTlstmCertSANDNSName, snmpTlstmNotifications=snmpTlstmNotifications, snmpTlstmSessionClientCloses=snmpTlstmSessionClientCloses, snmpTlstmAddrServerFingerprint=snmpTlstmAddrServerFingerprint, snmpTlstmCertToTSNStorageType=snmpTlstmCertToTSNStorageType, snmpTlstmSessionInvalidCaches=snmpTlstmSessionInvalidCaches, snmpTlstmParamsClientFingerprint=snmpTlstmParamsClientFingerprint, snmpTlstmCertToTSNRowStatus=snmpTlstmCertToTSNRowStatus, snmpTlstmAddrEntry=snmpTlstmAddrEntry, SnmpTLSAddress=SnmpTLSAddress, snmpTlstmParamsCount=snmpTlstmParamsCount, snmpTlstmParamsRowStatus=snmpTlstmParamsRowStatus, snmpTlstmAddrCount=snmpTlstmAddrCount, snmpTlstmParamsTableLastChanged=snmpTlstmParamsTableLastChanged, snmpTLSTCPDomain=snmpTLSTCPDomain, snmpTlstmMIB=snmpTlstmMIB, snmpTlstmCertToTSNID=snmpTlstmCertToTSNID, snmpTlstmSessionUnknownServerCertificate=snmpTlstmSessionUnknownServerCertificate, snmpTlstmSessionNoSessions=snmpTlstmSessionNoSessions, snmpTlstmSessionInvalidServerCertificates=snmpTlstmSessionInvalidServerCertificates, snmpTlstmSessionInvalidClientCertificates=snmpTlstmSessionInvalidClientCertificates, snmpTlstmParamsEntry=snmpTlstmParamsEntry, snmpTlstmCertToTSNTable=snmpTlstmCertToTSNTable, snmpTlstmAddrServerIdentity=snmpTlstmAddrServerIdentity, snmpTlstmConformance=snmpTlstmConformance, snmpTlstmCertSANRFC822Name=snmpTlstmCertSANRFC822Name, snmpTlstmParamsStorageType=snmpTlstmParamsStorageType, snmpTlstmServerInvalidCertificate=snmpTlstmServerInvalidCertificate, snmpDTLSUDPDomain=snmpDTLSUDPDomain, SnmpTLSFingerprint=SnmpTLSFingerprint, snmpTlstmIdentities=snmpTlstmIdentities, snmpTlstmSessionOpens=snmpTlstmSessionOpens, PYSNMP_MODULE_ID=snmpTlstmMIB, snmpTlstmCertToTSNCount=snmpTlstmCertToTSNCount, snmpTlstmOutgoingGroup=snmpTlstmOutgoingGroup, snmpTlstmCertToTSNMIdentities=snmpTlstmCertToTSNMIdentities, snmpTlstmCompliance=snmpTlstmCompliance, snmpTlstmNotificationGroup=snmpTlstmNotificationGroup, snmpTlstmSessionServerCloses=snmpTlstmSessionServerCloses, snmpTlstmCompliances=snmpTlstmCompliances, snmpTlstmCertToTSNEntry=snmpTlstmCertToTSNEntry, snmpTlstmAddrTableLastChanged=snmpTlstmAddrTableLastChanged, snmpTlstmIncomingGroup=snmpTlstmIncomingGroup, snmpTlstmCertToTSNData=snmpTlstmCertToTSNData, snmpTlstmAddrRowStatus=snmpTlstmAddrRowStatus, snmpTlstmCertSANIpAddress=snmpTlstmCertSANIpAddress, snmpTlstmCertSANAny=snmpTlstmCertSANAny, snmpTlstmSession=snmpTlstmSession, snmpTlstmStatsGroup=snmpTlstmStatsGroup, snmpTlstmCertificateMapping=snmpTlstmCertificateMapping, snmpTlstmSessionAccepts=snmpTlstmSessionAccepts)
