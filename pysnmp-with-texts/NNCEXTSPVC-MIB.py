#
# PySNMP MIB module NNCEXTSPVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCEXTSPVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
atmVplVpi, atmVclVci, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVplVpi", "atmVclVci", "atmVclVpi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Bits, Counter64, Counter32, IpAddress, iso, NotificationType, ObjectIdentity, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Bits", "Counter64", "Counter32", "IpAddress", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "Unsigned32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
nncExtSpvc = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 82))
if mibBuilder.loadTexts: nncExtSpvc.setLastUpdated('20010215121735Z')
if mibBuilder.loadTexts: nncExtSpvc.setOrganization('Alcatel CID')
if mibBuilder.loadTexts: nncExtSpvc.setContactInfo('Alcatel CID Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtSpvc.setDescription("This module contains Alcatel CID's proprietary MIB definition for managing Soft Permanent Virtual Connections (SPVCs). This MIB supports the creation, modification, query, and deletion of SPVCs (Soft Permanent Virtual Connections), on Cell Relay (ATM), Frame Relay, and Circuit Emulation endpoints. For Cell Relay-based endpoints, Permanent Virtual Path Connection (PVPC) and Permanent Virtual Channel Connection (PVCC) are supported, while SPVCCs are supported on Frame Relay and Circuit Emulation endpoints. Cell Relay SPVCs, Frame Relay SPVCs and Circuit Emulation SPVCs are supported in this MIB. SPVCs with any other service types are not supported at this point. For SPVCs interworking across different endpoint types, CR to FR, FR to CR, CR to CE, CE to CR connections are supported. CE to FR or FR to CE are not suppported. Operator directed routing for SPVC connections is not supported at this point. To create an SPVC, the required MIB objects from the destination table must be configured and sent to the destination endpoint. Next, the MIB objects from the source endpoint table (based on the endpoint type and SPVC type - either nncCrSpvpcTable, nncCrSpvccTable, nncFrSpvcTable, or nncCeSpvcTable) are configured and sent to the source endpoint. Assuming a PDU with a RowStatus of 'createAndGo' or 'Active' has been received, if the adminStatus of the SPVC is set to 'enabled', the SPVC will be connected; if the adminStatus of the SPVC is set to 'disabled', the SPVC will be configured but not connected. SPVC creation SET-REQuests can be sent two ways: using a RowStatus value of 'createAndGo', or using multiple SET-REQs using RowStatus values of 'createAndWait' and 'active'. Creating an SPVC using rowStatus=createAndWait(5) In the case of multiple SET-REQs, the RowStatus is set to createAndWait(5) for all but the last SET-REQ, and set to active(1) for the last SET-REQ. The SPVC is configured only after the last PDU (with RowStatus as 'active') is received. Creating an SPVC using rowStatus=createAndGo(4) In the other case, all required MIB objects can fit in one SET-REQ. If using only one SET-REQ, the RowStatus should be set to createAndGo(4). In both cases, default values for MIB objects will be used wherever possible. To delete an SPVC, the correct table objects must be sent to both the destination endpoint and the source endpoint for the given SPVC, using the correct index, and setting the rowStatus to 'destroy'. This will delete the specified SPVC. Some abreviations: abr/ABR/Abr: Available Bit Rate Bwd: Backward. For traffice descriptors from destination endpoint to source endpoint (receiving traffic) cbr/CBR/Cbr: Constant Bit Rate Dst: Destination endpoint Fwd: Forward. For traffic descriptors from source endpoint to destination endpoint (transmitting traffic) nt-vbr/nrtvbr/NRT-VBR: Non-Real-Time Variable Bit Rate Src: Source endpoint Targ: Target. For the destination endpoint info in source endpoint table ubr/UBR/Ubr: Unspecified Bit Rate ")
class AtmFormatDisplay(TextualConvention, OctetString):
    description = 'This display is for the ATM address prefix format. The following formats which are supported are displayed: DCC ATM Format ------------------------------------------------------------- |A | | | | | | | | | | | | | | | | | | | S| |F | DCC | HO-DSP | ESI | E| |I | | | | | | | | | | | | | | | | | | | L| ------------------------------------------------------------- |...IDP..|......................DSP.........................| |.IDI.| ICD ATM Format ------------------------------------------------------------- |A | | | | | | | | | | | | | | | | | | | S| |F | ICD | HO-DSP | ESI | E| |I | | | | | | | | | | | | | | | | | | | L| ------------------------------------------------------------- |...IDP..|......................DSP.........................| |.IDI.| For the DCC ATM Format, the following format will be displayed: afi-dcc-hodsp-esi-sel For the ICD ATM Format, the following format will be displayed: afi-icd-hodsp-esi-sel Abbreviations: IDP: Initial Domain Part AFI: Authority and Format Identifier IDI: Initial Domain Part DCC: Data Country Code ICD: International Code Designator DSP: Domain Specific Part HO-DSP: The coding of this field is specified by the authority or the coding scheme identified by the IDP. ESI: End System Identifier SEL: Selector '
    status = 'current'
    displayHint = '1x-2x-10x-6x-1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

nncExtSpvcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 82, 1))
nncExtSpvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 82, 3))
nncExtSpvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 82, 4))
nncCrSpvpcTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1), )
if mibBuilder.loadTexts: nncCrSpvpcTable.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcTable.setDescription('nncCrSpvpcTable contains all the objects sent to a source endpoint that are used to create, modify, query and delete SPVC connections.')
nncCrSpvpcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncCrSpvpcTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcTableEntry.setDescription('An entry of nncCrSpvpcTable')
nncCrSpvpcServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("cbr", 1), ("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('nrtvbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcServiceCategory.setDescription('This object is used to set the traffic service category. This object is dependent on the value specified in nncCrSpvpcTrafficDescriptor')
nncCrSpvpcTargEpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 2), AtmFormatDisplay()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcTargEpAddr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcTargEpAddr.setDescription('This object is used to specify the 20 byte AESA address for the target endpoint. The address map is as the following: Byte\\Bit 8 7 6 5 4 3 2 1 ------------------------------------------------------------------------ 1-13 byte | 13-byte Internal Subscriber Prefix | ------------------------------------------------------------------------ 14th byte | I/G | U/L | OUI(most significant 6 bits) | ------------------------------------------------------------------------ 15th byte | OUI(2nd most significant 8 bits | ------------------------------------------------------------------------ 16th byte | OUI(3rd most significant 8 bits | ------------------------------------------------------------------------ 17th byte | Shelf/Slot(1st most significant 8 bits | ------------------------------------------------------------------------ 18th byte | Shelf/Slot(2nd most significant 8 bits | ------------------------------------------------------------------------ 19th byte |Flag0| Port | ------------------------------------------------------------------------ 20th byte | 0 | ------------------------------------------------------------------------ ')
nncCrSpvpcTargVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcTargVpi.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcTargVpi.setDescription('This object contains the virtual path identifier (VPI) value for the target endpoint. Range: 0 - 4095')
nncCrSpvpcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcAdminStatus.setDescription('This object accepts two values, enabled (1), and disabled (2). When the value is disabled, the SPVC is not connected. When enabled, the SPVC is connected when possible. Use nncCrSpvpcAdminStatus to determine if the connection is successful.')
nncCrSpvpcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcPriority.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcPriority.setDescription('This object is used to set the priority for a SPVC connection request. It ranges between 1-16, with the following values: Best Priority = 1 Default Priority = 3 Worst Priority = 16')
nncCrSpvpcMaxAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcMaxAdminWeight.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcMaxAdminWeight.setDescription('This object is used to set a cost threshold for an SPVC connection. If the total cost of all VPCs exceeds this weight value for a given path, this SPVC will choose an alternative path or give up. Infinite = -1 Min Admin Weight = 0 Max Admin Weight = 2147483647')
nncCrSpvpcOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("reRouteDualEp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcOperation.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcOperation.setDescription('This object is used to request a reroute operation. Querying this object will not provide any useful information.')
nncCrSpvpcCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 7))).clone(namedValues=NamedValues(("connected", 2), ("waitingForResources", 4), ("readyToConnect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCrSpvpcCallStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcCallStatus.setDescription("This read-only object is used to query the state of a particular SPVC. SPVCs that are connected and operational will return a value of 'connected', while those that are incomplete or otherwise unable to be connected will return 'waitingForResources'. SPVCs that are configured but not yet connected will contain a value of 'readyForConnect'.")
nncCrSpvpcLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledUniSide", 2), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. It can be configured for either the UNI side or the NNI side, or disabled.")
nncCrSpvpcFwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell (Information) Rate for the forward direction. Range: 0 - 2488320 Kb/s")
nncCrSpvpcFwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the forward direction. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrSpvpcFwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the forward direction. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrSpvpcBwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the destination endpoint. Range: 0 - 2488320 Kb/s")
nncCrSpvpcBwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the backward direction. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrSpvpcBwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the backward direction. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrSpvpcSrcBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcSrcBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcSrcBillingFlag.setDescription('Billing Configuration for the source endpoint')
nncCrSpvpcFwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the SPVC. Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrSpvpcFwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmPolicingOption.setDescription('Policing Option for an SPVPC. tag is supported only on rt-VBR/nrt-VBR connections that use the P_0+1/S_0 traffic descriptor')
nncCrSpvpcFwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketOneRate.setDescription("This object is for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrSpvpcFwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrSpvpcFwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrSpvpcFwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrtVbr and rtVbr only). Range: 1 - 10000 cells')
nncCrSpvpcFwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two endpoints to support the rt-VBR service category. Range: 250-10000 microseconds')
nncCrSpvpcFwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcFwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcFwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two SPVC endpoints when using the nrt-VBR service category. Value set as 1.0e-#')
nncCrSpvpcBwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the SPVC. Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrSpvpcBwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmPolicingOption.setDescription('Policing Option for an SPVPC. tag is supported only on rt-VBR/nrt-VBR connections that use the P_0+1/S_0 traffic descriptor')
nncCrSpvpcBwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketOneRate.setDescription("This object is for peak information rate (PIR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrSpvpcBwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrSpvpcBwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrSpvpcBwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrtVbr and rtVbr only). Range: 1 - 10000 cells')
nncCrSpvpcBwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two endpoints to support the rt-VBR service category. Range: 250-10000 microseconds')
nncCrSpvpcBwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcBwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcBwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two SPVC endpoints when using the nrt-VBR service category. Value set as 1.0e-#')
nncCrSpvpcCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))).clone(namedValues=NamedValues(("unknown", 0), ("nmti", 1), ("nm5620", 2), ("snmp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCrSpvpcCreator.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcCreator.setDescription('The object retrieves the creator of a SPVC connection.')
nncCrSpvpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 1, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncCrSpvpcDstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2), )
if mibBuilder.loadTexts: nncCrSpvpcDstCfgTable.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgTable.setDescription('the nncCrSpvpcDstCfg table contains common objects used to configure, delete, modify and query the destination end point of an SPVC across different Alcatel CID platforms.')
nncCrSpvpcDstCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncCrSpvpcDstCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgTableEntry.setDescription('An entry of nncCrSpvpcDstCfgTable.')
nncCrSpvpcDstCfgCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcDstCfgCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrSpvpcDstCfgPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("nullPolicing", 0), ("disabled", 1), ("tag", 2), ("discard", 3), ("useSignalled", 4))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcDstCfgPolicing.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgPolicing.setDescription('CR Policing')
nncCrSpvpcDstCfgBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcDstCfgBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgBillingFlag.setDescription('Billing Configuration for the destination endpoint.')
nncCrSpvpcDstCfgLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledUniSide", 2), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcDstCfgLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. It can be configured for either the UNI side or the NNI side, or disabled.")
nncCrSpvpcDstCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvpcDstCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncCrSpvccTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3), )
if mibBuilder.loadTexts: nncCrSpvccTable.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTable.setDescription('nncCrSpvccTable contains all the objects sent to a source endpoint that are used to create, modify, delete and query Cell Relay SPVC connections.')
nncCrSpvccTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: nncCrSpvccTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTableEntry.setDescription('An entry of nncCrSpvccTable. It contains the objects required to manage CR SPVCs.')
nncCrSpvccServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("cbr", 1), ("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('nrtvbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccServiceCategory.setDescription('This object is used to set the traffic service category. This object is dependent on the value specified in nncCrSpvccTrafficDescriptor')
nncCrSpvccTargEpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 2), AtmFormatDisplay()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccTargEpAddr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTargEpAddr.setDescription('This object is used to specify the AESA address for the target endpoint. The mapping scheme is as follows: Byte\\Bit 8 7 6 5 4 3 2 1 ------------------------------------------------------------------------ 1-13 byte | 13-byte Internal Subscriber Prefix | ------------------------------------------------------------------------ 14th byte | I/G | U/L | OUI(most significant 6 bits) | ------------------------------------------------------------------------ 15th byte | OUI(2nd most significant 8 bits | ------------------------------------------------------------------------ 16th byte | OUI(3rd most significant 8 bits | ------------------------------------------------------------------------ 17th byte | Shelf/Slot(1st most significant 8 bits | ------------------------------------------------------------------------ 18th byte | Shelf/Slot(2nd most significant 8 bits | ------------------------------------------------------------------------ 19th byte |Flag0| Port | ------------------------------------------------------------------------ 20th byte | 0 | ------------------------------------------------------------------------ ')
nncCrSpvccTargVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccTargVpi.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTargVpi.setDescription('This object contains the virtual path identifier (VPI) value for the target endpoint. Range: 0 - 4095')
nncCrSpvccTargVci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccTargVci.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTargVci.setDescription('This object contains the virtual channel identifier (VCI) value for the target endpoint. Range: 1 - 65535')
nncCrSpvccTargDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1023)))
if mibBuilder.loadTexts: nncCrSpvccTargDlci.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTargDlci.setDescription('This object contains the data link connection identifier for a frame relay endpoint. This number is used to identify the target endpoint, and has only local significance to the specified link. Range: 16 - 1023')
nncCrSpvccTargCeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1))
if mibBuilder.loadTexts: nncCrSpvccTargCeNumber.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTargCeNumber.setDescription("This object contains circuit number, channel group number or both for the Circuit Emulation endpoint. Used in CR to CE connections when nncCrSpvccTargEpType is configured as circuitEmulation(3). For CE connections on unchannelized DS3_CCE card, it's the circuit number 1-28 for UDT circuit number For CE connections on unchannelized E3_CCE card, it's the circuit number 1-16 for UDT circuit number For CE connections on E1/T1 CES, it's channel group number. 0 for UDT mode, both T1 and E1 1-31 for E1 in SDT mode 1-24 for T1 in SDT mode For CE connections on channelized DS3_CCE-2 card, it's circuit number and channel group number combined in the upper and lower byte. circuitNum (bits 9-16, = 1 to 28 for channelized DS3, = 0 for unstructured DS3) channelGroupNum (bits 1-8, = 1 to 24 for SDT mode, = 0 for UDT Mode) For CE connections on channelized E3_CCE-2, it's circuit number and channel group number combined in the upper and lower byte. circuitNum (bits 9-16, = 1 to 16) channelGroupNum (bits 1-8, = 1 to 31 for SDT mode, = 0 for UDT Mode) Example: Circuit Number = 7, Channel Group = 3 : nncCrSpvccTargCeNumber = (Circuit Number * 256) + Channel Group = 1795 SPVCs across service types other than circuit emulation do not require this object.")
nncCrSpvccTargEpType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cellRelay", 1), ("frameRelay", 2), ("circuitEmulation", 3))).clone('cellRelay')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccTargEpType.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccTargEpType.setDescription('This object specifies a target endpoint as one of the following types: cellRelay (1) frameRelay (2) circuitEmulation (3) ')
nncCrSpvccAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccAdminStatus.setDescription('This object accepts two values, enabled (1), and disabled (2). When the value is disabled, the SPVC is not connected. When enabled, the SPVC is connected when possible. Use nncCrSpvccAdminStatus to determine if the connection is successful.')
nncCrSpvccPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccPriority.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccPriority.setDescription('This object is used to set the priority for a SPVC connection request. It ranges between 1-16, with the following values: Best Priority = 1 Default Priority = 3 Worst Priority = 16')
nncCrSpvccMaxAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccMaxAdminWeight.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccMaxAdminWeight.setDescription('This object is used to set a cost threshold for an SPVC connection. If the total cost of all VPCs exceeds this weight value for a given path, this SPVC will choose an alternative path or give up. Infinite = -1 Min Admin Weight = 0 Max Admin Weight = 2147483647')
nncCrSpvccOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("reRouteDualEp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccOperation.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccOperation.setDescription('This object is used to request a reroute operation. Querying this object will not provide any useful information.')
nncCrSpvccCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 7))).clone(namedValues=NamedValues(("connected", 2), ("waitingForResources", 4), ("readyToConnect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCrSpvccCallStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccCallStatus.setDescription("This read-only object is used to query the state of a particular SPVC. SPVCs that are connected and operational will return a value of 'connected', while those that are incomplete or otherwise unable to be connected will return 'waitingForResources'. SPVCs that are configured but not yet connected will contain a value of 'readyForConnect'.")
nncCrSpvccLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledUniSide", 2), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. It can be configured for either the UNI side or the NNI side, or disabled.")
nncCrSpvccFwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the forward direction. Range: 0 - 2488320 Kb/s")
nncCrSpvccFwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the forward direction. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrSpvccFwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the forward direction. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrSpvccBwdAbrDynTrfcIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdAbrDynTrfcIcr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdAbrDynTrfcIcr.setDescription("ABR dynamic traffic descriptor's Initial Cell Rate for the destination endpoint. Range: 0 - 2488320 Kb/s")
nncCrSpvccBwdAbrDynTrfcRif = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdAbrDynTrfcRif.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdAbrDynTrfcRif.setDescription('ABR traffic Rate Increase Factor for the backward direction. Value is expressed as the -power of 2. Range: 0 - 9')
nncCrSpvccBwdAbrDynTrfcRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdAbrDynTrfcRdf.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdAbrDynTrfcRdf.setDescription('ABR traffic Rate Decrease Factor descriptor for the backward direction. Value is expressed as the -power of 2 Range: 0 - 9')
nncCrSpvccSrcBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccSrcBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccSrcBillingFlag.setDescription('Billing Configuration for the source endpoint')
nncCrSpvccFwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the SPVC. Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrSpvccFwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmPolicingOption.setDescription('Policing Option for an SPVCC. tag is supported only on rt-VBR/nrt-VBR connections that use the P_0+1/S_0 traffic descriptor')
nncCrSpvccFwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketOneRate.setDescription("This object is for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrSpvccFwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrSpvccFwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrSpvccFwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrtVbr and rtVbr only). Range: 1 - 10000 cells')
nncCrSpvccFwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two endpoints to support the rt-VBR service category. Range: 250-10000 microseconds')
nncCrSpvccFwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two SPVC endpoints when using the nrt-VBR service category. Value set as 1.0e-#')
nncCrSpvccFwdTmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFwdTmFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFwdTmFrameDiscard.setDescription('The Frame (AAL protocol data unit) Discard option. When enabled, cells are discarded at the frame level by examining the SDU-type in the payload type field of the ATM cell header.')
nncCrSpvccBwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tagAll", 1), ("p0Plus1", 2), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmTrafficDescriptor.setDescription('This object contains the traffic descriptor for the SPVC. Tag All (1) (UBR using 2k/12k fabric only) P_0+1 (2) (CBR only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncCrSpvccBwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmPolicingOption.setDescription('Policing Option for an SPVCC. tag is supported only on rt-VBR/nrt-VBR connections that use the P_0+1/S_0 traffic descriptor')
nncCrSpvccBwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketOneRate.setDescription("This object is for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncCrSpvccBwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrSpvccBwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketTwoRate.setDescription('SIR_0p, SIR_0+1p or MIR_0+1p. This parameter holds the sustained information rate for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncCrSpvccBwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrt-VBR and rt-VBR only). Range: 1 - 10000 cells')
nncCrSpvccBwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) between two endpoints to support the rt-VBR service category. Range: 250-10000 microseconds')
nncCrSpvccBwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) between two SPVC endpoints when using the nrt-VBR service category. Value set as 1.0e-#')
nncCrSpvccBwdTmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccBwdTmFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccBwdTmFrameDiscard.setDescription('The Frame (AAL protocol data unit) Discard option. When enabled, cells are discarded at the frame level by examining the SDU-type in the payload type field of the ATM cell header.')
nncCrSpvccFrBwdTmAr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmAr.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmAr.setDescription('This object is used to specify the Access Rate, in Kb/s.')
nncCrSpvccFrBwdTmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmCir.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmCir.setDescription('The committed Information Rate, in Kb/s.')
nncCrSpvccFrBwdTmBc = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmBc.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmBc.setDescription('The Committed Burst Size, in Kb.')
nncCrSpvccFrBwdTmBe = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmBe.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmBe.setDescription('The Excess Burst Size, in Kb.')
nncCrSpvccFrBwdTmIwf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("networkInterworking", 2), ("serviceInterworking", 3), ("fFwdInterworking", 4))).clone('networkInterworking')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmIwf.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmIwf.setDescription('Interworking Function. Values: none (None (FR Switching) = 0) networkInterworking (Network Interworking = 2) serviceInterworking (Service Interworking = 3) FFwd Interworking (FFwd Interworking = 4)')
nncCrSpvccFrBwdTmPo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPo.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPo.setDescription('Policing')
nncCrSpvccFrBwdTmPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPacing.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPacing.setDescription('Pacing')
nncCrSpvccFrBwdTmPtclMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("translated", 1))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPtclMapping.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPtclMapping.setDescription('Protocol Mapping for Service Interworking SPVCs. If Translated Service Interworking is selected, the a profile must be set using the attribute nncFrSpvcTmSIWProfile. Values: transparent (0), translated (1) (see also nncFrSpvcTmSIWProfile)')
nncCrSpvccFrBwdTmClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cLPEqualsDE", 0), ("cLPEquals0", 1), ("cLPEquals1", 2))).clone('cLPEquals1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmClpMapping.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmClpMapping.setDescription('Cell Loss Priority Mapping. Values: cLPEqualsDE (CLP = DE, 0) cLPEquals0 (CLP = 0, 1 ) cLPEquals1 (CLP = 1, 2 )')
nncCrSpvccFrBwdTmDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dEEqualsCLP", 0), ("dESSCSor0", 1), ("dEEquals1", 2))).clone('dEEqualsCLP')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmDeMapping.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmDeMapping.setDescription('Discard Eligibility Mapping Values: dEEqualsCLP (DE = CLP, 0) dESSCSor0 (Network Interworking: DE=FR_SSCS Service Interworking: DE=0, 1) dEEquals1 (Service Interworking: DE = 1, 2) Only the first two values are valid when using Network Interworking.')
nncCrSpvccFrBwdTmEfciMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eFCIEqualsFECN", 0), ("eFCIEquals0", 1))).clone('eFCIEqualsFECN')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmEfciMapping.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmEfciMapping.setDescription('Explicit Forward Congestion Indication Mapping (Applies only to Service Interworking (IWF3), FR to ATM) Values: eFCIEqualsFECN (EFCI = FECN, 0) eFCIEquals0 (EFCI = 0, 1)')
nncCrSpvccFrBwdTmPvcMgntProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPvcMgntProfile.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmPvcMgntProfile.setDescription('Enables or disables the PVC Management Profile. When enabled, LMI is enabled on the network-side of the connection. Used only with FR-CR network interworking selected.')
nncCrSpvccFrBwdTmSIWProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmSIWProfile.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccFrBwdTmSIWProfile.setDescription("The FR-CR profile index for service interworking connections. This attribute is used to define the translation profile to use when a FR to CR SPVC is configured for Translated Service Interworking (using the attributes nncFrSpvcTmIwf and nncFrSpvcTmPtclMapping). If the profile selected isn't defined on the remote node then the connection will be rejected. Range: 1 = 16.")
nncCrSpvccCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))).clone(namedValues=NamedValues(("unknown", 0), ("nmti", 1), ("nm5620", 2), ("snmp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCrSpvccCreator.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccCreator.setDescription('The object retrieves the creator of a SPVC connection.')
nncCrSpvccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 3, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncCrSpvccDstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4), )
if mibBuilder.loadTexts: nncCrSpvccDstCfgTable.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgTable.setDescription('the nncCrSpvccDstCfg table contains common objects used to configure, delete, modify and query the destination end point of an SPVC across different Alcatel CID platforms.')
nncCrSpvccDstCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: nncCrSpvccDstCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgTableEntry.setDescription('An entry of nncCrSpvccDstCfgTable.')
nncCrSpvccDstCfgCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccDstCfgCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCrSpvccDstCfgPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("nullPolicing", 0), ("disabled", 1), ("tag", 2), ("discard", 3), ("useSignalled", 4))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccDstCfgPolicing.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgPolicing.setDescription('CR Policing')
nncCrSpvccDstCfgBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccDstCfgBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgBillingFlag.setDescription('Billing Configuration for the destination endpoint')
nncCrSpvccDstCfgFrVsvdCongestionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccDstCfgFrVsvdCongestionControl.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgFrVsvdCongestionControl.setDescription('Congestion Control for VS/VD endpoints, also known as Closed Loop Congestion Control (CLCC).')
nncCrSpvccDstCfgLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledUniSide", 2), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccDstCfgLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. It can be configured for either the UNI side or the NNI side, or disabled.")
nncCrSpvccDstCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCrSpvccDstCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncFrSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5), )
if mibBuilder.loadTexts: nncFrSpvcTable.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTable.setDescription('nncFrSpvcTable contains all the objects sent to a source endpoint that are used to create, modify, delete and query FR SPVCCs.')
nncFrSpvcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCEXTSPVC-MIB", "nncFrSpvcSrcDlci"))
if mibBuilder.loadTexts: nncFrSpvcTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTableEntry.setDescription('An entry of nncFrSpvcTable.')
nncFrSpvcSrcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1023)).clone(17))
if mibBuilder.loadTexts: nncFrSpvcSrcDlci.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcSrcDlci.setDescription('This object contains the data link connection identifier for a frame relay endpoint. This number is used to identify the source endpoint, and has only local significance to the specified link. Range: 16 - 1023')
nncFrSpvcTargEpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 2), AtmFormatDisplay()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTargEpAddr.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTargEpAddr.setDescription("This object contains the target endpoint's 20-byte ATM End System Address (AESA) proposed by ATM Forum. An endpoint address is created by appending the switch-wide 13-byte Internal Switch Subscriber Address Prefix with a 6-byte End Station Identifier (ESI) followed by a selector byte. The ESI is in IEEE MAC address format and the exact form depends upon the destination endpoint and the SPVC commissioning method. The mapping scheme is as follows: Byte\\Bit 8 7 6 5 4 3 2 1 ------------------------------------------------------------------------ 1-13 byte | 13-byte Internal Subscriber Prefix | ------------------------------------------------------------------------ 14th byte | I/G | U/L | OUI(most significant 6 bits) | ------------------------------------------------------------------------ 15th byte | OUI(2nd most significant 8 bits | ------------------------------------------------------------------------ 16th byte | OUI(3rd most significant 8 bits | ------------------------------------------------------------------------ 17th byte | Shelf/Slot(1st most significant 8 bits | ------------------------------------------------------------------------ 18th byte | Shelf/Slot(2nd most significant 8 bits | ------------------------------------------------------------------------ 19th byte |Flag1| Port | Circuit | ------------------------------------------------------------------------ 20th byte |Circuit(continued) | Stream | ------------------------------------------------------------------------ ")
nncFrSpvcTargDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1023)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTargDlci.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTargDlci.setDescription('This object contains the data link connection identifier for a frame relay endpoint. This number is used to identify the target endpoint, and has only local significance to the specified link. Range: 16 - 1023')
nncFrSpvcTargVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTargVpi.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTargVpi.setDescription('This object contains the virtual path identifier (VPI) value for the Cell Relay based target endpoint. Range: 0 - 4095')
nncFrSpvcTargVci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTargVci.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTargVci.setDescription('This object contains the virtual channel identifier (VCI) value for the cell-relay based target endpoint. Range: 1 - 65535')
nncFrSpvcTargEpType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cellRelay", 1), ("frameRelay", 2))).clone('frameRelay')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTargEpType.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTargEpType.setDescription('This object specifies a target endpoint as one of the following types: cellRelay (1) frameRelay (2) ')
nncFrSpvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcAdminStatus.setDescription('This object accepts two values, enabled (1), and disabled (2). When the value is disabled, the SPVC is not connected. When enabled, the SPVC is connected when possible. Use nncFrSpvcAdminStatus to determine if the connection is successful.')
nncFrSpvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcPriority.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcPriority.setDescription('This object is used to set the priority for a SPVC connection request. It ranges between 1-16, with the following values: Best Priority = 1 Default Priority = 3 Worst Priority = 16')
nncFrSpvcMaxAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcMaxAdminWeight.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcMaxAdminWeight.setDescription('This object is used to set a cost threshold for an SPVC connection. If the total cost of all VPCs exceeds this weight value for a given path, this SPVC will choose an alternative path or give up. Infinite = -1 Min Admin Weight = 0 Max Admin Weight = 2147483647')
nncFrSpvcOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("reRouteDualEp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcOperation.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcOperation.setDescription('This object is used to request a reroute operation. Querying this object will not provide any useful information.')
nncFrSpvcCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 7))).clone(namedValues=NamedValues(("connected", 2), ("waitingForResources", 4), ("readyToConnect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrSpvcCallStatus.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCallStatus.setDescription("This read-only object is used to query the state of a particular SPVC. SPVCs that are connected and operational will return a value of 'connected', while those that are incomplete or otherwise unable to be connected will return 'waitingForResources'. SPVCs that are configured but not yet connected will contain a value of 'readyForConnect'.")
nncFrSpvcLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledUniSide", 2), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. It can be configured for either the UNI side or the NNI side, or disabled.")
nncFrSpvcSrcBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcSrcBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcSrcBillingFlag.setDescription('Billing Configuration for the source endpoint.')
nncFrSpvcFrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bestEffort", 1), ("committedThroughput", 2), ("lowLatency", 3), ("realTime", 4))).clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFrPriority.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFrPriority.setDescription('Frame Relay Priority.')
nncFrSpvcFrVsvdCongestionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFrVsvdCongestionControl.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFrVsvdCongestionControl.setDescription('Congestion Control for VS/VD endpoints, also known as Closed Loop Congestion Control (CLCC).')
nncFrSpvcFwdFrMir = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(72)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdFrMir.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdFrMir.setDescription('The FR Src->Dst Minimum Information Rate, used to set the minimum rate on a CLCC FR-FR SPVC connection. If nncFrSpvcFrVsvdCongestionControl is not enabled, this attribute has no effect. Range: 0 - 44210 Kb/s')
nncFrSpvcFwdTmAr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdTmAr.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdTmAr.setDescription('This object is used to specify the Access Rate, in Kb/s')
nncFrSpvcFwdTmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdTmCir.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdTmCir.setDescription('The committed Information Rate, in Kb/s')
nncFrSpvcFwdTmBc = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdTmBc.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdTmBc.setDescription('The Committed Burst Size, in Kb.')
nncFrSpvcFwdTmBe = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdTmBe.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdTmBe.setDescription('Excess Burst Size, Kb.')
nncFrSpvcTmIwf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("networkInterworking", 2), ("serviceInterworking", 3), ("fFwdInterworking", 4))).clone('networkInterworking')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmIwf.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmIwf.setDescription('Interworking Function. Values: none (None (FR Switching) = 0) networkInterworking (Network Interworking = 2) serviceInterworking (Service Interworking = 3) FFwd Interworking (FFwd Interworking = 4)')
nncFrSpvcFwdTmPo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdTmPo.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdTmPo.setDescription('Policing. ')
nncFrSpvcFwdTmPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcFwdTmPacing.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcFwdTmPacing.setDescription('Pacing.')
nncFrSpvcTmPtclMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("translated", 1))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmPtclMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmPtclMapping.setDescription('Protocol Mapping for Service Interworking SPVCs. If Translated Service Interworking is selected, the a profile must be set using the attribute nncFrSpvcTmSIWProfile. Values: transparent (0), translated (1) (see also nncFrSpvcTmSIWProfile)')
nncFrSpvcTmClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cLPEqualsDE", 0), ("cLPEquals0", 1), ("cLPEquals1", 2))).clone('cLPEquals1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmClpMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmClpMapping.setDescription('Cell Loss Priority Mapping, for use in FR-CR interworking SPVCs. Values: cLPEqualsDE (CLP = DE, 0) cLPEquals0 (CLP = 0, 1 ) cLPEquals1 (CLP = 1, 2 )')
nncFrSpvcTmDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dEEqualsCLP", 0), ("dESSCSor0", 1), ("dEEquals1", 2))).clone('dEEqualsCLP')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmDeMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmDeMapping.setDescription('Discard Eligibility Mapping, for use in FR-CR interworking SPVCs. Values: dEEqualsCLP (DE = CLP, 0) dESSCSor0 (Network Interworking: DE=FR_SSCS Service Interworking: DE=0, 1) dEEquals1 (Service Interworking: DE = 1, 2) Only the first two values are valid when using Network Interworking.')
nncFrSpvcTmEfciMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eFCIEqualsFECN", 0), ("eFCIEquals0", 1))).clone('eFCIEqualsFECN')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmEfciMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmEfciMapping.setDescription('Explicit Forward Congestion Indication Mapping (Applies only to Service Interworking (IWF3), FR to ATM) Values: eFCIEqualsFECN (EFCI = FECN, 0) eFCIEquals0 (EFCI = 0, 1)')
nncFrSpvcTmPvcMgntProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmPvcMgntProfile.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmPvcMgntProfile.setDescription('Enables or disables the PVC Management Profile. When enabled, LMI is enabled on the network-side of the connection. Used only with FR-CR network interworking selected.')
nncFrSpvcTmSIWProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmSIWProfile.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmSIWProfile.setDescription("The FR-CR profile index for service interworking connections. This attribute is used to define the translation profile to use when a FR to CR SPVC is configured for Translated Service Interworking (using the attributes nncFrSpvcTmIwf and nncFrSpvcTmPtclMapping). If the profile selected isn't defined on the remote node then the connection will be rejected. Range: 1 - 16.")
nncFrSpvcTmRemapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1023)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcTmRemapDlci.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcTmRemapDlci.setDescription('The source end-point Data Link Connection Identifier for many-to-one Network Interworking (IWF2) connections.')
nncFrSpvcBwdFrMir = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(72)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdFrMir.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdFrMir.setDescription('The FR Dst->Src Minimum Information Rate, used on CLCC-enabled connections. Range: 0 - 44210 Kb/s')
nncFrSpvcBwdTmAr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdTmAr.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdTmAr.setDescription('This object is used to specify the Access Rate, in Kb/s')
nncFrSpvcBwdTmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdTmCir.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdTmCir.setDescription('The committed Information Rate, in Kb/s')
nncFrSpvcBwdTmBc = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdTmBc.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdTmBc.setDescription('The Committed Burst Size, in Kb.')
nncFrSpvcBwdTmBe = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdTmBe.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdTmBe.setDescription('The Excess Burst Size, Kb.')
nncFrSpvcBwdTmPo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdTmPo.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdTmPo.setDescription('Policing.')
nncFrSpvcBwdTmPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcBwdTmPacing.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcBwdTmPacing.setDescription('Pacing.')
nncFrSpvcCrTmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 6))).clone(namedValues=NamedValues(("nrtvbr", 2), ("abr", 3), ("ubr", 4), ("rtvbr", 6))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrTmServiceCategory.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrTmServiceCategory.setDescription('This object is used to set the traffic service category for SPVC Connections. This object is dependent on the value specified in nncFrSpvcCrBwdTmTrafficDescriptor.')
nncFrSpvcCrBwdTmTrafficDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("tagAll", 1), ("p0Plus1SlashS0Plus1", 3), ("p0Plus1SlashS0", 4), ("p0Plus1SlashM0Plus1", 5))).clone('p0Plus1SlashS0Plus1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmTrafficDescriptor.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmTrafficDescriptor.setDescription('This object contains the CR traffic descriptor for a FR-CR SPVC. Tag All (1) (UBR using 2k/12k fabric only) P_0+1/S_0+1 (3) (NRT/RT-VBR only) P_0+1/S_0 (4) (NRT/RT-VBR only) P_0+1/M_0+1 (5) (ABR and UBR only)')
nncFrSpvcCrBwdTmPolicingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("tag", 2), ("discard", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmPolicingOption.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmPolicingOption.setDescription('Policing Option for a FR SPVC. tag is supported only on rt-VBR/nrt-VBR connections that use the P_0+1/S_0 traffic descriptor')
nncFrSpvcCrBwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketOneRate.setDescription("Used in FR - CR interworking. This object is for peak cell rate (PCR), the cell rate which the cell endpoint may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s")
nncFrSpvcCrBwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for the CR endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncFrSpvcCrBwdTmBucketTwoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(72)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketTwoRate.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketTwoRate.setDescription('Used in FR - CR interworking. The attribute contains the SIR_0, SIR_0+1 or MIR_0+1. This parameter holds the sustained information rate (SIR_0 or SIR_0+1) for VBR traffic, and the minimum information rate for ABR/UBR traffic. Range: 0 - 2488320 Kb/s')
nncFrSpvcCrBwdTmBucketTwoMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketTwoMbs.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmBucketTwoMbs.setDescription('This object is for the maximum burst size, in cells, for SIR_0p or SIR_0+1p (nrtVbr and rtVbr only). Range: 1 - 10000 cells')
nncFrSpvcCrBwdTmCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmCdv.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmCdv.setDescription('This value is to set the cell delay variation (CDV) at the CR endpoint. Applicable only when the rt-VBR service category is used. Range: 250-10000 microseconds')
nncFrSpvcCrBwdTmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmClr.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmClr.setDescription('The object is to set the cell loss ratio (CLR) at the CR endpoint of a FR-CR SPVC. Valid only when using the nrt-VBR service category. Value set as 1.0e-#')
nncFrSpvcCrBwdTmFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmFrameDiscard.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCrBwdTmFrameDiscard.setDescription('The Frame (AAL protocol data unit) Discard option. When enabled, cells are discarded at the frame level by examining the SDU-type in the payload type field of the ATM cell header.')
nncFrSpvcCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))).clone(namedValues=NamedValues(("unknown", 0), ("nmti", 1), ("nm5620", 2), ("snmp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncFrSpvcCreator.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcCreator.setDescription('The object retrieves the creator of a given SPVC connection.')
nncFrSpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 5, 1, 49), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncFrSpvcDstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6), )
if mibBuilder.loadTexts: nncFrSpvcDstCfgTable.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTable.setDescription('the nncFrSpvcDstCfg table contains common objects used to configure, delete, modify and query the destination end point of an SPVC across different Alcatel CID platforms.')
nncFrSpvcDstCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmRemapDlci"))
if mibBuilder.loadTexts: nncFrSpvcDstCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTableEntry.setDescription('An entry of nncFrSpvcDstCfgTable.')
nncFrSpvcDstCfgTmAr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmAr.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmAr.setDescription('This object is used to specify the Access Rate, in Kb/s')
nncFrSpvcDstCfgTmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44210)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmCir.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmCir.setDescription('The committed Information Rate, Kb/s')
nncFrSpvcDstCfgTmBc = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmBc.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmBc.setDescription('The Committed Burst Size, in Kb.')
nncFrSpvcDstCfgTmBe = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmBe.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmBe.setDescription('Excess Burst Size, in Kb.')
nncFrSpvcDstCfgTmIwf = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("networkInterworking", 2), ("serviceInterworking", 3), ("fFwdInterworking", 4))).clone('networkInterworking')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmIwf.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmIwf.setDescription('Interworking Function. Values: none (None (FR Switching) = 0) networkInterworking (Network Interworking = 2) serviceInterworking (Service Interworking = 3) FFwd Interworking (FFwd Interworking = 4)')
nncFrSpvcDstCfgTmPo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPo.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPo.setDescription('Policing.')
nncFrSpvcDstCfgTmPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPacing.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPacing.setDescription('Pacing.')
nncFrSpvcDstCfgTmPtclMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("translated", 1))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPtclMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPtclMapping.setDescription('Protocol Mapping for Service Interworking SPVCs. If Translated Service Interworking is selected, the a profile must be set using the attribute nncFrSpvcTmPvcMgntProfile.')
nncFrSpvcDstCfgTmClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cLPEqualsDE", 0), ("cLPEquals0", 1), ("cLPEquals1", 2))).clone('cLPEquals1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmClpMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmClpMapping.setDescription('Cell Loss Priority Mapping. Values: cLPEqualsDE (CLP = DE) cLPEquals0 (CLP = 0 ) cLPEquals1 (CLP = 1 )')
nncFrSpvcDstCfgTmDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dEEqualsCLP", 0), ("dESSCSor0", 1), ("dEEquals1", 2))).clone('dEEqualsCLP')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmDeMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmDeMapping.setDescription('Discard Eligibility Mapping Values: dEEqualsCLP (DE = CLP, 0) dESSCSor0 (Network Interworking: DE=FR_SSCS Service Interworking: DE=0, 1) dEEquals1 (Service Interworking: DE = 1, 2) Only the first two values are valid when using Network Interworking.')
nncFrSpvcDstCfgTmEfciMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("eFCIEqualsFECN", 0), ("eFCIEquals0", 1))).clone('eFCIEqualsFECN')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmEfciMapping.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmEfciMapping.setDescription('Explicit Forward Congestion Indication Mapping (Applies only to Service Interworking (IWF3), FR to ATM) Values: eFCIEqualsFECN (0) eFCIEquals0 (1)')
nncFrSpvcDstCfgTmPvcMgntProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPvcMgntProfile.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmPvcMgntProfile.setDescription('Enables or disables the PVC Management Profile. When enabled, LMI is enabled on the network-side of the connection. Used only with FR-CR network interworking selected.')
nncFrSpvcDstCfgTmSIWProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmSIWProfile.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmSIWProfile.setDescription("The FR-CR profile index for service interworking connections. This attribute is used to define the translation profile to use when a FR to CR SPVC is configured for Translated Service Interworking (using the attribute nncFrSpvcTmPtclMapping). If the profile selected isn't defined on the remote node then the connection will be rejected. Range: 1 = 16.")
nncFrSpvcDstCfgTmRemapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1023)).clone(17)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmRemapDlci.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgTmRemapDlci.setDescription('The source end-point Data Link Connection Identifier for many-to-one Network Interworking (IWF2) connections.')
nncFrSpvcDstCfgBillingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgBillingFlag.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgBillingFlag.setDescription('Billing Configuration for the destination endpoint.')
nncFrSpvcDstCfgFrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bestEffort", 1), ("committedThroughput", 2), ("lowLatency", 3), ("realTime", 4))).clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgFrPriority.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgFrPriority.setDescription('Frame Relay Priority.')
nncFrSpvcDstCfgLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledUniSide", 2), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. It can be configured for either the UNI side or the NNI side, or disabled.")
nncFrSpvcDstCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 6, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncFrSpvcDstCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncCeSpvcTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7), )
if mibBuilder.loadTexts: nncCeSpvcTable.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTable.setDescription('nncCeSpvcTable contains all the objects sent to a source endpoint that are used to create, modify, delete and query CE SPVCCs. The table is indexed using ifIndex, which includes the circuit number field.')
nncCeSpvcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncCeSpvcTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTableEntry.setDescription('An entry of nncCeSpvcTable.')
nncCeSpvcTargEpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 1), AtmFormatDisplay()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcTargEpAddr.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTargEpAddr.setDescription('This object is used to specify the AESA address of the target endpoint. The mapping scheme is as follows: Byte\\Bit 8 7 6 5 4 3 2 1 ------------------------------------------------------------------------ 1-13 byte | 13-byte Internal Subscriber Prefix | ------------------------------------------------------------------------ 14th byte | I/G | U/L | OUI(most significant 6 bits) | ------------------------------------------------------------------------ 15th byte | OUI(2nd most significant 8 bits | ------------------------------------------------------------------------ 16th byte | OUI(3rd most significant 8 bits | ------------------------------------------------------------------------ 17th byte | Shelf/Slot(1st most significant 8 bits | ------------------------------------------------------------------------ 18th byte | Shelf/Slot(2nd most significant 8 bits | ------------------------------------------------------------------------ 19th byte |Flag0| Port | ------------------------------------------------------------------------ 20th byte | Not used, default 0 | ------------------------------------------------------------------------ ')
nncCeSpvcTargVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcTargVpi.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTargVpi.setDescription('This object contains the virtual path identifier (VPI) value for the target endpoint. Used in interworking CE to CR connections when nncCeSpvcTargEpType configured as cellRelay(1). Range: 0 - 4095')
nncCeSpvcTargVci = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcTargVci.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTargVci.setDescription('This object contains the virtual channel identifier (VCI) value for the target endpoint. Used in interworking CE to CR connections when nncCeSpvcTargEpType configured as cellRelay(1). Range: 1 - 65535')
nncCeSpvcTargCeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcTargCeNumber.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTargCeNumber.setDescription("This object contains circuit number, channel group number or both for the Circuit Emulation endpoint. Used in CE to CE connections when nncCrSpvccTargEpType is configured as circuitEmulation(3). For CE connections on unchannelized DS3_CCE card, it's the circuit number 1-28 for UDT circuit number For CE connections on unchannelized E3_CCE card, it's the circuit number 1-16 for UDT circuit number For CE connections on E1/T1 CES, it's channel group number. 0 for UDT mode, both T1 and E1 1-31 for E1 in SDT mode 1-24 for T1 in SDT mode For CE connections on channelized DS3_CCE-2 card, it's circuit number and channel group number combined in the upper and lower byte. circuitNum (bits 9-16, = 1 to 28 for channelized DS3, = 0 for unstructured DS3) channelGroupNum (bits 1-8, = 1 to 24 for SDT mode, = 0 for UDT Mode) For CE connections on channelized E3_CCE-2, it's circuit number and channel group number combined in the upper and lower byte. circuitNum (bits 9-16, = 1 to 16) channelGroupNum (bits 1-8, = 1 to 31 for SDT mode, = 0 for UDT Mode) Example: Circuit Number = 7, Channel Group = 3 : nncCrSpvccTargCeNumber = (Circuit Number * 256) + Channel Group = 1795 SPVCs across service types other than circuit emulation do not require this object.")
nncCeSpvcTargEpType = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("cellRelay", 1), ("circuitEmulation", 3))).clone('circuitEmulation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcTargEpType.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcTargEpType.setDescription('This object specifies a target endpoint as one of the following types: cellRelay (1) circuitEmulation (3) ')
nncCeSpvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcAdminStatus.setDescription('This object accepts two values, enabled (1), and disabled (2). When the value is disabled, the SPVC is not connected. When enabled, the SPVC is connected when possible. Use nncCeSpvcAdminStatus to determine if the connection is successful.')
nncCeSpvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcPriority.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcPriority.setDescription('This object is used to set the priority for a SPVC connection request. It ranges between 1-16, with the following values: Best Priority = 1 Default Priority = 3 Worst Priority = 16')
nncCeSpvcMaxAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcMaxAdminWeight.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcMaxAdminWeight.setDescription('This object is used to set a cost threshold for an SPVC connection. If the total cost of all VPCs exceeds this weight value for a given path, this SPVC will choose an alternative path or give up. Infinite = -1 Min Admin Weight = 0 Max Admin Weight = 2147483647')
nncCeSpvcOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("reRouteDualEp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcOperation.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcOperation.setDescription('This object is used to request a reroute operation. Querying this object will not provide any useful information.')
nncCeSpvcCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 7))).clone(namedValues=NamedValues(("connected", 2), ("waitingForResources", 4), ("readyToConnect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCeSpvcCallStatus.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcCallStatus.setDescription("This read-only object is used to query the state of a particular SPVC. SPVCs that are connected and operational will return a value of 'connected', while those that are incomplete or otherwise unable to be connected will return 'waitingForResources'. SPVCs that are configured but not yet connected will contain a value of 'readyForConnect'.")
nncCeSpvcLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. For circuit emulation UNI side is not supported. It can be configured for either NNI side or disabled.")
nncCeSpvcFwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(73)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcFwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcFwdTmBucketOneRate.setDescription("This object is for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s For N x DS0 SDT Basic connections = ((((1 + 1.0 / 128) * 8 * N / K) + (1.0/1000)) * 53.0 * 8.0) where N = 1..24 for T1 N = 1..31 for E1 K = 1..47 is the number of data octets per cell. For N x DS0 SDT CAS connections = ((((1 + 1.0 / 128) * 8 * (((Cn * N) + (N % 2)) / (Ck * K))) + (1.0/1000)) * 53.0 * 8.0) where N = 1..24 for T1 N = 1..31 for E1 K = 2..47 is the number of data octets per cell. Cn = 49 for T1 Cn = 33 for E1 Ck = 48 for T1 Ck = 32 for E1 = 1755 Kb/s for T1,DS1 UDT connections = 2328 Kb/s for E1 UDT connections = 50842 Kb/s for DS3 UDT connections")
nncCeSpvcFwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcFwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcFwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCeSpvcBwdTmBucketOneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2488320)).clone(73)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcBwdTmBucketOneRate.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcBwdTmBucketOneRate.setDescription("This object is for peak cell rate (PCR), the cell rate which the source may never exceed. It is used to determine which cells are 'excess'. Measured in Kb/s. Range: 0 - 2488320 Kb/s For N x DS0 SDT Basic connections = ((((1 + 1.0 / 128) * 8 * N / K) + (1.0/1000)) * 53.0 * 8.0) where N = 1..24 for T1 N = 1..31 for E1 K = 1..47 is the number of data octets per cell. For N x DS0 SDT CAS connections = ((((1 + 1.0 / 128) * 8 * (((Cn * N) + (N % 2)) / (Ck * K))) + (1.0/1000)) * 53.0 * 8.0) where N = 1..24 for T1 N = 1..31 for E1 K = 2..47 is the number of data octets per cell. Cn = 49 for T1 Cn = 33 for E1 Ck = 48 for T1 Ck = 32 for E1 = 1755 Kb/s for T1,DS1 UDT connections = 2328 Kb/s for E1 UDT connections = 50842 Kb/s for DS3 UDT connections")
nncCeSpvcBwdTmBucketOneCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcBwdTmBucketOneCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcBwdTmBucketOneCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCeSpvcCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 9))).clone(namedValues=NamedValues(("unknown", 0), ("nmti", 1), ("nm5620", 2), ("snmp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncCeSpvcCreator.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcCreator.setDescription('The object retrieves the creator of a SPVC connection.')
nncCeSpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncCeSpvcDstCfgTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 8), )
if mibBuilder.loadTexts: nncCeSpvcDstCfgTable.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcDstCfgTable.setDescription('the nncCeSpvcDstCfg table contains common objects used to configure, delete, modify and query the destination end point of an SPVC across different Alcatel CID platforms.')
nncCeSpvcDstCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nncCeSpvcDstCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcDstCfgTableEntry.setDescription('An entry of nncCeSpvcDstCfgTable.')
nncCeSpvcDstCfgCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcDstCfgCdvt.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcDstCfgCdvt.setDescription('This object is used to set cell delay variation tolerance (CDVT) for one endpoint, measured in microseconds. Range: 1 - 190,000 microseconds')
nncCeSpvcDstCfgLocRerouteConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledNniSide", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcDstCfgLocRerouteConfig.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcDstCfgLocRerouteConfig.setDescription("This object is used to configure the 'reroute on loss of continuity' feature using OAM-CC cells. For circuit emulation UNI side is not supported. It can be configured for either NNI side or disabled.")
nncCeSpvcDstCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 82, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nncCeSpvcDstCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcDstCfgRowStatus.setDescription("This object is used to control the status of a PDU and to query the status of an SPVC. When the RowStatus value is 'createAndWait', information for a row is cached in memory; when RowStatus is set to 'createAndGo' or 'active', it indicates that all information is to be written to permanent storage, and the SPVC to be enabled (AdminStatus must also be set to 'enabled'). When querying the object, 'active' indicates a configured SPVC with its AdminStatus enabled, while a status of 'notInService' indicates either a disabled AdminStatus or an inability to connect the SPVC. If a query returns 'notInService', use the CallStatus object to further determine the state of the SPVC. If the value 'notReady' is returned, it indicates that the SNMP agent is awaiting further information before activating the connection. When deleting a connection, use this object with the value 'destroy'")
nncCrSpvpcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 1)).setObjects(("NNCEXTSPVC-MIB", "nncCrSpvpcServiceCategory"), ("NNCEXTSPVC-MIB", "nncCrSpvpcTargEpAddr"), ("NNCEXTSPVC-MIB", "nncCrSpvpcTargVpi"), ("NNCEXTSPVC-MIB", "nncCrSpvpcAdminStatus"), ("NNCEXTSPVC-MIB", "nncCrSpvpcPriority"), ("NNCEXTSPVC-MIB", "nncCrSpvpcMaxAdminWeight"), ("NNCEXTSPVC-MIB", "nncCrSpvpcOperation"), ("NNCEXTSPVC-MIB", "nncCrSpvpcCallStatus"), ("NNCEXTSPVC-MIB", "nncCrSpvpcLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdAbrDynTrfcIcr"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdAbrDynTrfcRif"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdAbrDynTrfcRdf"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdAbrDynTrfcIcr"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdAbrDynTrfcRif"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdAbrDynTrfcRdf"), ("NNCEXTSPVC-MIB", "nncCrSpvpcSrcBillingFlag"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmTrafficDescriptor"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmPolicingOption"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmBucketTwoRate"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmBucketTwoMbs"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmCdv"), ("NNCEXTSPVC-MIB", "nncCrSpvpcFwdTmClr"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmTrafficDescriptor"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmPolicingOption"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmBucketTwoRate"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmBucketTwoMbs"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmCdv"), ("NNCEXTSPVC-MIB", "nncCrSpvpcBwdTmClr"), ("NNCEXTSPVC-MIB", "nncCrSpvpcCreator"), ("NNCEXTSPVC-MIB", "nncCrSpvpcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCrSpvpcGroup = nncCrSpvpcGroup.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcGroup.setDescription('Common MIB objects for configuring a CR SPVPC source end-point across all Alcatel CID ATM platforms.')
nncCrSpvpcDstCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 2)).setObjects(("NNCEXTSPVC-MIB", "nncCrSpvpcDstCfgCdvt"), ("NNCEXTSPVC-MIB", "nncCrSpvpcDstCfgPolicing"), ("NNCEXTSPVC-MIB", "nncCrSpvpcDstCfgBillingFlag"), ("NNCEXTSPVC-MIB", "nncCrSpvpcDstCfgLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncCrSpvpcDstCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCrSpvpcDstCfgGroup = nncCrSpvpcDstCfgGroup.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvpcDstCfgGroup.setDescription('Common MIB objects for configuring a Cell Relay SPVPC destination end-point across all Alcatel CID ATM platforms.')
nncCrSpvccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 3)).setObjects(("NNCEXTSPVC-MIB", "nncCrSpvccServiceCategory"), ("NNCEXTSPVC-MIB", "nncCrSpvccTargEpAddr"), ("NNCEXTSPVC-MIB", "nncCrSpvccTargVpi"), ("NNCEXTSPVC-MIB", "nncCrSpvccTargVci"), ("NNCEXTSPVC-MIB", "nncCrSpvccTargDlci"), ("NNCEXTSPVC-MIB", "nncCrSpvccTargCeNumber"), ("NNCEXTSPVC-MIB", "nncCrSpvccTargEpType"), ("NNCEXTSPVC-MIB", "nncCrSpvccAdminStatus"), ("NNCEXTSPVC-MIB", "nncCrSpvccPriority"), ("NNCEXTSPVC-MIB", "nncCrSpvccMaxAdminWeight"), ("NNCEXTSPVC-MIB", "nncCrSpvccOperation"), ("NNCEXTSPVC-MIB", "nncCrSpvccCallStatus"), ("NNCEXTSPVC-MIB", "nncCrSpvccLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdAbrDynTrfcIcr"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdAbrDynTrfcRif"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdAbrDynTrfcRdf"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdAbrDynTrfcIcr"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdAbrDynTrfcRif"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdAbrDynTrfcRdf"), ("NNCEXTSPVC-MIB", "nncCrSpvccSrcBillingFlag"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmTrafficDescriptor"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmPolicingOption"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmBucketTwoRate"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmBucketTwoMbs"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmCdv"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmClr"), ("NNCEXTSPVC-MIB", "nncCrSpvccFwdTmFrameDiscard"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmTrafficDescriptor"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmPolicingOption"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmBucketTwoRate"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmBucketTwoMbs"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmCdv"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmClr"), ("NNCEXTSPVC-MIB", "nncCrSpvccBwdTmFrameDiscard"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmAr"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmCir"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmBc"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmBe"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmIwf"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmPo"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmPacing"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmPtclMapping"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmClpMapping"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmDeMapping"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmEfciMapping"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmPvcMgntProfile"), ("NNCEXTSPVC-MIB", "nncCrSpvccFrBwdTmSIWProfile"), ("NNCEXTSPVC-MIB", "nncCrSpvccCreator"), ("NNCEXTSPVC-MIB", "nncCrSpvccRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCrSpvccGroup = nncCrSpvccGroup.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccGroup.setDescription('Common MIB objects for configuring a CR SPVC source end-point across all Alcatel CID ATM platforms.')
nncCrSpvccDstCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 4)).setObjects(("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgCdvt"), ("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgPolicing"), ("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgBillingFlag"), ("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgFrVsvdCongestionControl"), ("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCrSpvccDstCfgGroup = nncCrSpvccDstCfgGroup.setStatus('current')
if mibBuilder.loadTexts: nncCrSpvccDstCfgGroup.setDescription('Common MIB objects for configuring a Cell Relay SPVC destination end-point across all Alcatel CID ATM platforms.')
nncFrSpvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 5)).setObjects(("NNCEXTSPVC-MIB", "nncFrSpvcSrcDlci"), ("NNCEXTSPVC-MIB", "nncFrSpvcTargEpAddr"), ("NNCEXTSPVC-MIB", "nncFrSpvcTargDlci"), ("NNCEXTSPVC-MIB", "nncFrSpvcTargVpi"), ("NNCEXTSPVC-MIB", "nncFrSpvcTargVci"), ("NNCEXTSPVC-MIB", "nncFrSpvcTargEpType"), ("NNCEXTSPVC-MIB", "nncFrSpvcAdminStatus"), ("NNCEXTSPVC-MIB", "nncFrSpvcPriority"), ("NNCEXTSPVC-MIB", "nncFrSpvcMaxAdminWeight"), ("NNCEXTSPVC-MIB", "nncFrSpvcOperation"), ("NNCEXTSPVC-MIB", "nncFrSpvcCallStatus"), ("NNCEXTSPVC-MIB", "nncFrSpvcLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncFrSpvcSrcBillingFlag"), ("NNCEXTSPVC-MIB", "nncFrSpvcFrPriority"), ("NNCEXTSPVC-MIB", "nncFrSpvcFrVsvdCongestionControl"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdFrMir"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdTmAr"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdTmCir"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdTmBc"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdTmBe"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmIwf"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdTmPo"), ("NNCEXTSPVC-MIB", "nncFrSpvcFwdTmPacing"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmPtclMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmClpMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmDeMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmEfciMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmPvcMgntProfile"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmSIWProfile"), ("NNCEXTSPVC-MIB", "nncFrSpvcTmRemapDlci"), ("NNCEXTSPVC-MIB", "nncFrSpvcBwdTmAr"), ("NNCEXTSPVC-MIB", "nncFrSpvcBwdTmCir"), ("NNCEXTSPVC-MIB", "nncFrSpvcBwdTmBc"), ("NNCEXTSPVC-MIB", "nncFrSpvcBwdTmBe"), ("NNCEXTSPVC-MIB", "nncFrSpvcBwdTmPo"), ("NNCEXTSPVC-MIB", "nncFrSpvcBwdTmPacing"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrTmServiceCategory"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmTrafficDescriptor"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmPolicingOption"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmBucketTwoRate"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmBucketTwoMbs"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmCdv"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmClr"), ("NNCEXTSPVC-MIB", "nncFrSpvcCrBwdTmFrameDiscard"), ("NNCEXTSPVC-MIB", "nncFrSpvcCreator"), ("NNCEXTSPVC-MIB", "nncFrSpvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrSpvcGroup = nncFrSpvcGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcGroup.setDescription('Common MIB objects for configuring an SPVC using a Frame Relay source end-point across all Alcatel CID ATM platforms.')
nncFrSpvcDstCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 6)).setObjects(("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmAr"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmCir"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmBc"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmBe"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmIwf"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmPo"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmPacing"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmPtclMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmClpMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmDeMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmEfciMapping"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmPvcMgntProfile"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmSIWProfile"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgTmRemapDlci"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgBillingFlag"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgFrPriority"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncFrSpvcDstCfgGroup = nncFrSpvcDstCfgGroup.setStatus('current')
if mibBuilder.loadTexts: nncFrSpvcDstCfgGroup.setDescription('Common MIB objects for configuring a Frame-Relay SPVC destination end-point across all Alcatel CID ATM platforms.')
nncCeSpvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 7)).setObjects(("NNCEXTSPVC-MIB", "nncCeSpvcTargEpAddr"), ("NNCEXTSPVC-MIB", "nncCeSpvcTargVpi"), ("NNCEXTSPVC-MIB", "nncCeSpvcTargVci"), ("NNCEXTSPVC-MIB", "nncCeSpvcTargCeNumber"), ("NNCEXTSPVC-MIB", "nncCeSpvcTargEpType"), ("NNCEXTSPVC-MIB", "nncCeSpvcAdminStatus"), ("NNCEXTSPVC-MIB", "nncCeSpvcPriority"), ("NNCEXTSPVC-MIB", "nncCeSpvcMaxAdminWeight"), ("NNCEXTSPVC-MIB", "nncCeSpvcOperation"), ("NNCEXTSPVC-MIB", "nncCeSpvcCallStatus"), ("NNCEXTSPVC-MIB", "nncCeSpvcLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncCeSpvcFwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncCeSpvcFwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncCeSpvcBwdTmBucketOneRate"), ("NNCEXTSPVC-MIB", "nncCeSpvcBwdTmBucketOneCdvt"), ("NNCEXTSPVC-MIB", "nncCeSpvcCreator"), ("NNCEXTSPVC-MIB", "nncCeSpvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCeSpvcGroup = nncCeSpvcGroup.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcGroup.setDescription('Common MIB objects for configuring a Circuit Emulation-based SPVC source end-point across all Alcatel CID ATM platforms.')
nncCeSpvcDstCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 82, 3, 8)).setObjects(("NNCEXTSPVC-MIB", "nncCeSpvcDstCfgCdvt"), ("NNCEXTSPVC-MIB", "nncCeSpvcDstCfgLocRerouteConfig"), ("NNCEXTSPVC-MIB", "nncCeSpvcDstCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncCeSpvcDstCfgGroup = nncCeSpvcDstCfgGroup.setStatus('current')
if mibBuilder.loadTexts: nncCeSpvcDstCfgGroup.setDescription('Common MIB objects for configuring a Circuit Emulation SPVC destination end-point across all Alcatel CID ATM platforms.')
nncSpvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 82, 4, 1)).setObjects(("NNCEXTSPVC-MIB", "nncCrSpvpcGroup"), ("NNCEXTSPVC-MIB", "nncCrSpvpcDstCfgGroup"), ("NNCEXTSPVC-MIB", "nncCrSpvccGroup"), ("NNCEXTSPVC-MIB", "nncCrSpvccDstCfgGroup"), ("NNCEXTSPVC-MIB", "nncFrSpvcGroup"), ("NNCEXTSPVC-MIB", "nncFrSpvcDstCfgGroup"), ("NNCEXTSPVC-MIB", "nncCeSpvcGroup"), ("NNCEXTSPVC-MIB", "nncCeSpvcDstCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncSpvcCompliance = nncSpvcCompliance.setStatus('current')
if mibBuilder.loadTexts: nncSpvcCompliance.setDescription('The compliance statement for Alcatel CID SPVC MIB implementation.')
mibBuilder.exportSymbols("NNCEXTSPVC-MIB", nncCrSpvpcTableEntry=nncCrSpvpcTableEntry, nncCeSpvcOperation=nncCeSpvcOperation, nncCrSpvpcBwdTmBucketOneRate=nncCrSpvpcBwdTmBucketOneRate, nncCrSpvccBwdTmPolicingOption=nncCrSpvccBwdTmPolicingOption, nncFrSpvcTargDlci=nncFrSpvcTargDlci, nncCrSpvccFwdTmTrafficDescriptor=nncCrSpvccFwdTmTrafficDescriptor, nncFrSpvcDstCfgTmAr=nncFrSpvcDstCfgTmAr, nncCrSpvpcDstCfgTable=nncCrSpvpcDstCfgTable, nncCrSpvccBwdAbrDynTrfcRdf=nncCrSpvccBwdAbrDynTrfcRdf, nncFrSpvcDstCfgTmCir=nncFrSpvcDstCfgTmCir, nncFrSpvcDstCfgTmDeMapping=nncFrSpvcDstCfgTmDeMapping, nncCrSpvpcDstCfgPolicing=nncCrSpvpcDstCfgPolicing, nncFrSpvcFwdTmAr=nncFrSpvcFwdTmAr, nncFrSpvcFwdTmPo=nncFrSpvcFwdTmPo, nncCrSpvccFwdTmClr=nncCrSpvccFwdTmClr, nncFrSpvcCrBwdTmClr=nncFrSpvcCrBwdTmClr, nncFrSpvcFwdTmPacing=nncFrSpvcFwdTmPacing, nncCrSpvccBwdTmBucketOneCdvt=nncCrSpvccBwdTmBucketOneCdvt, nncFrSpvcDstCfgTmClpMapping=nncFrSpvcDstCfgTmClpMapping, nncCrSpvpcFwdTmPolicingOption=nncCrSpvpcFwdTmPolicingOption, nncFrSpvcBwdTmBc=nncFrSpvcBwdTmBc, nncCrSpvpcAdminStatus=nncCrSpvpcAdminStatus, nncCrSpvpcFwdTmClr=nncCrSpvpcFwdTmClr, nncCrSpvccFwdTmBucketTwoRate=nncCrSpvccFwdTmBucketTwoRate, nncFrSpvcFrVsvdCongestionControl=nncFrSpvcFrVsvdCongestionControl, nncFrSpvcDstCfgTmBe=nncFrSpvcDstCfgTmBe, nncFrSpvcDstCfgTmPacing=nncFrSpvcDstCfgTmPacing, nncCeSpvcCreator=nncCeSpvcCreator, nncCrSpvccTargEpAddr=nncCrSpvccTargEpAddr, nncCrSpvpcBwdTmPolicingOption=nncCrSpvpcBwdTmPolicingOption, nncFrSpvcDstCfgGroup=nncFrSpvcDstCfgGroup, nncFrSpvcTmSIWProfile=nncFrSpvcTmSIWProfile, nncCeSpvcCallStatus=nncCeSpvcCallStatus, nncSpvcCompliance=nncSpvcCompliance, nncCrSpvccFrBwdTmEfciMapping=nncCrSpvccFrBwdTmEfciMapping, nncCrSpvccDstCfgTableEntry=nncCrSpvccDstCfgTableEntry, nncCeSpvcDstCfgLocRerouteConfig=nncCeSpvcDstCfgLocRerouteConfig, nncCrSpvpcBwdAbrDynTrfcRdf=nncCrSpvpcBwdAbrDynTrfcRdf, nncFrSpvcTmRemapDlci=nncFrSpvcTmRemapDlci, nncFrSpvcCrBwdTmCdv=nncFrSpvcCrBwdTmCdv, nncCrSpvccFwdTmBucketOneCdvt=nncCrSpvccFwdTmBucketOneCdvt, nncCrSpvccBwdTmBucketOneRate=nncCrSpvccBwdTmBucketOneRate, nncCeSpvcFwdTmBucketOneCdvt=nncCeSpvcFwdTmBucketOneCdvt, nncCrSpvccFrBwdTmPo=nncCrSpvccFrBwdTmPo, nncCeSpvcTargEpType=nncCeSpvcTargEpType, nncCrSpvpcBwdTmBucketTwoMbs=nncCrSpvpcBwdTmBucketTwoMbs, nncCeSpvcBwdTmBucketOneCdvt=nncCeSpvcBwdTmBucketOneCdvt, nncCrSpvccFrBwdTmClpMapping=nncCrSpvccFrBwdTmClpMapping, nncExtSpvcObjects=nncExtSpvcObjects, nncCrSpvpcDstCfgBillingFlag=nncCrSpvpcDstCfgBillingFlag, nncCrSpvccFrBwdTmPvcMgntProfile=nncCrSpvccFrBwdTmPvcMgntProfile, nncCrSpvccFrBwdTmSIWProfile=nncCrSpvccFrBwdTmSIWProfile, nncCrSpvccCreator=nncCrSpvccCreator, nncFrSpvcCallStatus=nncFrSpvcCallStatus, nncCrSpvccPriority=nncCrSpvccPriority, nncCrSpvccBwdTmBucketTwoRate=nncCrSpvccBwdTmBucketTwoRate, nncCrSpvccBwdTmCdv=nncCrSpvccBwdTmCdv, nncCrSpvccTargVci=nncCrSpvccTargVci, nncCrSpvpcBwdAbrDynTrfcRif=nncCrSpvpcBwdAbrDynTrfcRif, nncFrSpvcCrBwdTmBucketTwoRate=nncFrSpvcCrBwdTmBucketTwoRate, nncCeSpvcFwdTmBucketOneRate=nncCeSpvcFwdTmBucketOneRate, nncCrSpvccFrBwdTmDeMapping=nncCrSpvccFrBwdTmDeMapping, nncCrSpvccTargEpType=nncCrSpvccTargEpType, nncCrSpvccFwdTmBucketOneRate=nncCrSpvccFwdTmBucketOneRate, nncCeSpvcLocRerouteConfig=nncCeSpvcLocRerouteConfig, nncCrSpvccFwdTmBucketTwoMbs=nncCrSpvccFwdTmBucketTwoMbs, nncFrSpvcSrcBillingFlag=nncFrSpvcSrcBillingFlag, nncCrSpvpcFwdTmTrafficDescriptor=nncCrSpvpcFwdTmTrafficDescriptor, nncFrSpvcSrcDlci=nncFrSpvcSrcDlci, nncCrSpvpcCreator=nncCrSpvpcCreator, nncCrSpvccCallStatus=nncCrSpvccCallStatus, nncCrSpvccFwdAbrDynTrfcIcr=nncCrSpvccFwdAbrDynTrfcIcr, nncCeSpvcTargVpi=nncCeSpvcTargVpi, nncCrSpvpcRowStatus=nncCrSpvpcRowStatus, nncCrSpvccBwdTmClr=nncCrSpvccBwdTmClr, nncCrSpvccFrBwdTmPtclMapping=nncCrSpvccFrBwdTmPtclMapping, nncFrSpvcDstCfgLocRerouteConfig=nncFrSpvcDstCfgLocRerouteConfig, nncCeSpvcRowStatus=nncCeSpvcRowStatus, nncCrSpvccFwdTmPolicingOption=nncCrSpvccFwdTmPolicingOption, nncCrSpvpcFwdTmBucketTwoMbs=nncCrSpvpcFwdTmBucketTwoMbs, nncCrSpvccFwdAbrDynTrfcRif=nncCrSpvccFwdAbrDynTrfcRif, nncCeSpvcDstCfgCdvt=nncCeSpvcDstCfgCdvt, nncCrSpvccBwdTmBucketTwoMbs=nncCrSpvccBwdTmBucketTwoMbs, nncCrSpvpcTargEpAddr=nncCrSpvpcTargEpAddr, nncFrSpvcCrTmServiceCategory=nncFrSpvcCrTmServiceCategory, nncCrSpvccGroup=nncCrSpvccGroup, nncFrSpvcCrBwdTmBucketOneCdvt=nncFrSpvcCrBwdTmBucketOneCdvt, nncFrSpvcBwdTmBe=nncFrSpvcBwdTmBe, nncFrSpvcPriority=nncFrSpvcPriority, nncCrSpvpcTable=nncCrSpvpcTable, nncCrSpvccServiceCategory=nncCrSpvccServiceCategory, nncCrSpvccDstCfgPolicing=nncCrSpvccDstCfgPolicing, nncCrSpvpcPriority=nncCrSpvpcPriority, nncCrSpvccTable=nncCrSpvccTable, nncCrSpvpcFwdAbrDynTrfcIcr=nncCrSpvpcFwdAbrDynTrfcIcr, nncCrSpvpcFwdTmBucketTwoRate=nncCrSpvpcFwdTmBucketTwoRate, nncCrSpvpcBwdTmBucketOneCdvt=nncCrSpvpcBwdTmBucketOneCdvt, nncFrSpvcBwdFrMir=nncFrSpvcBwdFrMir, nncCeSpvcTargEpAddr=nncCeSpvcTargEpAddr, nncFrSpvcDstCfgBillingFlag=nncFrSpvcDstCfgBillingFlag, nncFrSpvcDstCfgTmBc=nncFrSpvcDstCfgTmBc, nncFrSpvcCreator=nncFrSpvcCreator, nncCrSpvccFwdTmCdv=nncCrSpvccFwdTmCdv, nncCrSpvpcBwdTmCdv=nncCrSpvpcBwdTmCdv, nncCrSpvpcDstCfgGroup=nncCrSpvpcDstCfgGroup, nncCrSpvccTargVpi=nncCrSpvccTargVpi, nncCrSpvpcDstCfgTableEntry=nncCrSpvpcDstCfgTableEntry, nncCrSpvccTargDlci=nncCrSpvccTargDlci, nncFrSpvcTargEpType=nncFrSpvcTargEpType, nncFrSpvcTmClpMapping=nncFrSpvcTmClpMapping, nncCrSpvccTableEntry=nncCrSpvccTableEntry, nncFrSpvcGroup=nncFrSpvcGroup, nncCrSpvccRowStatus=nncCrSpvccRowStatus, nncFrSpvcCrBwdTmPolicingOption=nncFrSpvcCrBwdTmPolicingOption, nncCrSpvpcBwdTmBucketTwoRate=nncCrSpvpcBwdTmBucketTwoRate, nncExtSpvcCompliances=nncExtSpvcCompliances, nncCrSpvpcMaxAdminWeight=nncCrSpvpcMaxAdminWeight, nncFrSpvcDstCfgTable=nncFrSpvcDstCfgTable, nncCrSpvccDstCfgLocRerouteConfig=nncCrSpvccDstCfgLocRerouteConfig, nncCeSpvcDstCfgRowStatus=nncCeSpvcDstCfgRowStatus, nncFrSpvcDstCfgFrPriority=nncFrSpvcDstCfgFrPriority, nncFrSpvcDstCfgTmPvcMgntProfile=nncFrSpvcDstCfgTmPvcMgntProfile, nncCrSpvccFrBwdTmBe=nncCrSpvccFrBwdTmBe, nncCrSpvccBwdTmTrafficDescriptor=nncCrSpvccBwdTmTrafficDescriptor, nncCrSpvccOperation=nncCrSpvccOperation, nncFrSpvcDstCfgTmPtclMapping=nncFrSpvcDstCfgTmPtclMapping, nncFrSpvcFwdTmBc=nncFrSpvcFwdTmBc, nncCrSpvpcBwdAbrDynTrfcIcr=nncCrSpvpcBwdAbrDynTrfcIcr, nncCeSpvcAdminStatus=nncCeSpvcAdminStatus, nncCrSpvpcDstCfgLocRerouteConfig=nncCrSpvpcDstCfgLocRerouteConfig, nncCrSpvpcTargVpi=nncCrSpvpcTargVpi, nncCrSpvpcFwdTmCdv=nncCrSpvpcFwdTmCdv, nncCrSpvccBwdAbrDynTrfcRif=nncCrSpvccBwdAbrDynTrfcRif, nncCeSpvcBwdTmBucketOneRate=nncCeSpvcBwdTmBucketOneRate, nncFrSpvcBwdTmPo=nncFrSpvcBwdTmPo, nncCeSpvcDstCfgGroup=nncCeSpvcDstCfgGroup, nncExtSpvc=nncExtSpvc, nncFrSpvcTargEpAddr=nncFrSpvcTargEpAddr, nncCrSpvccTargCeNumber=nncCrSpvccTargCeNumber, nncCrSpvccFrBwdTmBc=nncCrSpvccFrBwdTmBc, nncCrSpvpcBwdTmTrafficDescriptor=nncCrSpvpcBwdTmTrafficDescriptor, nncFrSpvcTargVci=nncFrSpvcTargVci, nncCeSpvcTableEntry=nncCeSpvcTableEntry, nncCeSpvcTargVci=nncCeSpvcTargVci, nncCeSpvcTable=nncCeSpvcTable, nncCeSpvcPriority=nncCeSpvcPriority, nncFrSpvcRowStatus=nncFrSpvcRowStatus, nncCrSpvccFrBwdTmAr=nncCrSpvccFrBwdTmAr, nncCrSpvpcLocRerouteConfig=nncCrSpvpcLocRerouteConfig, nncFrSpvcTable=nncFrSpvcTable, nncCrSpvpcDstCfgCdvt=nncCrSpvpcDstCfgCdvt, nncFrSpvcBwdTmPacing=nncFrSpvcBwdTmPacing, nncCrSpvpcFwdTmBucketOneRate=nncCrSpvpcFwdTmBucketOneRate, nncFrSpvcTargVpi=nncFrSpvcTargVpi, PYSNMP_MODULE_ID=nncExtSpvc, nncCrSpvccDstCfgCdvt=nncCrSpvccDstCfgCdvt, nncCrSpvpcBwdTmClr=nncCrSpvpcBwdTmClr, AtmFormatDisplay=AtmFormatDisplay, nncFrSpvcFwdTmBe=nncFrSpvcFwdTmBe, nncCrSpvpcCallStatus=nncCrSpvpcCallStatus, nncFrSpvcCrBwdTmBucketTwoMbs=nncFrSpvcCrBwdTmBucketTwoMbs, nncCrSpvpcDstCfgRowStatus=nncCrSpvpcDstCfgRowStatus, nncCrSpvccFrBwdTmPacing=nncCrSpvccFrBwdTmPacing, nncCrSpvccFrBwdTmCir=nncCrSpvccFrBwdTmCir, nncFrSpvcCrBwdTmTrafficDescriptor=nncFrSpvcCrBwdTmTrafficDescriptor, nncCeSpvcDstCfgTableEntry=nncCeSpvcDstCfgTableEntry, nncFrSpvcTmDeMapping=nncFrSpvcTmDeMapping, nncFrSpvcDstCfgTmSIWProfile=nncFrSpvcDstCfgTmSIWProfile, nncCrSpvccMaxAdminWeight=nncCrSpvccMaxAdminWeight, nncFrSpvcFrPriority=nncFrSpvcFrPriority, nncCrSpvccLocRerouteConfig=nncCrSpvccLocRerouteConfig, nncFrSpvcDstCfgTmPo=nncFrSpvcDstCfgTmPo, nncCrSpvccFrBwdTmIwf=nncCrSpvccFrBwdTmIwf, nncCrSpvccDstCfgBillingFlag=nncCrSpvccDstCfgBillingFlag, nncFrSpvcMaxAdminWeight=nncFrSpvcMaxAdminWeight, nncCrSpvccFwdAbrDynTrfcRdf=nncCrSpvccFwdAbrDynTrfcRdf, nncFrSpvcAdminStatus=nncFrSpvcAdminStatus, nncExtSpvcGroups=nncExtSpvcGroups, nncFrSpvcTmEfciMapping=nncFrSpvcTmEfciMapping, nncFrSpvcDstCfgTmEfciMapping=nncFrSpvcDstCfgTmEfciMapping, nncCrSpvccBwdAbrDynTrfcIcr=nncCrSpvccBwdAbrDynTrfcIcr, nncCrSpvccFwdTmFrameDiscard=nncCrSpvccFwdTmFrameDiscard, nncCeSpvcTargCeNumber=nncCeSpvcTargCeNumber, nncCrSpvccDstCfgRowStatus=nncCrSpvccDstCfgRowStatus, nncFrSpvcFwdTmCir=nncFrSpvcFwdTmCir, nncFrSpvcBwdTmCir=nncFrSpvcBwdTmCir, nncCrSpvccDstCfgTable=nncCrSpvccDstCfgTable, nncFrSpvcTmPtclMapping=nncFrSpvcTmPtclMapping, nncCrSpvpcFwdAbrDynTrfcRdf=nncCrSpvpcFwdAbrDynTrfcRdf, nncFrSpvcTmIwf=nncFrSpvcTmIwf, nncCrSpvccAdminStatus=nncCrSpvccAdminStatus, nncFrSpvcDstCfgTableEntry=nncFrSpvcDstCfgTableEntry, nncFrSpvcTableEntry=nncFrSpvcTableEntry, nncFrSpvcBwdTmAr=nncFrSpvcBwdTmAr, nncFrSpvcDstCfgTmRemapDlci=nncFrSpvcDstCfgTmRemapDlci, nncCrSpvccDstCfgGroup=nncCrSpvccDstCfgGroup, nncCrSpvpcFwdTmBucketOneCdvt=nncCrSpvpcFwdTmBucketOneCdvt, nncCeSpvcGroup=nncCeSpvcGroup, nncFrSpvcFwdFrMir=nncFrSpvcFwdFrMir, nncCrSpvpcSrcBillingFlag=nncCrSpvpcSrcBillingFlag, nncCeSpvcDstCfgTable=nncCeSpvcDstCfgTable, nncFrSpvcLocRerouteConfig=nncFrSpvcLocRerouteConfig, nncCrSpvpcOperation=nncCrSpvpcOperation, nncCrSpvccSrcBillingFlag=nncCrSpvccSrcBillingFlag, nncCrSpvccBwdTmFrameDiscard=nncCrSpvccBwdTmFrameDiscard, nncFrSpvcCrBwdTmBucketOneRate=nncFrSpvcCrBwdTmBucketOneRate, nncCrSpvpcGroup=nncCrSpvpcGroup, nncFrSpvcDstCfgTmIwf=nncFrSpvcDstCfgTmIwf, nncCrSpvpcServiceCategory=nncCrSpvpcServiceCategory, nncFrSpvcOperation=nncFrSpvcOperation, nncCeSpvcMaxAdminWeight=nncCeSpvcMaxAdminWeight, nncFrSpvcCrBwdTmFrameDiscard=nncFrSpvcCrBwdTmFrameDiscard, nncFrSpvcDstCfgRowStatus=nncFrSpvcDstCfgRowStatus, nncFrSpvcTmPvcMgntProfile=nncFrSpvcTmPvcMgntProfile, nncCrSpvccDstCfgFrVsvdCongestionControl=nncCrSpvccDstCfgFrVsvdCongestionControl, nncCrSpvpcFwdAbrDynTrfcRif=nncCrSpvpcFwdAbrDynTrfcRif)
