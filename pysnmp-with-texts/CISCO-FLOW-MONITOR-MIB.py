#
# PySNMP MIB module CISCO-FLOW-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FLOW-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
FlowMetrics, FlowMonitorConditions, FlowMetricScale, FlowBitRateUnits, FlowIdentifier, FlowMetricPrecision, FlowPointType, FlowMonitorIdentifier, FlowMonitorConditionsProfile, FlowMonitorConditionIdentifier, FlowMetricValue, FlowMonitorAlarmGroupIdentifier, FlowSetIdentifier, FlowPointIdentifier, FlowMonitorConditionsProfileOrZero = mibBuilder.importSymbols("CISCO-FLOW-MONITOR-TC-MIB", "FlowMetrics", "FlowMonitorConditions", "FlowMetricScale", "FlowBitRateUnits", "FlowIdentifier", "FlowMetricPrecision", "FlowPointType", "FlowMonitorIdentifier", "FlowMonitorConditionsProfile", "FlowMonitorConditionIdentifier", "FlowMetricValue", "FlowMonitorAlarmGroupIdentifier", "FlowSetIdentifier", "FlowPointIdentifier", "FlowMonitorConditionsProfileOrZero")
ReportIntervalCount, = mibBuilder.importSymbols("CISCO-REPORT-INTERVAL-TC-MIB", "ReportIntervalCount")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoAlarmSeverity, Layer2Cos = mibBuilder.importSymbols("CISCO-TC", "CiscoAlarmSeverity", "Layer2Cos")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, IpAddress, MibIdentifier, NotificationType, ObjectIdentity, ModuleIdentity, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Bits, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "MibIdentifier", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Bits", "Integer32", "Gauge32")
RowPointer, TextualConvention, DisplayString, AutonomousType, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TextualConvention", "DisplayString", "AutonomousType", "TimeStamp", "TruthValue")
ciscoFlowMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692))
ciscoFlowMonitorMIB.setRevisions(('2009-04-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFlowMonitorMIB.setRevisionsDescriptions(('The initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoFlowMonitorMIB.setLastUpdated('200904080000Z')
if mibBuilder.loadTexts: ciscoFlowMonitorMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFlowMonitorMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoFlowMonitorMIB.setDescription("This MIB module defines objects that describe flow monitoring. A typical application of this MIB module will facilitate monitoring media flows, especially flows carrying video streams. However, by no means does the definition of this MIB module prevents other applications from using it. FLOW MONITORS ================= At the top level, this MIB module describes the notion of a flow monitor. A flow monitor is a hardware or software entity that classifies traffic flows, collects data on conforming traffic flows, and periodically computes metrics that reflect the quality of the traffic flows. Because a device can support more than one flow monitor, the MIB module defines the cfmFlowMonitorTable. Consider an edge router that supports a certain line card that has an integrated capability to monitor video flows. In this example, the cfmFlowMonitorTable would contain a row describing each line card installed in the device. TRAFFIC FLOWS ================= At the next level, this MIB module describes the notion of a traffic flow. This MIB module uniquely identifies a traffic flow using an auxiliary variable called cfmFlowId; however, an implementation only has guarantee its uniqueness within the scope of the flow monitor that has the responsibility for monitoring the traffic flow. Thus, we can think of the flow monitor as a container for the traffic flows for which it collects data and periodically computes metrics, as the figure below illustrates. +----------------------------+ | cfmFlowTable | | | +----------------------+ +--------------------------------+ | cfmFlowMonitorId = 3 ----->| +------------------------+ | +----------------------+ | | cfmFlowMonitorId = 3 | | | | cfmFlowId = 101 | | | +------------------------+ | | +------------------------+ | | | cfmFlowMonitorId = 3 | | | | cfmFlowId = 102 | | | +------------------------+ | | : | | : | | +------------------------+ | | | cfmFlowMonitorId = 3 | | | | cfmFlowId = 150 | | | +------------------------+ | +--------------------------------+ | | +----------------------+ +--------------------------------+ | cfmFlowMonitorId = 4 ----->| +------------------------+ | +----------------------+ | | cfmFlowMonitorId = 4 | | | | cfmFlowId = 1 | | | +------------------------+ | | +------------------------+ | | | cfmFlowMonitorId = 4 | | | | cfmFlowId = 2 | | | +------------------------+ | | : | | : | | +------------------------+ | | | cfmFlowMonitorId = 4 | | | | cfmFlowId = 150 | | | +------------------------+ | +--------------------------------+ | | +----------------------------+ While the identifying of a traffic flow using this auxiliary variable is convenient for the MIB module, it is does suffice for an EMS/NMS trying to isolate faults in a network delivering these traffic flows. To aid an EMS/NMS in this task, this MIB module defines a number of tables that provide layers of data relating to a traffic flow, including: o cfmFlowL2VlanTable - describes L2 VLAN data relating to traffic flows. o cfmFlowIpTable - describes IP data relating to traffic flows. o cfmFlowUdpTable - describes UDP data relating to traffic flows. o cfmFlowTcpTable - describes TCP data relating to traffic flows. o cfmFlowRtpTable - describes RTP data relating to traffic flows. Each of these tables have a sparse dependent relationship on the cfmFlowTable, as there exist situations when the data may not be available for a traffic flow, including: 1) The flow monitor simply may not collect the particular data for the traffic flows that it has the responsibility of monitoring. For example, a flow monitor may not have any concern for L2 VLAN data. 2) The data may not apply to a traffic flow. For example, a TCP and RTP data do not apply for a UDP traffic flow. To help an EMS/NMS navigate the data collected for a traffic flow, the corresponding rows are daisy-chained using 'next objects'. An EMS/NMS starts with cfmFlowNext, which indicates a reference to the row in the next table containing data related to the traffic flow. The first object contained by each of these tables is a 'next object'. Consider a RTP traffic flow for which the flow monitor has collected IP, UDP, and RTP data. The figure below illustrates how this MIB module daisy chains this data through the relevant tables. +-------------------------------------------+ | cfmFlowTable | | +---------------------------------------+ | | | cfmFlowMonitorId = 3 | | | | cfmFlowId = 42 | | | | cfmFlowNext = cfmFlowIpNext.3.42 ----------+ | +---------------------------------------+ | | +-------------------------------------------+ | | +-------------------------------------------+ | | cfmFlowIpTable | | | +---------------------------------------+ | | | | cfmFlowMonitorId = 3 |<---+ | | cfmFlowId = 42 | | | | cfmFlowIpNext = cfmFlowUdpNext.3.42 -------+ | +---------------------------------------+ | | +-------------------------------------------+ | | +-------------------------------------------+ | | cfmFlowUdpTable | | | +---------------------------------------+ | | | | cfmFlowMonitorId = 3 |<---+ | | cfmFlowId = 42 | | | | cfmFlowUdpNext = cfmFlowRtpNext.3.42 ------+ | +---------------------------------------+ | | +-------------------------------------------+ | | +-------------------------------------------+ | | cfmFlowRtpTable | | | +---------------------------------------+ | | | | cfmFlowMonitorId = 3 |<---+ | | cfmFlowId = 42 | | | | cfmFlowRtpNext = zeroDotZero | | | +---------------------------------------+ | +-------------------------------------------+ Observe that this structure simplifies the task of extending the MIB module to support additional layers of data. For example, if there is a need for a device to collect data relating to the MPEG-TS layer of a flow carrying a video stream, then it is as simple as defining a table containing this data. However, the definition of such a table must comply with the following requirements: 1) The table must have a sparse dependent relationship on the cfmFlowTable. 2) The first object contained by the table must be a 'next object' to support daisy chaining. REPORTING FLOW METRICS ========================== At the next level, the MIB defines two tables that together form the foundation for reporting metrics. The cfmFlowMetricsTable has a one-to-one dependent relationship on the cfmFlowTable, and it contains data aggregate metrics and data relating to the collection of metrics for the corresponding traffic flow. A row in this table also serves as a container for the historic metrics computed by the corresponding flow monitor, as the figure below illustrates. +----------------------------+ | cfmFlowMetricsIntTable | | | +----------------------+ +----------------------------------+ | cfmFlowMetricsEntry |-->| +------------------------------+ | | | | | cfmFlowMonitorId = 3 | | | cfmFlowMonitorId = 3 | | | cfmFlowId = 101 | | | cfmFlowid = 101 | | | cfmFlowMetricsIntNumber = 1 | | +----------------------+ | +------------------------------+ | | +------------------------------+ | | | cfmFlowMonitorId = 3 | | | | cfmFlowId = 101 | | | | cfmFlowMetricsIntNumber = 2 | | | +------------------------------+ | | : | | : | | +------------------------------+ | | | cfmFlowMonitorId = 3 | | | | cfmFlowId = 101 | | | | cfmFlowMetricsIntNumber = N | | | +------------------------------+ | +----------------------------------+ | | +----------------------------+ The device collects data for a traffic flow over a configured measurement interval, indicated by cfmFlowMetricsIntervalTime. At the end of a measurement interval, the device computes metrics from this data, generating a report. An EMS/NMS can access this report using the cfmFlowMetricsIntTable. cfmFlowMetricsMaxInterval indicates the maximum number of reports a device will save for the corresponding traffic flow, while cfmFlowMetricsIntervals indicates the number of reports currently saved by the device. The cfmFlowMetricsTable and cfmFlowMetricsIntTable have the intent of providing a foundation for reporting metrics for a traffic flow. Furthermore, it is the intent that additional MIB modules define extensions to these tables describing specific sets of metrics. The following list provides some examples: o CISCO-FLOW-MON-MDI-MIB - this MIB module defines extensions that describe MDI metrics defined by RFC-4445. o CISCO-FLOW-MON-RTP-MIB - this MIB module defines extensions that describe RTP metrics defined by RFC-3550. o CISCO-FLOW-MON-IP-CBR-MIB - this MIB module defines extension that describe IP CBR metrics. The tables defined by these MIB modules have a sparse dependent relationhip on the cfmFlowMetricsTable and cfmFlowMetricsIntTable. An EMS/NMS can determine the metrics collected for a traffic flow from the corresponding instance of cfmFlowMetricsCollected, which is nothing more than a bit string-value for which each bit corresponds to a different set of metrics. FAULT MANAGEMENT ==================== At the next level, this MIB module defines tables that describe standing conditions. A standing condition is a lasting error, fault, or warning resulting from the application of a set of criteria to the state of an entity. For example, a flow monitor ceases monitoring a traffic flow when it has not received any packets for that traffic flow in a configured interval of time. If flow monitor expires a significantly large number of traffic flows during a measurement interval, then this might signal a fault. In this example, the 'set of criteria' is a rising threshold and the 'state of an entity' is the number of traffic flows expired by a flow monitor. The cfmConditionTable describes the criteria applied to entities managed by the device, specifically flow monitors and traffic flows. The table groups these criteria into 'conditions profiles'. The device periodically applies these criteria to an entity and saves the results in a bit string-value associated with the entity. An EMS/NMS can monitor the most recent standing conditions for a flow monitor by retrieving the corresponding instance of cfmFlowMonitorConditions. Likewise, an EMS/NMS can monitor the most recent standing conditions for a traffic flow by retrieving the corresponding instance of cfmFlowMetricsConditions. It goes without saying that monitoring the standing conditions for significantly large numbers of traffic flows becomes problematic. To aid an EMS/NMS in this task, this MIB module defines many mechanisms. The most basic of these mechanisms is the notion of an alarm, which is simply a standing condition for which the device signals changes in state. This MIB module provides for three means of signaling when the device raises or clears an alarm condition: 1) Logging - the device creates a record of the event and saves it in a historical account. 2) syslog - the device generates a syslog message containing details of the event and sends it to one or more configured syslog server. 3) SNMP - the device generates a SNMP notification containing details of the event and sends it to one or more configured targets. An EMS/NMS can monitor the most recent alarm conditions for a flow monitor by retrieving the corresponding instance of cfmFlowMonitorAlarms. Likewise, the EMS/NMS can monitor the most recent alarm conditions for a traffic flow by retrieving the corresponding instance of cfmFlowMetricsAlarms. Additionally, the EMS/NMS can poll a summary of alarm conditions maintained for each flow monitor and the traffic flows that it monitors. The following list summarizes the data contained by this summary: o cfmFlowMonitorAlarmSeverity o cfmFlowMonitorAlarmCriticalCount o cfmFlowMonitorAlarmMajorCount o cfmFlowMonitorAlarmMinorCount o cfmFlowMonitorAlarmWarningCount o cfmFlowMonitorAlarmInfoCount An EMS/NMS can also poll cfmAlarmHistoryLastId, which indicates the value of the identifier assigned to the last record saved to the historical account. When it observes a change in the value of this object, then it can retrieve the new records from the cfmAlarmHistoryTable. The burden of monitoring alarm conditions for sufficiently large numbers of traffic flows can itself become a daunting task. Thus, this MIB module defines the notion of an alarm group, which represents a single alarm condition that aggregates a standing condition for a set of traffic flows. The cfmAlarmGroupTable describes the alarm groups configured for a device, and the cfmAlarmGroupFlowTable describes the sets of flows aggregated by these alarm groups. GLOSSARY ============ Alarm Action - a method used by the device to signal changes in an alarm condition. Alarm Aggregation - a technique used to efficiently monitor the same standing condition for a flow set. Alarm Condition - a standing condition for which the device signals changes in state. Alarm Group - a flow set for which the device monitors a configured standing condition, raising an alarm when a configured number of flows in the flow set assert the standing standing. Alarm Severity - the relative disposition of an alarm condition when raised by the device. For example, a provider may regard a flow stop alarm as having a higher severity than a flow's loss fraction exceeding a configured threshold. Flow Monitor - a hardware or software entity that classifies traffic flows, collects flow data, and periodically computes flow metrics. Flow Metric - a measurement that reflects the quality of a traffic flow. Flow Point - represents the ingress or egress of a traffic flow. Flow Set - a group of traffic flows. Measurement Interval - the length of time over which a flow monitor collects data related to a traffic flow, after which the flow monitor computes flow metrics using the collected data. Standing Condition - represents a lasting error, fault, or warning resulting from the application of a set of criteria to the state of an entity, such as a flow monitor or traffic flow. For example, a flow monitor may assert a standing condition if the number of traffic flows that expire in a measurement interval exceeds a configured threshold. Traffic Flow - a unidirectional stream of packets conforming to a classifier. For example, packets having a particular source IP address, destination IP address, protocol type, source port number, and destination port number.")
ciscoFlowMonitorMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 0))
ciscoFlowMonitorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1))
ciscoFlowMonitorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 2))
ciscoFlowMonitorMIBIds = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 3))
cfmFlowMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1))
cfmFlowMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1), )
if mibBuilder.loadTexts: cfmFlowMonitorTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorTable.setDescription('This table lists the flow monitors contained by the device.')
cfmFlowMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"))
if mibBuilder.loadTexts: cfmFlowMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorEntry.setDescription('An entry describes a flow monitor, which represents a hardware or software entity that classifies traffic flows, monitors flow data, and periodically computes flow metrics. A simple device may only support a single flow monitor, where a more sophisticated device may support more than one flow monitor. A device supporting multiple flow monitors creates a row in the cfmFlowMonitorTable when it recognizes the addition of a new flow monitor, such as might occur upon the insertion of a line card that supports flow monitoring. Likewise, such a device destroys a row in the cfmFlowMonitorTable when a flow monitor has been removed.')
cfmFlowMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 1), FlowMonitorIdentifier())
if mibBuilder.loadTexts: cfmFlowMonitorId.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies the flow monitor. Observe that the value assigned to a flow monitor does not necessarily persist across restarts or the removal-insertion of a physical entity supporting flow monitor(s).')
cfmFlowMonitorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorDescr.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorDescr.setDescription('This object indicates a human-readable description for the flow monitor.')
cfmFlowMonitorCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 3), FlowMetrics()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorCaps.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorCaps.setDescription("This object indicates the capabilities of the flow monitor. Specifically, the value of this column indicates a '1' for each set of flow metrics the flow monitor is capable of measuring.")
cfmFlowMonitorFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 4), Gauge32()).setUnits('traffic flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorFlowCount.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorFlowCount.setDescription('This object indicates the number of traffic flows currently monitored by the flow monitor.')
cfmFlowMonitorConditionsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 5), FlowMonitorConditionsProfileOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorConditionsProfile.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorConditionsProfile.setDescription('This object indicates the conditions profile that contains the descriptions of the standing conditions monitored for the flow monitor. If the flow monitor does not have an associated conditions profile, then the value of this column must be zero.')
cfmFlowMonitorConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 6), FlowMonitorConditions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorConditions.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorConditions.setDescription('This object indicates the current standing conditions for the flow monitor. If the flow monitor does not have an associated conditions profile, then the value of this column must be the null string.')
cfmFlowMonitorAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 7), FlowMonitorConditions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarms.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarms.setDescription('This object indicates the current alarm conditions for the flow monitor. If the flow monitor does not have an associated conditions profile, then the value of this column must be the null string.')
cfmFlowMonitorAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 8), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarmSeverity.setDescription("This object indicates the high severity alarm condition currently raised by the flow monitor and the traffic flows monitored by the flow monitor. If no alarm is raised for the flow monitor and the traffic flows monitored for the flow monitor, then the value of this column is 'cleared'.")
cfmFlowMonitorAlarmCriticalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 9), Gauge32()).setUnits('alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarmCriticalCount.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarmCriticalCount.setDescription('This object indicates the number of alarm conditions with a critical severity currently raised for traffic flows monitored by the flow monitor.')
cfmFlowMonitorAlarmMajorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 10), Gauge32()).setUnits('alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarmMajorCount.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarmMajorCount.setDescription('This object indicates the number of alarm conditions with a major severity currently raised for traffic flows monitored by the flow monitor.')
cfmFlowMonitorAlarmMinorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 11), Gauge32()).setUnits('alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarmMinorCount.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarmMinorCount.setDescription('This object indicates the number of alarm conditions with a minor severity currently raised for traffic flows monitored by the flow monitor.')
cfmFlowMonitorAlarmWarningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 12), Gauge32()).setUnits('alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarmWarningCount.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarmWarningCount.setDescription('This object indicates the number of alarm conditions with a warning severity currently raised for traffic flows monitored by the flow monitor.')
cfmFlowMonitorAlarmInfoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 1, 1, 13), Gauge32()).setUnits('alarms').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorAlarmInfoCount.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorAlarmInfoCount.setDescription('This object indicates the number of alarm conditions with a informational severity currently raised for traffic flows monitored by the flow monitor.')
cfmFlowMonitorTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMonitorTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device created or destroyed a row in cfmFlowMonitorTable.')
cfmFlows = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2))
cfmFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1), )
if mibBuilder.loadTexts: cfmFlowTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTable.setDescription('This table lists the traffic flows monitored by each flow monitor supported by the device. This table has an expansion dependent relationship on the cfmFlowMonitorTable, containing zero or more rows for each flow monitor.')
cfmFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowEntry.setDescription('An entry describes a traffic flow monitored by a flow monitor. The device creates a row in the cfmFlowTable when a flow monitor starts monitoring a traffic flow. Likewise, the device destroys a row in the cfmFlowTable when a traffic flow monitored by a flow monitor has timed out.')
cfmFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 1), FlowIdentifier())
if mibBuilder.loadTexts: cfmFlowId.setStatus('current')
if mibBuilder.loadTexts: cfmFlowId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies a traffic flow in the scope of the flow monitor that learned it. Observe that the value assigned to a flow does not necessarily persist across restarts or the removal-insertion of a physical entity supporting flow monitor(s).')
cfmFlowDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowDescr.setStatus('current')
if mibBuilder.loadTexts: cfmFlowDescr.setDescription('This object indicates a human-readable description of the traffic flow.')
cfmFlowNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowNext.setStatus('current')
if mibBuilder.loadTexts: cfmFlowNext.setDescription('This object indicates a reference to a row in another table containing additional data relating to the traffic flow.')
cfmFlowCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowCreateTime.setStatus('current')
if mibBuilder.loadTexts: cfmFlowCreateTime.setDescription('This object indicates the value of sysUpTime when the row was created.')
cfmFlowDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cfmFlowDiscontinuityTime.setDescription('This object indicates the value of sysUpTime on the most recent occasion at which any one or more of counters associated with the traffic flow suffered a discontinuity (e.g., process restart or failover event).')
cfmFlowExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowExpirationTime.setStatus('current')
if mibBuilder.loadTexts: cfmFlowExpirationTime.setDescription("This object indicates the expiration interval for the traffic flow. If the flow monitor receives no packets for the traffic flow in this interval, then it expires the flow; that is, it stops monitoring the traffic and removes the corresponding row from the cfmFlowTable. If this column is '0', then the traffic flow was statically configured (as opposed to dynamically learned) and it will never expire.")
cfmFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ingress", 2), ("egress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowDirection.setStatus('current')
if mibBuilder.loadTexts: cfmFlowDirection.setDescription("This object indicates the direction of the traffic flow where the flow monitor collects data: 'unknown' The SNMP entity does not know the direction of the traffic flow at the point the flow monitor collects data. 'ingress' The flow monitor collects data at the point where the traffic flow enters the devices 'egress' The flow monitor collects data at the point where the traffic flow leaves the device.")
cfmFlowAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("expire", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmFlowAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cfmFlowAdminStatus.setDescription("This object specifies the desired state of the traffic flow: 'enabled' The corresponding flow monitor is collecting data and computing metrics for the traffic flow. 'disabled' The corresponding flow monitor is not collecting data or computing metrics for the traffic flow. As long as a traffic flow remains in this state, the flow monitor will not expire the traffic flow. 'expire' When this column is set to this value, it forces the traffic flow to expire. It is not possible to return this value in a response to a retrieval operation.")
cfmFlowOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowOperStatus.setStatus('current')
if mibBuilder.loadTexts: cfmFlowOperStatus.setDescription("This object indicates the operational state of the traffic flow: 'enabled' The corresponding flow monitor is actively monitoring the traffic flow. 'disabled' The corresponding flow monitor is neither collecting data, nor computing metrics for the traffic flow.")
cfmFlowIngressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 10), FlowPointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIngressType.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIngressType.setDescription('This object indicates the type of port that receives the traffic for this traffic flow.')
cfmFlowIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 11), FlowPointIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIngress.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIngress.setDescription('This object identifies the port that receives the traffic for this traffic flow.')
cfmFlowEgressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 12), FlowPointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowEgressType.setStatus('current')
if mibBuilder.loadTexts: cfmFlowEgressType.setDescription('This object indicates the type of port that transmits the traffic for this traffic flow.')
cfmFlowEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 1, 1, 13), FlowPointIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowEgress.setStatus('current')
if mibBuilder.loadTexts: cfmFlowEgress.setDescription('This object identifies the port that transmits the traffic for this traffic flow.')
cfmFlowTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device created or destroyed a row in cfmFlowTable.')
cfmFlowL2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 3), )
if mibBuilder.loadTexts: cfmFlowL2VlanTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowL2VlanTable.setDescription('This table contains additional data relating to the L2 VLAN carrying traffic flows monitored by flow monitors. This table has a sparse dependent relationship on the cfmFlowTable.')
cfmFlowL2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowL2VlanEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowL2VlanEntry.setDescription('An entry describes data relating to the L2 VLAN carrying the corresponding traffic flow. A device creates a row in the cfmFlowL2VlanTable when a flow monitor has data relating to the L2 VLAN carrying a corresponding traffic flow. The device destroys a row in the cfmFlowL2VlanTable when the corresponding traffic flow times out.')
cfmFlowL2VlanNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 3, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowL2VlanNext.setStatus('current')
if mibBuilder.loadTexts: cfmFlowL2VlanNext.setDescription('This object indicates a reference to a row in another table containing additional data relating to the corresponding traffic flow.')
cfmFlowL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowL2VlanId.setStatus('current')
if mibBuilder.loadTexts: cfmFlowL2VlanId.setDescription('This object indicates the tag associated with the VLAN carrying the corresponding traffic flow.')
cfmFlowL2VlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 3, 1, 3), Layer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowL2VlanCos.setStatus('current')
if mibBuilder.loadTexts: cfmFlowL2VlanCos.setDescription('This object indicates the layer 2 COS assigned to the corresponding traffic flow.')
cfmFlowL2VlanTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowL2VlanTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowL2VlanTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device changed the cfmFlowL2VlanTable.')
cfmFlowIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5), )
if mibBuilder.loadTexts: cfmFlowIpTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpTable.setDescription('This table contains additional data relating to the IP carrying the corresponding traffic flow. This table has a sparse dependent relationship on the cfmFlowTable.')
cfmFlowIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowIpEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpEntry.setDescription('An entry describes data relating to the IP carrying the corresponding traffic flow. A device creates a row in the cfmFlowIpTable when the flow monitor has data relating to the IP carrying the corresponding traffic flow. The device destroys a row in this table when the corresponding traffic flow times out.')
cfmFlowIpNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpNext.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpNext.setDescription('This object indicates a reference to a row in another table containing additional data relating to the corresponding traffic flow.')
cfmFlowIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpAddrType.setDescription('This object indicates the type of IP address indicated by the corresponding instances of cfmFlowIpAddrSrc and cfmFlowIpAddrDst.')
cfmFlowIpAddrSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpAddrSrc.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpAddrSrc.setDescription('This object indicates the source IP address of the corresponding traffic flow.')
cfmFlowIpAddrDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpAddrDst.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpAddrDst.setDescription('This object indicates the destination IP address of the corresponding traffic flow.')
cfmFlowIpValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 5), Bits().clone(namedValues=NamedValues(("trafficClass", 0), ("hopLimit", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpValid.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpValid.setDescription('This object indicates whether the corresponding instances of cfmFlowIpTrafficClass and cfmFlowIpHopLimit are valid.')
cfmFlowIpTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpTrafficClass.setReference("J. Postel, 'Internet Protocol', RFC-791, September 1981. J. Deering and R. Hinden, 'Internet Protocol, Version 6 (IPv6) Specification', RFC-2460, December 1998.")
if mibBuilder.loadTexts: cfmFlowIpTrafficClass.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpTrafficClass.setDescription("This object indicates the traffic class of the corresponding traffic flow. If version 4 of the IP carries the traffic flow, then the value of this column corresponds to the 'Type of Service' field of the IP header contained by packets in the traffic flow. If version 6 of the IP carries the traffic flow, then the value of this column corresponds to the '' field of the IP header contained by packets in the traffic flow. The value of this column is valid only if the 'trafficClass' bit of the corresponding instance of cfmFlowIpValid is '1'.")
cfmFlowIpHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpHopLimit.setReference("J. Postel, 'Internet Protocol', RFC-791, September 1981. J. Deering and R. Hinden, 'Internet Protocol, Version 6 (IPv6) Specification', RFC-2460, December 1998.")
if mibBuilder.loadTexts: cfmFlowIpHopLimit.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpHopLimit.setDescription("This object indicates the hop limit of the corresponding traffic flow. If version 4 of the IP carries the traffic flow, then the value of this column corresponds to the 'Time to Live' field of the IP header contained by packets in the traffic flow (as observed by the flow monitor). If version 6 of the IP carries the traffic flow, then the value of this column corresponds to the 'Hop Limit' field of the IP header contained by packets in the traffic flow (as observed by the flow monitor). The value of this column is valid only if the 'hopLimit' bit of the corresponding instance of cfmFlowIpValid is '1'.")
cfmFlowIpTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowIpTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowIpTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device changed the cfmFlowIpTable.')
cfmFlowUdpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 7), )
if mibBuilder.loadTexts: cfmFlowUdpTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowUdpTable.setDescription('This table contains additional data relating to the UDP carrying the corresponding traffic flow. This table has a sparse dependent relationship on the cfmFlowTable.')
cfmFlowUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowUdpEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowUdpEntry.setDescription('An entry describes data relating to the UDP carrying the corresponding traffic flow. A device creates a row in the cfmFlowUdpTable when the flow monitor has data relating to the UDP carrying the corresponding traffic flow. The device destroys a row in this table when the corresponding traffic flow times out.')
cfmFlowUdpNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 7, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowUdpNext.setStatus('current')
if mibBuilder.loadTexts: cfmFlowUdpNext.setDescription('This object indicates a reference to a row in another table containing additional data relating to the corresponding traffic flow.')
cfmFlowUdpPortSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 7, 1, 2), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowUdpPortSrc.setStatus('current')
if mibBuilder.loadTexts: cfmFlowUdpPortSrc.setDescription('This object indicates the source UDP port number of the corresponding traffic flow.')
cfmFlowUdpPortDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 7, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowUdpPortDst.setStatus('current')
if mibBuilder.loadTexts: cfmFlowUdpPortDst.setDescription('This object indicates the destination UDP port number of the corresponding traffic flow.')
cfmFlowUdpTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowUdpTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowUdpTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device changed the cfmFlowUdpTable.')
cfmFlowTcpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 9), )
if mibBuilder.loadTexts: cfmFlowTcpTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTcpTable.setDescription('This table contains additional data relating to the TCP carrying the corresponding traffic flow. This table has a sparse dependent relationship on the cfmFlowTable.')
cfmFlowTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 9, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowTcpEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTcpEntry.setDescription('An entry describes data relating to the TCP carrying the corresponding traffic flow. A device creates a row in the cfmFlowTcpTable when the flow monitor has data relating to the TCP carrying the corresponding traffic flow. The device destroys a row in this table when the corresponding traffic flow times out.')
cfmFlowTcpNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 9, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowTcpNext.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTcpNext.setDescription('This object indicates a reference to a row in another table containing additional data relating to the corresponding traffic flow.')
cfmFlowTcpPortSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 9, 1, 2), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowTcpPortSrc.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTcpPortSrc.setDescription('This object indicates the source TCP port number of the corresponding traffic flow.')
cfmFlowTcpPortDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 9, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowTcpPortDst.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTcpPortDst.setDescription('This object indicates the destination TCP port number of the corresponding traffic flow.')
cfmFlowTcpTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowTcpTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowTcpTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device changed the cfmFlowTcpTable.')
cfmFlowRtpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 11), )
if mibBuilder.loadTexts: cfmFlowRtpTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpTable.setDescription('This table contains additional data relating to the RTP carrying the corresponding traffic flow. This table has a sparse dependent relationship on the cfmFlowTable.')
cfmFlowRtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 11, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowRtpEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpEntry.setDescription('An entry describes data relating to the RTP carrying the corresponding traffic flow. A device creates a row in the cfmFlowRtpTable when the flow monitor has data relating to the RTP carrying the corresponding traffic flow. The device destroys a row in this table when the corresponding traffic flow times out.')
cfmFlowRtpNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 11, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowRtpNext.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpNext.setDescription('This object indicates a reference to a row in another table containing additional data relating to the corresponding traffic flow.')
cfmFlowRtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowRtpVersion.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpVersion.setDescription('This object indicates the RTP version of the corresponding traffic flow.')
cfmFlowRtpSsrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowRtpSsrc.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpSsrc.setDescription('This object indicates the RTP synchronized source (SSRC) of the corresponding traffic flow.')
cfmFlowRtpPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowRtpPayloadType.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpPayloadType.setDescription('This object indicates the RTP payload type of the corresponding traffic flow.')
cfmFlowRtpTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 2, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowRtpTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowRtpTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device changed the cfmFlowRtpTable.')
cfmFlowMetrics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3))
cfmFlowMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1), )
if mibBuilder.loadTexts: cfmFlowMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsTable.setDescription('This table contains aggregate metrics and data relating to the collection of metrics for the traffic flows monitored by each of the flow monitors supported by the device. This table has a sparse dependent relationship on the cfmFlowTable, containing a row for each row in the cfmFlowTable for which the device is actively monitoring.')
cfmFlowMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmFlowMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsEntry.setDescription("An entry contains aggregate metrics and data relating to the collection of metrics for a corresponding traffic flow. The device creates a row in the cfmFlowMetricsTable when a flow monitor starts monitoring a traffic flow. Likewise, the device destroys a row in the cfmFlowMetricsTable when the corresponding flow monitor has ceased monitoring the traffic flow (e.g., when a traffic flow has timed out). Observe that the device does not destroy the row unless it has not received packets for the corresponding flow for an interval of time equal to the flow's expiration time, thereby giving an EMS/NMS ample time to retrieve any data relating to the flow.")
cfmFlowMetricsCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 1), FlowMetrics()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsCollected.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsCollected.setDescription('This object indicates the metrics collected by the corresponding flow monitor for the corresponding traffic flow.')
cfmFlowMetricsIntervalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntervalTime.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntervalTime.setDescription('This object indicates the length of the measurement interval for the corresponding traffic flow. The flow monitor computes the collected metrics for the corresponding traffic flow with a frequency equal to the inverse of the value of this column.')
cfmFlowMetricsMaxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsMaxIntervals.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsMaxIntervals.setDescription("This object indicates the maximum number of measurement intervals for which the corresponding flow monitor maintains metrics for the corresponding traffic flow. If the value of this column is '0', then the corresponding flow monitor does not maintain historical metrics for the corresponding traffic flow.")
cfmFlowMetricsElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 4), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsElapsedTime.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsElapsedTime.setDescription('This object indicates the time that has elapsed since the beginning of the current measurement interval.')
cfmFlowMetricsIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 5), Gauge32()).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntervals.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntervals.setDescription('This object indicates the number of measurement intervals for which data has been collected.')
cfmFlowMetricsInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 6), Gauge32()).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsInvalidIntervals.setDescription('This object indicates the number of measurement intervals in the set of collected measurement intervals that contain invalid data.')
cfmFlowMetricsConditionsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 7), FlowMonitorConditionsProfileOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsConditionsProfile.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsConditionsProfile.setDescription('This object indicates the conditions profile that contains the descriptions of the standing conditions monitored for the traffic flow. If the flow does not have an associated conditions profile, then the value of this column must be zero.')
cfmFlowMetricsConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 8), FlowMonitorConditions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsConditions.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsConditions.setDescription('This object indicates the current standing conditions for the corresponding traffic flow. If the flow does not have an associated conditions profile, then the value of this column must be the null string.')
cfmFlowMetricsAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 9), FlowMonitorConditions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsAlarms.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsAlarms.setDescription('This object indicates the current alarm conditions for the corresponding traffic flow. If the flow does not have an associated conditions profile, then the value of this column must be the null string.')
cfmFlowMetricsAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 10), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsAlarmSeverity.setDescription("This object indicates the highest severity alarm currently raised for the corresponding traffic flow. If no alarm is raised for the corresponding traffic flow, then the value of this column is 'cleared'.")
cfmFlowMetricsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsPkts.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsPkts.setDescription('This object indicates the total number of packets processed by the corresponding flow monitor for the corresponding traffic flow.')
cfmFlowMetricsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 12), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsOctets.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsOctets.setDescription('This object indicates the total number of octets contained by the packets processed by the corresponding flow monitor for the corresponding traffic flow.')
cfmFlowMetricsBitRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 13), FlowBitRateUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsBitRateUnits.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsBitRateUnits.setDescription('This object indicates the units for the corresponding instance of cfmFlowMetricsBitRate.')
cfmFlowMetricsBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsBitRate.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsBitRate.setDescription('This object indicates the average bit rate at which the corresponding flow monitor is processing data for the corresponding traffic flow. This value is cumulative over the lifetime of the traffic flow.')
cfmFlowMetricsPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 1, 1, 15), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsPktRate.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsPktRate.setDescription('This object indicates the average packet rate at which the corresponding flow monitor is processing data for the corresponding traffic flow. This value is cumulative over the lifetime of the traffic flow.')
cfmFlowMetricsTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device created or destroyed a row in cfmFlowMetricsTable.')
cfmFlowMetricsIntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3), )
if mibBuilder.loadTexts: cfmFlowMetricsIntTable.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntTable.setDescription('This table contains historic metrics for the traffic flows monitored by each of the flow monitors supported by the device. This table has an expansion dependent relationship on the cfmFlowMetricsTable, containing zero or more rows for each traffic flow.')
cfmFlowMetricsIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntNumber"))
if mibBuilder.loadTexts: cfmFlowMetricsIntEntry.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntEntry.setDescription('An entry describes metrics collected for a previous measurement interval for a corresponding traffic flow.')
cfmFlowMetricsIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfmFlowMetricsIntNumber.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntNumber.setDescription("This object indicates the interval number identifying the measurement interval. The measurement interval identified by the value '1' represents the most recent measurement interval, and the interval identified by the value (n) represents the interval immediately preceding the interval identified by the value (n-1).")
cfmFlowMetricsIntValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntValid.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntValid.setDescription('This object indicates whether the data for the measurement interval is valid.')
cfmFlowMetricsIntTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntTime.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntTime.setDescription('This object indicates the value of sysUpTime when the measurement interval was captured.')
cfmFlowMetricsIntConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 4), FlowMonitorConditions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntConditions.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntConditions.setDescription('This object indicates which standing conditions were asserted at least once during the measurement interval for the corresponding traffic flow.')
cfmFlowMetricsIntAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 5), FlowMonitorConditions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntAlarms.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntAlarms.setDescription('This object indicates which alarm conditions were raised at least once during the measurement interval for the corresponding traffic flow.')
cfmFlowMetricsIntAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 6), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntAlarmSeverity.setDescription("This object indicates the highest severity alarm raised during the measurement interval for the corresponding traffic flow. If no alarm was raised during the measurement interval for the corresponding traffic flow, then the value of this column is 'cleared'.")
cfmFlowMetricsIntPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 7), ReportIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntPkts.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntPkts.setDescription('This object indicates the number of packets processed by the corresponding flow monitor for the corresponding traffic flow during the measurement interval.')
cfmFlowMetricsIntOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 8), ReportIntervalCount()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntOctets.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntOctets.setDescription('This object indicates the number of octets contained by the packets processed by the corresponding flow monitor for the corresponding traffic flow during the measurement interval.')
cfmFlowMetricsIntBitRateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 9), FlowBitRateUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntBitRateUnits.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntBitRateUnits.setDescription('This object indicates the units for the corresponding instance of cfmFlowMetricsIntBitRate.')
cfmFlowMetricsIntBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 10), ReportIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntBitRate.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntBitRate.setDescription('This object indicates the bit rate at which the corresponding flow monitor processed data for the corresponding traffic flow during the measurement interval.')
cfmFlowMetricsIntPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 3, 3, 1, 11), ReportIntervalCount()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmFlowMetricsIntPktRate.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsIntPktRate.setDescription('This object indicates the packet rate at which the corresponding flow monitor processed data for the corresponding traffic flow during the measurement interval.')
cfmConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4))
cfmConditionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1), )
if mibBuilder.loadTexts: cfmConditionTable.setStatus('current')
if mibBuilder.loadTexts: cfmConditionTable.setDescription("This table lists the standing conditions monitored by the device. The table groups descriptions for standing conditions into condition profiles. The figure below illustrates the relationship between a flow monitor and a conditions profile. Observe that a conditions profile can contain the descriptions for the standing conditions monitored for more than one flow monitor. In this case, the instance of cfmFlowMonitorConditionsProfile for each of these flow monitors would reference the same conditions profile. +------------------------------------------------+ | flow monitor 1 | | | | cfmFlowMonitorConditionsProfile.1 = 42 -----+ | | | | | cfmFlowMonitorConditions.1 | | | N 2 1 0 | | | +-+-...-+-+-+-+ | | | | | | | | | | | | +-+-...-+-+-+-+ | | | ^ ^ ^ ^ | | | | | | | | | +--|-------|-|-|------------------------------|--+ | | | | | | | | | V | | | | +-----------------------------+ | | | | | conditions profile 42 | | | | | | +-------------------------+ | | | | +-----------------| cfmConditionsDescr.42.0 | | | | | | +-------------------------+ | | | | | +-------------------------+ | | | +-------------------| cfmConditionsDescr.42.1 | | | | | +-------------------------+ | | | | +-------------------------+ | | +---------------------| cfmConditionsDescr.42.2 | | | | +-------------------------+ | | | : | | | : | | | +-------------------------+ | +-----------------------------| cfmConditionsDescr.42.N | | | +-------------------------+ | +-----------------------------+ The figure below illustrates the relationship between a traffic flow and a conditions profile. Observe that a conditions profile can contain the descriptions for the standing conditions monitored for more than one traffic flow. In this case, the instance of cfmFlowMetricsConditionsProfile for each of these traffic flows would reference the same conditions profile. +------------------------------------------------+ | traffic flow 201 | | | | cfmFlowMetricsConditionsProfile.1.201 = 54 -+ | | | | | cfmFlowMetricsConditions.1.201 | | | N 2 1 0 | | | +-+-...-+-+-+-+ | | | | | | | | | | | | +-+-...-+-+-+-+ | | | ^ ^ ^ ^ | | | | | | | | | +--|-------|-|-|------------------------------|--+ | | | | | | | | | V | | | | +-----------------------------+ | | | | | conditions profile 54 | | | | | | +-------------------------+ | | | | +-----------------| cfmConditionsDescr.54.0 | | | | | | +-------------------------+ | | | | | +-------------------------+ | | | +-------------------| cfmConditionsDescr.54.1 | | | | | +-------------------------+ | | | | +-------------------------+ | | +---------------------| cfmConditionsDescr.54.2 | | | | +-------------------------+ | | | : | | | : | | | +-------------------------+ | +-----------------------------| cfmConditionsDescr.54.N | | | +-------------------------+ | +-----------------------------+ The figure below illustrates the relationship between the description of a standing condition and an alarm group if the standing condition indicates that the device aggregates the standing condition into an alarm group (i.e., the corresponding instance of cfmConditionAlarm is 'grouped'). +-----------------------------------------+ | conditions profile 42 | | +-------------------------------------+ | | | cfmConditionAlarm.42.9 = 'grouped' |<-------+ | | cfmConditionAlarmGroup.42.9 = 4 -+ | | | | +----------------------------------|--+ |<--+ | | | | | | +------------------------------------|----+ | | V | | +-----------------------------------------+ | | | alarm group 4 | | | | | | | | cfmAlarmGroupConditionsProfile.4 = 42 ------+ | | cfmAlarmGroupConditionId.4 = 9 ----------------+ | | +-----------------------------------------+")
cfmConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmConditionProfile"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmConditionId"))
if mibBuilder.loadTexts: cfmConditionEntry.setStatus('current')
if mibBuilder.loadTexts: cfmConditionEntry.setDescription('An entry describes a standing condition monitored by the device. The cfmConditionTable groups descriptions for standing conditions into condition profiles. A device creates a row in the cfmConditionTable when it has been configured to monitor a standing condition for an entity, such as a flow monitor or traffic flow. Likewise, the device destroys a row when it has been configured to cease monitoring a previously configured standing condition.')
cfmConditionProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 1), FlowMonitorConditionsProfile())
if mibBuilder.loadTexts: cfmConditionProfile.setStatus('current')
if mibBuilder.loadTexts: cfmConditionProfile.setDescription('This object indicates an arbitrary integer-value that uniquely identifies the condition profile that contains the standing condition. Observe that the value assigned to a standing condition does not necessarily persist across restars.')
cfmConditionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 2), FlowMonitorConditionIdentifier())
if mibBuilder.loadTexts: cfmConditionId.setStatus('current')
if mibBuilder.loadTexts: cfmConditionId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies the condition within the scope of the profile. The value of this column corresponds to the bit position in a binary string-value representing the standing (or alarm) conditions for an entity, such as a flow monitor or traffic flow. Observe that the value assigned to a standing condition does not necessarily persist across restarts.')
cfmConditionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionDescr.setStatus('current')
if mibBuilder.loadTexts: cfmConditionDescr.setDescription('This object indicates a human-readable description of the condition.')
cfmConditionMonitoredElement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionMonitoredElement.setStatus('current')
if mibBuilder.loadTexts: cfmConditionMonitoredElement.setDescription('This object indicates the monitored element used in determining the state of the standing condition.')
cfmConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("boolean", 2), ("risingThreshold", 3), ("fallingThreshold", 4), ("risingAndFallingThreshold", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionType.setStatus('current')
if mibBuilder.loadTexts: cfmConditionType.setDescription("This object indicates the type of condition: 'other' The implementation of the MIB does not recognize the condition described by this row. 'boolean' The value monitored only can have one of two values: 'false' or 'true'. In this case, the condition itself evaluates to 'true' if the value itself is 'true'. 'risingThreshold' The condition evaluates to 'true' if the current sample of the monitored value is greater than the rising threshold and the last sample is less than or equal to the rising threshold. 'fallingThreshold' The condition evaluates to 'true' if the current sample of the monitored value is less than the falling threshold and the last sample is greater than or equal to the falling threshold. 'risingAndFallingThreshold' The condition evaluates to 'true' if one of the two criteria is satisfied: 1) The current sample of the monitored value is greater than the rising threshold and the last sample is less than or equal to the rising threhsold. 2) The current sample of the monitored value is less than the falling threshold and the last sample is greater than or equal to the falling threshold.")
cfmConditionThreshRiseScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 6), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionThreshRiseScale.setStatus('current')
if mibBuilder.loadTexts: cfmConditionThreshRiseScale.setDescription("This object indicates the scaling factor for the corresponding instance of cfmConditionThreshRise. This value of this column only has relevance if the corresponding instance of cfmConditionType is 'risingThreshold' or 'risingAndFallingThreshold'.")
cfmConditionThreshRisePrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 7), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionThreshRisePrecision.setStatus('current')
if mibBuilder.loadTexts: cfmConditionThreshRisePrecision.setDescription("This object indicates the precision for the corresponding instance of cfmConditionThreshRise. This value of this column only has relevance if the corresponding instance of cfmConditionType is 'risingThreshold' or 'risingAndFallingThreshold'.")
cfmConditionThreshRise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 8), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionThreshRise.setStatus('current')
if mibBuilder.loadTexts: cfmConditionThreshRise.setDescription("This object indicates the value of the rising threshold. This value of this column only has relevance if the corresponding instance of cfmConditionType is 'risingThreshold' or 'risingAndFallingThreshold'.")
cfmConditionThreshFallScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 9), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionThreshFallScale.setStatus('current')
if mibBuilder.loadTexts: cfmConditionThreshFallScale.setDescription("This object indicates the scaling factor for the corresponding instance of cfmConditionThreshFall. The value of this column only has relevance if the corresponding instance of cfmConditionType is 'fallingThreshold' or 'risingAndFallingThreshold'.")
cfmConditionThreshFallPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 10), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionThreshFallPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmConditionThreshFallPrecision.setDescription("This object indicates the precision for the corresponding instance of cfmConditionThreshFall. The value of this column only has relevance if the corresponding instance of cfmConditionType is 'fallingThreshold' or 'risingAndFallingThreshold'.")
cfmConditionThreshFall = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 11), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionThreshFall.setStatus('current')
if mibBuilder.loadTexts: cfmConditionThreshFall.setDescription("This object indicates the value of the falling threshold. The value of this column only has relevance if the corresponding instance of cfmConditionType is 'fallingThreshold' or 'risingAndFallingThreshold'.")
cfmConditionSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("raw", 2), ("slidingWindowAvg", 3), ("expDecayingAvg", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionSampleType.setStatus('current')
if mibBuilder.loadTexts: cfmConditionSampleType.setDescription("This object indicates how the device samples the monitored value before determining whether to assert the condition: 'other' The implementation of the MIB does not recognize the how the device samples the monitored value. 'raw' The device samples the monitored value and uses this value to determine whether to assert the condition. 'slidingWindowAvg' The device samples the monitored value and maintains a average over a sliding window. It uses this value of this average to determine whether to assert the condition. The corresponding instance of cfmCOnditionSampleWindow indicates the length of the sliding window. 'slidingWindowAverage' The device samples the monitored value and maintains a exponentially decaying average over a sliding window. It uses this value of this average to determine whether to assert the condition. The corresponding instance of cfmCOnditionSampleWindow indicates the length of the sliding window.")
cfmConditionSampleWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionSampleWindow.setStatus('current')
if mibBuilder.loadTexts: cfmConditionSampleWindow.setDescription("This object indicates the sample window used by the device to compute an exponentially decaying average in the case that the corresponding instance of cfmConditionSampleType is 'averaged'. The value of this column only has relevance if the corresponding instance of cfmConditionSampleWindow is 'slidingWindowAvg' or 'expDecayingAvg.")
cfmConditionAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("discrete", 2), ("grouped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionAlarm.setStatus('current')
if mibBuilder.loadTexts: cfmConditionAlarm.setDescription("This object indicates whether the device treats the standing condition as an alarm condition: 'none' The device does not treat the standing condition as an alarm condition. 'discrete' The device treats the standing condition as an alarm condition. 'grouped' The device aggregates the standing condition into an alarm group.")
cfmConditionAlarmActions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 16), Bits().clone(namedValues=NamedValues(("syslog", 0), ("snmp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionAlarmActions.setStatus('current')
if mibBuilder.loadTexts: cfmConditionAlarmActions.setDescription("This object indicates the actions taken by the device when the alarm condition changes state: 'syslog' The device sends a syslog message. 'snmp' The device sends a cfmNotifyAlarm notification if and only if cfmNotifyEnable is set to 'true'. The value of this column only has relevance if the corresponding instance of cfmConditionAlarm is 'discrete'")
cfmConditionAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 17), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cfmConditionAlarmSeverity.setDescription("This object indicates the severity of the alarm condition. The value of this column only have relevance if the corresponding instance of cfmConditionAlarm is 'discrete'.")
cfmConditionAlarmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 1, 1, 18), FlowMonitorAlarmGroupIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: cfmConditionAlarmGroup.setDescription("This object indicates the alarm group the device aggregates the standing condition into. The value of this column only has relevance if the corresponding instance of cfmConditionAlarm is 'grouped'.")
cfmConditionTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 4, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmConditionTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmConditionTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device made a change to the cfmConditionTable.')
cfmAlarmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5))
cfmAlarmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1), )
if mibBuilder.loadTexts: cfmAlarmGroupTable.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupTable.setDescription('This table lists alarm groups maintained by the device.')
cfmAlarmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupId"))
if mibBuilder.loadTexts: cfmAlarmGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupEntry.setDescription("An entry describes an alarm group. An alarm group defines an alarm condition that is raised when a configured number of flows in a set of flows asserts a configured standing condition. The figure below illustrates the relationship between an alarm group, a conditions profile, and a flow set. +-----------------------------------------+ | conditions profile 42 | | +-------------------------------------+ | | | cfmConditionAlarm.42.9 = 'grouped' |<-------+ | | cfmConditionAlarmGroup.42.9 = 4 -+ | | | | +----------------------------------|--+ |<--+ | | | | | | +------------------------------------|----+ | | | | | v | | +-----------------------------------------+ | | | alarm group 4 | | | | | | | | cfmAlarmGroupConditionsProfile.4 = 42 ------+ | | cfmAlarmGroupConditionId.4 = 9 ----------------+ | cfmAlarmGroupFlowset.4 = 16 -------+ | | | | +------------------------------------|----+ | v +-----------------------------------------+ | flow set 16 | | | | +------------------------------------+ | | | cfmAlarmGroupFlowId.16.100 | | | +------------------------------------+ | | +------------------------------------+ | | | cfmAlarmGroupFlowId.16.101 | | | +------------------------------------+ | | +------------------------------------+ | | | cfmAlarmGroupFlowId.16.102 | | | +------------------------------------+ | | : | | : | | +------------------------------------+ | | | cfmAlarmGroupFlowId.16.Y | | | +------------------------------------+ | +-----------------------------------------+ A device creates a row in the cfmAlarmGroupTable when it configures a new alarm group. Likewise, the device destroys a row when the alarm group ceases to exist.")
cfmAlarmGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 1), FlowMonitorAlarmGroupIdentifier())
if mibBuilder.loadTexts: cfmAlarmGroupId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies the alarm group. Observe that the value assigned to an alarm group does not necessarily persist across restarts.')
cfmAlarmGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupDescr.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupDescr.setDescription('This object indicates a human-readable description of the alarm group.')
cfmAlarmGroupConditionsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 3), FlowMonitorConditionsProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupConditionsProfile.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupConditionsProfile.setDescription('This object indicates the conditions profile that contains the description of the standing profile aggregated by the alarm group.')
cfmAlarmGroupConditionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 4), FlowMonitorConditionIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupConditionId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupConditionId.setDescription('This object indicates the standing condition aggregated by the alarm group.')
cfmAlarmGroupFlowSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 5), FlowSetIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupFlowSet.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowSet.setDescription('This object indicates the set of traffic flows aggregated by the alarm group.')
cfmAlarmGroupFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 6), Gauge32()).setUnits('traffic flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupFlowCount.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowCount.setDescription('This object indicates the number of traffic flows in the set of traffic flows indicated by the corresponding instance of cfmAlarmGroupFlowSet.')
cfmAlarmGroupThresholdUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("flows", 2), ("percent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupThresholdUnits.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupThresholdUnits.setDescription("This object indicates the units for the corresponding instance of cfmAlarmGroupThreshold: 'other' The MIB implementation does not recognize the units in which the value of the corresponding instance of cfmAlarmGroupThreshold has been expressed. 'flows' The value of the corresponding instance of cfmAlarmGroupThreshold indicates a number of traffic flows. 'percent' The value of the corresponding instance of cfmAlarmGroupThreshold indicates a percentage of traffic flows.")
cfmAlarmGroupThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupThreshold.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupThreshold.setDescription("This object indicates a number of flows that must assert the standing condition indicated by the corresponding instance of cfmAlarmGroupCondition before raising an alarm. If the corresponding instance of cfmAlarmGroupThresholdUnits is 'percent', then the value of this column must be greater than or equal to zero and less than or equal to '100'.")
cfmAlarmGroupRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupRaised.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupRaised.setDescription('This object indicates whether the alarm group has raised an alarm.')
cfmAlarmGroupCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 1, 1, 10), Gauge32()).setUnits('traffic flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupCurrentCount.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupCurrentCount.setDescription('This object indicates the number of traffic flows currently asserting the standing condition aggregated by the alarm group.')
cfmAlarmGroupTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device made a change to the cfmAlarmGroupTable.')
cfmAlarmGroupFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 3), )
if mibBuilder.loadTexts: cfmAlarmGroupFlowTable.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowTable.setDescription('This table lists the traffic flows contained by each set of flows configured for the alarm groups contained by the cfmAlarmGroupTable.')
cfmAlarmGroupFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowSetId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowId"))
if mibBuilder.loadTexts: cfmAlarmGroupFlowEntry.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowEntry.setDescription('An entry describes a traffic flow contained by a set of flows. An alarm group aggregates a standing condition from a set of flows. cfmAlarmFlowSetId uniquely identifies a set of traffic flows. A device creates a row in the cfmAlarmGroupTable under one of the following circumstances: - It has configured a new alarm group, and hence a new set of traffic flows. - It has added a traffic flow to an existing set of flows. Likewise, a device destroys a row under one of the following circumstances: - It has destroyed the set of traffic flows. - It has removed the traffic flow from an existing set of flows.')
cfmAlarmGroupFlowSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 3, 1, 1), FlowSetIdentifier())
if mibBuilder.loadTexts: cfmAlarmGroupFlowSetId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowSetId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies the set of traffic flows that contains the traffic flow represented by the row. Observe that the value assigned to a flow set does not necessarily persist across restarts.')
cfmAlarmGroupFlowMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 3, 1, 2), FlowMonitorIdentifier())
if mibBuilder.loadTexts: cfmAlarmGroupFlowMonitorId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowMonitorId.setDescription('This object identifies the flow monitor responsible for the traffic flow.')
cfmAlarmGroupFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 3, 1, 3), FlowIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupFlowId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowId.setDescription('This object identifies the traffic flow.')
cfmAlarmGroupFlowTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 5, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmGroupFlowTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmGroupFlowTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device made a change to the cfmAlarmGroupTable.')
cfmAlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6))
cfmAlarmHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmAlarmHistorySize.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistorySize.setDescription('This object specifies the maximum number of rows the cfmAlarmHistoryTable can contain at any given time. If the device raises or clears an alarm and the cfmAlarmHistoryTable already contains a number of rows equal to the value of this object, then it destroys the oldest row before creating a new one.')
cfmAlarmHistoryLastId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistoryLastId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryLastId.setDescription('This object indicates the value of cfmAlarmHistoryId corresponding to the last row created in the cfmAlarmHistoryTable.')
cfmAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3), )
if mibBuilder.loadTexts: cfmAlarmHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryTable.setDescription('This table lists a history of the changes in the state of alarm conditions monitored by the device.')
cfmAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryId"))
if mibBuilder.loadTexts: cfmAlarmHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryEntry.setDescription('An entry describes the change in the state of an alarm condition observed by the device. The device creates a row in the cfmAlarmHistoryTable when it observes a change in the state of an alarm condition. The device destroys a row in the cfmAlarmHistoryTable when it needs to create a new row, but the number of rows contained by the cfmAlarmHistoryTable is equal to the value of cfmAlarmHistorySize.')
cfmAlarmHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cfmAlarmHistoryId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryId.setDescription('This object indicates an arbitrary integer-value that uniquely identifies the event. Observe that the value assigned to a alarm history entry does not necessarily persist across restarts.')
cfmAlarmHistoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("raised", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistoryType.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryType.setDescription("This object indicates the type of event: 'cleared' The event signaled an alarm condition transitioning to the cleared state. 'raised' The event signalled an alarm condition transitioning to the raised state.")
cfmAlarmHistoryEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistoryEntity.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryEntity.setDescription('This object indicates the entity that caused the event. If the alarm condition has an association with a flow monitor, then the value of this column is a row in the cfmFlowMonitorTable. If the alarm condition has an association with a traffic flow, then the value of this column is a row in the cfmFlowTable. If the alarm condition has an association with a alarm group, then the value of this column is a row in the cfmAlarmGroupTable.')
cfmAlarmHistoryConditionsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 4), FlowMonitorConditionsProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistoryConditionsProfile.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryConditionsProfile.setDescription('This object indicates the conditions profile containing the description of the alarm condition that changed state.')
cfmAlarmHistoryConditionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 5), FlowMonitorConditionIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistoryConditionId.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryConditionId.setDescription('This object indicates the alarm condition that changed state.')
cfmAlarmHistorySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 6), CiscoAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistorySeverity.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistorySeverity.setDescription('This object indicates the severity of the alarm condition that changed state.')
cfmAlarmHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 6, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmAlarmHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryTime.setDescription('This object indicates the value of sysUpTime when the alarm condition changed state. In the case the device updates standing/alarm conditions at the same time it captures a measurement interval, the value of this column should correlate with the corresponding value of cfmFlowMetricsIntTime. This assures that the EMS/NMS can easily correlate alarms with the metrics captured in the course of a measurement interval.')
cfmNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 7))
cfmNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 692, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cfmNotifyEnable.setDescription('This object specifies whether the device generates a cfmNotifyAlarm notification when an alarm condition changes state.')
cfmNotifyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 692, 0, 1)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryType"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryEntity"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryConditionsProfile"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryConditionId"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistorySeverity"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryTime"))
if mibBuilder.loadTexts: cfmNotifyAlarm.setStatus('current')
if mibBuilder.loadTexts: cfmNotifyAlarm.setDescription("The device generates this notification when an alarm condition has changed state and the value of cfmNOtifyEnable is 'true'.")
cfmMonitoredElements = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1))
cfmeOther = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 1))
if mibBuilder.loadTexts: cfmeOther.setStatus('current')
if mibBuilder.loadTexts: cfmeOther.setDescription('This object identifier represents a monitored element not recognized by this implementation of the MIB module.')
cfmeFlowCount = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 2))
if mibBuilder.loadTexts: cfmeFlowCount.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowCount.setDescription('This object identifier represents the monitored element describing the number of traffic flows currently monitored by a flow monitor (cfmFlowMonitorFlowCount).')
cfmeFlowTimeouts = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 3))
if mibBuilder.loadTexts: cfmeFlowTimeouts.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowTimeouts.setDescription('This object identifier represents the monitored element describing the number of traffic flows that expired during the last measurement interval.')
cfmeFlowStop = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 4))
if mibBuilder.loadTexts: cfmeFlowStop.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowStop.setDescription('This object identifier represents the monitored element describing the condition that arises when a flow monitor does not receive any packets for a traffic flow during the last measurement interval.')
cfmeFlowCumulativeBitRate = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 5))
if mibBuilder.loadTexts: cfmeFlowCumulativeBitRate.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowCumulativeBitRate.setDescription('This object identifier represents the monitored element describing the average rate at which a flow monitor processes bits contained by packets for a traffic flow (cfmFlowMetricsBitRate).')
cfmeFlowCumulativePktRate = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 6))
if mibBuilder.loadTexts: cfmeFlowCumulativePktRate.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowCumulativePktRate.setDescription('This object identifier represents the monitored element describing the average rate at which a flow monitor processes packets for a traffic flow (cfmFlowMetricsPktRate).')
cfmeFlowBitRate = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 7))
if mibBuilder.loadTexts: cfmeFlowBitRate.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowBitRate.setDescription('This object identifier represents the monitored element describing the average rate at which a flow monitor processes bits contained by packets for a traffic flow during the last measurement interval (cfmFlowMetricsIntBitRate).')
cfmeFlowPktRate = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 692, 3, 1, 8))
if mibBuilder.loadTexts: cfmeFlowPktRate.setStatus('current')
if mibBuilder.loadTexts: cfmeFlowPktRate.setDescription('This object identifier represents the monitored element describing the average rate at which a flow monitor processes packets for a traffic flow during the last measurement interval (cfmFlowMetricsIntPktRate).')
ciscoFlowMonitorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 1))
ciscoFlowMonitorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2))
ciscoFlowMonitorCompliance01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 1, 1)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowConditionsGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmAggregationGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmNotifySupportGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFlowMonitorCompliance01 = ciscoFlowMonitorCompliance01.setStatus('current')
if mibBuilder.loadTexts: ciscoFlowMonitorCompliance01.setDescription('This compliance statement specifies the minimal requirements an implementation must meet in order to claim full compliance with the definition of the CISCO-FLOW-MONITOR-MIB.')
cfmFlowMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 1)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorDescr"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorCaps"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorFlowCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorConditionsProfile"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorConditions"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarms"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarmSeverity"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarmCriticalCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarmMajorCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarmMinorCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarmWarningCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorAlarmInfoCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorTableChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFlowMonitorGroup = cfmFlowMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMonitorGroup.setDescription('This group contains objects describing flow monitors.')
cfmFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 2)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmFlowDescr"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowNext"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowCreateTime"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowDiscontinuityTime"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowExpirationTime"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowDirection"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowAdminStatus"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowOperStatus"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIngressType"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIngress"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowEgressType"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowEgress"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowL2VlanNext"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowL2VlanId"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowL2VlanCos"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowL2VlanTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpNext"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpAddrType"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpAddrSrc"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpAddrDst"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpValid"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpTrafficClass"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpHopLimit"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowIpTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowUdpNext"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowUdpPortSrc"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowUdpPortDst"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowUdpTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowTcpNext"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowTcpPortSrc"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowTcpPortDst"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowTcpTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowRtpNext"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowRtpVersion"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowRtpSsrc"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowRtpPayloadType"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowRtpTableChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFlowGroup = cfmFlowGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFlowGroup.setDescription('This group contains objects describing traffic flows.')
cfmFlowMetricsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 3)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsCollected"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntervalTime"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsMaxIntervals"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsElapsedTime"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntervals"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsInvalidIntervals"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsConditionsProfile"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsConditions"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsAlarms"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsAlarmSeverity"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsPkts"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsOctets"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsBitRateUnits"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsBitRate"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsPktRate"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntValid"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntTime"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntConditions"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntAlarms"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntAlarmSeverity"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntPkts"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntOctets"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntBitRateUnits"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntBitRate"), ("CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntPktRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFlowMetricsGroup = cfmFlowMetricsGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFlowMetricsGroup.setDescription('This group contains objects describing traffic flow metrics.')
cfmFlowConditionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 4)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmConditionDescr"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionMonitoredElement"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionType"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionThreshRiseScale"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionThreshRisePrecision"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionThreshRise"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionThreshFallScale"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionThreshFallPrecision"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionThreshFall"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionSampleType"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionSampleWindow"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionAlarm"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionAlarmActions"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionAlarmSeverity"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionAlarmGroup"), ("CISCO-FLOW-MONITOR-MIB", "cfmConditionTableChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmFlowConditionsGroup = cfmFlowConditionsGroup.setStatus('current')
if mibBuilder.loadTexts: cfmFlowConditionsGroup.setDescription('This group contains objects describing standing/alarm conditions.')
cfmAlarmAggregationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 5)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupDescr"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupConditionsProfile"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupConditionId"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowSet"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupThresholdUnits"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupThreshold"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupRaised"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupCurrentCount"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupTableChanged"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowId"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmGroupFlowTableChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmAlarmAggregationGroup = cfmAlarmAggregationGroup.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmAggregationGroup.setDescription('This group contains object describing alarm aggregation.')
cfmAlarmHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 6)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistorySize"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryLastId"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryType"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryEntity"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryConditionsProfile"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryConditionId"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistorySeverity"), ("CISCO-FLOW-MONITOR-MIB", "cfmAlarmHistoryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmAlarmHistoryGroup = cfmAlarmHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cfmAlarmHistoryGroup.setDescription('This group contains objects describing alarm history.')
cfmNotifySupportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 7)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmNotifySupportGroup = cfmNotifySupportGroup.setStatus('current')
if mibBuilder.loadTexts: cfmNotifySupportGroup.setDescription('This group contains objects supporting notification.')
cfmNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 692, 2, 2, 8)).setObjects(("CISCO-FLOW-MONITOR-MIB", "cfmNotifyAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmNotifyGroup = cfmNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: cfmNotifyGroup.setDescription('This group contains notifications supporting flow monitoring.')
mibBuilder.exportSymbols("CISCO-FLOW-MONITOR-MIB", cfmConditionThreshRise=cfmConditionThreshRise, cfmFlowRtpSsrc=cfmFlowRtpSsrc, cfmFlowMetricsIntValid=cfmFlowMetricsIntValid, PYSNMP_MODULE_ID=ciscoFlowMonitorMIB, cfmAlarmGroupFlowSet=cfmAlarmGroupFlowSet, cfmFlowMetricsConditionsProfile=cfmFlowMetricsConditionsProfile, cfmAlarmHistoryEntity=cfmAlarmHistoryEntity, cfmAlarmGroupFlowTableChanged=cfmAlarmGroupFlowTableChanged, cfmFlowL2VlanTable=cfmFlowL2VlanTable, cfmFlowMetricsIntOctets=cfmFlowMetricsIntOctets, cfmFlowConditionsGroup=cfmFlowConditionsGroup, cfmConditionThreshRiseScale=cfmConditionThreshRiseScale, cfmFlowMetricsEntry=cfmFlowMetricsEntry, cfmFlowGroup=cfmFlowGroup, cfmFlowMetricsBitRate=cfmFlowMetricsBitRate, cfmFlowMonitorAlarmInfoCount=cfmFlowMonitorAlarmInfoCount, cfmAlarmHistoryConditionsProfile=cfmAlarmHistoryConditionsProfile, cfmConditionThreshFallPrecision=cfmConditionThreshFallPrecision, cfmConditionAlarmGroup=cfmConditionAlarmGroup, cfmFlowMetricsInvalidIntervals=cfmFlowMetricsInvalidIntervals, cfmFlowMonitorAlarmCriticalCount=cfmFlowMonitorAlarmCriticalCount, cfmFlowUdpEntry=cfmFlowUdpEntry, cfmConditionThreshFall=cfmConditionThreshFall, cfmConditionThreshRisePrecision=cfmConditionThreshRisePrecision, cfmAlarmGroupThreshold=cfmAlarmGroupThreshold, cfmFlowRtpPayloadType=cfmFlowRtpPayloadType, cfmFlowTable=cfmFlowTable, cfmFlowTcpTableChanged=cfmFlowTcpTableChanged, cfmeFlowTimeouts=cfmeFlowTimeouts, cfmFlowIpNext=cfmFlowIpNext, cfmFlowTcpNext=cfmFlowTcpNext, cfmFlowMetricsBitRateUnits=cfmFlowMetricsBitRateUnits, cfmFlowMonitorEntry=cfmFlowMonitorEntry, cfmFlowMetricsIntConditions=cfmFlowMetricsIntConditions, cfmFlowMonitorConditions=cfmFlowMonitorConditions, cfmConditionSampleType=cfmConditionSampleType, cfmAlarmAggregationGroup=cfmAlarmAggregationGroup, cfmFlowMonitors=cfmFlowMonitors, cfmFlowMetricsIntAlarmSeverity=cfmFlowMetricsIntAlarmSeverity, cfmeFlowCount=cfmeFlowCount, cfmFlowMonitorId=cfmFlowMonitorId, cfmFlowIpHopLimit=cfmFlowIpHopLimit, cfmAlarmHistoryId=cfmAlarmHistoryId, cfmFlowMonitorAlarmMinorCount=cfmFlowMonitorAlarmMinorCount, cfmFlowTcpPortDst=cfmFlowTcpPortDst, cfmAlarmGroupId=cfmAlarmGroupId, cfmFlowL2VlanNext=cfmFlowL2VlanNext, ciscoFlowMonitorMIBGroups=ciscoFlowMonitorMIBGroups, cfmAlarmHistorySize=cfmAlarmHistorySize, cfmFlowMonitorAlarmWarningCount=cfmFlowMonitorAlarmWarningCount, cfmFlowMetricsGroup=cfmFlowMetricsGroup, cfmNotifySupportGroup=cfmNotifySupportGroup, cfmFlowMetricsConditions=cfmFlowMetricsConditions, ciscoFlowMonitorMIBIds=ciscoFlowMonitorMIBIds, cfmAlarmHistoryType=cfmAlarmHistoryType, cfmAlarmGroupFlowCount=cfmAlarmGroupFlowCount, cfmFlowRtpNext=cfmFlowRtpNext, cfmAlarmHistory=cfmAlarmHistory, cfmeFlowBitRate=cfmeFlowBitRate, cfmFlows=cfmFlows, cfmConditions=cfmConditions, cfmFlowUdpTableChanged=cfmFlowUdpTableChanged, cfmConditionAlarmActions=cfmConditionAlarmActions, cfmFlowL2VlanEntry=cfmFlowL2VlanEntry, cfmFlowMetricsIntEntry=cfmFlowMetricsIntEntry, cfmFlowUdpPortSrc=cfmFlowUdpPortSrc, cfmFlowTcpPortSrc=cfmFlowTcpPortSrc, cfmAlarmGroupDescr=cfmAlarmGroupDescr, cfmFlowIpTrafficClass=cfmFlowIpTrafficClass, cfmFlowL2VlanTableChanged=cfmFlowL2VlanTableChanged, cfmFlowMetricsOctets=cfmFlowMetricsOctets, cfmConditionTable=cfmConditionTable, cfmConditionAlarm=cfmConditionAlarm, cfmAlarmHistoryLastId=cfmAlarmHistoryLastId, ciscoFlowMonitorMIBCompliances=ciscoFlowMonitorMIBCompliances, ciscoFlowMonitorMIBConform=ciscoFlowMonitorMIBConform, cfmNotifyEnable=cfmNotifyEnable, cfmeFlowCumulativeBitRate=cfmeFlowCumulativeBitRate, cfmFlowRtpVersion=cfmFlowRtpVersion, cfmAlarmHistoryTime=cfmAlarmHistoryTime, cfmeFlowStop=cfmeFlowStop, cfmFlowTcpTable=cfmFlowTcpTable, cfmFlowMetricsAlarmSeverity=cfmFlowMetricsAlarmSeverity, cfmAlarmGroups=cfmAlarmGroups, cfmAlarmGroupCurrentCount=cfmAlarmGroupCurrentCount, cfmConditionTableChanged=cfmConditionTableChanged, cfmFlowDescr=cfmFlowDescr, cfmFlowMetricsPktRate=cfmFlowMetricsPktRate, cfmFlowMonitorAlarmMajorCount=cfmFlowMonitorAlarmMajorCount, cfmFlowTcpEntry=cfmFlowTcpEntry, cfmAlarmHistoryEntry=cfmAlarmHistoryEntry, ciscoFlowMonitorMIBObjects=ciscoFlowMonitorMIBObjects, cfmConditionEntry=cfmConditionEntry, cfmNotifyGroup=cfmNotifyGroup, cfmFlowMetricsPkts=cfmFlowMetricsPkts, cfmAlarmGroupFlowMonitorId=cfmAlarmGroupFlowMonitorId, cfmFlowMonitorCaps=cfmFlowMonitorCaps, cfmFlowTableChanged=cfmFlowTableChanged, cfmFlowMetricsMaxIntervals=cfmFlowMetricsMaxIntervals, cfmConditionProfile=cfmConditionProfile, cfmFlowUdpPortDst=cfmFlowUdpPortDst, cfmFlowIpAddrType=cfmFlowIpAddrType, cfmFlowIpTableChanged=cfmFlowIpTableChanged, cfmAlarmGroupThresholdUnits=cfmAlarmGroupThresholdUnits, cfmConditionId=cfmConditionId, cfmFlowUdpTable=cfmFlowUdpTable, cfmAlarmGroupFlowEntry=cfmAlarmGroupFlowEntry, cfmFlowEgress=cfmFlowEgress, cfmFlowMonitorFlowCount=cfmFlowMonitorFlowCount, cfmFlowL2VlanId=cfmFlowL2VlanId, cfmFlowNext=cfmFlowNext, cfmFlowMetricsIntNumber=cfmFlowMetricsIntNumber, cfmFlowIngressType=cfmFlowIngressType, cfmFlowMonitorTableChanged=cfmFlowMonitorTableChanged, cfmFlowId=cfmFlowId, cfmFlowMetricsIntervalTime=cfmFlowMetricsIntervalTime, cfmFlowMetricsIntBitRateUnits=cfmFlowMetricsIntBitRateUnits, cfmAlarmGroupConditionsProfile=cfmAlarmGroupConditionsProfile, cfmFlowMetricsTable=cfmFlowMetricsTable, cfmNotify=cfmNotify, cfmFlowAdminStatus=cfmFlowAdminStatus, cfmAlarmHistoryGroup=cfmAlarmHistoryGroup, cfmFlowMetricsElapsedTime=cfmFlowMetricsElapsedTime, cfmFlowMonitorAlarmSeverity=cfmFlowMonitorAlarmSeverity, cfmFlowMetricsIntBitRate=cfmFlowMetricsIntBitRate, ciscoFlowMonitorCompliance01=ciscoFlowMonitorCompliance01, ciscoFlowMonitorMIBNotifs=ciscoFlowMonitorMIBNotifs, cfmNotifyAlarm=cfmNotifyAlarm, cfmAlarmGroupTable=cfmAlarmGroupTable, cfmFlowMetricsIntTable=cfmFlowMetricsIntTable, cfmFlowMetricsCollected=cfmFlowMetricsCollected, cfmAlarmHistorySeverity=cfmAlarmHistorySeverity, cfmAlarmHistoryTable=cfmAlarmHistoryTable, cfmFlowMetricsIntAlarms=cfmFlowMetricsIntAlarms, cfmFlowDiscontinuityTime=cfmFlowDiscontinuityTime, cfmFlowDirection=cfmFlowDirection, cfmFlowEgressType=cfmFlowEgressType, cfmeFlowPktRate=cfmeFlowPktRate, cfmFlowRtpTableChanged=cfmFlowRtpTableChanged, cfmFlowMetricsAlarms=cfmFlowMetricsAlarms, cfmConditionSampleWindow=cfmConditionSampleWindow, cfmFlowExpirationTime=cfmFlowExpirationTime, cfmConditionType=cfmConditionType, cfmAlarmHistoryConditionId=cfmAlarmHistoryConditionId, cfmAlarmGroupFlowTable=cfmAlarmGroupFlowTable, cfmFlowMonitorAlarms=cfmFlowMonitorAlarms, cfmAlarmGroupEntry=cfmAlarmGroupEntry, cfmFlowRtpEntry=cfmFlowRtpEntry, cfmAlarmGroupFlowSetId=cfmAlarmGroupFlowSetId, cfmFlowIpEntry=cfmFlowIpEntry, cfmMonitoredElements=cfmMonitoredElements, cfmFlowMonitorGroup=cfmFlowMonitorGroup, cfmFlowMetricsTableChanged=cfmFlowMetricsTableChanged, cfmFlowOperStatus=cfmFlowOperStatus, cfmFlowIpAddrSrc=cfmFlowIpAddrSrc, cfmConditionDescr=cfmConditionDescr, ciscoFlowMonitorMIB=ciscoFlowMonitorMIB, cfmFlowIngress=cfmFlowIngress, cfmFlowMonitorTable=cfmFlowMonitorTable, cfmAlarmGroupRaised=cfmAlarmGroupRaised, cfmConditionMonitoredElement=cfmConditionMonitoredElement, cfmFlowIpAddrDst=cfmFlowIpAddrDst, cfmAlarmGroupConditionId=cfmAlarmGroupConditionId, cfmFlowUdpNext=cfmFlowUdpNext, cfmAlarmGroupTableChanged=cfmAlarmGroupTableChanged, cfmFlowMonitorDescr=cfmFlowMonitorDescr, cfmFlowCreateTime=cfmFlowCreateTime, cfmFlowRtpTable=cfmFlowRtpTable, cfmFlowMetricsIntPktRate=cfmFlowMetricsIntPktRate, cfmFlowIpTable=cfmFlowIpTable, cfmAlarmGroupFlowId=cfmAlarmGroupFlowId, cfmeFlowCumulativePktRate=cfmeFlowCumulativePktRate, cfmFlowMetricsIntervals=cfmFlowMetricsIntervals, cfmFlowIpValid=cfmFlowIpValid, cfmFlowMetrics=cfmFlowMetrics, cfmFlowMetricsIntPkts=cfmFlowMetricsIntPkts, cfmConditionThreshFallScale=cfmConditionThreshFallScale, cfmFlowL2VlanCos=cfmFlowL2VlanCos, cfmeOther=cfmeOther, cfmFlowEntry=cfmFlowEntry, cfmConditionAlarmSeverity=cfmConditionAlarmSeverity, cfmFlowMonitorConditionsProfile=cfmFlowMonitorConditionsProfile, cfmFlowMetricsIntTime=cfmFlowMetricsIntTime)
