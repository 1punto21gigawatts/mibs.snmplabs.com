#
# PySNMP MIB module CISCO-PTOPO-EXTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PTOPO-EXTN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ptopoConnEntry, = mibBuilder.importSymbols("PTOPO-MIB", "ptopoConnEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Counter64, Unsigned32, Integer32, MibIdentifier, Bits, Gauge32, ObjectIdentity, NotificationType, IpAddress, ModuleIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Unsigned32", "Integer32", "MibIdentifier", "Bits", "Gauge32", "ObjectIdentity", "NotificationType", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ciscoPtopoExtnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 261))
ciscoPtopoExtnMIB.setRevisions(('2002-05-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPtopoExtnMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoPtopoExtnMIB.setLastUpdated('200205120000Z')
if mibBuilder.loadTexts: ciscoPtopoExtnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoPtopoExtnMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dwdm@cisco.com')
if mibBuilder.loadTexts: ciscoPtopoExtnMIB.setDescription('This MIB module contains extensions to the PTOPO-MIB that provide support to distinguish between bidirectional and unidirectional physical topology connections. It also introduces a table that allows configuration of dynamic learning of the physical topology through the Cisco Discovery Protocol (CDP).')
ciscoPtopoExtnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 261, 1))
cPtopoConnExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 1), )
if mibBuilder.loadTexts: cPtopoConnExtTable.setStatus('current')
if mibBuilder.loadTexts: cPtopoConnExtTable.setDescription('This table augments the ptopoConnTable with information about the direction of physical network connections.')
cPtopoConnExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 1, 1), )
ptopoConnEntry.registerAugmentions(("CISCO-PTOPO-EXTN-MIB", "cPtopoConnExtEntry"))
cPtopoConnExtEntry.setIndexNames(*ptopoConnEntry.getIndexNames())
if mibBuilder.loadTexts: cPtopoConnExtEntry.setStatus('current')
if mibBuilder.loadTexts: cPtopoConnExtEntry.setDescription('An entry which contains additional information about the physical network connection contained in the ptopoConnEntry. It helps specify whether a remote connection endpoint is connected to the local port in the transmit direction, the receive direction or both directions.')
cPtopoConnExtLinkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPtopoConnExtLinkDirection.setStatus('current')
if mibBuilder.loadTexts: cPtopoConnExtLinkDirection.setDescription("The remote connection endpoint (identified by ptopoConnRemoteChassis and ptopoConnRemotePort of this row) may be connected to the local port (identified by ptopoConnLocalPort of this row) through either an unidirectional or bidirectional link. This object is used to indicate the directionality of the connection and in the case of unidirectional links this object indicates whether the remote connection endpoint is on the transmit or the receive link. For example, in case of optical interfaces where the transmitted and received signals travel on 2 different strands of fiber, it is possible that each fiber terminates at a different device. For instance, the transmit and receive fibers of the local port may be connected to different optical amplifiers. This object could then be used to indicate whether the remote device is on the transmit or the receive fiber of the local port. If the remote connection endpoint is connected to the transmit fiber of the local port then cPtopoConnExtLinkDirection is set to 'transmit'. If the remote connection endpoint is connected to the receive fiber of the local port then cPtopoConnExtLinkDirection is set to 'receive'. If both the transmit and receive fibers of the local port terminate at the same remote connection endpoint then this object is set to 'both'. Individual entries for 'transmit' and 'receive' should not be created in this case. Note that in the case of a port connected to a broadcast medium, there can be multiple entries associated with the port, with this object set to 'both'.")
cPtopoExtCdpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2), )
if mibBuilder.loadTexts: cPtopoExtCdpTable.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpTable.setDescription('This table contains a row for each local port (identified by the index of this table) for which the agent populates physical topology information (ptopoConnEntry) with neighbor information dynamically learned from the Cisco Discovery Protocol (CDP) running on this port or a proxy port.')
cPtopoExtCdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2, 1), ).setIndexNames((0, "CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpLocalChassis"), (0, "CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpLocalPort"))
if mibBuilder.loadTexts: cPtopoExtCdpEntry.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpEntry.setDescription('This entry contains objects for configuring discovery of physical topology information for a local port (identified by the index of this entry) via CDP.')
cPtopoExtCdpLocalChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: cPtopoExtCdpLocalChassis.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpLocalChassis.setDescription('The entPhysicalIndex value used to identify the chassis component associated with the local port for which physical topology information is discovered via CDP.')
cPtopoExtCdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2, 1, 2), PhysicalIndex())
if mibBuilder.loadTexts: cPtopoExtCdpLocalPort.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpLocalPort.setDescription('The entPhysicalIndex value used to identify the port component associated with the local port for which physical topology information is discovered via CDP.')
cPtopoExtCdpDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cdpDisabled", 1), ("interfaceDown", 2), ("waiting", 3), ("discovered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cPtopoExtCdpDiscoveryState.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpDiscoveryState.setDescription("This object indicates the state of physical topology discovery via CDP for the local port for which this row exists. The agent sets this object to 'cdpDisabled' if cPtopoExtCdpProxyIf is set to zero and CDP has not been configured to run on the local port, or if CDP has not been configured to run on the proxy interface whose ifIndex is given by the non-zero value in cPtopoExtCdpProxyIf. The enumeration 'interfaceDown' indicates that this interface is down, when cPtopoExtCdpProxyIf is set to zero, or the proxy interface is down, when cPtopoExtCdpProxyIf is set to a non-zero value. After this row has been activated, if CDP is running (on this or the proxy interface) and no neighbors have been discovered yet, the agent sets this object to 'waiting'. The 'discovered' state indicates that one or more neighbors have been discovered through CDP and the agent has accordingly created ptopoConnEntry(s) in the PTOPO-MIB.")
cPtopoExtCdpProxyIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPtopoExtCdpProxyIf.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpProxyIf.setDescription("Physical topology information for the local port (identified by cPtopoExtCdpLocalChassis and cPtopoExtCdpLocalPort of this row) can be discovered from CDP running on the local port, if it is CDP capable or from CDP running on a proxy interface. In the case of optical ports running wavelength division multiplexing, the physical connector port on which the CDP packet is transmitted is different from the logical interface representing the wavelength on which CDP is running. In such a case, physical topology for the 'external' optical port can be learned from CDP running on one of the wavelengths. This object is set to zero if physical topology information for the local port is discovered from CDP running on itself. Otherwise, this object contains the ifIndex value of the CDP capable interface which is being used as proxy to learn physical topology information for the local port. Usage of this object is possible only if the local port is the 'External Port', as specified in the CDP protocol, for the proxy interface. This object may be modified when the associated cPtopoExtCdpRowStatus object has a value of 'active'.")
cPtopoExtCdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 261, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cPtopoExtCdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpRowStatus.setDescription("This object is used to create and delete conceptual rows in the cPtopoExtCdpTable. Once this object has been set to 'active' it implies that physical topology discovery via CDP has been enabled for the local port for which this row exists. This object cannot be set to 'active' when any rows that were manually created for the local port exist in the ptopoConnTable. After this object is set to 'active', entries for this local port cannot be manually created in the ptopoConnTable. After the entry has been activated, this object cannot be set to any value other than 'destroy'. The row status never changes to 'notInService' after reaching the value 'active'.")
cPtopoExtnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 261, 3))
cPtopoExtnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 261, 3, 1))
cPtopoExtnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 261, 3, 2))
cPtopoExtnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 261, 3, 1, 1)).setObjects(("CISCO-PTOPO-EXTN-MIB", "cPtopoConnExtGroup"), ("CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpGroup"), ("CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpProxyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPtopoExtnCompliance = cPtopoExtnCompliance.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtnCompliance.setDescription('The compliance statement for SNMP entities that implement the CISCO-PTOPO-EXTN-MIB.')
cPtopoConnExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 261, 3, 2, 1)).setObjects(("CISCO-PTOPO-EXTN-MIB", "cPtopoConnExtLinkDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPtopoConnExtGroup = cPtopoConnExtGroup.setStatus('current')
if mibBuilder.loadTexts: cPtopoConnExtGroup.setDescription('The collection of objects which augment the ptopoConnTable in the PTOPO-MIB.')
cPtopoExtCdpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 261, 3, 2, 2)).setObjects(("CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpDiscoveryState"), ("CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPtopoExtCdpGroup = cPtopoExtCdpGroup.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpGroup.setDescription('The collection of objects which are required for configuration of physical topology discovery via CDP.')
cPtopoExtCdpProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 261, 3, 2, 3)).setObjects(("CISCO-PTOPO-EXTN-MIB", "cPtopoExtCdpProxyIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cPtopoExtCdpProxyGroup = cPtopoExtCdpProxyGroup.setStatus('current')
if mibBuilder.loadTexts: cPtopoExtCdpProxyGroup.setDescription('The collection of objects which are used to configure physical topology learning via CDP with support for use of CDP running on a proxy interface.')
mibBuilder.exportSymbols("CISCO-PTOPO-EXTN-MIB", cPtopoExtCdpLocalPort=cPtopoExtCdpLocalPort, cPtopoExtCdpRowStatus=cPtopoExtCdpRowStatus, PYSNMP_MODULE_ID=ciscoPtopoExtnMIB, cPtopoConnExtEntry=cPtopoConnExtEntry, cPtopoExtCdpProxyIf=cPtopoExtCdpProxyIf, cPtopoExtnCompliance=cPtopoExtnCompliance, cPtopoExtnCompliances=cPtopoExtnCompliances, cPtopoExtCdpProxyGroup=cPtopoExtCdpProxyGroup, cPtopoExtCdpLocalChassis=cPtopoExtCdpLocalChassis, cPtopoExtnConformance=cPtopoExtnConformance, cPtopoExtCdpDiscoveryState=cPtopoExtCdpDiscoveryState, cPtopoExtnGroups=cPtopoExtnGroups, cPtopoExtCdpEntry=cPtopoExtCdpEntry, cPtopoConnExtTable=cPtopoConnExtTable, cPtopoExtCdpGroup=cPtopoExtCdpGroup, ciscoPtopoExtnMIBObjects=ciscoPtopoExtnMIBObjects, cPtopoExtCdpTable=cPtopoExtCdpTable, cPtopoConnExtLinkDirection=cPtopoConnExtLinkDirection, cPtopoConnExtGroup=cPtopoConnExtGroup, ciscoPtopoExtnMIB=ciscoPtopoExtnMIB)
